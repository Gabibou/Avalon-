
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da58  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08011c38  08011c38  00011c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d20  08011d20  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011d20  08011d20  00011d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d28  08011d28  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d28  08011d28  00011d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d2c  08011d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001eac  200001e8  08011f18  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002094  08011f18  00022094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030aba  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006240  00000000  00000000  00050cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002370  00000000  00000000  00056f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000020d8  00000000  00000000  00059288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031bfb  00000000  00000000  0005b360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031512  00000000  00000000  0008cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012791d  00000000  00000000  000be46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e5d8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095b4  00000000  00000000  001e5ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	200001e8 	.word	0x200001e8
 80041fc:	00000000 	.word	0x00000000
 8004200:	08011c20 	.word	0x08011c20

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	200001ec 	.word	0x200001ec
 800421c:	08011c20 	.word	0x08011c20

08004220 <__aeabi_uldivmod>:
 8004220:	b953      	cbnz	r3, 8004238 <__aeabi_uldivmod+0x18>
 8004222:	b94a      	cbnz	r2, 8004238 <__aeabi_uldivmod+0x18>
 8004224:	2900      	cmp	r1, #0
 8004226:	bf08      	it	eq
 8004228:	2800      	cmpeq	r0, #0
 800422a:	bf1c      	itt	ne
 800422c:	f04f 31ff 	movne.w	r1, #4294967295
 8004230:	f04f 30ff 	movne.w	r0, #4294967295
 8004234:	f000 b974 	b.w	8004520 <__aeabi_idiv0>
 8004238:	f1ad 0c08 	sub.w	ip, sp, #8
 800423c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004240:	f000 f806 	bl	8004250 <__udivmoddi4>
 8004244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800424c:	b004      	add	sp, #16
 800424e:	4770      	bx	lr

08004250 <__udivmoddi4>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	9d08      	ldr	r5, [sp, #32]
 8004256:	4604      	mov	r4, r0
 8004258:	468e      	mov	lr, r1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d14d      	bne.n	80042fa <__udivmoddi4+0xaa>
 800425e:	428a      	cmp	r2, r1
 8004260:	4694      	mov	ip, r2
 8004262:	d969      	bls.n	8004338 <__udivmoddi4+0xe8>
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b152      	cbz	r2, 8004280 <__udivmoddi4+0x30>
 800426a:	fa01 f302 	lsl.w	r3, r1, r2
 800426e:	f1c2 0120 	rsb	r1, r2, #32
 8004272:	fa20 f101 	lsr.w	r1, r0, r1
 8004276:	fa0c fc02 	lsl.w	ip, ip, r2
 800427a:	ea41 0e03 	orr.w	lr, r1, r3
 800427e:	4094      	lsls	r4, r2
 8004280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004284:	0c21      	lsrs	r1, r4, #16
 8004286:	fbbe f6f8 	udiv	r6, lr, r8
 800428a:	fa1f f78c 	uxth.w	r7, ip
 800428e:	fb08 e316 	mls	r3, r8, r6, lr
 8004292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004296:	fb06 f107 	mul.w	r1, r6, r7
 800429a:	4299      	cmp	r1, r3
 800429c:	d90a      	bls.n	80042b4 <__udivmoddi4+0x64>
 800429e:	eb1c 0303 	adds.w	r3, ip, r3
 80042a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80042a6:	f080 811f 	bcs.w	80044e8 <__udivmoddi4+0x298>
 80042aa:	4299      	cmp	r1, r3
 80042ac:	f240 811c 	bls.w	80044e8 <__udivmoddi4+0x298>
 80042b0:	3e02      	subs	r6, #2
 80042b2:	4463      	add	r3, ip
 80042b4:	1a5b      	subs	r3, r3, r1
 80042b6:	b2a4      	uxth	r4, r4
 80042b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80042bc:	fb08 3310 	mls	r3, r8, r0, r3
 80042c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80042c4:	fb00 f707 	mul.w	r7, r0, r7
 80042c8:	42a7      	cmp	r7, r4
 80042ca:	d90a      	bls.n	80042e2 <__udivmoddi4+0x92>
 80042cc:	eb1c 0404 	adds.w	r4, ip, r4
 80042d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d4:	f080 810a 	bcs.w	80044ec <__udivmoddi4+0x29c>
 80042d8:	42a7      	cmp	r7, r4
 80042da:	f240 8107 	bls.w	80044ec <__udivmoddi4+0x29c>
 80042de:	4464      	add	r4, ip
 80042e0:	3802      	subs	r0, #2
 80042e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80042e6:	1be4      	subs	r4, r4, r7
 80042e8:	2600      	movs	r6, #0
 80042ea:	b11d      	cbz	r5, 80042f4 <__udivmoddi4+0xa4>
 80042ec:	40d4      	lsrs	r4, r2
 80042ee:	2300      	movs	r3, #0
 80042f0:	e9c5 4300 	strd	r4, r3, [r5]
 80042f4:	4631      	mov	r1, r6
 80042f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fa:	428b      	cmp	r3, r1
 80042fc:	d909      	bls.n	8004312 <__udivmoddi4+0xc2>
 80042fe:	2d00      	cmp	r5, #0
 8004300:	f000 80ef 	beq.w	80044e2 <__udivmoddi4+0x292>
 8004304:	2600      	movs	r6, #0
 8004306:	e9c5 0100 	strd	r0, r1, [r5]
 800430a:	4630      	mov	r0, r6
 800430c:	4631      	mov	r1, r6
 800430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004312:	fab3 f683 	clz	r6, r3
 8004316:	2e00      	cmp	r6, #0
 8004318:	d14a      	bne.n	80043b0 <__udivmoddi4+0x160>
 800431a:	428b      	cmp	r3, r1
 800431c:	d302      	bcc.n	8004324 <__udivmoddi4+0xd4>
 800431e:	4282      	cmp	r2, r0
 8004320:	f200 80f9 	bhi.w	8004516 <__udivmoddi4+0x2c6>
 8004324:	1a84      	subs	r4, r0, r2
 8004326:	eb61 0303 	sbc.w	r3, r1, r3
 800432a:	2001      	movs	r0, #1
 800432c:	469e      	mov	lr, r3
 800432e:	2d00      	cmp	r5, #0
 8004330:	d0e0      	beq.n	80042f4 <__udivmoddi4+0xa4>
 8004332:	e9c5 4e00 	strd	r4, lr, [r5]
 8004336:	e7dd      	b.n	80042f4 <__udivmoddi4+0xa4>
 8004338:	b902      	cbnz	r2, 800433c <__udivmoddi4+0xec>
 800433a:	deff      	udf	#255	; 0xff
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	2a00      	cmp	r2, #0
 8004342:	f040 8092 	bne.w	800446a <__udivmoddi4+0x21a>
 8004346:	eba1 010c 	sub.w	r1, r1, ip
 800434a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800434e:	fa1f fe8c 	uxth.w	lr, ip
 8004352:	2601      	movs	r6, #1
 8004354:	0c20      	lsrs	r0, r4, #16
 8004356:	fbb1 f3f7 	udiv	r3, r1, r7
 800435a:	fb07 1113 	mls	r1, r7, r3, r1
 800435e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004362:	fb0e f003 	mul.w	r0, lr, r3
 8004366:	4288      	cmp	r0, r1
 8004368:	d908      	bls.n	800437c <__udivmoddi4+0x12c>
 800436a:	eb1c 0101 	adds.w	r1, ip, r1
 800436e:	f103 38ff 	add.w	r8, r3, #4294967295
 8004372:	d202      	bcs.n	800437a <__udivmoddi4+0x12a>
 8004374:	4288      	cmp	r0, r1
 8004376:	f200 80cb 	bhi.w	8004510 <__udivmoddi4+0x2c0>
 800437a:	4643      	mov	r3, r8
 800437c:	1a09      	subs	r1, r1, r0
 800437e:	b2a4      	uxth	r4, r4
 8004380:	fbb1 f0f7 	udiv	r0, r1, r7
 8004384:	fb07 1110 	mls	r1, r7, r0, r1
 8004388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800438c:	fb0e fe00 	mul.w	lr, lr, r0
 8004390:	45a6      	cmp	lr, r4
 8004392:	d908      	bls.n	80043a6 <__udivmoddi4+0x156>
 8004394:	eb1c 0404 	adds.w	r4, ip, r4
 8004398:	f100 31ff 	add.w	r1, r0, #4294967295
 800439c:	d202      	bcs.n	80043a4 <__udivmoddi4+0x154>
 800439e:	45a6      	cmp	lr, r4
 80043a0:	f200 80bb 	bhi.w	800451a <__udivmoddi4+0x2ca>
 80043a4:	4608      	mov	r0, r1
 80043a6:	eba4 040e 	sub.w	r4, r4, lr
 80043aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80043ae:	e79c      	b.n	80042ea <__udivmoddi4+0x9a>
 80043b0:	f1c6 0720 	rsb	r7, r6, #32
 80043b4:	40b3      	lsls	r3, r6
 80043b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80043ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80043be:	fa20 f407 	lsr.w	r4, r0, r7
 80043c2:	fa01 f306 	lsl.w	r3, r1, r6
 80043c6:	431c      	orrs	r4, r3
 80043c8:	40f9      	lsrs	r1, r7
 80043ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80043ce:	fa00 f306 	lsl.w	r3, r0, r6
 80043d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80043d6:	0c20      	lsrs	r0, r4, #16
 80043d8:	fa1f fe8c 	uxth.w	lr, ip
 80043dc:	fb09 1118 	mls	r1, r9, r8, r1
 80043e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80043e4:	fb08 f00e 	mul.w	r0, r8, lr
 80043e8:	4288      	cmp	r0, r1
 80043ea:	fa02 f206 	lsl.w	r2, r2, r6
 80043ee:	d90b      	bls.n	8004408 <__udivmoddi4+0x1b8>
 80043f0:	eb1c 0101 	adds.w	r1, ip, r1
 80043f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80043f8:	f080 8088 	bcs.w	800450c <__udivmoddi4+0x2bc>
 80043fc:	4288      	cmp	r0, r1
 80043fe:	f240 8085 	bls.w	800450c <__udivmoddi4+0x2bc>
 8004402:	f1a8 0802 	sub.w	r8, r8, #2
 8004406:	4461      	add	r1, ip
 8004408:	1a09      	subs	r1, r1, r0
 800440a:	b2a4      	uxth	r4, r4
 800440c:	fbb1 f0f9 	udiv	r0, r1, r9
 8004410:	fb09 1110 	mls	r1, r9, r0, r1
 8004414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004418:	fb00 fe0e 	mul.w	lr, r0, lr
 800441c:	458e      	cmp	lr, r1
 800441e:	d908      	bls.n	8004432 <__udivmoddi4+0x1e2>
 8004420:	eb1c 0101 	adds.w	r1, ip, r1
 8004424:	f100 34ff 	add.w	r4, r0, #4294967295
 8004428:	d26c      	bcs.n	8004504 <__udivmoddi4+0x2b4>
 800442a:	458e      	cmp	lr, r1
 800442c:	d96a      	bls.n	8004504 <__udivmoddi4+0x2b4>
 800442e:	3802      	subs	r0, #2
 8004430:	4461      	add	r1, ip
 8004432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004436:	fba0 9402 	umull	r9, r4, r0, r2
 800443a:	eba1 010e 	sub.w	r1, r1, lr
 800443e:	42a1      	cmp	r1, r4
 8004440:	46c8      	mov	r8, r9
 8004442:	46a6      	mov	lr, r4
 8004444:	d356      	bcc.n	80044f4 <__udivmoddi4+0x2a4>
 8004446:	d053      	beq.n	80044f0 <__udivmoddi4+0x2a0>
 8004448:	b15d      	cbz	r5, 8004462 <__udivmoddi4+0x212>
 800444a:	ebb3 0208 	subs.w	r2, r3, r8
 800444e:	eb61 010e 	sbc.w	r1, r1, lr
 8004452:	fa01 f707 	lsl.w	r7, r1, r7
 8004456:	fa22 f306 	lsr.w	r3, r2, r6
 800445a:	40f1      	lsrs	r1, r6
 800445c:	431f      	orrs	r7, r3
 800445e:	e9c5 7100 	strd	r7, r1, [r5]
 8004462:	2600      	movs	r6, #0
 8004464:	4631      	mov	r1, r6
 8004466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446a:	f1c2 0320 	rsb	r3, r2, #32
 800446e:	40d8      	lsrs	r0, r3
 8004470:	fa0c fc02 	lsl.w	ip, ip, r2
 8004474:	fa21 f303 	lsr.w	r3, r1, r3
 8004478:	4091      	lsls	r1, r2
 800447a:	4301      	orrs	r1, r0
 800447c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004480:	fa1f fe8c 	uxth.w	lr, ip
 8004484:	fbb3 f0f7 	udiv	r0, r3, r7
 8004488:	fb07 3610 	mls	r6, r7, r0, r3
 800448c:	0c0b      	lsrs	r3, r1, #16
 800448e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004492:	fb00 f60e 	mul.w	r6, r0, lr
 8004496:	429e      	cmp	r6, r3
 8004498:	fa04 f402 	lsl.w	r4, r4, r2
 800449c:	d908      	bls.n	80044b0 <__udivmoddi4+0x260>
 800449e:	eb1c 0303 	adds.w	r3, ip, r3
 80044a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80044a6:	d22f      	bcs.n	8004508 <__udivmoddi4+0x2b8>
 80044a8:	429e      	cmp	r6, r3
 80044aa:	d92d      	bls.n	8004508 <__udivmoddi4+0x2b8>
 80044ac:	3802      	subs	r0, #2
 80044ae:	4463      	add	r3, ip
 80044b0:	1b9b      	subs	r3, r3, r6
 80044b2:	b289      	uxth	r1, r1
 80044b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80044b8:	fb07 3316 	mls	r3, r7, r6, r3
 80044bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80044c0:	fb06 f30e 	mul.w	r3, r6, lr
 80044c4:	428b      	cmp	r3, r1
 80044c6:	d908      	bls.n	80044da <__udivmoddi4+0x28a>
 80044c8:	eb1c 0101 	adds.w	r1, ip, r1
 80044cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80044d0:	d216      	bcs.n	8004500 <__udivmoddi4+0x2b0>
 80044d2:	428b      	cmp	r3, r1
 80044d4:	d914      	bls.n	8004500 <__udivmoddi4+0x2b0>
 80044d6:	3e02      	subs	r6, #2
 80044d8:	4461      	add	r1, ip
 80044da:	1ac9      	subs	r1, r1, r3
 80044dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80044e0:	e738      	b.n	8004354 <__udivmoddi4+0x104>
 80044e2:	462e      	mov	r6, r5
 80044e4:	4628      	mov	r0, r5
 80044e6:	e705      	b.n	80042f4 <__udivmoddi4+0xa4>
 80044e8:	4606      	mov	r6, r0
 80044ea:	e6e3      	b.n	80042b4 <__udivmoddi4+0x64>
 80044ec:	4618      	mov	r0, r3
 80044ee:	e6f8      	b.n	80042e2 <__udivmoddi4+0x92>
 80044f0:	454b      	cmp	r3, r9
 80044f2:	d2a9      	bcs.n	8004448 <__udivmoddi4+0x1f8>
 80044f4:	ebb9 0802 	subs.w	r8, r9, r2
 80044f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80044fc:	3801      	subs	r0, #1
 80044fe:	e7a3      	b.n	8004448 <__udivmoddi4+0x1f8>
 8004500:	4646      	mov	r6, r8
 8004502:	e7ea      	b.n	80044da <__udivmoddi4+0x28a>
 8004504:	4620      	mov	r0, r4
 8004506:	e794      	b.n	8004432 <__udivmoddi4+0x1e2>
 8004508:	4640      	mov	r0, r8
 800450a:	e7d1      	b.n	80044b0 <__udivmoddi4+0x260>
 800450c:	46d0      	mov	r8, sl
 800450e:	e77b      	b.n	8004408 <__udivmoddi4+0x1b8>
 8004510:	3b02      	subs	r3, #2
 8004512:	4461      	add	r1, ip
 8004514:	e732      	b.n	800437c <__udivmoddi4+0x12c>
 8004516:	4630      	mov	r0, r6
 8004518:	e709      	b.n	800432e <__udivmoddi4+0xde>
 800451a:	4464      	add	r4, ip
 800451c:	3802      	subs	r0, #2
 800451e:	e742      	b.n	80043a6 <__udivmoddi4+0x156>

08004520 <__aeabi_idiv0>:
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800452a:	463b      	mov	r3, r7
 800452c:	2220      	movs	r2, #32
 800452e:	2100      	movs	r1, #0
 8004530:	4618      	mov	r0, r3
 8004532:	f00d fb6d 	bl	8011c10 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004536:	4b3a      	ldr	r3, [pc, #232]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004538:	4a3a      	ldr	r2, [pc, #232]	; (8004624 <MX_ADC2_Init+0x100>)
 800453a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 800453c:	4b38      	ldr	r3, [pc, #224]	; (8004620 <MX_ADC2_Init+0xfc>)
 800453e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004542:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004544:	4b36      	ldr	r3, [pc, #216]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004546:	2200      	movs	r2, #0
 8004548:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800454a:	4b35      	ldr	r3, [pc, #212]	; (8004620 <MX_ADC2_Init+0xfc>)
 800454c:	2200      	movs	r2, #0
 800454e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004556:	4b32      	ldr	r3, [pc, #200]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004558:	2201      	movs	r2, #1
 800455a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800455c:	4b30      	ldr	r3, [pc, #192]	; (8004620 <MX_ADC2_Init+0xfc>)
 800455e:	2204      	movs	r2, #4
 8004560:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004568:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <MX_ADC2_Init+0xfc>)
 800456a:	2201      	movs	r2, #1
 800456c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 800456e:	4b2c      	ldr	r3, [pc, #176]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004570:	2203      	movs	r2, #3
 8004572:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004574:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800457c:	4b28      	ldr	r3, [pc, #160]	; (8004620 <MX_ADC2_Init+0xfc>)
 800457e:	2200      	movs	r2, #0
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004582:	4b27      	ldr	r3, [pc, #156]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <MX_ADC2_Init+0xfc>)
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004590:	4b23      	ldr	r3, [pc, #140]	; (8004620 <MX_ADC2_Init+0xfc>)
 8004592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004598:	4b21      	ldr	r3, [pc, #132]	; (8004620 <MX_ADC2_Init+0xfc>)
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80045a0:	481f      	ldr	r0, [pc, #124]	; (8004620 <MX_ADC2_Init+0xfc>)
 80045a2:	f001 fa3d 	bl	8005a20 <HAL_ADC_Init>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80045ac:	f000 fb2a 	bl	8004c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	; (8004628 <MX_ADC2_Init+0x104>)
 80045b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80045b4:	2306      	movs	r3, #6
 80045b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80045b8:	2304      	movs	r3, #4
 80045ba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <MX_ADC2_Init+0x108>)
 80045be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80045c0:	2304      	movs	r3, #4
 80045c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045c8:	463b      	mov	r3, r7
 80045ca:	4619      	mov	r1, r3
 80045cc:	4814      	ldr	r0, [pc, #80]	; (8004620 <MX_ADC2_Init+0xfc>)
 80045ce:	f001 fbe9 	bl	8005da4 <HAL_ADC_ConfigChannel>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 80045d8:	f000 fb14 	bl	8004c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80045dc:	4b14      	ldr	r3, [pc, #80]	; (8004630 <MX_ADC2_Init+0x10c>)
 80045de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80045e0:	230c      	movs	r3, #12
 80045e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045e4:	463b      	mov	r3, r7
 80045e6:	4619      	mov	r1, r3
 80045e8:	480d      	ldr	r0, [pc, #52]	; (8004620 <MX_ADC2_Init+0xfc>)
 80045ea:	f001 fbdb 	bl	8005da4 <HAL_ADC_ConfigChannel>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80045f4:	f000 fb06 	bl	8004c04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80045f8:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <MX_ADC2_Init+0x110>)
 80045fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80045fc:	2312      	movs	r3, #18
 80045fe:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004600:	237f      	movs	r3, #127	; 0x7f
 8004602:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004604:	463b      	mov	r3, r7
 8004606:	4619      	mov	r1, r3
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <MX_ADC2_Init+0xfc>)
 800460a:	f001 fbcb 	bl	8005da4 <HAL_ADC_ConfigChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004614:	f000 faf6 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004618:	bf00      	nop
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000204 	.word	0x20000204
 8004624:	50000100 	.word	0x50000100
 8004628:	04300002 	.word	0x04300002
 800462c:	407f0000 	.word	0x407f0000
 8004630:	19200040 	.word	0x19200040
 8004634:	2a000400 	.word	0x2a000400

08004638 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0a0      	sub	sp, #128	; 0x80
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004640:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004650:	f107 0318 	add.w	r3, r7, #24
 8004654:	2254      	movs	r2, #84	; 0x54
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f00d fad9 	bl	8011c10 <memset>
  if(adcHandle->Instance==ADC2)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a4c      	ldr	r2, [pc, #304]	; (8004794 <HAL_ADC_MspInit+0x15c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	f040 8090 	bne.w	800478a <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004670:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004674:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004676:	f107 0318 	add.w	r3, r7, #24
 800467a:	4618      	mov	r0, r3
 800467c:	f005 fe3a 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8004686:	f000 fabd 	bl	8004c04 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800468a:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_ADC_MspInit+0x160>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4a42      	ldr	r2, [pc, #264]	; (8004798 <HAL_ADC_MspInit+0x160>)
 8004690:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004694:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_ADC_MspInit+0x160>)
 8004698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046a8:	f043 0320 	orr.w	r3, r3, #32
 80046ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046ae:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046be:	4a36      	ldr	r2, [pc, #216]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046c0:	f043 0304 	orr.w	r3, r3, #4
 80046c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c6:	4b34      	ldr	r3, [pc, #208]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d2:	4b31      	ldr	r3, [pc, #196]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d6:	4a30      	ldr	r2, [pc, #192]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046d8:	f043 0301 	orr.w	r3, r3, #1
 80046dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_ADC_MspInit+0x160>)
 80046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80046ea:	2302      	movs	r3, #2
 80046ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046ee:	2303      	movs	r3, #3
 80046f0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80046fa:	4619      	mov	r1, r3
 80046fc:	4827      	ldr	r0, [pc, #156]	; (800479c <HAL_ADC_MspInit+0x164>)
 80046fe:	f002 faeb 	bl	8006cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004702:	2303      	movs	r3, #3
 8004704:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004706:	2303      	movs	r3, #3
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800470e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004712:	4619      	mov	r1, r3
 8004714:	4822      	ldr	r0, [pc, #136]	; (80047a0 <HAL_ADC_MspInit+0x168>)
 8004716:	f002 fadf 	bl	8006cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800471a:	2303      	movs	r3, #3
 800471c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800471e:	2303      	movs	r3, #3
 8004720:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004730:	f002 fad2 	bl	8006cd8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 8004734:	4b1b      	ldr	r3, [pc, #108]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <HAL_ADC_MspInit+0x170>)
 8004738:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 800473c:	2224      	movs	r2, #36	; 0x24
 800473e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004740:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004742:	2200      	movs	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004746:	4b17      	ldr	r3, [pc, #92]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800474c:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004758:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 800475c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004760:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004768:	4b0e      	ldr	r3, [pc, #56]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800476e:	480d      	ldr	r0, [pc, #52]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004770:	f002 f838 	bl	80067e4 <HAL_DMA_Init>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 800477a:	f000 fa43 	bl	8004c04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a08      	ldr	r2, [pc, #32]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004782:	655a      	str	r2, [r3, #84]	; 0x54
 8004784:	4a07      	ldr	r2, [pc, #28]	; (80047a4 <HAL_ADC_MspInit+0x16c>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800478a:	bf00      	nop
 800478c:	3780      	adds	r7, #128	; 0x80
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	50000100 	.word	0x50000100
 8004798:	40021000 	.word	0x40021000
 800479c:	48001400 	.word	0x48001400
 80047a0:	48000800 	.word	0x48000800
 80047a4:	20000270 	.word	0x20000270
 80047a8:	40020008 	.word	0x40020008

080047ac <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af04      	add	r7, sp, #16
 80047b2:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 80047b4:	2364      	movs	r3, #100	; 0x64
 80047b6:	9302      	str	r3, [sp, #8]
 80047b8:	2301      	movs	r3, #1
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	f107 030f 	add.w	r3, r7, #15
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	2301      	movs	r3, #1
 80047c4:	2237      	movs	r2, #55	; 0x37
 80047c6:	2150      	movs	r1, #80	; 0x50
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f002 fdff 	bl	80073cc <HAL_I2C_Mem_Read>
	return system_reg;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af04      	add	r7, sp, #16
 80047de:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 80047e0:	2364      	movs	r3, #100	; 0x64
 80047e2:	9302      	str	r3, [sp, #8]
 80047e4:	2301      	movs	r3, #1
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	f107 030f 	add.w	r3, r7, #15
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2301      	movs	r3, #1
 80047f0:	223f      	movs	r2, #63	; 0x3f
 80047f2:	2150      	movs	r1, #80	; 0x50
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f002 fde9 	bl	80073cc <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 80047fa:	7bfb      	ldrb	r3, [r7, #15]
 80047fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004800:	b2db      	uxtb	r3, r3
 8004802:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8004804:	230a      	movs	r3, #10
 8004806:	9302      	str	r3, [sp, #8]
 8004808:	2301      	movs	r3, #1
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	f107 030f 	add.w	r3, r7, #15
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2301      	movs	r3, #1
 8004814:	223f      	movs	r2, #63	; 0x3f
 8004816:	2150      	movs	r1, #80	; 0x50
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f002 fcc3 	bl	80071a4 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f7ff ffc4 	bl	80047ac <BNO055_ReadITStatus>
}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <MX_DMA_Init+0x50>)
 8004834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004836:	4a11      	ldr	r2, [pc, #68]	; (800487c <MX_DMA_Init+0x50>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	6493      	str	r3, [r2, #72]	; 0x48
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <MX_DMA_Init+0x50>)
 8004840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	607b      	str	r3, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <MX_DMA_Init+0x50>)
 800484c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <MX_DMA_Init+0x50>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6493      	str	r3, [r2, #72]	; 0x48
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <MX_DMA_Init+0x50>)
 8004858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8004862:	2200      	movs	r2, #0
 8004864:	2105      	movs	r1, #5
 8004866:	200b      	movs	r0, #11
 8004868:	f001 ff94 	bl	8006794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800486c:	200b      	movs	r0, #11
 800486e:	f001 ffab 	bl	80067c8 <HAL_NVIC_EnableIRQ>

}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000

08004880 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004886:	f107 0314 	add.w	r3, r7, #20
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	609a      	str	r2, [r3, #8]
 8004892:	60da      	str	r2, [r3, #12]
 8004894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004896:	4b37      	ldr	r3, [pc, #220]	; (8004974 <MX_GPIO_Init+0xf4>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	4a36      	ldr	r2, [pc, #216]	; (8004974 <MX_GPIO_Init+0xf4>)
 800489c:	f043 0320 	orr.w	r3, r3, #32
 80048a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	4a30      	ldr	r2, [pc, #192]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048b4:	f043 0304 	orr.w	r3, r3, #4
 80048b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ba:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c6:	4b2b      	ldr	r3, [pc, #172]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048cc:	f043 0301 	orr.w	r3, r3, #1
 80048d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048d2:	4b28      	ldr	r3, [pc, #160]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048de:	4b25      	ldr	r3, [pc, #148]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	4a24      	ldr	r2, [pc, #144]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048e4:	f043 0308 	orr.w	r3, r3, #8
 80048e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048ea:	4b22      	ldr	r3, [pc, #136]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	607b      	str	r3, [r7, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048f6:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <MX_GPIO_Init+0xf4>)
 80048fc:	f043 0302 	orr.w	r3, r3, #2
 8004900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <MX_GPIO_Init+0xf4>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800490e:	2200      	movs	r2, #0
 8004910:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004918:	f002 fb60 	bl	8006fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800491c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004922:	2301      	movs	r3, #1
 8004924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	4619      	mov	r1, r3
 8004934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004938:	f002 f9ce 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 800493c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4619      	mov	r1, r3
 8004952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004956:	f002 f9bf 	bl	8006cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2105      	movs	r1, #5
 800495e:	2028      	movs	r0, #40	; 0x28
 8004960:	f001 ff18 	bl	8006794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004964:	2028      	movs	r0, #40	; 0x28
 8004966:	f001 ff2f 	bl	80067c8 <HAL_NVIC_EnableIRQ>

}
 800496a:	bf00      	nop
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <MX_I2C2_Init+0x74>)
 800497e:	4a1c      	ldr	r2, [pc, #112]	; (80049f0 <MX_I2C2_Init+0x78>)
 8004980:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8004982:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <MX_I2C2_Init+0x74>)
 8004984:	4a1b      	ldr	r2, [pc, #108]	; (80049f4 <MX_I2C2_Init+0x7c>)
 8004986:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <MX_I2C2_Init+0x74>)
 800498a:	2200      	movs	r2, #0
 800498c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800498e:	4b17      	ldr	r3, [pc, #92]	; (80049ec <MX_I2C2_Init+0x74>)
 8004990:	2201      	movs	r2, #1
 8004992:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004994:	4b15      	ldr	r3, [pc, #84]	; (80049ec <MX_I2C2_Init+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <MX_I2C2_Init+0x74>)
 800499c:	2200      	movs	r2, #0
 800499e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <MX_I2C2_Init+0x74>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <MX_I2C2_Init+0x74>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <MX_I2C2_Init+0x74>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049b2:	480e      	ldr	r0, [pc, #56]	; (80049ec <MX_I2C2_Init+0x74>)
 80049b4:	f002 fb67 	bl	8007086 <HAL_I2C_Init>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80049be:	f000 f921 	bl	8004c04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80049c2:	2100      	movs	r1, #0
 80049c4:	4809      	ldr	r0, [pc, #36]	; (80049ec <MX_I2C2_Init+0x74>)
 80049c6:	f003 f8c1 	bl	8007b4c <HAL_I2CEx_ConfigAnalogFilter>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80049d0:	f000 f918 	bl	8004c04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80049d4:	2100      	movs	r1, #0
 80049d6:	4805      	ldr	r0, [pc, #20]	; (80049ec <MX_I2C2_Init+0x74>)
 80049d8:	f003 f903 	bl	8007be2 <HAL_I2CEx_ConfigDigitalFilter>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80049e2:	f000 f90f 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200002d8 	.word	0x200002d8
 80049f0:	40005800 	.word	0x40005800
 80049f4:	20c0edff 	.word	0x20c0edff

080049f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b0a0      	sub	sp, #128	; 0x80
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a04:	2200      	movs	r2, #0
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
 8004a0c:	60da      	str	r2, [r3, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a10:	f107 0318 	add.w	r3, r7, #24
 8004a14:	2254      	movs	r2, #84	; 0x54
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f00d f8f9 	bl	8011c10 <memset>
  if(i2cHandle->Instance==I2C2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2c      	ldr	r2, [pc, #176]	; (8004ad4 <HAL_I2C_MspInit+0xdc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d151      	bne.n	8004acc <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a30:	f107 0318 	add.w	r3, r7, #24
 8004a34:	4618      	mov	r0, r3
 8004a36:	f005 fc5d 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a40:	f000 f8e0 	bl	8004c04 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a44:	4b24      	ldr	r3, [pc, #144]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a4a:	f043 0320 	orr.w	r3, r3, #32
 8004a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a54:	f003 0320 	and.w	r3, r3, #32
 8004a58:	617b      	str	r3, [r7, #20]
 8004a5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	4a1d      	ldr	r2, [pc, #116]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a62:	f043 0304 	orr.w	r3, r3, #4
 8004a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a68:	4b1b      	ldr	r3, [pc, #108]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a74:	2301      	movs	r3, #1
 8004a76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a78:	2312      	movs	r3, #18
 8004a7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a80:	2300      	movs	r3, #0
 8004a82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a84:	2304      	movs	r3, #4
 8004a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4813      	ldr	r0, [pc, #76]	; (8004adc <HAL_I2C_MspInit+0xe4>)
 8004a90:	f002 f922 	bl	8006cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004a94:	2310      	movs	r3, #16
 8004a96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a98:	2312      	movs	r3, #18
 8004a9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004aac:	4619      	mov	r1, r3
 8004aae:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <HAL_I2C_MspInit+0xe8>)
 8004ab0:	f002 f912 	bl	8006cd8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ab4:	4b08      	ldr	r3, [pc, #32]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004aba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004abe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac0:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_I2C_MspInit+0xe0>)
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004acc:	bf00      	nop
 8004ace:	3780      	adds	r7, #128	; 0x80
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40005800 	.word	0x40005800
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	48001400 	.word	0x48001400
 8004ae0:	48000800 	.word	0x48000800

08004ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004000;
 8004ae8:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <main+0x58>)
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <main+0x5c>)
 8004aec:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8004aee:	b662      	cpsie	i
}
 8004af0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004af2:	f000 fd62 	bl	80055ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004af6:	f000 f825 	bl	8004b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004afa:	f7ff fec1 	bl	8004880 <MX_GPIO_Init>
  MX_DMA_Init();
 8004afe:	f7ff fe95 	bl	800482c <MX_DMA_Init>
  MX_I2C2_Init();
 8004b02:	f7ff ff39 	bl	8004978 <MX_I2C2_Init>
  MX_TIM2_Init();
 8004b06:	f000 fa09 	bl	8004f1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004b0a:	f000 fa5f 	bl	8004fcc <MX_TIM3_Init>
  MX_TIM4_Init();
 8004b0e:	f000 fab7 	bl	8005080 <MX_TIM4_Init>
  MX_UART4_Init();
 8004b12:	f000 fbcd 	bl	80052b0 <MX_UART4_Init>
  MX_UART5_Init();
 8004b16:	f000 fc17 	bl	8005348 <MX_UART5_Init>
  MX_ADC2_Init();
 8004b1a:	f7ff fd03 	bl	8004524 <MX_ADC2_Init>
  MX_USB_Device_Init();
 8004b1e:	f00c fb6d 	bl	80111fc <MX_USB_Device_Init>
  MX_SPI1_Init();
 8004b22:	f000 f875 	bl	8004c10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  while(1){
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004b26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b2e:	f002 fa6d 	bl	800700c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8004b32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b36:	f000 fd77 	bl	8005628 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004b3a:	e7f4      	b.n	8004b26 <main+0x42>
 8004b3c:	e000ed00 	.word	0xe000ed00
 8004b40:	08004000 	.word	0x08004000

08004b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b094      	sub	sp, #80	; 0x50
 8004b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b4a:	f107 0318 	add.w	r3, r7, #24
 8004b4e:	2238      	movs	r2, #56	; 0x38
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00d f85c 	bl	8011c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b58:	1d3b      	adds	r3, r7, #4
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	60da      	str	r2, [r3, #12]
 8004b64:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b66:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b6a:	f004 fdb9 	bl	80096e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004b6e:	2322      	movs	r3, #34	; 0x22
 8004b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b80:	2302      	movs	r3, #2
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004b84:	2302      	movs	r3, #2
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004b88:	2304      	movs	r3, #4
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8004b8c:	234b      	movs	r3, #75	; 0x4b
 8004b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b90:	2302      	movs	r3, #2
 8004b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004b94:	2302      	movs	r3, #2
 8004b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b9c:	f107 0318 	add.w	r3, r7, #24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 fe41 	bl	8009828 <HAL_RCC_OscConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8004bac:	f000 f82a 	bl	8004c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bb0:	230f      	movs	r3, #15
 8004bb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004bc4:	1d3b      	adds	r3, r7, #4
 8004bc6:	2104      	movs	r1, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f005 f945 	bl	8009e58 <HAL_RCC_ClockConfig>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004bd4:	f000 f816 	bl	8004c04 <Error_Handler>
  }
}
 8004bd8:	bf00      	nop
 8004bda:	3750      	adds	r7, #80	; 0x50
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a04      	ldr	r2, [pc, #16]	; (8004c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d101      	bne.n	8004bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bf2:	f000 fcfb 	bl	80055ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40012c00 	.word	0x40012c00

08004c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c08:	b672      	cpsid	i
}
 8004c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c0c:	e7fe      	b.n	8004c0c <Error_Handler+0x8>
	...

08004c10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c16:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <MX_SPI1_Init+0x78>)
 8004c18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004c20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004c22:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004c28:	4b16      	ldr	r3, [pc, #88]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c2a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004c2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004c44:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c46:	2228      	movs	r2, #40	; 0x28
 8004c48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c5e:	2207      	movs	r2, #7
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c6e:	4805      	ldr	r0, [pc, #20]	; (8004c84 <MX_SPI1_Init+0x74>)
 8004c70:	f005 fd8e 	bl	800a790 <HAL_SPI_Init>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004c7a:	f7ff ffc3 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c7e:	bf00      	nop
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000324 	.word	0x20000324
 8004c88:	40013000 	.word	0x40013000

08004c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <HAL_SPI_MspInit+0x7c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d128      	bne.n	8004d00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004cae:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb2:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004cb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cb8:	6613      	str	r3, [r2, #96]	; 0x60
 8004cba:	4b14      	ldr	r3, [pc, #80]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cd2:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_SPI_MspInit+0x80>)
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004cde:	23e0      	movs	r3, #224	; 0xe0
 8004ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cee:	2305      	movs	r3, #5
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cfc:	f001 ffec 	bl	8006cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004d00:	bf00      	nop
 8004d02:	3728      	adds	r7, #40	; 0x28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40013000 	.word	0x40013000
 8004d0c:	40021000 	.word	0x40021000

08004d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d1c:	f043 0301 	orr.w	r3, r3, #1
 8004d20:	6613      	str	r3, [r2, #96]	; 0x60
 8004d22:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d38:	6593      	str	r3, [r2, #88]	; 0x58
 8004d3a:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <HAL_MspInit+0x4c>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	210f      	movs	r1, #15
 8004d4a:	f06f 0001 	mvn.w	r0, #1
 8004d4e:	f001 fd21 	bl	8006794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000

08004d60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08c      	sub	sp, #48	; 0x30
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004d70:	4b2c      	ldr	r3, [pc, #176]	; (8004e24 <HAL_InitTick+0xc4>)
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <HAL_InitTick+0xc4>)
 8004d76:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d7a:	6613      	str	r3, [r2, #96]	; 0x60
 8004d7c:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <HAL_InitTick+0xc4>)
 8004d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d84:	60bb      	str	r3, [r7, #8]
 8004d86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d88:	f107 020c 	add.w	r2, r7, #12
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f005 fa36 	bl	800a204 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004d98:	f005 fa1e 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 8004d9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da0:	4a21      	ldr	r2, [pc, #132]	; (8004e28 <HAL_InitTick+0xc8>)
 8004da2:	fba2 2303 	umull	r2, r3, r2, r3
 8004da6:	0c9b      	lsrs	r3, r3, #18
 8004da8:	3b01      	subs	r3, #1
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004dac:	4b1f      	ldr	r3, [pc, #124]	; (8004e2c <HAL_InitTick+0xcc>)
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <HAL_InitTick+0xd0>)
 8004db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <HAL_InitTick+0xcc>)
 8004db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004db8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_InitTick+0xcc>)
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <HAL_InitTick+0xcc>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_InitTick+0xcc>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8004dcc:	4817      	ldr	r0, [pc, #92]	; (8004e2c <HAL_InitTick+0xcc>)
 8004dce:	f005 fd8a 	bl	800a8e6 <HAL_TIM_Base_Init>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11b      	bne.n	8004e18 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004de0:	4812      	ldr	r0, [pc, #72]	; (8004e2c <HAL_InitTick+0xcc>)
 8004de2:	f005 fde1 	bl	800a9a8 <HAL_TIM_Base_Start_IT>
 8004de6:	4603      	mov	r3, r0
 8004de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d111      	bne.n	8004e18 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004df4:	2019      	movs	r0, #25
 8004df6:	f001 fce7 	bl	80067c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b0f      	cmp	r3, #15
 8004dfe:	d808      	bhi.n	8004e12 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8004e00:	2200      	movs	r2, #0
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	2019      	movs	r0, #25
 8004e06:	f001 fcc5 	bl	8006794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <HAL_InitTick+0xd4>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e002      	b.n	8004e18 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3730      	adds	r7, #48	; 0x30
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40021000 	.word	0x40021000
 8004e28:	431bde83 	.word	0x431bde83
 8004e2c:	20000388 	.word	0x20000388
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	20000004 	.word	0x20000004

08004e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e3c:	e7fe      	b.n	8004e3c <NMI_Handler+0x4>

08004e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e42:	e7fe      	b.n	8004e42 <HardFault_Handler+0x4>

08004e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e48:	e7fe      	b.n	8004e48 <MemManage_Handler+0x4>

08004e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e4e:	e7fe      	b.n	8004e4e <BusFault_Handler+0x4>

08004e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e54:	e7fe      	b.n	8004e54 <UsageFault_Handler+0x4>

08004e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e56:	b480      	push	{r7}
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004e68:	4802      	ldr	r0, [pc, #8]	; (8004e74 <DMA1_Channel1_IRQHandler+0x10>)
 8004e6a:	f001 fe23 	bl	8006ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000270 	.word	0x20000270

08004e78 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004e7c:	4802      	ldr	r0, [pc, #8]	; (8004e88 <USB_LP_IRQHandler+0x10>)
 8004e7e:	f003 f803 	bl	8007e88 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20001b80 	.word	0x20001b80

08004e8c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e90:	4802      	ldr	r0, [pc, #8]	; (8004e9c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004e92:	f005 fe58 	bl	800ab46 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000388 	.word	0x20000388

08004ea0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8004ea4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004ea8:	f002 f8ca 	bl	8007040 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8004eac:	4805      	ldr	r0, [pc, #20]	; (8004ec4 <EXTI15_10_IRQHandler+0x24>)
 8004eae:	f7ff fc93 	bl	80047d8 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <EXTI15_10_IRQHandler+0x28>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f00b fee4 	bl	8010c86 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200002d8 	.word	0x200002d8
 8004ec8:	200002d4 	.word	0x200002d4

08004ecc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004ed0:	4805      	ldr	r0, [pc, #20]	; (8004ee8 <UART4_IRQHandler+0x1c>)
 8004ed2:	f006 fdf1 	bl	800bab8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <UART4_IRQHandler+0x20>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f00b fed2 	bl	8010c86 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200004b8 	.word	0x200004b8
 8004eec:	200002d0 	.word	0x200002d0

08004ef0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ef4:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <SystemInit+0x28>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <SystemInit+0x28>)
 8004efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8004f04:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <SystemInit+0x28>)
 8004f06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f0a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08a      	sub	sp, #40	; 0x28
 8004f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f22:	f107 031c 	add.w	r3, r7, #28
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f2e:	463b      	mov	r3, r7
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
 8004f3c:	615a      	str	r2, [r3, #20]
 8004f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004f40:	4b20      	ldr	r3, [pc, #128]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004f48:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <MX_TIM2_Init+0xac>)
 8004f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f60:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f66:	4817      	ldr	r0, [pc, #92]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f68:	f005 fd96 	bl	800aa98 <HAL_TIM_PWM_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004f72:	f7ff fe47 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f7e:	f107 031c 	add.w	r3, r7, #28
 8004f82:	4619      	mov	r1, r3
 8004f84:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004f86:	f006 fc6b 	bl	800b860 <HAL_TIMEx_MasterConfigSynchronization>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004f90:	f7ff fe38 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f94:	2360      	movs	r3, #96	; 0x60
 8004f96:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004fa4:	463b      	mov	r3, r7
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <MX_TIM2_Init+0xa8>)
 8004fac:	f005 ff4a 	bl	800ae44 <HAL_TIM_PWM_ConfigChannel>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8004fb6:	f7ff fe25 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004fba:	bf00      	nop
 8004fbc:	3728      	adds	r7, #40	; 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200003d4 	.word	0x200003d4
 8004fc8:	0015f900 	.word	0x0015f900

08004fcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fd2:	f107 031c 	add.w	r3, r7, #28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	605a      	str	r2, [r3, #4]
 8004fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fde:	463b      	mov	r3, r7
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
 8004fec:	615a      	str	r2, [r3, #20]
 8004fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ff0:	4b21      	ldr	r3, [pc, #132]	; (8005078 <MX_TIM3_Init+0xac>)
 8004ff2:	4a22      	ldr	r2, [pc, #136]	; (800507c <MX_TIM3_Init+0xb0>)
 8004ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <MX_TIM3_Init+0xac>)
 8004ff8:	2232      	movs	r2, #50	; 0x32
 8004ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffc:	4b1e      	ldr	r3, [pc, #120]	; (8005078 <MX_TIM3_Init+0xac>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8005002:	4b1d      	ldr	r3, [pc, #116]	; (8005078 <MX_TIM3_Init+0xac>)
 8005004:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8005008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800500a:	4b1b      	ldr	r3, [pc, #108]	; (8005078 <MX_TIM3_Init+0xac>)
 800500c:	2200      	movs	r2, #0
 800500e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <MX_TIM3_Init+0xac>)
 8005012:	2200      	movs	r2, #0
 8005014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005016:	4818      	ldr	r0, [pc, #96]	; (8005078 <MX_TIM3_Init+0xac>)
 8005018:	f005 fd3e 	bl	800aa98 <HAL_TIM_PWM_Init>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8005022:	f7ff fdef 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800502a:	2300      	movs	r3, #0
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800502e:	f107 031c 	add.w	r3, r7, #28
 8005032:	4619      	mov	r1, r3
 8005034:	4810      	ldr	r0, [pc, #64]	; (8005078 <MX_TIM3_Init+0xac>)
 8005036:	f006 fc13 	bl	800b860 <HAL_TIMEx_MasterConfigSynchronization>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8005040:	f7ff fde0 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005044:	2360      	movs	r3, #96	; 0x60
 8005046:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005050:	2300      	movs	r3, #0
 8005052:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005054:	463b      	mov	r3, r7
 8005056:	2200      	movs	r2, #0
 8005058:	4619      	mov	r1, r3
 800505a:	4807      	ldr	r0, [pc, #28]	; (8005078 <MX_TIM3_Init+0xac>)
 800505c:	f005 fef2 	bl	800ae44 <HAL_TIM_PWM_ConfigChannel>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8005066:	f7ff fdcd 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800506a:	4803      	ldr	r0, [pc, #12]	; (8005078 <MX_TIM3_Init+0xac>)
 800506c:	f000 f8c2 	bl	80051f4 <HAL_TIM_MspPostInit>

}
 8005070:	bf00      	nop
 8005072:	3728      	adds	r7, #40	; 0x28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20000420 	.word	0x20000420
 800507c:	40000400 	.word	0x40000400

08005080 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08a      	sub	sp, #40	; 0x28
 8005084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005086:	f107 031c 	add.w	r3, r7, #28
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005092:	463b      	mov	r3, r7
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	611a      	str	r2, [r3, #16]
 80050a0:	615a      	str	r2, [r3, #20]
 80050a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80050a4:	4b2e      	ldr	r3, [pc, #184]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050a6:	4a2f      	ldr	r2, [pc, #188]	; (8005164 <MX_TIM4_Init+0xe4>)
 80050a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 80050aa:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050ac:	2232      	movs	r2, #50	; 0x32
 80050ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050b8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80050bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050be:	4b28      	ldr	r3, [pc, #160]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050c4:	4b26      	ldr	r3, [pc, #152]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80050ca:	4825      	ldr	r0, [pc, #148]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050cc:	f005 fce4 	bl	800aa98 <HAL_TIM_PWM_Init>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80050d6:	f7ff fd95 	bl	8004c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050de:	2300      	movs	r3, #0
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80050e2:	f107 031c 	add.w	r3, r7, #28
 80050e6:	4619      	mov	r1, r3
 80050e8:	481d      	ldr	r0, [pc, #116]	; (8005160 <MX_TIM4_Init+0xe0>)
 80050ea:	f006 fbb9 	bl	800b860 <HAL_TIMEx_MasterConfigSynchronization>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80050f4:	f7ff fd86 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050f8:	2360      	movs	r3, #96	; 0x60
 80050fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80050fc:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8005100:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005102:	2300      	movs	r3, #0
 8005104:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005106:	2300      	movs	r3, #0
 8005108:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800510a:	463b      	mov	r3, r7
 800510c:	2200      	movs	r2, #0
 800510e:	4619      	mov	r1, r3
 8005110:	4813      	ldr	r0, [pc, #76]	; (8005160 <MX_TIM4_Init+0xe0>)
 8005112:	f005 fe97 	bl	800ae44 <HAL_TIM_PWM_ConfigChannel>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800511c:	f7ff fd72 	bl	8004c04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005120:	463b      	mov	r3, r7
 8005122:	2204      	movs	r2, #4
 8005124:	4619      	mov	r1, r3
 8005126:	480e      	ldr	r0, [pc, #56]	; (8005160 <MX_TIM4_Init+0xe0>)
 8005128:	f005 fe8c 	bl	800ae44 <HAL_TIM_PWM_ConfigChannel>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8005132:	f7ff fd67 	bl	8004c04 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8005136:	f241 7370 	movw	r3, #6000	; 0x1770
 800513a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800513c:	463b      	mov	r3, r7
 800513e:	220c      	movs	r2, #12
 8005140:	4619      	mov	r1, r3
 8005142:	4807      	ldr	r0, [pc, #28]	; (8005160 <MX_TIM4_Init+0xe0>)
 8005144:	f005 fe7e 	bl	800ae44 <HAL_TIM_PWM_ConfigChannel>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800514e:	f7ff fd59 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005152:	4803      	ldr	r0, [pc, #12]	; (8005160 <MX_TIM4_Init+0xe0>)
 8005154:	f000 f84e 	bl	80051f4 <HAL_TIM_MspPostInit>

}
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	2000046c 	.word	0x2000046c
 8005164:	40000800 	.word	0x40000800

08005168 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005178:	d10c      	bne.n	8005194 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6593      	str	r3, [r2, #88]	; 0x58
 8005186:	4b18      	ldr	r3, [pc, #96]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 8005188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005192:	e022      	b.n	80051da <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_TIM_PWM_MspInit+0x84>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d10c      	bne.n	80051b8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051a4:	f043 0302 	orr.w	r3, r3, #2
 80051a8:	6593      	str	r3, [r2, #88]	; 0x58
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
}
 80051b6:	e010      	b.n	80051da <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <HAL_TIM_PWM_MspInit+0x88>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10b      	bne.n	80051da <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051c8:	f043 0304 	orr.w	r3, r3, #4
 80051cc:	6593      	str	r3, [r2, #88]	; 0x58
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_TIM_PWM_MspInit+0x80>)
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	60fb      	str	r3, [r7, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40021000 	.word	0x40021000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800

080051f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 0314 	add.w	r3, r7, #20
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a22      	ldr	r2, [pc, #136]	; (800529c <HAL_TIM_MspPostInit+0xa8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d11c      	bne.n	8005250 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005216:	4b22      	ldr	r3, [pc, #136]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	4a21      	ldr	r2, [pc, #132]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 800521c:	f043 0304 	orr.w	r3, r3, #4
 8005220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005222:	4b1f      	ldr	r3, [pc, #124]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 8005224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	613b      	str	r3, [r7, #16]
 800522c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800522e:	2340      	movs	r3, #64	; 0x40
 8005230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005232:	2302      	movs	r3, #2
 8005234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800523a:	2300      	movs	r3, #0
 800523c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800523e:	2302      	movs	r3, #2
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005242:	f107 0314 	add.w	r3, r7, #20
 8005246:	4619      	mov	r1, r3
 8005248:	4816      	ldr	r0, [pc, #88]	; (80052a4 <HAL_TIM_MspPostInit+0xb0>)
 800524a:	f001 fd45 	bl	8006cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800524e:	e021      	b.n	8005294 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <HAL_TIM_MspPostInit+0xb4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d11c      	bne.n	8005294 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 800525c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 8005260:	f043 0302 	orr.w	r3, r3, #2
 8005264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005266:	4b0e      	ldr	r3, [pc, #56]	; (80052a0 <HAL_TIM_MspPostInit+0xac>)
 8005268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8005272:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8005276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2302      	movs	r3, #2
 800527a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005280:	2300      	movs	r3, #0
 8005282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005284:	2302      	movs	r3, #2
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005288:	f107 0314 	add.w	r3, r7, #20
 800528c:	4619      	mov	r1, r3
 800528e:	4807      	ldr	r0, [pc, #28]	; (80052ac <HAL_TIM_MspPostInit+0xb8>)
 8005290:	f001 fd22 	bl	8006cd8 <HAL_GPIO_Init>
}
 8005294:	bf00      	nop
 8005296:	3728      	adds	r7, #40	; 0x28
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40000400 	.word	0x40000400
 80052a0:	40021000 	.word	0x40021000
 80052a4:	48000800 	.word	0x48000800
 80052a8:	40000800 	.word	0x40000800
 80052ac:	48000400 	.word	0x48000400

080052b0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80052b4:	4b22      	ldr	r3, [pc, #136]	; (8005340 <MX_UART4_Init+0x90>)
 80052b6:	4a23      	ldr	r2, [pc, #140]	; (8005344 <MX_UART4_Init+0x94>)
 80052b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <MX_UART4_Init+0x90>)
 80052bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80052c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80052c2:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <MX_UART4_Init+0x90>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <MX_UART4_Init+0x90>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80052ce:	4b1c      	ldr	r3, [pc, #112]	; (8005340 <MX_UART4_Init+0x90>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <MX_UART4_Init+0x90>)
 80052d6:	220c      	movs	r2, #12
 80052d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <MX_UART4_Init+0x90>)
 80052dc:	2200      	movs	r2, #0
 80052de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80052e0:	4b17      	ldr	r3, [pc, #92]	; (8005340 <MX_UART4_Init+0x90>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <MX_UART4_Init+0x90>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80052ec:	4b14      	ldr	r3, [pc, #80]	; (8005340 <MX_UART4_Init+0x90>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80052f2:	4b13      	ldr	r3, [pc, #76]	; (8005340 <MX_UART4_Init+0x90>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80052f8:	4811      	ldr	r0, [pc, #68]	; (8005340 <MX_UART4_Init+0x90>)
 80052fa:	f006 fb8d 	bl	800ba18 <HAL_UART_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8005304:	f7ff fc7e 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005308:	2100      	movs	r1, #0
 800530a:	480d      	ldr	r0, [pc, #52]	; (8005340 <MX_UART4_Init+0x90>)
 800530c:	f007 fcbb 	bl	800cc86 <HAL_UARTEx_SetTxFifoThreshold>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8005316:	f7ff fc75 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800531a:	2100      	movs	r1, #0
 800531c:	4808      	ldr	r0, [pc, #32]	; (8005340 <MX_UART4_Init+0x90>)
 800531e:	f007 fcf0 	bl	800cd02 <HAL_UARTEx_SetRxFifoThreshold>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8005328:	f7ff fc6c 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800532c:	4804      	ldr	r0, [pc, #16]	; (8005340 <MX_UART4_Init+0x90>)
 800532e:	f007 fc71 	bl	800cc14 <HAL_UARTEx_DisableFifoMode>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8005338:	f7ff fc64 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800533c:	bf00      	nop
 800533e:	bd80      	pop	{r7, pc}
 8005340:	200004b8 	.word	0x200004b8
 8005344:	40004c00 	.word	0x40004c00

08005348 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800534c:	4b22      	ldr	r3, [pc, #136]	; (80053d8 <MX_UART5_Init+0x90>)
 800534e:	4a23      	ldr	r2, [pc, #140]	; (80053dc <MX_UART5_Init+0x94>)
 8005350:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8005352:	4b21      	ldr	r3, [pc, #132]	; (80053d8 <MX_UART5_Init+0x90>)
 8005354:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005358:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <MX_UART5_Init+0x90>)
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005360:	4b1d      	ldr	r3, [pc, #116]	; (80053d8 <MX_UART5_Init+0x90>)
 8005362:	2200      	movs	r2, #0
 8005364:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <MX_UART5_Init+0x90>)
 8005368:	2200      	movs	r2, #0
 800536a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800536c:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <MX_UART5_Init+0x90>)
 800536e:	220c      	movs	r2, #12
 8005370:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005372:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <MX_UART5_Init+0x90>)
 8005374:	2200      	movs	r2, #0
 8005376:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <MX_UART5_Init+0x90>)
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800537e:	4b16      	ldr	r3, [pc, #88]	; (80053d8 <MX_UART5_Init+0x90>)
 8005380:	2200      	movs	r2, #0
 8005382:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005384:	4b14      	ldr	r3, [pc, #80]	; (80053d8 <MX_UART5_Init+0x90>)
 8005386:	2200      	movs	r2, #0
 8005388:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800538a:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <MX_UART5_Init+0x90>)
 800538c:	2200      	movs	r2, #0
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005390:	4811      	ldr	r0, [pc, #68]	; (80053d8 <MX_UART5_Init+0x90>)
 8005392:	f006 fb41 	bl	800ba18 <HAL_UART_Init>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800539c:	f7ff fc32 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053a0:	2100      	movs	r1, #0
 80053a2:	480d      	ldr	r0, [pc, #52]	; (80053d8 <MX_UART5_Init+0x90>)
 80053a4:	f007 fc6f 	bl	800cc86 <HAL_UARTEx_SetTxFifoThreshold>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80053ae:	f7ff fc29 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053b2:	2100      	movs	r1, #0
 80053b4:	4808      	ldr	r0, [pc, #32]	; (80053d8 <MX_UART5_Init+0x90>)
 80053b6:	f007 fca4 	bl	800cd02 <HAL_UARTEx_SetRxFifoThreshold>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80053c0:	f7ff fc20 	bl	8004c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80053c4:	4804      	ldr	r0, [pc, #16]	; (80053d8 <MX_UART5_Init+0x90>)
 80053c6:	f007 fc25 	bl	800cc14 <HAL_UARTEx_DisableFifoMode>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80053d0:	f7ff fc18 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80053d4:	bf00      	nop
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	20000548 	.word	0x20000548
 80053dc:	40005000 	.word	0x40005000

080053e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b0a2      	sub	sp, #136	; 0x88
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	609a      	str	r2, [r3, #8]
 80053f4:	60da      	str	r2, [r3, #12]
 80053f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053f8:	f107 0320 	add.w	r3, r7, #32
 80053fc:	2254      	movs	r2, #84	; 0x54
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f00c fc05 	bl	8011c10 <memset>
  if(uartHandle->Instance==UART4)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_UART_MspInit+0x174>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d141      	bne.n	8005494 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005410:	2308      	movs	r3, #8
 8005412:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8005414:	2300      	movs	r3, #0
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005418:	f107 0320 	add.w	r3, r7, #32
 800541c:	4618      	mov	r0, r3
 800541e:	f004 ff69 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005428:	f7ff fbec 	bl	8004c04 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800542c:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <HAL_UART_MspInit+0x178>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	4a49      	ldr	r2, [pc, #292]	; (8005558 <HAL_UART_MspInit+0x178>)
 8005432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005436:	6593      	str	r3, [r2, #88]	; 0x58
 8005438:	4b47      	ldr	r3, [pc, #284]	; (8005558 <HAL_UART_MspInit+0x178>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005444:	4b44      	ldr	r3, [pc, #272]	; (8005558 <HAL_UART_MspInit+0x178>)
 8005446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005448:	4a43      	ldr	r2, [pc, #268]	; (8005558 <HAL_UART_MspInit+0x178>)
 800544a:	f043 0304 	orr.w	r3, r3, #4
 800544e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005450:	4b41      	ldr	r3, [pc, #260]	; (8005558 <HAL_UART_MspInit+0x178>)
 8005452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800545c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005460:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005462:	2302      	movs	r3, #2
 8005464:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800546a:	2300      	movs	r3, #0
 800546c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8005470:	2305      	movs	r3, #5
 8005472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800547a:	4619      	mov	r1, r3
 800547c:	4837      	ldr	r0, [pc, #220]	; (800555c <HAL_UART_MspInit+0x17c>)
 800547e:	f001 fc2b 	bl	8006cd8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8005482:	2200      	movs	r2, #0
 8005484:	2105      	movs	r1, #5
 8005486:	2034      	movs	r0, #52	; 0x34
 8005488:	f001 f984 	bl	8006794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800548c:	2034      	movs	r0, #52	; 0x34
 800548e:	f001 f99b 	bl	80067c8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8005492:	e05b      	b.n	800554c <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a31      	ldr	r2, [pc, #196]	; (8005560 <HAL_UART_MspInit+0x180>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d156      	bne.n	800554c <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800549e:	2310      	movs	r3, #16
 80054a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80054a2:	2300      	movs	r3, #0
 80054a4:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054a6:	f107 0320 	add.w	r3, r7, #32
 80054aa:	4618      	mov	r0, r3
 80054ac:	f004 ff22 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_UART_MspInit+0xda>
      Error_Handler();
 80054b6:	f7ff fba5 	bl	8004c04 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054be:	4a26      	ldr	r2, [pc, #152]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c4:	6593      	str	r3, [r2, #88]	; 0x58
 80054c6:	4b24      	ldr	r3, [pc, #144]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054d2:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	4a20      	ldr	r2, [pc, #128]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054d8:	f043 0304 	orr.w	r3, r3, #4
 80054dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054f0:	f043 0308 	orr.w	r3, r3, #8
 80054f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <HAL_UART_MspInit+0x178>)
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005506:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005508:	2302      	movs	r3, #2
 800550a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550c:	2300      	movs	r3, #0
 800550e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005510:	2300      	movs	r3, #0
 8005512:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8005516:	2305      	movs	r3, #5
 8005518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005520:	4619      	mov	r1, r3
 8005522:	480e      	ldr	r0, [pc, #56]	; (800555c <HAL_UART_MspInit+0x17c>)
 8005524:	f001 fbd8 	bl	8006cd8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005528:	2304      	movs	r3, #4
 800552a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 800553a:	2305      	movs	r3, #5
 800553c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005540:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005544:	4619      	mov	r1, r3
 8005546:	4807      	ldr	r0, [pc, #28]	; (8005564 <HAL_UART_MspInit+0x184>)
 8005548:	f001 fbc6 	bl	8006cd8 <HAL_GPIO_Init>
}
 800554c:	bf00      	nop
 800554e:	3788      	adds	r7, #136	; 0x88
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40004c00 	.word	0x40004c00
 8005558:	40021000 	.word	0x40021000
 800555c:	48000800 	.word	0x48000800
 8005560:	40005000 	.word	0x40005000
 8005564:	48000c00 	.word	0x48000c00

08005568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005568:	480d      	ldr	r0, [pc, #52]	; (80055a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800556a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800556c:	480d      	ldr	r0, [pc, #52]	; (80055a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800556e:	490e      	ldr	r1, [pc, #56]	; (80055a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005570:	4a0e      	ldr	r2, [pc, #56]	; (80055ac <LoopForever+0xe>)
  movs r3, #0
 8005572:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005574:	e002      	b.n	800557c <LoopCopyDataInit>

08005576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800557a:	3304      	adds	r3, #4

0800557c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800557c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800557e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005580:	d3f9      	bcc.n	8005576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005582:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005584:	4c0b      	ldr	r4, [pc, #44]	; (80055b4 <LoopForever+0x16>)
  movs r3, #0
 8005586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005588:	e001      	b.n	800558e <LoopFillZerobss>

0800558a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800558a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800558c:	3204      	adds	r2, #4

0800558e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800558e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005590:	d3fb      	bcc.n	800558a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005592:	f7ff fcad 	bl	8004ef0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005596:	f00c fb17 	bl	8011bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800559a:	f7ff faa3 	bl	8004ae4 <main>

0800559e <LoopForever>:

LoopForever:
    b LoopForever
 800559e:	e7fe      	b.n	800559e <LoopForever>
  ldr   r0, =_estack
 80055a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055a8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80055ac:	08011d30 	.word	0x08011d30
  ldr r2, =_sbss
 80055b0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80055b4:	20002094 	.word	0x20002094

080055b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055b8:	e7fe      	b.n	80055b8 <ADC1_2_IRQHandler>

080055ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055c4:	2003      	movs	r0, #3
 80055c6:	f001 f8da 	bl	800677e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ca:	200f      	movs	r0, #15
 80055cc:	f7ff fbc8 	bl	8004d60 <HAL_InitTick>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	71fb      	strb	r3, [r7, #7]
 80055da:	e001      	b.n	80055e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055dc:	f7ff fb98 	bl	8004d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80055e0:	79fb      	ldrb	r3, [r7, #7]

}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055ec:	b480      	push	{r7}
 80055ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_IncTick+0x1c>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_IncTick+0x20>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4413      	add	r3, r2
 80055fa:	4a03      	ldr	r2, [pc, #12]	; (8005608 <HAL_IncTick+0x1c>)
 80055fc:	6013      	str	r3, [r2, #0]
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200005d8 	.word	0x200005d8
 800560c:	20000008 	.word	0x20000008

08005610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
  return uwTick;
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <HAL_GetTick+0x14>)
 8005616:	681b      	ldr	r3, [r3, #0]
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	200005d8 	.word	0x200005d8

08005628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005630:	f7ff ffee 	bl	8005610 <HAL_GetTick>
 8005634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d004      	beq.n	800564c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005642:	4b09      	ldr	r3, [pc, #36]	; (8005668 <HAL_Delay+0x40>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800564c:	bf00      	nop
 800564e:	f7ff ffdf 	bl	8005610 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	429a      	cmp	r2, r3
 800565c:	d8f7      	bhi.n	800564e <HAL_Delay+0x26>
  {
  }
}
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000008 	.word	0x20000008

0800566c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
 800569a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	3360      	adds	r3, #96	; 0x60
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <LL_ADC_SetOffset+0x44>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	4313      	orrs	r3, r2
 8005704:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	03fff000 	.word	0x03fff000

0800571c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3360      	adds	r3, #96	; 0x60
 800572a:	461a      	mov	r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3360      	adds	r3, #96	; 0x60
 8005758:	461a      	mov	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	431a      	orrs	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005772:	bf00      	nop
 8005774:	371c      	adds	r7, #28
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800577e:	b480      	push	{r7}
 8005780:	b087      	sub	sp, #28
 8005782:	af00      	add	r7, sp, #0
 8005784:	60f8      	str	r0, [r7, #12]
 8005786:	60b9      	str	r1, [r7, #8]
 8005788:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3360      	adds	r3, #96	; 0x60
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80057a8:	bf00      	nop
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3360      	adds	r3, #96	; 0x60
 80057c4:	461a      	mov	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	431a      	orrs	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	615a      	str	r2, [r3, #20]
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3330      	adds	r3, #48	; 0x30
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0a1b      	lsrs	r3, r3, #8
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	4413      	add	r3, r2
 800582e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	211f      	movs	r1, #31
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	401a      	ands	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0e9b      	lsrs	r3, r3, #26
 8005848:	f003 011f 	and.w	r1, r3, #31
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	fa01 f303 	lsl.w	r3, r1, r3
 8005856:	431a      	orrs	r2, r3
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3314      	adds	r3, #20
 8005878:	461a      	mov	r2, r3
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0e5b      	lsrs	r3, r3, #25
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	4413      	add	r3, r2
 8005886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	0d1b      	lsrs	r3, r3, #20
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	2107      	movs	r1, #7
 8005896:	fa01 f303 	lsl.w	r3, r1, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	401a      	ands	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0d1b      	lsrs	r3, r3, #20
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	6879      	ldr	r1, [r7, #4]
 80058a8:	fa01 f303 	lsl.w	r3, r1, r3
 80058ac:	431a      	orrs	r2, r3
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80058b2:	bf00      	nop
 80058b4:	371c      	adds	r7, #28
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a0f      	ldr	r2, [pc, #60]	; (800590c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10a      	bne.n	80058ea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e0:	431a      	orrs	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80058e8:	e00a      	b.n	8005900 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058f6:	43db      	mvns	r3, r3
 80058f8:	401a      	ands	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005900:	bf00      	nop
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	407f0000 	.word	0x407f0000

08005910 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6093      	str	r3, [r2, #8]
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005948:	d101      	bne.n	800594e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800596c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005998:	d101      	bne.n	800599e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <LL_ADC_IsEnabled+0x18>
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <LL_ADC_IsEnabled+0x1a>
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d101      	bne.n	80059ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d101      	bne.n	8005a10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e000      	b.n	8005a12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a20:	b590      	push	{r4, r7, lr}
 8005a22:	b089      	sub	sp, #36	; 0x24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1af      	b.n	8005d9a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fe fdf5 	bl	8004638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff ff67 	bl	8005934 <LL_ADC_IsDeepPowerDownEnabled>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7ff ff4d 	bl	8005910 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff ff82 	bl	8005984 <LL_ADC_IsInternalRegulatorEnabled>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d115      	bne.n	8005ab2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff ff66 	bl	800595c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a90:	4b9f      	ldr	r3, [pc, #636]	; (8005d10 <HAL_ADC_Init+0x2f0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	099b      	lsrs	r3, r3, #6
 8005a96:	4a9f      	ldr	r2, [pc, #636]	; (8005d14 <HAL_ADC_Init+0x2f4>)
 8005a98:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9c:	099b      	lsrs	r3, r3, #6
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005aa4:	e002      	b.n	8005aac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f9      	bne.n	8005aa6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff64 	bl	8005984 <LL_ADC_IsInternalRegulatorEnabled>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac6:	f043 0210 	orr.w	r2, r3, #16
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff ff75 	bl	80059d2 <LL_ADC_REG_IsConversionOngoing>
 8005ae8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aee:	f003 0310 	and.w	r3, r3, #16
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f040 8148 	bne.w	8005d88 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 8144 	bne.w	8005d88 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005b08:	f043 0202 	orr.w	r2, r3, #2
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff ff49 	bl	80059ac <LL_ADC_IsEnabled>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d141      	bne.n	8005ba4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b28:	d004      	beq.n	8005b34 <HAL_ADC_Init+0x114>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a7a      	ldr	r2, [pc, #488]	; (8005d18 <HAL_ADC_Init+0x2f8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10f      	bne.n	8005b54 <HAL_ADC_Init+0x134>
 8005b34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005b38:	f7ff ff38 	bl	80059ac <LL_ADC_IsEnabled>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4876      	ldr	r0, [pc, #472]	; (8005d18 <HAL_ADC_Init+0x2f8>)
 8005b40:	f7ff ff34 	bl	80059ac <LL_ADC_IsEnabled>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4323      	orrs	r3, r4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	e012      	b.n	8005b7a <HAL_ADC_Init+0x15a>
 8005b54:	4871      	ldr	r0, [pc, #452]	; (8005d1c <HAL_ADC_Init+0x2fc>)
 8005b56:	f7ff ff29 	bl	80059ac <LL_ADC_IsEnabled>
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4870      	ldr	r0, [pc, #448]	; (8005d20 <HAL_ADC_Init+0x300>)
 8005b5e:	f7ff ff25 	bl	80059ac <LL_ADC_IsEnabled>
 8005b62:	4603      	mov	r3, r0
 8005b64:	431c      	orrs	r4, r3
 8005b66:	486f      	ldr	r0, [pc, #444]	; (8005d24 <HAL_ADC_Init+0x304>)
 8005b68:	f7ff ff20 	bl	80059ac <LL_ADC_IsEnabled>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4323      	orrs	r3, r4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d012      	beq.n	8005ba4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b86:	d004      	beq.n	8005b92 <HAL_ADC_Init+0x172>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a62      	ldr	r2, [pc, #392]	; (8005d18 <HAL_ADC_Init+0x2f8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d101      	bne.n	8005b96 <HAL_ADC_Init+0x176>
 8005b92:	4a65      	ldr	r2, [pc, #404]	; (8005d28 <HAL_ADC_Init+0x308>)
 8005b94:	e000      	b.n	8005b98 <HAL_ADC_Init+0x178>
 8005b96:	4a65      	ldr	r2, [pc, #404]	; (8005d2c <HAL_ADC_Init+0x30c>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4610      	mov	r0, r2
 8005ba0:	f7ff fd64 	bl	800566c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	7f5b      	ldrb	r3, [r3, #29]
 8005ba8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005bae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005bb4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005bba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d106      	bne.n	8005be0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	045b      	lsls	r3, r3, #17
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d009      	beq.n	8005bfc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <HAL_ADC_Init+0x310>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	69b9      	ldr	r1, [r7, #24]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff fed1 	bl	80059d2 <LL_ADC_REG_IsConversionOngoing>
 8005c30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fede 	bl	80059f8 <LL_ADC_INJ_IsConversionOngoing>
 8005c3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d17f      	bne.n	8005d44 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d17c      	bne.n	8005d44 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c66:	f023 0302 	bic.w	r3, r3, #2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	430b      	orrs	r3, r1
 8005c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d017      	beq.n	8005cac <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691a      	ldr	r2, [r3, #16]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005c8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005c98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6911      	ldr	r1, [r2, #16]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005caa:	e013      	b.n	8005cd4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d12a      	bne.n	8005d34 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ce8:	f023 0304 	bic.w	r3, r3, #4
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cf4:	4311      	orrs	r1, r2
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005cfa:	4311      	orrs	r1, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d00:	430a      	orrs	r2, r1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0201 	orr.w	r2, r2, #1
 8005d0c:	611a      	str	r2, [r3, #16]
 8005d0e:	e019      	b.n	8005d44 <HAL_ADC_Init+0x324>
 8005d10:	20000000 	.word	0x20000000
 8005d14:	053e2d63 	.word	0x053e2d63
 8005d18:	50000100 	.word	0x50000100
 8005d1c:	50000400 	.word	0x50000400
 8005d20:	50000500 	.word	0x50000500
 8005d24:	50000600 	.word	0x50000600
 8005d28:	50000300 	.word	0x50000300
 8005d2c:	50000700 	.word	0x50000700
 8005d30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d10c      	bne.n	8005d66 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d52:	f023 010f 	bic.w	r1, r3, #15
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	1e5a      	subs	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
 8005d64:	e007      	b.n	8005d76 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 020f 	bic.w	r2, r2, #15
 8005d74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	f043 0201 	orr.w	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d86:	e007      	b.n	8005d98 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	f043 0210 	orr.w	r2, r3, #16
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3724      	adds	r7, #36	; 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd90      	pop	{r4, r7, pc}
 8005da2:	bf00      	nop

08005da4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b0b6      	sub	sp, #216	; 0xd8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d102      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x24>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	f000 bc13 	b.w	80065ee <HAL_ADC_ConfigChannel+0x84a>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fdfc 	bl	80059d2 <LL_ADC_REG_IsConversionOngoing>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f040 83f3 	bne.w	80065c8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	6859      	ldr	r1, [r3, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7ff fd0e 	bl	8005810 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fdea 	bl	80059d2 <LL_ADC_REG_IsConversionOngoing>
 8005dfe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fdf6 	bl	80059f8 <LL_ADC_INJ_IsConversionOngoing>
 8005e0c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f040 81d9 	bne.w	80061cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 81d4 	bne.w	80061cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2c:	d10f      	bne.n	8005e4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	4619      	mov	r1, r3
 8005e3a:	f7ff fd15 	bl	8005868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fccf 	bl	80057ea <LL_ADC_SetSamplingTimeCommonConfig>
 8005e4c:	e00e      	b.n	8005e6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6819      	ldr	r1, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f7ff fd04 	bl	8005868 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2100      	movs	r1, #0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fcbf 	bl	80057ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	08db      	lsrs	r3, r3, #3
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d022      	beq.n	8005ed4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6919      	ldr	r1, [r3, #16]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e9e:	f7ff fc19 	bl	80056d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6919      	ldr	r1, [r3, #16]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f7ff fc65 	bl	800577e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6919      	ldr	r1, [r3, #16]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	7f1b      	ldrb	r3, [r3, #28]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d102      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x126>
 8005ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec8:	e000      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x128>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f7ff fc71 	bl	80057b4 <LL_ADC_SetOffsetSaturation>
 8005ed2:	e17b      	b.n	80061cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fc1e 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10a      	bne.n	8005f00 <HAL_ADC_ConfigChannel+0x15c>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fc13 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	0e9b      	lsrs	r3, r3, #26
 8005efa:	f003 021f 	and.w	r2, r3, #31
 8005efe:	e01e      	b.n	8005f3e <HAL_ADC_ConfigChannel+0x19a>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fc08 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005f2e:	2320      	movs	r3, #32
 8005f30:	e004      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f36:	fab3 f383 	clz	r3, r3
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d105      	bne.n	8005f56 <HAL_ADC_ConfigChannel+0x1b2>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	0e9b      	lsrs	r3, r3, #26
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	e018      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x1e4>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f62:	fa93 f3a3 	rbit	r3, r3
 8005f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005f7a:	2320      	movs	r3, #32
 8005f7c:	e004      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d106      	bne.n	8005f9a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff fbd7 	bl	8005748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fbbb 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10a      	bne.n	8005fc6 <HAL_ADC_ConfigChannel+0x222>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff fbb0 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	0e9b      	lsrs	r3, r3, #26
 8005fc0:	f003 021f 	and.w	r2, r3, #31
 8005fc4:	e01e      	b.n	8006004 <HAL_ADC_ConfigChannel+0x260>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2101      	movs	r1, #1
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7ff fba5 	bl	800571c <LL_ADC_GetOffsetChannel>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fdc:	fa93 f3a3 	rbit	r3, r3
 8005fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005fe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005ff4:	2320      	movs	r3, #32
 8005ff6:	e004      	b.n	8006002 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ffc:	fab3 f383 	clz	r3, r3
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600c:	2b00      	cmp	r3, #0
 800600e:	d105      	bne.n	800601c <HAL_ADC_ConfigChannel+0x278>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	0e9b      	lsrs	r3, r3, #26
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	e018      	b.n	800604e <HAL_ADC_ConfigChannel+0x2aa>
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006028:	fa93 f3a3 	rbit	r3, r3
 800602c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006030:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006040:	2320      	movs	r3, #32
 8006042:	e004      	b.n	800604e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006048:	fab3 f383 	clz	r3, r3
 800604c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800604e:	429a      	cmp	r2, r3
 8006050:	d106      	bne.n	8006060 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2200      	movs	r2, #0
 8006058:	2101      	movs	r1, #1
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fb74 	bl	8005748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2102      	movs	r1, #2
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff fb58 	bl	800571c <LL_ADC_GetOffsetChannel>
 800606c:	4603      	mov	r3, r0
 800606e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_ADC_ConfigChannel+0x2e8>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2102      	movs	r1, #2
 800607c:	4618      	mov	r0, r3
 800607e:	f7ff fb4d 	bl	800571c <LL_ADC_GetOffsetChannel>
 8006082:	4603      	mov	r3, r0
 8006084:	0e9b      	lsrs	r3, r3, #26
 8006086:	f003 021f 	and.w	r2, r3, #31
 800608a:	e01e      	b.n	80060ca <HAL_ADC_ConfigChannel+0x326>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2102      	movs	r1, #2
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fb42 	bl	800571c <LL_ADC_GetOffsetChannel>
 8006098:	4603      	mov	r3, r0
 800609a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a2:	fa93 f3a3 	rbit	r3, r3
 80060a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80060aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80060b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80060ba:	2320      	movs	r3, #32
 80060bc:	e004      	b.n	80060c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80060be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x33e>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	0e9b      	lsrs	r3, r3, #26
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	e016      	b.n	8006110 <HAL_ADC_ConfigChannel+0x36c>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060ee:	fa93 f3a3 	rbit	r3, r3
 80060f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80060fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006102:	2320      	movs	r3, #32
 8006104:	e004      	b.n	8006110 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800610a:	fab3 f383 	clz	r3, r3
 800610e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006110:	429a      	cmp	r2, r3
 8006112:	d106      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2200      	movs	r2, #0
 800611a:	2102      	movs	r1, #2
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff fb13 	bl	8005748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2103      	movs	r1, #3
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff faf7 	bl	800571c <LL_ADC_GetOffsetChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <HAL_ADC_ConfigChannel+0x3aa>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2103      	movs	r1, #3
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff faec 	bl	800571c <LL_ADC_GetOffsetChannel>
 8006144:	4603      	mov	r3, r0
 8006146:	0e9b      	lsrs	r3, r3, #26
 8006148:	f003 021f 	and.w	r2, r3, #31
 800614c:	e017      	b.n	800617e <HAL_ADC_ConfigChannel+0x3da>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2103      	movs	r1, #3
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fae1 	bl	800571c <LL_ADC_GetOffsetChannel>
 800615a:	4603      	mov	r3, r0
 800615c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006160:	fa93 f3a3 	rbit	r3, r3
 8006164:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006168:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800616a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006170:	2320      	movs	r3, #32
 8006172:	e003      	b.n	800617c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x3f2>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	e011      	b.n	80061ba <HAL_ADC_ConfigChannel+0x416>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80061a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80061ae:	2320      	movs	r3, #32
 80061b0:	e003      	b.n	80061ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80061b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b4:	fab3 f383 	clz	r3, r3
 80061b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d106      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2103      	movs	r1, #3
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fabe 	bl	8005748 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7ff fbeb 	bl	80059ac <LL_ADC_IsEnabled>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f040 813d 	bne.w	8006458 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f7ff fb68 	bl	80058c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4aa2      	ldr	r2, [pc, #648]	; (8006480 <HAL_ADC_ConfigChannel+0x6dc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f040 812e 	bne.w	8006458 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10b      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x480>
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	0e9b      	lsrs	r3, r3, #26
 8006212:	3301      	adds	r3, #1
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b09      	cmp	r3, #9
 800621a:	bf94      	ite	ls
 800621c:	2301      	movls	r3, #1
 800621e:	2300      	movhi	r3, #0
 8006220:	b2db      	uxtb	r3, r3
 8006222:	e019      	b.n	8006258 <HAL_ADC_ConfigChannel+0x4b4>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622c:	fa93 f3a3 	rbit	r3, r3
 8006230:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006234:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800623c:	2320      	movs	r3, #32
 800623e:	e003      	b.n	8006248 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006240:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006242:	fab3 f383 	clz	r3, r3
 8006246:	b2db      	uxtb	r3, r3
 8006248:	3301      	adds	r3, #1
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	2b09      	cmp	r3, #9
 8006250:	bf94      	ite	ls
 8006252:	2301      	movls	r3, #1
 8006254:	2300      	movhi	r3, #0
 8006256:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006258:	2b00      	cmp	r3, #0
 800625a:	d079      	beq.n	8006350 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006264:	2b00      	cmp	r3, #0
 8006266:	d107      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x4d4>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	0e9b      	lsrs	r3, r3, #26
 800626e:	3301      	adds	r3, #1
 8006270:	069b      	lsls	r3, r3, #26
 8006272:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006276:	e015      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x500>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006280:	fa93 f3a3 	rbit	r3, r3
 8006284:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800628a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006290:	2320      	movs	r3, #32
 8006292:	e003      	b.n	800629c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006296:	fab3 f383 	clz	r3, r3
 800629a:	b2db      	uxtb	r3, r3
 800629c:	3301      	adds	r3, #1
 800629e:	069b      	lsls	r3, r3, #26
 80062a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x520>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	0e9b      	lsrs	r3, r3, #26
 80062b6:	3301      	adds	r3, #1
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	e017      	b.n	80062f4 <HAL_ADC_ConfigChannel+0x550>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062cc:	fa93 f3a3 	rbit	r3, r3
 80062d0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80062d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062d4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80062d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d101      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80062dc:	2320      	movs	r3, #32
 80062de:	e003      	b.n	80062e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80062e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062e2:	fab3 f383 	clz	r3, r3
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	3301      	adds	r3, #1
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	2101      	movs	r1, #1
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	ea42 0103 	orr.w	r1, r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <HAL_ADC_ConfigChannel+0x576>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	0e9b      	lsrs	r3, r3, #26
 800630a:	3301      	adds	r3, #1
 800630c:	f003 021f 	and.w	r2, r3, #31
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	051b      	lsls	r3, r3, #20
 8006318:	e018      	b.n	800634c <HAL_ADC_ConfigChannel+0x5a8>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006322:	fa93 f3a3 	rbit	r3, r3
 8006326:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800632c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006332:	2320      	movs	r3, #32
 8006334:	e003      	b.n	800633e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006338:	fab3 f383 	clz	r3, r3
 800633c:	b2db      	uxtb	r3, r3
 800633e:	3301      	adds	r3, #1
 8006340:	f003 021f 	and.w	r2, r3, #31
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800634c:	430b      	orrs	r3, r1
 800634e:	e07e      	b.n	800644e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006358:	2b00      	cmp	r3, #0
 800635a:	d107      	bne.n	800636c <HAL_ADC_ConfigChannel+0x5c8>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	0e9b      	lsrs	r3, r3, #26
 8006362:	3301      	adds	r3, #1
 8006364:	069b      	lsls	r3, r3, #26
 8006366:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800636a:	e015      	b.n	8006398 <HAL_ADC_ConfigChannel+0x5f4>
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	fa93 f3a3 	rbit	r3, r3
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006384:	2320      	movs	r3, #32
 8006386:	e003      	b.n	8006390 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	b2db      	uxtb	r3, r3
 8006390:	3301      	adds	r3, #1
 8006392:	069b      	lsls	r3, r3, #26
 8006394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d109      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x614>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	0e9b      	lsrs	r3, r3, #26
 80063aa:	3301      	adds	r3, #1
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f303 	lsl.w	r3, r1, r3
 80063b6:	e017      	b.n	80063e8 <HAL_ADC_ConfigChannel+0x644>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	fa93 f3a3 	rbit	r3, r3
 80063c4:	61fb      	str	r3, [r7, #28]
  return result;
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80063d0:	2320      	movs	r3, #32
 80063d2:	e003      	b.n	80063dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	fab3 f383 	clz	r3, r3
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	3301      	adds	r3, #1
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	2101      	movs	r1, #1
 80063e4:	fa01 f303 	lsl.w	r3, r1, r3
 80063e8:	ea42 0103 	orr.w	r1, r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10d      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x670>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	0e9b      	lsrs	r3, r3, #26
 80063fe:	3301      	adds	r3, #1
 8006400:	f003 021f 	and.w	r2, r3, #31
 8006404:	4613      	mov	r3, r2
 8006406:	005b      	lsls	r3, r3, #1
 8006408:	4413      	add	r3, r2
 800640a:	3b1e      	subs	r3, #30
 800640c:	051b      	lsls	r3, r3, #20
 800640e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006412:	e01b      	b.n	800644c <HAL_ADC_ConfigChannel+0x6a8>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	fa93 f3a3 	rbit	r3, r3
 8006420:	613b      	str	r3, [r7, #16]
  return result;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800642c:	2320      	movs	r3, #32
 800642e:	e003      	b.n	8006438 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f003 021f 	and.w	r2, r3, #31
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	3b1e      	subs	r3, #30
 8006446:	051b      	lsls	r3, r3, #20
 8006448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800644c:	430b      	orrs	r3, r1
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	4619      	mov	r1, r3
 8006454:	f7ff fa08 	bl	8005868 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <HAL_ADC_ConfigChannel+0x6e0>)
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 80be 	beq.w	80065e2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800646e:	d004      	beq.n	800647a <HAL_ADC_ConfigChannel+0x6d6>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a04      	ldr	r2, [pc, #16]	; (8006488 <HAL_ADC_ConfigChannel+0x6e4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10a      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x6ec>
 800647a:	4b04      	ldr	r3, [pc, #16]	; (800648c <HAL_ADC_ConfigChannel+0x6e8>)
 800647c:	e009      	b.n	8006492 <HAL_ADC_ConfigChannel+0x6ee>
 800647e:	bf00      	nop
 8006480:	407f0000 	.word	0x407f0000
 8006484:	80080000 	.word	0x80080000
 8006488:	50000100 	.word	0x50000100
 800648c:	50000300 	.word	0x50000300
 8006490:	4b59      	ldr	r3, [pc, #356]	; (80065f8 <HAL_ADC_ConfigChannel+0x854>)
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff f910 	bl	80056b8 <LL_ADC_GetCommonPathInternalCh>
 8006498:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a56      	ldr	r2, [pc, #344]	; (80065fc <HAL_ADC_ConfigChannel+0x858>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <HAL_ADC_ConfigChannel+0x70c>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a55      	ldr	r2, [pc, #340]	; (8006600 <HAL_ADC_ConfigChannel+0x85c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d13a      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d134      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c4:	d005      	beq.n	80064d2 <HAL_ADC_ConfigChannel+0x72e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a4e      	ldr	r2, [pc, #312]	; (8006604 <HAL_ADC_ConfigChannel+0x860>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	f040 8085 	bne.w	80065dc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064da:	d004      	beq.n	80064e6 <HAL_ADC_ConfigChannel+0x742>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a49      	ldr	r2, [pc, #292]	; (8006608 <HAL_ADC_ConfigChannel+0x864>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d101      	bne.n	80064ea <HAL_ADC_ConfigChannel+0x746>
 80064e6:	4a49      	ldr	r2, [pc, #292]	; (800660c <HAL_ADC_ConfigChannel+0x868>)
 80064e8:	e000      	b.n	80064ec <HAL_ADC_ConfigChannel+0x748>
 80064ea:	4a43      	ldr	r2, [pc, #268]	; (80065f8 <HAL_ADC_ConfigChannel+0x854>)
 80064ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80064f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f7ff f8cb 	bl	8005692 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064fc:	4b44      	ldr	r3, [pc, #272]	; (8006610 <HAL_ADC_ConfigChannel+0x86c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	099b      	lsrs	r3, r3, #6
 8006502:	4a44      	ldr	r2, [pc, #272]	; (8006614 <HAL_ADC_ConfigChannel+0x870>)
 8006504:	fba2 2303 	umull	r2, r3, r2, r3
 8006508:	099b      	lsrs	r3, r3, #6
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	4613      	mov	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006516:	e002      	b.n	800651e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f9      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006524:	e05a      	b.n	80065dc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a3b      	ldr	r2, [pc, #236]	; (8006618 <HAL_ADC_ConfigChannel+0x874>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d125      	bne.n	800657c <HAL_ADC_ConfigChannel+0x7d8>
 8006530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d11f      	bne.n	800657c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a31      	ldr	r2, [pc, #196]	; (8006608 <HAL_ADC_ConfigChannel+0x864>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d104      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x7ac>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a34      	ldr	r2, [pc, #208]	; (800661c <HAL_ADC_ConfigChannel+0x878>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d047      	beq.n	80065e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006558:	d004      	beq.n	8006564 <HAL_ADC_ConfigChannel+0x7c0>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a2a      	ldr	r2, [pc, #168]	; (8006608 <HAL_ADC_ConfigChannel+0x864>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d101      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x7c4>
 8006564:	4a29      	ldr	r2, [pc, #164]	; (800660c <HAL_ADC_ConfigChannel+0x868>)
 8006566:	e000      	b.n	800656a <HAL_ADC_ConfigChannel+0x7c6>
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <HAL_ADC_ConfigChannel+0x854>)
 800656a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800656e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7ff f88c 	bl	8005692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800657a:	e031      	b.n	80065e0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a27      	ldr	r2, [pc, #156]	; (8006620 <HAL_ADC_ConfigChannel+0x87c>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d12d      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800658a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d127      	bne.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1c      	ldr	r2, [pc, #112]	; (8006608 <HAL_ADC_ConfigChannel+0x864>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a4:	d004      	beq.n	80065b0 <HAL_ADC_ConfigChannel+0x80c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <HAL_ADC_ConfigChannel+0x864>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d101      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x810>
 80065b0:	4a16      	ldr	r2, [pc, #88]	; (800660c <HAL_ADC_ConfigChannel+0x868>)
 80065b2:	e000      	b.n	80065b6 <HAL_ADC_ConfigChannel+0x812>
 80065b4:	4a10      	ldr	r2, [pc, #64]	; (80065f8 <HAL_ADC_ConfigChannel+0x854>)
 80065b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80065ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7ff f866 	bl	8005692 <LL_ADC_SetCommonPathInternalCh>
 80065c6:	e00c      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065cc:	f043 0220 	orr.w	r2, r3, #32
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80065da:	e002      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065dc:	bf00      	nop
 80065de:	e000      	b.n	80065e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	37d8      	adds	r7, #216	; 0xd8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	50000700 	.word	0x50000700
 80065fc:	c3210000 	.word	0xc3210000
 8006600:	90c00010 	.word	0x90c00010
 8006604:	50000600 	.word	0x50000600
 8006608:	50000100 	.word	0x50000100
 800660c:	50000300 	.word	0x50000300
 8006610:	20000000 	.word	0x20000000
 8006614:	053e2d63 	.word	0x053e2d63
 8006618:	c7520000 	.word	0xc7520000
 800661c:	50000500 	.word	0x50000500
 8006620:	cb840000 	.word	0xcb840000

08006624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f003 0307 	and.w	r3, r3, #7
 8006632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <__NVIC_SetPriorityGrouping+0x44>)
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006640:	4013      	ands	r3, r2
 8006642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800664c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006656:	4a04      	ldr	r2, [pc, #16]	; (8006668 <__NVIC_SetPriorityGrouping+0x44>)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	60d3      	str	r3, [r2, #12]
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	e000ed00 	.word	0xe000ed00

0800666c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006670:	4b04      	ldr	r3, [pc, #16]	; (8006684 <__NVIC_GetPriorityGrouping+0x18>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	0a1b      	lsrs	r3, r3, #8
 8006676:	f003 0307 	and.w	r3, r3, #7
}
 800667a:	4618      	mov	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	e000ed00 	.word	0xe000ed00

08006688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	2b00      	cmp	r3, #0
 8006698:	db0b      	blt.n	80066b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800669a:	79fb      	ldrb	r3, [r7, #7]
 800669c:	f003 021f 	and.w	r2, r3, #31
 80066a0:	4907      	ldr	r1, [pc, #28]	; (80066c0 <__NVIC_EnableIRQ+0x38>)
 80066a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	2001      	movs	r0, #1
 80066aa:	fa00 f202 	lsl.w	r2, r0, r2
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	e000e100 	.word	0xe000e100

080066c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	4603      	mov	r3, r0
 80066cc:	6039      	str	r1, [r7, #0]
 80066ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	db0a      	blt.n	80066ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	490c      	ldr	r1, [pc, #48]	; (8006710 <__NVIC_SetPriority+0x4c>)
 80066de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e2:	0112      	lsls	r2, r2, #4
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	440b      	add	r3, r1
 80066e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066ec:	e00a      	b.n	8006704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	4908      	ldr	r1, [pc, #32]	; (8006714 <__NVIC_SetPriority+0x50>)
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	3b04      	subs	r3, #4
 80066fc:	0112      	lsls	r2, r2, #4
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	440b      	add	r3, r1
 8006702:	761a      	strb	r2, [r3, #24]
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	e000e100 	.word	0xe000e100
 8006714:	e000ed00 	.word	0xe000ed00

08006718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006718:	b480      	push	{r7}
 800671a:	b089      	sub	sp, #36	; 0x24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f1c3 0307 	rsb	r3, r3, #7
 8006732:	2b04      	cmp	r3, #4
 8006734:	bf28      	it	cs
 8006736:	2304      	movcs	r3, #4
 8006738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3304      	adds	r3, #4
 800673e:	2b06      	cmp	r3, #6
 8006740:	d902      	bls.n	8006748 <NVIC_EncodePriority+0x30>
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3b03      	subs	r3, #3
 8006746:	e000      	b.n	800674a <NVIC_EncodePriority+0x32>
 8006748:	2300      	movs	r3, #0
 800674a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800674c:	f04f 32ff 	mov.w	r2, #4294967295
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	fa02 f303 	lsl.w	r3, r2, r3
 8006756:	43da      	mvns	r2, r3
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	401a      	ands	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006760:	f04f 31ff 	mov.w	r1, #4294967295
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	fa01 f303 	lsl.w	r3, r1, r3
 800676a:	43d9      	mvns	r1, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006770:	4313      	orrs	r3, r2
         );
}
 8006772:	4618      	mov	r0, r3
 8006774:	3724      	adds	r7, #36	; 0x24
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ff4c 	bl	8006624 <__NVIC_SetPriorityGrouping>
}
 800678c:	bf00      	nop
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067a2:	f7ff ff63 	bl	800666c <__NVIC_GetPriorityGrouping>
 80067a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	6978      	ldr	r0, [r7, #20]
 80067ae:	f7ff ffb3 	bl	8006718 <NVIC_EncodePriority>
 80067b2:	4602      	mov	r2, r0
 80067b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b8:	4611      	mov	r1, r2
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7ff ff82 	bl	80066c4 <__NVIC_SetPriority>
}
 80067c0:	bf00      	nop
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4603      	mov	r3, r0
 80067d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ff56 	bl	8006688 <__NVIC_EnableIRQ>
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e08d      	b.n	8006912 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b47      	ldr	r3, [pc, #284]	; (800691c <HAL_DMA_Init+0x138>)
 80067fe:	429a      	cmp	r2, r3
 8006800:	d80f      	bhi.n	8006822 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	4b45      	ldr	r3, [pc, #276]	; (8006920 <HAL_DMA_Init+0x13c>)
 800680a:	4413      	add	r3, r2
 800680c:	4a45      	ldr	r2, [pc, #276]	; (8006924 <HAL_DMA_Init+0x140>)
 800680e:	fba2 2303 	umull	r2, r3, r2, r3
 8006812:	091b      	lsrs	r3, r3, #4
 8006814:	009a      	lsls	r2, r3, #2
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a42      	ldr	r2, [pc, #264]	; (8006928 <HAL_DMA_Init+0x144>)
 800681e:	641a      	str	r2, [r3, #64]	; 0x40
 8006820:	e00e      	b.n	8006840 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	4b40      	ldr	r3, [pc, #256]	; (800692c <HAL_DMA_Init+0x148>)
 800682a:	4413      	add	r3, r2
 800682c:	4a3d      	ldr	r2, [pc, #244]	; (8006924 <HAL_DMA_Init+0x140>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	009a      	lsls	r2, r3, #2
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a3c      	ldr	r2, [pc, #240]	; (8006930 <HAL_DMA_Init+0x14c>)
 800683e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800687c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9be 	bl	8006c14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a0:	d102      	bne.n	80068a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d010      	beq.n	80068e8 <HAL_DMA_Init+0x104>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d80c      	bhi.n	80068e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f9de 	bl	8006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	e008      	b.n	80068fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	40020407 	.word	0x40020407
 8006920:	bffdfff8 	.word	0xbffdfff8
 8006924:	cccccccd 	.word	0xcccccccd
 8006928:	40020000 	.word	0x40020000
 800692c:	bffdfbf8 	.word	0xbffdfbf8
 8006930:	40020400 	.word	0x40020400

08006934 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d005      	beq.n	8006958 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2204      	movs	r2, #4
 8006950:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	e037      	b.n	80069c8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 020e 	bic.w	r2, r2, #14
 8006966:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006972:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006976:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698c:	f003 021f 	and.w	r2, r3, #31
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f202 	lsl.w	r2, r1, r2
 800699a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80069a4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00c      	beq.n	80069c8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069bc:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80069c6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80069e6:	b580      	push	{r7, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d00d      	beq.n	8006a1a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2204      	movs	r2, #4
 8006a02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e047      	b.n	8006aaa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 020e 	bic.w	r2, r2, #14
 8006a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f003 021f 	and.w	r2, r3, #31
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2101      	movs	r1, #1
 8006a58:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a66:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a7e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a88:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	4798      	blx	r3
    }
  }
  return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f003 031f 	and.w	r3, r3, #31
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	409a      	lsls	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4013      	ands	r3, r2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d026      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x7a>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d021      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0320 	and.w	r3, r3, #32
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d107      	bne.n	8006b08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0204 	bic.w	r2, r2, #4
 8006b06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0c:	f003 021f 	and.w	r2, r3, #31
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	2104      	movs	r1, #4
 8006b16:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d071      	beq.n	8006c08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006b2c:	e06c      	b.n	8006c08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	2202      	movs	r2, #2
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d02e      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d029      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 020a 	bic.w	r2, r2, #10
 8006b68:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	f003 021f 	and.w	r2, r3, #31
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	2102      	movs	r1, #2
 8006b80:	fa01 f202 	lsl.w	r2, r1, r2
 8006b84:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d038      	beq.n	8006c08 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006b9e:	e033      	b.n	8006c08 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	2208      	movs	r2, #8
 8006baa:	409a      	lsls	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02a      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f003 0308 	and.w	r3, r3, #8
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d025      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 020e 	bic.w	r2, r2, #14
 8006bcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	f003 021f 	and.w	r2, r3, #31
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	2101      	movs	r1, #1
 8006bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8006be0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d004      	beq.n	8006c0a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
}
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d802      	bhi.n	8006c2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e001      	b.n	8006c32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006c30:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	3b08      	subs	r3, #8
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006c40:	fba2 2303 	umull	r2, r3, r2, r3
 8006c44:	091b      	lsrs	r3, r3, #4
 8006c46:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	009a      	lsls	r2, r3, #2
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4413      	add	r3, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a0b      	ldr	r2, [pc, #44]	; (8006c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2201      	movs	r2, #1
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	40020407 	.word	0x40020407
 8006c80:	40020800 	.word	0x40020800
 8006c84:	40020820 	.word	0x40020820
 8006c88:	cccccccd 	.word	0xcccccccd
 8006c8c:	40020880 	.word	0x40020880

08006c90 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006cb2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	f003 031f 	and.w	r3, r3, #31
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	409a      	lsls	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	1000823f 	.word	0x1000823f
 8006cd4:	40020940 	.word	0x40020940

08006cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ce6:	e15a      	b.n	8006f9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	2101      	movs	r1, #1
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 814c 	beq.w	8006f98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d005      	beq.n	8006d18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d130      	bne.n	8006d7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	2203      	movs	r2, #3
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d4e:	2201      	movs	r2, #1
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	43db      	mvns	r3, r3
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	091b      	lsrs	r3, r3, #4
 8006d64:	f003 0201 	and.w	r2, r3, #1
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f003 0303 	and.w	r3, r3, #3
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d017      	beq.n	8006db6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	2203      	movs	r2, #3
 8006d92:	fa02 f303 	lsl.w	r3, r2, r3
 8006d96:	43db      	mvns	r3, r3
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	689a      	ldr	r2, [r3, #8]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d123      	bne.n	8006e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	08da      	lsrs	r2, r3, #3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3208      	adds	r2, #8
 8006dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	f003 0307 	and.w	r3, r3, #7
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	220f      	movs	r2, #15
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	43db      	mvns	r3, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4013      	ands	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	fa02 f303 	lsl.w	r3, r2, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	08da      	lsrs	r2, r3, #3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3208      	adds	r2, #8
 8006e04:	6939      	ldr	r1, [r7, #16]
 8006e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	2203      	movs	r2, #3
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 0203 	and.w	r2, r3, #3
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 80a6 	beq.w	8006f98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e4c:	4b5b      	ldr	r3, [pc, #364]	; (8006fbc <HAL_GPIO_Init+0x2e4>)
 8006e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e50:	4a5a      	ldr	r2, [pc, #360]	; (8006fbc <HAL_GPIO_Init+0x2e4>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	6613      	str	r3, [r2, #96]	; 0x60
 8006e58:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <HAL_GPIO_Init+0x2e4>)
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	60bb      	str	r3, [r7, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e64:	4a56      	ldr	r2, [pc, #344]	; (8006fc0 <HAL_GPIO_Init+0x2e8>)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	089b      	lsrs	r3, r3, #2
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	220f      	movs	r2, #15
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	43db      	mvns	r3, r3
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4013      	ands	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e8e:	d01f      	beq.n	8006ed0 <HAL_GPIO_Init+0x1f8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a4c      	ldr	r2, [pc, #304]	; (8006fc4 <HAL_GPIO_Init+0x2ec>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d019      	beq.n	8006ecc <HAL_GPIO_Init+0x1f4>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a4b      	ldr	r2, [pc, #300]	; (8006fc8 <HAL_GPIO_Init+0x2f0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <HAL_GPIO_Init+0x1f0>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a4a      	ldr	r2, [pc, #296]	; (8006fcc <HAL_GPIO_Init+0x2f4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00d      	beq.n	8006ec4 <HAL_GPIO_Init+0x1ec>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a49      	ldr	r2, [pc, #292]	; (8006fd0 <HAL_GPIO_Init+0x2f8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <HAL_GPIO_Init+0x1e8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a48      	ldr	r2, [pc, #288]	; (8006fd4 <HAL_GPIO_Init+0x2fc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d101      	bne.n	8006ebc <HAL_GPIO_Init+0x1e4>
 8006eb8:	2305      	movs	r3, #5
 8006eba:	e00a      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ebc:	2306      	movs	r3, #6
 8006ebe:	e008      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	e006      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e004      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e002      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <HAL_GPIO_Init+0x1fa>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	f002 0203 	and.w	r2, r2, #3
 8006ed8:	0092      	lsls	r2, r2, #2
 8006eda:	4093      	lsls	r3, r2
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ee2:	4937      	ldr	r1, [pc, #220]	; (8006fc0 <HAL_GPIO_Init+0x2e8>)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	089b      	lsrs	r3, r3, #2
 8006ee8:	3302      	adds	r3, #2
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ef0:	4b39      	ldr	r3, [pc, #228]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4013      	ands	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d003      	beq.n	8006f14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f14:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006f1a:	4b2f      	ldr	r3, [pc, #188]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	43db      	mvns	r3, r3
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4013      	ands	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f3e:	4a26      	ldr	r2, [pc, #152]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006f44:	4b24      	ldr	r3, [pc, #144]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	4013      	ands	r3, r2
 8006f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006f68:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	43db      	mvns	r3, r3
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f92:	4a11      	ldr	r2, [pc, #68]	; (8006fd8 <HAL_GPIO_Init+0x300>)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f47f ae9d 	bne.w	8006ce8 <HAL_GPIO_Init+0x10>
  }
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40021000 	.word	0x40021000
 8006fc0:	40010000 	.word	0x40010000
 8006fc4:	48000400 	.word	0x48000400
 8006fc8:	48000800 	.word	0x48000800
 8006fcc:	48000c00 	.word	0x48000c00
 8006fd0:	48001000 	.word	0x48001000
 8006fd4:	48001400 	.word	0x48001400
 8006fd8:	40010400 	.word	0x40010400

08006fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	807b      	strh	r3, [r7, #2]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006fec:	787b      	ldrb	r3, [r7, #1]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ff2:	887a      	ldrh	r2, [r7, #2]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006ff8:	e002      	b.n	8007000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006ffa:	887a      	ldrh	r2, [r7, #2]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800701e:	887a      	ldrh	r2, [r7, #2]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4013      	ands	r3, r2
 8007024:	041a      	lsls	r2, r3, #16
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	43d9      	mvns	r1, r3
 800702a:	887b      	ldrh	r3, [r7, #2]
 800702c:	400b      	ands	r3, r1
 800702e:	431a      	orrs	r2, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	619a      	str	r2, [r3, #24]
}
 8007034:	bf00      	nop
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800704a:	4b08      	ldr	r3, [pc, #32]	; (800706c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800704c:	695a      	ldr	r2, [r3, #20]
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	4013      	ands	r3, r2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d006      	beq.n	8007064 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800705c:	88fb      	ldrh	r3, [r7, #6]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 f806 	bl	8007070 <HAL_GPIO_EXTI_Callback>
  }
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40010400 	.word	0x40010400

08007070 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr

08007086 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007086:	b580      	push	{r7, lr}
 8007088:	b082      	sub	sp, #8
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e081      	b.n	800719c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d106      	bne.n	80070b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fd fca3 	bl	80049f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2224      	movs	r2, #36	; 0x24
 80070b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 0201 	bic.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d107      	bne.n	8007100 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070fc:	609a      	str	r2, [r3, #8]
 80070fe:	e006      	b.n	800710e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800710c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d104      	bne.n	8007120 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800711e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6812      	ldr	r2, [r2, #0]
 800712a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800712e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007132:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007142:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69d9      	ldr	r1, [r3, #28]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f042 0201 	orr.w	r2, r2, #1
 800717c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	4608      	mov	r0, r1
 80071ae:	4611      	mov	r1, r2
 80071b0:	461a      	mov	r2, r3
 80071b2:	4603      	mov	r3, r0
 80071b4:	817b      	strh	r3, [r7, #10]
 80071b6:	460b      	mov	r3, r1
 80071b8:	813b      	strh	r3, [r7, #8]
 80071ba:	4613      	mov	r3, r2
 80071bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	f040 80f9 	bne.w	80073be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_I2C_Mem_Write+0x34>
 80071d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d105      	bne.n	80071e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0ed      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_I2C_Mem_Write+0x4e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e0e6      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071fa:	f7fe fa09 	bl	8005610 <HAL_GetTick>
 80071fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2319      	movs	r3, #25
 8007206:	2201      	movs	r2, #1
 8007208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fac3 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0d1      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2221      	movs	r2, #33	; 0x21
 8007220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a3a      	ldr	r2, [r7, #32]
 8007236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800723c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007244:	88f8      	ldrh	r0, [r7, #6]
 8007246:	893a      	ldrh	r2, [r7, #8]
 8007248:	8979      	ldrh	r1, [r7, #10]
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	9301      	str	r3, [sp, #4]
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	4603      	mov	r3, r0
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f000 f9d3 	bl	8007600 <I2C_RequestMemoryWrite>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d005      	beq.n	800726c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0a9      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007270:	b29b      	uxth	r3, r3
 8007272:	2bff      	cmp	r3, #255	; 0xff
 8007274:	d90e      	bls.n	8007294 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	22ff      	movs	r2, #255	; 0xff
 800727a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007280:	b2da      	uxtb	r2, r3
 8007282:	8979      	ldrh	r1, [r7, #10]
 8007284:	2300      	movs	r3, #0
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fc2b 	bl	8007ae8 <I2C_TransferConfig>
 8007292:	e00f      	b.n	80072b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29a      	uxth	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	8979      	ldrh	r1, [r7, #10]
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fc1a 	bl	8007ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 faad 	bl	8007818 <I2C_WaitOnTXISFlagUntilTimeout>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e07b      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	3b01      	subs	r3, #1
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f0:	3b01      	subs	r3, #1
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d034      	beq.n	800736c <HAL_I2C_Mem_Write+0x1c8>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007306:	2b00      	cmp	r3, #0
 8007308:	d130      	bne.n	800736c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	2200      	movs	r2, #0
 8007312:	2180      	movs	r1, #128	; 0x80
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 fa3f 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	e04d      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007328:	b29b      	uxth	r3, r3
 800732a:	2bff      	cmp	r3, #255	; 0xff
 800732c:	d90e      	bls.n	800734c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	8979      	ldrh	r1, [r7, #10]
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fbcf 	bl	8007ae8 <I2C_TransferConfig>
 800734a:	e00f      	b.n	800736c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735a:	b2da      	uxtb	r2, r3
 800735c:	8979      	ldrh	r1, [r7, #10]
 800735e:	2300      	movs	r3, #0
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fbbe 	bl	8007ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d19e      	bne.n	80072b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 fa8c 	bl	8007898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e01a      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2220      	movs	r2, #32
 8007390:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6859      	ldr	r1, [r3, #4]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_I2C_Mem_Write+0x224>)
 800739e:	400b      	ands	r3, r1
 80073a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073ba:	2300      	movs	r3, #0
 80073bc:	e000      	b.n	80073c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073be:	2302      	movs	r3, #2
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	fe00e800 	.word	0xfe00e800

080073cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af02      	add	r7, sp, #8
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	4603      	mov	r3, r0
 80073dc:	817b      	strh	r3, [r7, #10]
 80073de:	460b      	mov	r3, r1
 80073e0:	813b      	strh	r3, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	f040 80fd 	bne.w	80075ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_I2C_Mem_Read+0x34>
 80073fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007406:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	e0f1      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_I2C_Mem_Read+0x4e>
 8007416:	2302      	movs	r3, #2
 8007418:	e0ea      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007422:	f7fe f8f5 	bl	8005610 <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	2319      	movs	r3, #25
 800742e:	2201      	movs	r2, #1
 8007430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 f9af 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e0d5      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2222      	movs	r2, #34	; 0x22
 8007448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a3a      	ldr	r2, [r7, #32]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800746c:	88f8      	ldrh	r0, [r7, #6]
 800746e:	893a      	ldrh	r2, [r7, #8]
 8007470:	8979      	ldrh	r1, [r7, #10]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	9301      	str	r3, [sp, #4]
 8007476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	4603      	mov	r3, r0
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f913 	bl	80076a8 <I2C_RequestMemoryRead>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0ad      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007498:	b29b      	uxth	r3, r3
 800749a:	2bff      	cmp	r3, #255	; 0xff
 800749c:	d90e      	bls.n	80074bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	22ff      	movs	r2, #255	; 0xff
 80074a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074a8:	b2da      	uxtb	r2, r3
 80074aa:	8979      	ldrh	r1, [r7, #10]
 80074ac:	4b52      	ldr	r3, [pc, #328]	; (80075f8 <HAL_I2C_Mem_Read+0x22c>)
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 fb17 	bl	8007ae8 <I2C_TransferConfig>
 80074ba:	e00f      	b.n	80074dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	8979      	ldrh	r1, [r7, #10]
 80074ce:	4b4a      	ldr	r3, [pc, #296]	; (80075f8 <HAL_I2C_Mem_Read+0x22c>)
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fb06 	bl	8007ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2200      	movs	r2, #0
 80074e4:	2104      	movs	r1, #4
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f956 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e07c      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007508:	1c5a      	adds	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007512:	3b01      	subs	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29a      	uxth	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800752c:	b29b      	uxth	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d034      	beq.n	800759c <HAL_I2C_Mem_Read+0x1d0>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	d130      	bne.n	800759c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007540:	2200      	movs	r2, #0
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f927 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e04d      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29b      	uxth	r3, r3
 800755a:	2bff      	cmp	r3, #255	; 0xff
 800755c:	d90e      	bls.n	800757c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	22ff      	movs	r2, #255	; 0xff
 8007562:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007568:	b2da      	uxtb	r2, r3
 800756a:	8979      	ldrh	r1, [r7, #10]
 800756c:	2300      	movs	r3, #0
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 fab7 	bl	8007ae8 <I2C_TransferConfig>
 800757a:	e00f      	b.n	800759c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758a:	b2da      	uxtb	r2, r3
 800758c:	8979      	ldrh	r1, [r7, #10]
 800758e:	2300      	movs	r3, #0
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 faa6 	bl	8007ae8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d19a      	bne.n	80074dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 f974 	bl	8007898 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e01a      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2220      	movs	r2, #32
 80075c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6859      	ldr	r1, [r3, #4]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <HAL_I2C_Mem_Read+0x230>)
 80075ce:	400b      	ands	r3, r1
 80075d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e000      	b.n	80075f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	80002400 	.word	0x80002400
 80075fc:	fe00e800 	.word	0xfe00e800

08007600 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	4608      	mov	r0, r1
 800760a:	4611      	mov	r1, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4603      	mov	r3, r0
 8007610:	817b      	strh	r3, [r7, #10]
 8007612:	460b      	mov	r3, r1
 8007614:	813b      	strh	r3, [r7, #8]
 8007616:	4613      	mov	r3, r2
 8007618:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	8979      	ldrh	r1, [r7, #10]
 8007620:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <I2C_RequestMemoryWrite+0xa4>)
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fa5d 	bl	8007ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f8f0 	bl	8007818 <I2C_WaitOnTXISFlagUntilTimeout>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e02c      	b.n	800769c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007642:	88fb      	ldrh	r3, [r7, #6]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d105      	bne.n	8007654 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007648:	893b      	ldrh	r3, [r7, #8]
 800764a:	b2da      	uxtb	r2, r3
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	629a      	str	r2, [r3, #40]	; 0x28
 8007652:	e015      	b.n	8007680 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007654:	893b      	ldrh	r3, [r7, #8]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	b29b      	uxth	r3, r3
 800765a:	b2da      	uxtb	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 f8d6 	bl	8007818 <I2C_WaitOnTXISFlagUntilTimeout>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e012      	b.n	800769c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007676:	893b      	ldrh	r3, [r7, #8]
 8007678:	b2da      	uxtb	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	2200      	movs	r2, #0
 8007688:	2180      	movs	r1, #128	; 0x80
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f884 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d001      	beq.n	800769a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	80002000 	.word	0x80002000

080076a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	461a      	mov	r2, r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	817b      	strh	r3, [r7, #10]
 80076ba:	460b      	mov	r3, r1
 80076bc:	813b      	strh	r3, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80076c2:	88fb      	ldrh	r3, [r7, #6]
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	8979      	ldrh	r1, [r7, #10]
 80076c8:	4b20      	ldr	r3, [pc, #128]	; (800774c <I2C_RequestMemoryRead+0xa4>)
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	2300      	movs	r3, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 fa0a 	bl	8007ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	69b9      	ldr	r1, [r7, #24]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f89d 	bl	8007818 <I2C_WaitOnTXISFlagUntilTimeout>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e02c      	b.n	8007742 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076e8:	88fb      	ldrh	r3, [r7, #6]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d105      	bne.n	80076fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28
 80076f8:	e015      	b.n	8007726 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b29b      	uxth	r3, r3
 8007700:	b2da      	uxtb	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	69b9      	ldr	r1, [r7, #24]
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f883 	bl	8007818 <I2C_WaitOnTXISFlagUntilTimeout>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e012      	b.n	8007742 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800771c:	893b      	ldrh	r3, [r7, #8]
 800771e:	b2da      	uxtb	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2200      	movs	r2, #0
 800772e:	2140      	movs	r1, #64	; 0x40
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f000 f831 	bl	8007798 <I2C_WaitOnFlagUntilTimeout>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	80002000 	.word	0x80002000

08007750 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b02      	cmp	r3, #2
 8007764:	d103      	bne.n	800776e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2200      	movs	r2, #0
 800776c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b01      	cmp	r3, #1
 800777a:	d007      	beq.n	800778c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699a      	ldr	r2, [r3, #24]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	619a      	str	r2, [r3, #24]
  }
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077a8:	e022      	b.n	80077f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d01e      	beq.n	80077f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b2:	f7fd ff2d 	bl	8005610 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d113      	bne.n	80077f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077cc:	f043 0220 	orr.w	r2, r3, #32
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2220      	movs	r2, #32
 80077d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e00f      	b.n	8007810 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699a      	ldr	r2, [r3, #24]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4013      	ands	r3, r2
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	bf0c      	ite	eq
 8007800:	2301      	moveq	r3, #1
 8007802:	2300      	movne	r3, #0
 8007804:	b2db      	uxtb	r3, r3
 8007806:	461a      	mov	r2, r3
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	429a      	cmp	r2, r3
 800780c:	d0cd      	beq.n	80077aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007824:	e02c      	b.n	8007880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f870 	bl	8007910 <I2C_IsErrorOccurred>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d001      	beq.n	800783a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e02a      	b.n	8007890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d01e      	beq.n	8007880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007842:	f7fd fee5 	bl	8005610 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d113      	bne.n	8007880 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e007      	b.n	8007890 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b02      	cmp	r3, #2
 800788c:	d1cb      	bne.n	8007826 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078a4:	e028      	b.n	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f830 	bl	8007910 <I2C_IsErrorOccurred>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e026      	b.n	8007908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fd fea9 	bl	8005610 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d113      	bne.n	80078f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d4:	f043 0220 	orr.w	r2, r3, #32
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e007      	b.n	8007908 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f003 0320 	and.w	r3, r3, #32
 8007902:	2b20      	cmp	r3, #32
 8007904:	d1cf      	bne.n	80078a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007906:	2300      	movs	r3, #0
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b00      	cmp	r3, #0
 800793a:	d075      	beq.n	8007a28 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2210      	movs	r2, #16
 8007942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007944:	e056      	b.n	80079f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d052      	beq.n	80079f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fd fe5f 	bl	8005610 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <I2C_IsErrorOccurred+0x54>
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d147      	bne.n	80079f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800796e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007986:	d12e      	bne.n	80079e6 <I2C_IsErrorOccurred+0xd6>
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800798e:	d02a      	beq.n	80079e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007990:	7cfb      	ldrb	r3, [r7, #19]
 8007992:	2b20      	cmp	r3, #32
 8007994:	d027      	beq.n	80079e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079a4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079a6:	f7fd fe33 	bl	8005610 <HAL_GetTick>
 80079aa:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ac:	e01b      	b.n	80079e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80079ae:	f7fd fe2f 	bl	8005610 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b19      	cmp	r3, #25
 80079ba:	d914      	bls.n	80079e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	f043 0220 	orr.w	r2, r3, #32
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2220      	movs	r2, #32
 80079cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f003 0320 	and.w	r3, r3, #32
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d1dc      	bne.n	80079ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	d003      	beq.n	8007a0a <I2C_IsErrorOccurred+0xfa>
 8007a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d09d      	beq.n	8007946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d103      	bne.n	8007a1a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2220      	movs	r2, #32
 8007a18:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	f043 0304 	orr.w	r3, r3, #4
 8007a20:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00b      	beq.n	8007a52 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00b      	beq.n	8007a74 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	f043 0308 	orr.w	r3, r3, #8
 8007a62:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00b      	beq.n	8007a96 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007a90:	2301      	movs	r3, #1
 8007a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01c      	beq.n	8007ad8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fe56 	bl	8007750 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <I2C_IsErrorOccurred+0x1d4>)
 8007ab0:	400b      	ands	r3, r1
 8007ab2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3728      	adds	r7, #40	; 0x28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	fe00e800 	.word	0xfe00e800

08007ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	607b      	str	r3, [r7, #4]
 8007af2:	460b      	mov	r3, r1
 8007af4:	817b      	strh	r3, [r7, #10]
 8007af6:	4613      	mov	r3, r2
 8007af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007afa:	897b      	ldrh	r3, [r7, #10]
 8007afc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b00:	7a7b      	ldrb	r3, [r7, #9]
 8007b02:	041b      	lsls	r3, r3, #16
 8007b04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b08:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b16:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	0d5b      	lsrs	r3, r3, #21
 8007b22:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <I2C_TransferConfig+0x60>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	43db      	mvns	r3, r3
 8007b2c:	ea02 0103 	and.w	r1, r2, r3
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b3a:	bf00      	nop
 8007b3c:	371c      	adds	r7, #28
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	03ff63ff 	.word	0x03ff63ff

08007b4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d138      	bne.n	8007bd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d101      	bne.n	8007b70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	e032      	b.n	8007bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	; 0x24
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6819      	ldr	r1, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
  }
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b20      	cmp	r3, #32
 8007bf6:	d139      	bne.n	8007c6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c02:	2302      	movs	r3, #2
 8007c04:	e033      	b.n	8007c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2224      	movs	r2, #36	; 0x24
 8007c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 0201 	bic.w	r2, r2, #1
 8007c24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0201 	orr.w	r2, r2, #1
 8007c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e000      	b.n	8007c6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007c6c:	2302      	movs	r3, #2
  }
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3714      	adds	r7, #20
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c7c:	b08b      	sub	sp, #44	; 0x2c
 8007c7e:	af06      	add	r7, sp, #24
 8007c80:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0d7      	b.n	8007e3c <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f009 fc8b 	bl	80115bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2203      	movs	r2, #3
 8007caa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f005 f8c9 	bl	800ce4a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	73fb      	strb	r3, [r7, #15]
 8007cbc:	e04c      	b.n	8007d58 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	440b      	add	r3, r1
 8007cce:	3301      	adds	r3, #1
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	4613      	mov	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	440b      	add	r3, r1
 8007ce4:	7bfa      	ldrb	r2, [r7, #15]
 8007ce6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ce8:	7bfa      	ldrb	r2, [r7, #15]
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	b298      	uxth	r0, r3
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3336      	adds	r3, #54	; 0x36
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	440b      	add	r3, r1
 8007d10:	3303      	adds	r3, #3
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d16:	7bfa      	ldrb	r2, [r7, #15]
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	440b      	add	r3, r1
 8007d24:	3338      	adds	r3, #56	; 0x38
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d2a:	7bfa      	ldrb	r2, [r7, #15]
 8007d2c:	6879      	ldr	r1, [r7, #4]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	440b      	add	r3, r1
 8007d38:	333c      	adds	r3, #60	; 0x3c
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d3e:	7bfa      	ldrb	r2, [r7, #15]
 8007d40:	6879      	ldr	r1, [r7, #4]
 8007d42:	4613      	mov	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4413      	add	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	440b      	add	r3, r1
 8007d4c:	3340      	adds	r3, #64	; 0x40
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	3301      	adds	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	7bfa      	ldrb	r2, [r7, #15]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3ad      	bcc.n	8007cbe <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e044      	b.n	8007df2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	440b      	add	r3, r1
 8007d76:	f203 1369 	addw	r3, r3, #361	; 0x169
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007d7e:	7bfa      	ldrb	r2, [r7, #15]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007d90:	7bfa      	ldrb	r2, [r7, #15]
 8007d92:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	440b      	add	r3, r1
 8007da2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007daa:	7bfa      	ldrb	r2, [r7, #15]
 8007dac:	6879      	ldr	r1, [r7, #4]
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	00db      	lsls	r3, r3, #3
 8007db6:	440b      	add	r3, r1
 8007db8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007dc0:	7bfa      	ldrb	r2, [r7, #15]
 8007dc2:	6879      	ldr	r1, [r7, #4]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	4413      	add	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	440b      	add	r3, r1
 8007dce:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dd6:	7bfa      	ldrb	r2, [r7, #15]
 8007dd8:	6879      	ldr	r1, [r7, #4]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	440b      	add	r3, r1
 8007de4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	3301      	adds	r3, #1
 8007df0:	73fb      	strb	r3, [r7, #15]
 8007df2:	7bfa      	ldrb	r2, [r7, #15]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d3b5      	bcc.n	8007d68 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	603b      	str	r3, [r7, #0]
 8007e02:	687e      	ldr	r6, [r7, #4]
 8007e04:	466d      	mov	r5, sp
 8007e06:	f106 0410 	add.w	r4, r6, #16
 8007e0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	602b      	str	r3, [r5, #0]
 8007e12:	1d33      	adds	r3, r6, #4
 8007e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e16:	6838      	ldr	r0, [r7, #0]
 8007e18:	f005 f832 	bl	800ce80 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d102      	bne.n	8007e3a <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f001 fc29 	bl	800968c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_PCD_Start+0x16>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e012      	b.n	8007e80 <HAL_PCD_Start+0x3c>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f004 ffd8 	bl	800ce1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f007 f9f1 	bl	800f258 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4618      	mov	r0, r3
 8007e96:	f007 f9f6 	bl	800f286 <USB_ReadInterrupts>
 8007e9a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fb26 	bl	80084f8 <PCD_EP_ISR_Handler>

    return;
 8007eac:	e110      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d013      	beq.n	8007ee0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f009 fc04 	bl	80116de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f8fc 	bl	80080d6 <HAL_PCD_SetAddress>

    return;
 8007ede:	e0f7      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00c      	beq.n	8007f04 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007efc:	b292      	uxth	r2, r2
 8007efe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007f02:	e0e5      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00c      	beq.n	8007f28 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f20:	b292      	uxth	r2, r2
 8007f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007f26:	e0d3      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d034      	beq.n	8007f9c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0204 	bic.w	r2, r2, #4
 8007f44:	b292      	uxth	r2, r2
 8007f46:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0208 	bic.w	r2, r2, #8
 8007f5c:	b292      	uxth	r2, r2
 8007f5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d107      	bne.n	8007f7c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007f74:	2100      	movs	r1, #0
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f009 fda6 	bl	8011ac8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f009 fbe7 	bl	8011750 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007f94:	b292      	uxth	r2, r2
 8007f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8007f9a:	e099      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d027      	beq.n	8007ff6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0208 	orr.w	r2, r2, #8
 8007fb8:	b292      	uxth	r2, r2
 8007fba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fd0:	b292      	uxth	r2, r2
 8007fd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0204 	orr.w	r2, r2, #4
 8007fe8:	b292      	uxth	r2, r2
 8007fea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f009 fb94 	bl	801171c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007ff4:	e06c      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d040      	beq.n	8008082 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008008:	b29a      	uxth	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008012:	b292      	uxth	r2, r2
 8008014:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d12b      	bne.n	800807a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800802a:	b29a      	uxth	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f042 0204 	orr.w	r2, r2, #4
 8008034:	b292      	uxth	r2, r2
 8008036:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008042:	b29a      	uxth	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f042 0208 	orr.w	r2, r2, #8
 800804c:	b292      	uxth	r2, r2
 800804e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2201      	movs	r2, #1
 8008056:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008062:	b29b      	uxth	r3, r3
 8008064:	089b      	lsrs	r3, r3, #2
 8008066:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008070:	2101      	movs	r1, #1
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f009 fd28 	bl	8011ac8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008078:	e02a      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f009 fb4e 	bl	801171c <HAL_PCD_SuspendCallback>
    return;
 8008080:	e026      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00f      	beq.n	80080ac <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800809e:	b292      	uxth	r2, r2
 80080a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f009 fb0c 	bl	80116c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80080aa:	e011      	b.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00c      	beq.n	80080d0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80080be:	b29a      	uxth	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080c8:	b292      	uxth	r2, r2
 80080ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80080ce:	bf00      	nop
  }
}
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b082      	sub	sp, #8
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d101      	bne.n	80080f0 <HAL_PCD_SetAddress+0x1a>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e013      	b.n	8008118 <HAL_PCD_SetAddress+0x42>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	4611      	mov	r1, r2
 8008108:	4618      	mov	r0, r3
 800810a:	f007 f891 	bl	800f230 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	461a      	mov	r2, r3
 800812e:	4603      	mov	r3, r0
 8008130:	70fb      	strb	r3, [r7, #3]
 8008132:	460b      	mov	r3, r1
 8008134:	803b      	strh	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800813a:	2300      	movs	r3, #0
 800813c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800813e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008142:	2b00      	cmp	r3, #0
 8008144:	da0e      	bge.n	8008164 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	1c5a      	adds	r2, r3, #1
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	705a      	strb	r2, [r3, #1]
 8008162:	e00e      	b.n	8008182 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	f003 0207 	and.w	r2, r3, #7
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4413      	add	r3, r2
 800817a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	f003 0307 	and.w	r3, r3, #7
 8008188:	b2da      	uxtb	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800818e:	883a      	ldrh	r2, [r7, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	78ba      	ldrb	r2, [r7, #2]
 8008198:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d004      	beq.n	80081ac <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80081ac:	78bb      	ldrb	r3, [r7, #2]
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d102      	bne.n	80081b8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d101      	bne.n	80081c6 <HAL_PCD_EP_Open+0xa6>
 80081c2:	2302      	movs	r3, #2
 80081c4:	e00e      	b.n	80081e4 <HAL_PCD_EP_Open+0xc4>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68f9      	ldr	r1, [r7, #12]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f004 fe75 	bl	800cec4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80081e2:	7afb      	ldrb	r3, [r7, #11]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	460b      	mov	r3, r1
 80081f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80081f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	da0e      	bge.n	800821e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	f003 0307 	and.w	r3, r3, #7
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	4613      	mov	r3, r2
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	4413      	add	r3, r2
 8008214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	705a      	strb	r2, [r3, #1]
 800821c:	e00e      	b.n	800823c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800821e:	78fb      	ldrb	r3, [r7, #3]
 8008220:	f003 0207 	and.w	r2, r3, #7
 8008224:	4613      	mov	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	4413      	add	r3, r2
 800822a:	00db      	lsls	r3, r3, #3
 800822c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800823c:	78fb      	ldrb	r3, [r7, #3]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800824e:	2b01      	cmp	r3, #1
 8008250:	d101      	bne.n	8008256 <HAL_PCD_EP_Close+0x6a>
 8008252:	2302      	movs	r3, #2
 8008254:	e00e      	b.n	8008274 <HAL_PCD_EP_Close+0x88>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68f9      	ldr	r1, [r7, #12]
 8008264:	4618      	mov	r0, r3
 8008266:	f005 f9c1 	bl	800d5ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	460b      	mov	r3, r1
 800828a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800828c:	7afb      	ldrb	r3, [r7, #11]
 800828e:	f003 0207 	and.w	r2, r3, #7
 8008292:	4613      	mov	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4413      	add	r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	2200      	movs	r2, #0
 80082b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2200      	movs	r2, #0
 80082ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80082bc:	7afb      	ldrb	r3, [r7, #11]
 80082be:	f003 0307 	and.w	r3, r3, #7
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6979      	ldr	r1, [r7, #20]
 80082d8:	4618      	mov	r0, r3
 80082da:	f005 fb74 	bl	800d9c6 <USB_EPStartXfer>
 80082de:	e005      	b.n	80082ec <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6979      	ldr	r1, [r7, #20]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f005 fb6d 	bl	800d9c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80082ec:	2300      	movs	r3, #0
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	f003 0207 	and.w	r2, r3, #7
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8008318:	681b      	ldr	r3, [r3, #0]
}
 800831a:	4618      	mov	r0, r3
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b086      	sub	sp, #24
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	460b      	mov	r3, r1
 8008334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008336:	7afb      	ldrb	r3, [r7, #11]
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	4613      	mov	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4413      	add	r3, r2
 8008344:	00db      	lsls	r3, r3, #3
 8008346:	68fa      	ldr	r2, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2200      	movs	r2, #0
 800836a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	2201      	movs	r2, #1
 8008370:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008372:	7afb      	ldrb	r3, [r7, #11]
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	b2da      	uxtb	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	f003 0307 	and.w	r3, r3, #7
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6979      	ldr	r1, [r7, #20]
 800838e:	4618      	mov	r0, r3
 8008390:	f005 fb19 	bl	800d9c6 <USB_EPStartXfer>
 8008394:	e005      	b.n	80083a2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6979      	ldr	r1, [r7, #20]
 800839c:	4618      	mov	r0, r3
 800839e:	f005 fb12 	bl	800d9c6 <USB_EPStartXfer>
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80083b8:	78fb      	ldrb	r3, [r7, #3]
 80083ba:	f003 0207 	and.w	r2, r3, #7
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d901      	bls.n	80083ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e03e      	b.n	8008448 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80083ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	da0e      	bge.n	80083f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	1c5a      	adds	r2, r3, #1
 80083da:	4613      	mov	r3, r2
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	00db      	lsls	r3, r3, #3
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	705a      	strb	r2, [r3, #1]
 80083ee:	e00c      	b.n	800840a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80083f0:	78fa      	ldrb	r2, [r7, #3]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4413      	add	r3, r2
 8008402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2201      	movs	r2, #1
 800840e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	b2da      	uxtb	r2, r3
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <HAL_PCD_EP_SetStall+0x7e>
 8008426:	2302      	movs	r3, #2
 8008428:	e00e      	b.n	8008448 <HAL_PCD_EP_SetStall+0x9c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68f9      	ldr	r1, [r7, #12]
 8008438:	4618      	mov	r0, r3
 800843a:	f006 fdfa 	bl	800f032 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	f003 020f 	and.w	r2, r3, #15
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d901      	bls.n	800846e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e040      	b.n	80084f0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800846e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008472:	2b00      	cmp	r3, #0
 8008474:	da0e      	bge.n	8008494 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	1c5a      	adds	r2, r3, #1
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	705a      	strb	r2, [r3, #1]
 8008492:	e00e      	b.n	80084b2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f003 0207 	and.w	r2, r3, #7
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	f003 0307 	and.w	r3, r3, #7
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d101      	bne.n	80084d2 <HAL_PCD_EP_ClrStall+0x82>
 80084ce:	2302      	movs	r3, #2
 80084d0:	e00e      	b.n	80084f0 <HAL_PCD_EP_ClrStall+0xa0>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f006 fdf7 	bl	800f0d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b096      	sub	sp, #88	; 0x58
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008500:	e39c      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800850a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800850e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008512:	b2db      	uxtb	r3, r3
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800851c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 815e 	bne.w	80087e2 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008526:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800852a:	f003 0310 	and.w	r3, r3, #16
 800852e:	2b00      	cmp	r3, #0
 8008530:	d150      	bne.n	80085d4 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	81fb      	strh	r3, [r7, #14]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	89fb      	ldrh	r3, [r7, #14]
 800854a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800854e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008552:	b29b      	uxth	r3, r3
 8008554:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3328      	adds	r3, #40	; 0x28
 800855a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008564:	b29b      	uxth	r3, r3
 8008566:	461a      	mov	r2, r3
 8008568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	4413      	add	r3, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	6812      	ldr	r2, [r2, #0]
 8008574:	4413      	add	r3, r2
 8008576:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008582:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008586:	695a      	ldr	r2, [r3, #20]
 8008588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	441a      	add	r2, r3
 800858e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008590:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008592:	2100      	movs	r1, #0
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f009 f87a 	bl	801168e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 834a 	beq.w	8008c3c <PCD_EP_ISR_Handler+0x744>
 80085a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f040 8345 	bne.w	8008c3c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085be:	b2da      	uxtb	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	b292      	uxth	r2, r2
 80085c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80085d2:	e333      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80085da:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80085e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80085ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d032      	beq.n	8008658 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	461a      	mov	r2, r3
 80085fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	4413      	add	r3, r2
 800860c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008618:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8008624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008626:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800862c:	b29b      	uxth	r3, r3
 800862e:	f006 fe7c 	bl	800f32a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	b29a      	uxth	r2, r3
 800863a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800863e:	4013      	ands	r3, r2
 8008640:	823b      	strh	r3, [r7, #16]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	8a3a      	ldrh	r2, [r7, #16]
 8008648:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800864c:	b292      	uxth	r2, r2
 800864e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f008 ffef 	bl	8011634 <HAL_PCD_SetupStageCallback>
 8008656:	e2f1      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008658:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800865c:	2b00      	cmp	r3, #0
 800865e:	f280 82ed 	bge.w	8008c3c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	881b      	ldrh	r3, [r3, #0]
 8008668:	b29a      	uxth	r2, r3
 800866a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800866e:	4013      	ands	r3, r2
 8008670:	83fb      	strh	r3, [r7, #30]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	8bfa      	ldrh	r2, [r7, #30]
 8008678:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800867c:	b292      	uxth	r2, r2
 800867e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008688:	b29b      	uxth	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6812      	ldr	r2, [r2, #0]
 8008698:	4413      	add	r3, r2
 800869a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800869e:	881b      	ldrh	r3, [r3, #0]
 80086a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80086a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80086a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d019      	beq.n	80086e4 <PCD_EP_ISR_Handler+0x1ec>
 80086b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d015      	beq.n	80086e4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	6959      	ldr	r1, [r3, #20]
 80086c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80086c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f006 fe2e 	bl	800f32a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	695a      	ldr	r2, [r3, #20]
 80086d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	441a      	add	r2, r3
 80086d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f008 ffba 	bl	8011658 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 82a3 	bne.w	8008c3c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008704:	b29b      	uxth	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	4413      	add	r3, r2
 800870c:	61bb      	str	r3, [r7, #24]
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	2b3e      	cmp	r3, #62	; 0x3e
 800871c:	d918      	bls.n	8008750 <PCD_EP_ISR_Handler+0x258>
 800871e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	095b      	lsrs	r3, r3, #5
 8008724:	647b      	str	r3, [r7, #68]	; 0x44
 8008726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <PCD_EP_ISR_Handler+0x240>
 8008732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008734:	3b01      	subs	r3, #1
 8008736:	647b      	str	r3, [r7, #68]	; 0x44
 8008738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800873a:	b29b      	uxth	r3, r3
 800873c:	029b      	lsls	r3, r3, #10
 800873e:	b29b      	uxth	r3, r3
 8008740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008748:	b29a      	uxth	r2, r3
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	801a      	strh	r2, [r3, #0]
 800874e:	e029      	b.n	80087a4 <PCD_EP_ISR_Handler+0x2ac>
 8008750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008752:	691b      	ldr	r3, [r3, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d112      	bne.n	800877e <PCD_EP_ISR_Handler+0x286>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	b29b      	uxth	r3, r3
 800875e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008762:	b29a      	uxth	r2, r3
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	801a      	strh	r2, [r3, #0]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008776:	b29a      	uxth	r2, r3
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	801a      	strh	r2, [r3, #0]
 800877c:	e012      	b.n	80087a4 <PCD_EP_ISR_Handler+0x2ac>
 800877e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	647b      	str	r3, [r7, #68]	; 0x44
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d002      	beq.n	8008798 <PCD_EP_ISR_Handler+0x2a0>
 8008792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008794:	3301      	adds	r3, #1
 8008796:	647b      	str	r3, [r7, #68]	; 0x44
 8008798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800879a:	b29b      	uxth	r3, r3
 800879c:	029b      	lsls	r3, r3, #10
 800879e:	b29a      	uxth	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	881b      	ldrh	r3, [r3, #0]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087b4:	827b      	strh	r3, [r7, #18]
 80087b6:	8a7b      	ldrh	r3, [r7, #18]
 80087b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80087bc:	827b      	strh	r3, [r7, #18]
 80087be:	8a7b      	ldrh	r3, [r7, #18]
 80087c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80087c4:	827b      	strh	r3, [r7, #18]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	8a7b      	ldrh	r3, [r7, #18]
 80087cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087dc:	b29b      	uxth	r3, r3
 80087de:	8013      	strh	r3, [r2, #0]
 80087e0:	e22c      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	461a      	mov	r2, r3
 80087e8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	881b      	ldrh	r3, [r3, #0]
 80087f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80087f6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f280 80f6 	bge.w	80089ec <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	881b      	ldrh	r3, [r3, #0]
 8008810:	b29a      	uxth	r2, r3
 8008812:	f640 738f 	movw	r3, #3983	; 0xf8f
 8008816:	4013      	ands	r3, r2
 8008818:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	4413      	add	r3, r2
 800882a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800882e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008832:	b292      	uxth	r2, r2
 8008834:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008836:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4413      	add	r3, r2
 800884a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800884c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884e:	7b1b      	ldrb	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d123      	bne.n	800889c <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885c:	b29b      	uxth	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4413      	add	r3, r2
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	4413      	add	r3, r2
 800886e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008878:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800887c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 808e 	beq.w	80089a2 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800888c:	6959      	ldr	r1, [r3, #20]
 800888e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008890:	88da      	ldrh	r2, [r3, #6]
 8008892:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008896:	f006 fd48 	bl	800f32a <USB_ReadPMA>
 800889a:	e082      	b.n	80089a2 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800889c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800889e:	78db      	ldrb	r3, [r3, #3]
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d10a      	bne.n	80088ba <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80088a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80088a8:	461a      	mov	r2, r3
 80088aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f9d3 	bl	8008c58 <HAL_PCD_EP_DB_Receive>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80088b8:	e073      	b.n	80089a2 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088d4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	441a      	add	r2, r3
 80088e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80088ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d022      	beq.n	800895e <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008920:	b29b      	uxth	r3, r3
 8008922:	461a      	mov	r2, r3
 8008924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	00db      	lsls	r3, r3, #3
 800892a:	4413      	add	r3, r2
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	6812      	ldr	r2, [r2, #0]
 8008930:	4413      	add	r3, r2
 8008932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800893c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8008940:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008944:	2b00      	cmp	r3, #0
 8008946:	d02c      	beq.n	80089a2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894e:	6959      	ldr	r1, [r3, #20]
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	891a      	ldrh	r2, [r3, #8]
 8008954:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008958:	f006 fce7 	bl	800f32a <USB_ReadPMA>
 800895c:	e021      	b.n	80089a2 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008966:	b29b      	uxth	r3, r3
 8008968:	461a      	mov	r2, r3
 800896a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6812      	ldr	r2, [r2, #0]
 8008976:	4413      	add	r3, r2
 8008978:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008982:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8008986:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6818      	ldr	r0, [r3, #0]
 8008992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008994:	6959      	ldr	r1, [r3, #20]
 8008996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008998:	895a      	ldrh	r2, [r3, #10]
 800899a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800899e:	f006 fcc4 	bl	800f32a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80089a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089a4:	69da      	ldr	r2, [r3, #28]
 80089a6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80089aa:	441a      	add	r2, r3
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80089b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80089b8:	441a      	add	r2, r3
 80089ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80089be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <PCD_EP_ISR_Handler+0x4da>
 80089c6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d206      	bcs.n	80089e0 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80089d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f008 fe3d 	bl	8011658 <HAL_PCD_DataOutStageCallback>
 80089de:	e005      	b.n	80089ec <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80089e6:	4618      	mov	r0, r3
 80089e8:	f004 ffed 	bl	800d9c6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80089ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80089f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8121 	beq.w	8008c3c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80089fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	881b      	ldrh	r3, [r3, #0]
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8008a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	461a      	mov	r2, r3
 8008a32:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	441a      	add	r2, r3
 8008a3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8008a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a4c:	78db      	ldrb	r3, [r3, #3]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	f000 80a2 	beq.w	8008b98 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8008a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a56:	2200      	movs	r2, #0
 8008a58:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a5c:	7b1b      	ldrb	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 8093 	beq.w	8008b8a <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008a64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d046      	beq.n	8008afe <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a72:	785b      	ldrb	r3, [r3, #1]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d126      	bne.n	8008ac6 <PCD_EP_ISR_Handler+0x5ce>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8c:	4413      	add	r3, r2
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	00da      	lsls	r2, r3, #3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a9e:	623b      	str	r3, [r7, #32]
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e061      	b.n	8008b8a <PCD_EP_ISR_Handler+0x692>
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	785b      	ldrb	r3, [r3, #1]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d15d      	bne.n	8008b8a <PCD_EP_ISR_Handler+0x692>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	4413      	add	r3, r2
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	00da      	lsls	r2, r3, #3
 8008aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aee:	4413      	add	r3, r2
 8008af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af8:	2200      	movs	r2, #0
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	e045      	b.n	8008b8a <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d126      	bne.n	8008b5a <PCD_EP_ISR_Handler+0x662>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b20:	4413      	add	r3, r2
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34
 8008b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	00da      	lsls	r2, r3, #3
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b32:	633b      	str	r3, [r7, #48]	; 0x30
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b42:	801a      	strh	r2, [r3, #0]
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b56:	801a      	strh	r2, [r3, #0]
 8008b58:	e017      	b.n	8008b8a <PCD_EP_ISR_Handler+0x692>
 8008b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5c:	785b      	ldrb	r3, [r3, #1]
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d113      	bne.n	8008b8a <PCD_EP_ISR_Handler+0x692>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b70:	4413      	add	r3, r2
 8008b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	00da      	lsls	r2, r3, #3
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b82:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b86:	2200      	movs	r2, #0
 8008b88:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f008 fd7c 	bl	801168e <HAL_PCD_DataInStageCallback>
 8008b96:	e051      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008b98:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d144      	bne.n	8008c2e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	6812      	ldr	r2, [r2, #0]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bc2:	881b      	ldrh	r3, [r3, #0]
 8008bc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bc8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8008bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bce:	699a      	ldr	r2, [r3, #24]
 8008bd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d907      	bls.n	8008be8 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8008bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008be0:	1ad2      	subs	r2, r2, r3
 8008be2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be4:	619a      	str	r2, [r3, #24]
 8008be6:	e002      	b.n	8008bee <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8008be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bea:	2200      	movs	r2, #0
 8008bec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d106      	bne.n	8008c04 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f008 fd46 	bl	801168e <HAL_PCD_DataInStageCallback>
 8008c02:	e01b      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c0c:	441a      	add	r2, r3
 8008c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c10:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c14:	69da      	ldr	r2, [r3, #28]
 8008c16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008c1a:	441a      	add	r2, r3
 8008c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c1e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c26:	4618      	mov	r0, r3
 8008c28:	f004 fecd 	bl	800d9c6 <USB_EPStartXfer>
 8008c2c:	e006      	b.n	8008c3c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008c2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8008c32:	461a      	mov	r2, r3
 8008c34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 f917 	bl	8008e6a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	b21b      	sxth	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f6ff ac5a 	blt.w	8008502 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3758      	adds	r7, #88	; 0x58
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d07c      	beq.n	8008d6a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	4413      	add	r3, r2
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	6812      	ldr	r2, [r2, #0]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	699a      	ldr	r2, [r3, #24]
 8008c9a:	8b7b      	ldrh	r3, [r7, #26]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d306      	bcc.n	8008cae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	699a      	ldr	r2, [r3, #24]
 8008ca4:	8b7b      	ldrh	r3, [r7, #26]
 8008ca6:	1ad2      	subs	r2, r2, r3
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	619a      	str	r2, [r3, #24]
 8008cac:	e002      	b.n	8008cb4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d123      	bne.n	8008d04 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd6:	833b      	strh	r3, [r7, #24]
 8008cd8:	8b3b      	ldrh	r3, [r7, #24]
 8008cda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cde:	833b      	strh	r3, [r7, #24]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	441a      	add	r2, r3
 8008cee:	8b3b      	ldrh	r3, [r7, #24]
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008d04:	88fb      	ldrh	r3, [r7, #6]
 8008d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d01f      	beq.n	8008d4e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	461a      	mov	r2, r3
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d28:	82fb      	strh	r3, [r7, #22]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	8afb      	ldrh	r3, [r7, #22]
 8008d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008d4e:	8b7b      	ldrh	r3, [r7, #26]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 8085 	beq.w	8008e60 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6959      	ldr	r1, [r3, #20]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	891a      	ldrh	r2, [r3, #8]
 8008d62:	8b7b      	ldrh	r3, [r7, #26]
 8008d64:	f006 fae1 	bl	800f32a <USB_ReadPMA>
 8008d68:	e07a      	b.n	8008e60 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	4413      	add	r3, r2
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	6812      	ldr	r2, [r2, #0]
 8008d82:	4413      	add	r3, r2
 8008d84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d8e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	699a      	ldr	r2, [r3, #24]
 8008d94:	8b7b      	ldrh	r3, [r7, #26]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d306      	bcc.n	8008da8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	8b7b      	ldrh	r3, [r7, #26]
 8008da0:	1ad2      	subs	r2, r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	619a      	str	r2, [r3, #24]
 8008da6:	e002      	b.n	8008dae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	699b      	ldr	r3, [r3, #24]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d123      	bne.n	8008dfe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	881b      	ldrh	r3, [r3, #0]
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dd0:	83fb      	strh	r3, [r7, #30]
 8008dd2:	8bfb      	ldrh	r3, [r7, #30]
 8008dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008dd8:	83fb      	strh	r3, [r7, #30]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	461a      	mov	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	441a      	add	r2, r3
 8008de8:	8bfb      	ldrh	r3, [r7, #30]
 8008dea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008dfe:	88fb      	ldrh	r3, [r7, #6]
 8008e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11f      	bne.n	8008e48 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	83bb      	strh	r3, [r7, #28]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	441a      	add	r2, r3
 8008e32:	8bbb      	ldrh	r3, [r7, #28]
 8008e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008e48:	8b7b      	ldrh	r3, [r7, #26]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6818      	ldr	r0, [r3, #0]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6959      	ldr	r1, [r3, #20]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	895a      	ldrh	r2, [r3, #10]
 8008e5a:	8b7b      	ldrh	r3, [r7, #26]
 8008e5c:	f006 fa65 	bl	800f32a <USB_ReadPMA>
    }
  }

  return count;
 8008e60:	8b7b      	ldrh	r3, [r7, #26]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b0a2      	sub	sp, #136	; 0x88
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	4613      	mov	r3, r2
 8008e76:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008e78:	88fb      	ldrh	r3, [r7, #6]
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f000 81c5 	beq.w	800920e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	00db      	lsls	r3, r3, #3
 8008e96:	4413      	add	r3, r2
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ea2:	881b      	ldrh	r3, [r3, #0]
 8008ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ea8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d907      	bls.n	8008ec8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	699a      	ldr	r2, [r3, #24]
 8008ebc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008ec0:	1ad2      	subs	r2, r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	619a      	str	r2, [r3, #24]
 8008ec6:	e002      	b.n	8008ece <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f040 80b9 	bne.w	800904a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	785b      	ldrb	r3, [r3, #1]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d126      	bne.n	8008f2e <HAL_PCD_EP_DB_Transmit+0xc4>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef4:	4413      	add	r3, r2
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	00da      	lsls	r2, r3, #3
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	4413      	add	r3, r2
 8008f02:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f06:	627b      	str	r3, [r7, #36]	; 0x24
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	881b      	ldrh	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	801a      	strh	r2, [r3, #0]
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2a:	801a      	strh	r2, [r3, #0]
 8008f2c:	e01a      	b.n	8008f64 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	785b      	ldrb	r3, [r3, #1]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d116      	bne.n	8008f64 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	461a      	mov	r2, r3
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	4413      	add	r3, r2
 8008f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	00da      	lsls	r2, r3, #3
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	4413      	add	r3, r2
 8008f58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	2200      	movs	r2, #0
 8008f62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	623b      	str	r3, [r7, #32]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	785b      	ldrb	r3, [r3, #1]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d126      	bne.n	8008fc0 <HAL_PCD_EP_DB_Transmit+0x156>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	61bb      	str	r3, [r7, #24]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	461a      	mov	r2, r3
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	4413      	add	r3, r2
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	4413      	add	r3, r2
 8008f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	801a      	strh	r2, [r3, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e017      	b.n	8008ff0 <HAL_PCD_EP_DB_Transmit+0x186>
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d113      	bne.n	8008ff0 <HAL_PCD_EP_DB_Transmit+0x186>
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6a3b      	ldr	r3, [r7, #32]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	623b      	str	r3, [r7, #32]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	00da      	lsls	r2, r3, #3
 8008fe0:	6a3b      	ldr	r3, [r7, #32]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fe8:	61fb      	str	r3, [r7, #28]
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2200      	movs	r2, #0
 8008fee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f008 fb49 	bl	801168e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 82d2 	beq.w	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009022:	827b      	strh	r3, [r7, #18]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	461a      	mov	r2, r3
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	441a      	add	r2, r3
 8009032:	8a7b      	ldrh	r3, [r7, #18]
 8009034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800903c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009044:	b29b      	uxth	r3, r3
 8009046:	8013      	strh	r3, [r2, #0]
 8009048:	e2b0      	b.n	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800904a:	88fb      	ldrh	r3, [r7, #6]
 800904c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d021      	beq.n	8009098 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	b29b      	uxth	r3, r3
 8009066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	441a      	add	r2, r3
 8009080:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009084:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009088:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009094:	b29b      	uxth	r3, r3
 8009096:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800909e:	2b01      	cmp	r3, #1
 80090a0:	f040 8284 	bne.w	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	695a      	ldr	r2, [r3, #20]
 80090a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090ac:	441a      	add	r2, r3
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090ba:	441a      	add	r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	6a1a      	ldr	r2, [r3, #32]
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d309      	bcc.n	80090e0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6a1a      	ldr	r2, [r3, #32]
 80090d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090d8:	1ad2      	subs	r2, r2, r3
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	621a      	str	r2, [r3, #32]
 80090de:	e015      	b.n	800910c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d107      	bne.n	80090f8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80090e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80090ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80090f6:	e009      	b.n	800910c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2200      	movs	r2, #0
 800910a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	785b      	ldrb	r3, [r3, #1]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d155      	bne.n	80091c0 <HAL_PCD_EP_DB_Transmit+0x356>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	63bb      	str	r3, [r7, #56]	; 0x38
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009122:	b29b      	uxth	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	4413      	add	r3, r2
 800912a:	63bb      	str	r3, [r7, #56]	; 0x38
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	00da      	lsls	r2, r3, #3
 8009132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009134:	4413      	add	r3, r2
 8009136:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800913a:	637b      	str	r3, [r7, #52]	; 0x34
 800913c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800913e:	2b3e      	cmp	r3, #62	; 0x3e
 8009140:	d916      	bls.n	8009170 <HAL_PCD_EP_DB_Transmit+0x306>
 8009142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009144:	095b      	lsrs	r3, r3, #5
 8009146:	64bb      	str	r3, [r7, #72]	; 0x48
 8009148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914a:	f003 031f 	and.w	r3, r3, #31
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8009152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009154:	3b01      	subs	r3, #1
 8009156:	64bb      	str	r3, [r7, #72]	; 0x48
 8009158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915a:	b29b      	uxth	r3, r3
 800915c:	029b      	lsls	r3, r3, #10
 800915e:	b29b      	uxth	r3, r3
 8009160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009168:	b29a      	uxth	r2, r3
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	801a      	strh	r2, [r3, #0]
 800916e:	e043      	b.n	80091f8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8009170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009172:	2b00      	cmp	r3, #0
 8009174:	d112      	bne.n	800919c <HAL_PCD_EP_DB_Transmit+0x332>
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	b29b      	uxth	r3, r3
 800917c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009180:	b29a      	uxth	r2, r3
 8009182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009184:	801a      	strh	r2, [r3, #0]
 8009186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29b      	uxth	r3, r3
 800918c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009194:	b29a      	uxth	r2, r3
 8009196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009198:	801a      	strh	r2, [r3, #0]
 800919a:	e02d      	b.n	80091f8 <HAL_PCD_EP_DB_Transmit+0x38e>
 800919c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919e:	085b      	lsrs	r3, r3, #1
 80091a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <HAL_PCD_EP_DB_Transmit+0x348>
 80091ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091ae:	3301      	adds	r3, #1
 80091b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80091b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	029b      	lsls	r3, r3, #10
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	e01b      	b.n	80091f8 <HAL_PCD_EP_DB_Transmit+0x38e>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	785b      	ldrb	r3, [r3, #1]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d117      	bne.n	80091f8 <HAL_PCD_EP_DB_Transmit+0x38e>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	643b      	str	r3, [r7, #64]	; 0x40
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091dc:	4413      	add	r3, r2
 80091de:	643b      	str	r3, [r7, #64]	; 0x40
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	00da      	lsls	r2, r3, #3
 80091e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e8:	4413      	add	r3, r2
 80091ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	6959      	ldr	r1, [r3, #20]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	891a      	ldrh	r2, [r3, #8]
 8009204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009206:	b29b      	uxth	r3, r3
 8009208:	f006 f84d 	bl	800f2a6 <USB_WritePMA>
 800920c:	e1ce      	b.n	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009216:	b29b      	uxth	r3, r3
 8009218:	461a      	mov	r2, r3
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	00db      	lsls	r3, r3, #3
 8009220:	4413      	add	r3, r2
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	6812      	ldr	r2, [r2, #0]
 8009226:	4413      	add	r3, r2
 8009228:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009232:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800923e:	429a      	cmp	r2, r3
 8009240:	d307      	bcc.n	8009252 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	699a      	ldr	r2, [r3, #24]
 8009246:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800924a:	1ad2      	subs	r2, r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	619a      	str	r2, [r3, #24]
 8009250:	e002      	b.n	8009258 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 80c4 	bne.w	80093ea <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	785b      	ldrb	r3, [r3, #1]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d126      	bne.n	80092b8 <HAL_PCD_EP_DB_Transmit+0x44e>
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009278:	b29b      	uxth	r3, r3
 800927a:	461a      	mov	r2, r3
 800927c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800927e:	4413      	add	r3, r2
 8009280:	66bb      	str	r3, [r7, #104]	; 0x68
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	00da      	lsls	r2, r3, #3
 8009288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928a:	4413      	add	r3, r2
 800928c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009290:	667b      	str	r3, [r7, #100]	; 0x64
 8009292:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009294:	881b      	ldrh	r3, [r3, #0]
 8009296:	b29b      	uxth	r3, r3
 8009298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800929c:	b29a      	uxth	r2, r3
 800929e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	e01a      	b.n	80092ee <HAL_PCD_EP_DB_Transmit+0x484>
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	785b      	ldrb	r3, [r3, #1]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d116      	bne.n	80092ee <HAL_PCD_EP_DB_Transmit+0x484>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	673b      	str	r3, [r7, #112]	; 0x70
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	461a      	mov	r2, r3
 80092d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092d4:	4413      	add	r3, r2
 80092d6:	673b      	str	r3, [r7, #112]	; 0x70
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	00da      	lsls	r2, r3, #3
 80092de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092e0:	4413      	add	r3, r2
 80092e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ea:	2200      	movs	r2, #0
 80092ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	785b      	ldrb	r3, [r3, #1]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d12f      	bne.n	800935c <HAL_PCD_EP_DB_Transmit+0x4f2>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800930c:	b29b      	uxth	r3, r3
 800930e:	461a      	mov	r2, r3
 8009310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009314:	4413      	add	r3, r2
 8009316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	00da      	lsls	r2, r3, #3
 8009320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009324:	4413      	add	r3, r2
 8009326:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800932a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800932e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009340:	801a      	strh	r2, [r3, #0]
 8009342:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	b29b      	uxth	r3, r3
 800934a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009352:	b29a      	uxth	r2, r3
 8009354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009358:	801a      	strh	r2, [r3, #0]
 800935a:	e017      	b.n	800938c <HAL_PCD_EP_DB_Transmit+0x522>
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d113      	bne.n	800938c <HAL_PCD_EP_DB_Transmit+0x522>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800936c:	b29b      	uxth	r3, r3
 800936e:	461a      	mov	r2, r3
 8009370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009372:	4413      	add	r3, r2
 8009374:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	00da      	lsls	r2, r3, #3
 800937c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800937e:	4413      	add	r3, r2
 8009380:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009384:	67bb      	str	r3, [r7, #120]	; 0x78
 8009386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009388:	2200      	movs	r2, #0
 800938a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	4619      	mov	r1, r3
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f008 f97b 	bl	801168e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009398:	88fb      	ldrh	r3, [r7, #6]
 800939a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 8104 	bne.w	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	461a      	mov	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4413      	add	r3, r2
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	441a      	add	r2, r3
 80093d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80093d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	8013      	strh	r3, [r2, #0]
 80093e8:	e0e0      	b.n	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80093ea:	88fb      	ldrh	r3, [r7, #6]
 80093ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d121      	bne.n	8009438 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b29b      	uxth	r3, r3
 8009406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800940e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	441a      	add	r2, r3
 8009420:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009434:	b29b      	uxth	r3, r3
 8009436:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800943e:	2b01      	cmp	r3, #1
 8009440:	f040 80b4 	bne.w	80095ac <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800944c:	441a      	add	r2, r3
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	69da      	ldr	r2, [r3, #28]
 8009456:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800945a:	441a      	add	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	6a1a      	ldr	r2, [r3, #32]
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	429a      	cmp	r2, r3
 800946a:	d309      	bcc.n	8009480 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6a1a      	ldr	r2, [r3, #32]
 8009476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009478:	1ad2      	subs	r2, r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	621a      	str	r2, [r3, #32]
 800947e:	e015      	b.n	80094ac <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d107      	bne.n	8009498 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8009488:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800948c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8009496:	e009      	b.n	80094ac <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	2200      	movs	r2, #0
 80094a2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	663b      	str	r3, [r7, #96]	; 0x60
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	785b      	ldrb	r3, [r3, #1]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d155      	bne.n	8009566 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	65bb      	str	r3, [r7, #88]	; 0x58
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	461a      	mov	r2, r3
 80094cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094ce:	4413      	add	r3, r2
 80094d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	00da      	lsls	r2, r3, #3
 80094d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094da:	4413      	add	r3, r2
 80094dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094e0:	657b      	str	r3, [r7, #84]	; 0x54
 80094e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e4:	2b3e      	cmp	r3, #62	; 0x3e
 80094e6:	d916      	bls.n	8009516 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80094e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ea:	095b      	lsrs	r3, r3, #5
 80094ec:	677b      	str	r3, [r7, #116]	; 0x74
 80094ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f0:	f003 031f 	and.w	r3, r3, #31
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <HAL_PCD_EP_DB_Transmit+0x694>
 80094f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094fa:	3b01      	subs	r3, #1
 80094fc:	677b      	str	r3, [r7, #116]	; 0x74
 80094fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009500:	b29b      	uxth	r3, r3
 8009502:	029b      	lsls	r3, r3, #10
 8009504:	b29b      	uxth	r3, r3
 8009506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800950a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800950e:	b29a      	uxth	r2, r3
 8009510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009512:	801a      	strh	r2, [r3, #0]
 8009514:	e040      	b.n	8009598 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009518:	2b00      	cmp	r3, #0
 800951a:	d112      	bne.n	8009542 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800951c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009526:	b29a      	uxth	r2, r3
 8009528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29b      	uxth	r3, r3
 8009532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800953a:	b29a      	uxth	r2, r3
 800953c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800953e:	801a      	strh	r2, [r3, #0]
 8009540:	e02a      	b.n	8009598 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	677b      	str	r3, [r7, #116]	; 0x74
 8009548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8009552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009554:	3301      	adds	r3, #1
 8009556:	677b      	str	r3, [r7, #116]	; 0x74
 8009558:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800955a:	b29b      	uxth	r3, r3
 800955c:	029b      	lsls	r3, r3, #10
 800955e:	b29a      	uxth	r2, r3
 8009560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009562:	801a      	strh	r2, [r3, #0]
 8009564:	e018      	b.n	8009598 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	785b      	ldrb	r3, [r3, #1]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d114      	bne.n	8009598 <HAL_PCD_EP_DB_Transmit+0x72e>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800957c:	4413      	add	r3, r2
 800957e:	663b      	str	r3, [r7, #96]	; 0x60
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	00da      	lsls	r2, r3, #3
 8009586:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009588:	4413      	add	r3, r2
 800958a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800958e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009592:	b29a      	uxth	r2, r3
 8009594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009596:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6818      	ldr	r0, [r3, #0]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6959      	ldr	r1, [r3, #20]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	895a      	ldrh	r2, [r3, #10]
 80095a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f005 fe7d 	bl	800f2a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	4413      	add	r3, r2
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095c6:	823b      	strh	r3, [r7, #16]
 80095c8:	8a3b      	ldrh	r3, [r7, #16]
 80095ca:	f083 0310 	eor.w	r3, r3, #16
 80095ce:	823b      	strh	r3, [r7, #16]
 80095d0:	8a3b      	ldrh	r3, [r7, #16]
 80095d2:	f083 0320 	eor.w	r3, r3, #32
 80095d6:	823b      	strh	r3, [r7, #16]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	441a      	add	r2, r3
 80095e6:	8a3b      	ldrh	r3, [r7, #16]
 80095e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3788      	adds	r7, #136	; 0x88
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009606:	b480      	push	{r7}
 8009608:	b087      	sub	sp, #28
 800960a:	af00      	add	r7, sp, #0
 800960c:	60f8      	str	r0, [r7, #12]
 800960e:	607b      	str	r3, [r7, #4]
 8009610:	460b      	mov	r3, r1
 8009612:	817b      	strh	r3, [r7, #10]
 8009614:	4613      	mov	r3, r2
 8009616:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009618:	897b      	ldrh	r3, [r7, #10]
 800961a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961e:	b29b      	uxth	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d00b      	beq.n	800963c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009624:	897b      	ldrh	r3, [r7, #10]
 8009626:	f003 0307 	and.w	r3, r3, #7
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e009      	b.n	8009650 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800963c:	897a      	ldrh	r2, [r7, #10]
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009650:	893b      	ldrh	r3, [r7, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d107      	bne.n	8009666 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2200      	movs	r2, #0
 800965a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	b29a      	uxth	r2, r3
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	80da      	strh	r2, [r3, #6]
 8009664:	e00b      	b.n	800967e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	2201      	movs	r2, #1
 800966a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	b29a      	uxth	r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	b29a      	uxth	r2, r3
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	371c      	adds	r7, #28
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	f043 0301 	orr.w	r3, r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	f043 0302 	orr.w	r3, r3, #2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d141      	bne.n	8009772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80096ee:	4b4b      	ldr	r3, [pc, #300]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80096f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096fa:	d131      	bne.n	8009760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80096fc:	4b47      	ldr	r3, [pc, #284]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80096fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009702:	4a46      	ldr	r2, [pc, #280]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800970c:	4b43      	ldr	r3, [pc, #268]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009714:	4a41      	ldr	r2, [pc, #260]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800971a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800971c:	4b40      	ldr	r3, [pc, #256]	; (8009820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2232      	movs	r2, #50	; 0x32
 8009722:	fb02 f303 	mul.w	r3, r2, r3
 8009726:	4a3f      	ldr	r2, [pc, #252]	; (8009824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009728:	fba2 2303 	umull	r2, r3, r2, r3
 800972c:	0c9b      	lsrs	r3, r3, #18
 800972e:	3301      	adds	r3, #1
 8009730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009732:	e002      	b.n	800973a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	3b01      	subs	r3, #1
 8009738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800973a:	4b38      	ldr	r3, [pc, #224]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009746:	d102      	bne.n	800974e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1f2      	bne.n	8009734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800974e:	4b33      	ldr	r3, [pc, #204]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800975a:	d158      	bne.n	800980e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e057      	b.n	8009810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009760:	4b2e      	ldr	r3, [pc, #184]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009766:	4a2d      	ldr	r2, [pc, #180]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800976c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009770:	e04d      	b.n	800980e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009778:	d141      	bne.n	80097fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800977a:	4b28      	ldr	r3, [pc, #160]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009786:	d131      	bne.n	80097ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009788:	4b24      	ldr	r3, [pc, #144]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800978a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800978e:	4a23      	ldr	r2, [pc, #140]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009798:	4b20      	ldr	r3, [pc, #128]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80097a0:	4a1e      	ldr	r2, [pc, #120]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097a8:	4b1d      	ldr	r3, [pc, #116]	; (8009820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2232      	movs	r2, #50	; 0x32
 80097ae:	fb02 f303 	mul.w	r3, r2, r3
 80097b2:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097b4:	fba2 2303 	umull	r2, r3, r2, r3
 80097b8:	0c9b      	lsrs	r3, r3, #18
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097be:	e002      	b.n	80097c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097c6:	4b15      	ldr	r3, [pc, #84]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d2:	d102      	bne.n	80097da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f2      	bne.n	80097c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e6:	d112      	bne.n	800980e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e011      	b.n	8009810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f2:	4a0a      	ldr	r2, [pc, #40]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80097fc:	e007      	b.n	800980e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80097fe:	4b07      	ldr	r3, [pc, #28]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009806:	4a05      	ldr	r2, [pc, #20]	; (800981c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009808:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800980c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr
 800981c:	40007000 	.word	0x40007000
 8009820:	20000000 	.word	0x20000000
 8009824:	431bde83 	.word	0x431bde83

08009828 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d101      	bne.n	800983a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e306      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	2b00      	cmp	r3, #0
 8009844:	d075      	beq.n	8009932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009846:	4b97      	ldr	r3, [pc, #604]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 030c 	and.w	r3, r3, #12
 800984e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009850:	4b94      	ldr	r3, [pc, #592]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f003 0303 	and.w	r3, r3, #3
 8009858:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b0c      	cmp	r3, #12
 800985e:	d102      	bne.n	8009866 <HAL_RCC_OscConfig+0x3e>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	2b03      	cmp	r3, #3
 8009864:	d002      	beq.n	800986c <HAL_RCC_OscConfig+0x44>
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	2b08      	cmp	r3, #8
 800986a:	d10b      	bne.n	8009884 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800986c:	4b8d      	ldr	r3, [pc, #564]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d05b      	beq.n	8009930 <HAL_RCC_OscConfig+0x108>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	685b      	ldr	r3, [r3, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d157      	bne.n	8009930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e2e1      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800988c:	d106      	bne.n	800989c <HAL_RCC_OscConfig+0x74>
 800988e:	4b85      	ldr	r3, [pc, #532]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a84      	ldr	r2, [pc, #528]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009898:	6013      	str	r3, [r2, #0]
 800989a:	e01d      	b.n	80098d8 <HAL_RCC_OscConfig+0xb0>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a4:	d10c      	bne.n	80098c0 <HAL_RCC_OscConfig+0x98>
 80098a6:	4b7f      	ldr	r3, [pc, #508]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a7e      	ldr	r2, [pc, #504]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	4b7c      	ldr	r3, [pc, #496]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a7b      	ldr	r2, [pc, #492]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e00b      	b.n	80098d8 <HAL_RCC_OscConfig+0xb0>
 80098c0:	4b78      	ldr	r3, [pc, #480]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a77      	ldr	r2, [pc, #476]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	4b75      	ldr	r3, [pc, #468]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a74      	ldr	r2, [pc, #464]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d013      	beq.n	8009908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098e0:	f7fb fe96 	bl	8005610 <HAL_GetTick>
 80098e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098e6:	e008      	b.n	80098fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098e8:	f7fb fe92 	bl	8005610 <HAL_GetTick>
 80098ec:	4602      	mov	r2, r0
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	2b64      	cmp	r3, #100	; 0x64
 80098f4:	d901      	bls.n	80098fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e2a6      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098fa:	4b6a      	ldr	r3, [pc, #424]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d0f0      	beq.n	80098e8 <HAL_RCC_OscConfig+0xc0>
 8009906:	e014      	b.n	8009932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009908:	f7fb fe82 	bl	8005610 <HAL_GetTick>
 800990c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800990e:	e008      	b.n	8009922 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009910:	f7fb fe7e 	bl	8005610 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	2b64      	cmp	r3, #100	; 0x64
 800991c:	d901      	bls.n	8009922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800991e:	2303      	movs	r3, #3
 8009920:	e292      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009922:	4b60      	ldr	r3, [pc, #384]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f0      	bne.n	8009910 <HAL_RCC_OscConfig+0xe8>
 800992e:	e000      	b.n	8009932 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d075      	beq.n	8009a2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800993e:	4b59      	ldr	r3, [pc, #356]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f003 030c 	and.w	r3, r3, #12
 8009946:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009948:	4b56      	ldr	r3, [pc, #344]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f003 0303 	and.w	r3, r3, #3
 8009950:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	2b0c      	cmp	r3, #12
 8009956:	d102      	bne.n	800995e <HAL_RCC_OscConfig+0x136>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b02      	cmp	r3, #2
 800995c:	d002      	beq.n	8009964 <HAL_RCC_OscConfig+0x13c>
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	2b04      	cmp	r3, #4
 8009962:	d11f      	bne.n	80099a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009964:	4b4f      	ldr	r3, [pc, #316]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_RCC_OscConfig+0x154>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e265      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997c:	4b49      	ldr	r3, [pc, #292]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	4946      	ldr	r1, [pc, #280]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 800998c:	4313      	orrs	r3, r2
 800998e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009990:	4b45      	ldr	r3, [pc, #276]	; (8009aa8 <HAL_RCC_OscConfig+0x280>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4618      	mov	r0, r3
 8009996:	f7fb f9e3 	bl	8004d60 <HAL_InitTick>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d043      	beq.n	8009a28 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e251      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d023      	beq.n	80099f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80099ac:	4b3d      	ldr	r3, [pc, #244]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a3c      	ldr	r2, [pc, #240]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b8:	f7fb fe2a 	bl	8005610 <HAL_GetTick>
 80099bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099be:	e008      	b.n	80099d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099c0:	f7fb fe26 	bl	8005610 <HAL_GetTick>
 80099c4:	4602      	mov	r2, r0
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d901      	bls.n	80099d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e23a      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099d2:	4b34      	ldr	r3, [pc, #208]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d0f0      	beq.n	80099c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099de:	4b31      	ldr	r3, [pc, #196]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	061b      	lsls	r3, r3, #24
 80099ec:	492d      	ldr	r1, [pc, #180]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	604b      	str	r3, [r1, #4]
 80099f2:	e01a      	b.n	8009a2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099f4:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a2a      	ldr	r2, [pc, #168]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 80099fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a00:	f7fb fe06 	bl	8005610 <HAL_GetTick>
 8009a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a06:	e008      	b.n	8009a1a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a08:	f7fb fe02 	bl	8005610 <HAL_GetTick>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b02      	cmp	r3, #2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e216      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a1a:	4b22      	ldr	r3, [pc, #136]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1f0      	bne.n	8009a08 <HAL_RCC_OscConfig+0x1e0>
 8009a26:	e000      	b.n	8009a2a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f003 0308 	and.w	r3, r3, #8
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d041      	beq.n	8009aba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d01c      	beq.n	8009a78 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a3e:	4b19      	ldr	r3, [pc, #100]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a44:	4a17      	ldr	r2, [pc, #92]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a46:	f043 0301 	orr.w	r3, r3, #1
 8009a4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a4e:	f7fb fddf 	bl	8005610 <HAL_GetTick>
 8009a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a54:	e008      	b.n	8009a68 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a56:	f7fb fddb 	bl	8005610 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d901      	bls.n	8009a68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e1ef      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a68:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a6e:	f003 0302 	and.w	r3, r3, #2
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0ef      	beq.n	8009a56 <HAL_RCC_OscConfig+0x22e>
 8009a76:	e020      	b.n	8009aba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a78:	4b0a      	ldr	r3, [pc, #40]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a7e:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <HAL_RCC_OscConfig+0x27c>)
 8009a80:	f023 0301 	bic.w	r3, r3, #1
 8009a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a88:	f7fb fdc2 	bl	8005610 <HAL_GetTick>
 8009a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a8e:	e00d      	b.n	8009aac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a90:	f7fb fdbe 	bl	8005610 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d906      	bls.n	8009aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e1d2      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
 8009aa2:	bf00      	nop
 8009aa4:	40021000 	.word	0x40021000
 8009aa8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009aac:	4b8c      	ldr	r3, [pc, #560]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1ea      	bne.n	8009a90 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80a6 	beq.w	8009c14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009acc:	4b84      	ldr	r3, [pc, #528]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_RCC_OscConfig+0x2b4>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e000      	b.n	8009ade <HAL_RCC_OscConfig+0x2b6>
 8009adc:	2300      	movs	r3, #0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00d      	beq.n	8009afe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ae2:	4b7f      	ldr	r3, [pc, #508]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	4a7e      	ldr	r2, [pc, #504]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aec:	6593      	str	r3, [r2, #88]	; 0x58
 8009aee:	4b7c      	ldr	r3, [pc, #496]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009afa:	2301      	movs	r3, #1
 8009afc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009afe:	4b79      	ldr	r3, [pc, #484]	; (8009ce4 <HAL_RCC_OscConfig+0x4bc>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d118      	bne.n	8009b3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b0a:	4b76      	ldr	r3, [pc, #472]	; (8009ce4 <HAL_RCC_OscConfig+0x4bc>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a75      	ldr	r2, [pc, #468]	; (8009ce4 <HAL_RCC_OscConfig+0x4bc>)
 8009b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b16:	f7fb fd7b 	bl	8005610 <HAL_GetTick>
 8009b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b1e:	f7fb fd77 	bl	8005610 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e18b      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b30:	4b6c      	ldr	r3, [pc, #432]	; (8009ce4 <HAL_RCC_OscConfig+0x4bc>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d0f0      	beq.n	8009b1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d108      	bne.n	8009b56 <HAL_RCC_OscConfig+0x32e>
 8009b44:	4b66      	ldr	r3, [pc, #408]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4a:	4a65      	ldr	r2, [pc, #404]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b54:	e024      	b.n	8009ba0 <HAL_RCC_OscConfig+0x378>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d110      	bne.n	8009b80 <HAL_RCC_OscConfig+0x358>
 8009b5e:	4b60      	ldr	r3, [pc, #384]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b64:	4a5e      	ldr	r2, [pc, #376]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b66:	f043 0304 	orr.w	r3, r3, #4
 8009b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b6e:	4b5c      	ldr	r3, [pc, #368]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b74:	4a5a      	ldr	r2, [pc, #360]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b76:	f043 0301 	orr.w	r3, r3, #1
 8009b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b7e:	e00f      	b.n	8009ba0 <HAL_RCC_OscConfig+0x378>
 8009b80:	4b57      	ldr	r3, [pc, #348]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b86:	4a56      	ldr	r2, [pc, #344]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b88:	f023 0301 	bic.w	r3, r3, #1
 8009b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b90:	4b53      	ldr	r3, [pc, #332]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b96:	4a52      	ldr	r2, [pc, #328]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009b98:	f023 0304 	bic.w	r3, r3, #4
 8009b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d016      	beq.n	8009bd6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ba8:	f7fb fd32 	bl	8005610 <HAL_GetTick>
 8009bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bae:	e00a      	b.n	8009bc6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bb0:	f7fb fd2e 	bl	8005610 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e140      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bc6:	4b46      	ldr	r3, [pc, #280]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0ed      	beq.n	8009bb0 <HAL_RCC_OscConfig+0x388>
 8009bd4:	e015      	b.n	8009c02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bd6:	f7fb fd1b 	bl	8005610 <HAL_GetTick>
 8009bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bdc:	e00a      	b.n	8009bf4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bde:	f7fb fd17 	bl	8005610 <HAL_GetTick>
 8009be2:	4602      	mov	r2, r0
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	1ad3      	subs	r3, r2, r3
 8009be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d901      	bls.n	8009bf4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e129      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bf4:	4b3a      	ldr	r3, [pc, #232]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1ed      	bne.n	8009bde <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c02:	7ffb      	ldrb	r3, [r7, #31]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d105      	bne.n	8009c14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c08:	4b35      	ldr	r3, [pc, #212]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c0c:	4a34      	ldr	r2, [pc, #208]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d03c      	beq.n	8009c9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	699b      	ldr	r3, [r3, #24]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d01c      	beq.n	8009c62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c28:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c2e:	4a2c      	ldr	r2, [pc, #176]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c30:	f043 0301 	orr.w	r3, r3, #1
 8009c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c38:	f7fb fcea 	bl	8005610 <HAL_GetTick>
 8009c3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c3e:	e008      	b.n	8009c52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c40:	f7fb fce6 	bl	8005610 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d901      	bls.n	8009c52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e0fa      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c52:	4b23      	ldr	r3, [pc, #140]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0ef      	beq.n	8009c40 <HAL_RCC_OscConfig+0x418>
 8009c60:	e01b      	b.n	8009c9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c62:	4b1f      	ldr	r3, [pc, #124]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c68:	4a1d      	ldr	r2, [pc, #116]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c6a:	f023 0301 	bic.w	r3, r3, #1
 8009c6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c72:	f7fb fccd 	bl	8005610 <HAL_GetTick>
 8009c76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c78:	e008      	b.n	8009c8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c7a:	f7fb fcc9 	bl	8005610 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e0dd      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c8c:	4b14      	ldr	r3, [pc, #80]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1ef      	bne.n	8009c7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	69db      	ldr	r3, [r3, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80d1 	beq.w	8009e46 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f003 030c 	and.w	r3, r3, #12
 8009cac:	2b0c      	cmp	r3, #12
 8009cae:	f000 808b 	beq.w	8009dc8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d15e      	bne.n	8009d78 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a08      	ldr	r2, [pc, #32]	; (8009ce0 <HAL_RCC_OscConfig+0x4b8>)
 8009cc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc6:	f7fb fca3 	bl	8005610 <HAL_GetTick>
 8009cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ccc:	e00c      	b.n	8009ce8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cce:	f7fb fc9f 	bl	8005610 <HAL_GetTick>
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d905      	bls.n	8009ce8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e0b3      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
 8009ce0:	40021000 	.word	0x40021000
 8009ce4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ce8:	4b59      	ldr	r3, [pc, #356]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1ec      	bne.n	8009cce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cf4:	4b56      	ldr	r3, [pc, #344]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009cf6:	68da      	ldr	r2, [r3, #12]
 8009cf8:	4b56      	ldr	r3, [pc, #344]	; (8009e54 <HAL_RCC_OscConfig+0x62c>)
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	6a11      	ldr	r1, [r2, #32]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d04:	3a01      	subs	r2, #1
 8009d06:	0112      	lsls	r2, r2, #4
 8009d08:	4311      	orrs	r1, r2
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009d0e:	0212      	lsls	r2, r2, #8
 8009d10:	4311      	orrs	r1, r2
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d16:	0852      	lsrs	r2, r2, #1
 8009d18:	3a01      	subs	r2, #1
 8009d1a:	0552      	lsls	r2, r2, #21
 8009d1c:	4311      	orrs	r1, r2
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d22:	0852      	lsrs	r2, r2, #1
 8009d24:	3a01      	subs	r2, #1
 8009d26:	0652      	lsls	r2, r2, #25
 8009d28:	4311      	orrs	r1, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d2e:	06d2      	lsls	r2, r2, #27
 8009d30:	430a      	orrs	r2, r1
 8009d32:	4947      	ldr	r1, [pc, #284]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d38:	4b45      	ldr	r3, [pc, #276]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a44      	ldr	r2, [pc, #272]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d42:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d44:	4b42      	ldr	r3, [pc, #264]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	4a41      	ldr	r2, [pc, #260]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d4e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d50:	f7fb fc5e 	bl	8005610 <HAL_GetTick>
 8009d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d56:	e008      	b.n	8009d6a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d58:	f7fb fc5a 	bl	8005610 <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e06e      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d6a:	4b39      	ldr	r3, [pc, #228]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f0      	beq.n	8009d58 <HAL_RCC_OscConfig+0x530>
 8009d76:	e066      	b.n	8009e46 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d78:	4b35      	ldr	r3, [pc, #212]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a34      	ldr	r2, [pc, #208]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d82:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8009d84:	4b32      	ldr	r3, [pc, #200]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	4a31      	ldr	r2, [pc, #196]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d8a:	f023 0303 	bic.w	r3, r3, #3
 8009d8e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009d90:	4b2f      	ldr	r3, [pc, #188]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	4a2e      	ldr	r2, [pc, #184]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009d96:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da0:	f7fb fc36 	bl	8005610 <HAL_GetTick>
 8009da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009da8:	f7fb fc32 	bl	8005610 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e046      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009dba:	4b25      	ldr	r3, [pc, #148]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f0      	bne.n	8009da8 <HAL_RCC_OscConfig+0x580>
 8009dc6:	e03e      	b.n	8009e46 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	69db      	ldr	r3, [r3, #28]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e039      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009dd4:	4b1e      	ldr	r3, [pc, #120]	; (8009e50 <HAL_RCC_OscConfig+0x628>)
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f003 0203 	and.w	r2, r3, #3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d12c      	bne.n	8009e42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df2:	3b01      	subs	r3, #1
 8009df4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d123      	bne.n	8009e42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d11b      	bne.n	8009e42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d113      	bne.n	8009e42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e24:	085b      	lsrs	r3, r3, #1
 8009e26:	3b01      	subs	r3, #1
 8009e28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d109      	bne.n	8009e42 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	085b      	lsrs	r3, r3, #1
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d001      	beq.n	8009e46 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	e000      	b.n	8009e48 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	40021000 	.word	0x40021000
 8009e54:	019f800c 	.word	0x019f800c

08009e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009e62:	2300      	movs	r3, #0
 8009e64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d101      	bne.n	8009e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e11e      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e70:	4b91      	ldr	r3, [pc, #580]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 030f 	and.w	r3, r3, #15
 8009e78:	683a      	ldr	r2, [r7, #0]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d910      	bls.n	8009ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e7e:	4b8e      	ldr	r3, [pc, #568]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f023 020f 	bic.w	r2, r3, #15
 8009e86:	498c      	ldr	r1, [pc, #560]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e8e:	4b8a      	ldr	r3, [pc, #552]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d001      	beq.n	8009ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e106      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f003 0301 	and.w	r3, r3, #1
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d073      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b03      	cmp	r3, #3
 8009eb2:	d129      	bne.n	8009f08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eb4:	4b81      	ldr	r3, [pc, #516]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d101      	bne.n	8009ec4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e0f4      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009ec4:	f000 f9d0 	bl	800a268 <RCC_GetSysClockFreqFromPLLSource>
 8009ec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	4a7c      	ldr	r2, [pc, #496]	; (800a0c0 <HAL_RCC_ClockConfig+0x268>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d93f      	bls.n	8009f52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ed2:	4b7a      	ldr	r3, [pc, #488]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d009      	beq.n	8009ef2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d033      	beq.n	8009f52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d12f      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ef2:	4b72      	ldr	r3, [pc, #456]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009efa:	4a70      	ldr	r2, [pc, #448]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009f02:	2380      	movs	r3, #128	; 0x80
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	e024      	b.n	8009f52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	d107      	bne.n	8009f20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f10:	4b6a      	ldr	r3, [pc, #424]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d109      	bne.n	8009f30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0c6      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f20:	4b66      	ldr	r3, [pc, #408]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e0be      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009f30:	f000 f8ce 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 8009f34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	4a61      	ldr	r2, [pc, #388]	; (800a0c0 <HAL_RCC_ClockConfig+0x268>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d909      	bls.n	8009f52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009f3e:	4b5f      	ldr	r3, [pc, #380]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f46:	4a5d      	ldr	r2, [pc, #372]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009f4e:	2380      	movs	r3, #128	; 0x80
 8009f50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f52:	4b5a      	ldr	r3, [pc, #360]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f023 0203 	bic.w	r2, r3, #3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4957      	ldr	r1, [pc, #348]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f64:	f7fb fb54 	bl	8005610 <HAL_GetTick>
 8009f68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f6c:	f7fb fb50 	bl	8005610 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e095      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f82:	4b4e      	ldr	r3, [pc, #312]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 020c 	and.w	r2, r3, #12
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d1eb      	bne.n	8009f6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d023      	beq.n	8009fe8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0304 	and.w	r3, r3, #4
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d005      	beq.n	8009fb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fac:	4b43      	ldr	r3, [pc, #268]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	4a42      	ldr	r2, [pc, #264]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009fb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0308 	and.w	r3, r3, #8
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d007      	beq.n	8009fd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009fc4:	4b3d      	ldr	r3, [pc, #244]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fcc:	4a3b      	ldr	r2, [pc, #236]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009fd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fd4:	4b39      	ldr	r3, [pc, #228]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	4936      	ldr	r1, [pc, #216]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	608b      	str	r3, [r1, #8]
 8009fe6:	e008      	b.n	8009ffa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	2b80      	cmp	r3, #128	; 0x80
 8009fec:	d105      	bne.n	8009ffa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009fee:	4b33      	ldr	r3, [pc, #204]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	4a32      	ldr	r2, [pc, #200]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 8009ff4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ff8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ffa:	4b2f      	ldr	r3, [pc, #188]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d21d      	bcs.n	800a044 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a008:	4b2b      	ldr	r3, [pc, #172]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f023 020f 	bic.w	r2, r3, #15
 800a010:	4929      	ldr	r1, [pc, #164]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	4313      	orrs	r3, r2
 800a016:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a018:	f7fb fafa 	bl	8005610 <HAL_GetTick>
 800a01c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a01e:	e00a      	b.n	800a036 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a020:	f7fb faf6 	bl	8005610 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a02e:	4293      	cmp	r3, r2
 800a030:	d901      	bls.n	800a036 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e03b      	b.n	800a0ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a036:	4b20      	ldr	r3, [pc, #128]	; (800a0b8 <HAL_RCC_ClockConfig+0x260>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	429a      	cmp	r2, r3
 800a042:	d1ed      	bne.n	800a020 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d008      	beq.n	800a062 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4917      	ldr	r1, [pc, #92]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0308 	and.w	r3, r3, #8
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d009      	beq.n	800a082 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a06e:	4b13      	ldr	r3, [pc, #76]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
 800a07a:	00db      	lsls	r3, r3, #3
 800a07c:	490f      	ldr	r1, [pc, #60]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a082:	f000 f825 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800a086:	4602      	mov	r2, r0
 800a088:	4b0c      	ldr	r3, [pc, #48]	; (800a0bc <HAL_RCC_ClockConfig+0x264>)
 800a08a:	689b      	ldr	r3, [r3, #8]
 800a08c:	091b      	lsrs	r3, r3, #4
 800a08e:	f003 030f 	and.w	r3, r3, #15
 800a092:	490c      	ldr	r1, [pc, #48]	; (800a0c4 <HAL_RCC_ClockConfig+0x26c>)
 800a094:	5ccb      	ldrb	r3, [r1, r3]
 800a096:	f003 031f 	and.w	r3, r3, #31
 800a09a:	fa22 f303 	lsr.w	r3, r2, r3
 800a09e:	4a0a      	ldr	r2, [pc, #40]	; (800a0c8 <HAL_RCC_ClockConfig+0x270>)
 800a0a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x274>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7fa fe5a 	bl	8004d60 <HAL_InitTick>
 800a0ac:	4603      	mov	r3, r0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	40022000 	.word	0x40022000
 800a0bc:	40021000 	.word	0x40021000
 800a0c0:	04c4b400 	.word	0x04c4b400
 800a0c4:	08011c80 	.word	0x08011c80
 800a0c8:	20000000 	.word	0x20000000
 800a0cc:	20000004 	.word	0x20000004

0800a0d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a0d6:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f003 030c 	and.w	r3, r3, #12
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d102      	bne.n	800a0e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0e2:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	e047      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a0e8:	4b27      	ldr	r3, [pc, #156]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 030c 	and.w	r3, r3, #12
 800a0f0:	2b08      	cmp	r3, #8
 800a0f2:	d102      	bne.n	800a0fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a0f4:	4b26      	ldr	r3, [pc, #152]	; (800a190 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a0f6:	613b      	str	r3, [r7, #16]
 800a0f8:	e03e      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f003 030c 	and.w	r3, r3, #12
 800a102:	2b0c      	cmp	r3, #12
 800a104:	d136      	bne.n	800a174 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a106:	4b20      	ldr	r3, [pc, #128]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a110:	4b1d      	ldr	r3, [pc, #116]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	091b      	lsrs	r3, r3, #4
 800a116:	f003 030f 	and.w	r3, r3, #15
 800a11a:	3301      	adds	r3, #1
 800a11c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d10c      	bne.n	800a13e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a124:	4a1a      	ldr	r2, [pc, #104]	; (800a190 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12c:	4a16      	ldr	r2, [pc, #88]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a12e:	68d2      	ldr	r2, [r2, #12]
 800a130:	0a12      	lsrs	r2, r2, #8
 800a132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a136:	fb02 f303 	mul.w	r3, r2, r3
 800a13a:	617b      	str	r3, [r7, #20]
      break;
 800a13c:	e00c      	b.n	800a158 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a13e:	4a13      	ldr	r2, [pc, #76]	; (800a18c <HAL_RCC_GetSysClockFreq+0xbc>)
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	fbb2 f3f3 	udiv	r3, r2, r3
 800a146:	4a10      	ldr	r2, [pc, #64]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a148:	68d2      	ldr	r2, [r2, #12]
 800a14a:	0a12      	lsrs	r2, r2, #8
 800a14c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a150:	fb02 f303 	mul.w	r3, r2, r3
 800a154:	617b      	str	r3, [r7, #20]
      break;
 800a156:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a158:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	0e5b      	lsrs	r3, r3, #25
 800a15e:	f003 0303 	and.w	r3, r3, #3
 800a162:	3301      	adds	r3, #1
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a170:	613b      	str	r3, [r7, #16]
 800a172:	e001      	b.n	800a178 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a178:	693b      	ldr	r3, [r7, #16]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	371c      	adds	r7, #28
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	40021000 	.word	0x40021000
 800a18c:	00f42400 	.word	0x00f42400
 800a190:	007a1200 	.word	0x007a1200

0800a194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a198:	4b03      	ldr	r3, [pc, #12]	; (800a1a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a19a:	681b      	ldr	r3, [r3, #0]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000000 	.word	0x20000000

0800a1ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1b0:	f7ff fff0 	bl	800a194 <HAL_RCC_GetHCLKFreq>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	4904      	ldr	r1, [pc, #16]	; (800a1d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1c2:	5ccb      	ldrb	r3, [r1, r3]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	40021000 	.word	0x40021000
 800a1d4:	08011c90 	.word	0x08011c90

0800a1d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1dc:	f7ff ffda 	bl	800a194 <HAL_RCC_GetHCLKFreq>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	0adb      	lsrs	r3, r3, #11
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	4904      	ldr	r1, [pc, #16]	; (800a200 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1ee:	5ccb      	ldrb	r3, [r1, r3]
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40021000 	.word	0x40021000
 800a200:	08011c90 	.word	0x08011c90

0800a204 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	220f      	movs	r2, #15
 800a212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a214:	4b12      	ldr	r3, [pc, #72]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f003 0203 	and.w	r2, r3, #3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a220:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a238:	4b09      	ldr	r3, [pc, #36]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	08db      	lsrs	r3, r3, #3
 800a23e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <HAL_RCC_GetClockConfig+0x60>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 020f 	and.w	r2, r3, #15
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40021000 	.word	0x40021000
 800a264:	40022000 	.word	0x40022000

0800a268 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a26e:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f003 0303 	and.w	r3, r3, #3
 800a276:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a278:	4b1b      	ldr	r3, [pc, #108]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	3301      	adds	r3, #1
 800a284:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d10c      	bne.n	800a2a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a28c:	4a17      	ldr	r2, [pc, #92]	; (800a2ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	fbb2 f3f3 	udiv	r3, r2, r3
 800a294:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a296:	68d2      	ldr	r2, [r2, #12]
 800a298:	0a12      	lsrs	r2, r2, #8
 800a29a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
 800a2a2:	617b      	str	r3, [r7, #20]
    break;
 800a2a4:	e00c      	b.n	800a2c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2a6:	4a12      	ldr	r2, [pc, #72]	; (800a2f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ae:	4a0e      	ldr	r2, [pc, #56]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2b0:	68d2      	ldr	r2, [r2, #12]
 800a2b2:	0a12      	lsrs	r2, r2, #8
 800a2b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a2b8:	fb02 f303 	mul.w	r3, r2, r3
 800a2bc:	617b      	str	r3, [r7, #20]
    break;
 800a2be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a2c0:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2c2:	68db      	ldr	r3, [r3, #12]
 800a2c4:	0e5b      	lsrs	r3, r3, #25
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	005b      	lsls	r3, r3, #1
 800a2ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a2da:	687b      	ldr	r3, [r7, #4]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	371c      	adds	r7, #28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr
 800a2e8:	40021000 	.word	0x40021000
 800a2ec:	007a1200 	.word	0x007a1200
 800a2f0:	00f42400 	.word	0x00f42400

0800a2f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a300:	2300      	movs	r3, #0
 800a302:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8098 	beq.w	800a442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a312:	2300      	movs	r3, #0
 800a314:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a316:	4b43      	ldr	r3, [pc, #268]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a31a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10d      	bne.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a322:	4b40      	ldr	r3, [pc, #256]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	4a3f      	ldr	r2, [pc, #252]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a32c:	6593      	str	r3, [r2, #88]	; 0x58
 800a32e:	4b3d      	ldr	r3, [pc, #244]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a336:	60bb      	str	r3, [r7, #8]
 800a338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a33a:	2301      	movs	r3, #1
 800a33c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a33e:	4b3a      	ldr	r3, [pc, #232]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a39      	ldr	r2, [pc, #228]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a348:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a34a:	f7fb f961 	bl	8005610 <HAL_GetTick>
 800a34e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a350:	e009      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a352:	f7fb f95d 	bl	8005610 <HAL_GetTick>
 800a356:	4602      	mov	r2, r0
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	1ad3      	subs	r3, r2, r3
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d902      	bls.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	74fb      	strb	r3, [r7, #19]
        break;
 800a364:	e005      	b.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a366:	4b30      	ldr	r3, [pc, #192]	; (800a428 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0ef      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a372:	7cfb      	ldrb	r3, [r7, #19]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d159      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a378:	4b2a      	ldr	r3, [pc, #168]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a382:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01e      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a38e:	697a      	ldr	r2, [r7, #20]
 800a390:	429a      	cmp	r2, r3
 800a392:	d019      	beq.n	800a3c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a394:	4b23      	ldr	r3, [pc, #140]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a39e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3a0:	4b20      	ldr	r3, [pc, #128]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3a6:	4a1f      	ldr	r2, [pc, #124]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3b0:	4b1c      	ldr	r3, [pc, #112]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b6:	4a1b      	ldr	r2, [pc, #108]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a3c0:	4a18      	ldr	r2, [pc, #96]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	f003 0301 	and.w	r3, r3, #1
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d016      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3d2:	f7fb f91d 	bl	8005610 <HAL_GetTick>
 800a3d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3d8:	e00b      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3da:	f7fb f919 	bl	8005610 <HAL_GetTick>
 800a3de:	4602      	mov	r2, r0
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d902      	bls.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	74fb      	strb	r3, [r7, #19]
            break;
 800a3f0:	e006      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0ec      	beq.n	800a3da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a400:	7cfb      	ldrb	r3, [r7, #19]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10b      	bne.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a406:	4b07      	ldr	r3, [pc, #28]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a414:	4903      	ldr	r1, [pc, #12]	; (800a424 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a416:	4313      	orrs	r3, r2
 800a418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a41c:	e008      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a41e:	7cfb      	ldrb	r3, [r7, #19]
 800a420:	74bb      	strb	r3, [r7, #18]
 800a422:	e005      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a424:	40021000 	.word	0x40021000
 800a428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42c:	7cfb      	ldrb	r3, [r7, #19]
 800a42e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a430:	7c7b      	ldrb	r3, [r7, #17]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d105      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a436:	4ba7      	ldr	r3, [pc, #668]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a43a:	4aa6      	ldr	r2, [pc, #664]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a43c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a440:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a44e:	4ba1      	ldr	r3, [pc, #644]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a454:	f023 0203 	bic.w	r2, r3, #3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	499d      	ldr	r1, [pc, #628]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0302 	and.w	r3, r3, #2
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a470:	4b98      	ldr	r3, [pc, #608]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a476:	f023 020c 	bic.w	r2, r3, #12
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4995      	ldr	r1, [pc, #596]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a480:	4313      	orrs	r3, r2
 800a482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0304 	and.w	r3, r3, #4
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a492:	4b90      	ldr	r3, [pc, #576]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a498:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68db      	ldr	r3, [r3, #12]
 800a4a0:	498c      	ldr	r1, [pc, #560]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 0308 	and.w	r3, r3, #8
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a4b4:	4b87      	ldr	r3, [pc, #540]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	4984      	ldr	r1, [pc, #528]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a4d6:	4b7f      	ldr	r3, [pc, #508]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	497b      	ldr	r1, [pc, #492]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4f8:	4b76      	ldr	r3, [pc, #472]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	4973      	ldr	r1, [pc, #460]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a51a:	4b6e      	ldr	r3, [pc, #440]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a51c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a520:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	69db      	ldr	r3, [r3, #28]
 800a528:	496a      	ldr	r1, [pc, #424]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a52a:	4313      	orrs	r3, r2
 800a52c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00a      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a53c:	4b65      	ldr	r3, [pc, #404]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a53e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a542:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	4962      	ldr	r1, [pc, #392]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a55e:	4b5d      	ldr	r3, [pc, #372]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a564:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4959      	ldr	r1, [pc, #356]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d00a      	beq.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a580:	4b54      	ldr	r3, [pc, #336]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a582:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a586:	f023 0203 	bic.w	r2, r3, #3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	4951      	ldr	r1, [pc, #324]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a590:	4313      	orrs	r3, r2
 800a592:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d00a      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5a2:	4b4c      	ldr	r3, [pc, #304]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b0:	4948      	ldr	r1, [pc, #288]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d015      	beq.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a5c4:	4b43      	ldr	r3, [pc, #268]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4940      	ldr	r1, [pc, #256]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e2:	d105      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a5e4:	4b3b      	ldr	r3, [pc, #236]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	4a3a      	ldr	r2, [pc, #232]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d015      	beq.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a5fc:	4b35      	ldr	r3, [pc, #212]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	4932      	ldr	r1, [pc, #200]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a61a:	d105      	bne.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a61c:	4b2d      	ldr	r3, [pc, #180]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	4a2c      	ldr	r2, [pc, #176]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a626:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d015      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a634:	4b27      	ldr	r3, [pc, #156]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a63a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	4924      	ldr	r1, [pc, #144]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a644:	4313      	orrs	r3, r2
 800a646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a652:	d105      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a654:	4b1f      	ldr	r3, [pc, #124]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	4a1e      	ldr	r2, [pc, #120]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a65a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d015      	beq.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a66c:	4b19      	ldr	r3, [pc, #100]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67a:	4916      	ldr	r1, [pc, #88]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a68a:	d105      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a68c:	4b11      	ldr	r3, [pc, #68]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	4a10      	ldr	r2, [pc, #64]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a696:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d019      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6a4:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	4908      	ldr	r1, [pc, #32]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6c2:	d109      	bne.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6c4:	4b03      	ldr	r3, [pc, #12]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c6:	68db      	ldr	r3, [r3, #12]
 800a6c8:	4a02      	ldr	r2, [pc, #8]	; (800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6ce:	60d3      	str	r3, [r2, #12]
 800a6d0:	e002      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a6d2:	bf00      	nop
 800a6d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d015      	beq.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a6e4:	4b29      	ldr	r3, [pc, #164]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a6e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f2:	4926      	ldr	r1, [pc, #152]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a702:	d105      	bne.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a704:	4b21      	ldr	r3, [pc, #132]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	4a20      	ldr	r2, [pc, #128]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a70e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d015      	beq.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a722:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a72a:	4918      	ldr	r1, [pc, #96]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a72c:	4313      	orrs	r3, r2
 800a72e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a73a:	d105      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a73c:	4b13      	ldr	r3, [pc, #76]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	4a12      	ldr	r2, [pc, #72]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a746:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a750:	2b00      	cmp	r3, #0
 800a752:	d015      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a754:	4b0d      	ldr	r3, [pc, #52]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a756:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a75a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a762:	490a      	ldr	r1, [pc, #40]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a764:	4313      	orrs	r3, r2
 800a766:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a76e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a772:	d105      	bne.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	4a04      	ldr	r2, [pc, #16]	; (800a78c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a77a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a77e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a780:	7cbb      	ldrb	r3, [r7, #18]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	40021000 	.word	0x40021000

0800a790 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e09d      	b.n	800a8de <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d108      	bne.n	800a7bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7b2:	d009      	beq.n	800a7c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	61da      	str	r2, [r3, #28]
 800a7ba:	e005      	b.n	800a7c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d106      	bne.n	800a7e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7fa fa52 	bl	8004c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2202      	movs	r2, #2
 800a7ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a808:	d902      	bls.n	800a810 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e002      	b.n	800a816 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a810:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a814:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a81e:	d007      	beq.n	800a830 <HAL_SPI_Init+0xa0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a828:	d002      	beq.n	800a830 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a840:	431a      	orrs	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	691b      	ldr	r3, [r3, #16]
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	431a      	orrs	r2, r3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	695b      	ldr	r3, [r3, #20]
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	699b      	ldr	r3, [r3, #24]
 800a85a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a85e:	431a      	orrs	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69db      	ldr	r3, [r3, #28]
 800a864:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a868:	431a      	orrs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a872:	ea42 0103 	orr.w	r1, r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	430a      	orrs	r2, r1
 800a884:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	0c1b      	lsrs	r3, r3, #16
 800a88c:	f003 0204 	and.w	r2, r3, #4
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	431a      	orrs	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	431a      	orrs	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a8ac:	ea42 0103 	orr.w	r1, r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69da      	ldr	r2, [r3, #28]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e049      	b.n	800a98c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b00      	cmp	r3, #0
 800a902:	d106      	bne.n	800a912 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 f841 	bl	800a994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2202      	movs	r2, #2
 800a916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	3304      	adds	r3, #4
 800a922:	4619      	mov	r1, r3
 800a924:	4610      	mov	r0, r2
 800a926:	f000 fbc9 	bl	800b0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9b6:	b2db      	uxtb	r3, r3
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d001      	beq.n	800a9c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e054      	b.n	800aa6a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2202      	movs	r2, #2
 800a9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68da      	ldr	r2, [r3, #12]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f042 0201 	orr.w	r2, r2, #1
 800a9d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a26      	ldr	r2, [pc, #152]	; (800aa78 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d022      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ea:	d01d      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a22      	ldr	r2, [pc, #136]	; (800aa7c <HAL_TIM_Base_Start_IT+0xd4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d018      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a21      	ldr	r2, [pc, #132]	; (800aa80 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d013      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a1f      	ldr	r2, [pc, #124]	; (800aa84 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d00e      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a1e      	ldr	r2, [pc, #120]	; (800aa88 <HAL_TIM_Base_Start_IT+0xe0>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d009      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a1c      	ldr	r2, [pc, #112]	; (800aa8c <HAL_TIM_Base_Start_IT+0xe4>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d004      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0x80>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a1b      	ldr	r2, [pc, #108]	; (800aa90 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d115      	bne.n	800aa54 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	689a      	ldr	r2, [r3, #8]
 800aa2e:	4b19      	ldr	r3, [pc, #100]	; (800aa94 <HAL_TIM_Base_Start_IT+0xec>)
 800aa30:	4013      	ands	r3, r2
 800aa32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b06      	cmp	r3, #6
 800aa38:	d015      	beq.n	800aa66 <HAL_TIM_Base_Start_IT+0xbe>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa40:	d011      	beq.n	800aa66 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f042 0201 	orr.w	r2, r2, #1
 800aa50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa52:	e008      	b.n	800aa66 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0201 	orr.w	r2, r2, #1
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	e000      	b.n	800aa68 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	40012c00 	.word	0x40012c00
 800aa7c:	40000400 	.word	0x40000400
 800aa80:	40000800 	.word	0x40000800
 800aa84:	40000c00 	.word	0x40000c00
 800aa88:	40013400 	.word	0x40013400
 800aa8c:	40014000 	.word	0x40014000
 800aa90:	40015000 	.word	0x40015000
 800aa94:	00010007 	.word	0x00010007

0800aa98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e049      	b.n	800ab3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f7fa fb52 	bl	8005168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	3304      	adds	r3, #4
 800aad4:	4619      	mov	r1, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	f000 faf0 	bl	800b0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2201      	movs	r2, #1
 800ab08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2201      	movs	r2, #1
 800ab18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b082      	sub	sp, #8
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	d122      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	f003 0302 	and.w	r3, r3, #2
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d11b      	bne.n	800aba2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f06f 0202 	mvn.w	r2, #2
 800ab72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	f003 0303 	and.w	r3, r3, #3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa79 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800ab8e:	e005      	b.n	800ab9c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fa6b 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fa7c 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	691b      	ldr	r3, [r3, #16]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	2b04      	cmp	r3, #4
 800abae:	d122      	bne.n	800abf6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d11b      	bne.n	800abf6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f06f 0204 	mvn.w	r2, #4
 800abc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2202      	movs	r2, #2
 800abcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	699b      	ldr	r3, [r3, #24]
 800abd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 fa4f 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800abe2:	e005      	b.n	800abf0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fa41 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f000 fa52 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	f003 0308 	and.w	r3, r3, #8
 800ac00:	2b08      	cmp	r3, #8
 800ac02:	d122      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	f003 0308 	and.w	r3, r3, #8
 800ac0e:	2b08      	cmp	r3, #8
 800ac10:	d11b      	bne.n	800ac4a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f06f 0208 	mvn.w	r2, #8
 800ac1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	f003 0303 	and.w	r3, r3, #3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d003      	beq.n	800ac38 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fa25 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800ac36:	e005      	b.n	800ac44 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fa17 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 fa28 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	f003 0310 	and.w	r3, r3, #16
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d122      	bne.n	800ac9e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f003 0310 	and.w	r3, r3, #16
 800ac62:	2b10      	cmp	r3, #16
 800ac64:	d11b      	bne.n	800ac9e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f06f 0210 	mvn.w	r2, #16
 800ac6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2208      	movs	r2, #8
 800ac74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	69db      	ldr	r3, [r3, #28]
 800ac7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d003      	beq.n	800ac8c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 f9fb 	bl	800b080 <HAL_TIM_IC_CaptureCallback>
 800ac8a:	e005      	b.n	800ac98 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f9ed 	bl	800b06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9fe 	bl	800b094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d10e      	bne.n	800acca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d107      	bne.n	800acca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f06f 0201 	mvn.w	r2, #1
 800acc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7f9 ff8b 	bl	8004be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd4:	2b80      	cmp	r3, #128	; 0x80
 800acd6:	d10e      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68db      	ldr	r3, [r3, #12]
 800acde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace2:	2b80      	cmp	r3, #128	; 0x80
 800ace4:	d107      	bne.n	800acf6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fe55 	bl	800b9a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad04:	d10e      	bne.n	800ad24 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad10:	2b80      	cmp	r3, #128	; 0x80
 800ad12:	d107      	bne.n	800ad24 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ad1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fe48 	bl	800b9b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2e:	2b40      	cmp	r3, #64	; 0x40
 800ad30:	d10e      	bne.n	800ad50 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3c:	2b40      	cmp	r3, #64	; 0x40
 800ad3e:	d107      	bne.n	800ad50 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f9ac 	bl	800b0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b20      	cmp	r3, #32
 800ad5c:	d10e      	bne.n	800ad7c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68db      	ldr	r3, [r3, #12]
 800ad64:	f003 0320 	and.w	r3, r3, #32
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	d107      	bne.n	800ad7c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f06f 0220 	mvn.w	r2, #32
 800ad74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fe08 	bl	800b98c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad8a:	d10f      	bne.n	800adac <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad9a:	d107      	bne.n	800adac <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800ada4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fe0e 	bl	800b9c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adba:	d10f      	bne.n	800addc <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68db      	ldr	r3, [r3, #12]
 800adc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adca:	d107      	bne.n	800addc <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800add4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fe00 	bl	800b9dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ade6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adea:	d10f      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adfa:	d107      	bne.n	800ae0c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800ae04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 fdf2 	bl	800b9f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae1a:	d10f      	bne.n	800ae3c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ae26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae2a:	d107      	bne.n	800ae3c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ae34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fde4 	bl	800ba04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b086      	sub	sp, #24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d101      	bne.n	800ae62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e0ff      	b.n	800b062 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2201      	movs	r2, #1
 800ae66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b14      	cmp	r3, #20
 800ae6e:	f200 80f0 	bhi.w	800b052 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ae72:	a201      	add	r2, pc, #4	; (adr r2, 800ae78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ae74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae78:	0800aecd 	.word	0x0800aecd
 800ae7c:	0800b053 	.word	0x0800b053
 800ae80:	0800b053 	.word	0x0800b053
 800ae84:	0800b053 	.word	0x0800b053
 800ae88:	0800af0d 	.word	0x0800af0d
 800ae8c:	0800b053 	.word	0x0800b053
 800ae90:	0800b053 	.word	0x0800b053
 800ae94:	0800b053 	.word	0x0800b053
 800ae98:	0800af4f 	.word	0x0800af4f
 800ae9c:	0800b053 	.word	0x0800b053
 800aea0:	0800b053 	.word	0x0800b053
 800aea4:	0800b053 	.word	0x0800b053
 800aea8:	0800af8f 	.word	0x0800af8f
 800aeac:	0800b053 	.word	0x0800b053
 800aeb0:	0800b053 	.word	0x0800b053
 800aeb4:	0800b053 	.word	0x0800b053
 800aeb8:	0800afd1 	.word	0x0800afd1
 800aebc:	0800b053 	.word	0x0800b053
 800aec0:	0800b053 	.word	0x0800b053
 800aec4:	0800b053 	.word	0x0800b053
 800aec8:	0800b011 	.word	0x0800b011
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68b9      	ldr	r1, [r7, #8]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f99a 	bl	800b20c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	699a      	ldr	r2, [r3, #24]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f042 0208 	orr.w	r2, r2, #8
 800aee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	699a      	ldr	r2, [r3, #24]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0204 	bic.w	r2, r2, #4
 800aef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6999      	ldr	r1, [r3, #24]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	691a      	ldr	r2, [r3, #16]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	619a      	str	r2, [r3, #24]
      break;
 800af0a:	e0a5      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	4618      	mov	r0, r3
 800af14:	f000 fa14 	bl	800b340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	699a      	ldr	r2, [r3, #24]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	699a      	ldr	r2, [r3, #24]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6999      	ldr	r1, [r3, #24]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	021a      	lsls	r2, r3, #8
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	430a      	orrs	r2, r1
 800af4a:	619a      	str	r2, [r3, #24]
      break;
 800af4c:	e084      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	4618      	mov	r0, r3
 800af56:	f000 fa87 	bl	800b468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69da      	ldr	r2, [r3, #28]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f042 0208 	orr.w	r2, r2, #8
 800af68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	69da      	ldr	r2, [r3, #28]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0204 	bic.w	r2, r2, #4
 800af78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	69d9      	ldr	r1, [r3, #28]
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	691a      	ldr	r2, [r3, #16]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	430a      	orrs	r2, r1
 800af8a:	61da      	str	r2, [r3, #28]
      break;
 800af8c:	e064      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68b9      	ldr	r1, [r7, #8]
 800af94:	4618      	mov	r0, r3
 800af96:	f000 faf9 	bl	800b58c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	69da      	ldr	r2, [r3, #28]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800afa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	69da      	ldr	r2, [r3, #28]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	69d9      	ldr	r1, [r3, #28]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	021a      	lsls	r2, r3, #8
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	61da      	str	r2, [r3, #28]
      break;
 800afce:	e043      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68b9      	ldr	r1, [r7, #8]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fb6c 	bl	800b6b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f042 0208 	orr.w	r2, r2, #8
 800afea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f022 0204 	bic.w	r2, r2, #4
 800affa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	691a      	ldr	r2, [r3, #16]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b00e:	e023      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68b9      	ldr	r1, [r7, #8]
 800b016:	4618      	mov	r0, r3
 800b018:	f000 fbb6 	bl	800b788 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b02a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b03a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	021a      	lsls	r2, r3, #8
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	430a      	orrs	r2, r1
 800b04e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b050:	e002      	b.n	800b058 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b052:	2301      	movs	r3, #1
 800b054:	75fb      	strb	r3, [r7, #23]
      break;
 800b056:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b060:	7dfb      	ldrb	r3, [r7, #23]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop

0800b06c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b088:	bf00      	nop
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a46      	ldr	r2, [pc, #280]	; (800b1e8 <TIM_Base_SetConfig+0x12c>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d017      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0da:	d013      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a43      	ldr	r2, [pc, #268]	; (800b1ec <TIM_Base_SetConfig+0x130>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00f      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a42      	ldr	r2, [pc, #264]	; (800b1f0 <TIM_Base_SetConfig+0x134>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d00b      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a41      	ldr	r2, [pc, #260]	; (800b1f4 <TIM_Base_SetConfig+0x138>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d007      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a40      	ldr	r2, [pc, #256]	; (800b1f8 <TIM_Base_SetConfig+0x13c>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d003      	beq.n	800b104 <TIM_Base_SetConfig+0x48>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a3f      	ldr	r2, [pc, #252]	; (800b1fc <TIM_Base_SetConfig+0x140>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d108      	bne.n	800b116 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b10a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	4313      	orrs	r3, r2
 800b114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a33      	ldr	r2, [pc, #204]	; (800b1e8 <TIM_Base_SetConfig+0x12c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d023      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b124:	d01f      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a30      	ldr	r2, [pc, #192]	; (800b1ec <TIM_Base_SetConfig+0x130>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d01b      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a2f      	ldr	r2, [pc, #188]	; (800b1f0 <TIM_Base_SetConfig+0x134>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d017      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	4a2e      	ldr	r2, [pc, #184]	; (800b1f4 <TIM_Base_SetConfig+0x138>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d013      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4a2d      	ldr	r2, [pc, #180]	; (800b1f8 <TIM_Base_SetConfig+0x13c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d00f      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a2d      	ldr	r2, [pc, #180]	; (800b200 <TIM_Base_SetConfig+0x144>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d00b      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <TIM_Base_SetConfig+0x148>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d007      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a2b      	ldr	r2, [pc, #172]	; (800b208 <TIM_Base_SetConfig+0x14c>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d003      	beq.n	800b166 <TIM_Base_SetConfig+0xaa>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a26      	ldr	r2, [pc, #152]	; (800b1fc <TIM_Base_SetConfig+0x140>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a12      	ldr	r2, [pc, #72]	; (800b1e8 <TIM_Base_SetConfig+0x12c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d013      	beq.n	800b1cc <TIM_Base_SetConfig+0x110>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a14      	ldr	r2, [pc, #80]	; (800b1f8 <TIM_Base_SetConfig+0x13c>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d00f      	beq.n	800b1cc <TIM_Base_SetConfig+0x110>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a14      	ldr	r2, [pc, #80]	; (800b200 <TIM_Base_SetConfig+0x144>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_Base_SetConfig+0x110>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a13      	ldr	r2, [pc, #76]	; (800b204 <TIM_Base_SetConfig+0x148>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_Base_SetConfig+0x110>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a12      	ldr	r2, [pc, #72]	; (800b208 <TIM_Base_SetConfig+0x14c>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_Base_SetConfig+0x110>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a0d      	ldr	r2, [pc, #52]	; (800b1fc <TIM_Base_SetConfig+0x140>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d103      	bne.n	800b1d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	691a      	ldr	r2, [r3, #16]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	615a      	str	r2, [r3, #20]
}
 800b1da:	bf00      	nop
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr
 800b1e6:	bf00      	nop
 800b1e8:	40012c00 	.word	0x40012c00
 800b1ec:	40000400 	.word	0x40000400
 800b1f0:	40000800 	.word	0x40000800
 800b1f4:	40000c00 	.word	0x40000c00
 800b1f8:	40013400 	.word	0x40013400
 800b1fc:	40015000 	.word	0x40015000
 800b200:	40014000 	.word	0x40014000
 800b204:	40014400 	.word	0x40014400
 800b208:	40014800 	.word	0x40014800

0800b20c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	f023 0201 	bic.w	r2, r3, #1
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	699b      	ldr	r3, [r3, #24]
 800b232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b23e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f023 0303 	bic.w	r3, r3, #3
 800b246:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4313      	orrs	r3, r2
 800b250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f023 0302 	bic.w	r3, r3, #2
 800b258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	697a      	ldr	r2, [r7, #20]
 800b260:	4313      	orrs	r3, r2
 800b262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a30      	ldr	r2, [pc, #192]	; (800b328 <TIM_OC1_SetConfig+0x11c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d013      	beq.n	800b294 <TIM_OC1_SetConfig+0x88>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a2f      	ldr	r2, [pc, #188]	; (800b32c <TIM_OC1_SetConfig+0x120>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00f      	beq.n	800b294 <TIM_OC1_SetConfig+0x88>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a2e      	ldr	r2, [pc, #184]	; (800b330 <TIM_OC1_SetConfig+0x124>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d00b      	beq.n	800b294 <TIM_OC1_SetConfig+0x88>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a2d      	ldr	r2, [pc, #180]	; (800b334 <TIM_OC1_SetConfig+0x128>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d007      	beq.n	800b294 <TIM_OC1_SetConfig+0x88>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a2c      	ldr	r2, [pc, #176]	; (800b338 <TIM_OC1_SetConfig+0x12c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d003      	beq.n	800b294 <TIM_OC1_SetConfig+0x88>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a2b      	ldr	r2, [pc, #172]	; (800b33c <TIM_OC1_SetConfig+0x130>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d10c      	bne.n	800b2ae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	f023 0308 	bic.w	r3, r3, #8
 800b29a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f023 0304 	bic.w	r3, r3, #4
 800b2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a1d      	ldr	r2, [pc, #116]	; (800b328 <TIM_OC1_SetConfig+0x11c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d013      	beq.n	800b2de <TIM_OC1_SetConfig+0xd2>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a1c      	ldr	r2, [pc, #112]	; (800b32c <TIM_OC1_SetConfig+0x120>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00f      	beq.n	800b2de <TIM_OC1_SetConfig+0xd2>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1b      	ldr	r2, [pc, #108]	; (800b330 <TIM_OC1_SetConfig+0x124>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00b      	beq.n	800b2de <TIM_OC1_SetConfig+0xd2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <TIM_OC1_SetConfig+0x128>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d007      	beq.n	800b2de <TIM_OC1_SetConfig+0xd2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a19      	ldr	r2, [pc, #100]	; (800b338 <TIM_OC1_SetConfig+0x12c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d003      	beq.n	800b2de <TIM_OC1_SetConfig+0xd2>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a18      	ldr	r2, [pc, #96]	; (800b33c <TIM_OC1_SetConfig+0x130>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d111      	bne.n	800b302 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	693a      	ldr	r2, [r7, #16]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	693a      	ldr	r2, [r7, #16]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	621a      	str	r2, [r3, #32]
}
 800b31c:	bf00      	nop
 800b31e:	371c      	adds	r7, #28
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	40012c00 	.word	0x40012c00
 800b32c:	40013400 	.word	0x40013400
 800b330:	40014000 	.word	0x40014000
 800b334:	40014400 	.word	0x40014400
 800b338:	40014800 	.word	0x40014800
 800b33c:	40015000 	.word	0x40015000

0800b340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	f023 0210 	bic.w	r2, r3, #16
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	699b      	ldr	r3, [r3, #24]
 800b366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b36e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	021b      	lsls	r3, r3, #8
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	4313      	orrs	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f023 0320 	bic.w	r3, r3, #32
 800b38e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4313      	orrs	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a2c      	ldr	r2, [pc, #176]	; (800b450 <TIM_OC2_SetConfig+0x110>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d007      	beq.n	800b3b4 <TIM_OC2_SetConfig+0x74>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a2b      	ldr	r2, [pc, #172]	; (800b454 <TIM_OC2_SetConfig+0x114>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d003      	beq.n	800b3b4 <TIM_OC2_SetConfig+0x74>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a2a      	ldr	r2, [pc, #168]	; (800b458 <TIM_OC2_SetConfig+0x118>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d10d      	bne.n	800b3d0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	011b      	lsls	r3, r3, #4
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a1f      	ldr	r2, [pc, #124]	; (800b450 <TIM_OC2_SetConfig+0x110>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d013      	beq.n	800b400 <TIM_OC2_SetConfig+0xc0>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a1e      	ldr	r2, [pc, #120]	; (800b454 <TIM_OC2_SetConfig+0x114>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d00f      	beq.n	800b400 <TIM_OC2_SetConfig+0xc0>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a1e      	ldr	r2, [pc, #120]	; (800b45c <TIM_OC2_SetConfig+0x11c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d00b      	beq.n	800b400 <TIM_OC2_SetConfig+0xc0>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a1d      	ldr	r2, [pc, #116]	; (800b460 <TIM_OC2_SetConfig+0x120>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d007      	beq.n	800b400 <TIM_OC2_SetConfig+0xc0>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a1c      	ldr	r2, [pc, #112]	; (800b464 <TIM_OC2_SetConfig+0x124>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d003      	beq.n	800b400 <TIM_OC2_SetConfig+0xc0>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a17      	ldr	r2, [pc, #92]	; (800b458 <TIM_OC2_SetConfig+0x118>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d113      	bne.n	800b428 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b40e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	4313      	orrs	r3, r2
 800b41a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	699b      	ldr	r3, [r3, #24]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	4313      	orrs	r3, r2
 800b426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	685a      	ldr	r2, [r3, #4]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	621a      	str	r2, [r3, #32]
}
 800b442:	bf00      	nop
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	40012c00 	.word	0x40012c00
 800b454:	40013400 	.word	0x40013400
 800b458:	40015000 	.word	0x40015000
 800b45c:	40014000 	.word	0x40014000
 800b460:	40014400 	.word	0x40014400
 800b464:	40014800 	.word	0x40014800

0800b468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b49a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f023 0303 	bic.w	r3, r3, #3
 800b4a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	021b      	lsls	r3, r3, #8
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	4a2b      	ldr	r2, [pc, #172]	; (800b574 <TIM_OC3_SetConfig+0x10c>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d007      	beq.n	800b4da <TIM_OC3_SetConfig+0x72>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4a2a      	ldr	r2, [pc, #168]	; (800b578 <TIM_OC3_SetConfig+0x110>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d003      	beq.n	800b4da <TIM_OC3_SetConfig+0x72>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	4a29      	ldr	r2, [pc, #164]	; (800b57c <TIM_OC3_SetConfig+0x114>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d10d      	bne.n	800b4f6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	021b      	lsls	r3, r3, #8
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a1e      	ldr	r2, [pc, #120]	; (800b574 <TIM_OC3_SetConfig+0x10c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d013      	beq.n	800b526 <TIM_OC3_SetConfig+0xbe>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a1d      	ldr	r2, [pc, #116]	; (800b578 <TIM_OC3_SetConfig+0x110>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d00f      	beq.n	800b526 <TIM_OC3_SetConfig+0xbe>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a1d      	ldr	r2, [pc, #116]	; (800b580 <TIM_OC3_SetConfig+0x118>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00b      	beq.n	800b526 <TIM_OC3_SetConfig+0xbe>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a1c      	ldr	r2, [pc, #112]	; (800b584 <TIM_OC3_SetConfig+0x11c>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d007      	beq.n	800b526 <TIM_OC3_SetConfig+0xbe>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a1b      	ldr	r2, [pc, #108]	; (800b588 <TIM_OC3_SetConfig+0x120>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d003      	beq.n	800b526 <TIM_OC3_SetConfig+0xbe>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a16      	ldr	r2, [pc, #88]	; (800b57c <TIM_OC3_SetConfig+0x114>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d113      	bne.n	800b54e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b52c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	693a      	ldr	r2, [r7, #16]
 800b53e:	4313      	orrs	r3, r2
 800b540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	011b      	lsls	r3, r3, #4
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	697a      	ldr	r2, [r7, #20]
 800b566:	621a      	str	r2, [r3, #32]
}
 800b568:	bf00      	nop
 800b56a:	371c      	adds	r7, #28
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	40012c00 	.word	0x40012c00
 800b578:	40013400 	.word	0x40013400
 800b57c:	40015000 	.word	0x40015000
 800b580:	40014000 	.word	0x40014000
 800b584:	40014400 	.word	0x40014400
 800b588:	40014800 	.word	0x40014800

0800b58c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b5ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	031b      	lsls	r3, r3, #12
 800b5e2:	697a      	ldr	r2, [r7, #20]
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a2c      	ldr	r2, [pc, #176]	; (800b69c <TIM_OC4_SetConfig+0x110>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d007      	beq.n	800b600 <TIM_OC4_SetConfig+0x74>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a2b      	ldr	r2, [pc, #172]	; (800b6a0 <TIM_OC4_SetConfig+0x114>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d003      	beq.n	800b600 <TIM_OC4_SetConfig+0x74>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	4a2a      	ldr	r2, [pc, #168]	; (800b6a4 <TIM_OC4_SetConfig+0x118>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d10d      	bne.n	800b61c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	031b      	lsls	r3, r3, #12
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	4313      	orrs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b61a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	4a1f      	ldr	r2, [pc, #124]	; (800b69c <TIM_OC4_SetConfig+0x110>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d013      	beq.n	800b64c <TIM_OC4_SetConfig+0xc0>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	4a1e      	ldr	r2, [pc, #120]	; (800b6a0 <TIM_OC4_SetConfig+0x114>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d00f      	beq.n	800b64c <TIM_OC4_SetConfig+0xc0>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	4a1e      	ldr	r2, [pc, #120]	; (800b6a8 <TIM_OC4_SetConfig+0x11c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d00b      	beq.n	800b64c <TIM_OC4_SetConfig+0xc0>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a1d      	ldr	r2, [pc, #116]	; (800b6ac <TIM_OC4_SetConfig+0x120>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d007      	beq.n	800b64c <TIM_OC4_SetConfig+0xc0>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a1c      	ldr	r2, [pc, #112]	; (800b6b0 <TIM_OC4_SetConfig+0x124>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d003      	beq.n	800b64c <TIM_OC4_SetConfig+0xc0>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a17      	ldr	r2, [pc, #92]	; (800b6a4 <TIM_OC4_SetConfig+0x118>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d113      	bne.n	800b674 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b652:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b65a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	019b      	lsls	r3, r3, #6
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	4313      	orrs	r3, r2
 800b666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	699b      	ldr	r3, [r3, #24]
 800b66c:	019b      	lsls	r3, r3, #6
 800b66e:	693a      	ldr	r2, [r7, #16]
 800b670:	4313      	orrs	r3, r2
 800b672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	621a      	str	r2, [r3, #32]
}
 800b68e:	bf00      	nop
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	40012c00 	.word	0x40012c00
 800b6a0:	40013400 	.word	0x40013400
 800b6a4:	40015000 	.word	0x40015000
 800b6a8:	40014000 	.word	0x40014000
 800b6ac:	40014400 	.word	0x40014400
 800b6b0:	40014800 	.word	0x40014800

0800b6b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	041b      	lsls	r3, r3, #16
 800b700:	693a      	ldr	r2, [r7, #16]
 800b702:	4313      	orrs	r3, r2
 800b704:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a19      	ldr	r2, [pc, #100]	; (800b770 <TIM_OC5_SetConfig+0xbc>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d013      	beq.n	800b736 <TIM_OC5_SetConfig+0x82>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a18      	ldr	r2, [pc, #96]	; (800b774 <TIM_OC5_SetConfig+0xc0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d00f      	beq.n	800b736 <TIM_OC5_SetConfig+0x82>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a17      	ldr	r2, [pc, #92]	; (800b778 <TIM_OC5_SetConfig+0xc4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d00b      	beq.n	800b736 <TIM_OC5_SetConfig+0x82>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a16      	ldr	r2, [pc, #88]	; (800b77c <TIM_OC5_SetConfig+0xc8>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d007      	beq.n	800b736 <TIM_OC5_SetConfig+0x82>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4a15      	ldr	r2, [pc, #84]	; (800b780 <TIM_OC5_SetConfig+0xcc>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d003      	beq.n	800b736 <TIM_OC5_SetConfig+0x82>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	4a14      	ldr	r2, [pc, #80]	; (800b784 <TIM_OC5_SetConfig+0xd0>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d109      	bne.n	800b74a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b73c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	695b      	ldr	r3, [r3, #20]
 800b742:	021b      	lsls	r3, r3, #8
 800b744:	697a      	ldr	r2, [r7, #20]
 800b746:	4313      	orrs	r3, r2
 800b748:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	697a      	ldr	r2, [r7, #20]
 800b74e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	685a      	ldr	r2, [r3, #4]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	621a      	str	r2, [r3, #32]
}
 800b764:	bf00      	nop
 800b766:	371c      	adds	r7, #28
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40014000 	.word	0x40014000
 800b77c:	40014400 	.word	0x40014400
 800b780:	40014800 	.word	0x40014800
 800b784:	40015000 	.word	0x40015000

0800b788 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b788:	b480      	push	{r7}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a1b      	ldr	r3, [r3, #32]
 800b7a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b7b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	021b      	lsls	r3, r3, #8
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	051b      	lsls	r3, r3, #20
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a1a      	ldr	r2, [pc, #104]	; (800b848 <TIM_OC6_SetConfig+0xc0>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d013      	beq.n	800b80c <TIM_OC6_SetConfig+0x84>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a19      	ldr	r2, [pc, #100]	; (800b84c <TIM_OC6_SetConfig+0xc4>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d00f      	beq.n	800b80c <TIM_OC6_SetConfig+0x84>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a18      	ldr	r2, [pc, #96]	; (800b850 <TIM_OC6_SetConfig+0xc8>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00b      	beq.n	800b80c <TIM_OC6_SetConfig+0x84>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a17      	ldr	r2, [pc, #92]	; (800b854 <TIM_OC6_SetConfig+0xcc>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d007      	beq.n	800b80c <TIM_OC6_SetConfig+0x84>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a16      	ldr	r2, [pc, #88]	; (800b858 <TIM_OC6_SetConfig+0xd0>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d003      	beq.n	800b80c <TIM_OC6_SetConfig+0x84>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a15      	ldr	r2, [pc, #84]	; (800b85c <TIM_OC6_SetConfig+0xd4>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d109      	bne.n	800b820 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	695b      	ldr	r3, [r3, #20]
 800b818:	029b      	lsls	r3, r3, #10
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	621a      	str	r2, [r3, #32]
}
 800b83a:	bf00      	nop
 800b83c:	371c      	adds	r7, #28
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	40012c00 	.word	0x40012c00
 800b84c:	40013400 	.word	0x40013400
 800b850:	40014000 	.word	0x40014000
 800b854:	40014400 	.word	0x40014400
 800b858:	40014800 	.word	0x40014800
 800b85c:	40015000 	.word	0x40015000

0800b860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b860:	b480      	push	{r7}
 800b862:	b085      	sub	sp, #20
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b870:	2b01      	cmp	r3, #1
 800b872:	d101      	bne.n	800b878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b874:	2302      	movs	r3, #2
 800b876:	e074      	b.n	800b962 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2202      	movs	r2, #2
 800b884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685b      	ldr	r3, [r3, #4]
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a34      	ldr	r2, [pc, #208]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d009      	beq.n	800b8b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a33      	ldr	r2, [pc, #204]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d004      	beq.n	800b8b6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a31      	ldr	r2, [pc, #196]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d108      	bne.n	800b8c8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b8bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a21      	ldr	r2, [pc, #132]	; (800b970 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d022      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8f8:	d01d      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4a1f      	ldr	r2, [pc, #124]	; (800b97c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d018      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a1d      	ldr	r2, [pc, #116]	; (800b980 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d013      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a1c      	ldr	r2, [pc, #112]	; (800b984 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d00e      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a15      	ldr	r2, [pc, #84]	; (800b974 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d009      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d004      	beq.n	800b936 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a11      	ldr	r2, [pc, #68]	; (800b978 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d10c      	bne.n	800b950 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b93c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	689b      	ldr	r3, [r3, #8]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	4313      	orrs	r3, r2
 800b946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3714      	adds	r7, #20
 800b966:	46bd      	mov	sp, r7
 800b968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	40012c00 	.word	0x40012c00
 800b974:	40013400 	.word	0x40013400
 800b978:	40015000 	.word	0x40015000
 800b97c:	40000400 	.word	0x40000400
 800b980:	40000800 	.word	0x40000800
 800b984:	40000c00 	.word	0x40000c00
 800b988:	40014000 	.word	0x40014000

0800b98c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d101      	bne.n	800ba2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e042      	b.n	800bab0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d106      	bne.n	800ba42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7f9 fccf 	bl	80053e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2224      	movs	r2, #36	; 0x24
 800ba46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f022 0201 	bic.w	r2, r2, #1
 800ba58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fb64 	bl	800c128 <UART_SetConfig>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d101      	bne.n	800ba6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e022      	b.n	800bab0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d002      	beq.n	800ba78 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fe54 	bl	800c720 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ba86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689a      	ldr	r2, [r3, #8]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0201 	orr.w	r2, r2, #1
 800baa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fedb 	bl	800c864 <UART_CheckIdleState>
 800baae:	4603      	mov	r3, r0
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}

0800bab8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b0ba      	sub	sp, #232	; 0xe8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bade:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bae2:	f640 030f 	movw	r3, #2063	; 0x80f
 800bae6:	4013      	ands	r3, r2
 800bae8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800baec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d11b      	bne.n	800bb2c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baf8:	f003 0320 	and.w	r3, r3, #32
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d015      	beq.n	800bb2c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb04:	f003 0320 	and.w	r3, r3, #32
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d105      	bne.n	800bb18 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d009      	beq.n	800bb2c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 82d6 	beq.w	800c0ce <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
      }
      return;
 800bb2a:	e2d0      	b.n	800c0ce <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bb2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 811f 	beq.w	800bd74 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bb36:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bb3a:	4b8b      	ldr	r3, [pc, #556]	; (800bd68 <HAL_UART_IRQHandler+0x2b0>)
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d106      	bne.n	800bb50 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bb42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bb46:	4b89      	ldr	r3, [pc, #548]	; (800bd6c <HAL_UART_IRQHandler+0x2b4>)
 800bb48:	4013      	ands	r3, r2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	f000 8112 	beq.w	800bd74 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bb50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d011      	beq.n	800bb80 <HAL_UART_IRQHandler+0xc8>
 800bb5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00b      	beq.n	800bb80 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb76:	f043 0201 	orr.w	r2, r3, #1
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb84:	f003 0302 	and.w	r3, r3, #2
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d011      	beq.n	800bbb0 <HAL_UART_IRQHandler+0xf8>
 800bb8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00b      	beq.n	800bbb0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba6:	f043 0204 	orr.w	r2, r3, #4
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bbb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb4:	f003 0304 	and.w	r3, r3, #4
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d011      	beq.n	800bbe0 <HAL_UART_IRQHandler+0x128>
 800bbbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbc0:	f003 0301 	and.w	r3, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00b      	beq.n	800bbe0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2204      	movs	r2, #4
 800bbce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbd6:	f043 0202 	orr.w	r2, r3, #2
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe4:	f003 0308 	and.w	r3, r3, #8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d017      	beq.n	800bc1c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbf0:	f003 0320 	and.w	r3, r3, #32
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d105      	bne.n	800bc04 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bbf8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbfc:	4b5a      	ldr	r3, [pc, #360]	; (800bd68 <HAL_UART_IRQHandler+0x2b0>)
 800bbfe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00b      	beq.n	800bc1c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2208      	movs	r2, #8
 800bc0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc12:	f043 0208 	orr.w	r2, r3, #8
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bc1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d012      	beq.n	800bc4e <HAL_UART_IRQHandler+0x196>
 800bc28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00c      	beq.n	800bc4e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc44:	f043 0220 	orr.w	r2, r3, #32
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 823c 	beq.w	800c0d2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc5e:	f003 0320 	and.w	r3, r3, #32
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d013      	beq.n	800bc8e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d007      	beq.n	800bc8e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca2:	2b40      	cmp	r3, #64	; 0x40
 800bca4:	d005      	beq.n	800bcb2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bcaa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d04f      	beq.n	800bd52 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fee9 	bl	800ca8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc2:	2b40      	cmp	r3, #64	; 0x40
 800bcc4:	d141      	bne.n	800bd4a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	3308      	adds	r3, #8
 800bccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bcd4:	e853 3f00 	ldrex	r3, [r3]
 800bcd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bcdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	3308      	adds	r3, #8
 800bcee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bcf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bcf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bcfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd02:	e841 2300 	strex	r3, r2, [r1]
 800bd06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1d9      	bne.n	800bcc6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d013      	beq.n	800bd42 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd1e:	4a14      	ldr	r2, [pc, #80]	; (800bd70 <HAL_UART_IRQHandler+0x2b8>)
 800bd20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fa fe5d 	bl	80069e6 <HAL_DMA_Abort_IT>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d017      	beq.n	800bd62 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd40:	e00f      	b.n	800bd62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 f9da 	bl	800c0fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd48:	e00b      	b.n	800bd62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f9d6 	bl	800c0fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd50:	e007      	b.n	800bd62 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f9d2 	bl	800c0fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bd60:	e1b7      	b.n	800c0d2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd62:	bf00      	nop
    return;
 800bd64:	e1b5      	b.n	800c0d2 <HAL_UART_IRQHandler+0x61a>
 800bd66:	bf00      	nop
 800bd68:	10000001 	.word	0x10000001
 800bd6c:	04000120 	.word	0x04000120
 800bd70:	0800cb57 	.word	0x0800cb57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	f040 814a 	bne.w	800c012 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd82:	f003 0310 	and.w	r3, r3, #16
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8143 	beq.w	800c012 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd90:	f003 0310 	and.w	r3, r3, #16
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	f000 813c 	beq.w	800c012 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2210      	movs	r2, #16
 800bda0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdac:	2b40      	cmp	r3, #64	; 0x40
 800bdae:	f040 80b5 	bne.w	800bf1c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bdbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f000 8187 	beq.w	800c0d6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bdce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	f080 817f 	bcs.w	800c0d6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bdde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f040 8086 	bne.w	800bf00 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800be00:	e853 3f00 	ldrex	r3, [r3]
 800be04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800be08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800be0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800be1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800be22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800be2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800be2e:	e841 2300 	strex	r3, r2, [r1]
 800be32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800be36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1da      	bne.n	800bdf4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3308      	adds	r3, #8
 800be44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be48:	e853 3f00 	ldrex	r3, [r3]
 800be4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be50:	f023 0301 	bic.w	r3, r3, #1
 800be54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800be62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800be66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be6e:	e841 2300 	strex	r3, r2, [r1]
 800be72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be76:	2b00      	cmp	r3, #0
 800be78:	d1e1      	bne.n	800be3e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3308      	adds	r3, #8
 800be80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be84:	e853 3f00 	ldrex	r3, [r3]
 800be88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	3308      	adds	r3, #8
 800be9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800be9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800beac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e3      	bne.n	800be7a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec8:	e853 3f00 	ldrex	r3, [r3]
 800becc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bed0:	f023 0310 	bic.w	r3, r3, #16
 800bed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	461a      	mov	r2, r3
 800bede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bee2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bee4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800beea:	e841 2300 	strex	r3, r2, [r1]
 800beee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1e4      	bne.n	800bec0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befa:	4618      	mov	r0, r3
 800befc:	f7fa fd1a 	bl	8006934 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	4619      	mov	r1, r3
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 f8fb 	bl	800c110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf1a:	e0dc      	b.n	800c0d6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	f000 80ce 	beq.w	800c0da <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800bf3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80c9 	beq.w	800c0da <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bf5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	461a      	mov	r2, r3
 800bf66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf72:	e841 2300 	strex	r3, r2, [r1]
 800bf76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1e4      	bne.n	800bf48 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3308      	adds	r3, #8
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	e853 3f00 	ldrex	r3, [r3]
 800bf8c:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8e:	6a3b      	ldr	r3, [r7, #32]
 800bf90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf94:	f023 0301 	bic.w	r3, r3, #1
 800bf98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	3308      	adds	r3, #8
 800bfa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bfa6:	633a      	str	r2, [r7, #48]	; 0x30
 800bfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfae:	e841 2300 	strex	r3, r2, [r1]
 800bfb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e1      	bne.n	800bf7e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2220      	movs	r2, #32
 800bfbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	e853 3f00 	ldrex	r3, [r3]
 800bfda:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f023 0310 	bic.w	r3, r3, #16
 800bfe2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bff0:	61fb      	str	r3, [r7, #28]
 800bff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	69b9      	ldr	r1, [r7, #24]
 800bff6:	69fa      	ldr	r2, [r7, #28]
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	617b      	str	r3, [r7, #20]
   return(result);
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e4      	bne.n	800bfce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c008:	4619      	mov	r1, r3
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 f880 	bl	800c110 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c010:	e063      	b.n	800c0da <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00e      	beq.n	800c03c <HAL_UART_IRQHandler+0x584>
 800c01e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c026:	2b00      	cmp	r3, #0
 800c028:	d008      	beq.n	800c03c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fdcf 	bl	800cbd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c03a:	e051      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c044:	2b00      	cmp	r3, #0
 800c046:	d014      	beq.n	800c072 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c050:	2b00      	cmp	r3, #0
 800c052:	d105      	bne.n	800c060 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d008      	beq.n	800c072 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c064:	2b00      	cmp	r3, #0
 800c066:	d03a      	beq.n	800c0de <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	4798      	blx	r3
    }
    return;
 800c070:	e035      	b.n	800c0de <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d009      	beq.n	800c092 <HAL_UART_IRQHandler+0x5da>
 800c07e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fd79 	bl	800cb82 <UART_EndTransmit_IT>
    return;
 800c090:	e026      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c096:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d009      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x5fa>
 800c09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fda8 	bl	800cc00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0b0:	e016      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d010      	beq.n	800c0e0 <HAL_UART_IRQHandler+0x628>
 800c0be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da0c      	bge.n	800c0e0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f000 fd90 	bl	800cbec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c0cc:	e008      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
      return;
 800c0ce:	bf00      	nop
 800c0d0:	e006      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
    return;
 800c0d2:	bf00      	nop
 800c0d4:	e004      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
      return;
 800c0d6:	bf00      	nop
 800c0d8:	e002      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
      return;
 800c0da:	bf00      	nop
 800c0dc:	e000      	b.n	800c0e0 <HAL_UART_IRQHandler+0x628>
    return;
 800c0de:	bf00      	nop
  }
}
 800c0e0:	37e8      	adds	r7, #232	; 0xe8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	460b      	mov	r3, r1
 800c11a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c12c:	b08c      	sub	sp, #48	; 0x30
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	689a      	ldr	r2, [r3, #8]
 800c13c:	697b      	ldr	r3, [r7, #20]
 800c13e:	691b      	ldr	r3, [r3, #16]
 800c140:	431a      	orrs	r2, r3
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	431a      	orrs	r2, r3
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	69db      	ldr	r3, [r3, #28]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	681a      	ldr	r2, [r3, #0]
 800c156:	4baa      	ldr	r3, [pc, #680]	; (800c400 <UART_SetConfig+0x2d8>)
 800c158:	4013      	ands	r3, r2
 800c15a:	697a      	ldr	r2, [r7, #20]
 800c15c:	6812      	ldr	r2, [r2, #0]
 800c15e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c160:	430b      	orrs	r3, r1
 800c162:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	685b      	ldr	r3, [r3, #4]
 800c16a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	68da      	ldr	r2, [r3, #12]
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	430a      	orrs	r2, r1
 800c178:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a9f      	ldr	r2, [pc, #636]	; (800c404 <UART_SetConfig+0x2dc>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d004      	beq.n	800c194 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c190:	4313      	orrs	r3, r2
 800c192:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c19e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	6812      	ldr	r2, [r2, #0]
 800c1a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b2:	f023 010f 	bic.w	r1, r3, #15
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	430a      	orrs	r2, r1
 800c1c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a90      	ldr	r2, [pc, #576]	; (800c408 <UART_SetConfig+0x2e0>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d125      	bne.n	800c218 <UART_SetConfig+0xf0>
 800c1cc:	4b8f      	ldr	r3, [pc, #572]	; (800c40c <UART_SetConfig+0x2e4>)
 800c1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d81a      	bhi.n	800c210 <UART_SetConfig+0xe8>
 800c1da:	a201      	add	r2, pc, #4	; (adr r2, 800c1e0 <UART_SetConfig+0xb8>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1f1 	.word	0x0800c1f1
 800c1e4:	0800c201 	.word	0x0800c201
 800c1e8:	0800c1f9 	.word	0x0800c1f9
 800c1ec:	0800c209 	.word	0x0800c209
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1f6:	e116      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c1fe:	e112      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c200:	2304      	movs	r3, #4
 800c202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c206:	e10e      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c208:	2308      	movs	r3, #8
 800c20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c20e:	e10a      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c210:	2310      	movs	r3, #16
 800c212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c216:	e106      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a7c      	ldr	r2, [pc, #496]	; (800c410 <UART_SetConfig+0x2e8>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d138      	bne.n	800c294 <UART_SetConfig+0x16c>
 800c222:	4b7a      	ldr	r3, [pc, #488]	; (800c40c <UART_SetConfig+0x2e4>)
 800c224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c228:	f003 030c 	and.w	r3, r3, #12
 800c22c:	2b0c      	cmp	r3, #12
 800c22e:	d82d      	bhi.n	800c28c <UART_SetConfig+0x164>
 800c230:	a201      	add	r2, pc, #4	; (adr r2, 800c238 <UART_SetConfig+0x110>)
 800c232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c236:	bf00      	nop
 800c238:	0800c26d 	.word	0x0800c26d
 800c23c:	0800c28d 	.word	0x0800c28d
 800c240:	0800c28d 	.word	0x0800c28d
 800c244:	0800c28d 	.word	0x0800c28d
 800c248:	0800c27d 	.word	0x0800c27d
 800c24c:	0800c28d 	.word	0x0800c28d
 800c250:	0800c28d 	.word	0x0800c28d
 800c254:	0800c28d 	.word	0x0800c28d
 800c258:	0800c275 	.word	0x0800c275
 800c25c:	0800c28d 	.word	0x0800c28d
 800c260:	0800c28d 	.word	0x0800c28d
 800c264:	0800c28d 	.word	0x0800c28d
 800c268:	0800c285 	.word	0x0800c285
 800c26c:	2300      	movs	r3, #0
 800c26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c272:	e0d8      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c274:	2302      	movs	r3, #2
 800c276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c27a:	e0d4      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c27c:	2304      	movs	r3, #4
 800c27e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c282:	e0d0      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c284:	2308      	movs	r3, #8
 800c286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c28a:	e0cc      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c28c:	2310      	movs	r3, #16
 800c28e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c292:	e0c8      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	4a5e      	ldr	r2, [pc, #376]	; (800c414 <UART_SetConfig+0x2ec>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d125      	bne.n	800c2ea <UART_SetConfig+0x1c2>
 800c29e:	4b5b      	ldr	r3, [pc, #364]	; (800c40c <UART_SetConfig+0x2e4>)
 800c2a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c2a8:	2b30      	cmp	r3, #48	; 0x30
 800c2aa:	d016      	beq.n	800c2da <UART_SetConfig+0x1b2>
 800c2ac:	2b30      	cmp	r3, #48	; 0x30
 800c2ae:	d818      	bhi.n	800c2e2 <UART_SetConfig+0x1ba>
 800c2b0:	2b20      	cmp	r3, #32
 800c2b2:	d00a      	beq.n	800c2ca <UART_SetConfig+0x1a2>
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	d814      	bhi.n	800c2e2 <UART_SetConfig+0x1ba>
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d002      	beq.n	800c2c2 <UART_SetConfig+0x19a>
 800c2bc:	2b10      	cmp	r3, #16
 800c2be:	d008      	beq.n	800c2d2 <UART_SetConfig+0x1aa>
 800c2c0:	e00f      	b.n	800c2e2 <UART_SetConfig+0x1ba>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2c8:	e0ad      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2d0:	e0a9      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c2d2:	2304      	movs	r3, #4
 800c2d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2d8:	e0a5      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c2da:	2308      	movs	r3, #8
 800c2dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e0:	e0a1      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c2e2:	2310      	movs	r3, #16
 800c2e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c2e8:	e09d      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c2ea:	697b      	ldr	r3, [r7, #20]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4a4a      	ldr	r2, [pc, #296]	; (800c418 <UART_SetConfig+0x2f0>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d125      	bne.n	800c340 <UART_SetConfig+0x218>
 800c2f4:	4b45      	ldr	r3, [pc, #276]	; (800c40c <UART_SetConfig+0x2e4>)
 800c2f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c2fe:	2bc0      	cmp	r3, #192	; 0xc0
 800c300:	d016      	beq.n	800c330 <UART_SetConfig+0x208>
 800c302:	2bc0      	cmp	r3, #192	; 0xc0
 800c304:	d818      	bhi.n	800c338 <UART_SetConfig+0x210>
 800c306:	2b80      	cmp	r3, #128	; 0x80
 800c308:	d00a      	beq.n	800c320 <UART_SetConfig+0x1f8>
 800c30a:	2b80      	cmp	r3, #128	; 0x80
 800c30c:	d814      	bhi.n	800c338 <UART_SetConfig+0x210>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d002      	beq.n	800c318 <UART_SetConfig+0x1f0>
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d008      	beq.n	800c328 <UART_SetConfig+0x200>
 800c316:	e00f      	b.n	800c338 <UART_SetConfig+0x210>
 800c318:	2300      	movs	r3, #0
 800c31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c31e:	e082      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c320:	2302      	movs	r3, #2
 800c322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c326:	e07e      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c328:	2304      	movs	r3, #4
 800c32a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c32e:	e07a      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c330:	2308      	movs	r3, #8
 800c332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c336:	e076      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c338:	2310      	movs	r3, #16
 800c33a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c33e:	e072      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a35      	ldr	r2, [pc, #212]	; (800c41c <UART_SetConfig+0x2f4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d12a      	bne.n	800c3a0 <UART_SetConfig+0x278>
 800c34a:	4b30      	ldr	r3, [pc, #192]	; (800c40c <UART_SetConfig+0x2e4>)
 800c34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c358:	d01a      	beq.n	800c390 <UART_SetConfig+0x268>
 800c35a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c35e:	d81b      	bhi.n	800c398 <UART_SetConfig+0x270>
 800c360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c364:	d00c      	beq.n	800c380 <UART_SetConfig+0x258>
 800c366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c36a:	d815      	bhi.n	800c398 <UART_SetConfig+0x270>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <UART_SetConfig+0x250>
 800c370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c374:	d008      	beq.n	800c388 <UART_SetConfig+0x260>
 800c376:	e00f      	b.n	800c398 <UART_SetConfig+0x270>
 800c378:	2300      	movs	r3, #0
 800c37a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c37e:	e052      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c380:	2302      	movs	r3, #2
 800c382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c386:	e04e      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c388:	2304      	movs	r3, #4
 800c38a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c38e:	e04a      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c390:	2308      	movs	r3, #8
 800c392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c396:	e046      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c398:	2310      	movs	r3, #16
 800c39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c39e:	e042      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a17      	ldr	r2, [pc, #92]	; (800c404 <UART_SetConfig+0x2dc>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d13a      	bne.n	800c420 <UART_SetConfig+0x2f8>
 800c3aa:	4b18      	ldr	r3, [pc, #96]	; (800c40c <UART_SetConfig+0x2e4>)
 800c3ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c3b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3b8:	d01a      	beq.n	800c3f0 <UART_SetConfig+0x2c8>
 800c3ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c3be:	d81b      	bhi.n	800c3f8 <UART_SetConfig+0x2d0>
 800c3c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3c4:	d00c      	beq.n	800c3e0 <UART_SetConfig+0x2b8>
 800c3c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c3ca:	d815      	bhi.n	800c3f8 <UART_SetConfig+0x2d0>
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <UART_SetConfig+0x2b0>
 800c3d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d4:	d008      	beq.n	800c3e8 <UART_SetConfig+0x2c0>
 800c3d6:	e00f      	b.n	800c3f8 <UART_SetConfig+0x2d0>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3de:	e022      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3e6:	e01e      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c3e8:	2304      	movs	r3, #4
 800c3ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3ee:	e01a      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3f6:	e016      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c3f8:	2310      	movs	r3, #16
 800c3fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c3fe:	e012      	b.n	800c426 <UART_SetConfig+0x2fe>
 800c400:	cfff69f3 	.word	0xcfff69f3
 800c404:	40008000 	.word	0x40008000
 800c408:	40013800 	.word	0x40013800
 800c40c:	40021000 	.word	0x40021000
 800c410:	40004400 	.word	0x40004400
 800c414:	40004800 	.word	0x40004800
 800c418:	40004c00 	.word	0x40004c00
 800c41c:	40005000 	.word	0x40005000
 800c420:	2310      	movs	r3, #16
 800c422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4aae      	ldr	r2, [pc, #696]	; (800c6e4 <UART_SetConfig+0x5bc>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	f040 8097 	bne.w	800c560 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c432:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c436:	2b08      	cmp	r3, #8
 800c438:	d823      	bhi.n	800c482 <UART_SetConfig+0x35a>
 800c43a:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <UART_SetConfig+0x318>)
 800c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c440:	0800c465 	.word	0x0800c465
 800c444:	0800c483 	.word	0x0800c483
 800c448:	0800c46d 	.word	0x0800c46d
 800c44c:	0800c483 	.word	0x0800c483
 800c450:	0800c473 	.word	0x0800c473
 800c454:	0800c483 	.word	0x0800c483
 800c458:	0800c483 	.word	0x0800c483
 800c45c:	0800c483 	.word	0x0800c483
 800c460:	0800c47b 	.word	0x0800c47b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c464:	f7fd fea2 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800c468:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c46a:	e010      	b.n	800c48e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c46c:	4b9e      	ldr	r3, [pc, #632]	; (800c6e8 <UART_SetConfig+0x5c0>)
 800c46e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c470:	e00d      	b.n	800c48e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c472:	f7fd fe2d 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c478:	e009      	b.n	800c48e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c47a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c480:	e005      	b.n	800c48e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c482:	2300      	movs	r3, #0
 800c484:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c486:	2301      	movs	r3, #1
 800c488:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c48c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 8130 	beq.w	800c6f6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c49a:	4a94      	ldr	r2, [pc, #592]	; (800c6ec <UART_SetConfig+0x5c4>)
 800c49c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	4413      	add	r3, r2
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d305      	bcc.n	800c4c6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d903      	bls.n	800c4ce <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c4cc:	e113      	b.n	800c6f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	60bb      	str	r3, [r7, #8]
 800c4d4:	60fa      	str	r2, [r7, #12]
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4da:	4a84      	ldr	r2, [pc, #528]	; (800c6ec <UART_SetConfig+0x5c4>)
 800c4dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	603b      	str	r3, [r7, #0]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c4f0:	f7f7 fe96 	bl	8004220 <__aeabi_uldivmod>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4610      	mov	r0, r2
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f04f 0200 	mov.w	r2, #0
 800c500:	f04f 0300 	mov.w	r3, #0
 800c504:	020b      	lsls	r3, r1, #8
 800c506:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c50a:	0202      	lsls	r2, r0, #8
 800c50c:	6979      	ldr	r1, [r7, #20]
 800c50e:	6849      	ldr	r1, [r1, #4]
 800c510:	0849      	lsrs	r1, r1, #1
 800c512:	2000      	movs	r0, #0
 800c514:	460c      	mov	r4, r1
 800c516:	4605      	mov	r5, r0
 800c518:	eb12 0804 	adds.w	r8, r2, r4
 800c51c:	eb43 0905 	adc.w	r9, r3, r5
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	469a      	mov	sl, r3
 800c528:	4693      	mov	fp, r2
 800c52a:	4652      	mov	r2, sl
 800c52c:	465b      	mov	r3, fp
 800c52e:	4640      	mov	r0, r8
 800c530:	4649      	mov	r1, r9
 800c532:	f7f7 fe75 	bl	8004220 <__aeabi_uldivmod>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4613      	mov	r3, r2
 800c53c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c53e:	6a3b      	ldr	r3, [r7, #32]
 800c540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c544:	d308      	bcc.n	800c558 <UART_SetConfig+0x430>
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c54c:	d204      	bcs.n	800c558 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	6a3a      	ldr	r2, [r7, #32]
 800c554:	60da      	str	r2, [r3, #12]
 800c556:	e0ce      	b.n	800c6f6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c55e:	e0ca      	b.n	800c6f6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	69db      	ldr	r3, [r3, #28]
 800c564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c568:	d166      	bne.n	800c638 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c56a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c56e:	2b08      	cmp	r3, #8
 800c570:	d827      	bhi.n	800c5c2 <UART_SetConfig+0x49a>
 800c572:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <UART_SetConfig+0x450>)
 800c574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c578:	0800c59d 	.word	0x0800c59d
 800c57c:	0800c5a5 	.word	0x0800c5a5
 800c580:	0800c5ad 	.word	0x0800c5ad
 800c584:	0800c5c3 	.word	0x0800c5c3
 800c588:	0800c5b3 	.word	0x0800c5b3
 800c58c:	0800c5c3 	.word	0x0800c5c3
 800c590:	0800c5c3 	.word	0x0800c5c3
 800c594:	0800c5c3 	.word	0x0800c5c3
 800c598:	0800c5bb 	.word	0x0800c5bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c59c:	f7fd fe06 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800c5a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5a2:	e014      	b.n	800c5ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5a4:	f7fd fe18 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 800c5a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5aa:	e010      	b.n	800c5ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5ac:	4b4e      	ldr	r3, [pc, #312]	; (800c6e8 <UART_SetConfig+0x5c0>)
 800c5ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5b0:	e00d      	b.n	800c5ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5b2:	f7fd fd8d 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800c5b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c5b8:	e009      	b.n	800c5ce <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c5c0:	e005      	b.n	800c5ce <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c5cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 8090 	beq.w	800c6f6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5da:	4a44      	ldr	r2, [pc, #272]	; (800c6ec <UART_SetConfig+0x5c4>)
 800c5dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5e8:	005a      	lsls	r2, r3, #1
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	085b      	lsrs	r3, r3, #1
 800c5f0:	441a      	add	r2, r3
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	2b0f      	cmp	r3, #15
 800c600:	d916      	bls.n	800c630 <UART_SetConfig+0x508>
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c608:	d212      	bcs.n	800c630 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	f023 030f 	bic.w	r3, r3, #15
 800c612:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c614:	6a3b      	ldr	r3, [r7, #32]
 800c616:	085b      	lsrs	r3, r3, #1
 800c618:	b29b      	uxth	r3, r3
 800c61a:	f003 0307 	and.w	r3, r3, #7
 800c61e:	b29a      	uxth	r2, r3
 800c620:	8bfb      	ldrh	r3, [r7, #30]
 800c622:	4313      	orrs	r3, r2
 800c624:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	8bfa      	ldrh	r2, [r7, #30]
 800c62c:	60da      	str	r2, [r3, #12]
 800c62e:	e062      	b.n	800c6f6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800c636:	e05e      	b.n	800c6f6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c63c:	2b08      	cmp	r3, #8
 800c63e:	d828      	bhi.n	800c692 <UART_SetConfig+0x56a>
 800c640:	a201      	add	r2, pc, #4	; (adr r2, 800c648 <UART_SetConfig+0x520>)
 800c642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c646:	bf00      	nop
 800c648:	0800c66d 	.word	0x0800c66d
 800c64c:	0800c675 	.word	0x0800c675
 800c650:	0800c67d 	.word	0x0800c67d
 800c654:	0800c693 	.word	0x0800c693
 800c658:	0800c683 	.word	0x0800c683
 800c65c:	0800c693 	.word	0x0800c693
 800c660:	0800c693 	.word	0x0800c693
 800c664:	0800c693 	.word	0x0800c693
 800c668:	0800c68b 	.word	0x0800c68b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c66c:	f7fd fd9e 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800c670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c672:	e014      	b.n	800c69e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c674:	f7fd fdb0 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 800c678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c67a:	e010      	b.n	800c69e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c67c:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <UART_SetConfig+0x5c0>)
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c680:	e00d      	b.n	800c69e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c682:	f7fd fd25 	bl	800a0d0 <HAL_RCC_GetSysClockFreq>
 800c686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800c688:	e009      	b.n	800c69e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c68e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800c690:	e005      	b.n	800c69e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c692:	2300      	movs	r3, #0
 800c694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800c69c:	bf00      	nop
    }

    if (pclk != 0U)
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d028      	beq.n	800c6f6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a8:	4a10      	ldr	r2, [pc, #64]	; (800c6ec <UART_SetConfig+0x5c4>)
 800c6aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	085b      	lsrs	r3, r3, #1
 800c6bc:	441a      	add	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	2b0f      	cmp	r3, #15
 800c6cc:	d910      	bls.n	800c6f0 <UART_SetConfig+0x5c8>
 800c6ce:	6a3b      	ldr	r3, [r7, #32]
 800c6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6d4:	d20c      	bcs.n	800c6f0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c6d6:	6a3b      	ldr	r3, [r7, #32]
 800c6d8:	b29a      	uxth	r2, r3
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	60da      	str	r2, [r3, #12]
 800c6e0:	e009      	b.n	800c6f6 <UART_SetConfig+0x5ce>
 800c6e2:	bf00      	nop
 800c6e4:	40008000 	.word	0x40008000
 800c6e8:	00f42400 	.word	0x00f42400
 800c6ec:	08011c98 	.word	0x08011c98
      }
      else
      {
        ret = HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2201      	movs	r2, #1
 800c702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	2200      	movs	r2, #0
 800c70a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	2200      	movs	r2, #0
 800c710:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c712:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c716:	4618      	mov	r0, r3
 800c718:	3730      	adds	r7, #48	; 0x30
 800c71a:	46bd      	mov	sp, r7
 800c71c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72c:	f003 0301 	and.w	r3, r3, #1
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00a      	beq.n	800c74a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	685b      	ldr	r3, [r3, #4]
 800c73a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74e:	f003 0302 	and.w	r3, r3, #2
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00a      	beq.n	800c76c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	430a      	orrs	r2, r1
 800c76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	f003 0304 	and.w	r3, r3, #4
 800c774:	2b00      	cmp	r3, #0
 800c776:	d00a      	beq.n	800c78e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	430a      	orrs	r2, r1
 800c78c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c792:	f003 0308 	and.w	r3, r3, #8
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00a      	beq.n	800c7b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	430a      	orrs	r2, r1
 800c7ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b4:	f003 0310 	and.w	r3, r3, #16
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00a      	beq.n	800c7d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7d6:	f003 0320 	and.w	r3, r3, #32
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	430a      	orrs	r2, r1
 800c7f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01a      	beq.n	800c836 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	685b      	ldr	r3, [r3, #4]
 800c806:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	430a      	orrs	r2, r1
 800c814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c81e:	d10a      	bne.n	800c836 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	430a      	orrs	r2, r1
 800c834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00a      	beq.n	800c858 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	605a      	str	r2, [r3, #4]
  }
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c862:	4770      	bx	lr

0800c864 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b086      	sub	sp, #24
 800c868:	af02      	add	r7, sp, #8
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c874:	f7f8 fecc 	bl	8005610 <HAL_GetTick>
 800c878:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0308 	and.w	r3, r3, #8
 800c884:	2b08      	cmp	r3, #8
 800c886:	d10e      	bne.n	800c8a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c888:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f82f 	bl	800c8fa <UART_WaitOnFlagUntilTimeout>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d001      	beq.n	800c8a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	e025      	b.n	800c8f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b04      	cmp	r3, #4
 800c8b2:	d10e      	bne.n	800c8d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f819 	bl	800c8fa <UART_WaitOnFlagUntilTimeout>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e00f      	b.n	800c8f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b09c      	sub	sp, #112	; 0x70
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	603b      	str	r3, [r7, #0]
 800c906:	4613      	mov	r3, r2
 800c908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c90a:	e0a9      	b.n	800ca60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	f000 80a5 	beq.w	800ca60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c916:	f7f8 fe7b 	bl	8005610 <HAL_GetTick>
 800c91a:	4602      	mov	r2, r0
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c922:	429a      	cmp	r2, r3
 800c924:	d302      	bcc.n	800c92c <UART_WaitOnFlagUntilTimeout+0x32>
 800c926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d140      	bne.n	800c9ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c934:	e853 3f00 	ldrex	r3, [r3]
 800c938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c940:	667b      	str	r3, [r7, #100]	; 0x64
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	461a      	mov	r2, r3
 800c948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c94c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c94e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c952:	e841 2300 	strex	r3, r2, [r1]
 800c956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1e6      	bne.n	800c92c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3308      	adds	r3, #8
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c968:	e853 3f00 	ldrex	r3, [r3]
 800c96c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	f023 0301 	bic.w	r3, r3, #1
 800c974:	663b      	str	r3, [r7, #96]	; 0x60
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3308      	adds	r3, #8
 800c97c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c97e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c986:	e841 2300 	strex	r3, r2, [r1]
 800c98a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c98c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1e5      	bne.n	800c95e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2220      	movs	r2, #32
 800c996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2220      	movs	r2, #32
 800c99e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e069      	b.n	800ca82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0304 	and.w	r3, r3, #4
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d051      	beq.n	800ca60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c9c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9ca:	d149      	bne.n	800ca60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9de:	e853 3f00 	ldrex	r3, [r3]
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c9ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9fc:	e841 2300 	strex	r3, r2, [r1]
 800ca00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ca02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e6      	bne.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	e853 3f00 	ldrex	r3, [r3]
 800ca16:	613b      	str	r3, [r7, #16]
   return(result);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f023 0301 	bic.w	r3, r3, #1
 800ca1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	3308      	adds	r3, #8
 800ca26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ca28:	623a      	str	r2, [r7, #32]
 800ca2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2c:	69f9      	ldr	r1, [r7, #28]
 800ca2e:	6a3a      	ldr	r2, [r7, #32]
 800ca30:	e841 2300 	strex	r3, r2, [r1]
 800ca34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e5      	bne.n	800ca08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2220      	movs	r2, #32
 800ca40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2220      	movs	r2, #32
 800ca48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2220      	movs	r2, #32
 800ca50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e010      	b.n	800ca82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	69da      	ldr	r2, [r3, #28]
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	4013      	ands	r3, r2
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	bf0c      	ite	eq
 800ca70:	2301      	moveq	r3, #1
 800ca72:	2300      	movne	r3, #0
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	461a      	mov	r2, r3
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	f43f af46 	beq.w	800c90c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3770      	adds	r7, #112	; 0x70
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b095      	sub	sp, #84	; 0x54
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9a:	e853 3f00 	ldrex	r3, [r3]
 800ca9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800caa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	461a      	mov	r2, r3
 800caae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cab0:	643b      	str	r3, [r7, #64]	; 0x40
 800cab2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e6      	bne.n	800ca92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3308      	adds	r3, #8
 800caca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	6a3b      	ldr	r3, [r7, #32]
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cada:	f023 0301 	bic.w	r3, r3, #1
 800cade:	64bb      	str	r3, [r7, #72]	; 0x48
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3308      	adds	r3, #8
 800cae6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cae8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800caea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caf0:	e841 2300 	strex	r3, r2, [r1]
 800caf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1e3      	bne.n	800cac4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d118      	bne.n	800cb36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f023 0310 	bic.w	r3, r3, #16
 800cb18:	647b      	str	r3, [r7, #68]	; 0x44
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb22:	61bb      	str	r3, [r7, #24]
 800cb24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb26:	6979      	ldr	r1, [r7, #20]
 800cb28:	69ba      	ldr	r2, [r7, #24]
 800cb2a:	e841 2300 	strex	r3, r2, [r1]
 800cb2e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1e6      	bne.n	800cb04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cb4a:	bf00      	nop
 800cb4c:	3754      	adds	r7, #84	; 0x54
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr

0800cb56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b084      	sub	sp, #16
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff fac1 	bl	800c0fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb7a:	bf00      	nop
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb9e:	61fb      	str	r3, [r7, #28]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	61bb      	str	r3, [r7, #24]
 800cbaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbac:	6979      	ldr	r1, [r7, #20]
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	e841 2300 	strex	r3, r2, [r1]
 800cbb4:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e6      	bne.n	800cb8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2220      	movs	r2, #32
 800cbc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff fa8c 	bl	800c0e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbd0:	bf00      	nop
 800cbd2:	3720      	adds	r7, #32
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}

0800cbd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d101      	bne.n	800cc2a <HAL_UARTEx_DisableFifoMode+0x16>
 800cc26:	2302      	movs	r3, #2
 800cc28:	e027      	b.n	800cc7a <HAL_UARTEx_DisableFifoMode+0x66>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2224      	movs	r2, #36	; 0x24
 800cc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	681a      	ldr	r2, [r3, #0]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f022 0201 	bic.w	r2, r2, #1
 800cc50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2220      	movs	r2, #32
 800cc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	d101      	bne.n	800cc9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc9a:	2302      	movs	r3, #2
 800cc9c:	e02d      	b.n	800ccfa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	2224      	movs	r2, #36	; 0x24
 800ccaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f022 0201 	bic.w	r2, r2, #1
 800ccc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	683a      	ldr	r2, [r7, #0]
 800ccd6:	430a      	orrs	r2, r1
 800ccd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f000 f850 	bl	800cd80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}

0800cd02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
 800cd0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d101      	bne.n	800cd1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd16:	2302      	movs	r3, #2
 800cd18:	e02d      	b.n	800cd76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2201      	movs	r2, #1
 800cd1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2224      	movs	r2, #36	; 0x24
 800cd26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f022 0201 	bic.w	r2, r2, #1
 800cd40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	683a      	ldr	r2, [r7, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f812 	bl	800cd80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2220      	movs	r2, #32
 800cd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd74:	2300      	movs	r3, #0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3710      	adds	r7, #16
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
	...

0800cd80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b085      	sub	sp, #20
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d108      	bne.n	800cda2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cda0:	e031      	b.n	800ce06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cda2:	2308      	movs	r3, #8
 800cda4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cda6:	2308      	movs	r3, #8
 800cda8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	689b      	ldr	r3, [r3, #8]
 800cdb0:	0e5b      	lsrs	r3, r3, #25
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	f003 0307 	and.w	r3, r3, #7
 800cdb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	0f5b      	lsrs	r3, r3, #29
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f003 0307 	and.w	r3, r3, #7
 800cdc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	7b3a      	ldrb	r2, [r7, #12]
 800cdce:	4911      	ldr	r1, [pc, #68]	; (800ce14 <UARTEx_SetNbDataToProcess+0x94>)
 800cdd0:	5c8a      	ldrb	r2, [r1, r2]
 800cdd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cdd6:	7b3a      	ldrb	r2, [r7, #12]
 800cdd8:	490f      	ldr	r1, [pc, #60]	; (800ce18 <UARTEx_SetNbDataToProcess+0x98>)
 800cdda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cddc:	fb93 f3f2 	sdiv	r3, r3, r2
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	7b7a      	ldrb	r2, [r7, #13]
 800cdec:	4909      	ldr	r1, [pc, #36]	; (800ce14 <UARTEx_SetNbDataToProcess+0x94>)
 800cdee:	5c8a      	ldrb	r2, [r1, r2]
 800cdf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdf4:	7b7a      	ldrb	r2, [r7, #13]
 800cdf6:	4908      	ldr	r1, [pc, #32]	; (800ce18 <UARTEx_SetNbDataToProcess+0x98>)
 800cdf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdfe:	b29a      	uxth	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce06:	bf00      	nop
 800ce08:	3714      	adds	r7, #20
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	08011cb0 	.word	0x08011cb0
 800ce18:	08011cb8 	.word	0x08011cb8

0800ce1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ce2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ce30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3714      	adds	r7, #20
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ce52:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ce56:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	43db      	mvns	r3, r3
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	4013      	ands	r3, r2
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ce80:	b084      	sub	sp, #16
 800ce82:	b480      	push	{r7}
 800ce84:	b083      	sub	sp, #12
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	f107 0014 	add.w	r0, r7, #20
 800ce8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2200      	movs	r2, #0
 800cea6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2200      	movs	r2, #0
 800ceae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	b004      	add	sp, #16
 800cec0:	4770      	bx	lr
	...

0800cec4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b09d      	sub	sp, #116	; 0x74
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800cee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ceea:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	78db      	ldrb	r3, [r3, #3]
 800cef2:	2b03      	cmp	r3, #3
 800cef4:	d81f      	bhi.n	800cf36 <USB_ActivateEndpoint+0x72>
 800cef6:	a201      	add	r2, pc, #4	; (adr r2, 800cefc <USB_ActivateEndpoint+0x38>)
 800cef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefc:	0800cf0d 	.word	0x0800cf0d
 800cf00:	0800cf29 	.word	0x0800cf29
 800cf04:	0800cf3f 	.word	0x0800cf3f
 800cf08:	0800cf1b 	.word	0x0800cf1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cf0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cf18:	e012      	b.n	800cf40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cf1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf1e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800cf22:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cf26:	e00b      	b.n	800cf40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cf28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf30:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800cf34:	e004      	b.n	800cf40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cf36:	2301      	movs	r3, #1
 800cf38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800cf3c:	e000      	b.n	800cf40 <USB_ActivateEndpoint+0x7c>
      break;
 800cf3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	441a      	add	r2, r3
 800cf4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cf4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	881b      	ldrh	r3, [r3, #0]
 800cf6e:	b29b      	uxth	r3, r3
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf7a:	b21a      	sxth	r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	b21b      	sxth	r3, r3
 800cf82:	4313      	orrs	r3, r2
 800cf84:	b21b      	sxth	r3, r3
 800cf86:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	441a      	add	r2, r3
 800cf94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800cf98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	7b1b      	ldrb	r3, [r3, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f040 8149 	bne.w	800d248 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	785b      	ldrb	r3, [r3, #1]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 8084 	beq.w	800d0c8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	61bb      	str	r3, [r7, #24]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cfca:	b29b      	uxth	r3, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	61bb      	str	r3, [r7, #24]
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	00da      	lsls	r2, r3, #3
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	4413      	add	r3, r2
 800cfde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	88db      	ldrh	r3, [r3, #6]
 800cfe8:	085b      	lsrs	r3, r3, #1
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	005b      	lsls	r3, r3, #1
 800cfee:	b29a      	uxth	r2, r3
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	881b      	ldrh	r3, [r3, #0]
 800d000:	827b      	strh	r3, [r7, #18]
 800d002:	8a7b      	ldrh	r3, [r7, #18]
 800d004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d01b      	beq.n	800d044 <USB_ActivateEndpoint+0x180>
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d022:	823b      	strh	r3, [r7, #16]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	441a      	add	r2, r3
 800d02e:	8a3b      	ldrh	r3, [r7, #16]
 800d030:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d034:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d03c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d040:	b29b      	uxth	r3, r3
 800d042:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d044:	683b      	ldr	r3, [r7, #0]
 800d046:	78db      	ldrb	r3, [r3, #3]
 800d048:	2b01      	cmp	r3, #1
 800d04a:	d020      	beq.n	800d08e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	781b      	ldrb	r3, [r3, #0]
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d05e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d062:	81bb      	strh	r3, [r7, #12]
 800d064:	89bb      	ldrh	r3, [r7, #12]
 800d066:	f083 0320 	eor.w	r3, r3, #32
 800d06a:	81bb      	strh	r3, [r7, #12]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	441a      	add	r2, r3
 800d076:	89bb      	ldrh	r3, [r7, #12]
 800d078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d07c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d080:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d088:	b29b      	uxth	r3, r3
 800d08a:	8013      	strh	r3, [r2, #0]
 800d08c:	e2a6      	b.n	800d5dc <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d08e:	687a      	ldr	r2, [r7, #4]
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	4413      	add	r3, r2
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0a4:	81fb      	strh	r3, [r7, #14]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	781b      	ldrb	r3, [r3, #0]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	441a      	add	r2, r3
 800d0b0:	89fb      	ldrh	r3, [r7, #14]
 800d0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	8013      	strh	r3, [r2, #0]
 800d0c6:	e289      	b.n	800d5dc <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	633b      	str	r3, [r7, #48]	; 0x30
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	4413      	add	r3, r2
 800d0da:	633b      	str	r3, [r7, #48]	; 0x30
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	00da      	lsls	r2, r3, #3
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e4:	4413      	add	r3, r2
 800d0e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	88db      	ldrh	r3, [r3, #6]
 800d0f0:	085b      	lsrs	r3, r3, #1
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	005b      	lsls	r3, r3, #1
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d106:	b29b      	uxth	r3, r3
 800d108:	461a      	mov	r2, r3
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	4413      	add	r3, r2
 800d10e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	00da      	lsls	r2, r3, #3
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	4413      	add	r3, r2
 800d11a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d11e:	627b      	str	r3, [r7, #36]	; 0x24
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	2b3e      	cmp	r3, #62	; 0x3e
 800d126:	d918      	bls.n	800d15a <USB_ActivateEndpoint+0x296>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	095b      	lsrs	r3, r3, #5
 800d12e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	691b      	ldr	r3, [r3, #16]
 800d134:	f003 031f 	and.w	r3, r3, #31
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d102      	bne.n	800d142 <USB_ActivateEndpoint+0x27e>
 800d13c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d13e:	3b01      	subs	r3, #1
 800d140:	66bb      	str	r3, [r7, #104]	; 0x68
 800d142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d144:	b29b      	uxth	r3, r3
 800d146:	029b      	lsls	r3, r3, #10
 800d148:	b29b      	uxth	r3, r3
 800d14a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d14e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d152:	b29a      	uxth	r2, r3
 800d154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d156:	801a      	strh	r2, [r3, #0]
 800d158:	e029      	b.n	800d1ae <USB_ActivateEndpoint+0x2ea>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d112      	bne.n	800d188 <USB_ActivateEndpoint+0x2c4>
 800d162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	b29b      	uxth	r3, r3
 800d168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d16c:	b29a      	uxth	r2, r3
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	801a      	strh	r2, [r3, #0]
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	b29b      	uxth	r3, r3
 800d178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d180:	b29a      	uxth	r2, r3
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	801a      	strh	r2, [r3, #0]
 800d186:	e012      	b.n	800d1ae <USB_ActivateEndpoint+0x2ea>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	085b      	lsrs	r3, r3, #1
 800d18e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	f003 0301 	and.w	r3, r3, #1
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d002      	beq.n	800d1a2 <USB_ActivateEndpoint+0x2de>
 800d19c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d19e:	3301      	adds	r3, #1
 800d1a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	029b      	lsls	r3, r3, #10
 800d1a8:	b29a      	uxth	r2, r3
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	847b      	strh	r3, [r7, #34]	; 0x22
 800d1bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d01b      	beq.n	800d1fe <USB_ActivateEndpoint+0x33a>
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	4413      	add	r3, r2
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1dc:	843b      	strh	r3, [r7, #32]
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	441a      	add	r2, r3
 800d1e8:	8c3b      	ldrh	r3, [r7, #32]
 800d1ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	881b      	ldrh	r3, [r3, #0]
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d214:	83fb      	strh	r3, [r7, #30]
 800d216:	8bfb      	ldrh	r3, [r7, #30]
 800d218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d21c:	83fb      	strh	r3, [r7, #30]
 800d21e:	8bfb      	ldrh	r3, [r7, #30]
 800d220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d224:	83fb      	strh	r3, [r7, #30]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	441a      	add	r2, r3
 800d230:	8bfb      	ldrh	r3, [r7, #30]
 800d232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d23a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d242:	b29b      	uxth	r3, r3
 800d244:	8013      	strh	r3, [r2, #0]
 800d246:	e1c9      	b.n	800d5dc <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	78db      	ldrb	r3, [r3, #3]
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d11e      	bne.n	800d28e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	4413      	add	r3, r2
 800d25a:	881b      	ldrh	r3, [r3, #0]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d266:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	009b      	lsls	r3, r3, #2
 800d272:	441a      	add	r2, r3
 800d274:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800d278:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d27c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d280:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800d284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d288:	b29b      	uxth	r3, r3
 800d28a:	8013      	strh	r3, [r2, #0]
 800d28c:	e01d      	b.n	800d2ca <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d28e:	687a      	ldr	r2, [r7, #4]
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	009b      	lsls	r3, r3, #2
 800d296:	4413      	add	r3, r2
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800d2a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	441a      	add	r2, r3
 800d2b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800d2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	461a      	mov	r2, r3
 800d2d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2da:	4413      	add	r3, r2
 800d2dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	00da      	lsls	r2, r3, #3
 800d2e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d2ec:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	891b      	ldrh	r3, [r3, #8]
 800d2f2:	085b      	lsrs	r3, r3, #1
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	005b      	lsls	r3, r3, #1
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	657b      	str	r3, [r7, #84]	; 0x54
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d308:	b29b      	uxth	r3, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d30e:	4413      	add	r3, r2
 800d310:	657b      	str	r3, [r7, #84]	; 0x54
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	00da      	lsls	r2, r3, #3
 800d318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d31a:	4413      	add	r3, r2
 800d31c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800d320:	653b      	str	r3, [r7, #80]	; 0x50
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	895b      	ldrh	r3, [r3, #10]
 800d326:	085b      	lsrs	r3, r3, #1
 800d328:	b29b      	uxth	r3, r3
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d330:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	785b      	ldrb	r3, [r3, #1]
 800d336:	2b00      	cmp	r3, #0
 800d338:	f040 8093 	bne.w	800d462 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d33c:	687a      	ldr	r2, [r7, #4]
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d34c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d01b      	beq.n	800d390 <USB_ActivateEndpoint+0x4cc>
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	881b      	ldrh	r3, [r3, #0]
 800d364:	b29b      	uxth	r3, r3
 800d366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d36a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d36e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	441a      	add	r2, r3
 800d37a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d37c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	881b      	ldrh	r3, [r3, #0]
 800d39c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d39e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d3a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01b      	beq.n	800d3e0 <USB_ActivateEndpoint+0x51c>
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3be:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	441a      	add	r2, r3
 800d3ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d3cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3dc:	b29b      	uxth	r3, r3
 800d3de:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d3e0:	687a      	ldr	r2, [r7, #4]
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	881b      	ldrh	r3, [r3, #0]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3f6:	873b      	strh	r3, [r7, #56]	; 0x38
 800d3f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d3fe:	873b      	strh	r3, [r7, #56]	; 0x38
 800d400:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d402:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d406:	873b      	strh	r3, [r7, #56]	; 0x38
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	441a      	add	r2, r3
 800d412:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d41c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d424:	b29b      	uxth	r3, r3
 800d426:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	881b      	ldrh	r3, [r3, #0]
 800d434:	b29b      	uxth	r3, r3
 800d436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d43a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d43e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	441a      	add	r2, r3
 800d44a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d44c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	8013      	strh	r3, [r2, #0]
 800d460:	e0bc      	b.n	800d5dc <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	009b      	lsls	r3, r3, #2
 800d46a:	4413      	add	r3, r2
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800d472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d01d      	beq.n	800d4ba <USB_ActivateEndpoint+0x5f6>
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	009b      	lsls	r3, r3, #2
 800d486:	4413      	add	r3, r2
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d494:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	441a      	add	r2, r3
 800d4a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d4a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	009b      	lsls	r3, r3, #2
 800d4c2:	4413      	add	r3, r2
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800d4ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800d4ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d01d      	beq.n	800d512 <USB_ActivateEndpoint+0x64e>
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4413      	add	r3, r2
 800d4e0:	881b      	ldrh	r3, [r3, #0]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	441a      	add	r2, r3
 800d4fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800d4fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d502:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d50a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d50e:	b29b      	uxth	r3, r3
 800d510:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	78db      	ldrb	r3, [r3, #3]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d024      	beq.n	800d564 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	b29b      	uxth	r3, r3
 800d528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d52c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d530:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d534:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d538:	f083 0320 	eor.w	r3, r3, #32
 800d53c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d540:	687a      	ldr	r2, [r7, #4]
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	441a      	add	r2, r3
 800d54a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d54e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d55e:	b29b      	uxth	r3, r3
 800d560:	8013      	strh	r3, [r2, #0]
 800d562:	e01d      	b.n	800d5a0 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	881b      	ldrh	r3, [r3, #0]
 800d570:	b29b      	uxth	r3, r3
 800d572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d57a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	441a      	add	r2, r3
 800d588:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d58c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	441a      	add	r2, r3
 800d5c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d5c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d5dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3774      	adds	r7, #116	; 0x74
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b08d      	sub	sp, #52	; 0x34
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	7b1b      	ldrb	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f040 808e 	bne.w	800d71c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	785b      	ldrb	r3, [r3, #1]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d044      	beq.n	800d692 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4413      	add	r3, r2
 800d612:	881b      	ldrh	r3, [r3, #0]
 800d614:	81bb      	strh	r3, [r7, #12]
 800d616:	89bb      	ldrh	r3, [r7, #12]
 800d618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d01b      	beq.n	800d658 <USB_DeactivateEndpoint+0x6c>
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	4413      	add	r3, r2
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d636:	817b      	strh	r3, [r7, #10]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	441a      	add	r2, r3
 800d642:	897b      	ldrh	r3, [r7, #10]
 800d644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d64c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d650:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d654:	b29b      	uxth	r3, r3
 800d656:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	b29b      	uxth	r3, r3
 800d666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d66a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d66e:	813b      	strh	r3, [r7, #8]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	441a      	add	r2, r3
 800d67a:	893b      	ldrh	r3, [r7, #8]
 800d67c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d680:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d684:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	8013      	strh	r3, [r2, #0]
 800d690:	e192      	b.n	800d9b8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	827b      	strh	r3, [r7, #18]
 800d6a0:	8a7b      	ldrh	r3, [r7, #18]
 800d6a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d01b      	beq.n	800d6e2 <USB_DeactivateEndpoint+0xf6>
 800d6aa:	687a      	ldr	r2, [r7, #4]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	4413      	add	r3, r2
 800d6b4:	881b      	ldrh	r3, [r3, #0]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6c0:	823b      	strh	r3, [r7, #16]
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	441a      	add	r2, r3
 800d6cc:	8a3b      	ldrh	r3, [r7, #16]
 800d6ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d6d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d6d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d6da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	4413      	add	r3, r2
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d6f8:	81fb      	strh	r3, [r7, #14]
 800d6fa:	687a      	ldr	r2, [r7, #4]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	441a      	add	r2, r3
 800d704:	89fb      	ldrh	r3, [r7, #14]
 800d706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d70a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d70e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d716:	b29b      	uxth	r3, r3
 800d718:	8013      	strh	r3, [r2, #0]
 800d71a:	e14d      	b.n	800d9b8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	785b      	ldrb	r3, [r3, #1]
 800d720:	2b00      	cmp	r3, #0
 800d722:	f040 80a5 	bne.w	800d870 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	843b      	strh	r3, [r7, #32]
 800d734:	8c3b      	ldrh	r3, [r7, #32]
 800d736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d01b      	beq.n	800d776 <USB_DeactivateEndpoint+0x18a>
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4413      	add	r3, r2
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d754:	83fb      	strh	r3, [r7, #30]
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	441a      	add	r2, r3
 800d760:	8bfb      	ldrh	r3, [r7, #30]
 800d762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d76a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d772:	b29b      	uxth	r3, r3
 800d774:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	83bb      	strh	r3, [r7, #28]
 800d784:	8bbb      	ldrh	r3, [r7, #28]
 800d786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01b      	beq.n	800d7c6 <USB_DeactivateEndpoint+0x1da>
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4413      	add	r3, r2
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7a4:	837b      	strh	r3, [r7, #26]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	009b      	lsls	r3, r3, #2
 800d7ae:	441a      	add	r2, r3
 800d7b0:	8b7b      	ldrh	r3, [r7, #26]
 800d7b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7c2:	b29b      	uxth	r3, r3
 800d7c4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7dc:	833b      	strh	r3, [r7, #24]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	441a      	add	r2, r3
 800d7e8:	8b3b      	ldrh	r3, [r7, #24]
 800d7ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d7ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d7f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d7f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4413      	add	r3, r2
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d814:	82fb      	strh	r3, [r7, #22]
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	441a      	add	r2, r3
 800d820:	8afb      	ldrh	r3, [r7, #22]
 800d822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d82a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d832:	b29b      	uxth	r3, r3
 800d834:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	b29b      	uxth	r3, r3
 800d844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d84c:	82bb      	strh	r3, [r7, #20]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	441a      	add	r2, r3
 800d858:	8abb      	ldrh	r3, [r7, #20]
 800d85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	8013      	strh	r3, [r2, #0]
 800d86e:	e0a3      	b.n	800d9b8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d87e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d884:	2b00      	cmp	r3, #0
 800d886:	d01b      	beq.n	800d8c0 <USB_DeactivateEndpoint+0x2d4>
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	4413      	add	r3, r2
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	b29b      	uxth	r3, r3
 800d896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d89e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	441a      	add	r2, r3
 800d8aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d8ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d8b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d8b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d8b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	881b      	ldrh	r3, [r3, #0]
 800d8cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d8ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d8d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d01b      	beq.n	800d910 <USB_DeactivateEndpoint+0x324>
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d8ee:	853b      	strh	r3, [r7, #40]	; 0x28
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	441a      	add	r2, r3
 800d8fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d8fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d900:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d908:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	881b      	ldrh	r3, [r3, #0]
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d926:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	009b      	lsls	r3, r3, #2
 800d930:	441a      	add	r2, r3
 800d932:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d93c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d944:	b29b      	uxth	r3, r3
 800d946:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	781b      	ldrb	r3, [r3, #0]
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	881b      	ldrh	r3, [r3, #0]
 800d954:	b29b      	uxth	r3, r3
 800d956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d95e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	441a      	add	r2, r3
 800d96a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d96c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	4413      	add	r3, r2
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d996:	847b      	strh	r3, [r7, #34]	; 0x22
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	441a      	add	r2, r3
 800d9a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d9a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d9b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3734      	adds	r7, #52	; 0x34
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr

0800d9c6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d9c6:	b580      	push	{r7, lr}
 800d9c8:	b0c2      	sub	sp, #264	; 0x108
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d9d4:	6018      	str	r0, [r3, #0]
 800d9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9de:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	785b      	ldrb	r3, [r3, #1]
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	f040 867b 	bne.w	800e6e8 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	699a      	ldr	r2, [r3, #24]
 800d9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	691b      	ldr	r3, [r3, #16]
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d908      	bls.n	800da20 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800da0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	691b      	ldr	r3, [r3, #16]
 800da1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800da1e:	e007      	b.n	800da30 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800da20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800da30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	7b1b      	ldrb	r3, [r3, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d13a      	bne.n	800dab6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800da40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	6959      	ldr	r1, [r3, #20]
 800da4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	88da      	ldrh	r2, [r3, #6]
 800da58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800da62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800da66:	6800      	ldr	r0, [r0, #0]
 800da68:	f001 fc1d 	bl	800f2a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800da6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	613b      	str	r3, [r7, #16]
 800da78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da86:	b29b      	uxth	r3, r3
 800da88:	461a      	mov	r2, r3
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	4413      	add	r3, r2
 800da8e:	613b      	str	r3, [r7, #16]
 800da90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	00da      	lsls	r2, r3, #3
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	4413      	add	r3, r2
 800daa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800daa6:	60fb      	str	r3, [r7, #12]
 800daa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daac:	b29a      	uxth	r2, r3
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	801a      	strh	r2, [r3, #0]
 800dab2:	f000 bde3 	b.w	800e67c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	78db      	ldrb	r3, [r3, #3]
 800dac2:	2b02      	cmp	r3, #2
 800dac4:	f040 843a 	bne.w	800e33c <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6a1a      	ldr	r2, [r3, #32]
 800dad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	f240 83b7 	bls.w	800e254 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	781b      	ldrb	r3, [r3, #0]
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	881b      	ldrh	r3, [r3, #0]
 800db02:	b29b      	uxth	r3, r3
 800db04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800db10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db18:	681a      	ldr	r2, [r3, #0]
 800db1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	781b      	ldrb	r3, [r3, #0]
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	441a      	add	r2, r3
 800db2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800db2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800db3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db3e:	b29b      	uxth	r3, r3
 800db40:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800db42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6a1a      	ldr	r2, [r3, #32]
 800db4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800db52:	1ad2      	subs	r2, r2, r3
 800db54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800db60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	4413      	add	r3, r2
 800db7a:	881b      	ldrh	r3, [r3, #0]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 81b3 	beq.w	800deee <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800db88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	633b      	str	r3, [r7, #48]	; 0x30
 800db94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800db98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	785b      	ldrb	r3, [r3, #1]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d16d      	bne.n	800dc80 <USB_EPStartXfer+0x2ba>
 800dba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	4413      	add	r3, r2
 800dbc6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dbc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dbcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	00da      	lsls	r2, r3, #3
 800dbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd8:	4413      	add	r3, r2
 800dbda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dbde:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbe4:	2b3e      	cmp	r3, #62	; 0x3e
 800dbe6:	d91c      	bls.n	800dc22 <USB_EPStartXfer+0x25c>
 800dbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbec:	095b      	lsrs	r3, r3, #5
 800dbee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dbf6:	f003 031f 	and.w	r3, r3, #31
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d104      	bne.n	800dc08 <USB_EPStartXfer+0x242>
 800dbfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dc02:	3b01      	subs	r3, #1
 800dc04:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dc08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	029b      	lsls	r3, r3, #10
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc1a:	b29a      	uxth	r2, r3
 800dc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1e:	801a      	strh	r2, [r3, #0]
 800dc20:	e053      	b.n	800dcca <USB_EPStartXfer+0x304>
 800dc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d112      	bne.n	800dc50 <USB_EPStartXfer+0x28a>
 800dc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc2c:	881b      	ldrh	r3, [r3, #0]
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc38:	801a      	strh	r2, [r3, #0]
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	881b      	ldrh	r3, [r3, #0]
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	801a      	strh	r2, [r3, #0]
 800dc4e:	e03c      	b.n	800dcca <USB_EPStartXfer+0x304>
 800dc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc54:	085b      	lsrs	r3, r3, #1
 800dc56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dc5e:	f003 0301 	and.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d004      	beq.n	800dc70 <USB_EPStartXfer+0x2aa>
 800dc66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800dc70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800dc74:	b29b      	uxth	r3, r3
 800dc76:	029b      	lsls	r3, r3, #10
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc7c:	801a      	strh	r2, [r3, #0]
 800dc7e:	e024      	b.n	800dcca <USB_EPStartXfer+0x304>
 800dc80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	785b      	ldrb	r3, [r3, #1]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d11c      	bne.n	800dcca <USB_EPStartXfer+0x304>
 800dc90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dc94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	461a      	mov	r2, r3
 800dca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca4:	4413      	add	r3, r2
 800dca6:	633b      	str	r3, [r7, #48]	; 0x30
 800dca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	00da      	lsls	r2, r3, #3
 800dcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb8:	4413      	add	r3, r2
 800dcba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dcbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800dcca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	895b      	ldrh	r3, [r3, #10]
 800dcd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dcda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dcde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	6959      	ldr	r1, [r3, #20]
 800dce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dcf0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dcf4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dcf8:	6800      	ldr	r0, [r0, #0]
 800dcfa:	f001 fad4 	bl	800f2a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800dcfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	695a      	ldr	r2, [r3, #20]
 800dd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd0e:	441a      	add	r2, r3
 800dd10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800dd1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6a1a      	ldr	r2, [r3, #32]
 800dd28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	691b      	ldr	r3, [r3, #16]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d90f      	bls.n	800dd58 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800dd38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	6a1a      	ldr	r2, [r3, #32]
 800dd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dd48:	1ad2      	subs	r2, r2, r3
 800dd4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	621a      	str	r2, [r3, #32]
 800dd56:	e00e      	b.n	800dd76 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800dd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6a1b      	ldr	r3, [r3, #32]
 800dd64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800dd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2200      	movs	r2, #0
 800dd74:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	785b      	ldrb	r3, [r3, #1]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d16d      	bne.n	800de62 <USB_EPStartXfer+0x49c>
 800dd86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	61bb      	str	r3, [r7, #24]
 800dd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dd96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	461a      	mov	r2, r3
 800dda4:	69bb      	ldr	r3, [r7, #24]
 800dda6:	4413      	add	r3, r2
 800dda8:	61bb      	str	r3, [r7, #24]
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	00da      	lsls	r2, r3, #3
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	4413      	add	r3, r2
 800ddbc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ddc0:	617b      	str	r3, [r7, #20]
 800ddc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddc6:	2b3e      	cmp	r3, #62	; 0x3e
 800ddc8:	d91c      	bls.n	800de04 <USB_EPStartXfer+0x43e>
 800ddca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddce:	095b      	lsrs	r3, r3, #5
 800ddd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ddd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ddd8:	f003 031f 	and.w	r3, r3, #31
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d104      	bne.n	800ddea <USB_EPStartXfer+0x424>
 800dde0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dde4:	3b01      	subs	r3, #1
 800dde6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ddea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ddee:	b29b      	uxth	r3, r3
 800ddf0:	029b      	lsls	r3, r3, #10
 800ddf2:	b29b      	uxth	r3, r3
 800ddf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	801a      	strh	r2, [r3, #0]
 800de02:	e059      	b.n	800deb8 <USB_EPStartXfer+0x4f2>
 800de04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d112      	bne.n	800de32 <USB_EPStartXfer+0x46c>
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	b29b      	uxth	r3, r3
 800de12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800de16:	b29a      	uxth	r2, r3
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	801a      	strh	r2, [r3, #0]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	881b      	ldrh	r3, [r3, #0]
 800de20:	b29b      	uxth	r3, r3
 800de22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	801a      	strh	r2, [r3, #0]
 800de30:	e042      	b.n	800deb8 <USB_EPStartXfer+0x4f2>
 800de32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de36:	085b      	lsrs	r3, r3, #1
 800de38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800de3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <USB_EPStartXfer+0x48c>
 800de48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de4c:	3301      	adds	r3, #1
 800de4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800de52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de56:	b29b      	uxth	r3, r3
 800de58:	029b      	lsls	r3, r3, #10
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	801a      	strh	r2, [r3, #0]
 800de60:	e02a      	b.n	800deb8 <USB_EPStartXfer+0x4f2>
 800de62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	785b      	ldrb	r3, [r3, #1]
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d122      	bne.n	800deb8 <USB_EPStartXfer+0x4f2>
 800de72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	623b      	str	r3, [r7, #32]
 800de7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	461a      	mov	r2, r3
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	4413      	add	r3, r2
 800de94:	623b      	str	r3, [r7, #32]
 800de96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	00da      	lsls	r2, r3, #3
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	4413      	add	r3, r2
 800dea8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800deac:	61fb      	str	r3, [r7, #28]
 800deae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	69fb      	ldr	r3, [r7, #28]
 800deb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800deb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800debc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	891b      	ldrh	r3, [r3, #8]
 800dec4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800decc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	6959      	ldr	r1, [r3, #20]
 800ded4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ded8:	b29b      	uxth	r3, r3
 800deda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800dede:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800dee2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800dee6:	6800      	ldr	r0, [r0, #0]
 800dee8:	f001 f9dd 	bl	800f2a6 <USB_WritePMA>
 800deec:	e3c6      	b.n	800e67c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800deee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800def2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	785b      	ldrb	r3, [r3, #1]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d16d      	bne.n	800dfda <USB_EPStartXfer+0x614>
 800defe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	64bb      	str	r3, [r7, #72]	; 0x48
 800df0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df18:	b29b      	uxth	r3, r3
 800df1a:	461a      	mov	r2, r3
 800df1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df1e:	4413      	add	r3, r2
 800df20:	64bb      	str	r3, [r7, #72]	; 0x48
 800df22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800df26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	00da      	lsls	r2, r3, #3
 800df30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df32:	4413      	add	r3, r2
 800df34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800df38:	647b      	str	r3, [r7, #68]	; 0x44
 800df3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df3e:	2b3e      	cmp	r3, #62	; 0x3e
 800df40:	d91c      	bls.n	800df7c <USB_EPStartXfer+0x5b6>
 800df42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df46:	095b      	lsrs	r3, r3, #5
 800df48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800df4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df50:	f003 031f 	and.w	r3, r3, #31
 800df54:	2b00      	cmp	r3, #0
 800df56:	d104      	bne.n	800df62 <USB_EPStartXfer+0x59c>
 800df58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800df5c:	3b01      	subs	r3, #1
 800df5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800df62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800df66:	b29b      	uxth	r3, r3
 800df68:	029b      	lsls	r3, r3, #10
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df74:	b29a      	uxth	r2, r3
 800df76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df78:	801a      	strh	r2, [r3, #0]
 800df7a:	e059      	b.n	800e030 <USB_EPStartXfer+0x66a>
 800df7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800df80:	2b00      	cmp	r3, #0
 800df82:	d112      	bne.n	800dfaa <USB_EPStartXfer+0x5e4>
 800df84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df86:	881b      	ldrh	r3, [r3, #0]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800df8e:	b29a      	uxth	r2, r3
 800df90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df92:	801a      	strh	r2, [r3, #0]
 800df94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	b29b      	uxth	r3, r3
 800df9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa6:	801a      	strh	r2, [r3, #0]
 800dfa8:	e042      	b.n	800e030 <USB_EPStartXfer+0x66a>
 800dfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfae:	085b      	lsrs	r3, r3, #1
 800dfb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d004      	beq.n	800dfca <USB_EPStartXfer+0x604>
 800dfc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dfca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	029b      	lsls	r3, r3, #10
 800dfd2:	b29a      	uxth	r2, r3
 800dfd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd6:	801a      	strh	r2, [r3, #0]
 800dfd8:	e02a      	b.n	800e030 <USB_EPStartXfer+0x66a>
 800dfda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	785b      	ldrb	r3, [r3, #1]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d122      	bne.n	800e030 <USB_EPStartXfer+0x66a>
 800dfea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dfee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	653b      	str	r3, [r7, #80]	; 0x50
 800dff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e004:	b29b      	uxth	r3, r3
 800e006:	461a      	mov	r2, r3
 800e008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e00a:	4413      	add	r3, r2
 800e00c:	653b      	str	r3, [r7, #80]	; 0x50
 800e00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	00da      	lsls	r2, r3, #3
 800e01c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e01e:	4413      	add	r3, r2
 800e020:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e024:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e02e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	891b      	ldrh	r3, [r3, #8]
 800e03c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	6959      	ldr	r1, [r3, #20]
 800e04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e050:	b29b      	uxth	r3, r3
 800e052:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e056:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e05a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e05e:	6800      	ldr	r0, [r0, #0]
 800e060:	f001 f921 	bl	800f2a6 <USB_WritePMA>
            ep->xfer_buff += len;
 800e064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	695a      	ldr	r2, [r3, #20]
 800e070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e074:	441a      	add	r2, r3
 800e076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e07a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6a1a      	ldr	r2, [r3, #32]
 800e08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d90f      	bls.n	800e0be <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800e09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	6a1a      	ldr	r2, [r3, #32]
 800e0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e0ae:	1ad2      	subs	r2, r2, r3
 800e0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	621a      	str	r2, [r3, #32]
 800e0bc:	e00e      	b.n	800e0dc <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800e0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800e0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2200      	movs	r2, #0
 800e0da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e0dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	643b      	str	r3, [r7, #64]	; 0x40
 800e0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	785b      	ldrb	r3, [r3, #1]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d16d      	bne.n	800e1d4 <USB_EPStartXfer+0x80e>
 800e0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	63bb      	str	r3, [r7, #56]	; 0x38
 800e104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e112:	b29b      	uxth	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e118:	4413      	add	r3, r2
 800e11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	00da      	lsls	r2, r3, #3
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	4413      	add	r3, r2
 800e12e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e132:	637b      	str	r3, [r7, #52]	; 0x34
 800e134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e138:	2b3e      	cmp	r3, #62	; 0x3e
 800e13a:	d91c      	bls.n	800e176 <USB_EPStartXfer+0x7b0>
 800e13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e140:	095b      	lsrs	r3, r3, #5
 800e142:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e14a:	f003 031f 	and.w	r3, r3, #31
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d104      	bne.n	800e15c <USB_EPStartXfer+0x796>
 800e152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e156:	3b01      	subs	r3, #1
 800e158:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e15c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e160:	b29b      	uxth	r3, r3
 800e162:	029b      	lsls	r3, r3, #10
 800e164:	b29b      	uxth	r3, r3
 800e166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e16a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e16e:	b29a      	uxth	r2, r3
 800e170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e172:	801a      	strh	r2, [r3, #0]
 800e174:	e053      	b.n	800e21e <USB_EPStartXfer+0x858>
 800e176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d112      	bne.n	800e1a4 <USB_EPStartXfer+0x7de>
 800e17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	b29b      	uxth	r3, r3
 800e184:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e188:	b29a      	uxth	r2, r3
 800e18a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e18c:	801a      	strh	r2, [r3, #0]
 800e18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	b29b      	uxth	r3, r3
 800e194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e19c:	b29a      	uxth	r2, r3
 800e19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1a0:	801a      	strh	r2, [r3, #0]
 800e1a2:	e03c      	b.n	800e21e <USB_EPStartXfer+0x858>
 800e1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1a8:	085b      	lsrs	r3, r3, #1
 800e1aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d004      	beq.n	800e1c4 <USB_EPStartXfer+0x7fe>
 800e1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1be:	3301      	adds	r3, #1
 800e1c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800e1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	029b      	lsls	r3, r3, #10
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d0:	801a      	strh	r2, [r3, #0]
 800e1d2:	e024      	b.n	800e21e <USB_EPStartXfer+0x858>
 800e1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	785b      	ldrb	r3, [r3, #1]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d11c      	bne.n	800e21e <USB_EPStartXfer+0x858>
 800e1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e1e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1f8:	4413      	add	r3, r2
 800e1fa:	643b      	str	r3, [r7, #64]	; 0x40
 800e1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	00da      	lsls	r2, r3, #3
 800e20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20c:	4413      	add	r3, r2
 800e20e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e218:	b29a      	uxth	r2, r3
 800e21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e21c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	895b      	ldrh	r3, [r3, #10]
 800e22a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e232:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	6959      	ldr	r1, [r3, #20]
 800e23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e23e:	b29b      	uxth	r3, r3
 800e240:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e244:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e248:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e24c:	6800      	ldr	r0, [r0, #0]
 800e24e:	f001 f82a 	bl	800f2a6 <USB_WritePMA>
 800e252:	e213      	b.n	800e67c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	6a1b      	ldr	r3, [r3, #32]
 800e260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e268:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	b29b      	uxth	r3, r3
 800e282:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800e286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e28a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800e28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e29c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	009b      	lsls	r3, r3, #2
 800e2a6:	441a      	add	r2, r3
 800e2a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800e2ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e2b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e2b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e2c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	461a      	mov	r2, r3
 800e2de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2e0:	4413      	add	r3, r2
 800e2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	00da      	lsls	r2, r3, #3
 800e2f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e2fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e300:	b29a      	uxth	r2, r3
 800e302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e304:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e30a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	891b      	ldrh	r3, [r3, #8]
 800e312:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6959      	ldr	r1, [r3, #20]
 800e322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e326:	b29b      	uxth	r3, r3
 800e328:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e32c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e330:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e334:	6800      	ldr	r0, [r0, #0]
 800e336:	f000 ffb6 	bl	800f2a6 <USB_WritePMA>
 800e33a:	e19f      	b.n	800e67c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6a1a      	ldr	r2, [r3, #32]
 800e348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e34c:	1ad2      	subs	r2, r2, r3
 800e34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	b29b      	uxth	r3, r3
 800e378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 80bc 	beq.w	800e4fa <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e386:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	673b      	str	r3, [r7, #112]	; 0x70
 800e38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	785b      	ldrb	r3, [r3, #1]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d16d      	bne.n	800e47a <USB_EPStartXfer+0xab4>
 800e39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3be:	4413      	add	r3, r2
 800e3c0:	66bb      	str	r3, [r7, #104]	; 0x68
 800e3c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e3c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	00da      	lsls	r2, r3, #3
 800e3d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e3d8:	667b      	str	r3, [r7, #100]	; 0x64
 800e3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3de:	2b3e      	cmp	r3, #62	; 0x3e
 800e3e0:	d91c      	bls.n	800e41c <USB_EPStartXfer+0xa56>
 800e3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3e6:	095b      	lsrs	r3, r3, #5
 800e3e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e3f0:	f003 031f 	and.w	r3, r3, #31
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d104      	bne.n	800e402 <USB_EPStartXfer+0xa3c>
 800e3f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e402:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e406:	b29b      	uxth	r3, r3
 800e408:	029b      	lsls	r3, r3, #10
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e414:	b29a      	uxth	r2, r3
 800e416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e418:	801a      	strh	r2, [r3, #0]
 800e41a:	e053      	b.n	800e4c4 <USB_EPStartXfer+0xafe>
 800e41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e420:	2b00      	cmp	r3, #0
 800e422:	d112      	bne.n	800e44a <USB_EPStartXfer+0xa84>
 800e424:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	b29b      	uxth	r3, r3
 800e42a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e42e:	b29a      	uxth	r2, r3
 800e430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e432:	801a      	strh	r2, [r3, #0]
 800e434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	b29b      	uxth	r3, r3
 800e43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e442:	b29a      	uxth	r2, r3
 800e444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e446:	801a      	strh	r2, [r3, #0]
 800e448:	e03c      	b.n	800e4c4 <USB_EPStartXfer+0xafe>
 800e44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e44e:	085b      	lsrs	r3, r3, #1
 800e450:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d004      	beq.n	800e46a <USB_EPStartXfer+0xaa4>
 800e460:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e464:	3301      	adds	r3, #1
 800e466:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e46a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e46e:	b29b      	uxth	r3, r3
 800e470:	029b      	lsls	r3, r3, #10
 800e472:	b29a      	uxth	r2, r3
 800e474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e476:	801a      	strh	r2, [r3, #0]
 800e478:	e024      	b.n	800e4c4 <USB_EPStartXfer+0xafe>
 800e47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e47e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	785b      	ldrb	r3, [r3, #1]
 800e486:	2b01      	cmp	r3, #1
 800e488:	d11c      	bne.n	800e4c4 <USB_EPStartXfer+0xafe>
 800e48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e48e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e498:	b29b      	uxth	r3, r3
 800e49a:	461a      	mov	r2, r3
 800e49c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e49e:	4413      	add	r3, r2
 800e4a0:	673b      	str	r3, [r7, #112]	; 0x70
 800e4a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	00da      	lsls	r2, r3, #3
 800e4b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e4b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	895b      	ldrh	r3, [r3, #10]
 800e4d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6959      	ldr	r1, [r3, #20]
 800e4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e4ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e4ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e4f2:	6800      	ldr	r0, [r0, #0]
 800e4f4:	f000 fed7 	bl	800f2a6 <USB_WritePMA>
 800e4f8:	e0c0      	b.n	800e67c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	785b      	ldrb	r3, [r3, #1]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d16d      	bne.n	800e5e6 <USB_EPStartXfer+0xc20>
 800e50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e51a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e524:	b29b      	uxth	r3, r3
 800e526:	461a      	mov	r2, r3
 800e528:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e52a:	4413      	add	r3, r2
 800e52c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	00da      	lsls	r2, r3, #3
 800e53c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e53e:	4413      	add	r3, r2
 800e540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e544:	67bb      	str	r3, [r7, #120]	; 0x78
 800e546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e54a:	2b3e      	cmp	r3, #62	; 0x3e
 800e54c:	d91c      	bls.n	800e588 <USB_EPStartXfer+0xbc2>
 800e54e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e552:	095b      	lsrs	r3, r3, #5
 800e554:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e55c:	f003 031f 	and.w	r3, r3, #31
 800e560:	2b00      	cmp	r3, #0
 800e562:	d104      	bne.n	800e56e <USB_EPStartXfer+0xba8>
 800e564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e568:	3b01      	subs	r3, #1
 800e56a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e56e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e572:	b29b      	uxth	r3, r3
 800e574:	029b      	lsls	r3, r3, #10
 800e576:	b29b      	uxth	r3, r3
 800e578:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e57c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e580:	b29a      	uxth	r2, r3
 800e582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e584:	801a      	strh	r2, [r3, #0]
 800e586:	e05f      	b.n	800e648 <USB_EPStartXfer+0xc82>
 800e588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d112      	bne.n	800e5b6 <USB_EPStartXfer+0xbf0>
 800e590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e592:	881b      	ldrh	r3, [r3, #0]
 800e594:	b29b      	uxth	r3, r3
 800e596:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e59e:	801a      	strh	r2, [r3, #0]
 800e5a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5a2:	881b      	ldrh	r3, [r3, #0]
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5ae:	b29a      	uxth	r2, r3
 800e5b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5b2:	801a      	strh	r2, [r3, #0]
 800e5b4:	e048      	b.n	800e648 <USB_EPStartXfer+0xc82>
 800e5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5ba:	085b      	lsrs	r3, r3, #1
 800e5bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e5c4:	f003 0301 	and.w	r3, r3, #1
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d004      	beq.n	800e5d6 <USB_EPStartXfer+0xc10>
 800e5cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5d0:	3301      	adds	r3, #1
 800e5d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	029b      	lsls	r3, r3, #10
 800e5de:	b29a      	uxth	r2, r3
 800e5e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5e2:	801a      	strh	r2, [r3, #0]
 800e5e4:	e030      	b.n	800e648 <USB_EPStartXfer+0xc82>
 800e5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	785b      	ldrb	r3, [r3, #1]
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d128      	bne.n	800e648 <USB_EPStartXfer+0xc82>
 800e5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e5fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e612:	b29b      	uxth	r3, r3
 800e614:	461a      	mov	r2, r3
 800e616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e61a:	4413      	add	r3, r2
 800e61c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	00da      	lsls	r2, r3, #3
 800e62e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e632:	4413      	add	r3, r2
 800e634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e640:	b29a      	uxth	r2, r3
 800e642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e646:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	891b      	ldrh	r3, [r3, #8]
 800e654:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6959      	ldr	r1, [r3, #20]
 800e664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e668:	b29b      	uxth	r3, r3
 800e66a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e66e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800e672:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800e676:	6800      	ldr	r0, [r0, #0]
 800e678:	f000 fe15 	bl	800f2a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e68a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	b29b      	uxth	r3, r3
 800e69a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6a2:	817b      	strh	r3, [r7, #10]
 800e6a4:	897b      	ldrh	r3, [r7, #10]
 800e6a6:	f083 0310 	eor.w	r3, r3, #16
 800e6aa:	817b      	strh	r3, [r7, #10]
 800e6ac:	897b      	ldrh	r3, [r7, #10]
 800e6ae:	f083 0320 	eor.w	r3, r3, #32
 800e6b2:	817b      	strh	r3, [r7, #10]
 800e6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	781b      	ldrb	r3, [r3, #0]
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	441a      	add	r2, r3
 800e6ce:	897b      	ldrh	r3, [r7, #10]
 800e6d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e6d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e6d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	8013      	strh	r3, [r2, #0]
 800e6e4:	f000 bc9f 	b.w	800f026 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	7b1b      	ldrb	r3, [r3, #12]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	f040 80ae 	bne.w	800e856 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e6fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e6fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	699a      	ldr	r2, [r3, #24]
 800e706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	429a      	cmp	r2, r3
 800e714:	d917      	bls.n	800e746 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800e716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800e726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	699a      	ldr	r2, [r3, #24]
 800e732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e736:	1ad2      	subs	r2, r2, r3
 800e738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e73c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	619a      	str	r2, [r3, #24]
 800e744:	e00e      	b.n	800e764 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800e746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e74a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800e756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2200      	movs	r2, #0
 800e762:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e780:	b29b      	uxth	r3, r3
 800e782:	461a      	mov	r2, r3
 800e784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e788:	4413      	add	r3, r2
 800e78a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e78e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	00da      	lsls	r2, r3, #3
 800e79c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e7a0:	4413      	add	r3, r2
 800e7a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e7a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7ae:	2b3e      	cmp	r3, #62	; 0x3e
 800e7b0:	d91d      	bls.n	800e7ee <USB_EPStartXfer+0xe28>
 800e7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7b6:	095b      	lsrs	r3, r3, #5
 800e7b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7c0:	f003 031f 	and.w	r3, r3, #31
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d104      	bne.n	800e7d2 <USB_EPStartXfer+0xe0c>
 800e7c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e7d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	029b      	lsls	r3, r3, #10
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e7ea:	801a      	strh	r2, [r3, #0]
 800e7ec:	e3e1      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
 800e7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d116      	bne.n	800e824 <USB_EPStartXfer+0xe5e>
 800e7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e802:	b29a      	uxth	r2, r3
 800e804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e808:	801a      	strh	r2, [r3, #0]
 800e80a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	b29b      	uxth	r3, r3
 800e812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e820:	801a      	strh	r2, [r3, #0]
 800e822:	e3c6      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
 800e824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e828:	085b      	lsrs	r3, r3, #1
 800e82a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e832:	f003 0301 	and.w	r3, r3, #1
 800e836:	2b00      	cmp	r3, #0
 800e838:	d004      	beq.n	800e844 <USB_EPStartXfer+0xe7e>
 800e83a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e83e:	3301      	adds	r3, #1
 800e840:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800e848:	b29b      	uxth	r3, r3
 800e84a:	029b      	lsls	r3, r3, #10
 800e84c:	b29a      	uxth	r2, r3
 800e84e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e852:	801a      	strh	r2, [r3, #0]
 800e854:	e3ad      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e85a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	78db      	ldrb	r3, [r3, #3]
 800e862:	2b02      	cmp	r3, #2
 800e864:	f040 8200 	bne.w	800ec68 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	785b      	ldrb	r3, [r3, #1]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f040 8091 	bne.w	800e99c <USB_EPStartXfer+0xfd6>
 800e87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e87e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e88c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e896:	b29b      	uxth	r3, r3
 800e898:	461a      	mov	r2, r3
 800e89a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e89e:	4413      	add	r3, r2
 800e8a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	00da      	lsls	r2, r3, #3
 800e8b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e8b6:	4413      	add	r3, r2
 800e8b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e8bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	691b      	ldr	r3, [r3, #16]
 800e8cc:	2b3e      	cmp	r3, #62	; 0x3e
 800e8ce:	d925      	bls.n	800e91c <USB_EPStartXfer+0xf56>
 800e8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	095b      	lsrs	r3, r3, #5
 800e8de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e8e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e8e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	f003 031f 	and.w	r3, r3, #31
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d104      	bne.n	800e900 <USB_EPStartXfer+0xf3a>
 800e8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e904:	b29b      	uxth	r3, r3
 800e906:	029b      	lsls	r3, r3, #10
 800e908:	b29b      	uxth	r3, r3
 800e90a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e90e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e912:	b29a      	uxth	r2, r3
 800e914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e918:	801a      	strh	r2, [r3, #0]
 800e91a:	e074      	b.n	800ea06 <USB_EPStartXfer+0x1040>
 800e91c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e920:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d116      	bne.n	800e95a <USB_EPStartXfer+0xf94>
 800e92c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e930:	881b      	ldrh	r3, [r3, #0]
 800e932:	b29b      	uxth	r3, r3
 800e934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e938:	b29a      	uxth	r2, r3
 800e93a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e93e:	801a      	strh	r2, [r3, #0]
 800e940:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	b29b      	uxth	r3, r3
 800e948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e94c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e950:	b29a      	uxth	r2, r3
 800e952:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	e055      	b.n	800ea06 <USB_EPStartXfer+0x1040>
 800e95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e95e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	085b      	lsrs	r3, r3, #1
 800e968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e96c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e970:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	691b      	ldr	r3, [r3, #16]
 800e978:	f003 0301 	and.w	r3, r3, #1
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d004      	beq.n	800e98a <USB_EPStartXfer+0xfc4>
 800e980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e984:	3301      	adds	r3, #1
 800e986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e98e:	b29b      	uxth	r3, r3
 800e990:	029b      	lsls	r3, r3, #10
 800e992:	b29a      	uxth	r2, r3
 800e994:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800e998:	801a      	strh	r2, [r3, #0]
 800e99a:	e034      	b.n	800ea06 <USB_EPStartXfer+0x1040>
 800e99c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d12c      	bne.n	800ea06 <USB_EPStartXfer+0x1040>
 800e9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9d0:	4413      	add	r3, r2
 800e9d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	00da      	lsls	r2, r3, #3
 800e9e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e9ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	691b      	ldr	r3, [r3, #16]
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ea04:	801a      	strh	r2, [r3, #0]
 800ea06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ea14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	785b      	ldrb	r3, [r3, #1]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f040 8091 	bne.w	800eb48 <USB_EPStartXfer+0x1182>
 800ea26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ea34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	461a      	mov	r2, r3
 800ea46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ea50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	00da      	lsls	r2, r3, #3
 800ea5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea62:	4413      	add	r3, r2
 800ea64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ea6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	691b      	ldr	r3, [r3, #16]
 800ea78:	2b3e      	cmp	r3, #62	; 0x3e
 800ea7a:	d925      	bls.n	800eac8 <USB_EPStartXfer+0x1102>
 800ea7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	691b      	ldr	r3, [r3, #16]
 800ea88:	095b      	lsrs	r3, r3, #5
 800ea8a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ea8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ea92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	f003 031f 	and.w	r3, r3, #31
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d104      	bne.n	800eaac <USB_EPStartXfer+0x10e6>
 800eaa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eaac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	029b      	lsls	r3, r3, #10
 800eab4:	b29b      	uxth	r3, r3
 800eab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eac4:	801a      	strh	r2, [r3, #0]
 800eac6:	e06d      	b.n	800eba4 <USB_EPStartXfer+0x11de>
 800eac8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eacc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d116      	bne.n	800eb06 <USB_EPStartXfer+0x1140>
 800ead8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eadc:	881b      	ldrh	r3, [r3, #0]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eaea:	801a      	strh	r2, [r3, #0]
 800eaec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	b29b      	uxth	r3, r3
 800eaf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eaf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eb02:	801a      	strh	r2, [r3, #0]
 800eb04:	e04e      	b.n	800eba4 <USB_EPStartXfer+0x11de>
 800eb06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	085b      	lsrs	r3, r3, #1
 800eb14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eb18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	691b      	ldr	r3, [r3, #16]
 800eb24:	f003 0301 	and.w	r3, r3, #1
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d004      	beq.n	800eb36 <USB_EPStartXfer+0x1170>
 800eb2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb30:	3301      	adds	r3, #1
 800eb32:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800eb36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb3a:	b29b      	uxth	r3, r3
 800eb3c:	029b      	lsls	r3, r3, #10
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800eb44:	801a      	strh	r2, [r3, #0]
 800eb46:	e02d      	b.n	800eba4 <USB_EPStartXfer+0x11de>
 800eb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	785b      	ldrb	r3, [r3, #1]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d125      	bne.n	800eba4 <USB_EPStartXfer+0x11de>
 800eb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	461a      	mov	r2, r3
 800eb6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb6e:	4413      	add	r3, r2
 800eb70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800eb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	781b      	ldrb	r3, [r3, #0]
 800eb80:	00da      	lsls	r2, r3, #3
 800eb82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800eb86:	4413      	add	r3, r2
 800eb88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eb8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800eb90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eb94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	691b      	ldr	r3, [r3, #16]
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eba2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800eba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	69db      	ldr	r3, [r3, #28]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	f000 81fe 	beq.w	800efb2 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ebb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ebbe:	681a      	ldr	r2, [r3, #0]
 800ebc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ebc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	781b      	ldrb	r3, [r3, #0]
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4413      	add	r3, r2
 800ebd0:	881b      	ldrh	r3, [r3, #0]
 800ebd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ebd6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ebda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d005      	beq.n	800ebee <USB_EPStartXfer+0x1228>
 800ebe2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ebe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d10d      	bne.n	800ec0a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ebee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ebf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	f040 81db 	bne.w	800efb2 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ebfc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ec00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f040 81d4 	bne.w	800efb2 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ec0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	881b      	ldrh	r3, [r3, #0]
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec30:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ec34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	441a      	add	r2, r3
 800ec4e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ec52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	8013      	strh	r3, [r2, #0]
 800ec66:	e1a4      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ec68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	78db      	ldrb	r3, [r3, #3]
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	f040 819a 	bne.w	800efae <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ec7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	699a      	ldr	r2, [r3, #24]
 800ec86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d917      	bls.n	800ecc6 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800ec96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ec9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800eca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	699a      	ldr	r2, [r3, #24]
 800ecb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ecb6:	1ad2      	subs	r2, r2, r3
 800ecb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	619a      	str	r2, [r3, #24]
 800ecc4:	e00e      	b.n	800ece4 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800ecc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	699b      	ldr	r3, [r3, #24]
 800ecd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ecd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2200      	movs	r2, #0
 800ece2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ece4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ece8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	785b      	ldrb	r3, [r3, #1]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d178      	bne.n	800ede6 <USB_EPStartXfer+0x1420>
 800ecf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ecf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ed02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	461a      	mov	r2, r3
 800ed14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ed18:	4413      	add	r3, r2
 800ed1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ed1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ed22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	00da      	lsls	r2, r3, #3
 800ed2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ed30:	4413      	add	r3, r2
 800ed32:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ed3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed3e:	2b3e      	cmp	r3, #62	; 0x3e
 800ed40:	d91d      	bls.n	800ed7e <USB_EPStartXfer+0x13b8>
 800ed42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed46:	095b      	lsrs	r3, r3, #5
 800ed48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ed4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed50:	f003 031f 	and.w	r3, r3, #31
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d104      	bne.n	800ed62 <USB_EPStartXfer+0x139c>
 800ed58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ed62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	029b      	lsls	r3, r3, #10
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed7a:	801a      	strh	r2, [r3, #0]
 800ed7c:	e064      	b.n	800ee48 <USB_EPStartXfer+0x1482>
 800ed7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d116      	bne.n	800edb4 <USB_EPStartXfer+0x13ee>
 800ed86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed8a:	881b      	ldrh	r3, [r3, #0]
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed98:	801a      	strh	r2, [r3, #0]
 800ed9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eda6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edaa:	b29a      	uxth	r2, r3
 800edac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800edb0:	801a      	strh	r2, [r3, #0]
 800edb2:	e049      	b.n	800ee48 <USB_EPStartXfer+0x1482>
 800edb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edb8:	085b      	lsrs	r3, r3, #1
 800edba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800edbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800edc2:	f003 0301 	and.w	r3, r3, #1
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d004      	beq.n	800edd4 <USB_EPStartXfer+0x140e>
 800edca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edce:	3301      	adds	r3, #1
 800edd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800edd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edd8:	b29b      	uxth	r3, r3
 800edda:	029b      	lsls	r3, r3, #10
 800eddc:	b29a      	uxth	r2, r3
 800edde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ede2:	801a      	strh	r2, [r3, #0]
 800ede4:	e030      	b.n	800ee48 <USB_EPStartXfer+0x1482>
 800ede6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	785b      	ldrb	r3, [r3, #1]
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d128      	bne.n	800ee48 <USB_EPStartXfer+0x1482>
 800edf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800edfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ee04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	461a      	mov	r2, r3
 800ee16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ee20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
 800ee2c:	00da      	lsls	r2, r3, #3
 800ee2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ee32:	4413      	add	r3, r2
 800ee34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ee38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ee3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ee40:	b29a      	uxth	r2, r3
 800ee42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ee46:	801a      	strh	r2, [r3, #0]
 800ee48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ee56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	785b      	ldrb	r3, [r3, #1]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d178      	bne.n	800ef58 <USB_EPStartXfer+0x1592>
 800ee66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ee74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	461a      	mov	r2, r3
 800ee86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ee90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ee94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	00da      	lsls	r2, r3, #3
 800ee9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800eea2:	4413      	add	r3, r2
 800eea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800eeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eeb0:	2b3e      	cmp	r3, #62	; 0x3e
 800eeb2:	d91d      	bls.n	800eef0 <USB_EPStartXfer+0x152a>
 800eeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eeb8:	095b      	lsrs	r3, r3, #5
 800eeba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eec2:	f003 031f 	and.w	r3, r3, #31
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d104      	bne.n	800eed4 <USB_EPStartXfer+0x150e>
 800eeca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eece:	3b01      	subs	r3, #1
 800eed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800eed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	029b      	lsls	r3, r3, #10
 800eedc:	b29b      	uxth	r3, r3
 800eede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eee6:	b29a      	uxth	r2, r3
 800eee8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eeec:	801a      	strh	r2, [r3, #0]
 800eeee:	e060      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
 800eef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d116      	bne.n	800ef26 <USB_EPStartXfer+0x1560>
 800eef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800eefc:	881b      	ldrh	r3, [r3, #0]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ef04:	b29a      	uxth	r2, r3
 800ef06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef0a:	801a      	strh	r2, [r3, #0]
 800ef0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef10:	881b      	ldrh	r3, [r3, #0]
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef1c:	b29a      	uxth	r2, r3
 800ef1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef22:	801a      	strh	r2, [r3, #0]
 800ef24:	e045      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
 800ef26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef2a:	085b      	lsrs	r3, r3, #1
 800ef2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ef34:	f003 0301 	and.w	r3, r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d004      	beq.n	800ef46 <USB_EPStartXfer+0x1580>
 800ef3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef40:	3301      	adds	r3, #1
 800ef42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ef46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	029b      	lsls	r3, r3, #10
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ef54:	801a      	strh	r2, [r3, #0]
 800ef56:	e02c      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
 800ef58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	785b      	ldrb	r3, [r3, #1]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d124      	bne.n	800efb2 <USB_EPStartXfer+0x15ec>
 800ef68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	461a      	mov	r2, r3
 800ef7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ef7e:	4413      	add	r3, r2
 800ef80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ef84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	00da      	lsls	r2, r3, #3
 800ef92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ef96:	4413      	add	r3, r2
 800ef98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ef9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800efa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800efaa:	801a      	strh	r2, [r3, #0]
 800efac:	e001      	b.n	800efb2 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800efae:	2301      	movs	r3, #1
 800efb0:	e03a      	b.n	800f028 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800efb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4413      	add	r3, r2
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	b29b      	uxth	r3, r3
 800efd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800efd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efd8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800efdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800efe0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800efe4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800efe8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800efec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eff0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800eff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	441a      	add	r2, r3
 800f00e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f01e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f022:	b29b      	uxth	r3, r3
 800f024:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f032:	b480      	push	{r7}
 800f034:	b085      	sub	sp, #20
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	785b      	ldrb	r3, [r3, #1]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d020      	beq.n	800f086 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f044:	687a      	ldr	r2, [r7, #4]
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	4413      	add	r3, r2
 800f04e:	881b      	ldrh	r3, [r3, #0]
 800f050:	b29b      	uxth	r3, r3
 800f052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f05a:	81bb      	strh	r3, [r7, #12]
 800f05c:	89bb      	ldrh	r3, [r7, #12]
 800f05e:	f083 0310 	eor.w	r3, r3, #16
 800f062:	81bb      	strh	r3, [r7, #12]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	441a      	add	r2, r3
 800f06e:	89bb      	ldrh	r3, [r7, #12]
 800f070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f080:	b29b      	uxth	r3, r3
 800f082:	8013      	strh	r3, [r2, #0]
 800f084:	e01f      	b.n	800f0c6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	009b      	lsls	r3, r3, #2
 800f08e:	4413      	add	r3, r2
 800f090:	881b      	ldrh	r3, [r3, #0]
 800f092:	b29b      	uxth	r3, r3
 800f094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f09c:	81fb      	strh	r3, [r7, #14]
 800f09e:	89fb      	ldrh	r3, [r7, #14]
 800f0a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f0a4:	81fb      	strh	r3, [r7, #14]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	441a      	add	r2, r3
 800f0b0:	89fb      	ldrh	r3, [r7, #14]
 800f0b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f0b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f0ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b087      	sub	sp, #28
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	7b1b      	ldrb	r3, [r3, #12]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	f040 809d 	bne.w	800f222 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	785b      	ldrb	r3, [r3, #1]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d04c      	beq.n	800f18a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f0f0:	687a      	ldr	r2, [r7, #4]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	781b      	ldrb	r3, [r3, #0]
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	4413      	add	r3, r2
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	823b      	strh	r3, [r7, #16]
 800f0fe:	8a3b      	ldrh	r3, [r7, #16]
 800f100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f104:	2b00      	cmp	r3, #0
 800f106:	d01b      	beq.n	800f140 <USB_EPClearStall+0x6c>
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	4413      	add	r3, r2
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	b29b      	uxth	r3, r3
 800f116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f11a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f11e:	81fb      	strh	r3, [r7, #14]
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	441a      	add	r2, r3
 800f12a:	89fb      	ldrh	r3, [r7, #14]
 800f12c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f138:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	78db      	ldrb	r3, [r3, #3]
 800f144:	2b01      	cmp	r3, #1
 800f146:	d06c      	beq.n	800f222 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	009b      	lsls	r3, r3, #2
 800f150:	4413      	add	r3, r2
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	b29b      	uxth	r3, r3
 800f156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f15e:	81bb      	strh	r3, [r7, #12]
 800f160:	89bb      	ldrh	r3, [r7, #12]
 800f162:	f083 0320 	eor.w	r3, r3, #32
 800f166:	81bb      	strh	r3, [r7, #12]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	441a      	add	r2, r3
 800f172:	89bb      	ldrh	r3, [r7, #12]
 800f174:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f178:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f17c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f184:	b29b      	uxth	r3, r3
 800f186:	8013      	strh	r3, [r2, #0]
 800f188:	e04b      	b.n	800f222 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	4413      	add	r3, r2
 800f194:	881b      	ldrh	r3, [r3, #0]
 800f196:	82fb      	strh	r3, [r7, #22]
 800f198:	8afb      	ldrh	r3, [r7, #22]
 800f19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d01b      	beq.n	800f1da <USB_EPClearStall+0x106>
 800f1a2:	687a      	ldr	r2, [r7, #4]
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4413      	add	r3, r2
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1b8:	82bb      	strh	r3, [r7, #20]
 800f1ba:	687a      	ldr	r2, [r7, #4]
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	781b      	ldrb	r3, [r3, #0]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	441a      	add	r2, r3
 800f1c4:	8abb      	ldrh	r3, [r7, #20]
 800f1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f1ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f1da:	687a      	ldr	r2, [r7, #4]
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	4413      	add	r3, r2
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1f0:	827b      	strh	r3, [r7, #18]
 800f1f2:	8a7b      	ldrh	r3, [r7, #18]
 800f1f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800f1f8:	827b      	strh	r3, [r7, #18]
 800f1fa:	8a7b      	ldrh	r3, [r7, #18]
 800f1fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800f200:	827b      	strh	r3, [r7, #18]
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	441a      	add	r2, r3
 800f20c:	8a7b      	ldrh	r3, [r7, #18]
 800f20e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f21a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f21e:	b29b      	uxth	r3, r3
 800f220:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f222:	2300      	movs	r3, #0
}
 800f224:	4618      	mov	r0, r3
 800f226:	371c      	adds	r7, #28
 800f228:	46bd      	mov	sp, r7
 800f22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22e:	4770      	bx	lr

0800f230 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d103      	bne.n	800f24a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2280      	movs	r2, #128	; 0x80
 800f246:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f266:	b29b      	uxth	r3, r3
 800f268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f26c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f270:	b29a      	uxth	r2, r3
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800f286:	b480      	push	{r7}
 800f288:	b085      	sub	sp, #20
 800f28a:	af00      	add	r7, sp, #0
 800f28c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800f294:	b29b      	uxth	r3, r3
 800f296:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f298:	68fb      	ldr	r3, [r7, #12]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3714      	adds	r7, #20
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b08d      	sub	sp, #52	; 0x34
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	60f8      	str	r0, [r7, #12]
 800f2ae:	60b9      	str	r1, [r7, #8]
 800f2b0:	4611      	mov	r1, r2
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	80fb      	strh	r3, [r7, #6]
 800f2b8:	4613      	mov	r3, r2
 800f2ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f2bc:	88bb      	ldrh	r3, [r7, #4]
 800f2be:	3301      	adds	r3, #1
 800f2c0:	085b      	lsrs	r3, r3, #1
 800f2c2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f2cc:	88fa      	ldrh	r2, [r7, #6]
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2d6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800f2d8:	6a3b      	ldr	r3, [r7, #32]
 800f2da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2dc:	e01b      	b.n	800f316 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800f2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ec:	781b      	ldrb	r3, [r3, #0]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	021b      	lsls	r3, r3, #8
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	b29a      	uxth	r2, r3
 800f300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f302:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f306:	3302      	adds	r3, #2
 800f308:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30c:	3301      	adds	r3, #1
 800f30e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	3b01      	subs	r3, #1
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d1e0      	bne.n	800f2de <USB_WritePMA+0x38>
  }
}
 800f31c:	bf00      	nop
 800f31e:	bf00      	nop
 800f320:	3734      	adds	r7, #52	; 0x34
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b08b      	sub	sp, #44	; 0x2c
 800f32e:	af00      	add	r7, sp, #0
 800f330:	60f8      	str	r0, [r7, #12]
 800f332:	60b9      	str	r1, [r7, #8]
 800f334:	4611      	mov	r1, r2
 800f336:	461a      	mov	r2, r3
 800f338:	460b      	mov	r3, r1
 800f33a:	80fb      	strh	r3, [r7, #6]
 800f33c:	4613      	mov	r3, r2
 800f33e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f340:	88bb      	ldrh	r3, [r7, #4]
 800f342:	085b      	lsrs	r3, r3, #1
 800f344:	b29b      	uxth	r3, r3
 800f346:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f350:	88fa      	ldrh	r2, [r7, #6]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	4413      	add	r3, r2
 800f356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f35a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	627b      	str	r3, [r7, #36]	; 0x24
 800f360:	e018      	b.n	800f394 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	b29b      	uxth	r3, r3
 800f368:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	3302      	adds	r3, #2
 800f36e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f370:	693b      	ldr	r3, [r7, #16]
 800f372:	b2da      	uxtb	r2, r3
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f378:	69fb      	ldr	r3, [r7, #28]
 800f37a:	3301      	adds	r3, #1
 800f37c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	0a1b      	lsrs	r3, r3, #8
 800f382:	b2da      	uxtb	r2, r3
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	3301      	adds	r3, #1
 800f38c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800f38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f390:	3b01      	subs	r3, #1
 800f392:	627b      	str	r3, [r7, #36]	; 0x24
 800f394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1e3      	bne.n	800f362 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f39a:	88bb      	ldrh	r3, [r7, #4]
 800f39c:	f003 0301 	and.w	r3, r3, #1
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d007      	beq.n	800f3b6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800f3a6:	6a3b      	ldr	r3, [r7, #32]
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	b29b      	uxth	r3, r3
 800f3ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	b2da      	uxtb	r2, r3
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	701a      	strb	r2, [r3, #0]
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	372c      	adds	r7, #44	; 0x2c
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr

0800f3c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f3ce:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f3d2:	f002 fbaf 	bl	8011b34 <USBD_static_malloc>
 800f3d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d105      	bne.n	800f3ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f3e6:	2302      	movs	r3, #2
 800f3e8:	e066      	b.n	800f4b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	7c1b      	ldrb	r3, [r3, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d119      	bne.n	800f42e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3fe:	2202      	movs	r2, #2
 800f400:	2181      	movs	r1, #129	; 0x81
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f002 fa3b 	bl	801187e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2201      	movs	r2, #1
 800f40c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f412:	2202      	movs	r2, #2
 800f414:	2101      	movs	r1, #1
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f002 fa31 	bl	801187e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2201      	movs	r2, #1
 800f420:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2210      	movs	r2, #16
 800f428:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f42c:	e016      	b.n	800f45c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f42e:	2340      	movs	r3, #64	; 0x40
 800f430:	2202      	movs	r2, #2
 800f432:	2181      	movs	r1, #129	; 0x81
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f002 fa22 	bl	801187e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2201      	movs	r2, #1
 800f43e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f440:	2340      	movs	r3, #64	; 0x40
 800f442:	2202      	movs	r2, #2
 800f444:	2101      	movs	r1, #1
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f002 fa19 	bl	801187e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2201      	movs	r2, #1
 800f450:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2210      	movs	r2, #16
 800f458:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f45c:	2308      	movs	r3, #8
 800f45e:	2203      	movs	r2, #3
 800f460:	2182      	movs	r1, #130	; 0x82
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f002 fa0b 	bl	801187e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2201      	movs	r2, #1
 800f46c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	7c1b      	ldrb	r3, [r3, #16]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d109      	bne.n	800f4a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f49c:	2101      	movs	r1, #1
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f002 fadd 	bl	8011a5e <USBD_LL_PrepareReceive>
 800f4a4:	e007      	b.n	800f4b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f4ac:	2340      	movs	r3, #64	; 0x40
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f002 fad4 	bl	8011a5e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3710      	adds	r7, #16
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b082      	sub	sp, #8
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f4cc:	2181      	movs	r1, #129	; 0x81
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f002 f9fb 	bl	80118ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f4da:	2101      	movs	r1, #1
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f002 f9f4 	bl	80118ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f4ea:	2182      	movs	r1, #130	; 0x82
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f002 f9ec 	bl	80118ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00e      	beq.n	800f52a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f51c:	4618      	mov	r0, r3
 800f51e:	f002 fb17 	bl	8011b50 <USBD_static_free>
    pdev->pClassData = NULL;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2200      	movs	r2, #0
 800f526:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3708      	adds	r7, #8
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f544:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f546:	2300      	movs	r3, #0
 800f548:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f54a:	2300      	movs	r3, #0
 800f54c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f54e:	2300      	movs	r3, #0
 800f550:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d101      	bne.n	800f55c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f558:	2303      	movs	r3, #3
 800f55a:	e0af      	b.n	800f6bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f564:	2b00      	cmp	r3, #0
 800f566:	d03f      	beq.n	800f5e8 <USBD_CDC_Setup+0xb4>
 800f568:	2b20      	cmp	r3, #32
 800f56a:	f040 809f 	bne.w	800f6ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	88db      	ldrh	r3, [r3, #6]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d02e      	beq.n	800f5d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	b25b      	sxtb	r3, r3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da16      	bge.n	800f5ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	683a      	ldr	r2, [r7, #0]
 800f58a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f58c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	88d2      	ldrh	r2, [r2, #6]
 800f592:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	88db      	ldrh	r3, [r3, #6]
 800f598:	2b07      	cmp	r3, #7
 800f59a:	bf28      	it	cs
 800f59c:	2307      	movcs	r3, #7
 800f59e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	89fa      	ldrh	r2, [r7, #14]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f001 fa9f 	bl	8010aea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f5ac:	e085      	b.n	800f6ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	785a      	ldrb	r2, [r3, #1]
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	88db      	ldrh	r3, [r3, #6]
 800f5bc:	b2da      	uxtb	r2, r3
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f5c4:	6939      	ldr	r1, [r7, #16]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	88db      	ldrh	r3, [r3, #6]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f001 fab8 	bl	8010b42 <USBD_CtlPrepareRx>
      break;
 800f5d2:	e072      	b.n	800f6ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	7850      	ldrb	r0, [r2, #1]
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	4798      	blx	r3
      break;
 800f5e6:	e068      	b.n	800f6ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	785b      	ldrb	r3, [r3, #1]
 800f5ec:	2b0b      	cmp	r3, #11
 800f5ee:	d852      	bhi.n	800f696 <USBD_CDC_Setup+0x162>
 800f5f0:	a201      	add	r2, pc, #4	; (adr r2, 800f5f8 <USBD_CDC_Setup+0xc4>)
 800f5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f6:	bf00      	nop
 800f5f8:	0800f629 	.word	0x0800f629
 800f5fc:	0800f6a5 	.word	0x0800f6a5
 800f600:	0800f697 	.word	0x0800f697
 800f604:	0800f697 	.word	0x0800f697
 800f608:	0800f697 	.word	0x0800f697
 800f60c:	0800f697 	.word	0x0800f697
 800f610:	0800f697 	.word	0x0800f697
 800f614:	0800f697 	.word	0x0800f697
 800f618:	0800f697 	.word	0x0800f697
 800f61c:	0800f697 	.word	0x0800f697
 800f620:	0800f653 	.word	0x0800f653
 800f624:	0800f67d 	.word	0x0800f67d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b03      	cmp	r3, #3
 800f632:	d107      	bne.n	800f644 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f634:	f107 030a 	add.w	r3, r7, #10
 800f638:	2202      	movs	r2, #2
 800f63a:	4619      	mov	r1, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f001 fa54 	bl	8010aea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f642:	e032      	b.n	800f6aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f001 f9de 	bl	8010a08 <USBD_CtlError>
            ret = USBD_FAIL;
 800f64c:	2303      	movs	r3, #3
 800f64e:	75fb      	strb	r3, [r7, #23]
          break;
 800f650:	e02b      	b.n	800f6aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b03      	cmp	r3, #3
 800f65c:	d107      	bne.n	800f66e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f65e:	f107 030d 	add.w	r3, r7, #13
 800f662:	2201      	movs	r2, #1
 800f664:	4619      	mov	r1, r3
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f001 fa3f 	bl	8010aea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f66c:	e01d      	b.n	800f6aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f66e:	6839      	ldr	r1, [r7, #0]
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f001 f9c9 	bl	8010a08 <USBD_CtlError>
            ret = USBD_FAIL;
 800f676:	2303      	movs	r3, #3
 800f678:	75fb      	strb	r3, [r7, #23]
          break;
 800f67a:	e016      	b.n	800f6aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f682:	b2db      	uxtb	r3, r3
 800f684:	2b03      	cmp	r3, #3
 800f686:	d00f      	beq.n	800f6a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f688:	6839      	ldr	r1, [r7, #0]
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f001 f9bc 	bl	8010a08 <USBD_CtlError>
            ret = USBD_FAIL;
 800f690:	2303      	movs	r3, #3
 800f692:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f694:	e008      	b.n	800f6a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f696:	6839      	ldr	r1, [r7, #0]
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f001 f9b5 	bl	8010a08 <USBD_CtlError>
          ret = USBD_FAIL;
 800f69e:	2303      	movs	r3, #3
 800f6a0:	75fb      	strb	r3, [r7, #23]
          break;
 800f6a2:	e002      	b.n	800f6aa <USBD_CDC_Setup+0x176>
          break;
 800f6a4:	bf00      	nop
 800f6a6:	e008      	b.n	800f6ba <USBD_CDC_Setup+0x186>
          break;
 800f6a8:	bf00      	nop
      }
      break;
 800f6aa:	e006      	b.n	800f6ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f6ac:	6839      	ldr	r1, [r7, #0]
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f001 f9aa 	bl	8010a08 <USBD_CtlError>
      ret = USBD_FAIL;
 800f6b4:	2303      	movs	r3, #3
 800f6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f6b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800f6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3718      	adds	r7, #24
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	bd80      	pop	{r7, pc}

0800f6c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
 800f6cc:	460b      	mov	r3, r1
 800f6ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f6d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d101      	bne.n	800f6e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f6e2:	2303      	movs	r3, #3
 800f6e4:	e04f      	b.n	800f786 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f6ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f6ee:	78fa      	ldrb	r2, [r7, #3]
 800f6f0:	6879      	ldr	r1, [r7, #4]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	4413      	add	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	440b      	add	r3, r1
 800f6fc:	3318      	adds	r3, #24
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d029      	beq.n	800f758 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f704:	78fa      	ldrb	r2, [r7, #3]
 800f706:	6879      	ldr	r1, [r7, #4]
 800f708:	4613      	mov	r3, r2
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	440b      	add	r3, r1
 800f712:	3318      	adds	r3, #24
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	78f9      	ldrb	r1, [r7, #3]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	460b      	mov	r3, r1
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	440b      	add	r3, r1
 800f720:	00db      	lsls	r3, r3, #3
 800f722:	4403      	add	r3, r0
 800f724:	3338      	adds	r3, #56	; 0x38
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	fbb2 f1f3 	udiv	r1, r2, r3
 800f72c:	fb01 f303 	mul.w	r3, r1, r3
 800f730:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f732:	2b00      	cmp	r3, #0
 800f734:	d110      	bne.n	800f758 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f736:	78fa      	ldrb	r2, [r7, #3]
 800f738:	6879      	ldr	r1, [r7, #4]
 800f73a:	4613      	mov	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	440b      	add	r3, r1
 800f744:	3318      	adds	r3, #24
 800f746:	2200      	movs	r2, #0
 800f748:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f74a:	78f9      	ldrb	r1, [r7, #3]
 800f74c:	2300      	movs	r3, #0
 800f74e:	2200      	movs	r2, #0
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f002 f963 	bl	8011a1c <USBD_LL_Transmit>
 800f756:	e015      	b.n	800f784 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	2200      	movs	r2, #0
 800f75c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00b      	beq.n	800f784 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	68ba      	ldr	r2, [r7, #8]
 800f776:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f77a:	68ba      	ldr	r2, [r7, #8]
 800f77c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f780:	78fa      	ldrb	r2, [r7, #3]
 800f782:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f784:	2300      	movs	r3, #0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	460b      	mov	r3, r1
 800f798:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d101      	bne.n	800f7b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f7ac:	2303      	movs	r3, #3
 800f7ae:	e015      	b.n	800f7dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f7b0:	78fb      	ldrb	r3, [r7, #3]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f002 f973 	bl	8011aa0 <USBD_LL_GetRxDataSize>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	68fa      	ldr	r2, [r7, #12]
 800f7cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}

0800f7e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f7f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f7fa:	2303      	movs	r3, #3
 800f7fc:	e01b      	b.n	800f836 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d015      	beq.n	800f834 <USBD_CDC_EP0_RxReady+0x50>
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f80e:	2bff      	cmp	r3, #255	; 0xff
 800f810:	d010      	beq.n	800f834 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f818:	689b      	ldr	r3, [r3, #8]
 800f81a:	68fa      	ldr	r2, [r7, #12]
 800f81c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f820:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f828:	b292      	uxth	r2, r2
 800f82a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	22ff      	movs	r2, #255	; 0xff
 800f830:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f834:	2300      	movs	r3, #0
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
	...

0800f840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f840:	b480      	push	{r7}
 800f842:	b083      	sub	sp, #12
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2243      	movs	r2, #67	; 0x43
 800f84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f84e:	4b03      	ldr	r3, [pc, #12]	; (800f85c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f850:	4618      	mov	r0, r3
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr
 800f85c:	20000094 	.word	0x20000094

0800f860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f860:	b480      	push	{r7}
 800f862:	b083      	sub	sp, #12
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2243      	movs	r2, #67	; 0x43
 800f86c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f86e:	4b03      	ldr	r3, [pc, #12]	; (800f87c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f870:	4618      	mov	r0, r3
 800f872:	370c      	adds	r7, #12
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	20000050 	.word	0x20000050

0800f880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f880:	b480      	push	{r7}
 800f882:	b083      	sub	sp, #12
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2243      	movs	r2, #67	; 0x43
 800f88c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f88e:	4b03      	ldr	r3, [pc, #12]	; (800f89c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f890:	4618      	mov	r0, r3
 800f892:	370c      	adds	r7, #12
 800f894:	46bd      	mov	sp, r7
 800f896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89a:	4770      	bx	lr
 800f89c:	200000d8 	.word	0x200000d8

0800f8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b083      	sub	sp, #12
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	220a      	movs	r2, #10
 800f8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f8ae:	4b03      	ldr	r3, [pc, #12]	; (800f8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	2000000c 	.word	0x2000000c

0800f8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d101      	bne.n	800f8d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f8d0:	2303      	movs	r3, #3
 800f8d2:	e004      	b.n	800f8de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	370c      	adds	r7, #12
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e8:	4770      	bx	lr

0800f8ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	b087      	sub	sp, #28
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	60f8      	str	r0, [r7, #12]
 800f8f2:	60b9      	str	r1, [r7, #8]
 800f8f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d101      	bne.n	800f908 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f904:	2303      	movs	r3, #3
 800f906:	e008      	b.n	800f91a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	68ba      	ldr	r2, [r7, #8]
 800f90c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f918:	2300      	movs	r3, #0
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	371c      	adds	r7, #28
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f926:	b480      	push	{r7}
 800f928:	b085      	sub	sp, #20
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f936:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d101      	bne.n	800f942 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f93e:	2303      	movs	r3, #3
 800f940:	e004      	b.n	800f94c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	683a      	ldr	r2, [r7, #0]
 800f946:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr

0800f958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b084      	sub	sp, #16
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f966:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d101      	bne.n	800f976 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f972:	2303      	movs	r3, #3
 800f974:	e016      	b.n	800f9a4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	7c1b      	ldrb	r3, [r3, #16]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d109      	bne.n	800f992 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f984:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f988:	2101      	movs	r1, #1
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f002 f867 	bl	8011a5e <USBD_LL_PrepareReceive>
 800f990:	e007      	b.n	800f9a2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f998:	2340      	movs	r3, #64	; 0x40
 800f99a:	2101      	movs	r1, #1
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f002 f85e 	bl	8011a5e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3710      	adds	r7, #16
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b086      	sub	sp, #24
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d101      	bne.n	800f9c4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e01f      	b.n	800fa04 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	68ba      	ldr	r2, [r7, #8]
 800f9e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	79fa      	ldrb	r2, [r7, #7]
 800f9f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9f8:	68f8      	ldr	r0, [r7, #12]
 800f9fa:	f001 fec5 	bl	8011788 <USBD_LL_Init>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d101      	bne.n	800fa24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800fa20:	2303      	movs	r3, #3
 800fa22:	e016      	b.n	800fa52 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	683a      	ldr	r2, [r7, #0]
 800fa28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d00b      	beq.n	800fa50 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	f107 020e 	add.w	r2, r7, #14
 800fa44:	4610      	mov	r0, r2
 800fa46:	4798      	blx	r3
 800fa48:	4602      	mov	r2, r0
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b082      	sub	sp, #8
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 fef0 	bl	8011848 <USBD_LL_Start>
 800fa68:	4603      	mov	r3, r0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3708      	adds	r7, #8
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800fa72:	b480      	push	{r7}
 800fa74:	b083      	sub	sp, #12
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	460b      	mov	r3, r1
 800fa92:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800fa94:	2303      	movs	r3, #3
 800fa96:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d009      	beq.n	800fab6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	78fa      	ldrb	r2, [r7, #3]
 800faac:	4611      	mov	r1, r2
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	4798      	blx	r3
 800fab2:	4603      	mov	r3, r0
 800fab4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800fab6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b082      	sub	sp, #8
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d007      	beq.n	800fae6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	78fa      	ldrb	r2, [r7, #3]
 800fae0:	4611      	mov	r1, r2
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	4798      	blx	r3
  }

  return USBD_OK;
 800fae6:	2300      	movs	r3, #0
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3708      	adds	r7, #8
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b084      	sub	sp, #16
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f000 ff46 	bl	8010994 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800fb16:	461a      	mov	r2, r3
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fb24:	f003 031f 	and.w	r3, r3, #31
 800fb28:	2b02      	cmp	r3, #2
 800fb2a:	d01a      	beq.n	800fb62 <USBD_LL_SetupStage+0x72>
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d822      	bhi.n	800fb76 <USBD_LL_SetupStage+0x86>
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <USBD_LL_SetupStage+0x4a>
 800fb34:	2b01      	cmp	r3, #1
 800fb36:	d00a      	beq.n	800fb4e <USBD_LL_SetupStage+0x5e>
 800fb38:	e01d      	b.n	800fb76 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f000 f9ee 	bl	800ff24 <USBD_StdDevReq>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb4c:	e020      	b.n	800fb90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb54:	4619      	mov	r1, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fa52 	bl	8010000 <USBD_StdItfReq>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73fb      	strb	r3, [r7, #15]
      break;
 800fb60:	e016      	b.n	800fb90 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800fb68:	4619      	mov	r1, r3
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa91 	bl	8010092 <USBD_StdEPReq>
 800fb70:	4603      	mov	r3, r0
 800fb72:	73fb      	strb	r3, [r7, #15]
      break;
 800fb74:	e00c      	b.n	800fb90 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fb7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fb80:	b2db      	uxtb	r3, r3
 800fb82:	4619      	mov	r1, r3
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f001 febf 	bl	8011908 <USBD_LL_StallEP>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb8e:	bf00      	nop
  }

  return ret;
 800fb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3710      	adds	r7, #16
 800fb96:	46bd      	mov	sp, r7
 800fb98:	bd80      	pop	{r7, pc}

0800fb9a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fb9a:	b580      	push	{r7, lr}
 800fb9c:	b086      	sub	sp, #24
 800fb9e:	af00      	add	r7, sp, #0
 800fba0:	60f8      	str	r0, [r7, #12]
 800fba2:	460b      	mov	r3, r1
 800fba4:	607a      	str	r2, [r7, #4]
 800fba6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d138      	bne.n	800fc20 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fbb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d14a      	bne.n	800fc56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	689a      	ldr	r2, [r3, #8]
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d913      	bls.n	800fbf4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	689a      	ldr	r2, [r3, #8]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	1ad2      	subs	r2, r2, r3
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	68da      	ldr	r2, [r3, #12]
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	4293      	cmp	r3, r2
 800fbe4:	bf28      	it	cs
 800fbe6:	4613      	movcs	r3, r2
 800fbe8:	461a      	mov	r2, r3
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f000 ffc5 	bl	8010b7c <USBD_CtlContinueRx>
 800fbf2:	e030      	b.n	800fc56 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	2b03      	cmp	r3, #3
 800fbfe:	d10b      	bne.n	800fc18 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d005      	beq.n	800fc18 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc12:	691b      	ldr	r3, [r3, #16]
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 ffc0 	bl	8010b9e <USBD_CtlSendStatus>
 800fc1e:	e01a      	b.n	800fc56 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	2b03      	cmp	r3, #3
 800fc2a:	d114      	bne.n	800fc56 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc32:	699b      	ldr	r3, [r3, #24]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d00e      	beq.n	800fc56 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc3e:	699b      	ldr	r3, [r3, #24]
 800fc40:	7afa      	ldrb	r2, [r7, #11]
 800fc42:	4611      	mov	r1, r2
 800fc44:	68f8      	ldr	r0, [r7, #12]
 800fc46:	4798      	blx	r3
 800fc48:	4603      	mov	r3, r0
 800fc4a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d001      	beq.n	800fc56 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	e000      	b.n	800fc58 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800fc56:	2300      	movs	r3, #0
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3718      	adds	r7, #24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b086      	sub	sp, #24
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	607a      	str	r2, [r7, #4]
 800fc6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800fc6e:	7afb      	ldrb	r3, [r7, #11]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d16b      	bne.n	800fd4c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3314      	adds	r3, #20
 800fc78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d156      	bne.n	800fd32 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	689a      	ldr	r2, [r3, #8]
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	d914      	bls.n	800fcba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	689a      	ldr	r2, [r3, #8]
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	1ad2      	subs	r2, r2, r3
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	689b      	ldr	r3, [r3, #8]
 800fca2:	461a      	mov	r2, r3
 800fca4:	6879      	ldr	r1, [r7, #4]
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f000 ff3a 	bl	8010b20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcac:	2300      	movs	r3, #0
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2100      	movs	r1, #0
 800fcb2:	68f8      	ldr	r0, [r7, #12]
 800fcb4:	f001 fed3 	bl	8011a5e <USBD_LL_PrepareReceive>
 800fcb8:	e03b      	b.n	800fd32 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	68da      	ldr	r2, [r3, #12]
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	689b      	ldr	r3, [r3, #8]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d11c      	bne.n	800fd00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	685a      	ldr	r2, [r3, #4]
 800fcca:	693b      	ldr	r3, [r7, #16]
 800fccc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d316      	bcc.n	800fd00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d20f      	bcs.n	800fd00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fce0:	2200      	movs	r2, #0
 800fce2:	2100      	movs	r1, #0
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f000 ff1b 	bl	8010b20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2200      	movs	r2, #0
 800fcee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f001 feb0 	bl	8011a5e <USBD_LL_PrepareReceive>
 800fcfe:	e018      	b.n	800fd32 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd06:	b2db      	uxtb	r3, r3
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	d10b      	bne.n	800fd24 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d005      	beq.n	800fd24 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd24:	2180      	movs	r1, #128	; 0x80
 800fd26:	68f8      	ldr	r0, [r7, #12]
 800fd28:	f001 fdee 	bl	8011908 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 ff49 	bl	8010bc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d122      	bne.n	800fd82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff fe98 	bl	800fa72 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2200      	movs	r2, #0
 800fd46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800fd4a:	e01a      	b.n	800fd82 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd52:	b2db      	uxtb	r3, r3
 800fd54:	2b03      	cmp	r3, #3
 800fd56:	d114      	bne.n	800fd82 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd5e:	695b      	ldr	r3, [r3, #20]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00e      	beq.n	800fd82 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd6a:	695b      	ldr	r3, [r3, #20]
 800fd6c:	7afa      	ldrb	r2, [r7, #11]
 800fd6e:	4611      	mov	r1, r2
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	4798      	blx	r3
 800fd74:	4603      	mov	r3, r0
 800fd76:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fd78:	7dfb      	ldrb	r3, [r7, #23]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fd7e:	7dfb      	ldrb	r3, [r7, #23]
 800fd80:	e000      	b.n	800fd84 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fd82:	2300      	movs	r3, #0
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3718      	adds	r7, #24
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	2200      	movs	r2, #0
 800fdae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d101      	bne.n	800fdc0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fdbc:	2303      	movs	r3, #3
 800fdbe:	e02f      	b.n	800fe20 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00f      	beq.n	800fdea <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d009      	beq.n	800fdea <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	6852      	ldr	r2, [r2, #4]
 800fde2:	b2d2      	uxtb	r2, r2
 800fde4:	4611      	mov	r1, r2
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fdea:	2340      	movs	r3, #64	; 0x40
 800fdec:	2200      	movs	r2, #0
 800fdee:	2100      	movs	r1, #0
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f001 fd44 	bl	801187e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2201      	movs	r2, #1
 800fdfa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2240      	movs	r2, #64	; 0x40
 800fe02:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fe06:	2340      	movs	r3, #64	; 0x40
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2180      	movs	r1, #128	; 0x80
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f001 fd36 	bl	801187e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2201      	movs	r2, #1
 800fe16:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2240      	movs	r2, #64	; 0x40
 800fe1c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fe1e:	2300      	movs	r3, #0
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}

0800fe28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	78fa      	ldrb	r2, [r7, #3]
 800fe38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fe3a:	2300      	movs	r3, #0
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	370c      	adds	r7, #12
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2204      	movs	r2, #4
 800fe62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fe66:	2300      	movs	r3, #0
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr

0800fe74 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b04      	cmp	r3, #4
 800fe86:	d106      	bne.n	800fe96 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fe96:	2300      	movs	r3, #0
}
 800fe98:	4618      	mov	r0, r3
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d101      	bne.n	800feba <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800feb6:	2303      	movs	r3, #3
 800feb8:	e012      	b.n	800fee0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fec0:	b2db      	uxtb	r3, r3
 800fec2:	2b03      	cmp	r3, #3
 800fec4:	d10b      	bne.n	800fede <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fecc:	69db      	ldr	r3, [r3, #28]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d005      	beq.n	800fede <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fed8:	69db      	ldr	r3, [r3, #28]
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fee8:	b480      	push	{r7}
 800feea:	b087      	sub	sp, #28
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	3301      	adds	r3, #1
 800fefe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ff06:	8a3b      	ldrh	r3, [r7, #16]
 800ff08:	021b      	lsls	r3, r3, #8
 800ff0a:	b21a      	sxth	r2, r3
 800ff0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ff10:	4313      	orrs	r3, r2
 800ff12:	b21b      	sxth	r3, r3
 800ff14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ff16:	89fb      	ldrh	r3, [r7, #14]
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	371c      	adds	r7, #28
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ff3a:	2b40      	cmp	r3, #64	; 0x40
 800ff3c:	d005      	beq.n	800ff4a <USBD_StdDevReq+0x26>
 800ff3e:	2b40      	cmp	r3, #64	; 0x40
 800ff40:	d853      	bhi.n	800ffea <USBD_StdDevReq+0xc6>
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00b      	beq.n	800ff5e <USBD_StdDevReq+0x3a>
 800ff46:	2b20      	cmp	r3, #32
 800ff48:	d14f      	bne.n	800ffea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	6839      	ldr	r1, [r7, #0]
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	4798      	blx	r3
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ff5c:	e04a      	b.n	800fff4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	785b      	ldrb	r3, [r3, #1]
 800ff62:	2b09      	cmp	r3, #9
 800ff64:	d83b      	bhi.n	800ffde <USBD_StdDevReq+0xba>
 800ff66:	a201      	add	r2, pc, #4	; (adr r2, 800ff6c <USBD_StdDevReq+0x48>)
 800ff68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff6c:	0800ffc1 	.word	0x0800ffc1
 800ff70:	0800ffd5 	.word	0x0800ffd5
 800ff74:	0800ffdf 	.word	0x0800ffdf
 800ff78:	0800ffcb 	.word	0x0800ffcb
 800ff7c:	0800ffdf 	.word	0x0800ffdf
 800ff80:	0800ff9f 	.word	0x0800ff9f
 800ff84:	0800ff95 	.word	0x0800ff95
 800ff88:	0800ffdf 	.word	0x0800ffdf
 800ff8c:	0800ffb7 	.word	0x0800ffb7
 800ff90:	0800ffa9 	.word	0x0800ffa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f000 f9de 	bl	8010358 <USBD_GetDescriptor>
          break;
 800ff9c:	e024      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ff9e:	6839      	ldr	r1, [r7, #0]
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 fb6d 	bl	8010680 <USBD_SetAddress>
          break;
 800ffa6:	e01f      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ffa8:	6839      	ldr	r1, [r7, #0]
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 fbac 	bl	8010708 <USBD_SetConfig>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	73fb      	strb	r3, [r7, #15]
          break;
 800ffb4:	e018      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ffb6:	6839      	ldr	r1, [r7, #0]
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 fc4b 	bl	8010854 <USBD_GetConfig>
          break;
 800ffbe:	e013      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ffc0:	6839      	ldr	r1, [r7, #0]
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fc7c 	bl	80108c0 <USBD_GetStatus>
          break;
 800ffc8:	e00e      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ffca:	6839      	ldr	r1, [r7, #0]
 800ffcc:	6878      	ldr	r0, [r7, #4]
 800ffce:	f000 fcab 	bl	8010928 <USBD_SetFeature>
          break;
 800ffd2:	e009      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fcba 	bl	8010950 <USBD_ClrFeature>
          break;
 800ffdc:	e004      	b.n	800ffe8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ffde:	6839      	ldr	r1, [r7, #0]
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f000 fd11 	bl	8010a08 <USBD_CtlError>
          break;
 800ffe6:	bf00      	nop
      }
      break;
 800ffe8:	e004      	b.n	800fff4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f000 fd0b 	bl	8010a08 <USBD_CtlError>
      break;
 800fff2:	bf00      	nop
  }

  return ret;
 800fff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop

08010000 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010016:	2b40      	cmp	r3, #64	; 0x40
 8010018:	d005      	beq.n	8010026 <USBD_StdItfReq+0x26>
 801001a:	2b40      	cmp	r3, #64	; 0x40
 801001c:	d82f      	bhi.n	801007e <USBD_StdItfReq+0x7e>
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <USBD_StdItfReq+0x26>
 8010022:	2b20      	cmp	r3, #32
 8010024:	d12b      	bne.n	801007e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801002c:	b2db      	uxtb	r3, r3
 801002e:	3b01      	subs	r3, #1
 8010030:	2b02      	cmp	r3, #2
 8010032:	d81d      	bhi.n	8010070 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	889b      	ldrh	r3, [r3, #4]
 8010038:	b2db      	uxtb	r3, r3
 801003a:	2b01      	cmp	r3, #1
 801003c:	d813      	bhi.n	8010066 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010044:	689b      	ldr	r3, [r3, #8]
 8010046:	6839      	ldr	r1, [r7, #0]
 8010048:	6878      	ldr	r0, [r7, #4]
 801004a:	4798      	blx	r3
 801004c:	4603      	mov	r3, r0
 801004e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	88db      	ldrh	r3, [r3, #6]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d110      	bne.n	801007a <USBD_StdItfReq+0x7a>
 8010058:	7bfb      	ldrb	r3, [r7, #15]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d10d      	bne.n	801007a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fd9d 	bl	8010b9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010064:	e009      	b.n	801007a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8010066:	6839      	ldr	r1, [r7, #0]
 8010068:	6878      	ldr	r0, [r7, #4]
 801006a:	f000 fccd 	bl	8010a08 <USBD_CtlError>
          break;
 801006e:	e004      	b.n	801007a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fcc8 	bl	8010a08 <USBD_CtlError>
          break;
 8010078:	e000      	b.n	801007c <USBD_StdItfReq+0x7c>
          break;
 801007a:	bf00      	nop
      }
      break;
 801007c:	e004      	b.n	8010088 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 fcc1 	bl	8010a08 <USBD_CtlError>
      break;
 8010086:	bf00      	nop
  }

  return ret;
 8010088:	7bfb      	ldrb	r3, [r7, #15]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3710      	adds	r7, #16
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}

08010092 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010092:	b580      	push	{r7, lr}
 8010094:	b084      	sub	sp, #16
 8010096:	af00      	add	r7, sp, #0
 8010098:	6078      	str	r0, [r7, #4]
 801009a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801009c:	2300      	movs	r3, #0
 801009e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	889b      	ldrh	r3, [r3, #4]
 80100a4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	781b      	ldrb	r3, [r3, #0]
 80100aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80100ae:	2b40      	cmp	r3, #64	; 0x40
 80100b0:	d007      	beq.n	80100c2 <USBD_StdEPReq+0x30>
 80100b2:	2b40      	cmp	r3, #64	; 0x40
 80100b4:	f200 8145 	bhi.w	8010342 <USBD_StdEPReq+0x2b0>
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d00c      	beq.n	80100d6 <USBD_StdEPReq+0x44>
 80100bc:	2b20      	cmp	r3, #32
 80100be:	f040 8140 	bne.w	8010342 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	4798      	blx	r3
 80100d0:	4603      	mov	r3, r0
 80100d2:	73fb      	strb	r3, [r7, #15]
      break;
 80100d4:	e13a      	b.n	801034c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	785b      	ldrb	r3, [r3, #1]
 80100da:	2b03      	cmp	r3, #3
 80100dc:	d007      	beq.n	80100ee <USBD_StdEPReq+0x5c>
 80100de:	2b03      	cmp	r3, #3
 80100e0:	f300 8129 	bgt.w	8010336 <USBD_StdEPReq+0x2a4>
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d07f      	beq.n	80101e8 <USBD_StdEPReq+0x156>
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d03c      	beq.n	8010166 <USBD_StdEPReq+0xd4>
 80100ec:	e123      	b.n	8010336 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b02      	cmp	r3, #2
 80100f8:	d002      	beq.n	8010100 <USBD_StdEPReq+0x6e>
 80100fa:	2b03      	cmp	r3, #3
 80100fc:	d016      	beq.n	801012c <USBD_StdEPReq+0x9a>
 80100fe:	e02c      	b.n	801015a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010100:	7bbb      	ldrb	r3, [r7, #14]
 8010102:	2b00      	cmp	r3, #0
 8010104:	d00d      	beq.n	8010122 <USBD_StdEPReq+0x90>
 8010106:	7bbb      	ldrb	r3, [r7, #14]
 8010108:	2b80      	cmp	r3, #128	; 0x80
 801010a:	d00a      	beq.n	8010122 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801010c:	7bbb      	ldrb	r3, [r7, #14]
 801010e:	4619      	mov	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f001 fbf9 	bl	8011908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010116:	2180      	movs	r1, #128	; 0x80
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f001 fbf5 	bl	8011908 <USBD_LL_StallEP>
 801011e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010120:	e020      	b.n	8010164 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8010122:	6839      	ldr	r1, [r7, #0]
 8010124:	6878      	ldr	r0, [r7, #4]
 8010126:	f000 fc6f 	bl	8010a08 <USBD_CtlError>
              break;
 801012a:	e01b      	b.n	8010164 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	885b      	ldrh	r3, [r3, #2]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d10e      	bne.n	8010152 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010134:	7bbb      	ldrb	r3, [r7, #14]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00b      	beq.n	8010152 <USBD_StdEPReq+0xc0>
 801013a:	7bbb      	ldrb	r3, [r7, #14]
 801013c:	2b80      	cmp	r3, #128	; 0x80
 801013e:	d008      	beq.n	8010152 <USBD_StdEPReq+0xc0>
 8010140:	683b      	ldr	r3, [r7, #0]
 8010142:	88db      	ldrh	r3, [r3, #6]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d104      	bne.n	8010152 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010148:	7bbb      	ldrb	r3, [r7, #14]
 801014a:	4619      	mov	r1, r3
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f001 fbdb 	bl	8011908 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 fd23 	bl	8010b9e <USBD_CtlSendStatus>

              break;
 8010158:	e004      	b.n	8010164 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801015a:	6839      	ldr	r1, [r7, #0]
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f000 fc53 	bl	8010a08 <USBD_CtlError>
              break;
 8010162:	bf00      	nop
          }
          break;
 8010164:	e0ec      	b.n	8010340 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801016c:	b2db      	uxtb	r3, r3
 801016e:	2b02      	cmp	r3, #2
 8010170:	d002      	beq.n	8010178 <USBD_StdEPReq+0xe6>
 8010172:	2b03      	cmp	r3, #3
 8010174:	d016      	beq.n	80101a4 <USBD_StdEPReq+0x112>
 8010176:	e030      	b.n	80101da <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010178:	7bbb      	ldrb	r3, [r7, #14]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d00d      	beq.n	801019a <USBD_StdEPReq+0x108>
 801017e:	7bbb      	ldrb	r3, [r7, #14]
 8010180:	2b80      	cmp	r3, #128	; 0x80
 8010182:	d00a      	beq.n	801019a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010184:	7bbb      	ldrb	r3, [r7, #14]
 8010186:	4619      	mov	r1, r3
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f001 fbbd 	bl	8011908 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801018e:	2180      	movs	r1, #128	; 0x80
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f001 fbb9 	bl	8011908 <USBD_LL_StallEP>
 8010196:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010198:	e025      	b.n	80101e6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 fc33 	bl	8010a08 <USBD_CtlError>
              break;
 80101a2:	e020      	b.n	80101e6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	885b      	ldrh	r3, [r3, #2]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d11b      	bne.n	80101e4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80101ac:	7bbb      	ldrb	r3, [r7, #14]
 80101ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d004      	beq.n	80101c0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80101b6:	7bbb      	ldrb	r3, [r7, #14]
 80101b8:	4619      	mov	r1, r3
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f001 fbc3 	bl	8011946 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 fcec 	bl	8010b9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	6839      	ldr	r1, [r7, #0]
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	4798      	blx	r3
 80101d4:	4603      	mov	r3, r0
 80101d6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80101d8:	e004      	b.n	80101e4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80101da:	6839      	ldr	r1, [r7, #0]
 80101dc:	6878      	ldr	r0, [r7, #4]
 80101de:	f000 fc13 	bl	8010a08 <USBD_CtlError>
              break;
 80101e2:	e000      	b.n	80101e6 <USBD_StdEPReq+0x154>
              break;
 80101e4:	bf00      	nop
          }
          break;
 80101e6:	e0ab      	b.n	8010340 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	2b02      	cmp	r3, #2
 80101f2:	d002      	beq.n	80101fa <USBD_StdEPReq+0x168>
 80101f4:	2b03      	cmp	r3, #3
 80101f6:	d032      	beq.n	801025e <USBD_StdEPReq+0x1cc>
 80101f8:	e097      	b.n	801032a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80101fa:	7bbb      	ldrb	r3, [r7, #14]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d007      	beq.n	8010210 <USBD_StdEPReq+0x17e>
 8010200:	7bbb      	ldrb	r3, [r7, #14]
 8010202:	2b80      	cmp	r3, #128	; 0x80
 8010204:	d004      	beq.n	8010210 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8010206:	6839      	ldr	r1, [r7, #0]
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fbfd 	bl	8010a08 <USBD_CtlError>
                break;
 801020e:	e091      	b.n	8010334 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010214:	2b00      	cmp	r3, #0
 8010216:	da0b      	bge.n	8010230 <USBD_StdEPReq+0x19e>
 8010218:	7bbb      	ldrb	r3, [r7, #14]
 801021a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801021e:	4613      	mov	r3, r2
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4413      	add	r3, r2
 8010224:	009b      	lsls	r3, r3, #2
 8010226:	3310      	adds	r3, #16
 8010228:	687a      	ldr	r2, [r7, #4]
 801022a:	4413      	add	r3, r2
 801022c:	3304      	adds	r3, #4
 801022e:	e00b      	b.n	8010248 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010230:	7bbb      	ldrb	r3, [r7, #14]
 8010232:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010236:	4613      	mov	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4413      	add	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	4413      	add	r3, r2
 8010246:	3304      	adds	r3, #4
 8010248:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	2200      	movs	r2, #0
 801024e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	2202      	movs	r2, #2
 8010254:	4619      	mov	r1, r3
 8010256:	6878      	ldr	r0, [r7, #4]
 8010258:	f000 fc47 	bl	8010aea <USBD_CtlSendData>
              break;
 801025c:	e06a      	b.n	8010334 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801025e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010262:	2b00      	cmp	r3, #0
 8010264:	da11      	bge.n	801028a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010266:	7bbb      	ldrb	r3, [r7, #14]
 8010268:	f003 020f 	and.w	r2, r3, #15
 801026c:	6879      	ldr	r1, [r7, #4]
 801026e:	4613      	mov	r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	4413      	add	r3, r2
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	440b      	add	r3, r1
 8010278:	3324      	adds	r3, #36	; 0x24
 801027a:	881b      	ldrh	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d117      	bne.n	80102b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010280:	6839      	ldr	r1, [r7, #0]
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f000 fbc0 	bl	8010a08 <USBD_CtlError>
                  break;
 8010288:	e054      	b.n	8010334 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801028a:	7bbb      	ldrb	r3, [r7, #14]
 801028c:	f003 020f 	and.w	r2, r3, #15
 8010290:	6879      	ldr	r1, [r7, #4]
 8010292:	4613      	mov	r3, r2
 8010294:	009b      	lsls	r3, r3, #2
 8010296:	4413      	add	r3, r2
 8010298:	009b      	lsls	r3, r3, #2
 801029a:	440b      	add	r3, r1
 801029c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d104      	bne.n	80102b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80102a6:	6839      	ldr	r1, [r7, #0]
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f000 fbad 	bl	8010a08 <USBD_CtlError>
                  break;
 80102ae:	e041      	b.n	8010334 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	da0b      	bge.n	80102d0 <USBD_StdEPReq+0x23e>
 80102b8:	7bbb      	ldrb	r3, [r7, #14]
 80102ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80102be:	4613      	mov	r3, r2
 80102c0:	009b      	lsls	r3, r3, #2
 80102c2:	4413      	add	r3, r2
 80102c4:	009b      	lsls	r3, r3, #2
 80102c6:	3310      	adds	r3, #16
 80102c8:	687a      	ldr	r2, [r7, #4]
 80102ca:	4413      	add	r3, r2
 80102cc:	3304      	adds	r3, #4
 80102ce:	e00b      	b.n	80102e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
 80102d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80102d6:	4613      	mov	r3, r2
 80102d8:	009b      	lsls	r3, r3, #2
 80102da:	4413      	add	r3, r2
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80102e2:	687a      	ldr	r2, [r7, #4]
 80102e4:	4413      	add	r3, r2
 80102e6:	3304      	adds	r3, #4
 80102e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80102ea:	7bbb      	ldrb	r3, [r7, #14]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d002      	beq.n	80102f6 <USBD_StdEPReq+0x264>
 80102f0:	7bbb      	ldrb	r3, [r7, #14]
 80102f2:	2b80      	cmp	r3, #128	; 0x80
 80102f4:	d103      	bne.n	80102fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	2200      	movs	r2, #0
 80102fa:	601a      	str	r2, [r3, #0]
 80102fc:	e00e      	b.n	801031c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80102fe:	7bbb      	ldrb	r3, [r7, #14]
 8010300:	4619      	mov	r1, r3
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f001 fb3e 	bl	8011984 <USBD_LL_IsStallEP>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d003      	beq.n	8010316 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2201      	movs	r2, #1
 8010312:	601a      	str	r2, [r3, #0]
 8010314:	e002      	b.n	801031c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	2200      	movs	r2, #0
 801031a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2202      	movs	r2, #2
 8010320:	4619      	mov	r1, r3
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f000 fbe1 	bl	8010aea <USBD_CtlSendData>
              break;
 8010328:	e004      	b.n	8010334 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801032a:	6839      	ldr	r1, [r7, #0]
 801032c:	6878      	ldr	r0, [r7, #4]
 801032e:	f000 fb6b 	bl	8010a08 <USBD_CtlError>
              break;
 8010332:	bf00      	nop
          }
          break;
 8010334:	e004      	b.n	8010340 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8010336:	6839      	ldr	r1, [r7, #0]
 8010338:	6878      	ldr	r0, [r7, #4]
 801033a:	f000 fb65 	bl	8010a08 <USBD_CtlError>
          break;
 801033e:	bf00      	nop
      }
      break;
 8010340:	e004      	b.n	801034c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8010342:	6839      	ldr	r1, [r7, #0]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 fb5f 	bl	8010a08 <USBD_CtlError>
      break;
 801034a:	bf00      	nop
  }

  return ret;
 801034c:	7bfb      	ldrb	r3, [r7, #15]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3710      	adds	r7, #16
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}
	...

08010358 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b084      	sub	sp, #16
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
 8010360:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010362:	2300      	movs	r3, #0
 8010364:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010366:	2300      	movs	r3, #0
 8010368:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801036a:	2300      	movs	r3, #0
 801036c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	885b      	ldrh	r3, [r3, #2]
 8010372:	0a1b      	lsrs	r3, r3, #8
 8010374:	b29b      	uxth	r3, r3
 8010376:	3b01      	subs	r3, #1
 8010378:	2b0e      	cmp	r3, #14
 801037a:	f200 8152 	bhi.w	8010622 <USBD_GetDescriptor+0x2ca>
 801037e:	a201      	add	r2, pc, #4	; (adr r2, 8010384 <USBD_GetDescriptor+0x2c>)
 8010380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010384:	080103f5 	.word	0x080103f5
 8010388:	0801040d 	.word	0x0801040d
 801038c:	0801044d 	.word	0x0801044d
 8010390:	08010623 	.word	0x08010623
 8010394:	08010623 	.word	0x08010623
 8010398:	080105c3 	.word	0x080105c3
 801039c:	080105ef 	.word	0x080105ef
 80103a0:	08010623 	.word	0x08010623
 80103a4:	08010623 	.word	0x08010623
 80103a8:	08010623 	.word	0x08010623
 80103ac:	08010623 	.word	0x08010623
 80103b0:	08010623 	.word	0x08010623
 80103b4:	08010623 	.word	0x08010623
 80103b8:	08010623 	.word	0x08010623
 80103bc:	080103c1 	.word	0x080103c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103c6:	69db      	ldr	r3, [r3, #28]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00b      	beq.n	80103e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103d2:	69db      	ldr	r3, [r3, #28]
 80103d4:	687a      	ldr	r2, [r7, #4]
 80103d6:	7c12      	ldrb	r2, [r2, #16]
 80103d8:	f107 0108 	add.w	r1, r7, #8
 80103dc:	4610      	mov	r0, r2
 80103de:	4798      	blx	r3
 80103e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80103e2:	e126      	b.n	8010632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80103e4:	6839      	ldr	r1, [r7, #0]
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 fb0e 	bl	8010a08 <USBD_CtlError>
        err++;
 80103ec:	7afb      	ldrb	r3, [r7, #11]
 80103ee:	3301      	adds	r3, #1
 80103f0:	72fb      	strb	r3, [r7, #11]
      break;
 80103f2:	e11e      	b.n	8010632 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	687a      	ldr	r2, [r7, #4]
 80103fe:	7c12      	ldrb	r2, [r2, #16]
 8010400:	f107 0108 	add.w	r1, r7, #8
 8010404:	4610      	mov	r0, r2
 8010406:	4798      	blx	r3
 8010408:	60f8      	str	r0, [r7, #12]
      break;
 801040a:	e112      	b.n	8010632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7c1b      	ldrb	r3, [r3, #16]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d10d      	bne.n	8010430 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801041a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801041c:	f107 0208 	add.w	r2, r7, #8
 8010420:	4610      	mov	r0, r2
 8010422:	4798      	blx	r3
 8010424:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	3301      	adds	r3, #1
 801042a:	2202      	movs	r2, #2
 801042c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801042e:	e100      	b.n	8010632 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010438:	f107 0208 	add.w	r2, r7, #8
 801043c:	4610      	mov	r0, r2
 801043e:	4798      	blx	r3
 8010440:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	3301      	adds	r3, #1
 8010446:	2202      	movs	r2, #2
 8010448:	701a      	strb	r2, [r3, #0]
      break;
 801044a:	e0f2      	b.n	8010632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	885b      	ldrh	r3, [r3, #2]
 8010450:	b2db      	uxtb	r3, r3
 8010452:	2b05      	cmp	r3, #5
 8010454:	f200 80ac 	bhi.w	80105b0 <USBD_GetDescriptor+0x258>
 8010458:	a201      	add	r2, pc, #4	; (adr r2, 8010460 <USBD_GetDescriptor+0x108>)
 801045a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801045e:	bf00      	nop
 8010460:	08010479 	.word	0x08010479
 8010464:	080104ad 	.word	0x080104ad
 8010468:	080104e1 	.word	0x080104e1
 801046c:	08010515 	.word	0x08010515
 8010470:	08010549 	.word	0x08010549
 8010474:	0801057d 	.word	0x0801057d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00b      	beq.n	801049c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	7c12      	ldrb	r2, [r2, #16]
 8010490:	f107 0108 	add.w	r1, r7, #8
 8010494:	4610      	mov	r0, r2
 8010496:	4798      	blx	r3
 8010498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801049a:	e091      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801049c:	6839      	ldr	r1, [r7, #0]
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 fab2 	bl	8010a08 <USBD_CtlError>
            err++;
 80104a4:	7afb      	ldrb	r3, [r7, #11]
 80104a6:	3301      	adds	r3, #1
 80104a8:	72fb      	strb	r3, [r7, #11]
          break;
 80104aa:	e089      	b.n	80105c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00b      	beq.n	80104d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104be:	689b      	ldr	r3, [r3, #8]
 80104c0:	687a      	ldr	r2, [r7, #4]
 80104c2:	7c12      	ldrb	r2, [r2, #16]
 80104c4:	f107 0108 	add.w	r1, r7, #8
 80104c8:	4610      	mov	r0, r2
 80104ca:	4798      	blx	r3
 80104cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80104ce:	e077      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 fa98 	bl	8010a08 <USBD_CtlError>
            err++;
 80104d8:	7afb      	ldrb	r3, [r7, #11]
 80104da:	3301      	adds	r3, #1
 80104dc:	72fb      	strb	r3, [r7, #11]
          break;
 80104de:	e06f      	b.n	80105c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00b      	beq.n	8010504 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	7c12      	ldrb	r2, [r2, #16]
 80104f8:	f107 0108 	add.w	r1, r7, #8
 80104fc:	4610      	mov	r0, r2
 80104fe:	4798      	blx	r3
 8010500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010502:	e05d      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010504:	6839      	ldr	r1, [r7, #0]
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	f000 fa7e 	bl	8010a08 <USBD_CtlError>
            err++;
 801050c:	7afb      	ldrb	r3, [r7, #11]
 801050e:	3301      	adds	r3, #1
 8010510:	72fb      	strb	r3, [r7, #11]
          break;
 8010512:	e055      	b.n	80105c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801051a:	691b      	ldr	r3, [r3, #16]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00b      	beq.n	8010538 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010526:	691b      	ldr	r3, [r3, #16]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	7c12      	ldrb	r2, [r2, #16]
 801052c:	f107 0108 	add.w	r1, r7, #8
 8010530:	4610      	mov	r0, r2
 8010532:	4798      	blx	r3
 8010534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010536:	e043      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f000 fa64 	bl	8010a08 <USBD_CtlError>
            err++;
 8010540:	7afb      	ldrb	r3, [r7, #11]
 8010542:	3301      	adds	r3, #1
 8010544:	72fb      	strb	r3, [r7, #11]
          break;
 8010546:	e03b      	b.n	80105c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00b      	beq.n	801056c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	7c12      	ldrb	r2, [r2, #16]
 8010560:	f107 0108 	add.w	r1, r7, #8
 8010564:	4610      	mov	r0, r2
 8010566:	4798      	blx	r3
 8010568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801056a:	e029      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801056c:	6839      	ldr	r1, [r7, #0]
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 fa4a 	bl	8010a08 <USBD_CtlError>
            err++;
 8010574:	7afb      	ldrb	r3, [r7, #11]
 8010576:	3301      	adds	r3, #1
 8010578:	72fb      	strb	r3, [r7, #11]
          break;
 801057a:	e021      	b.n	80105c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010582:	699b      	ldr	r3, [r3, #24]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00b      	beq.n	80105a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801058e:	699b      	ldr	r3, [r3, #24]
 8010590:	687a      	ldr	r2, [r7, #4]
 8010592:	7c12      	ldrb	r2, [r2, #16]
 8010594:	f107 0108 	add.w	r1, r7, #8
 8010598:	4610      	mov	r0, r2
 801059a:	4798      	blx	r3
 801059c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801059e:	e00f      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80105a0:	6839      	ldr	r1, [r7, #0]
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 fa30 	bl	8010a08 <USBD_CtlError>
            err++;
 80105a8:	7afb      	ldrb	r3, [r7, #11]
 80105aa:	3301      	adds	r3, #1
 80105ac:	72fb      	strb	r3, [r7, #11]
          break;
 80105ae:	e007      	b.n	80105c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80105b0:	6839      	ldr	r1, [r7, #0]
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f000 fa28 	bl	8010a08 <USBD_CtlError>
          err++;
 80105b8:	7afb      	ldrb	r3, [r7, #11]
 80105ba:	3301      	adds	r3, #1
 80105bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80105be:	bf00      	nop
      }
      break;
 80105c0:	e037      	b.n	8010632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	7c1b      	ldrb	r3, [r3, #16]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d109      	bne.n	80105de <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d2:	f107 0208 	add.w	r2, r7, #8
 80105d6:	4610      	mov	r0, r2
 80105d8:	4798      	blx	r3
 80105da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80105dc:	e029      	b.n	8010632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80105de:	6839      	ldr	r1, [r7, #0]
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f000 fa11 	bl	8010a08 <USBD_CtlError>
        err++;
 80105e6:	7afb      	ldrb	r3, [r7, #11]
 80105e8:	3301      	adds	r3, #1
 80105ea:	72fb      	strb	r3, [r7, #11]
      break;
 80105ec:	e021      	b.n	8010632 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	7c1b      	ldrb	r3, [r3, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d10d      	bne.n	8010612 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105fe:	f107 0208 	add.w	r2, r7, #8
 8010602:	4610      	mov	r0, r2
 8010604:	4798      	blx	r3
 8010606:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	3301      	adds	r3, #1
 801060c:	2207      	movs	r2, #7
 801060e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010610:	e00f      	b.n	8010632 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010612:	6839      	ldr	r1, [r7, #0]
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 f9f7 	bl	8010a08 <USBD_CtlError>
        err++;
 801061a:	7afb      	ldrb	r3, [r7, #11]
 801061c:	3301      	adds	r3, #1
 801061e:	72fb      	strb	r3, [r7, #11]
      break;
 8010620:	e007      	b.n	8010632 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010622:	6839      	ldr	r1, [r7, #0]
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f000 f9ef 	bl	8010a08 <USBD_CtlError>
      err++;
 801062a:	7afb      	ldrb	r3, [r7, #11]
 801062c:	3301      	adds	r3, #1
 801062e:	72fb      	strb	r3, [r7, #11]
      break;
 8010630:	bf00      	nop
  }

  if (err != 0U)
 8010632:	7afb      	ldrb	r3, [r7, #11]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d11e      	bne.n	8010676 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	88db      	ldrh	r3, [r3, #6]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d016      	beq.n	801066e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010640:	893b      	ldrh	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d00e      	beq.n	8010664 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	88da      	ldrh	r2, [r3, #6]
 801064a:	893b      	ldrh	r3, [r7, #8]
 801064c:	4293      	cmp	r3, r2
 801064e:	bf28      	it	cs
 8010650:	4613      	movcs	r3, r2
 8010652:	b29b      	uxth	r3, r3
 8010654:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010656:	893b      	ldrh	r3, [r7, #8]
 8010658:	461a      	mov	r2, r3
 801065a:	68f9      	ldr	r1, [r7, #12]
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f000 fa44 	bl	8010aea <USBD_CtlSendData>
 8010662:	e009      	b.n	8010678 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010664:	6839      	ldr	r1, [r7, #0]
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f000 f9ce 	bl	8010a08 <USBD_CtlError>
 801066c:	e004      	b.n	8010678 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 fa95 	bl	8010b9e <USBD_CtlSendStatus>
 8010674:	e000      	b.n	8010678 <USBD_GetDescriptor+0x320>
    return;
 8010676:	bf00      	nop
  }
}
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop

08010680 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	889b      	ldrh	r3, [r3, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d131      	bne.n	80106f6 <USBD_SetAddress+0x76>
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	88db      	ldrh	r3, [r3, #6]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d12d      	bne.n	80106f6 <USBD_SetAddress+0x76>
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	885b      	ldrh	r3, [r3, #2]
 801069e:	2b7f      	cmp	r3, #127	; 0x7f
 80106a0:	d829      	bhi.n	80106f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	885b      	ldrh	r3, [r3, #2]
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106b4:	b2db      	uxtb	r3, r3
 80106b6:	2b03      	cmp	r3, #3
 80106b8:	d104      	bne.n	80106c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80106ba:	6839      	ldr	r1, [r7, #0]
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f000 f9a3 	bl	8010a08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106c2:	e01d      	b.n	8010700 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	7bfa      	ldrb	r2, [r7, #15]
 80106c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
 80106ce:	4619      	mov	r1, r3
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f001 f984 	bl	80119de <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 fa61 	bl	8010b9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80106dc:	7bfb      	ldrb	r3, [r7, #15]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d004      	beq.n	80106ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2202      	movs	r2, #2
 80106e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106ea:	e009      	b.n	8010700 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2201      	movs	r2, #1
 80106f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106f4:	e004      	b.n	8010700 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80106f6:	6839      	ldr	r1, [r7, #0]
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 f985 	bl	8010a08 <USBD_CtlError>
  }
}
 80106fe:	bf00      	nop
 8010700:	bf00      	nop
 8010702:	3710      	adds	r7, #16
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b084      	sub	sp, #16
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	885b      	ldrh	r3, [r3, #2]
 801071a:	b2da      	uxtb	r2, r3
 801071c:	4b4c      	ldr	r3, [pc, #304]	; (8010850 <USBD_SetConfig+0x148>)
 801071e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010720:	4b4b      	ldr	r3, [pc, #300]	; (8010850 <USBD_SetConfig+0x148>)
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	2b01      	cmp	r3, #1
 8010726:	d905      	bls.n	8010734 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010728:	6839      	ldr	r1, [r7, #0]
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f96c 	bl	8010a08 <USBD_CtlError>
    return USBD_FAIL;
 8010730:	2303      	movs	r3, #3
 8010732:	e088      	b.n	8010846 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801073a:	b2db      	uxtb	r3, r3
 801073c:	2b02      	cmp	r3, #2
 801073e:	d002      	beq.n	8010746 <USBD_SetConfig+0x3e>
 8010740:	2b03      	cmp	r3, #3
 8010742:	d025      	beq.n	8010790 <USBD_SetConfig+0x88>
 8010744:	e071      	b.n	801082a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010746:	4b42      	ldr	r3, [pc, #264]	; (8010850 <USBD_SetConfig+0x148>)
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d01c      	beq.n	8010788 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801074e:	4b40      	ldr	r3, [pc, #256]	; (8010850 <USBD_SetConfig+0x148>)
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	461a      	mov	r2, r3
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010758:	4b3d      	ldr	r3, [pc, #244]	; (8010850 <USBD_SetConfig+0x148>)
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	4619      	mov	r1, r3
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff f992 	bl	800fa88 <USBD_SetClassConfig>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d004      	beq.n	8010778 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 f949 	bl	8010a08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010776:	e065      	b.n	8010844 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f000 fa10 	bl	8010b9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2203      	movs	r2, #3
 8010782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010786:	e05d      	b.n	8010844 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fa08 	bl	8010b9e <USBD_CtlSendStatus>
      break;
 801078e:	e059      	b.n	8010844 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010790:	4b2f      	ldr	r3, [pc, #188]	; (8010850 <USBD_SetConfig+0x148>)
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d112      	bne.n	80107be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2202      	movs	r2, #2
 801079c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80107a0:	4b2b      	ldr	r3, [pc, #172]	; (8010850 <USBD_SetConfig+0x148>)
 80107a2:	781b      	ldrb	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80107aa:	4b29      	ldr	r3, [pc, #164]	; (8010850 <USBD_SetConfig+0x148>)
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	4619      	mov	r1, r3
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7ff f985 	bl	800fac0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f000 f9f1 	bl	8010b9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80107bc:	e042      	b.n	8010844 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80107be:	4b24      	ldr	r3, [pc, #144]	; (8010850 <USBD_SetConfig+0x148>)
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d02a      	beq.n	8010822 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	b2db      	uxtb	r3, r3
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff f973 	bl	800fac0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80107da:	4b1d      	ldr	r3, [pc, #116]	; (8010850 <USBD_SetConfig+0x148>)
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	461a      	mov	r2, r3
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80107e4:	4b1a      	ldr	r3, [pc, #104]	; (8010850 <USBD_SetConfig+0x148>)
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	4619      	mov	r1, r3
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f7ff f94c 	bl	800fa88 <USBD_SetClassConfig>
 80107f0:	4603      	mov	r3, r0
 80107f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00f      	beq.n	801081a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80107fa:	6839      	ldr	r1, [r7, #0]
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f000 f903 	bl	8010a08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	b2db      	uxtb	r3, r3
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff f958 	bl	800fac0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2202      	movs	r2, #2
 8010814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010818:	e014      	b.n	8010844 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 f9bf 	bl	8010b9e <USBD_CtlSendStatus>
      break;
 8010820:	e010      	b.n	8010844 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 f9bb 	bl	8010b9e <USBD_CtlSendStatus>
      break;
 8010828:	e00c      	b.n	8010844 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801082a:	6839      	ldr	r1, [r7, #0]
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f000 f8eb 	bl	8010a08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010832:	4b07      	ldr	r3, [pc, #28]	; (8010850 <USBD_SetConfig+0x148>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	4619      	mov	r1, r3
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7ff f941 	bl	800fac0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801083e:	2303      	movs	r3, #3
 8010840:	73fb      	strb	r3, [r7, #15]
      break;
 8010842:	bf00      	nop
  }

  return ret;
 8010844:	7bfb      	ldrb	r3, [r7, #15]
}
 8010846:	4618      	mov	r0, r3
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}
 801084e:	bf00      	nop
 8010850:	200005dc 	.word	0x200005dc

08010854 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	88db      	ldrh	r3, [r3, #6]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d004      	beq.n	8010870 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010866:	6839      	ldr	r1, [r7, #0]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f8cd 	bl	8010a08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801086e:	e023      	b.n	80108b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010876:	b2db      	uxtb	r3, r3
 8010878:	2b02      	cmp	r3, #2
 801087a:	dc02      	bgt.n	8010882 <USBD_GetConfig+0x2e>
 801087c:	2b00      	cmp	r3, #0
 801087e:	dc03      	bgt.n	8010888 <USBD_GetConfig+0x34>
 8010880:	e015      	b.n	80108ae <USBD_GetConfig+0x5a>
 8010882:	2b03      	cmp	r3, #3
 8010884:	d00b      	beq.n	801089e <USBD_GetConfig+0x4a>
 8010886:	e012      	b.n	80108ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	3308      	adds	r3, #8
 8010892:	2201      	movs	r2, #1
 8010894:	4619      	mov	r1, r3
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 f927 	bl	8010aea <USBD_CtlSendData>
        break;
 801089c:	e00c      	b.n	80108b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	3304      	adds	r3, #4
 80108a2:	2201      	movs	r2, #1
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 f91f 	bl	8010aea <USBD_CtlSendData>
        break;
 80108ac:	e004      	b.n	80108b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 f8a9 	bl	8010a08 <USBD_CtlError>
        break;
 80108b6:	bf00      	nop
}
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}

080108c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b082      	sub	sp, #8
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
 80108c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	3b01      	subs	r3, #1
 80108d4:	2b02      	cmp	r3, #2
 80108d6:	d81e      	bhi.n	8010916 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	88db      	ldrh	r3, [r3, #6]
 80108dc:	2b02      	cmp	r3, #2
 80108de:	d004      	beq.n	80108ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80108e0:	6839      	ldr	r1, [r7, #0]
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 f890 	bl	8010a08 <USBD_CtlError>
        break;
 80108e8:	e01a      	b.n	8010920 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2201      	movs	r2, #1
 80108ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	f043 0202 	orr.w	r2, r3, #2
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	330c      	adds	r3, #12
 801090a:	2202      	movs	r2, #2
 801090c:	4619      	mov	r1, r3
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f8eb 	bl	8010aea <USBD_CtlSendData>
      break;
 8010914:	e004      	b.n	8010920 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 f875 	bl	8010a08 <USBD_CtlError>
      break;
 801091e:	bf00      	nop
  }
}
 8010920:	bf00      	nop
 8010922:	3708      	adds	r7, #8
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b082      	sub	sp, #8
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	885b      	ldrh	r3, [r3, #2]
 8010936:	2b01      	cmp	r3, #1
 8010938:	d106      	bne.n	8010948 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2201      	movs	r2, #1
 801093e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f92b 	bl	8010b9e <USBD_CtlSendStatus>
  }
}
 8010948:	bf00      	nop
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010960:	b2db      	uxtb	r3, r3
 8010962:	3b01      	subs	r3, #1
 8010964:	2b02      	cmp	r3, #2
 8010966:	d80b      	bhi.n	8010980 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010968:	683b      	ldr	r3, [r7, #0]
 801096a:	885b      	ldrh	r3, [r3, #2]
 801096c:	2b01      	cmp	r3, #1
 801096e:	d10c      	bne.n	801098a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 f910 	bl	8010b9e <USBD_CtlSendStatus>
      }
      break;
 801097e:	e004      	b.n	801098a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 f840 	bl	8010a08 <USBD_CtlError>
      break;
 8010988:	e000      	b.n	801098c <USBD_ClrFeature+0x3c>
      break;
 801098a:	bf00      	nop
  }
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	781a      	ldrb	r2, [r3, #0]
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	3301      	adds	r3, #1
 80109ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	781a      	ldrb	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	3301      	adds	r3, #1
 80109bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f7ff fa92 	bl	800fee8 <SWAPBYTE>
 80109c4:	4603      	mov	r3, r0
 80109c6:	461a      	mov	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	3301      	adds	r3, #1
 80109d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3301      	adds	r3, #1
 80109d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7ff fa85 	bl	800fee8 <SWAPBYTE>
 80109de:	4603      	mov	r3, r0
 80109e0:	461a      	mov	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	3301      	adds	r3, #1
 80109ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	3301      	adds	r3, #1
 80109f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80109f2:	68f8      	ldr	r0, [r7, #12]
 80109f4:	f7ff fa78 	bl	800fee8 <SWAPBYTE>
 80109f8:	4603      	mov	r3, r0
 80109fa:	461a      	mov	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	80da      	strh	r2, [r3, #6]
}
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a12:	2180      	movs	r1, #128	; 0x80
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 ff77 	bl	8011908 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010a1a:	2100      	movs	r1, #0
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f000 ff73 	bl	8011908 <USBD_LL_StallEP>
}
 8010a22:	bf00      	nop
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b086      	sub	sp, #24
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	60f8      	str	r0, [r7, #12]
 8010a32:	60b9      	str	r1, [r7, #8]
 8010a34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010a36:	2300      	movs	r3, #0
 8010a38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d036      	beq.n	8010aae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010a44:	6938      	ldr	r0, [r7, #16]
 8010a46:	f000 f836 	bl	8010ab6 <USBD_GetLen>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010a58:	7dfb      	ldrb	r3, [r7, #23]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	7812      	ldrb	r2, [r2, #0]
 8010a62:	701a      	strb	r2, [r3, #0]
  idx++;
 8010a64:	7dfb      	ldrb	r3, [r7, #23]
 8010a66:	3301      	adds	r3, #1
 8010a68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010a6a:	7dfb      	ldrb	r3, [r7, #23]
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	4413      	add	r3, r2
 8010a70:	2203      	movs	r2, #3
 8010a72:	701a      	strb	r2, [r3, #0]
  idx++;
 8010a74:	7dfb      	ldrb	r3, [r7, #23]
 8010a76:	3301      	adds	r3, #1
 8010a78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010a7a:	e013      	b.n	8010aa4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010a7c:	7dfb      	ldrb	r3, [r7, #23]
 8010a7e:	68ba      	ldr	r2, [r7, #8]
 8010a80:	4413      	add	r3, r2
 8010a82:	693a      	ldr	r2, [r7, #16]
 8010a84:	7812      	ldrb	r2, [r2, #0]
 8010a86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	613b      	str	r3, [r7, #16]
    idx++;
 8010a8e:	7dfb      	ldrb	r3, [r7, #23]
 8010a90:	3301      	adds	r3, #1
 8010a92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010a94:	7dfb      	ldrb	r3, [r7, #23]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	4413      	add	r3, r2
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	701a      	strb	r2, [r3, #0]
    idx++;
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1e7      	bne.n	8010a7c <USBD_GetString+0x52>
 8010aac:	e000      	b.n	8010ab0 <USBD_GetString+0x86>
    return;
 8010aae:	bf00      	nop
  }
}
 8010ab0:	3718      	adds	r7, #24
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010ab6:	b480      	push	{r7}
 8010ab8:	b085      	sub	sp, #20
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ac6:	e005      	b.n	8010ad4 <USBD_GetLen+0x1e>
  {
    len++;
 8010ac8:	7bfb      	ldrb	r3, [r7, #15]
 8010aca:	3301      	adds	r3, #1
 8010acc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1f5      	bne.n	8010ac8 <USBD_GetLen+0x12>
  }

  return len;
 8010adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b084      	sub	sp, #16
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	60f8      	str	r0, [r7, #12]
 8010af2:	60b9      	str	r1, [r7, #8]
 8010af4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	2202      	movs	r2, #2
 8010afa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	68ba      	ldr	r2, [r7, #8]
 8010b0e:	2100      	movs	r1, #0
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f000 ff83 	bl	8011a1c <USBD_LL_Transmit>

  return USBD_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	68ba      	ldr	r2, [r7, #8]
 8010b30:	2100      	movs	r1, #0
 8010b32:	68f8      	ldr	r0, [r7, #12]
 8010b34:	f000 ff72 	bl	8011a1c <USBD_LL_Transmit>

  return USBD_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3710      	adds	r7, #16
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010b42:	b580      	push	{r7, lr}
 8010b44:	b084      	sub	sp, #16
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	60f8      	str	r0, [r7, #12]
 8010b4a:	60b9      	str	r1, [r7, #8]
 8010b4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2203      	movs	r2, #3
 8010b52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	687a      	ldr	r2, [r7, #4]
 8010b5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f000 ff76 	bl	8011a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b72:	2300      	movs	r3, #0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	68ba      	ldr	r2, [r7, #8]
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	68f8      	ldr	r0, [r7, #12]
 8010b90:	f000 ff65 	bl	8011a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b082      	sub	sp, #8
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2204      	movs	r2, #4
 8010baa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010bae:	2300      	movs	r3, #0
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 ff31 	bl	8011a1c <USBD_LL_Transmit>

  return USBD_OK;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2205      	movs	r2, #5
 8010bd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	2100      	movs	r1, #0
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 ff3f 	bl	8011a5e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010bea:	b480      	push	{r7}
 8010bec:	b085      	sub	sp, #20
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	685b      	ldr	r3, [r3, #4]
 8010bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	68fa      	ldr	r2, [r7, #12]
 8010bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	689a      	ldr	r2, [r3, #8]
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	689b      	ldr	r3, [r3, #8]
 8010c0c:	683a      	ldr	r2, [r7, #0]
 8010c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	1c5a      	adds	r2, r3, #1
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	601a      	str	r2, [r3, #0]
}
 8010c26:	bf00      	nop
 8010c28:	3714      	adds	r7, #20
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr

08010c32 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010c32:	b480      	push	{r7}
 8010c34:	b085      	sub	sp, #20
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	6892      	ldr	r2, [r2, #8]
 8010c48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	6852      	ldr	r2, [r2, #4]
 8010c52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d103      	bne.n	8010c66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	689a      	ldr	r2, [r3, #8]
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	1e5a      	subs	r2, r3, #1
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3714      	adds	r7, #20
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c84:	4770      	bx	lr

08010c86 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c86:	b580      	push	{r7, lr}
 8010c88:	b08e      	sub	sp, #56	; 0x38
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
 8010c8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d10a      	bne.n	8010cb0 <xQueueGiveFromISR+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9e:	f383 8811 	msr	BASEPRI, r3
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010cac:	bf00      	nop
 8010cae:	e7fe      	b.n	8010cae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d00a      	beq.n	8010cce <xQueueGiveFromISR+0x48>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	f383 8811 	msr	BASEPRI, r3
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	f3bf 8f4f 	dsb	sy
 8010cc8:	61fb      	str	r3, [r7, #28]
}
 8010cca:	bf00      	nop
 8010ccc:	e7fe      	b.n	8010ccc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d103      	bne.n	8010cde <xQueueGiveFromISR+0x58>
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	689b      	ldr	r3, [r3, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d101      	bne.n	8010ce2 <xQueueGiveFromISR+0x5c>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <xQueueGiveFromISR+0x5e>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10a      	bne.n	8010cfe <xQueueGiveFromISR+0x78>
	__asm volatile
 8010ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cec:	f383 8811 	msr	BASEPRI, r3
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	f3bf 8f4f 	dsb	sy
 8010cf8:	61bb      	str	r3, [r7, #24]
}
 8010cfa:	bf00      	nop
 8010cfc:	e7fe      	b.n	8010cfc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cfe:	f000 fa3d 	bl	801117c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d02:	f3ef 8211 	mrs	r2, BASEPRI
 8010d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	617a      	str	r2, [r7, #20]
 8010d18:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010d1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d22b      	bcs.n	8010d86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	1c5a      	adds	r2, r3, #1
 8010d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d48:	d112      	bne.n	8010d70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d016      	beq.n	8010d80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d54:	3324      	adds	r3, #36	; 0x24
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 f91a 	bl	8010f90 <xTaskRemoveFromEventList>
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00e      	beq.n	8010d80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00b      	beq.n	8010d80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	601a      	str	r2, [r3, #0]
 8010d6e:	e007      	b.n	8010d80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d74:	3301      	adds	r3, #1
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	b25a      	sxtb	r2, r3
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d80:	2301      	movs	r3, #1
 8010d82:	637b      	str	r3, [r7, #52]	; 0x34
 8010d84:	e001      	b.n	8010d8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	637b      	str	r3, [r7, #52]	; 0x34
 8010d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d8c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010d94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3738      	adds	r7, #56	; 0x38
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}

08010da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b086      	sub	sp, #24
 8010da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010da6:	2300      	movs	r3, #0
 8010da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010daa:	4b3f      	ldr	r3, [pc, #252]	; (8010ea8 <xTaskIncrementTick+0x108>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d16f      	bne.n	8010e92 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010db2:	4b3e      	ldr	r3, [pc, #248]	; (8010eac <xTaskIncrementTick+0x10c>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	3301      	adds	r3, #1
 8010db8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010dba:	4a3c      	ldr	r2, [pc, #240]	; (8010eac <xTaskIncrementTick+0x10c>)
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d120      	bne.n	8010e08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010dc6:	4b3a      	ldr	r3, [pc, #232]	; (8010eb0 <xTaskIncrementTick+0x110>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00a      	beq.n	8010de6 <xTaskIncrementTick+0x46>
	__asm volatile
 8010dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd4:	f383 8811 	msr	BASEPRI, r3
 8010dd8:	f3bf 8f6f 	isb	sy
 8010ddc:	f3bf 8f4f 	dsb	sy
 8010de0:	603b      	str	r3, [r7, #0]
}
 8010de2:	bf00      	nop
 8010de4:	e7fe      	b.n	8010de4 <xTaskIncrementTick+0x44>
 8010de6:	4b32      	ldr	r3, [pc, #200]	; (8010eb0 <xTaskIncrementTick+0x110>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	4b31      	ldr	r3, [pc, #196]	; (8010eb4 <xTaskIncrementTick+0x114>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a2f      	ldr	r2, [pc, #188]	; (8010eb0 <xTaskIncrementTick+0x110>)
 8010df2:	6013      	str	r3, [r2, #0]
 8010df4:	4a2f      	ldr	r2, [pc, #188]	; (8010eb4 <xTaskIncrementTick+0x114>)
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6013      	str	r3, [r2, #0]
 8010dfa:	4b2f      	ldr	r3, [pc, #188]	; (8010eb8 <xTaskIncrementTick+0x118>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	3301      	adds	r3, #1
 8010e00:	4a2d      	ldr	r2, [pc, #180]	; (8010eb8 <xTaskIncrementTick+0x118>)
 8010e02:	6013      	str	r3, [r2, #0]
 8010e04:	f000 f926 	bl	8011054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e08:	4b2c      	ldr	r3, [pc, #176]	; (8010ebc <xTaskIncrementTick+0x11c>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d344      	bcc.n	8010e9c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e12:	4b27      	ldr	r3, [pc, #156]	; (8010eb0 <xTaskIncrementTick+0x110>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d104      	bne.n	8010e26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e1c:	4b27      	ldr	r3, [pc, #156]	; (8010ebc <xTaskIncrementTick+0x11c>)
 8010e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010e22:	601a      	str	r2, [r3, #0]
					break;
 8010e24:	e03a      	b.n	8010e9c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e26:	4b22      	ldr	r3, [pc, #136]	; (8010eb0 <xTaskIncrementTick+0x110>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e36:	693a      	ldr	r2, [r7, #16]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d203      	bcs.n	8010e46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e3e:	4a1f      	ldr	r2, [pc, #124]	; (8010ebc <xTaskIncrementTick+0x11c>)
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e44:	e02a      	b.n	8010e9c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e46:	68bb      	ldr	r3, [r7, #8]
 8010e48:	3304      	adds	r3, #4
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f7ff fef1 	bl	8010c32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d004      	beq.n	8010e62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	3318      	adds	r3, #24
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7ff fee8 	bl	8010c32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e66:	2201      	movs	r2, #1
 8010e68:	409a      	lsls	r2, r3
 8010e6a:	4b15      	ldr	r3, [pc, #84]	; (8010ec0 <xTaskIncrementTick+0x120>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4313      	orrs	r3, r2
 8010e70:	4a13      	ldr	r2, [pc, #76]	; (8010ec0 <xTaskIncrementTick+0x120>)
 8010e72:	6013      	str	r3, [r2, #0]
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e78:	4613      	mov	r3, r2
 8010e7a:	009b      	lsls	r3, r3, #2
 8010e7c:	4413      	add	r3, r2
 8010e7e:	009b      	lsls	r3, r3, #2
 8010e80:	4a10      	ldr	r2, [pc, #64]	; (8010ec4 <xTaskIncrementTick+0x124>)
 8010e82:	441a      	add	r2, r3
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	3304      	adds	r3, #4
 8010e88:	4619      	mov	r1, r3
 8010e8a:	4610      	mov	r0, r2
 8010e8c:	f7ff fead 	bl	8010bea <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e90:	e7bf      	b.n	8010e12 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010e92:	4b0d      	ldr	r3, [pc, #52]	; (8010ec8 <xTaskIncrementTick+0x128>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3301      	adds	r3, #1
 8010e98:	4a0b      	ldr	r2, [pc, #44]	; (8010ec8 <xTaskIncrementTick+0x128>)
 8010e9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010e9c:	697b      	ldr	r3, [r7, #20]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3718      	adds	r7, #24
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200006a4 	.word	0x200006a4
 8010eac:	2000068c 	.word	0x2000068c
 8010eb0:	20000670 	.word	0x20000670
 8010eb4:	20000674 	.word	0x20000674
 8010eb8:	2000069c 	.word	0x2000069c
 8010ebc:	200006a0 	.word	0x200006a0
 8010ec0:	20000690 	.word	0x20000690
 8010ec4:	200005e4 	.word	0x200005e4
 8010ec8:	20000694 	.word	0x20000694

08010ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b087      	sub	sp, #28
 8010ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ed2:	4b29      	ldr	r3, [pc, #164]	; (8010f78 <vTaskSwitchContext+0xac>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d003      	beq.n	8010ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010eda:	4b28      	ldr	r3, [pc, #160]	; (8010f7c <vTaskSwitchContext+0xb0>)
 8010edc:	2201      	movs	r2, #1
 8010ede:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010ee0:	e044      	b.n	8010f6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8010ee2:	4b26      	ldr	r3, [pc, #152]	; (8010f7c <vTaskSwitchContext+0xb0>)
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ee8:	4b25      	ldr	r3, [pc, #148]	; (8010f80 <vTaskSwitchContext+0xb4>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	fab3 f383 	clz	r3, r3
 8010ef4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010ef6:	7afb      	ldrb	r3, [r7, #11]
 8010ef8:	f1c3 031f 	rsb	r3, r3, #31
 8010efc:	617b      	str	r3, [r7, #20]
 8010efe:	4921      	ldr	r1, [pc, #132]	; (8010f84 <vTaskSwitchContext+0xb8>)
 8010f00:	697a      	ldr	r2, [r7, #20]
 8010f02:	4613      	mov	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4413      	add	r3, r2
 8010f08:	009b      	lsls	r3, r3, #2
 8010f0a:	440b      	add	r3, r1
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d10a      	bne.n	8010f28 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f16:	f383 8811 	msr	BASEPRI, r3
 8010f1a:	f3bf 8f6f 	isb	sy
 8010f1e:	f3bf 8f4f 	dsb	sy
 8010f22:	607b      	str	r3, [r7, #4]
}
 8010f24:	bf00      	nop
 8010f26:	e7fe      	b.n	8010f26 <vTaskSwitchContext+0x5a>
 8010f28:	697a      	ldr	r2, [r7, #20]
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	4a14      	ldr	r2, [pc, #80]	; (8010f84 <vTaskSwitchContext+0xb8>)
 8010f34:	4413      	add	r3, r2
 8010f36:	613b      	str	r3, [r7, #16]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	685a      	ldr	r2, [r3, #4]
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	605a      	str	r2, [r3, #4]
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	685a      	ldr	r2, [r3, #4]
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	3308      	adds	r3, #8
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d104      	bne.n	8010f58 <vTaskSwitchContext+0x8c>
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	685a      	ldr	r2, [r3, #4]
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	605a      	str	r2, [r3, #4]
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	4a0a      	ldr	r2, [pc, #40]	; (8010f88 <vTaskSwitchContext+0xbc>)
 8010f60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f62:	4b09      	ldr	r3, [pc, #36]	; (8010f88 <vTaskSwitchContext+0xbc>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	334c      	adds	r3, #76	; 0x4c
 8010f68:	4a08      	ldr	r2, [pc, #32]	; (8010f8c <vTaskSwitchContext+0xc0>)
 8010f6a:	6013      	str	r3, [r2, #0]
}
 8010f6c:	bf00      	nop
 8010f6e:	371c      	adds	r7, #28
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr
 8010f78:	200006a4 	.word	0x200006a4
 8010f7c:	20000698 	.word	0x20000698
 8010f80:	20000690 	.word	0x20000690
 8010f84:	200005e4 	.word	0x200005e4
 8010f88:	200005e0 	.word	0x200005e0
 8010f8c:	20000184 	.word	0x20000184

08010f90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	60fb      	str	r3, [r7, #12]
}
 8010fb8:	bf00      	nop
 8010fba:	e7fe      	b.n	8010fba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	3318      	adds	r3, #24
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7ff fe36 	bl	8010c32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fc6:	4b1d      	ldr	r3, [pc, #116]	; (801103c <xTaskRemoveFromEventList+0xac>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d11c      	bne.n	8011008 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	3304      	adds	r3, #4
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fe2d 	bl	8010c32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010fd8:	693b      	ldr	r3, [r7, #16]
 8010fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fdc:	2201      	movs	r2, #1
 8010fde:	409a      	lsls	r2, r3
 8010fe0:	4b17      	ldr	r3, [pc, #92]	; (8011040 <xTaskRemoveFromEventList+0xb0>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	4313      	orrs	r3, r2
 8010fe6:	4a16      	ldr	r2, [pc, #88]	; (8011040 <xTaskRemoveFromEventList+0xb0>)
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fee:	4613      	mov	r3, r2
 8010ff0:	009b      	lsls	r3, r3, #2
 8010ff2:	4413      	add	r3, r2
 8010ff4:	009b      	lsls	r3, r3, #2
 8010ff6:	4a13      	ldr	r2, [pc, #76]	; (8011044 <xTaskRemoveFromEventList+0xb4>)
 8010ff8:	441a      	add	r2, r3
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	4619      	mov	r1, r3
 8011000:	4610      	mov	r0, r2
 8011002:	f7ff fdf2 	bl	8010bea <vListInsertEnd>
 8011006:	e005      	b.n	8011014 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	3318      	adds	r3, #24
 801100c:	4619      	mov	r1, r3
 801100e:	480e      	ldr	r0, [pc, #56]	; (8011048 <xTaskRemoveFromEventList+0xb8>)
 8011010:	f7ff fdeb 	bl	8010bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011018:	4b0c      	ldr	r3, [pc, #48]	; (801104c <xTaskRemoveFromEventList+0xbc>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101e:	429a      	cmp	r2, r3
 8011020:	d905      	bls.n	801102e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011022:	2301      	movs	r3, #1
 8011024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011026:	4b0a      	ldr	r3, [pc, #40]	; (8011050 <xTaskRemoveFromEventList+0xc0>)
 8011028:	2201      	movs	r2, #1
 801102a:	601a      	str	r2, [r3, #0]
 801102c:	e001      	b.n	8011032 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801102e:	2300      	movs	r3, #0
 8011030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011032:	697b      	ldr	r3, [r7, #20]
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	200006a4 	.word	0x200006a4
 8011040:	20000690 	.word	0x20000690
 8011044:	200005e4 	.word	0x200005e4
 8011048:	20000678 	.word	0x20000678
 801104c:	200005e0 	.word	0x200005e0
 8011050:	20000698 	.word	0x20000698

08011054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011054:	b480      	push	{r7}
 8011056:	b083      	sub	sp, #12
 8011058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801105a:	4b0c      	ldr	r3, [pc, #48]	; (801108c <prvResetNextTaskUnblockTime+0x38>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d104      	bne.n	801106e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011064:	4b0a      	ldr	r3, [pc, #40]	; (8011090 <prvResetNextTaskUnblockTime+0x3c>)
 8011066:	f04f 32ff 	mov.w	r2, #4294967295
 801106a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801106c:	e008      	b.n	8011080 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801106e:	4b07      	ldr	r3, [pc, #28]	; (801108c <prvResetNextTaskUnblockTime+0x38>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	68db      	ldr	r3, [r3, #12]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	685b      	ldr	r3, [r3, #4]
 801107c:	4a04      	ldr	r2, [pc, #16]	; (8011090 <prvResetNextTaskUnblockTime+0x3c>)
 801107e:	6013      	str	r3, [r2, #0]
}
 8011080:	bf00      	nop
 8011082:	370c      	adds	r7, #12
 8011084:	46bd      	mov	sp, r7
 8011086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108a:	4770      	bx	lr
 801108c:	20000670 	.word	0x20000670
 8011090:	200006a0 	.word	0x200006a0
	...

080110a0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80110a0:	4b07      	ldr	r3, [pc, #28]	; (80110c0 <pxCurrentTCBConst2>)
 80110a2:	6819      	ldr	r1, [r3, #0]
 80110a4:	6808      	ldr	r0, [r1, #0]
 80110a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110aa:	f380 8809 	msr	PSP, r0
 80110ae:	f3bf 8f6f 	isb	sy
 80110b2:	f04f 0000 	mov.w	r0, #0
 80110b6:	f380 8811 	msr	BASEPRI, r0
 80110ba:	4770      	bx	lr
 80110bc:	f3af 8000 	nop.w

080110c0 <pxCurrentTCBConst2>:
 80110c0:	200005e0 	.word	0x200005e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110c4:	bf00      	nop
 80110c6:	bf00      	nop
	...

080110d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80110d0:	f3ef 8009 	mrs	r0, PSP
 80110d4:	f3bf 8f6f 	isb	sy
 80110d8:	4b15      	ldr	r3, [pc, #84]	; (8011130 <pxCurrentTCBConst>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	f01e 0f10 	tst.w	lr, #16
 80110e0:	bf08      	it	eq
 80110e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80110e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ea:	6010      	str	r0, [r2, #0]
 80110ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80110f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80110f4:	f380 8811 	msr	BASEPRI, r0
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	f3bf 8f6f 	isb	sy
 8011100:	f7ff fee4 	bl	8010ecc <vTaskSwitchContext>
 8011104:	f04f 0000 	mov.w	r0, #0
 8011108:	f380 8811 	msr	BASEPRI, r0
 801110c:	bc09      	pop	{r0, r3}
 801110e:	6819      	ldr	r1, [r3, #0]
 8011110:	6808      	ldr	r0, [r1, #0]
 8011112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011116:	f01e 0f10 	tst.w	lr, #16
 801111a:	bf08      	it	eq
 801111c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011120:	f380 8809 	msr	PSP, r0
 8011124:	f3bf 8f6f 	isb	sy
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	f3af 8000 	nop.w

08011130 <pxCurrentTCBConst>:
 8011130:	200005e0 	.word	0x200005e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop

08011138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
	__asm volatile
 801113e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011142:	f383 8811 	msr	BASEPRI, r3
 8011146:	f3bf 8f6f 	isb	sy
 801114a:	f3bf 8f4f 	dsb	sy
 801114e:	607b      	str	r3, [r7, #4]
}
 8011150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011152:	f7ff fe25 	bl	8010da0 <xTaskIncrementTick>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d003      	beq.n	8011164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801115c:	4b06      	ldr	r3, [pc, #24]	; (8011178 <SysTick_Handler+0x40>)
 801115e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	2300      	movs	r3, #0
 8011166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	f383 8811 	msr	BASEPRI, r3
}
 801116e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011170:	bf00      	nop
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	e000ed04 	.word	0xe000ed04

0801117c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011182:	f3ef 8305 	mrs	r3, IPSR
 8011186:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b0f      	cmp	r3, #15
 801118c:	d914      	bls.n	80111b8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801118e:	4a17      	ldr	r2, [pc, #92]	; (80111ec <vPortValidateInterruptPriority+0x70>)
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	4413      	add	r3, r2
 8011194:	781b      	ldrb	r3, [r3, #0]
 8011196:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011198:	4b15      	ldr	r3, [pc, #84]	; (80111f0 <vPortValidateInterruptPriority+0x74>)
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	7afa      	ldrb	r2, [r7, #11]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d20a      	bcs.n	80111b8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80111a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111a6:	f383 8811 	msr	BASEPRI, r3
 80111aa:	f3bf 8f6f 	isb	sy
 80111ae:	f3bf 8f4f 	dsb	sy
 80111b2:	607b      	str	r3, [r7, #4]
}
 80111b4:	bf00      	nop
 80111b6:	e7fe      	b.n	80111b6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80111b8:	4b0e      	ldr	r3, [pc, #56]	; (80111f4 <vPortValidateInterruptPriority+0x78>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80111c0:	4b0d      	ldr	r3, [pc, #52]	; (80111f8 <vPortValidateInterruptPriority+0x7c>)
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d90a      	bls.n	80111de <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80111c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111cc:	f383 8811 	msr	BASEPRI, r3
 80111d0:	f3bf 8f6f 	isb	sy
 80111d4:	f3bf 8f4f 	dsb	sy
 80111d8:	603b      	str	r3, [r7, #0]
}
 80111da:	bf00      	nop
 80111dc:	e7fe      	b.n	80111dc <vPortValidateInterruptPriority+0x60>
	}
 80111de:	bf00      	nop
 80111e0:	3714      	adds	r7, #20
 80111e2:	46bd      	mov	sp, r7
 80111e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	e000e3f0 	.word	0xe000e3f0
 80111f0:	200006a8 	.word	0x200006a8
 80111f4:	e000ed0c 	.word	0xe000ed0c
 80111f8:	200006ac 	.word	0x200006ac

080111fc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011200:	2200      	movs	r2, #0
 8011202:	4912      	ldr	r1, [pc, #72]	; (801124c <MX_USB_Device_Init+0x50>)
 8011204:	4812      	ldr	r0, [pc, #72]	; (8011250 <MX_USB_Device_Init+0x54>)
 8011206:	f7fe fbd1 	bl	800f9ac <USBD_Init>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d001      	beq.n	8011214 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011210:	f7f3 fcf8 	bl	8004c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011214:	490f      	ldr	r1, [pc, #60]	; (8011254 <MX_USB_Device_Init+0x58>)
 8011216:	480e      	ldr	r0, [pc, #56]	; (8011250 <MX_USB_Device_Init+0x54>)
 8011218:	f7fe fbf8 	bl	800fa0c <USBD_RegisterClass>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011222:	f7f3 fcef 	bl	8004c04 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011226:	490c      	ldr	r1, [pc, #48]	; (8011258 <MX_USB_Device_Init+0x5c>)
 8011228:	4809      	ldr	r0, [pc, #36]	; (8011250 <MX_USB_Device_Init+0x54>)
 801122a:	f7fe fb49 	bl	800f8c0 <USBD_CDC_RegisterInterface>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011234:	f7f3 fce6 	bl	8004c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011238:	4805      	ldr	r0, [pc, #20]	; (8011250 <MX_USB_Device_Init+0x54>)
 801123a:	f7fe fc0e 	bl	800fa5a <USBD_Start>
 801123e:	4603      	mov	r3, r0
 8011240:	2b00      	cmp	r3, #0
 8011242:	d001      	beq.n	8011248 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011244:	f7f3 fcde 	bl	8004c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011248:	bf00      	nop
 801124a:	bd80      	pop	{r7, pc}
 801124c:	20000130 	.word	0x20000130
 8011250:	200006b0 	.word	0x200006b0
 8011254:	20000018 	.word	0x20000018
 8011258:	2000011c 	.word	0x2000011c

0801125c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011260:	2200      	movs	r2, #0
 8011262:	4905      	ldr	r1, [pc, #20]	; (8011278 <CDC_Init_FS+0x1c>)
 8011264:	4805      	ldr	r0, [pc, #20]	; (801127c <CDC_Init_FS+0x20>)
 8011266:	f7fe fb40 	bl	800f8ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801126a:	4905      	ldr	r1, [pc, #20]	; (8011280 <CDC_Init_FS+0x24>)
 801126c:	4803      	ldr	r0, [pc, #12]	; (801127c <CDC_Init_FS+0x20>)
 801126e:	f7fe fb5a 	bl	800f926 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011272:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011274:	4618      	mov	r0, r3
 8011276:	bd80      	pop	{r7, pc}
 8011278:	20001180 	.word	0x20001180
 801127c:	200006b0 	.word	0x200006b0
 8011280:	20000980 	.word	0x20000980

08011284 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011284:	b480      	push	{r7}
 8011286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011288:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801128a:	4618      	mov	r0, r3
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	4603      	mov	r3, r0
 801129c:	6039      	str	r1, [r7, #0]
 801129e:	71fb      	strb	r3, [r7, #7]
 80112a0:	4613      	mov	r3, r2
 80112a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80112a4:	79fb      	ldrb	r3, [r7, #7]
 80112a6:	2b23      	cmp	r3, #35	; 0x23
 80112a8:	d84a      	bhi.n	8011340 <CDC_Control_FS+0xac>
 80112aa:	a201      	add	r2, pc, #4	; (adr r2, 80112b0 <CDC_Control_FS+0x1c>)
 80112ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112b0:	08011341 	.word	0x08011341
 80112b4:	08011341 	.word	0x08011341
 80112b8:	08011341 	.word	0x08011341
 80112bc:	08011341 	.word	0x08011341
 80112c0:	08011341 	.word	0x08011341
 80112c4:	08011341 	.word	0x08011341
 80112c8:	08011341 	.word	0x08011341
 80112cc:	08011341 	.word	0x08011341
 80112d0:	08011341 	.word	0x08011341
 80112d4:	08011341 	.word	0x08011341
 80112d8:	08011341 	.word	0x08011341
 80112dc:	08011341 	.word	0x08011341
 80112e0:	08011341 	.word	0x08011341
 80112e4:	08011341 	.word	0x08011341
 80112e8:	08011341 	.word	0x08011341
 80112ec:	08011341 	.word	0x08011341
 80112f0:	08011341 	.word	0x08011341
 80112f4:	08011341 	.word	0x08011341
 80112f8:	08011341 	.word	0x08011341
 80112fc:	08011341 	.word	0x08011341
 8011300:	08011341 	.word	0x08011341
 8011304:	08011341 	.word	0x08011341
 8011308:	08011341 	.word	0x08011341
 801130c:	08011341 	.word	0x08011341
 8011310:	08011341 	.word	0x08011341
 8011314:	08011341 	.word	0x08011341
 8011318:	08011341 	.word	0x08011341
 801131c:	08011341 	.word	0x08011341
 8011320:	08011341 	.word	0x08011341
 8011324:	08011341 	.word	0x08011341
 8011328:	08011341 	.word	0x08011341
 801132c:	08011341 	.word	0x08011341
 8011330:	08011341 	.word	0x08011341
 8011334:	08011341 	.word	0x08011341
 8011338:	08011341 	.word	0x08011341
 801133c:	08011341 	.word	0x08011341
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011340:	bf00      	nop
  }

  return (USBD_OK);
 8011342:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011344:	4618      	mov	r0, r3
 8011346:	370c      	adds	r7, #12
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801135a:	6879      	ldr	r1, [r7, #4]
 801135c:	4805      	ldr	r0, [pc, #20]	; (8011374 <CDC_Receive_FS+0x24>)
 801135e:	f7fe fae2 	bl	800f926 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011362:	4804      	ldr	r0, [pc, #16]	; (8011374 <CDC_Receive_FS+0x24>)
 8011364:	f7fe faf8 	bl	800f958 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011368:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801136a:	4618      	mov	r0, r3
 801136c:	3708      	adds	r7, #8
 801136e:	46bd      	mov	sp, r7
 8011370:	bd80      	pop	{r7, pc}
 8011372:	bf00      	nop
 8011374:	200006b0 	.word	0x200006b0

08011378 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011378:	b480      	push	{r7}
 801137a:	b087      	sub	sp, #28
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	4613      	mov	r3, r2
 8011384:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011386:	2300      	movs	r3, #0
 8011388:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801138a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801138e:	4618      	mov	r0, r3
 8011390:	371c      	adds	r7, #28
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr
	...

0801139c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	4603      	mov	r3, r0
 80113a4:	6039      	str	r1, [r7, #0]
 80113a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2212      	movs	r2, #18
 80113ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80113ae:	4b03      	ldr	r3, [pc, #12]	; (80113bc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr
 80113bc:	20000150 	.word	0x20000150

080113c0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	6039      	str	r1, [r7, #0]
 80113ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	2204      	movs	r2, #4
 80113d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113d2:	4b03      	ldr	r3, [pc, #12]	; (80113e0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	20000164 	.word	0x20000164

080113e4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	4603      	mov	r3, r0
 80113ec:	6039      	str	r1, [r7, #0]
 80113ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113f0:	79fb      	ldrb	r3, [r7, #7]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d105      	bne.n	8011402 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80113f6:	683a      	ldr	r2, [r7, #0]
 80113f8:	4907      	ldr	r1, [pc, #28]	; (8011418 <USBD_CDC_ProductStrDescriptor+0x34>)
 80113fa:	4808      	ldr	r0, [pc, #32]	; (801141c <USBD_CDC_ProductStrDescriptor+0x38>)
 80113fc:	f7ff fb15 	bl	8010a2a <USBD_GetString>
 8011400:	e004      	b.n	801140c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011402:	683a      	ldr	r2, [r7, #0]
 8011404:	4904      	ldr	r1, [pc, #16]	; (8011418 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011406:	4805      	ldr	r0, [pc, #20]	; (801141c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011408:	f7ff fb0f 	bl	8010a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 801140c:	4b02      	ldr	r3, [pc, #8]	; (8011418 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801140e:	4618      	mov	r0, r3
 8011410:	3708      	adds	r7, #8
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	20001980 	.word	0x20001980
 801141c:	08011c38 	.word	0x08011c38

08011420 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	6039      	str	r1, [r7, #0]
 801142a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801142c:	683a      	ldr	r2, [r7, #0]
 801142e:	4904      	ldr	r1, [pc, #16]	; (8011440 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011430:	4804      	ldr	r0, [pc, #16]	; (8011444 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011432:	f7ff fafa 	bl	8010a2a <USBD_GetString>
  return USBD_StrDesc;
 8011436:	4b02      	ldr	r3, [pc, #8]	; (8011440 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011438:	4618      	mov	r0, r3
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	20001980 	.word	0x20001980
 8011444:	08011c50 	.word	0x08011c50

08011448 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	4603      	mov	r3, r0
 8011450:	6039      	str	r1, [r7, #0]
 8011452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	221a      	movs	r2, #26
 8011458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801145a:	f000 f843 	bl	80114e4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801145e:	4b02      	ldr	r3, [pc, #8]	; (8011468 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011460:	4618      	mov	r0, r3
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	20000168 	.word	0x20000168

0801146c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	6039      	str	r1, [r7, #0]
 8011476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011478:	79fb      	ldrb	r3, [r7, #7]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d105      	bne.n	801148a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801147e:	683a      	ldr	r2, [r7, #0]
 8011480:	4907      	ldr	r1, [pc, #28]	; (80114a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011482:	4808      	ldr	r0, [pc, #32]	; (80114a4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011484:	f7ff fad1 	bl	8010a2a <USBD_GetString>
 8011488:	e004      	b.n	8011494 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801148a:	683a      	ldr	r2, [r7, #0]
 801148c:	4904      	ldr	r1, [pc, #16]	; (80114a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801148e:	4805      	ldr	r0, [pc, #20]	; (80114a4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011490:	f7ff facb 	bl	8010a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011494:	4b02      	ldr	r3, [pc, #8]	; (80114a0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011496:	4618      	mov	r0, r3
 8011498:	3708      	adds	r7, #8
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	20001980 	.word	0x20001980
 80114a4:	08011c64 	.word	0x08011c64

080114a8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	4603      	mov	r3, r0
 80114b0:	6039      	str	r1, [r7, #0]
 80114b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80114b4:	79fb      	ldrb	r3, [r7, #7]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d105      	bne.n	80114c6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80114ba:	683a      	ldr	r2, [r7, #0]
 80114bc:	4907      	ldr	r1, [pc, #28]	; (80114dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80114be:	4808      	ldr	r0, [pc, #32]	; (80114e0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80114c0:	f7ff fab3 	bl	8010a2a <USBD_GetString>
 80114c4:	e004      	b.n	80114d0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80114c6:	683a      	ldr	r2, [r7, #0]
 80114c8:	4904      	ldr	r1, [pc, #16]	; (80114dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80114ca:	4805      	ldr	r0, [pc, #20]	; (80114e0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80114cc:	f7ff faad 	bl	8010a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80114d0:	4b02      	ldr	r3, [pc, #8]	; (80114dc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	20001980 	.word	0x20001980
 80114e0:	08011c70 	.word	0x08011c70

080114e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114ea:	4b0f      	ldr	r3, [pc, #60]	; (8011528 <Get_SerialNum+0x44>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114f0:	4b0e      	ldr	r3, [pc, #56]	; (801152c <Get_SerialNum+0x48>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114f6:	4b0e      	ldr	r3, [pc, #56]	; (8011530 <Get_SerialNum+0x4c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114fc:	68fa      	ldr	r2, [r7, #12]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4413      	add	r3, r2
 8011502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d009      	beq.n	801151e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801150a:	2208      	movs	r2, #8
 801150c:	4909      	ldr	r1, [pc, #36]	; (8011534 <Get_SerialNum+0x50>)
 801150e:	68f8      	ldr	r0, [r7, #12]
 8011510:	f000 f814 	bl	801153c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011514:	2204      	movs	r2, #4
 8011516:	4908      	ldr	r1, [pc, #32]	; (8011538 <Get_SerialNum+0x54>)
 8011518:	68b8      	ldr	r0, [r7, #8]
 801151a:	f000 f80f 	bl	801153c <IntToUnicode>
  }
}
 801151e:	bf00      	nop
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	1fff7590 	.word	0x1fff7590
 801152c:	1fff7594 	.word	0x1fff7594
 8011530:	1fff7598 	.word	0x1fff7598
 8011534:	2000016a 	.word	0x2000016a
 8011538:	2000017a 	.word	0x2000017a

0801153c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801153c:	b480      	push	{r7}
 801153e:	b087      	sub	sp, #28
 8011540:	af00      	add	r7, sp, #0
 8011542:	60f8      	str	r0, [r7, #12]
 8011544:	60b9      	str	r1, [r7, #8]
 8011546:	4613      	mov	r3, r2
 8011548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801154a:	2300      	movs	r3, #0
 801154c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801154e:	2300      	movs	r3, #0
 8011550:	75fb      	strb	r3, [r7, #23]
 8011552:	e027      	b.n	80115a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	0f1b      	lsrs	r3, r3, #28
 8011558:	2b09      	cmp	r3, #9
 801155a:	d80b      	bhi.n	8011574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	0f1b      	lsrs	r3, r3, #28
 8011560:	b2da      	uxtb	r2, r3
 8011562:	7dfb      	ldrb	r3, [r7, #23]
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	4619      	mov	r1, r3
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	440b      	add	r3, r1
 801156c:	3230      	adds	r2, #48	; 0x30
 801156e:	b2d2      	uxtb	r2, r2
 8011570:	701a      	strb	r2, [r3, #0]
 8011572:	e00a      	b.n	801158a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	0f1b      	lsrs	r3, r3, #28
 8011578:	b2da      	uxtb	r2, r3
 801157a:	7dfb      	ldrb	r3, [r7, #23]
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	4619      	mov	r1, r3
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	440b      	add	r3, r1
 8011584:	3237      	adds	r2, #55	; 0x37
 8011586:	b2d2      	uxtb	r2, r2
 8011588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011590:	7dfb      	ldrb	r3, [r7, #23]
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	3301      	adds	r3, #1
 8011596:	68ba      	ldr	r2, [r7, #8]
 8011598:	4413      	add	r3, r2
 801159a:	2200      	movs	r2, #0
 801159c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801159e:	7dfb      	ldrb	r3, [r7, #23]
 80115a0:	3301      	adds	r3, #1
 80115a2:	75fb      	strb	r3, [r7, #23]
 80115a4:	7dfa      	ldrb	r2, [r7, #23]
 80115a6:	79fb      	ldrb	r3, [r7, #7]
 80115a8:	429a      	cmp	r2, r3
 80115aa:	d3d3      	bcc.n	8011554 <IntToUnicode+0x18>
  }
}
 80115ac:	bf00      	nop
 80115ae:	bf00      	nop
 80115b0:	371c      	adds	r7, #28
 80115b2:	46bd      	mov	sp, r7
 80115b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b8:	4770      	bx	lr
	...

080115bc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b098      	sub	sp, #96	; 0x60
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80115c4:	f107 030c 	add.w	r3, r7, #12
 80115c8:	2254      	movs	r2, #84	; 0x54
 80115ca:	2100      	movs	r1, #0
 80115cc:	4618      	mov	r0, r3
 80115ce:	f000 fb1f 	bl	8011c10 <memset>
  if(pcdHandle->Instance==USB)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a15      	ldr	r2, [pc, #84]	; (801162c <HAL_PCD_MspInit+0x70>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d122      	bne.n	8011622 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80115dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80115e2:	2300      	movs	r3, #0
 80115e4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80115e6:	f107 030c 	add.w	r3, r7, #12
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f8 fe82 	bl	800a2f4 <HAL_RCCEx_PeriphCLKConfig>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80115f6:	f7f3 fb05 	bl	8004c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80115fa:	4b0d      	ldr	r3, [pc, #52]	; (8011630 <HAL_PCD_MspInit+0x74>)
 80115fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80115fe:	4a0c      	ldr	r2, [pc, #48]	; (8011630 <HAL_PCD_MspInit+0x74>)
 8011600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011604:	6593      	str	r3, [r2, #88]	; 0x58
 8011606:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <HAL_PCD_MspInit+0x74>)
 8011608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801160a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801160e:	60bb      	str	r3, [r7, #8]
 8011610:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011612:	2200      	movs	r2, #0
 8011614:	2105      	movs	r1, #5
 8011616:	2014      	movs	r0, #20
 8011618:	f7f5 f8bc 	bl	8006794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801161c:	2014      	movs	r0, #20
 801161e:	f7f5 f8d3 	bl	80067c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011622:	bf00      	nop
 8011624:	3760      	adds	r7, #96	; 0x60
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	40005c00 	.word	0x40005c00
 8011630:	40021000 	.word	0x40021000

08011634 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011648:	4619      	mov	r1, r3
 801164a:	4610      	mov	r0, r2
 801164c:	f7fe fa50 	bl	800faf0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011650:	bf00      	nop
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801166a:	78fa      	ldrb	r2, [r7, #3]
 801166c:	6879      	ldr	r1, [r7, #4]
 801166e:	4613      	mov	r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	4413      	add	r3, r2
 8011674:	00db      	lsls	r3, r3, #3
 8011676:	440b      	add	r3, r1
 8011678:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	78fb      	ldrb	r3, [r7, #3]
 8011680:	4619      	mov	r1, r3
 8011682:	f7fe fa8a 	bl	800fb9a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011686:	bf00      	nop
 8011688:	3708      	adds	r7, #8
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}

0801168e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801168e:	b580      	push	{r7, lr}
 8011690:	b082      	sub	sp, #8
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
 8011696:	460b      	mov	r3, r1
 8011698:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80116a0:	78fa      	ldrb	r2, [r7, #3]
 80116a2:	6879      	ldr	r1, [r7, #4]
 80116a4:	4613      	mov	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	00db      	lsls	r3, r3, #3
 80116ac:	440b      	add	r3, r1
 80116ae:	333c      	adds	r3, #60	; 0x3c
 80116b0:	681a      	ldr	r2, [r3, #0]
 80116b2:	78fb      	ldrb	r3, [r7, #3]
 80116b4:	4619      	mov	r1, r3
 80116b6:	f7fe fad3 	bl	800fc60 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80116ba:	bf00      	nop
 80116bc:	3708      	adds	r7, #8
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b082      	sub	sp, #8
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fe fbe7 	bl	800fea4 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80116d6:	bf00      	nop
 80116d8:	3708      	adds	r7, #8
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b084      	sub	sp, #16
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116e6:	2301      	movs	r3, #1
 80116e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	2b02      	cmp	r3, #2
 80116f0:	d001      	beq.n	80116f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80116f2:	f7f3 fa87 	bl	8004c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80116fc:	7bfa      	ldrb	r2, [r7, #15]
 80116fe:	4611      	mov	r1, r2
 8011700:	4618      	mov	r0, r3
 8011702:	f7fe fb91 	bl	800fe28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe fb3d 	bl	800fd8c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011712:	bf00      	nop
 8011714:	3710      	adds	r7, #16
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
	...

0801171c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801172a:	4618      	mov	r0, r3
 801172c:	f7fe fb8c 	bl	800fe48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d005      	beq.n	8011744 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011738:	4b04      	ldr	r3, [pc, #16]	; (801174c <HAL_PCD_SuspendCallback+0x30>)
 801173a:	691b      	ldr	r3, [r3, #16]
 801173c:	4a03      	ldr	r2, [pc, #12]	; (801174c <HAL_PCD_SuspendCallback+0x30>)
 801173e:	f043 0306 	orr.w	r3, r3, #6
 8011742:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011744:	bf00      	nop
 8011746:	3708      	adds	r7, #8
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	e000ed00 	.word	0xe000ed00

08011750 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	699b      	ldr	r3, [r3, #24]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d007      	beq.n	8011770 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011760:	4b08      	ldr	r3, [pc, #32]	; (8011784 <HAL_PCD_ResumeCallback+0x34>)
 8011762:	691b      	ldr	r3, [r3, #16]
 8011764:	4a07      	ldr	r2, [pc, #28]	; (8011784 <HAL_PCD_ResumeCallback+0x34>)
 8011766:	f023 0306 	bic.w	r3, r3, #6
 801176a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801176c:	f000 f9fa 	bl	8011b64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011776:	4618      	mov	r0, r3
 8011778:	f7fe fb7c 	bl	800fe74 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	e000ed00 	.word	0xe000ed00

08011788 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011790:	4a2b      	ldr	r2, [pc, #172]	; (8011840 <USBD_LL_Init+0xb8>)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	4a29      	ldr	r2, [pc, #164]	; (8011840 <USBD_LL_Init+0xb8>)
 801179c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80117a0:	4b27      	ldr	r3, [pc, #156]	; (8011840 <USBD_LL_Init+0xb8>)
 80117a2:	4a28      	ldr	r2, [pc, #160]	; (8011844 <USBD_LL_Init+0xbc>)
 80117a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80117a6:	4b26      	ldr	r3, [pc, #152]	; (8011840 <USBD_LL_Init+0xb8>)
 80117a8:	2208      	movs	r2, #8
 80117aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80117ac:	4b24      	ldr	r3, [pc, #144]	; (8011840 <USBD_LL_Init+0xb8>)
 80117ae:	2202      	movs	r2, #2
 80117b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80117b2:	4b23      	ldr	r3, [pc, #140]	; (8011840 <USBD_LL_Init+0xb8>)
 80117b4:	2202      	movs	r2, #2
 80117b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80117b8:	4b21      	ldr	r3, [pc, #132]	; (8011840 <USBD_LL_Init+0xb8>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80117be:	4b20      	ldr	r3, [pc, #128]	; (8011840 <USBD_LL_Init+0xb8>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80117c4:	4b1e      	ldr	r3, [pc, #120]	; (8011840 <USBD_LL_Init+0xb8>)
 80117c6:	2200      	movs	r2, #0
 80117c8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80117ca:	4b1d      	ldr	r3, [pc, #116]	; (8011840 <USBD_LL_Init+0xb8>)
 80117cc:	2200      	movs	r2, #0
 80117ce:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80117d0:	481b      	ldr	r0, [pc, #108]	; (8011840 <USBD_LL_Init+0xb8>)
 80117d2:	f7f6 fa52 	bl	8007c7a <HAL_PCD_Init>
 80117d6:	4603      	mov	r3, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80117dc:	f7f3 fa12 	bl	8004c04 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80117e6:	2318      	movs	r3, #24
 80117e8:	2200      	movs	r2, #0
 80117ea:	2100      	movs	r1, #0
 80117ec:	f7f7 ff0b 	bl	8009606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80117f6:	2358      	movs	r3, #88	; 0x58
 80117f8:	2200      	movs	r2, #0
 80117fa:	2180      	movs	r1, #128	; 0x80
 80117fc:	f7f7 ff03 	bl	8009606 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011806:	23c0      	movs	r3, #192	; 0xc0
 8011808:	2200      	movs	r2, #0
 801180a:	2181      	movs	r1, #129	; 0x81
 801180c:	f7f7 fefb 	bl	8009606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011816:	f44f 7388 	mov.w	r3, #272	; 0x110
 801181a:	2200      	movs	r2, #0
 801181c:	2101      	movs	r1, #1
 801181e:	f7f7 fef2 	bl	8009606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011828:	f44f 7380 	mov.w	r3, #256	; 0x100
 801182c:	2200      	movs	r2, #0
 801182e:	2182      	movs	r1, #130	; 0x82
 8011830:	f7f7 fee9 	bl	8009606 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011834:	2300      	movs	r3, #0
}
 8011836:	4618      	mov	r0, r3
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	20001b80 	.word	0x20001b80
 8011844:	40005c00 	.word	0x40005c00

08011848 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011850:	2300      	movs	r3, #0
 8011852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801185e:	4618      	mov	r0, r3
 8011860:	f7f6 faf0 	bl	8007e44 <HAL_PCD_Start>
 8011864:	4603      	mov	r3, r0
 8011866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011868:	7bfb      	ldrb	r3, [r7, #15]
 801186a:	4618      	mov	r0, r3
 801186c:	f000 f980 	bl	8011b70 <USBD_Get_USB_Status>
 8011870:	4603      	mov	r3, r0
 8011872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011874:	7bbb      	ldrb	r3, [r7, #14]
}
 8011876:	4618      	mov	r0, r3
 8011878:	3710      	adds	r7, #16
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	6078      	str	r0, [r7, #4]
 8011886:	4608      	mov	r0, r1
 8011888:	4611      	mov	r1, r2
 801188a:	461a      	mov	r2, r3
 801188c:	4603      	mov	r3, r0
 801188e:	70fb      	strb	r3, [r7, #3]
 8011890:	460b      	mov	r3, r1
 8011892:	70bb      	strb	r3, [r7, #2]
 8011894:	4613      	mov	r3, r2
 8011896:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011898:	2300      	movs	r3, #0
 801189a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80118a6:	78bb      	ldrb	r3, [r7, #2]
 80118a8:	883a      	ldrh	r2, [r7, #0]
 80118aa:	78f9      	ldrb	r1, [r7, #3]
 80118ac:	f7f6 fc38 	bl	8008120 <HAL_PCD_EP_Open>
 80118b0:	4603      	mov	r3, r0
 80118b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118b4:	7bfb      	ldrb	r3, [r7, #15]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f000 f95a 	bl	8011b70 <USBD_Get_USB_Status>
 80118bc:	4603      	mov	r3, r0
 80118be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80118ca:	b580      	push	{r7, lr}
 80118cc:	b084      	sub	sp, #16
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	460b      	mov	r3, r1
 80118d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118d6:	2300      	movs	r3, #0
 80118d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118da:	2300      	movs	r3, #0
 80118dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80118e4:	78fa      	ldrb	r2, [r7, #3]
 80118e6:	4611      	mov	r1, r2
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7f6 fc7f 	bl	80081ec <HAL_PCD_EP_Close>
 80118ee:	4603      	mov	r3, r0
 80118f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118f2:	7bfb      	ldrb	r3, [r7, #15]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f000 f93b 	bl	8011b70 <USBD_Get_USB_Status>
 80118fa:	4603      	mov	r3, r0
 80118fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	460b      	mov	r3, r1
 8011912:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011914:	2300      	movs	r3, #0
 8011916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011918:	2300      	movs	r3, #0
 801191a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011922:	78fa      	ldrb	r2, [r7, #3]
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f7f6 fd40 	bl	80083ac <HAL_PCD_EP_SetStall>
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011930:	7bfb      	ldrb	r3, [r7, #15]
 8011932:	4618      	mov	r0, r3
 8011934:	f000 f91c 	bl	8011b70 <USBD_Get_USB_Status>
 8011938:	4603      	mov	r3, r0
 801193a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801193c:	7bbb      	ldrb	r3, [r7, #14]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b084      	sub	sp, #16
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
 801194e:	460b      	mov	r3, r1
 8011950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011952:	2300      	movs	r3, #0
 8011954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011956:	2300      	movs	r3, #0
 8011958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011960:	78fa      	ldrb	r2, [r7, #3]
 8011962:	4611      	mov	r1, r2
 8011964:	4618      	mov	r0, r3
 8011966:	f7f6 fd73 	bl	8008450 <HAL_PCD_EP_ClrStall>
 801196a:	4603      	mov	r3, r0
 801196c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801196e:	7bfb      	ldrb	r3, [r7, #15]
 8011970:	4618      	mov	r0, r3
 8011972:	f000 f8fd 	bl	8011b70 <USBD_Get_USB_Status>
 8011976:	4603      	mov	r3, r0
 8011978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801197a:	7bbb      	ldrb	r3, [r7, #14]
}
 801197c:	4618      	mov	r0, r3
 801197e:	3710      	adds	r7, #16
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	460b      	mov	r3, r1
 801198e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011996:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011998:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801199c:	2b00      	cmp	r3, #0
 801199e:	da0c      	bge.n	80119ba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80119a0:	78fb      	ldrb	r3, [r7, #3]
 80119a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80119a6:	68f9      	ldr	r1, [r7, #12]
 80119a8:	1c5a      	adds	r2, r3, #1
 80119aa:	4613      	mov	r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	4413      	add	r3, r2
 80119b0:	00db      	lsls	r3, r3, #3
 80119b2:	440b      	add	r3, r1
 80119b4:	3302      	adds	r3, #2
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	e00b      	b.n	80119d2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80119ba:	78fb      	ldrb	r3, [r7, #3]
 80119bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80119c0:	68f9      	ldr	r1, [r7, #12]
 80119c2:	4613      	mov	r3, r2
 80119c4:	009b      	lsls	r3, r3, #2
 80119c6:	4413      	add	r3, r2
 80119c8:	00db      	lsls	r3, r3, #3
 80119ca:	440b      	add	r3, r1
 80119cc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80119d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	3714      	adds	r7, #20
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr

080119de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80119de:	b580      	push	{r7, lr}
 80119e0:	b084      	sub	sp, #16
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	460b      	mov	r3, r1
 80119e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119ea:	2300      	movs	r3, #0
 80119ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ee:	2300      	movs	r3, #0
 80119f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119f8:	78fa      	ldrb	r2, [r7, #3]
 80119fa:	4611      	mov	r1, r2
 80119fc:	4618      	mov	r0, r3
 80119fe:	f7f6 fb6a 	bl	80080d6 <HAL_PCD_SetAddress>
 8011a02:	4603      	mov	r3, r0
 8011a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f000 f8b1 	bl	8011b70 <USBD_Get_USB_Status>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b086      	sub	sp, #24
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	607a      	str	r2, [r7, #4]
 8011a26:	603b      	str	r3, [r7, #0]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a30:	2300      	movs	r3, #0
 8011a32:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a3a:	7af9      	ldrb	r1, [r7, #11]
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	f7f6 fc71 	bl	8008326 <HAL_PCD_EP_Transmit>
 8011a44:	4603      	mov	r3, r0
 8011a46:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a48:	7dfb      	ldrb	r3, [r7, #23]
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f000 f890 	bl	8011b70 <USBD_Get_USB_Status>
 8011a50:	4603      	mov	r3, r0
 8011a52:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a54:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3718      	adds	r7, #24
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b086      	sub	sp, #24
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	60f8      	str	r0, [r7, #12]
 8011a66:	607a      	str	r2, [r7, #4]
 8011a68:	603b      	str	r3, [r7, #0]
 8011a6a:	460b      	mov	r3, r1
 8011a6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a72:	2300      	movs	r3, #0
 8011a74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011a7c:	7af9      	ldrb	r1, [r7, #11]
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	687a      	ldr	r2, [r7, #4]
 8011a82:	f7f6 fbfb 	bl	800827c <HAL_PCD_EP_Receive>
 8011a86:	4603      	mov	r3, r0
 8011a88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f000 f86f 	bl	8011b70 <USBD_Get_USB_Status>
 8011a92:	4603      	mov	r3, r0
 8011a94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011a96:	7dbb      	ldrb	r3, [r7, #22]
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3718      	adds	r7, #24
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b082      	sub	sp, #8
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011ab2:	78fa      	ldrb	r2, [r7, #3]
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7f6 fc1d 	bl	80082f6 <HAL_PCD_EP_GetRxCount>
 8011abc:	4603      	mov	r3, r0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3708      	adds	r7, #8
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
	...

08011ac8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b082      	sub	sp, #8
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	460b      	mov	r3, r1
 8011ad2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011ad4:	78fb      	ldrb	r3, [r7, #3]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d002      	beq.n	8011ae0 <HAL_PCDEx_LPM_Callback+0x18>
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d013      	beq.n	8011b06 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011ade:	e023      	b.n	8011b28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	699b      	ldr	r3, [r3, #24]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d007      	beq.n	8011af8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011ae8:	f000 f83c 	bl	8011b64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011aec:	4b10      	ldr	r3, [pc, #64]	; (8011b30 <HAL_PCDEx_LPM_Callback+0x68>)
 8011aee:	691b      	ldr	r3, [r3, #16]
 8011af0:	4a0f      	ldr	r2, [pc, #60]	; (8011b30 <HAL_PCDEx_LPM_Callback+0x68>)
 8011af2:	f023 0306 	bic.w	r3, r3, #6
 8011af6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fe f9b8 	bl	800fe74 <USBD_LL_Resume>
    break;
 8011b04:	e010      	b.n	8011b28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fe f99b 	bl	800fe48 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	699b      	ldr	r3, [r3, #24]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d005      	beq.n	8011b26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b1a:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <HAL_PCDEx_LPM_Callback+0x68>)
 8011b1c:	691b      	ldr	r3, [r3, #16]
 8011b1e:	4a04      	ldr	r2, [pc, #16]	; (8011b30 <HAL_PCDEx_LPM_Callback+0x68>)
 8011b20:	f043 0306 	orr.w	r3, r3, #6
 8011b24:	6113      	str	r3, [r2, #16]
    break;
 8011b26:	bf00      	nop
}
 8011b28:	bf00      	nop
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}
 8011b30:	e000ed00 	.word	0xe000ed00

08011b34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b083      	sub	sp, #12
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011b3c:	4b03      	ldr	r3, [pc, #12]	; (8011b4c <USBD_static_malloc+0x18>)
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	370c      	adds	r7, #12
 8011b42:	46bd      	mov	sp, r7
 8011b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b48:	4770      	bx	lr
 8011b4a:	bf00      	nop
 8011b4c:	20001e74 	.word	0x20001e74

08011b50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]

}
 8011b58:	bf00      	nop
 8011b5a:	370c      	adds	r7, #12
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b62:	4770      	bx	lr

08011b64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011b68:	f7f2 ffec 	bl	8004b44 <SystemClock_Config>
}
 8011b6c:	bf00      	nop
 8011b6e:	bd80      	pop	{r7, pc}

08011b70 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011b70:	b480      	push	{r7}
 8011b72:	b085      	sub	sp, #20
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	4603      	mov	r3, r0
 8011b78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011b7e:	79fb      	ldrb	r3, [r7, #7]
 8011b80:	2b03      	cmp	r3, #3
 8011b82:	d817      	bhi.n	8011bb4 <USBD_Get_USB_Status+0x44>
 8011b84:	a201      	add	r2, pc, #4	; (adr r2, 8011b8c <USBD_Get_USB_Status+0x1c>)
 8011b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8a:	bf00      	nop
 8011b8c:	08011b9d 	.word	0x08011b9d
 8011b90:	08011ba3 	.word	0x08011ba3
 8011b94:	08011ba9 	.word	0x08011ba9
 8011b98:	08011baf 	.word	0x08011baf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba0:	e00b      	b.n	8011bba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011ba2:	2303      	movs	r3, #3
 8011ba4:	73fb      	strb	r3, [r7, #15]
    break;
 8011ba6:	e008      	b.n	8011bba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	73fb      	strb	r3, [r7, #15]
    break;
 8011bac:	e005      	b.n	8011bba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011bae:	2303      	movs	r3, #3
 8011bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8011bb2:	e002      	b.n	8011bba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011bb4:	2303      	movs	r3, #3
 8011bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8011bb8:	bf00      	nop
  }
  return usb_status;
 8011bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3714      	adds	r7, #20
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <__libc_init_array>:
 8011bc8:	b570      	push	{r4, r5, r6, lr}
 8011bca:	4d0d      	ldr	r5, [pc, #52]	; (8011c00 <__libc_init_array+0x38>)
 8011bcc:	4c0d      	ldr	r4, [pc, #52]	; (8011c04 <__libc_init_array+0x3c>)
 8011bce:	1b64      	subs	r4, r4, r5
 8011bd0:	10a4      	asrs	r4, r4, #2
 8011bd2:	2600      	movs	r6, #0
 8011bd4:	42a6      	cmp	r6, r4
 8011bd6:	d109      	bne.n	8011bec <__libc_init_array+0x24>
 8011bd8:	4d0b      	ldr	r5, [pc, #44]	; (8011c08 <__libc_init_array+0x40>)
 8011bda:	4c0c      	ldr	r4, [pc, #48]	; (8011c0c <__libc_init_array+0x44>)
 8011bdc:	f000 f820 	bl	8011c20 <_init>
 8011be0:	1b64      	subs	r4, r4, r5
 8011be2:	10a4      	asrs	r4, r4, #2
 8011be4:	2600      	movs	r6, #0
 8011be6:	42a6      	cmp	r6, r4
 8011be8:	d105      	bne.n	8011bf6 <__libc_init_array+0x2e>
 8011bea:	bd70      	pop	{r4, r5, r6, pc}
 8011bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bf0:	4798      	blx	r3
 8011bf2:	3601      	adds	r6, #1
 8011bf4:	e7ee      	b.n	8011bd4 <__libc_init_array+0xc>
 8011bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011bfa:	4798      	blx	r3
 8011bfc:	3601      	adds	r6, #1
 8011bfe:	e7f2      	b.n	8011be6 <__libc_init_array+0x1e>
 8011c00:	08011d28 	.word	0x08011d28
 8011c04:	08011d28 	.word	0x08011d28
 8011c08:	08011d28 	.word	0x08011d28
 8011c0c:	08011d2c 	.word	0x08011d2c

08011c10 <memset>:
 8011c10:	4402      	add	r2, r0
 8011c12:	4603      	mov	r3, r0
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d100      	bne.n	8011c1a <memset+0xa>
 8011c18:	4770      	bx	lr
 8011c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8011c1e:	e7f9      	b.n	8011c14 <memset+0x4>

08011c20 <_init>:
 8011c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c22:	bf00      	nop
 8011c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c26:	bc08      	pop	{r3}
 8011c28:	469e      	mov	lr, r3
 8011c2a:	4770      	bx	lr

08011c2c <_fini>:
 8011c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c2e:	bf00      	nop
 8011c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c32:	bc08      	pop	{r3}
 8011c34:	469e      	mov	lr, r3
 8011c36:	4770      	bx	lr
