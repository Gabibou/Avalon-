
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da50  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08011c30  08011c30  00011c30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011da8  08011da8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08011da8  08011da8  00011da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011db0  08011db0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011db0  08011db0  00011db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011db4  08011db4  00011db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08011db8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b88  20000078  08011e30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c00  08011e30  00023c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027d42  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055fb  00000000  00000000  00047ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f28  00000000  00000000  0004d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001800  00000000  00000000  0004f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e808  00000000  00000000  00050bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a8c5  00000000  00000000  0007f3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001207b2  00000000  00000000  000a9c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000089d4  00000000  00000000  001ca448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001d2e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  001d2e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	08011c18 	.word	0x08011c18

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	08011c18 	.word	0x08011c18

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <__aeabi_drsub>:
 8004234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004238:	e002      	b.n	8004240 <__adddf3>
 800423a:	bf00      	nop

0800423c <__aeabi_dsub>:
 800423c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004240 <__adddf3>:
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800424a:	ea94 0f05 	teq	r4, r5
 800424e:	bf08      	it	eq
 8004250:	ea90 0f02 	teqeq	r0, r2
 8004254:	bf1f      	itttt	ne
 8004256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800425a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800425e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004266:	f000 80e2 	beq.w	800442e <__adddf3+0x1ee>
 800426a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800426e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004272:	bfb8      	it	lt
 8004274:	426d      	neglt	r5, r5
 8004276:	dd0c      	ble.n	8004292 <__adddf3+0x52>
 8004278:	442c      	add	r4, r5
 800427a:	ea80 0202 	eor.w	r2, r0, r2
 800427e:	ea81 0303 	eor.w	r3, r1, r3
 8004282:	ea82 0000 	eor.w	r0, r2, r0
 8004286:	ea83 0101 	eor.w	r1, r3, r1
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	2d36      	cmp	r5, #54	; 0x36
 8004294:	bf88      	it	hi
 8004296:	bd30      	pophi	{r4, r5, pc}
 8004298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800429c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042a8:	d002      	beq.n	80042b0 <__adddf3+0x70>
 80042aa:	4240      	negs	r0, r0
 80042ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042bc:	d002      	beq.n	80042c4 <__adddf3+0x84>
 80042be:	4252      	negs	r2, r2
 80042c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042c4:	ea94 0f05 	teq	r4, r5
 80042c8:	f000 80a7 	beq.w	800441a <__adddf3+0x1da>
 80042cc:	f1a4 0401 	sub.w	r4, r4, #1
 80042d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042d4:	db0d      	blt.n	80042f2 <__adddf3+0xb2>
 80042d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042da:	fa22 f205 	lsr.w	r2, r2, r5
 80042de:	1880      	adds	r0, r0, r2
 80042e0:	f141 0100 	adc.w	r1, r1, #0
 80042e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042e8:	1880      	adds	r0, r0, r2
 80042ea:	fa43 f305 	asr.w	r3, r3, r5
 80042ee:	4159      	adcs	r1, r3
 80042f0:	e00e      	b.n	8004310 <__adddf3+0xd0>
 80042f2:	f1a5 0520 	sub.w	r5, r5, #32
 80042f6:	f10e 0e20 	add.w	lr, lr, #32
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004300:	bf28      	it	cs
 8004302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004306:	fa43 f305 	asr.w	r3, r3, r5
 800430a:	18c0      	adds	r0, r0, r3
 800430c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004314:	d507      	bpl.n	8004326 <__adddf3+0xe6>
 8004316:	f04f 0e00 	mov.w	lr, #0
 800431a:	f1dc 0c00 	rsbs	ip, ip, #0
 800431e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004322:	eb6e 0101 	sbc.w	r1, lr, r1
 8004326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800432a:	d31b      	bcc.n	8004364 <__adddf3+0x124>
 800432c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004330:	d30c      	bcc.n	800434c <__adddf3+0x10c>
 8004332:	0849      	lsrs	r1, r1, #1
 8004334:	ea5f 0030 	movs.w	r0, r0, rrx
 8004338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800433c:	f104 0401 	add.w	r4, r4, #1
 8004340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004348:	f080 809a 	bcs.w	8004480 <__adddf3+0x240>
 800434c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004350:	bf08      	it	eq
 8004352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004356:	f150 0000 	adcs.w	r0, r0, #0
 800435a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800435e:	ea41 0105 	orr.w	r1, r1, r5
 8004362:	bd30      	pop	{r4, r5, pc}
 8004364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004368:	4140      	adcs	r0, r0
 800436a:	eb41 0101 	adc.w	r1, r1, r1
 800436e:	3c01      	subs	r4, #1
 8004370:	bf28      	it	cs
 8004372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004376:	d2e9      	bcs.n	800434c <__adddf3+0x10c>
 8004378:	f091 0f00 	teq	r1, #0
 800437c:	bf04      	itt	eq
 800437e:	4601      	moveq	r1, r0
 8004380:	2000      	moveq	r0, #0
 8004382:	fab1 f381 	clz	r3, r1
 8004386:	bf08      	it	eq
 8004388:	3320      	addeq	r3, #32
 800438a:	f1a3 030b 	sub.w	r3, r3, #11
 800438e:	f1b3 0220 	subs.w	r2, r3, #32
 8004392:	da0c      	bge.n	80043ae <__adddf3+0x16e>
 8004394:	320c      	adds	r2, #12
 8004396:	dd08      	ble.n	80043aa <__adddf3+0x16a>
 8004398:	f102 0c14 	add.w	ip, r2, #20
 800439c:	f1c2 020c 	rsb	r2, r2, #12
 80043a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043a4:	fa21 f102 	lsr.w	r1, r1, r2
 80043a8:	e00c      	b.n	80043c4 <__adddf3+0x184>
 80043aa:	f102 0214 	add.w	r2, r2, #20
 80043ae:	bfd8      	it	le
 80043b0:	f1c2 0c20 	rsble	ip, r2, #32
 80043b4:	fa01 f102 	lsl.w	r1, r1, r2
 80043b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043bc:	bfdc      	itt	le
 80043be:	ea41 010c 	orrle.w	r1, r1, ip
 80043c2:	4090      	lslle	r0, r2
 80043c4:	1ae4      	subs	r4, r4, r3
 80043c6:	bfa2      	ittt	ge
 80043c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043cc:	4329      	orrge	r1, r5
 80043ce:	bd30      	popge	{r4, r5, pc}
 80043d0:	ea6f 0404 	mvn.w	r4, r4
 80043d4:	3c1f      	subs	r4, #31
 80043d6:	da1c      	bge.n	8004412 <__adddf3+0x1d2>
 80043d8:	340c      	adds	r4, #12
 80043da:	dc0e      	bgt.n	80043fa <__adddf3+0x1ba>
 80043dc:	f104 0414 	add.w	r4, r4, #20
 80043e0:	f1c4 0220 	rsb	r2, r4, #32
 80043e4:	fa20 f004 	lsr.w	r0, r0, r4
 80043e8:	fa01 f302 	lsl.w	r3, r1, r2
 80043ec:	ea40 0003 	orr.w	r0, r0, r3
 80043f0:	fa21 f304 	lsr.w	r3, r1, r4
 80043f4:	ea45 0103 	orr.w	r1, r5, r3
 80043f8:	bd30      	pop	{r4, r5, pc}
 80043fa:	f1c4 040c 	rsb	r4, r4, #12
 80043fe:	f1c4 0220 	rsb	r2, r4, #32
 8004402:	fa20 f002 	lsr.w	r0, r0, r2
 8004406:	fa01 f304 	lsl.w	r3, r1, r4
 800440a:	ea40 0003 	orr.w	r0, r0, r3
 800440e:	4629      	mov	r1, r5
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	fa21 f004 	lsr.w	r0, r1, r4
 8004416:	4629      	mov	r1, r5
 8004418:	bd30      	pop	{r4, r5, pc}
 800441a:	f094 0f00 	teq	r4, #0
 800441e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004422:	bf06      	itte	eq
 8004424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004428:	3401      	addeq	r4, #1
 800442a:	3d01      	subne	r5, #1
 800442c:	e74e      	b.n	80042cc <__adddf3+0x8c>
 800442e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004432:	bf18      	it	ne
 8004434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004438:	d029      	beq.n	800448e <__adddf3+0x24e>
 800443a:	ea94 0f05 	teq	r4, r5
 800443e:	bf08      	it	eq
 8004440:	ea90 0f02 	teqeq	r0, r2
 8004444:	d005      	beq.n	8004452 <__adddf3+0x212>
 8004446:	ea54 0c00 	orrs.w	ip, r4, r0
 800444a:	bf04      	itt	eq
 800444c:	4619      	moveq	r1, r3
 800444e:	4610      	moveq	r0, r2
 8004450:	bd30      	pop	{r4, r5, pc}
 8004452:	ea91 0f03 	teq	r1, r3
 8004456:	bf1e      	ittt	ne
 8004458:	2100      	movne	r1, #0
 800445a:	2000      	movne	r0, #0
 800445c:	bd30      	popne	{r4, r5, pc}
 800445e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004462:	d105      	bne.n	8004470 <__adddf3+0x230>
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	4149      	adcs	r1, r1
 8004468:	bf28      	it	cs
 800446a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004474:	bf3c      	itt	cc
 8004476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800447a:	bd30      	popcc	{r4, r5, pc}
 800447c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004492:	bf1a      	itte	ne
 8004494:	4619      	movne	r1, r3
 8004496:	4610      	movne	r0, r2
 8004498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800449c:	bf1c      	itt	ne
 800449e:	460b      	movne	r3, r1
 80044a0:	4602      	movne	r2, r0
 80044a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044a6:	bf06      	itte	eq
 80044a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044ac:	ea91 0f03 	teqeq	r1, r3
 80044b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044b4:	bd30      	pop	{r4, r5, pc}
 80044b6:	bf00      	nop

080044b8 <__aeabi_ui2d>:
 80044b8:	f090 0f00 	teq	r0, #0
 80044bc:	bf04      	itt	eq
 80044be:	2100      	moveq	r1, #0
 80044c0:	4770      	bxeq	lr
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	e750      	b.n	8004378 <__adddf3+0x138>
 80044d6:	bf00      	nop

080044d8 <__aeabi_i2d>:
 80044d8:	f090 0f00 	teq	r0, #0
 80044dc:	bf04      	itt	eq
 80044de:	2100      	moveq	r1, #0
 80044e0:	4770      	bxeq	lr
 80044e2:	b530      	push	{r4, r5, lr}
 80044e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80044f0:	bf48      	it	mi
 80044f2:	4240      	negmi	r0, r0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	e73e      	b.n	8004378 <__adddf3+0x138>
 80044fa:	bf00      	nop

080044fc <__aeabi_f2d>:
 80044fc:	0042      	lsls	r2, r0, #1
 80044fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004502:	ea4f 0131 	mov.w	r1, r1, rrx
 8004506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800450a:	bf1f      	itttt	ne
 800450c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004518:	4770      	bxne	lr
 800451a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800451e:	bf08      	it	eq
 8004520:	4770      	bxeq	lr
 8004522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004526:	bf04      	itt	eq
 8004528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800453c:	e71c      	b.n	8004378 <__adddf3+0x138>
 800453e:	bf00      	nop

08004540 <__aeabi_ul2d>:
 8004540:	ea50 0201 	orrs.w	r2, r0, r1
 8004544:	bf08      	it	eq
 8004546:	4770      	bxeq	lr
 8004548:	b530      	push	{r4, r5, lr}
 800454a:	f04f 0500 	mov.w	r5, #0
 800454e:	e00a      	b.n	8004566 <__aeabi_l2d+0x16>

08004550 <__aeabi_l2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800455e:	d502      	bpl.n	8004566 <__aeabi_l2d+0x16>
 8004560:	4240      	negs	r0, r0
 8004562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800456a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800456e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004572:	f43f aed8 	beq.w	8004326 <__adddf3+0xe6>
 8004576:	f04f 0203 	mov.w	r2, #3
 800457a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800457e:	bf18      	it	ne
 8004580:	3203      	addne	r2, #3
 8004582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004586:	bf18      	it	ne
 8004588:	3203      	addne	r2, #3
 800458a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800458e:	f1c2 0320 	rsb	r3, r2, #32
 8004592:	fa00 fc03 	lsl.w	ip, r0, r3
 8004596:	fa20 f002 	lsr.w	r0, r0, r2
 800459a:	fa01 fe03 	lsl.w	lr, r1, r3
 800459e:	ea40 000e 	orr.w	r0, r0, lr
 80045a2:	fa21 f102 	lsr.w	r1, r1, r2
 80045a6:	4414      	add	r4, r2
 80045a8:	e6bd      	b.n	8004326 <__adddf3+0xe6>
 80045aa:	bf00      	nop

080045ac <__aeabi_dmul>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ba:	bf1d      	ittte	ne
 80045bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045c0:	ea94 0f0c 	teqne	r4, ip
 80045c4:	ea95 0f0c 	teqne	r5, ip
 80045c8:	f000 f8de 	bleq	8004788 <__aeabi_dmul+0x1dc>
 80045cc:	442c      	add	r4, r5
 80045ce:	ea81 0603 	eor.w	r6, r1, r3
 80045d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045de:	bf18      	it	ne
 80045e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ec:	d038      	beq.n	8004660 <__aeabi_dmul+0xb4>
 80045ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80045f2:	f04f 0500 	mov.w	r5, #0
 80045f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80045fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80045fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800460a:	f09c 0f00 	teq	ip, #0
 800460e:	bf18      	it	ne
 8004610:	f04e 0e01 	orrne.w	lr, lr, #1
 8004614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800461c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004620:	d204      	bcs.n	800462c <__aeabi_dmul+0x80>
 8004622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004626:	416d      	adcs	r5, r5
 8004628:	eb46 0606 	adc.w	r6, r6, r6
 800462c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800463c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004644:	bf88      	it	hi
 8004646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800464a:	d81e      	bhi.n	800468a <__aeabi_dmul+0xde>
 800464c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004650:	bf08      	it	eq
 8004652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004656:	f150 0000 	adcs.w	r0, r0, #0
 800465a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004664:	ea46 0101 	orr.w	r1, r6, r1
 8004668:	ea40 0002 	orr.w	r0, r0, r2
 800466c:	ea81 0103 	eor.w	r1, r1, r3
 8004670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004674:	bfc2      	ittt	gt
 8004676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800467a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800467e:	bd70      	popgt	{r4, r5, r6, pc}
 8004680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004684:	f04f 0e00 	mov.w	lr, #0
 8004688:	3c01      	subs	r4, #1
 800468a:	f300 80ab 	bgt.w	80047e4 <__aeabi_dmul+0x238>
 800468e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004692:	bfde      	ittt	le
 8004694:	2000      	movle	r0, #0
 8004696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800469a:	bd70      	pople	{r4, r5, r6, pc}
 800469c:	f1c4 0400 	rsb	r4, r4, #0
 80046a0:	3c20      	subs	r4, #32
 80046a2:	da35      	bge.n	8004710 <__aeabi_dmul+0x164>
 80046a4:	340c      	adds	r4, #12
 80046a6:	dc1b      	bgt.n	80046e0 <__aeabi_dmul+0x134>
 80046a8:	f104 0414 	add.w	r4, r4, #20
 80046ac:	f1c4 0520 	rsb	r5, r4, #32
 80046b0:	fa00 f305 	lsl.w	r3, r0, r5
 80046b4:	fa20 f004 	lsr.w	r0, r0, r4
 80046b8:	fa01 f205 	lsl.w	r2, r1, r5
 80046bc:	ea40 0002 	orr.w	r0, r0, r2
 80046c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046cc:	fa21 f604 	lsr.w	r6, r1, r4
 80046d0:	eb42 0106 	adc.w	r1, r2, r6
 80046d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046d8:	bf08      	it	eq
 80046da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f1c4 040c 	rsb	r4, r4, #12
 80046e4:	f1c4 0520 	rsb	r5, r4, #32
 80046e8:	fa00 f304 	lsl.w	r3, r0, r4
 80046ec:	fa20 f005 	lsr.w	r0, r0, r5
 80046f0:	fa01 f204 	lsl.w	r2, r1, r4
 80046f4:	ea40 0002 	orr.w	r0, r0, r2
 80046f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004700:	f141 0100 	adc.w	r1, r1, #0
 8004704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004708:	bf08      	it	eq
 800470a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f1c4 0520 	rsb	r5, r4, #32
 8004714:	fa00 f205 	lsl.w	r2, r0, r5
 8004718:	ea4e 0e02 	orr.w	lr, lr, r2
 800471c:	fa20 f304 	lsr.w	r3, r0, r4
 8004720:	fa01 f205 	lsl.w	r2, r1, r5
 8004724:	ea43 0302 	orr.w	r3, r3, r2
 8004728:	fa21 f004 	lsr.w	r0, r1, r4
 800472c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004730:	fa21 f204 	lsr.w	r2, r1, r4
 8004734:	ea20 0002 	bic.w	r0, r0, r2
 8004738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800473c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004740:	bf08      	it	eq
 8004742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f094 0f00 	teq	r4, #0
 800474c:	d10f      	bne.n	800476e <__aeabi_dmul+0x1c2>
 800474e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	eb41 0101 	adc.w	r1, r1, r1
 8004758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800475c:	bf08      	it	eq
 800475e:	3c01      	subeq	r4, #1
 8004760:	d0f7      	beq.n	8004752 <__aeabi_dmul+0x1a6>
 8004762:	ea41 0106 	orr.w	r1, r1, r6
 8004766:	f095 0f00 	teq	r5, #0
 800476a:	bf18      	it	ne
 800476c:	4770      	bxne	lr
 800476e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	eb43 0303 	adc.w	r3, r3, r3
 8004778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800477c:	bf08      	it	eq
 800477e:	3d01      	subeq	r5, #1
 8004780:	d0f7      	beq.n	8004772 <__aeabi_dmul+0x1c6>
 8004782:	ea43 0306 	orr.w	r3, r3, r6
 8004786:	4770      	bx	lr
 8004788:	ea94 0f0c 	teq	r4, ip
 800478c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004790:	bf18      	it	ne
 8004792:	ea95 0f0c 	teqne	r5, ip
 8004796:	d00c      	beq.n	80047b2 <__aeabi_dmul+0x206>
 8004798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800479c:	bf18      	it	ne
 800479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047a2:	d1d1      	bne.n	8004748 <__aeabi_dmul+0x19c>
 80047a4:	ea81 0103 	eor.w	r1, r1, r3
 80047a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047b6:	bf06      	itte	eq
 80047b8:	4610      	moveq	r0, r2
 80047ba:	4619      	moveq	r1, r3
 80047bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047c0:	d019      	beq.n	80047f6 <__aeabi_dmul+0x24a>
 80047c2:	ea94 0f0c 	teq	r4, ip
 80047c6:	d102      	bne.n	80047ce <__aeabi_dmul+0x222>
 80047c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047cc:	d113      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047ce:	ea95 0f0c 	teq	r5, ip
 80047d2:	d105      	bne.n	80047e0 <__aeabi_dmul+0x234>
 80047d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047d8:	bf1c      	itt	ne
 80047da:	4610      	movne	r0, r2
 80047dc:	4619      	movne	r1, r3
 80047de:	d10a      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80047fe:	bd70      	pop	{r4, r5, r6, pc}

08004800 <__aeabi_ddiv>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800480a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800480e:	bf1d      	ittte	ne
 8004810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004814:	ea94 0f0c 	teqne	r4, ip
 8004818:	ea95 0f0c 	teqne	r5, ip
 800481c:	f000 f8a7 	bleq	800496e <__aeabi_ddiv+0x16e>
 8004820:	eba4 0405 	sub.w	r4, r4, r5
 8004824:	ea81 0e03 	eor.w	lr, r1, r3
 8004828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800482c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004830:	f000 8088 	beq.w	8004944 <__aeabi_ddiv+0x144>
 8004834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800483c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800484c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004858:	429d      	cmp	r5, r3
 800485a:	bf08      	it	eq
 800485c:	4296      	cmpeq	r6, r2
 800485e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004866:	d202      	bcs.n	800486e <__aeabi_ddiv+0x6e>
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	ea4f 0232 	mov.w	r2, r2, rrx
 800486e:	1ab6      	subs	r6, r6, r2
 8004870:	eb65 0503 	sbc.w	r5, r5, r3
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	ea4f 0232 	mov.w	r2, r2, rrx
 800487a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800487e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004882:	ebb6 0e02 	subs.w	lr, r6, r2
 8004886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800488a:	bf22      	ittt	cs
 800488c:	1ab6      	subcs	r6, r6, r2
 800488e:	4675      	movcs	r5, lr
 8004890:	ea40 000c 	orrcs.w	r0, r0, ip
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	ea4f 0232 	mov.w	r2, r2, rrx
 800489a:	ebb6 0e02 	subs.w	lr, r6, r2
 800489e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048a2:	bf22      	ittt	cs
 80048a4:	1ab6      	subcs	r6, r6, r2
 80048a6:	4675      	movcs	r5, lr
 80048a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ba:	bf22      	ittt	cs
 80048bc:	1ab6      	subcs	r6, r6, r2
 80048be:	4675      	movcs	r5, lr
 80048c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048d2:	bf22      	ittt	cs
 80048d4:	1ab6      	subcs	r6, r6, r2
 80048d6:	4675      	movcs	r5, lr
 80048d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80048e0:	d018      	beq.n	8004914 <__aeabi_ddiv+0x114>
 80048e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80048f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80048f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80048fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80048fe:	d1c0      	bne.n	8004882 <__aeabi_ddiv+0x82>
 8004900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004904:	d10b      	bne.n	800491e <__aeabi_ddiv+0x11e>
 8004906:	ea41 0100 	orr.w	r1, r1, r0
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004912:	e7b6      	b.n	8004882 <__aeabi_ddiv+0x82>
 8004914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004918:	bf04      	itt	eq
 800491a:	4301      	orreq	r1, r0
 800491c:	2000      	moveq	r0, #0
 800491e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004922:	bf88      	it	hi
 8004924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004928:	f63f aeaf 	bhi.w	800468a <__aeabi_dmul+0xde>
 800492c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004930:	bf04      	itt	eq
 8004932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800493a:	f150 0000 	adcs.w	r0, r0, #0
 800493e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800494c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004950:	bfc2      	ittt	gt
 8004952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800495a:	bd70      	popgt	{r4, r5, r6, pc}
 800495c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004960:	f04f 0e00 	mov.w	lr, #0
 8004964:	3c01      	subs	r4, #1
 8004966:	e690      	b.n	800468a <__aeabi_dmul+0xde>
 8004968:	ea45 0e06 	orr.w	lr, r5, r6
 800496c:	e68d      	b.n	800468a <__aeabi_dmul+0xde>
 800496e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004972:	ea94 0f0c 	teq	r4, ip
 8004976:	bf08      	it	eq
 8004978:	ea95 0f0c 	teqeq	r5, ip
 800497c:	f43f af3b 	beq.w	80047f6 <__aeabi_dmul+0x24a>
 8004980:	ea94 0f0c 	teq	r4, ip
 8004984:	d10a      	bne.n	800499c <__aeabi_ddiv+0x19c>
 8004986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800498a:	f47f af34 	bne.w	80047f6 <__aeabi_dmul+0x24a>
 800498e:	ea95 0f0c 	teq	r5, ip
 8004992:	f47f af25 	bne.w	80047e0 <__aeabi_dmul+0x234>
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	e72c      	b.n	80047f6 <__aeabi_dmul+0x24a>
 800499c:	ea95 0f0c 	teq	r5, ip
 80049a0:	d106      	bne.n	80049b0 <__aeabi_ddiv+0x1b0>
 80049a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049a6:	f43f aefd 	beq.w	80047a4 <__aeabi_dmul+0x1f8>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e722      	b.n	80047f6 <__aeabi_dmul+0x24a>
 80049b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049b4:	bf18      	it	ne
 80049b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ba:	f47f aec5 	bne.w	8004748 <__aeabi_dmul+0x19c>
 80049be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049c2:	f47f af0d 	bne.w	80047e0 <__aeabi_dmul+0x234>
 80049c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049ca:	f47f aeeb 	bne.w	80047a4 <__aeabi_dmul+0x1f8>
 80049ce:	e712      	b.n	80047f6 <__aeabi_dmul+0x24a>

080049d0 <__gedf2>:
 80049d0:	f04f 3cff 	mov.w	ip, #4294967295
 80049d4:	e006      	b.n	80049e4 <__cmpdf2+0x4>
 80049d6:	bf00      	nop

080049d8 <__ledf2>:
 80049d8:	f04f 0c01 	mov.w	ip, #1
 80049dc:	e002      	b.n	80049e4 <__cmpdf2+0x4>
 80049de:	bf00      	nop

080049e0 <__cmpdf2>:
 80049e0:	f04f 0c01 	mov.w	ip, #1
 80049e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80049f4:	bf18      	it	ne
 80049f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80049fa:	d01b      	beq.n	8004a34 <__cmpdf2+0x54>
 80049fc:	b001      	add	sp, #4
 80049fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a02:	bf0c      	ite	eq
 8004a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a08:	ea91 0f03 	teqne	r1, r3
 8004a0c:	bf02      	ittt	eq
 8004a0e:	ea90 0f02 	teqeq	r0, r2
 8004a12:	2000      	moveq	r0, #0
 8004a14:	4770      	bxeq	lr
 8004a16:	f110 0f00 	cmn.w	r0, #0
 8004a1a:	ea91 0f03 	teq	r1, r3
 8004a1e:	bf58      	it	pl
 8004a20:	4299      	cmppl	r1, r3
 8004a22:	bf08      	it	eq
 8004a24:	4290      	cmpeq	r0, r2
 8004a26:	bf2c      	ite	cs
 8004a28:	17d8      	asrcs	r0, r3, #31
 8004a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a2e:	f040 0001 	orr.w	r0, r0, #1
 8004a32:	4770      	bx	lr
 8004a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a3c:	d102      	bne.n	8004a44 <__cmpdf2+0x64>
 8004a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a42:	d107      	bne.n	8004a54 <__cmpdf2+0x74>
 8004a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d1d6      	bne.n	80049fc <__cmpdf2+0x1c>
 8004a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a52:	d0d3      	beq.n	80049fc <__cmpdf2+0x1c>
 8004a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <__aeabi_cdrcmple>:
 8004a5c:	4684      	mov	ip, r0
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4662      	mov	r2, ip
 8004a62:	468c      	mov	ip, r1
 8004a64:	4619      	mov	r1, r3
 8004a66:	4663      	mov	r3, ip
 8004a68:	e000      	b.n	8004a6c <__aeabi_cdcmpeq>
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdcmpeq>:
 8004a6c:	b501      	push	{r0, lr}
 8004a6e:	f7ff ffb7 	bl	80049e0 <__cmpdf2>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	bf48      	it	mi
 8004a76:	f110 0f00 	cmnmi.w	r0, #0
 8004a7a:	bd01      	pop	{r0, pc}

08004a7c <__aeabi_dcmpeq>:
 8004a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a80:	f7ff fff4 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a84:	bf0c      	ite	eq
 8004a86:	2001      	moveq	r0, #1
 8004a88:	2000      	movne	r0, #0
 8004a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a8e:	bf00      	nop

08004a90 <__aeabi_dcmplt>:
 8004a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a94:	f7ff ffea 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a98:	bf34      	ite	cc
 8004a9a:	2001      	movcc	r0, #1
 8004a9c:	2000      	movcs	r0, #0
 8004a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aa2:	bf00      	nop

08004aa4 <__aeabi_dcmple>:
 8004aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa8:	f7ff ffe0 	bl	8004a6c <__aeabi_cdcmpeq>
 8004aac:	bf94      	ite	ls
 8004aae:	2001      	movls	r0, #1
 8004ab0:	2000      	movhi	r0, #0
 8004ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_dcmpge>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff ffce 	bl	8004a5c <__aeabi_cdrcmple>
 8004ac0:	bf94      	ite	ls
 8004ac2:	2001      	movls	r0, #1
 8004ac4:	2000      	movhi	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmpgt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffc4 	bl	8004a5c <__aeabi_cdrcmple>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmpun>:
 8004ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ae8:	d102      	bne.n	8004af0 <__aeabi_dcmpun+0x10>
 8004aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004aee:	d10a      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x20>
 8004afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004afe:	d102      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	f04f 0001 	mov.w	r0, #1
 8004b0a:	4770      	bx	lr

08004b0c <__aeabi_d2f>:
 8004b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b14:	bf24      	itt	cs
 8004b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b1e:	d90d      	bls.n	8004b3c <__aeabi_d2f+0x30>
 8004b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b34:	bf08      	it	eq
 8004b36:	f020 0001 	biceq.w	r0, r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b40:	d121      	bne.n	8004b86 <__aeabi_d2f+0x7a>
 8004b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b46:	bfbc      	itt	lt
 8004b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b4c:	4770      	bxlt	lr
 8004b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b56:	f1c2 0218 	rsb	r2, r2, #24
 8004b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b62:	fa20 f002 	lsr.w	r0, r0, r2
 8004b66:	bf18      	it	ne
 8004b68:	f040 0001 	orrne.w	r0, r0, #1
 8004b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b78:	ea40 000c 	orr.w	r0, r0, ip
 8004b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b84:	e7cc      	b.n	8004b20 <__aeabi_d2f+0x14>
 8004b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b8a:	d107      	bne.n	8004b9c <__aeabi_d2f+0x90>
 8004b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004b90:	bf1e      	ittt	ne
 8004b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004b9a:	4770      	bxne	lr
 8004b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <__aeabi_uldivmod>:
 8004bac:	b953      	cbnz	r3, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bae:	b94a      	cbnz	r2, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bf08      	it	eq
 8004bb4:	2800      	cmpeq	r0, #0
 8004bb6:	bf1c      	itt	ne
 8004bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bc0:	f000 b970 	b.w	8004ea4 <__aeabi_idiv0>
 8004bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bcc:	f000 f806 	bl	8004bdc <__udivmoddi4>
 8004bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr

08004bdc <__udivmoddi4>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	9e08      	ldr	r6, [sp, #32]
 8004be2:	460d      	mov	r5, r1
 8004be4:	4604      	mov	r4, r0
 8004be6:	460f      	mov	r7, r1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14a      	bne.n	8004c82 <__udivmoddi4+0xa6>
 8004bec:	428a      	cmp	r2, r1
 8004bee:	4694      	mov	ip, r2
 8004bf0:	d965      	bls.n	8004cbe <__udivmoddi4+0xe2>
 8004bf2:	fab2 f382 	clz	r3, r2
 8004bf6:	b143      	cbz	r3, 8004c0a <__udivmoddi4+0x2e>
 8004bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8004bfc:	f1c3 0220 	rsb	r2, r3, #32
 8004c00:	409f      	lsls	r7, r3
 8004c02:	fa20 f202 	lsr.w	r2, r0, r2
 8004c06:	4317      	orrs	r7, r2
 8004c08:	409c      	lsls	r4, r3
 8004c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004c0e:	fa1f f58c 	uxth.w	r5, ip
 8004c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8004c16:	0c22      	lsrs	r2, r4, #16
 8004c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8004c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c20:	fb01 f005 	mul.w	r0, r1, r5
 8004c24:	4290      	cmp	r0, r2
 8004c26:	d90a      	bls.n	8004c3e <__udivmoddi4+0x62>
 8004c28:	eb1c 0202 	adds.w	r2, ip, r2
 8004c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8004c30:	f080 811c 	bcs.w	8004e6c <__udivmoddi4+0x290>
 8004c34:	4290      	cmp	r0, r2
 8004c36:	f240 8119 	bls.w	8004e6c <__udivmoddi4+0x290>
 8004c3a:	3902      	subs	r1, #2
 8004c3c:	4462      	add	r2, ip
 8004c3e:	1a12      	subs	r2, r2, r0
 8004c40:	b2a4      	uxth	r4, r4
 8004c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8004c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8004c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c4e:	fb00 f505 	mul.w	r5, r0, r5
 8004c52:	42a5      	cmp	r5, r4
 8004c54:	d90a      	bls.n	8004c6c <__udivmoddi4+0x90>
 8004c56:	eb1c 0404 	adds.w	r4, ip, r4
 8004c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004c5e:	f080 8107 	bcs.w	8004e70 <__udivmoddi4+0x294>
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	f240 8104 	bls.w	8004e70 <__udivmoddi4+0x294>
 8004c68:	4464      	add	r4, ip
 8004c6a:	3802      	subs	r0, #2
 8004c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	2100      	movs	r1, #0
 8004c74:	b11e      	cbz	r6, 8004c7e <__udivmoddi4+0xa2>
 8004c76:	40dc      	lsrs	r4, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d908      	bls.n	8004c98 <__udivmoddi4+0xbc>
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	f000 80ed 	beq.w	8004e66 <__udivmoddi4+0x28a>
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8004c92:	4608      	mov	r0, r1
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	fab3 f183 	clz	r1, r3
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d149      	bne.n	8004d34 <__udivmoddi4+0x158>
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	d302      	bcc.n	8004caa <__udivmoddi4+0xce>
 8004ca4:	4282      	cmp	r2, r0
 8004ca6:	f200 80f8 	bhi.w	8004e9a <__udivmoddi4+0x2be>
 8004caa:	1a84      	subs	r4, r0, r2
 8004cac:	eb65 0203 	sbc.w	r2, r5, r3
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	4617      	mov	r7, r2
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d0e2      	beq.n	8004c7e <__udivmoddi4+0xa2>
 8004cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8004cbc:	e7df      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004cbe:	b902      	cbnz	r2, 8004cc2 <__udivmoddi4+0xe6>
 8004cc0:	deff      	udf	#255	; 0xff
 8004cc2:	fab2 f382 	clz	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8090 	bne.w	8004dec <__udivmoddi4+0x210>
 8004ccc:	1a8a      	subs	r2, r1, r2
 8004cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cd2:	fa1f fe8c 	uxth.w	lr, ip
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8004cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8004ce0:	0c22      	lsrs	r2, r4, #16
 8004ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ce6:	fb0e f005 	mul.w	r0, lr, r5
 8004cea:	4290      	cmp	r0, r2
 8004cec:	d908      	bls.n	8004d00 <__udivmoddi4+0x124>
 8004cee:	eb1c 0202 	adds.w	r2, ip, r2
 8004cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8004cf6:	d202      	bcs.n	8004cfe <__udivmoddi4+0x122>
 8004cf8:	4290      	cmp	r0, r2
 8004cfa:	f200 80cb 	bhi.w	8004e94 <__udivmoddi4+0x2b8>
 8004cfe:	4645      	mov	r5, r8
 8004d00:	1a12      	subs	r2, r2, r0
 8004d02:	b2a4      	uxth	r4, r4
 8004d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8004d08:	fb07 2210 	mls	r2, r7, r0, r2
 8004d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004d10:	fb0e fe00 	mul.w	lr, lr, r0
 8004d14:	45a6      	cmp	lr, r4
 8004d16:	d908      	bls.n	8004d2a <__udivmoddi4+0x14e>
 8004d18:	eb1c 0404 	adds.w	r4, ip, r4
 8004d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8004d20:	d202      	bcs.n	8004d28 <__udivmoddi4+0x14c>
 8004d22:	45a6      	cmp	lr, r4
 8004d24:	f200 80bb 	bhi.w	8004e9e <__udivmoddi4+0x2c2>
 8004d28:	4610      	mov	r0, r2
 8004d2a:	eba4 040e 	sub.w	r4, r4, lr
 8004d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004d32:	e79f      	b.n	8004c74 <__udivmoddi4+0x98>
 8004d34:	f1c1 0720 	rsb	r7, r1, #32
 8004d38:	408b      	lsls	r3, r1
 8004d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d42:	fa05 f401 	lsl.w	r4, r5, r1
 8004d46:	fa20 f307 	lsr.w	r3, r0, r7
 8004d4a:	40fd      	lsrs	r5, r7
 8004d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d50:	4323      	orrs	r3, r4
 8004d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8004d56:	fa1f fe8c 	uxth.w	lr, ip
 8004d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8004d5e:	0c1c      	lsrs	r4, r3, #16
 8004d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004d64:	fb08 f50e 	mul.w	r5, r8, lr
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8004d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8004d72:	d90b      	bls.n	8004d8c <__udivmoddi4+0x1b0>
 8004d74:	eb1c 0404 	adds.w	r4, ip, r4
 8004d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d7c:	f080 8088 	bcs.w	8004e90 <__udivmoddi4+0x2b4>
 8004d80:	42a5      	cmp	r5, r4
 8004d82:	f240 8085 	bls.w	8004e90 <__udivmoddi4+0x2b4>
 8004d86:	f1a8 0802 	sub.w	r8, r8, #2
 8004d8a:	4464      	add	r4, ip
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	b29d      	uxth	r5, r3
 8004d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8004d94:	fb09 4413 	mls	r4, r9, r3, r4
 8004d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8004da0:	45a6      	cmp	lr, r4
 8004da2:	d908      	bls.n	8004db6 <__udivmoddi4+0x1da>
 8004da4:	eb1c 0404 	adds.w	r4, ip, r4
 8004da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8004dac:	d26c      	bcs.n	8004e88 <__udivmoddi4+0x2ac>
 8004dae:	45a6      	cmp	lr, r4
 8004db0:	d96a      	bls.n	8004e88 <__udivmoddi4+0x2ac>
 8004db2:	3b02      	subs	r3, #2
 8004db4:	4464      	add	r4, ip
 8004db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dba:	fba3 9502 	umull	r9, r5, r3, r2
 8004dbe:	eba4 040e 	sub.w	r4, r4, lr
 8004dc2:	42ac      	cmp	r4, r5
 8004dc4:	46c8      	mov	r8, r9
 8004dc6:	46ae      	mov	lr, r5
 8004dc8:	d356      	bcc.n	8004e78 <__udivmoddi4+0x29c>
 8004dca:	d053      	beq.n	8004e74 <__udivmoddi4+0x298>
 8004dcc:	b156      	cbz	r6, 8004de4 <__udivmoddi4+0x208>
 8004dce:	ebb0 0208 	subs.w	r2, r0, r8
 8004dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8004dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8004dda:	40ca      	lsrs	r2, r1
 8004ddc:	40cc      	lsrs	r4, r1
 8004dde:	4317      	orrs	r7, r2
 8004de0:	e9c6 7400 	strd	r7, r4, [r6]
 8004de4:	4618      	mov	r0, r3
 8004de6:	2100      	movs	r1, #0
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	f1c3 0120 	rsb	r1, r3, #32
 8004df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8004df4:	fa20 f201 	lsr.w	r2, r0, r1
 8004df8:	fa25 f101 	lsr.w	r1, r5, r1
 8004dfc:	409d      	lsls	r5, r3
 8004dfe:	432a      	orrs	r2, r5
 8004e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e04:	fa1f fe8c 	uxth.w	lr, ip
 8004e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8004e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8004e10:	0c11      	lsrs	r1, r2, #16
 8004e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e16:	fb00 f50e 	mul.w	r5, r0, lr
 8004e1a:	428d      	cmp	r5, r1
 8004e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8004e20:	d908      	bls.n	8004e34 <__udivmoddi4+0x258>
 8004e22:	eb1c 0101 	adds.w	r1, ip, r1
 8004e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e2a:	d22f      	bcs.n	8004e8c <__udivmoddi4+0x2b0>
 8004e2c:	428d      	cmp	r5, r1
 8004e2e:	d92d      	bls.n	8004e8c <__udivmoddi4+0x2b0>
 8004e30:	3802      	subs	r0, #2
 8004e32:	4461      	add	r1, ip
 8004e34:	1b49      	subs	r1, r1, r5
 8004e36:	b292      	uxth	r2, r2
 8004e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8004e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8004e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e44:	fb05 f10e 	mul.w	r1, r5, lr
 8004e48:	4291      	cmp	r1, r2
 8004e4a:	d908      	bls.n	8004e5e <__udivmoddi4+0x282>
 8004e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8004e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8004e54:	d216      	bcs.n	8004e84 <__udivmoddi4+0x2a8>
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d914      	bls.n	8004e84 <__udivmoddi4+0x2a8>
 8004e5a:	3d02      	subs	r5, #2
 8004e5c:	4462      	add	r2, ip
 8004e5e:	1a52      	subs	r2, r2, r1
 8004e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004e64:	e738      	b.n	8004cd8 <__udivmoddi4+0xfc>
 8004e66:	4631      	mov	r1, r6
 8004e68:	4630      	mov	r0, r6
 8004e6a:	e708      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	e6e6      	b.n	8004c3e <__udivmoddi4+0x62>
 8004e70:	4610      	mov	r0, r2
 8004e72:	e6fb      	b.n	8004c6c <__udivmoddi4+0x90>
 8004e74:	4548      	cmp	r0, r9
 8004e76:	d2a9      	bcs.n	8004dcc <__udivmoddi4+0x1f0>
 8004e78:	ebb9 0802 	subs.w	r8, r9, r2
 8004e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004e80:	3b01      	subs	r3, #1
 8004e82:	e7a3      	b.n	8004dcc <__udivmoddi4+0x1f0>
 8004e84:	4645      	mov	r5, r8
 8004e86:	e7ea      	b.n	8004e5e <__udivmoddi4+0x282>
 8004e88:	462b      	mov	r3, r5
 8004e8a:	e794      	b.n	8004db6 <__udivmoddi4+0x1da>
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	e7d1      	b.n	8004e34 <__udivmoddi4+0x258>
 8004e90:	46d0      	mov	r8, sl
 8004e92:	e77b      	b.n	8004d8c <__udivmoddi4+0x1b0>
 8004e94:	3d02      	subs	r5, #2
 8004e96:	4462      	add	r2, ip
 8004e98:	e732      	b.n	8004d00 <__udivmoddi4+0x124>
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	e70a      	b.n	8004cb4 <__udivmoddi4+0xd8>
 8004e9e:	4464      	add	r4, ip
 8004ea0:	3802      	subs	r0, #2
 8004ea2:	e742      	b.n	8004d2a <__udivmoddi4+0x14e>

08004ea4 <__aeabi_idiv0>:
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eae:	463b      	mov	r3, r7
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00b fe87 	bl	8010bc8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <MX_ADC2_Init+0x100>)
 8004ebe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ec0:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ec2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ec6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ece:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004eda:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f24:	481f      	ldr	r0, [pc, #124]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f26:	f002 ff59 	bl	8007ddc <HAL_ADC_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f30:	f001 fd7c 	bl	8006a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MX_ADC2_Init+0x104>)
 8004f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f38:	2306      	movs	r3, #6
 8004f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <MX_ADC2_Init+0x108>)
 8004f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f44:	2304      	movs	r3, #4
 8004f46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4814      	ldr	r0, [pc, #80]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f52:	f003 f9f7 	bl	8008344 <HAL_ADC_ConfigChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f5c:	f001 fd66 	bl	8006a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <MX_ADC2_Init+0x10c>)
 8004f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f64:	230c      	movs	r3, #12
 8004f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f68:	463b      	mov	r3, r7
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f6e:	f003 f9e9 	bl	8008344 <HAL_ADC_ConfigChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f78:	f001 fd58 	bl	8006a2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <MX_ADC2_Init+0x110>)
 8004f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f80:	2312      	movs	r3, #18
 8004f82:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f84:	237f      	movs	r3, #127	; 0x7f
 8004f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f8e:	f003 f9d9 	bl	8008344 <HAL_ADC_ConfigChannel>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004f98:	f001 fd48 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000094 	.word	0x20000094
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	04300002 	.word	0x04300002
 8004fb0:	407f0000 	.word	0x407f0000
 8004fb4:	19200040 	.word	0x19200040
 8004fb8:	2a000400 	.word	0x2a000400

08004fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0a0      	sub	sp, #128	; 0x80
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fd4:	f107 0318 	add.w	r3, r7, #24
 8004fd8:	2254      	movs	r2, #84	; 0x54
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f00b fdf3 	bl	8010bc8 <memset>
  if(adcHandle->Instance==ADC2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	; (8005118 <HAL_ADC_MspInit+0x15c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8090 	bne.w	800510e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f006 f8a2 	bl	800b148 <HAL_RCCEx_PeriphCLKConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800500a:	f001 fd0f 	bl	8006a2c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_ADC_MspInit+0x160>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005026:	4b3d      	ldr	r3, [pc, #244]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_ADC_MspInit+0x160>)
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b3a      	ldr	r3, [pc, #232]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800506e:	2302      	movs	r3, #2
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005072:	2303      	movs	r3, #3
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	2300      	movs	r3, #0
 8005078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800507a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800507e:	4619      	mov	r1, r3
 8005080:	4827      	ldr	r0, [pc, #156]	; (8005120 <HAL_ADC_MspInit+0x164>)
 8005082:	f004 faa7 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005086:	2303      	movs	r3, #3
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4822      	ldr	r0, [pc, #136]	; (8005124 <HAL_ADC_MspInit+0x168>)
 800509a:	f004 fa9b 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f004 fa8e 	bl	80095d4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_ADC_MspInit+0x170>)
 80050bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050f4:	f003 ff3c 	bl	8008f70 <HAL_DMA_Init>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80050fe:	f001 fc95 	bl	8006a2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800510e:	bf00      	nop
 8005110:	3780      	adds	r7, #128	; 0x80
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	50000100 	.word	0x50000100
 800511c:	40021000 	.word	0x40021000
 8005120:	48001400 	.word	0x48001400
 8005124:	48000800 	.word	0x48000800
 8005128:	20000100 	.word	0x20000100
 800512c:	40020008 	.word	0x40020008

08005130 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f9c9 	bl	80044d8 <__aeabi_i2d>
 8005146:	a30f      	add	r3, pc, #60	; (adr r3, 8005184 <Battery_ReadBatteryVoltage+0x54>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7ff fa2e 	bl	80045ac <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <Battery_ReadBatteryVoltage+0x50>)
 800515e:	f7ff fb4f 	bl	8004800 <__aeabi_ddiv>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	f7ff fccf 	bl	8004b0c <__aeabi_d2f>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	f3af 8000 	nop.w
 8005180:	40b00000 	.word	0x40b00000
 8005184:	66666666 	.word	0x66666666
 8005188:	400a6666 	.word	0x400a6666
 800518c:	00000000 	.word	0x00000000

08005190 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	3302      	adds	r3, #2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f999 	bl	80044d8 <__aeabi_i2d>
 80051a6:	a319      	add	r3, pc, #100	; (adr r3, 800520c <Battery_ReadCurrent3V3+0x7c>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7ff f9fe 	bl	80045ac <__aeabi_dmul>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <Battery_ReadCurrent3V3+0x78>)
 80051be:	f7ff fb1f 	bl	8004800 <__aeabi_ddiv>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7ff fc9f 	bl	8004b0c <__aeabi_d2f>
 80051ce:	4603      	mov	r3, r0
 80051d0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff f992 	bl	80044fc <__aeabi_f2d>
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <Battery_ReadCurrent3V3+0x70>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7ff fb0f 	bl	8004800 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7ff fc8f 	bl	8004b0c <__aeabi_d2f>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	f3af 8000 	nop.w
 8005200:	d2f1a9fc 	.word	0xd2f1a9fc
 8005204:	3f60624d 	.word	0x3f60624d
 8005208:	40b00000 	.word	0x40b00000
 800520c:	66666666 	.word	0x66666666
 8005210:	400a6666 	.word	0x400a6666
 8005214:	00000000 	.word	0x00000000

08005218 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff f956 	bl	80044d8 <__aeabi_i2d>
 800522c:	a319      	add	r3, pc, #100	; (adr r3, 8005294 <Battery_ReadCurrent5V+0x7c>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7ff f9bb 	bl	80045ac <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <Battery_ReadCurrent5V+0x78>)
 8005244:	f7ff fadc 	bl	8004800 <__aeabi_ddiv>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f7ff fc5c 	bl	8004b0c <__aeabi_d2f>
 8005254:	4603      	mov	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff f94f 	bl	80044fc <__aeabi_f2d>
 800525e:	a30a      	add	r3, pc, #40	; (adr r3, 8005288 <Battery_ReadCurrent5V+0x70>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7ff facc 	bl	8004800 <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff fc4c 	bl	8004b0c <__aeabi_d2f>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	f3af 8000 	nop.w
 8005288:	d2f1a9fc 	.word	0xd2f1a9fc
 800528c:	3f60624d 	.word	0x3f60624d
 8005290:	40b00000 	.word	0x40b00000
 8005294:	66666666 	.word	0x66666666
 8005298:	400a6666 	.word	0x400a6666
 800529c:	00000000 	.word	0x00000000

080052a0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff f91d 	bl	80044fc <__aeabi_f2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	a10f      	add	r1, pc, #60	; (adr r1, 8005304 <Battery_RemaningTime+0x64>)
 80052c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052cc:	f7ff fa98 	bl	8004800 <__aeabi_ddiv>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7ff fc18 	bl	8004b0c <__aeabi_d2f>
 80052dc:	4603      	mov	r3, r0
 80052de:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80052e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005300 <Battery_RemaningTime+0x60>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 2a90 	vmov	r2, s15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	4a5bba00 	.word	0x4a5bba00
 8005304:	9999999a 	.word	0x9999999a
 8005308:	40019999 	.word	0x40019999

0800530c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b0b2      	sub	sp, #200	; 0xc8
 8005310:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */


	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8005312:	4b5d      	ldr	r3, [pc, #372]	; (8005488 <MX_FREERTOS_Init+0x17c>)
 8005314:	9306      	str	r3, [sp, #24]
 8005316:	2302      	movs	r3, #2
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	2301      	movs	r3, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	2304      	movs	r3, #4
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <MX_FREERTOS_Init+0x180>)
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	4b58      	ldr	r3, [pc, #352]	; (800548c <MX_FREERTOS_Init+0x180>)
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	4a56      	ldr	r2, [pc, #344]	; (800548c <MX_FREERTOS_Init+0x180>)
 8005332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005336:	4856      	ldr	r0, [pc, #344]	; (8005490 <MX_FREERTOS_Init+0x184>)
 8005338:	f001 fe0c 	bl	8006f54 <PropulsionAndControl_Init>


	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800533c:	4955      	ldr	r1, [pc, #340]	; (8005494 <MX_FREERTOS_Init+0x188>)
 800533e:	4856      	ldr	r0, [pc, #344]	; (8005498 <MX_FREERTOS_Init+0x18c>)
 8005340:	f000 fcbc 	bl	8005cbc <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800534a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800534e:	4618      	mov	r0, r3
 8005350:	f009 fb60 	bl	800ea14 <osMutexCreate>
 8005354:	4603      	mov	r3, r0
 8005356:	4a51      	ldr	r2, [pc, #324]	; (800549c <MX_FREERTOS_Init+0x190>)
 8005358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800535a:	2300      	movs	r3, #0
 800535c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005360:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f009 fb60 	bl	800ea2c <osSemaphoreCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a4c      	ldr	r2, [pc, #304]	; (80054a0 <MX_FREERTOS_Init+0x194>)
 8005370:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 8005372:	4b4c      	ldr	r3, [pc, #304]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 8005374:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8005378:	461d      	mov	r5, r3
 800537a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800537c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800537e:	682b      	ldr	r3, [r5, #0]
 8005380:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 8005382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005386:	2100      	movs	r1, #0
 8005388:	4618      	mov	r0, r3
 800538a:	f009 fb08 	bl	800e99e <osThreadCreate>
 800538e:	4603      	mov	r3, r0
 8005390:	4a45      	ldr	r2, [pc, #276]	; (80054a8 <MX_FREERTOS_Init+0x19c>)
 8005392:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 8005394:	4b45      	ldr	r3, [pc, #276]	; (80054ac <MX_FREERTOS_Init+0x1a0>)
 8005396:	f107 0478 	add.w	r4, r7, #120	; 0x78
 800539a:	461d      	mov	r5, r3
 800539c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800539e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a0:	682b      	ldr	r3, [r5, #0]
 80053a2:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053a8:	2100      	movs	r1, #0
 80053aa:	4618      	mov	r0, r3
 80053ac:	f009 faf7 	bl	800e99e <osThreadCreate>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a3f      	ldr	r2, [pc, #252]	; (80054b0 <MX_FREERTOS_Init+0x1a4>)
 80053b4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053b6:	4b3f      	ldr	r3, [pc, #252]	; (80054b4 <MX_FREERTOS_Init+0x1a8>)
 80053b8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80053bc:	461d      	mov	r5, r3
 80053be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053c6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f009 fae6 	bl	800e99e <osThreadCreate>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a38      	ldr	r2, [pc, #224]	; (80054b8 <MX_FREERTOS_Init+0x1ac>)
 80053d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 80053d8:	4b38      	ldr	r3, [pc, #224]	; (80054bc <MX_FREERTOS_Init+0x1b0>)
 80053da:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80053de:	461d      	mov	r5, r3
 80053e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053e4:	682b      	ldr	r3, [r5, #0]
 80053e6:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 80053e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f009 fad5 	bl	800e99e <osThreadCreate>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a32      	ldr	r2, [pc, #200]	; (80054c0 <MX_FREERTOS_Init+0x1b4>)
 80053f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 80053fa:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <MX_FREERTOS_Init+0x1b8>)
 80053fc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005400:	461d      	mov	r5, r3
 8005402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005406:	682b      	ldr	r3, [r5, #0]
 8005408:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 800540a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800540e:	2100      	movs	r1, #0
 8005410:	4618      	mov	r0, r3
 8005412:	f009 fac4 	bl	800e99e <osThreadCreate>
 8005416:	4603      	mov	r3, r0
 8005418:	4a2b      	ldr	r2, [pc, #172]	; (80054c8 <MX_FREERTOS_Init+0x1bc>)
 800541a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <MX_FREERTOS_Init+0x1c0>)
 800541e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005422:	461d      	mov	r5, r3
 8005424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800542c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f009 fab3 	bl	800e99e <osThreadCreate>
 8005438:	4603      	mov	r3, r0
 800543a:	4a25      	ldr	r2, [pc, #148]	; (80054d0 <MX_FREERTOS_Init+0x1c4>)
 800543c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <MX_FREERTOS_Init+0x1c8>)
 8005440:	f107 0414 	add.w	r4, r7, #20
 8005444:	461d      	mov	r5, r3
 8005446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800544a:	682b      	ldr	r3, [r5, #0]
 800544c:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	2100      	movs	r1, #0
 8005454:	4618      	mov	r0, r3
 8005456:	f009 faa2 	bl	800e99e <osThreadCreate>
 800545a:	4603      	mov	r3, r0
 800545c:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <MX_FREERTOS_Init+0x1cc>)
 800545e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005460:	4b1e      	ldr	r3, [pc, #120]	; (80054dc <MX_FREERTOS_Init+0x1d0>)
 8005462:	463c      	mov	r4, r7
 8005464:	461d      	mov	r5, r3
 8005466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800546a:	682b      	ldr	r3, [r5, #0]
 800546c:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 800546e:	463b      	mov	r3, r7
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f009 fa93 	bl	800e99e <osThreadCreate>
 8005478:	4603      	mov	r3, r0
 800547a:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <MX_FREERTOS_Init+0x1d4>)
 800547c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800547e:	bf00      	nop
 8005480:	37a8      	adds	r7, #168	; 0xa8
 8005482:	46bd      	mov	sp, r7
 8005484:	bdb0      	pop	{r4, r5, r7, pc}
 8005486:	bf00      	nop
 8005488:	200007fc 	.word	0x200007fc
 800548c:	48000400 	.word	0x48000400
 8005490:	200002b4 	.word	0x200002b4
 8005494:	20000240 	.word	0x20000240
 8005498:	200001f4 	.word	0x200001f4
 800549c:	200001ec 	.word	0x200001ec
 80054a0:	200001f0 	.word	0x200001f0
 80054a4:	08011c38 	.word	0x08011c38
 80054a8:	200001cc 	.word	0x200001cc
 80054ac:	08011c58 	.word	0x08011c58
 80054b0:	200001d0 	.word	0x200001d0
 80054b4:	08011c78 	.word	0x08011c78
 80054b8:	200001d4 	.word	0x200001d4
 80054bc:	08011c94 	.word	0x08011c94
 80054c0:	200001d8 	.word	0x200001d8
 80054c4:	08011cb8 	.word	0x08011cb8
 80054c8:	200001dc 	.word	0x200001dc
 80054cc:	08011cd0 	.word	0x08011cd0
 80054d0:	200001e0 	.word	0x200001e0
 80054d4:	08011cf0 	.word	0x08011cf0
 80054d8:	200001e4 	.word	0x200001e4
 80054dc:	08011d14 	.word	0x08011d14
 80054e0:	200001e8 	.word	0x200001e8

080054e4 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80054ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f4:	f004 fa08 	bl	8009908 <HAL_GPIO_TogglePin>
    vTaskDelay(1000);
 80054f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80054fc:	f00a f900 	bl	800f700 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005500:	e7f4      	b.n	80054ec <StartLedTask+0x8>
	...

08005504 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b082      	sub	sp, #8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 800550c:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005554 <StartRoll_PID+0x50>
 8005510:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005558 <StartRoll_PID+0x54>
 8005514:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800555c <StartRoll_PID+0x58>
 8005518:	4811      	ldr	r0, [pc, #68]	; (8005560 <StartRoll_PID+0x5c>)
 800551a:	f001 fad7 	bl	8006acc <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <StartRoll_PID+0x60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2119      	movs	r1, #25
 8005524:	4618      	mov	r0, r3
 8005526:	f009 fda9 	bl	800f07c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 800552a:	490f      	ldr	r1, [pc, #60]	; (8005568 <StartRoll_PID+0x64>)
 800552c:	480f      	ldr	r0, [pc, #60]	; (800556c <StartRoll_PID+0x68>)
 800552e:	f000 fc01 	bl	8005d34 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <StartRoll_PID+0x60>)
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	2300      	movs	r3, #0
 8005538:	2200      	movs	r2, #0
 800553a:	2100      	movs	r1, #0
 800553c:	f009 fc2a 	bl	800ed94 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <StartRoll_PID+0x6c>)
 8005542:	4a09      	ldr	r2, [pc, #36]	; (8005568 <StartRoll_PID+0x64>)
 8005544:	490b      	ldr	r1, [pc, #44]	; (8005574 <StartRoll_PID+0x70>)
 8005546:	4806      	ldr	r0, [pc, #24]	; (8005560 <StartRoll_PID+0x5c>)
 8005548:	f001 fb1e 	bl	8006b88 <Pid_CompensateRoll>


		vTaskDelay(150);
 800554c:	2096      	movs	r0, #150	; 0x96
 800554e:	f00a f8d7 	bl	800f700 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005552:	e7e4      	b.n	800551e <StartRoll_PID+0x1a>
 8005554:	bdb15662 	.word	0xbdb15662
 8005558:	bce59984 	.word	0xbce59984
 800555c:	be07bf5a 	.word	0xbe07bf5a
 8005560:	200001a8 	.word	0x200001a8
 8005564:	200001ec 	.word	0x200001ec
 8005568:	20000240 	.word	0x20000240
 800556c:	200001f4 	.word	0x200001f4
 8005570:	200002b4 	.word	0x200002b4
 8005574:	200002a0 	.word	0x200002a0

08005578 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 8005580:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005584:	eddf 0a10 	vldr	s1, [pc, #64]	; 80055c8 <StartPitch_PID+0x50>
 8005588:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80055cc <StartPitch_PID+0x54>
 800558c:	4810      	ldr	r0, [pc, #64]	; (80055d0 <StartPitch_PID+0x58>)
 800558e:	f001 fa9d 	bl	8006acc <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005592:	4b10      	ldr	r3, [pc, #64]	; (80055d4 <StartPitch_PID+0x5c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2119      	movs	r1, #25
 8005598:	4618      	mov	r0, r3
 800559a:	f009 fd6f 	bl	800f07c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 800559e:	490e      	ldr	r1, [pc, #56]	; (80055d8 <StartPitch_PID+0x60>)
 80055a0:	480e      	ldr	r0, [pc, #56]	; (80055dc <StartPitch_PID+0x64>)
 80055a2:	f000 fc19 	bl	8005dd8 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <StartPitch_PID+0x5c>)
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	2300      	movs	r3, #0
 80055ac:	2200      	movs	r2, #0
 80055ae:	2100      	movs	r1, #0
 80055b0:	f009 fbf0 	bl	800ed94 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80055b4:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <StartPitch_PID+0x68>)
 80055b6:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <StartPitch_PID+0x60>)
 80055b8:	490a      	ldr	r1, [pc, #40]	; (80055e4 <StartPitch_PID+0x6c>)
 80055ba:	4805      	ldr	r0, [pc, #20]	; (80055d0 <StartPitch_PID+0x58>)
 80055bc:	f001 fbaa 	bl	8006d14 <Pid_CompensatePitch>

		vTaskDelay(150);
 80055c0:	2096      	movs	r0, #150	; 0x96
 80055c2:	f00a f89d 	bl	800f700 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055c6:	e7e4      	b.n	8005592 <StartPitch_PID+0x1a>
 80055c8:	3ccccccd 	.word	0x3ccccccd
 80055cc:	42c80000 	.word	0x42c80000
 80055d0:	20000160 	.word	0x20000160
 80055d4:	200001ec 	.word	0x200001ec
 80055d8:	20000240 	.word	0x20000240
 80055dc:	200001f4 	.word	0x200001f4
 80055e0:	200002b4 	.word	0x200002b4
 80055e4:	200002a0 	.word	0x200002a0

080055e8 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 80055f0:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055f4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005638 <StartYaw_PID+0x50>
 80055f8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800563c <StartYaw_PID+0x54>
 80055fc:	4810      	ldr	r0, [pc, #64]	; (8005640 <StartYaw_PID+0x58>)
 80055fe:	f001 fa65 	bl	8006acc <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005602:	4b10      	ldr	r3, [pc, #64]	; (8005644 <StartYaw_PID+0x5c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2119      	movs	r1, #25
 8005608:	4618      	mov	r0, r3
 800560a:	f009 fd37 	bl	800f07c <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800560e:	490e      	ldr	r1, [pc, #56]	; (8005648 <StartYaw_PID+0x60>)
 8005610:	480e      	ldr	r0, [pc, #56]	; (800564c <StartYaw_PID+0x64>)
 8005612:	f000 fc33 	bl	8005e7c <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005616:	4b0b      	ldr	r3, [pc, #44]	; (8005644 <StartYaw_PID+0x5c>)
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	2300      	movs	r3, #0
 800561c:	2200      	movs	r2, #0
 800561e:	2100      	movs	r1, #0
 8005620:	f009 fbb8 	bl	800ed94 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005624:	4b0a      	ldr	r3, [pc, #40]	; (8005650 <StartYaw_PID+0x68>)
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <StartYaw_PID+0x60>)
 8005628:	490a      	ldr	r1, [pc, #40]	; (8005654 <StartYaw_PID+0x6c>)
 800562a:	4805      	ldr	r0, [pc, #20]	; (8005640 <StartYaw_PID+0x58>)
 800562c:	f001 fa69 	bl	8006b02 <Pid_CompensateYaw>

		vTaskDelay(150);
 8005630:	2096      	movs	r0, #150	; 0x96
 8005632:	f00a f865 	bl	800f700 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005636:	e7e4      	b.n	8005602 <StartYaw_PID+0x1a>
 8005638:	3ccccccd 	.word	0x3ccccccd
 800563c:	42c80000 	.word	0x42c80000
 8005640:	20000184 	.word	0x20000184
 8005644:	200001ec 	.word	0x200001ec
 8005648:	20000240 	.word	0x20000240
 800564c:	200001f4 	.word	0x200001f4
 8005650:	200002b4 	.word	0x200002b4
 8005654:	200002a0 	.word	0x200002a0

08005658 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 8005660:	480f      	ldr	r0, [pc, #60]	; (80056a0 <StartPressureMonitor+0x48>)
 8005662:	f000 f9a3 	bl	80059ac <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8005666:	4b0f      	ldr	r3, [pc, #60]	; (80056a4 <StartPressureMonitor+0x4c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	490e      	ldr	r1, [pc, #56]	; (80056a8 <StartPressureMonitor+0x50>)
 800566e:	480c      	ldr	r0, [pc, #48]	; (80056a0 <StartPressureMonitor+0x48>)
 8005670:	f000 f9e6 	bl	8005a40 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 8005674:	4b0b      	ldr	r3, [pc, #44]	; (80056a4 <StartPressureMonitor+0x4c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	490b      	ldr	r1, [pc, #44]	; (80056a8 <StartPressureMonitor+0x50>)
 800567c:	4808      	ldr	r0, [pc, #32]	; (80056a0 <StartPressureMonitor+0x48>)
 800567e:	f000 f92f 	bl	80058e0 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8005682:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <StartPressureMonitor+0x4c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <StartPressureMonitor+0x50>)
 800568a:	4805      	ldr	r0, [pc, #20]	; (80056a0 <StartPressureMonitor+0x48>)
 800568c:	f000 f8d2 	bl	8005834 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 8005690:	4805      	ldr	r0, [pc, #20]	; (80056a8 <StartPressureMonitor+0x50>)
 8005692:	f000 fa01 	bl	8005a98 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
		vTaskDelay(500);
 8005696:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800569a:	f00a f831 	bl	800f700 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 800569e:	e7e9      	b.n	8005674 <StartPressureMonitor+0x1c>
 80056a0:	200001f4 	.word	0x200001f4
 80056a4:	200001ec 	.word	0x200001ec
 80056a8:	200002e4 	.word	0x200002e4

080056ac <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056b8:	4909      	ldr	r1, [pc, #36]	; (80056e0 <StartGPS+0x34>)
 80056ba:	480a      	ldr	r0, [pc, #40]	; (80056e4 <StartGPS+0x38>)
 80056bc:	f007 f9b6 	bl	800ca2c <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <StartGPS+0x3c>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4909      	ldr	r1, [pc, #36]	; (80056ec <StartGPS+0x40>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f009 fcd8 	bl	800f07c <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80056cc:	4908      	ldr	r1, [pc, #32]	; (80056f0 <StartGPS+0x44>)
 80056ce:	4804      	ldr	r0, [pc, #16]	; (80056e0 <StartGPS+0x34>)
 80056d0:	f000 fd52 	bl	8006178 <gps_ReadNMEA>
	  vTaskDelay(1000);
 80056d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056d8:	f00a f812 	bl	800f700 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056dc:	e7ea      	b.n	80056b4 <StartGPS+0x8>
 80056de:	bf00      	nop
 80056e0:	20000328 	.word	0x20000328
 80056e4:	20000848 	.word	0x20000848
 80056e8:	200001f0 	.word	0x200001f0
 80056ec:	000186a0 	.word	0x000186a0
 80056f0:	200002f8 	.word	0x200002f8

080056f4 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]





    vTaskDelay(1);
 80056fc:	2001      	movs	r0, #1
 80056fe:	f009 ffff 	bl	800f700 <vTaskDelay>
 8005702:	e7fb      	b.n	80056fc <StartMainTask+0x8>

08005704 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <StartBatteryMonitoring+0x30>)
 800570e:	480a      	ldr	r0, [pc, #40]	; (8005738 <StartBatteryMonitoring+0x34>)
 8005710:	f7ff fd0e 	bl	8005130 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 8005714:	4907      	ldr	r1, [pc, #28]	; (8005734 <StartBatteryMonitoring+0x30>)
 8005716:	4808      	ldr	r0, [pc, #32]	; (8005738 <StartBatteryMonitoring+0x34>)
 8005718:	f7ff fd7e 	bl	8005218 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 800571c:	4905      	ldr	r1, [pc, #20]	; (8005734 <StartBatteryMonitoring+0x30>)
 800571e:	4806      	ldr	r0, [pc, #24]	; (8005738 <StartBatteryMonitoring+0x34>)
 8005720:	f7ff fd36 	bl	8005190 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 8005724:	4804      	ldr	r0, [pc, #16]	; (8005738 <StartBatteryMonitoring+0x34>)
 8005726:	f7ff fdbb 	bl	80052a0 <Battery_RemaningTime>
    vTaskDelay(5000);
 800572a:	f241 3088 	movw	r0, #5000	; 0x1388
 800572e:	f009 ffe7 	bl	800f700 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005732:	e7eb      	b.n	800570c <StartBatteryMonitoring+0x8>
 8005734:	20000710 	.word	0x20000710
 8005738:	20000318 	.word	0x20000318

0800573c <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af04      	add	r7, sp, #16
 8005742:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005744:	230a      	movs	r3, #10
 8005746:	9302      	str	r3, [sp, #8]
 8005748:	2301      	movs	r3, #1
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	f107 030f 	add.w	r3, r7, #15
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2301      	movs	r3, #1
 8005754:	221b      	movs	r2, #27
 8005756:	21ec      	movs	r1, #236	; 0xec
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f004 fa93 	bl	8009c84 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8005764:	b2db      	uxtb	r3, r3
 8005766:	3301      	adds	r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800576c:	230a      	movs	r3, #10
 800576e:	9302      	str	r3, [sp, #8]
 8005770:	2301      	movs	r3, #1
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	f107 030e 	add.w	r3, r7, #14
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	2301      	movs	r3, #1
 800577c:	221b      	movs	r2, #27
 800577e:	21ec      	movs	r1, #236	; 0xec
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f004 f96b 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 8005786:	bf00      	nop
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800578e:	b580      	push	{r7, lr}
 8005790:	b088      	sub	sp, #32
 8005792:	af04      	add	r7, sp, #16
 8005794:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005796:	230a      	movs	r3, #10
 8005798:	9302      	str	r3, [sp, #8]
 800579a:	2301      	movs	r3, #1
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	f107 030f 	add.w	r3, r7, #15
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2301      	movs	r3, #1
 80057a6:	221b      	movs	r2, #27
 80057a8:	21ec      	movs	r1, #236	; 0xec
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f004 fa6a 	bl	8009c84 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	f003 0331 	and.w	r3, r3, #49	; 0x31
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	3301      	adds	r3, #1
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80057be:	230a      	movs	r3, #10
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	2301      	movs	r3, #1
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	f107 030e 	add.w	r3, r7, #14
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	2301      	movs	r3, #1
 80057ce:	221b      	movs	r2, #27
 80057d0:	21ec      	movs	r1, #236	; 0xec
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f004 f942 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af04      	add	r7, sp, #16
 80057e6:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80057e8:	230a      	movs	r3, #10
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	2301      	movs	r3, #1
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	f107 030f 	add.w	r3, r7, #15
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	2301      	movs	r3, #1
 80057f8:	221b      	movs	r2, #27
 80057fa:	21ec      	movs	r1, #236	; 0xec
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f004 fa41 	bl	8009c84 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	b2db      	uxtb	r3, r3
 800580a:	3330      	adds	r3, #48	; 0x30
 800580c:	b2db      	uxtb	r3, r3
 800580e:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005810:	230a      	movs	r3, #10
 8005812:	9302      	str	r3, [sp, #8]
 8005814:	2301      	movs	r3, #1
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	f107 030e 	add.w	r3, r7, #14
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	2301      	movs	r3, #1
 8005820:	221b      	movs	r2, #27
 8005822:	21ec      	movs	r1, #236	; 0xec
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f004 f919 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 800582a:	bf00      	nop
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
	...

08005834 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af04      	add	r7, sp, #16
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005840:	2123      	movs	r1, #35	; 0x23
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f009 fc1a 	bl	800f07c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005848:	230a      	movs	r3, #10
 800584a:	9302      	str	r3, [sp, #8]
 800584c:	2301      	movs	r3, #1
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	f107 0313 	add.w	r3, r7, #19
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	2301      	movs	r3, #1
 8005858:	2207      	movs	r2, #7
 800585a:	21ec      	movs	r1, #236	; 0xec
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f004 fa11 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 8005862:	230a      	movs	r3, #10
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	2301      	movs	r3, #1
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	f107 0312 	add.w	r3, r7, #18
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	2301      	movs	r3, #1
 8005872:	2208      	movs	r2, #8
 8005874:	21ec      	movs	r1, #236	; 0xec
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f004 fa04 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 800587c:	230a      	movs	r3, #10
 800587e:	9302      	str	r3, [sp, #8]
 8005880:	2301      	movs	r3, #1
 8005882:	9301      	str	r3, [sp, #4]
 8005884:	f107 0311 	add.w	r3, r7, #17
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2301      	movs	r3, #1
 800588c:	2209      	movs	r2, #9
 800588e:	21ec      	movs	r1, #236	; 0xec
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f004 f9f7 	bl	8009c84 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005896:	2300      	movs	r3, #0
 8005898:	2200      	movs	r2, #0
 800589a:	2100      	movs	r1, #0
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f009 fa79 	bl	800ed94 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 80058a2:	7cfb      	ldrb	r3, [r7, #19]
 80058a4:	461a      	mov	r2, r3
 80058a6:	7cbb      	ldrb	r3, [r7, #18]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	441a      	add	r2, r3
 80058ac:	7c7b      	ldrb	r3, [r7, #17]
 80058ae:	041b      	lsls	r3, r3, #16
 80058b0:	4413      	add	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <BMP390_ReadTemp+0xa8>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	1ad2      	subs	r2, r2, r3
 80058be:	0852      	lsrs	r2, r2, #1
 80058c0:	4413      	add	r3, r2
 80058c2:	0c5b      	lsrs	r3, r3, #17
 80058c4:	ee07 3a90 	vmov	s15, r3
 80058c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	04000105 	.word	0x04000105

080058e0 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08a      	sub	sp, #40	; 0x28
 80058e4:	af04      	add	r7, sp, #16
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80058ec:	2123      	movs	r1, #35	; 0x23
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f009 fbc4 	bl	800f07c <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80058f4:	230a      	movs	r3, #10
 80058f6:	9302      	str	r3, [sp, #8]
 80058f8:	2301      	movs	r3, #1
 80058fa:	9301      	str	r3, [sp, #4]
 80058fc:	f107 0313 	add.w	r3, r7, #19
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	2301      	movs	r3, #1
 8005904:	2204      	movs	r2, #4
 8005906:	21ec      	movs	r1, #236	; 0xec
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f004 f9bb 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 800590e:	230a      	movs	r3, #10
 8005910:	9302      	str	r3, [sp, #8]
 8005912:	2301      	movs	r3, #1
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	f107 0312 	add.w	r3, r7, #18
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	2301      	movs	r3, #1
 800591e:	2205      	movs	r2, #5
 8005920:	21ec      	movs	r1, #236	; 0xec
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f004 f9ae 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005928:	230a      	movs	r3, #10
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	2301      	movs	r3, #1
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f107 0311 	add.w	r3, r7, #17
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	2301      	movs	r3, #1
 8005938:	2206      	movs	r2, #6
 800593a:	21ec      	movs	r1, #236	; 0xec
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f004 f9a1 	bl	8009c84 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005942:	2300      	movs	r3, #0
 8005944:	2200      	movs	r2, #0
 8005946:	2100      	movs	r1, #0
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f009 fa23 	bl	800ed94 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 800594e:	7cfb      	ldrb	r3, [r7, #19]
 8005950:	461a      	mov	r2, r3
 8005952:	7cbb      	ldrb	r3, [r7, #18]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	441a      	add	r2, r3
 8005958:	7c7b      	ldrb	r3, [r7, #17]
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	4413      	add	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005960:	6978      	ldr	r0, [r7, #20]
 8005962:	f7fe fda9 	bl	80044b8 <__aeabi_ui2d>
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	4b0f      	ldr	r3, [pc, #60]	; (80059a8 <BMP390_ReadPress+0xc8>)
 800596c:	f7fe fe1e 	bl	80045ac <__aeabi_dmul>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4610      	mov	r0, r2
 8005976:	4619      	mov	r1, r3
 8005978:	a309      	add	r3, pc, #36	; (adr r3, 80059a0 <BMP390_ReadPress+0xc0>)
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f7fe fc5f 	bl	8004240 <__adddf3>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	f7ff f8bf 	bl	8004b0c <__aeabi_d2f>
 800598e:	4602      	mov	r2, r0
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	601a      	str	r2, [r3, #0]

}
 8005994:	bf00      	nop
 8005996:	3718      	adds	r7, #24
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	f3af 8000 	nop.w
 80059a0:	00000000 	.word	0x00000000
 80059a4:	4072c000 	.word	0x4072c000
 80059a8:	3f0db000 	.word	0x3f0db000

080059ac <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af04      	add	r7, sp, #16
 80059b2:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 80059b8:	230a      	movs	r3, #10
 80059ba:	9302      	str	r3, [sp, #8]
 80059bc:	2301      	movs	r3, #1
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	f107 030e 	add.w	r3, r7, #14
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	2301      	movs	r3, #1
 80059c8:	2200      	movs	r2, #0
 80059ca:	21ec      	movs	r1, #236	; 0xec
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f004 f959 	bl	8009c84 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b60      	cmp	r3, #96	; 0x60
 80059d6:	d001      	beq.n	80059dc <BMP390_Init+0x30>
		res = 1;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 80059dc:	230a      	movs	r3, #10
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	2301      	movs	r3, #1
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	f107 030e 	add.w	r3, r7, #14
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2301      	movs	r3, #1
 80059ec:	2201      	movs	r2, #1
 80059ee:	21ec      	movs	r1, #236	; 0xec
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f004 f947 	bl	8009c84 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <BMP390_Init+0x54>
		res = 1;
 80059fc:	2301      	movs	r3, #1
 80059fe:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff fec4 	bl	800578e <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fe98 	bl	800573c <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fee7 	bl	80057e0 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005a12:	2005      	movs	r0, #5
 8005a14:	f001 ff9e 	bl	8007954 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005a18:	2342      	movs	r3, #66	; 0x42
 8005a1a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005a1c:	230a      	movs	r3, #10
 8005a1e:	9302      	str	r3, [sp, #8]
 8005a20:	2301      	movs	r3, #1
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	f107 030e 	add.w	r3, r7, #14
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	2219      	movs	r2, #25
 8005a2e:	21ec      	movs	r1, #236	; 0xec
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f004 f813 	bl	8009a5c <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	e010      	b.n	8005a74 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff ff42 	bl	80058e0 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	edd3 7a00 	vldr	s15, [r3]
 8005a62:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a6a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	3301      	adds	r3, #1
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	2b09      	cmp	r3, #9
 8005a78:	ddeb      	ble.n	8005a52 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a7e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005a82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	0000      	movs	r0, r0
	...

08005a98 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	ed93 7a00 	vldr	s14, [r3]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005aac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ab0:	ee16 0a90 	vmov	r0, s13
 8005ab4:	f7fe fd22 	bl	80044fc <__aeabi_f2d>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005b08 <BMP390_GetRelativeAltitude+0x70>
 8005ac0:	ec43 2b10 	vmov	d0, r2, r3
 8005ac4:	f00b f970 	bl	8010da8 <pow>
 8005ac8:	ec53 2b10 	vmov	r2, r3, d0
 8005acc:	f04f 0000 	mov.w	r0, #0
 8005ad0:	4911      	ldr	r1, [pc, #68]	; (8005b18 <BMP390_GetRelativeAltitude+0x80>)
 8005ad2:	f7fe fbb3 	bl	800423c <__aeabi_dsub>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4610      	mov	r0, r2
 8005adc:	4619      	mov	r1, r3
 8005ade:	a30c      	add	r3, pc, #48	; (adr r3, 8005b10 <BMP390_GetRelativeAltitude+0x78>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	f7fe fd62 	bl	80045ac <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	f7ff f80c 	bl	8004b0c <__aeabi_d2f>
 8005af4:	4602      	mov	r2, r0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	611a      	str	r2, [r3, #16]
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	f3af 8000 	nop.w
 8005b08:	1a36e2eb 	.word	0x1a36e2eb
 8005b0c:	3fc85bc0 	.word	0x3fc85bc0
 8005b10:	00000000 	.word	0x00000000
 8005b14:	40e5a540 	.word	0x40e5a540
 8005b18:	3ff00000 	.word	0x3ff00000

08005b1c <BNO055_SetPage>:
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14


void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af04      	add	r7, sp, #16
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005b28:	230a      	movs	r3, #10
 8005b2a:	9302      	str	r3, [sp, #8]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	9301      	str	r3, [sp, #4]
 8005b30:	1cfb      	adds	r3, r7, #3
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2301      	movs	r3, #1
 8005b36:	2207      	movs	r2, #7
 8005b38:	2150      	movs	r1, #80	; 0x50
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f003 ff8e 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <BNO055_SetOperationMode>:

void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af04      	add	r7, sp, #16
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	460b      	mov	r3, r1
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005b56:	7afa      	ldrb	r2, [r7, #11]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005b5e:	230a      	movs	r3, #10
 8005b60:	9302      	str	r3, [sp, #8]
 8005b62:	2301      	movs	r3, #1
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	f107 030b 	add.w	r3, r7, #11
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	223d      	movs	r2, #61	; 0x3d
 8005b70:	2150      	movs	r1, #80	; 0x50
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f003 ff72 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <BNO055_ReadSystemReg>:
  bno055_opmode_t mode;
  HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
  return mode;
}

uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b088      	sub	sp, #32
 8005b84:	af04      	add	r7, sp, #16
 8005b86:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005b88:	2364      	movs	r3, #100	; 0x64
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f107 030f 	add.w	r3, r7, #15
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	2301      	movs	r3, #1
 8005b98:	223f      	movs	r2, #63	; 0x3f
 8005b9a:	2150      	movs	r1, #80	; 0x50
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f004 f871 	bl	8009c84 <HAL_I2C_Mem_Read>
	return system_reg;
 8005ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <BNO055_EnableExtClock>:

//Enable or disable the external oscillator --> If the lse is disable then we use lsi
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af04      	add	r7, sp, #16
 8005bb2:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ffe3 	bl	8005b80 <BNO055_ReadSystemReg>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	3b80      	subs	r3, #128	; 0x80
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005bcc:	230a      	movs	r3, #10
 8005bce:	9302      	str	r3, [sp, #8]
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	f107 030e 	add.w	r3, r7, #14
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	223f      	movs	r2, #63	; 0x3f
 8005bde:	2150      	movs	r1, #80	; 0x50
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f003 ff3b 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <BNO055_TriggerSelfTest>:
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F);
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
}

void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	af04      	add	r7, sp, #16
 8005bf4:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff ffc2 	bl	8005b80 <BNO055_ReadSystemReg>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	3301      	adds	r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005c0e:	230a      	movs	r3, #10
 8005c10:	9302      	str	r3, [sp, #8]
 8005c12:	2301      	movs	r3, #1
 8005c14:	9301      	str	r3, [sp, #4]
 8005c16:	f107 030e 	add.w	r3, r7, #14
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	223f      	movs	r2, #63	; 0x3f
 8005c20:	2150      	movs	r1, #80	; 0x50
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f003 ff1a 	bl	8009a5c <HAL_I2C_Mem_Write>
}
 8005c28:	bf00      	nop
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <BNO055_CheckSelfTestResult>:

//Check the self test result and check some basic register of IMU --> If an error occure then return 1
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af04      	add	r7, sp, #16
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005c3e:	230a      	movs	r3, #10
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	2301      	movs	r3, #1
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	f107 030e 	add.w	r3, r7, #14
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	2236      	movs	r2, #54	; 0x36
 8005c50:	2150      	movs	r1, #80	; 0x50
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f004 f816 	bl	8009c84 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005c58:	7bbb      	ldrb	r3, [r7, #14]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	2b0f      	cmp	r3, #15
 8005c60:	d001      	beq.n	8005c66 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005c62:	2301      	movs	r3, #1
 8005c64:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff ffc1 	bl	8005bee <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005c6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c70:	f008 febc 	bl	800e9ec <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005c74:	230a      	movs	r3, #10
 8005c76:	9302      	str	r3, [sp, #8]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	f107 030e 	add.w	r3, r7, #14
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2301      	movs	r3, #1
 8005c84:	223a      	movs	r2, #58	; 0x3a
 8005c86:	2150      	movs	r1, #80	; 0x50
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f003 fffb 	bl	8009c84 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005c98:	230a      	movs	r3, #10
 8005c9a:	9302      	str	r3, [sp, #8]
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	9301      	str	r3, [sp, #4]
 8005ca0:	f107 030e 	add.w	r3, r7, #14
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	2239      	movs	r2, #57	; 0x39
 8005caa:	2150      	movs	r1, #80	; 0x50
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f003 ffe9 	bl	8009c84 <HAL_I2C_Mem_Read>

	return res;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <BNO055_Init>:

uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af04      	add	r7, sp, #16
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff21 	bl	8005b1c <BNO055_SetPage>
	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff ff66 	bl	8005bac <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8005ce0:	20c8      	movs	r0, #200	; 0xc8
 8005ce2:	f008 fe83 	bl	800e9ec <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7ff ffa1 	bl	8005c30 <BNO055_CheckSelfTestResult>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <BNO055_Init+0x40>
		res = 1;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	210c      	movs	r1, #12
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7ff ff21 	bl	8005b48 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8005d06:	230a      	movs	r3, #10
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f107 030e 	add.w	r3, r7, #14
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2301      	movs	r3, #1
 8005d16:	223d      	movs	r2, #61	; 0x3d
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f003 ffb2 	bl	8009c84 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8005d20:	7bbb      	ldrb	r3, [r7, #14]
 8005d22:	2b0c      	cmp	r3, #12
 8005d24:	d001      	beq.n	8005d2a <BNO055_Init+0x6e>
		res = 1;
 8005d26:	2301      	movs	r3, #1
 8005d28:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af04      	add	r7, sp, #16
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 8005d3e:	230a      	movs	r3, #10
 8005d40:	9302      	str	r3, [sp, #8]
 8005d42:	2301      	movs	r3, #1
 8005d44:	9301      	str	r3, [sp, #4]
 8005d46:	f107 030f 	add.w	r3, r7, #15
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	221c      	movs	r2, #28
 8005d50:	2150      	movs	r1, #80	; 0x50
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f003 ff96 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 8005d58:	230a      	movs	r3, #10
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	f107 030e 	add.w	r3, r7, #14
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2301      	movs	r3, #1
 8005d68:	221d      	movs	r2, #29
 8005d6a:	2150      	movs	r1, #80	; 0x50
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f003 ff89 	bl	8009c84 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_roll = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	461a      	mov	r2, r3
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	4413      	add	r3, r2
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <BNO055_ReadEuler_Roll+0x98>)
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_roll > 2000){
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005da0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005dd0 <BNO055_ReadEuler_Roll+0x9c>
 8005da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dac:	dc00      	bgt.n	8005db0 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
	}
}
 8005dae:	e009      	b.n	8005dc4 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005db6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005dd4 <BNO055_ReadEuler_Roll+0xa0>
 8005dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8005dc4:	bf00      	nop
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000000 	.word	0x20000000
 8005dd0:	44fa0000 	.word	0x44fa0000
 8005dd4:	45800000 	.word	0x45800000

08005dd8 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af04      	add	r7, sp, #16
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 8005de2:	230a      	movs	r3, #10
 8005de4:	9302      	str	r3, [sp, #8]
 8005de6:	2301      	movs	r3, #1
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	f107 030f 	add.w	r3, r7, #15
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2301      	movs	r3, #1
 8005df2:	221e      	movs	r2, #30
 8005df4:	2150      	movs	r1, #80	; 0x50
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f003 ff44 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8005dfc:	230a      	movs	r3, #10
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	2301      	movs	r3, #1
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	f107 030e 	add.w	r3, r7, #14
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	221f      	movs	r2, #31
 8005e0e:	2150      	movs	r1, #80	; 0x50
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f003 ff37 	bl	8009c84 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_pitch = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	4413      	add	r3, r2
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <BNO055_ReadEuler_Pitch+0x98>)
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_pitch > 2000){
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e44:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005e74 <BNO055_ReadEuler_Pitch+0x9c>
 8005e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	dc00      	bgt.n	8005e54 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
	}
}
 8005e52:	e009      	b.n	8005e68 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e5a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005e78 <BNO055_ReadEuler_Pitch+0xa0>
 8005e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000000 	.word	0x20000000
 8005e74:	44fa0000 	.word	0x44fa0000
 8005e78:	45800000 	.word	0x45800000

08005e7c <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 8005e86:	230a      	movs	r3, #10
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	f107 030f 	add.w	r3, r7, #15
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2301      	movs	r3, #1
 8005e96:	221a      	movs	r2, #26
 8005e98:	2150      	movs	r1, #80	; 0x50
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f003 fef2 	bl	8009c84 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	9302      	str	r3, [sp, #8]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	9301      	str	r3, [sp, #4]
 8005ea8:	f107 030e 	add.w	r3, r7, #14
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	2301      	movs	r3, #1
 8005eb0:	221b      	movs	r2, #27
 8005eb2:	2150      	movs	r1, #80	; 0x50
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f003 fee5 	bl	8009c84 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_heading = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	7bbb      	ldrb	r3, [r7, #14]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	4413      	add	r3, r2
 8005ec4:	ee07 3a90 	vmov	s15, r3
 8005ec8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005ecc:	4b07      	ldr	r3, [pc, #28]	; (8005eec <BNO055_ReadEuler_Yaw+0x70>)
 8005ece:	881b      	ldrh	r3, [r3, #0]
 8005ed0:	ee07 3a90 	vmov	s15, r3
 8005ed4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000000 	.word	0x20000000

08005ef0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005ef6:	4b12      	ldr	r3, [pc, #72]	; (8005f40 <MX_DMA_Init+0x50>)
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efa:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <MX_DMA_Init+0x50>)
 8005efc:	f043 0304 	orr.w	r3, r3, #4
 8005f00:	6493      	str	r3, [r2, #72]	; 0x48
 8005f02:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <MX_DMA_Init+0x50>)
 8005f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f06:	f003 0304 	and.w	r3, r3, #4
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005f0e:	4b0c      	ldr	r3, [pc, #48]	; (8005f40 <MX_DMA_Init+0x50>)
 8005f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f12:	4a0b      	ldr	r2, [pc, #44]	; (8005f40 <MX_DMA_Init+0x50>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6493      	str	r3, [r2, #72]	; 0x48
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <MX_DMA_Init+0x50>)
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2105      	movs	r1, #5
 8005f2a:	200b      	movs	r0, #11
 8005f2c:	f002 fff8 	bl	8008f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005f30:	200b      	movs	r0, #11
 8005f32:	f003 f80f 	bl	8008f54 <HAL_NVIC_EnableIRQ>

}
 8005f36:	bf00      	nop
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40021000 	.word	0x40021000

08005f44 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	; 0x28
 8005f48:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	605a      	str	r2, [r3, #4]
 8005f54:	609a      	str	r2, [r3, #8]
 8005f56:	60da      	str	r2, [r3, #12]
 8005f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005f5a:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5e:	4a2a      	ldr	r2, [pc, #168]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f60:	f043 0320 	orr.w	r3, r3, #32
 8005f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f66:	4b28      	ldr	r3, [pc, #160]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f72:	4b25      	ldr	r3, [pc, #148]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f76:	4a24      	ldr	r2, [pc, #144]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f78:	f043 0304 	orr.w	r3, r3, #4
 8005f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8a:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f90:	f043 0301 	orr.w	r3, r3, #1
 8005f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f96:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	60bb      	str	r3, [r7, #8]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fa2:	4b19      	ldr	r3, [pc, #100]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	4a18      	ldr	r2, [pc, #96]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fa8:	f043 0308 	orr.w	r3, r3, #8
 8005fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fba:	4b13      	ldr	r3, [pc, #76]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbe:	4a12      	ldr	r2, [pc, #72]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fc6:	4b10      	ldr	r3, [pc, #64]	; (8006008 <MX_GPIO_Init+0xc4>)
 8005fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	603b      	str	r3, [r7, #0]
 8005fd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fdc:	f003 fc7c 	bl	80098d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005ff2:	f107 0314 	add.w	r3, r7, #20
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ffc:	f003 faea 	bl	80095d4 <HAL_GPIO_Init>

}
 8006000:	bf00      	nop
 8006002:	3728      	adds	r7, #40	; 0x28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40021000 	.word	0x40021000

0800600c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006010:	4b1b      	ldr	r3, [pc, #108]	; (8006080 <MX_I2C2_Init+0x74>)
 8006012:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <MX_I2C2_Init+0x78>)
 8006014:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <MX_I2C2_Init+0x74>)
 8006018:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <MX_I2C2_Init+0x7c>)
 800601a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800601c:	4b18      	ldr	r3, [pc, #96]	; (8006080 <MX_I2C2_Init+0x74>)
 800601e:	2200      	movs	r2, #0
 8006020:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006022:	4b17      	ldr	r3, [pc, #92]	; (8006080 <MX_I2C2_Init+0x74>)
 8006024:	2201      	movs	r2, #1
 8006026:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <MX_I2C2_Init+0x74>)
 800602a:	2200      	movs	r2, #0
 800602c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800602e:	4b14      	ldr	r3, [pc, #80]	; (8006080 <MX_I2C2_Init+0x74>)
 8006030:	2200      	movs	r2, #0
 8006032:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <MX_I2C2_Init+0x74>)
 8006036:	2200      	movs	r2, #0
 8006038:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <MX_I2C2_Init+0x74>)
 800603c:	2200      	movs	r2, #0
 800603e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006040:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <MX_I2C2_Init+0x74>)
 8006042:	2200      	movs	r2, #0
 8006044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006046:	480e      	ldr	r0, [pc, #56]	; (8006080 <MX_I2C2_Init+0x74>)
 8006048:	f003 fc78 	bl	800993c <HAL_I2C_Init>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006052:	f000 fceb 	bl	8006a2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006056:	2100      	movs	r1, #0
 8006058:	4809      	ldr	r0, [pc, #36]	; (8006080 <MX_I2C2_Init+0x74>)
 800605a:	f004 f9d3 	bl	800a404 <HAL_I2CEx_ConfigAnalogFilter>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006064:	f000 fce2 	bl	8006a2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006068:	2100      	movs	r1, #0
 800606a:	4805      	ldr	r0, [pc, #20]	; (8006080 <MX_I2C2_Init+0x74>)
 800606c:	f004 fa15 	bl	800a49a <HAL_I2CEx_ConfigDigitalFilter>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006076:	f000 fcd9 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800607a:	bf00      	nop
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	200001f4 	.word	0x200001f4
 8006084:	40005800 	.word	0x40005800
 8006088:	20c0edff 	.word	0x20c0edff

0800608c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b0a0      	sub	sp, #128	; 0x80
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006094:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
 800609c:	605a      	str	r2, [r3, #4]
 800609e:	609a      	str	r2, [r3, #8]
 80060a0:	60da      	str	r2, [r3, #12]
 80060a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060a4:	f107 0318 	add.w	r3, r7, #24
 80060a8:	2254      	movs	r2, #84	; 0x54
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f00a fd8b 	bl	8010bc8 <memset>
  if(i2cHandle->Instance==I2C2)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a2c      	ldr	r2, [pc, #176]	; (8006168 <HAL_I2C_MspInit+0xdc>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d151      	bne.n	8006160 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80060c0:	2300      	movs	r3, #0
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060c4:	f107 0318 	add.w	r3, r7, #24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f005 f83d 	bl	800b148 <HAL_RCCEx_PeriphCLKConfig>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80060d4:	f000 fcaa 	bl	8006a2c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060d8:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060dc:	4a23      	ldr	r2, [pc, #140]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060de:	f043 0320 	orr.w	r3, r3, #32
 80060e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060e4:	4b21      	ldr	r3, [pc, #132]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060e8:	f003 0320 	and.w	r3, r3, #32
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060f0:	4b1e      	ldr	r3, [pc, #120]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	4a1d      	ldr	r2, [pc, #116]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060fc:	4b1b      	ldr	r3, [pc, #108]	; (800616c <HAL_I2C_MspInit+0xe0>)
 80060fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	613b      	str	r3, [r7, #16]
 8006106:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006108:	2301      	movs	r3, #1
 800610a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800610c:	2312      	movs	r3, #18
 800610e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006114:	2300      	movs	r3, #0
 8006116:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006118:	2304      	movs	r3, #4
 800611a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800611c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006120:	4619      	mov	r1, r3
 8006122:	4813      	ldr	r0, [pc, #76]	; (8006170 <HAL_I2C_MspInit+0xe4>)
 8006124:	f003 fa56 	bl	80095d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006128:	2310      	movs	r3, #16
 800612a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800612c:	2312      	movs	r3, #18
 800612e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006130:	2300      	movs	r3, #0
 8006132:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006134:	2300      	movs	r3, #0
 8006136:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006138:	2304      	movs	r3, #4
 800613a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800613c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006140:	4619      	mov	r1, r3
 8006142:	480c      	ldr	r0, [pc, #48]	; (8006174 <HAL_I2C_MspInit+0xe8>)
 8006144:	f003 fa46 	bl	80095d4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006148:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_I2C_MspInit+0xe0>)
 800614a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800614c:	4a07      	ldr	r2, [pc, #28]	; (800616c <HAL_I2C_MspInit+0xe0>)
 800614e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006152:	6593      	str	r3, [r2, #88]	; 0x58
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_I2C_MspInit+0xe0>)
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006160:	bf00      	nop
 8006162:	3780      	adds	r7, #128	; 0x80
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	40005800 	.word	0x40005800
 800616c:	40021000 	.word	0x40021000
 8006170:	48001400 	.word	0x48001400
 8006174:	48000800 	.word	0x48000800

08006178 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006178:	b580      	push	{r7, lr}
 800617a:	b08e      	sub	sp, #56	; 0x38
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 8006182:	4a70      	ldr	r2, [pc, #448]	; (8006344 <gps_ReadNMEA+0x1cc>)
 8006184:	f107 0318 	add.w	r3, r7, #24
 8006188:	e892 0003 	ldmia.w	r2, {r0, r1}
 800618c:	6018      	str	r0, [r3, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006198:	2300      	movs	r3, #0
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
 800619c:	e0c8      	b.n	8006330 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4413      	add	r3, r2
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b24      	cmp	r3, #36	; 0x24
 80061a8:	f040 80bf 	bne.w	800632a <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80061ac:	2300      	movs	r3, #0
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b0:	e00f      	b.n	80061d2 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80061b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	4413      	add	r3, r2
 80061b8:	3301      	adds	r3, #1
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	7819      	ldrb	r1, [r3, #0]
 80061c0:	f107 0220 	add.w	r2, r7, #32
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	4413      	add	r3, r2
 80061c8:	460a      	mov	r2, r1
 80061ca:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80061cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ce:	3301      	adds	r3, #1
 80061d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	ddec      	ble.n	80061b2 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80061d8:	2300      	movs	r3, #0
 80061da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80061de:	f107 0218 	add.w	r2, r7, #24
 80061e2:	f107 0320 	add.w	r3, r7, #32
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fe f819 	bl	8004220 <strcmp>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f040 809a 	bne.w	800632a <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	3306      	adds	r3, #6
 80061fa:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 80061fc:	2300      	movs	r3, #0
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006200:	e08e      	b.n	8006320 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	3301      	adds	r3, #1
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006214:	e013      	b.n	800623e <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	441a      	add	r2, r3
 800621c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	3338      	adds	r3, #56	; 0x38
 8006224:	443b      	add	r3, r7
 8006226:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	3301      	adds	r3, #1
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	b2da      	uxtb	r2, r3
 8006234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <gps_ReadNMEA+0xde>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	4413      	add	r3, r2
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b2c      	cmp	r3, #44	; 0x2c
 8006254:	d1df      	bne.n	8006216 <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 8006256:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800625a:	3301      	adds	r3, #1
 800625c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8006260:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006264:	3b01      	subs	r3, #1
 8006266:	2b0a      	cmp	r3, #10
 8006268:	d857      	bhi.n	800631a <gps_ReadNMEA+0x1a2>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <gps_ReadNMEA+0xf8>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	0800629d 	.word	0x0800629d
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062b9 	.word	0x080062b9
 800627c:	080062c7 	.word	0x080062c7
 8006280:	080062d5 	.word	0x080062d5
 8006284:	080062e3 	.word	0x080062e3
 8006288:	080062f1 	.word	0x080062f1
 800628c:	0800631b 	.word	0x0800631b
 8006290:	080062ff 	.word	0x080062ff
 8006294:	0800631b 	.word	0x0800631b
 8006298:	0800630d 	.word	0x0800630d
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 800629c:	f107 030c 	add.w	r3, r7, #12
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f850 	bl	8006348 <gps_ProcessUTC>
							break;
 80062a8:	e037      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80062aa:	f107 030c 	add.w	r3, r7, #12
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 f889 	bl	80063c8 <gps_ProcessLatitude>
							break;
 80062b6:	e030      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80062b8:	f107 030c 	add.w	r3, r7, #12
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f9fc 	bl	80066bc <gps_ProcessNorthSouth>
							break;
 80062c4:	e029      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80062c6:	f107 030c 	add.w	r3, r7, #12
 80062ca:	6839      	ldr	r1, [r7, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 f937 	bl	8006540 <gps_ProcessLongitude>
							break;
 80062d2:	e022      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80062d4:	f107 030c 	add.w	r3, r7, #12
 80062d8:	6839      	ldr	r1, [r7, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fa04 	bl	80066e8 <gps_ProcessEastWest>
							break;
 80062e0:	e01b      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80062e2:	f107 030c 	add.w	r3, r7, #12
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fa13 	bl	8006714 <gps_ProcessFix>
							break;
 80062ee:	e014      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fa2a 	bl	8006750 <gps_ProcessSatelliteCount>
							break;
 80062fc:	e00d      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 80062fe:	f107 030c 	add.w	r3, r7, #12
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fa3f 	bl	8006788 <gps_ProcessAltitude>
							break;
 800630a:	e006      	b.n	800631a <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 800630c:	f107 030c 	add.w	r3, r7, #12
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fa94 	bl	8006840 <gps_ProcessAltitudeCorre>
							break;
 8006318:	bf00      	nop
				for(int k=0;k<12;k++){
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	3301      	adds	r3, #1
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	2b0b      	cmp	r3, #11
 8006324:	f77f af6d 	ble.w	8006202 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006328:	e008      	b.n	800633c <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	3301      	adds	r3, #1
 800632e:	633b      	str	r3, [r7, #48]	; 0x30
 8006330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006336:	f6ff af32 	blt.w	800619e <gps_ReadNMEA+0x26>

			}
		}
	}
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	3738      	adds	r7, #56	; 0x38
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	08011d28 	.word	0x08011d28

08006348 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	0092      	lsls	r2, r2, #2
 800635a:	4413      	add	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	b2da      	uxtb	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3301      	adds	r3, #1
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4413      	add	r3, r2
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3b10      	subs	r3, #16
 800636c:	b2da      	uxtb	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3302      	adds	r3, #2
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	0092      	lsls	r2, r2, #2
 800637c:	4413      	add	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	b2da      	uxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3303      	adds	r3, #3
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	4413      	add	r3, r2
 800638a:	b2db      	uxtb	r3, r3
 800638c:	3b10      	subs	r3, #16
 800638e:	b2da      	uxtb	r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3304      	adds	r3, #4
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	461a      	mov	r2, r3
 800639c:	0092      	lsls	r2, r2, #2
 800639e:	4413      	add	r3, r2
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3305      	adds	r3, #5
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	4413      	add	r3, r2
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	3b10      	subs	r3, #16
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	769a      	strb	r2, [r3, #26]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	0000      	movs	r0, r0
 80063c4:	0000      	movs	r0, r0
	...

080063c8 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80063c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	3b30      	subs	r3, #48	; 0x30
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3301      	adds	r3, #1
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	4413      	add	r3, r2
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b30      	subs	r3, #48	; 0x30
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3302      	adds	r3, #2
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3303      	adds	r3, #3
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	3b30      	subs	r3, #48	; 0x30
 800641c:	4413      	add	r3, r2
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 800642a:	68b8      	ldr	r0, [r7, #8]
 800642c:	f7fe f866 	bl	80044fc <__aeabi_f2d>
 8006430:	4604      	mov	r4, r0
 8006432:	460d      	mov	r5, r1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3305      	adds	r3, #5
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	3b30      	subs	r3, #48	; 0x30
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe f84b 	bl	80044d8 <__aeabi_i2d>
 8006442:	a336      	add	r3, pc, #216	; (adr r3, 800651c <gps_ProcessLatitude+0x154>)
 8006444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006448:	f7fe f8b0 	bl	80045ac <__aeabi_dmul>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	4690      	mov	r8, r2
 8006452:	4699      	mov	r9, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3306      	adds	r3, #6
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	3b30      	subs	r3, #48	; 0x30
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe f83b 	bl	80044d8 <__aeabi_i2d>
 8006462:	a330      	add	r3, pc, #192	; (adr r3, 8006524 <gps_ProcessLatitude+0x15c>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fe f8a0 	bl	80045ac <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4640      	mov	r0, r8
 8006472:	4649      	mov	r1, r9
 8006474:	f7fd fee4 	bl	8004240 <__adddf3>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4690      	mov	r8, r2
 800647e:	4699      	mov	r9, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3307      	adds	r3, #7
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	3b30      	subs	r3, #48	; 0x30
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe f825 	bl	80044d8 <__aeabi_i2d>
 800648e:	a327      	add	r3, pc, #156	; (adr r3, 800652c <gps_ProcessLatitude+0x164>)
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f7fe f88a 	bl	80045ac <__aeabi_dmul>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4640      	mov	r0, r8
 800649e:	4649      	mov	r1, r9
 80064a0:	f7fd fece 	bl	8004240 <__adddf3>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4690      	mov	r8, r2
 80064aa:	4699      	mov	r9, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3308      	adds	r3, #8
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	3b30      	subs	r3, #48	; 0x30
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe f80f 	bl	80044d8 <__aeabi_i2d>
 80064ba:	a31e      	add	r3, pc, #120	; (adr r3, 8006534 <gps_ProcessLatitude+0x16c>)
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f7fe f874 	bl	80045ac <__aeabi_dmul>
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4640      	mov	r0, r8
 80064ca:	4649      	mov	r1, r9
 80064cc:	f7fd feb8 	bl	8004240 <__adddf3>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4620      	mov	r0, r4
 80064d6:	4629      	mov	r1, r5
 80064d8:	f7fd feb2 	bl	8004240 <__adddf3>
 80064dc:	4602      	mov	r2, r0
 80064de:	460b      	mov	r3, r1
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7fe fb12 	bl	8004b0c <__aeabi_d2f>
 80064e8:	4603      	mov	r3, r0
 80064ea:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 80064ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80064fc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006518 <gps_ProcessLatitude+0x150>
 8006500:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	edc3 7a00 	vstr	s15, [r3]
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006518:	42700000 	.word	0x42700000
 800651c:	9999999a 	.word	0x9999999a
 8006520:	3fb99999 	.word	0x3fb99999
 8006524:	47ae147b 	.word	0x47ae147b
 8006528:	3f847ae1 	.word	0x3f847ae1
 800652c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006530:	3f50624d 	.word	0x3f50624d
 8006534:	eb1c432d 	.word	0xeb1c432d
 8006538:	3f1a36e2 	.word	0x3f1a36e2
 800653c:	00000000 	.word	0x00000000

08006540 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	3301      	adds	r3, #1
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	3b30      	subs	r3, #48	; 0x30
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	4413      	add	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	b2da      	uxtb	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3302      	adds	r3, #2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	4413      	add	r3, r2
 8006572:	b2db      	uxtb	r3, r3
 8006574:	3b30      	subs	r3, #48	; 0x30
 8006576:	b2db      	uxtb	r3, r3
 8006578:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3303      	adds	r3, #3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	461a      	mov	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	3b30      	subs	r3, #48	; 0x30
 8006596:	4413      	add	r3, r2
 8006598:	ee07 3a90 	vmov	s15, r3
 800659c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065a0:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 80065a4:	68b8      	ldr	r0, [r7, #8]
 80065a6:	f7fd ffa9 	bl	80044fc <__aeabi_f2d>
 80065aa:	4604      	mov	r4, r0
 80065ac:	460d      	mov	r5, r1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	3305      	adds	r3, #5
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	3b30      	subs	r3, #48	; 0x30
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd ff8e 	bl	80044d8 <__aeabi_i2d>
 80065bc:	a337      	add	r3, pc, #220	; (adr r3, 800669c <gps_ProcessLongitude+0x15c>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7fd fff3 	bl	80045ac <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4690      	mov	r8, r2
 80065cc:	4699      	mov	r9, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	3306      	adds	r3, #6
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	3b30      	subs	r3, #48	; 0x30
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fd ff7e 	bl	80044d8 <__aeabi_i2d>
 80065dc:	a331      	add	r3, pc, #196	; (adr r3, 80066a4 <gps_ProcessLongitude+0x164>)
 80065de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e2:	f7fd ffe3 	bl	80045ac <__aeabi_dmul>
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	4640      	mov	r0, r8
 80065ec:	4649      	mov	r1, r9
 80065ee:	f7fd fe27 	bl	8004240 <__adddf3>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4690      	mov	r8, r2
 80065f8:	4699      	mov	r9, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3307      	adds	r3, #7
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	3b30      	subs	r3, #48	; 0x30
 8006602:	4618      	mov	r0, r3
 8006604:	f7fd ff68 	bl	80044d8 <__aeabi_i2d>
 8006608:	a328      	add	r3, pc, #160	; (adr r3, 80066ac <gps_ProcessLongitude+0x16c>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7fd ffcd 	bl	80045ac <__aeabi_dmul>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4640      	mov	r0, r8
 8006618:	4649      	mov	r1, r9
 800661a:	f7fd fe11 	bl	8004240 <__adddf3>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4690      	mov	r8, r2
 8006624:	4699      	mov	r9, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3308      	adds	r3, #8
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	3b30      	subs	r3, #48	; 0x30
 800662e:	4618      	mov	r0, r3
 8006630:	f7fd ff52 	bl	80044d8 <__aeabi_i2d>
 8006634:	a31f      	add	r3, pc, #124	; (adr r3, 80066b4 <gps_ProcessLongitude+0x174>)
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f7fd ffb7 	bl	80045ac <__aeabi_dmul>
 800663e:	4602      	mov	r2, r0
 8006640:	460b      	mov	r3, r1
 8006642:	4640      	mov	r0, r8
 8006644:	4649      	mov	r1, r9
 8006646:	f7fd fdfb 	bl	8004240 <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fd fdf5 	bl	8004240 <__adddf3>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	f7fe fa55 	bl	8004b0c <__aeabi_d2f>
 8006662:	4603      	mov	r3, r0
 8006664:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006672:	edd7 6a02 	vldr	s13, [r7, #8]
 8006676:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006698 <gps_ProcessLongitude+0x158>
 800667a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800667e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006692:	bf00      	nop
 8006694:	f3af 8000 	nop.w
 8006698:	42700000 	.word	0x42700000
 800669c:	9999999a 	.word	0x9999999a
 80066a0:	3fb99999 	.word	0x3fb99999
 80066a4:	47ae147b 	.word	0x47ae147b
 80066a8:	3f847ae1 	.word	0x3f847ae1
 80066ac:	d2f1a9fc 	.word	0xd2f1a9fc
 80066b0:	3f50624d 	.word	0x3f50624d
 80066b4:	eb1c432d 	.word	0xeb1c432d
 80066b8:	3f1a36e2 	.word	0x3f1a36e2

080066bc <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b4e      	cmp	r3, #78	; 0x4e
 80066cc:	d103      	bne.n	80066d6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2200      	movs	r2, #0
 80066d2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 80066d4:	e002      	b.n	80066dc <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2201      	movs	r2, #1
 80066da:	741a      	strb	r2, [r3, #16]
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b45      	cmp	r3, #69	; 0x45
 80066f8:	d103      	bne.n	8006702 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2202      	movs	r2, #2
 80066fe:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006700:	e002      	b.n	8006708 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2203      	movs	r2, #3
 8006706:	745a      	strb	r2, [r3, #17]
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b31      	cmp	r3, #49	; 0x31
 8006724:	d103      	bne.n	800672e <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2201      	movs	r2, #1
 800672a:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 800672c:	e00a      	b.n	8006744 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b32      	cmp	r3, #50	; 0x32
 8006734:	d103      	bne.n	800673e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2202      	movs	r2, #2
 800673a:	771a      	strb	r2, [r3, #28]
}
 800673c:	e002      	b.n	8006744 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2200      	movs	r2, #0
 8006742:	771a      	strb	r2, [r3, #28]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	0092      	lsls	r2, r2, #2
 8006762:	4413      	add	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3301      	adds	r3, #1
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	4413      	add	r3, r2
 8006770:	b2db      	uxtb	r3, r3
 8006772:	3b10      	subs	r3, #16
 8006774:	b2da      	uxtb	r2, r3
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	76da      	strb	r2, [r3, #27]
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006792:	f04f 0300 	mov.w	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006798:	2300      	movs	r3, #0
 800679a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	e03f      	b.n	8006822 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b2e      	cmp	r3, #46	; 0x2e
 80067ac:	d104      	bne.n	80067b8 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	74fb      	strb	r3, [r7, #19]
			i++;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	3301      	adds	r3, #1
 80067b6:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 80067b8:	7cfb      	ldrb	r3, [r7, #19]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01b      	beq.n	80067f6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	3b30      	subs	r3, #48	; 0x30
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7fd fe85 	bl	80044d8 <__aeabi_i2d>
 80067ce:	a31a      	add	r3, pc, #104	; (adr r3, 8006838 <gps_ProcessAltitude+0xb0>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7fd feea 	bl	80045ac <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	f7fe f994 	bl	8004b0c <__aeabi_d2f>
 80067e4:	ee07 0a10 	vmov	s14, r0
 80067e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80067ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067f0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80067f4:	e018      	b.n	8006828 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80067f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80067fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80067fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	4413      	add	r3, r2
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	3b30      	subs	r3, #48	; 0x30
 800680c:	ee07 3a90 	vmov	s15, r3
 8006810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006818:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b03      	cmp	r3, #3
 8006826:	d9bc      	bls.n	80067a2 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	609a      	str	r2, [r3, #8]
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	9999999a 	.word	0x9999999a
 800683c:	3fb99999 	.word	0x3fb99999

08006840 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006854:	2300      	movs	r3, #0
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	e03f      	b.n	80068da <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b2e      	cmp	r3, #46	; 0x2e
 8006864:	d104      	bne.n	8006870 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006866:	2301      	movs	r3, #1
 8006868:	74fb      	strb	r3, [r7, #19]
			i++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d01b      	beq.n	80068ae <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	4413      	add	r3, r2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	3b30      	subs	r3, #48	; 0x30
 8006880:	4618      	mov	r0, r3
 8006882:	f7fd fe29 	bl	80044d8 <__aeabi_i2d>
 8006886:	a31a      	add	r3, pc, #104	; (adr r3, 80068f0 <gps_ProcessAltitudeCorre+0xb0>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7fd fe8e 	bl	80045ac <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f7fe f938 	bl	8004b0c <__aeabi_d2f>
 800689c:	ee07 0a10 	vmov	s14, r0
 80068a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80068a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068a8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 80068ac:	e018      	b.n	80068e0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 80068ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80068b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80068b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	4413      	add	r3, r2
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	3b30      	subs	r3, #48	; 0x30
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068d0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3301      	adds	r3, #1
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d9bc      	bls.n	800685a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	60da      	str	r2, [r3, #12]
}
 80068e6:	bf00      	nop
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	9999999a 	.word	0x9999999a
 80068f4:	3fb99999 	.word	0x3fb99999

080068f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80068fc:	b662      	cpsie	i
}
 80068fe:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006900:	f000 fff1 	bl	80078e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006904:	f000 f834 	bl	8006970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006908:	f7ff fb1c 	bl	8005f44 <MX_GPIO_Init>
  MX_DMA_Init();
 800690c:	f7ff faf0 	bl	8005ef0 <MX_DMA_Init>
  MX_I2C2_Init();
 8006910:	f7ff fb7c 	bl	800600c <MX_I2C2_Init>
  MX_TIM2_Init();
 8006914:	f000 fc90 	bl	8007238 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006918:	f000 fce6 	bl	80072e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800691c:	f000 fd3e 	bl	800739c <MX_TIM4_Init>
  MX_UART4_Init();
 8006920:	f000 fe54 	bl	80075cc <MX_UART4_Init>
  MX_UART5_Init();
 8006924:	f000 fe9e 	bl	8007664 <MX_UART5_Init>
  MX_ADC2_Init();
 8006928:	f7fe fabe 	bl	8004ea8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800692c:	2100      	movs	r1, #0
 800692e:	480c      	ldr	r0, [pc, #48]	; (8006960 <main+0x68>)
 8006930:	f004 ff8a 	bl	800b848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8006934:	2100      	movs	r1, #0
 8006936:	480b      	ldr	r0, [pc, #44]	; (8006964 <main+0x6c>)
 8006938:	f004 ff86 	bl	800b848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800693c:	2104      	movs	r1, #4
 800693e:	4809      	ldr	r0, [pc, #36]	; (8006964 <main+0x6c>)
 8006940:	f004 ff82 	bl	800b848 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8006944:	210c      	movs	r1, #12
 8006946:	4807      	ldr	r0, [pc, #28]	; (8006964 <main+0x6c>)
 8006948:	f004 ff7e 	bl	800b848 <HAL_TIM_PWM_Start>
  /*Timer use to do specific delay*/

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 800694c:	2203      	movs	r2, #3
 800694e:	4906      	ldr	r1, [pc, #24]	; (8006968 <main+0x70>)
 8006950:	4806      	ldr	r0, [pc, #24]	; (800696c <main+0x74>)
 8006952:	f001 fc05 	bl	8008160 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8006956:	f7fe fcd9 	bl	800530c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800695a:	f008 f819 	bl	800e990 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800695e:	e7fe      	b.n	800695e <main+0x66>
 8006960:	200007b0 	.word	0x200007b0
 8006964:	200007fc 	.word	0x200007fc
 8006968:	20000710 	.word	0x20000710
 800696c:	20000094 	.word	0x20000094

08006970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b094      	sub	sp, #80	; 0x50
 8006974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006976:	f107 0318 	add.w	r3, r7, #24
 800697a:	2238      	movs	r2, #56	; 0x38
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f00a f922 	bl	8010bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
 800698a:	605a      	str	r2, [r3, #4]
 800698c:	609a      	str	r2, [r3, #8]
 800698e:	60da      	str	r2, [r3, #12]
 8006990:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006996:	f003 fdcd 	bl	800a534 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800699a:	2302      	movs	r3, #2
 800699c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800699e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069a8:	2302      	movs	r3, #2
 80069aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80069ac:	2302      	movs	r3, #2
 80069ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80069b0:	2304      	movs	r3, #4
 80069b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80069b4:	234b      	movs	r3, #75	; 0x4b
 80069b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80069b8:	2302      	movs	r3, #2
 80069ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80069bc:	2302      	movs	r3, #2
 80069be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80069c0:	2302      	movs	r3, #2
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069c4:	f107 0318 	add.w	r3, r7, #24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f003 fe57 	bl	800a67c <HAL_RCC_OscConfig>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80069d4:	f000 f82a 	bl	8006a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069d8:	230f      	movs	r3, #15
 80069da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80069dc:	2303      	movs	r3, #3
 80069de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069e4:	2300      	movs	r3, #0
 80069e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	2104      	movs	r1, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f004 f95b 	bl	800acac <HAL_RCC_ClockConfig>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80069fc:	f000 f816 	bl	8006a2c <Error_Handler>
  }
}
 8006a00:	bf00      	nop
 8006a02:	3750      	adds	r7, #80	; 0x50
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a04      	ldr	r2, [pc, #16]	; (8006a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d101      	bne.n	8006a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006a1a:	f000 ff7d 	bl	8007918 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	40012c00 	.word	0x40012c00

08006a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a30:	b672      	cpsid	i
}
 8006a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a34:	e7fe      	b.n	8006a34 <Error_Handler+0x8>

08006a36 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006a36:	b480      	push	{r7}
 8006a38:	b085      	sub	sp, #20
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_pitch)-(command->pitch_angle);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a50:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	ee07 3a90 	vmov	s15, r3
}
 8006a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a5e:	3714      	adds	r7, #20
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_heading)-(command->yaw_angle);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a82:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	ee07 3a90 	vmov	s15, r3
}
 8006a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a90:	3714      	adds	r7, #20
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_roll)-(command->roll_angle);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab4:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	ee07 3a90 	vmov	s15, r3
}
 8006abe:	eeb0 0a67 	vmov.f32	s0, s15
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	ed87 0a02 	vstr	s0, [r7, #8]
 8006ad8:	edc7 0a01 	vstr	s1, [r7, #4]
 8006adc:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8006af2:	2101      	movs	r1, #1
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f00a f849 	bl	8010b8c <arm_pid_init_f32>

}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b08a      	sub	sp, #40	; 0x28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
 8006b0e:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	68b8      	ldr	r0, [r7, #8]
 8006b14:	f7ff ffa8 	bl	8006a68 <Pid_CalculateYawError>
 8006b18:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	ed93 7a00 	vldr	s14, [r3]
 8006b2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	edd3 6a01 	vldr	s13, [r3, #4]
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006b42:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006b52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b64:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006b7c:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006b7e:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8006b80:	bf00      	nop
 8006b82:	3728      	adds	r7, #40	; 0x28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08a      	sub	sp, #40	; 0x28
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	68b8      	ldr	r0, [r7, #8]
 8006b9a:	f7ff ff7e 	bl	8006a9a <Pid_CalculateRollError>
 8006b9e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	ed93 7a00 	vldr	s14, [r3]
 8006bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006bb4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	edd3 6a01 	vldr	s13, [r3, #4]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8006bc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	edd3 6a02 	vldr	s13, [r3, #8]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8006bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bea:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	68da      	ldr	r2, [r3, #12]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	615a      	str	r2, [r3, #20]
    return (out);
 8006c02:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006c04:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c12:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c1a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006d0c <Pid_CompensateRoll+0x184>
 8006c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c26:	dd04      	ble.n	8006c32 <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006c2e:	625a      	str	r2, [r3, #36]	; 0x24
 8006c30:	e025      	b.n	8006c7e <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c46:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006d10 <Pid_CompensateRoll+0x188>
 8006c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c52:	d504      	bpl.n	8006c5e <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	f240 5214 	movw	r2, #1300	; 0x514
 8006c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c5c:	e00f      	b.n	8006c7e <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c76:	ee17 2a90 	vmov	r2, s15
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c92:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006d0c <Pid_CompensateRoll+0x184>
 8006c96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c9e:	dd04      	ble.n	8006caa <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca8:	e025      	b.n	8006cf6 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cbe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006d10 <Pid_CompensateRoll+0x188>
 8006cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cca:	d504      	bpl.n	8006cd6 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f240 5214 	movw	r2, #1300	; 0x514
 8006cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006cd4:	e00f      	b.n	8006cf6 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ce2:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cee:	ee17 2a90 	vmov	r2, s15
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006cf6:	6838      	ldr	r0, [r7, #0]
 8006cf8:	f000 f8f0 	bl	8006edc <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006cfc:	6838      	ldr	r0, [r7, #0]
 8006cfe:	f000 f90b 	bl	8006f18 <PropulsionAndControl_UpdateRightFlaps>

}
 8006d02:	bf00      	nop
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	455ac000 	.word	0x455ac000
 8006d10:	44a28000 	.word	0x44a28000

08006d14 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 8006d22:	6879      	ldr	r1, [r7, #4]
 8006d24:	68b8      	ldr	r0, [r7, #8]
 8006d26:	f7ff fe86 	bl	8006a36 <Pid_CalculatePitchError>
 8006d2a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	61fb      	str	r3, [r7, #28]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	ed93 7a00 	vldr	s14, [r3]
 8006d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d40:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	edd3 6a01 	vldr	s13, [r3, #4]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006d54:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	edd3 6a02 	vldr	s13, [r3, #8]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d76:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	615a      	str	r2, [r3, #20]
    return (out);
 8006d8e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006d90:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	ee07 3a90 	vmov	s15, r3
 8006d9a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006da6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006e98 <Pid_CompensatePitch+0x184>
 8006daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	dd04      	ble.n	8006dbe <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24
 8006dbc:	e025      	b.n	8006e0a <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006dca:	edd7 7a08 	vldr	s15, [r7, #32]
 8006dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8006e9c <Pid_CompensatePitch+0x188>
 8006dd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dde:	d504      	bpl.n	8006dea <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f240 5214 	movw	r2, #1300	; 0x514
 8006de6:	625a      	str	r2, [r3, #36]	; 0x24
 8006de8:	e00f      	b.n	8006e0a <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006df6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e02:	ee17 2a90 	vmov	r2, s15
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e16:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e1e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006e98 <Pid_CompensatePitch+0x184>
 8006e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e2a:	dd04      	ble.n	8006e36 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006e32:	629a      	str	r2, [r3, #40]	; 0x28
 8006e34:	e025      	b.n	8006e82 <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	ee07 3a90 	vmov	s15, r3
 8006e3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e42:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e4a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006e9c <Pid_CompensatePitch+0x188>
 8006e4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e56:	d504      	bpl.n	8006e62 <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f240 5214 	movw	r2, #1300	; 0x514
 8006e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e60:	e00f      	b.n	8006e82 <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	ee07 3a90 	vmov	s15, r3
 8006e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e6e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e7a:	ee17 2a90 	vmov	r2, s15
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f000 f82a 	bl	8006edc <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006e88:	6838      	ldr	r0, [r7, #0]
 8006e8a:	f000 f845 	bl	8006f18 <PropulsionAndControl_UpdateRightFlaps>

}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	455ac000 	.word	0x455ac000
 8006e9c:	44a28000 	.word	0x44a28000

08006ea0 <PropulsionAndControl_UpdateESC>:
DESCRIPTION - Driver for 2 servo motor and 1 ESC. It generate a pwm at 50hz on 3 different channel
*******************************************************)*/
#include <propulsion_and_control.h>


void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3334      	adds	r3, #52	; 0x34
 8006eb0:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7f1b      	ldrb	r3, [r3, #28]
 8006eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6a12      	ldr	r2, [r2, #32]
 8006ec6:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3334      	adds	r3, #52	; 0x34
 8006eec:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7f5b      	ldrb	r3, [r3, #29]
 8006ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f02:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006f0c:	bf00      	nop
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3334      	adds	r3, #52	; 0x34
 8006f28:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	7f9b      	ldrb	r3, [r3, #30]
 8006f2e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006f32:	3b01      	subs	r3, #1
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006f3e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	b2da      	uxtb	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	69fa      	ldr	r2, [r7, #28]
 8006f8e:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a3a      	ldr	r2, [r7, #32]
 8006f94:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa2:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8006fa4:	2014      	movs	r0, #20
 8006fa6:	f000 fcd5 	bl	8007954 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f240 5214 	movw	r2, #1300	; 0x514
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff ff92 	bl	8006edc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006fbe:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ffa9 	bl	8006f18 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(2000);
 8006fc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fca:	f000 fcc3 	bl	8007954 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff ff80 	bl	8006edc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f240 5214 	movw	r2, #1300	; 0x514
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f7ff ff97 	bl	8006f18 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(2000);
 8006fea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006fee:	f000 fcb1 	bl	8007954 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8006ff8:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	f7ff ff6e 	bl	8006edc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007006:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f7ff ff85 	bl	8006f18 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(3000);
 800700e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007012:	f000 fc9f 	bl	8007954 <HAL_Delay>
	propulsion->esc_timer_val = MIN_PROPULSION_LEVEL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800701c:	621a      	str	r2, [r3, #32]
	PropulsionAndControl_UpdateESC(propulsion);
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7ff ff3e 	bl	8006ea0 <PropulsionAndControl_UpdateESC>
	HAL_Delay(3000);
 8007024:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007028:	f000 fc94 	bl	8007954 <HAL_Delay>
	propulsion->esc_timer_val = MAX_PROPULSION_LEVEL;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f241 7270 	movw	r2, #6000	; 0x1770
 8007032:	621a      	str	r2, [r3, #32]
	PropulsionAndControl_UpdateESC(propulsion);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff ff33 	bl	8006ea0 <PropulsionAndControl_UpdateESC>
	HAL_Delay(3000);
 800703a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800703e:	f000 fc89 	bl	8007954 <HAL_Delay>
	propulsion->esc_timer_val = MIN_PROPULSION_LEVEL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007048:	621a      	str	r2, [r3, #32]
	PropulsionAndControl_UpdateESC(propulsion);
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f7ff ff28 	bl	8006ea0 <PropulsionAndControl_UpdateESC>
}
 8007050:	bf00      	nop
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <HAL_MspInit+0x4c>)
 8007060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <HAL_MspInit+0x4c>)
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	6613      	str	r3, [r2, #96]	; 0x60
 800706a:	4b0e      	ldr	r3, [pc, #56]	; (80070a4 <HAL_MspInit+0x4c>)
 800706c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007076:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_MspInit+0x4c>)
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	4a0a      	ldr	r2, [pc, #40]	; (80070a4 <HAL_MspInit+0x4c>)
 800707c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007080:	6593      	str	r3, [r2, #88]	; 0x58
 8007082:	4b08      	ldr	r3, [pc, #32]	; (80070a4 <HAL_MspInit+0x4c>)
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800708a:	603b      	str	r3, [r7, #0]
 800708c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800708e:	2200      	movs	r2, #0
 8007090:	210f      	movs	r1, #15
 8007092:	f06f 0001 	mvn.w	r0, #1
 8007096:	f001 ff43 	bl	8008f20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40021000 	.word	0x40021000

080070a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80070b8:	4b2c      	ldr	r3, [pc, #176]	; (800716c <HAL_InitTick+0xc4>)
 80070ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070bc:	4a2b      	ldr	r2, [pc, #172]	; (800716c <HAL_InitTick+0xc4>)
 80070be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070c2:	6613      	str	r3, [r2, #96]	; 0x60
 80070c4:	4b29      	ldr	r3, [pc, #164]	; (800716c <HAL_InitTick+0xc4>)
 80070c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070cc:	60bb      	str	r3, [r7, #8]
 80070ce:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80070d0:	f107 020c 	add.w	r2, r7, #12
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	4611      	mov	r1, r2
 80070da:	4618      	mov	r0, r3
 80070dc:	f003 ffbc 	bl	800b058 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80070e0:	f003 ffa4 	bl	800b02c <HAL_RCC_GetPCLK2Freq>
 80070e4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	4a21      	ldr	r2, [pc, #132]	; (8007170 <HAL_InitTick+0xc8>)
 80070ea:	fba2 2303 	umull	r2, r3, r2, r3
 80070ee:	0c9b      	lsrs	r3, r3, #18
 80070f0:	3b01      	subs	r3, #1
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80070f4:	4b1f      	ldr	r3, [pc, #124]	; (8007174 <HAL_InitTick+0xcc>)
 80070f6:	4a20      	ldr	r2, [pc, #128]	; (8007178 <HAL_InitTick+0xd0>)
 80070f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80070fa:	4b1e      	ldr	r3, [pc, #120]	; (8007174 <HAL_InitTick+0xcc>)
 80070fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007100:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007102:	4a1c      	ldr	r2, [pc, #112]	; (8007174 <HAL_InitTick+0xcc>)
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007108:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <HAL_InitTick+0xcc>)
 800710a:	2200      	movs	r2, #0
 800710c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800710e:	4b19      	ldr	r3, [pc, #100]	; (8007174 <HAL_InitTick+0xcc>)
 8007110:	2200      	movs	r2, #0
 8007112:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007114:	4817      	ldr	r0, [pc, #92]	; (8007174 <HAL_InitTick+0xcc>)
 8007116:	f004 fa65 	bl	800b5e4 <HAL_TIM_Base_Init>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007124:	2b00      	cmp	r3, #0
 8007126:	d11b      	bne.n	8007160 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007128:	4812      	ldr	r0, [pc, #72]	; (8007174 <HAL_InitTick+0xcc>)
 800712a:	f004 fabd 	bl	800b6a8 <HAL_TIM_Base_Start_IT>
 800712e:	4603      	mov	r3, r0
 8007130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007138:	2b00      	cmp	r3, #0
 800713a:	d111      	bne.n	8007160 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800713c:	2019      	movs	r0, #25
 800713e:	f001 ff09 	bl	8008f54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b0f      	cmp	r3, #15
 8007146:	d808      	bhi.n	800715a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007148:	2200      	movs	r2, #0
 800714a:	6879      	ldr	r1, [r7, #4]
 800714c:	2019      	movs	r0, #25
 800714e:	f001 fee7 	bl	8008f20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007152:	4a0a      	ldr	r2, [pc, #40]	; (800717c <HAL_InitTick+0xd4>)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	e002      	b.n	8007160 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007164:	4618      	mov	r0, r3
 8007166:	3730      	adds	r7, #48	; 0x30
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	40021000 	.word	0x40021000
 8007170:	431bde83 	.word	0x431bde83
 8007174:	20000718 	.word	0x20000718
 8007178:	40012c00 	.word	0x40012c00
 800717c:	20000008 	.word	0x20000008

08007180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007184:	e7fe      	b.n	8007184 <NMI_Handler+0x4>

08007186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007186:	b480      	push	{r7}
 8007188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800718a:	e7fe      	b.n	800718a <HardFault_Handler+0x4>

0800718c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007190:	e7fe      	b.n	8007190 <MemManage_Handler+0x4>

08007192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007192:	b480      	push	{r7}
 8007194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007196:	e7fe      	b.n	8007196 <BusFault_Handler+0x4>

08007198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800719c:	e7fe      	b.n	800719c <UsageFault_Handler+0x4>

0800719e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800719e:	b480      	push	{r7}
 80071a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80071a2:	bf00      	nop
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80071b0:	4802      	ldr	r0, [pc, #8]	; (80071bc <DMA1_Channel1_IRQHandler+0x10>)
 80071b2:	f002 f8c0 	bl	8009336 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80071b6:	bf00      	nop
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000100 	.word	0x20000100

080071c0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80071c4:	4802      	ldr	r0, [pc, #8]	; (80071d0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80071c6:	f004 fc51 	bl	800ba6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80071ca:	bf00      	nop
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000718 	.word	0x20000718

080071d4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80071d8:	4805      	ldr	r0, [pc, #20]	; (80071f0 <UART4_IRQHandler+0x1c>)
 80071da:	f005 fc7d 	bl	800cad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <UART4_IRQHandler+0x20>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f007 febb 	bl	800ef60 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000848 	.word	0x20000848
 80071f4:	200001f0 	.word	0x200001f0

080071f8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80071fc:	4802      	ldr	r0, [pc, #8]	; (8007208 <UART5_IRQHandler+0x10>)
 80071fe:	f005 fc6b 	bl	800cad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200008d8 	.word	0x200008d8

0800720c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007210:	4b07      	ldr	r3, [pc, #28]	; (8007230 <SystemInit+0x24>)
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007216:	4a06      	ldr	r2, [pc, #24]	; (8007230 <SystemInit+0x24>)
 8007218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800721c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <SystemInit+0x24>)
 8007222:	4a04      	ldr	r2, [pc, #16]	; (8007234 <SystemInit+0x28>)
 8007224:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007226:	bf00      	nop
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	e000ed00 	.word	0xe000ed00
 8007234:	08004000 	.word	0x08004000

08007238 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08a      	sub	sp, #40	; 0x28
 800723c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800723e:	f107 031c 	add.w	r3, r7, #28
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	605a      	str	r2, [r3, #4]
 8007248:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800724a:	463b      	mov	r3, r7
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
 8007258:	615a      	str	r2, [r3, #20]
 800725a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <MX_TIM2_Init+0xa8>)
 800725e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <MX_TIM2_Init+0xa8>)
 8007266:	2200      	movs	r2, #0
 8007268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800726a:	4b1d      	ldr	r3, [pc, #116]	; (80072e0 <MX_TIM2_Init+0xa8>)
 800726c:	2200      	movs	r2, #0
 800726e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <MX_TIM2_Init+0xa8>)
 8007272:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <MX_TIM2_Init+0xac>)
 8007274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007276:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <MX_TIM2_Init+0xa8>)
 8007278:	2200      	movs	r2, #0
 800727a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <MX_TIM2_Init+0xa8>)
 800727e:	2200      	movs	r2, #0
 8007280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007282:	4817      	ldr	r0, [pc, #92]	; (80072e0 <MX_TIM2_Init+0xa8>)
 8007284:	f004 fa88 	bl	800b798 <HAL_TIM_PWM_Init>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d001      	beq.n	8007292 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800728e:	f7ff fbcd 	bl	8006a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007296:	2300      	movs	r3, #0
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800729a:	f107 031c 	add.w	r3, r7, #28
 800729e:	4619      	mov	r1, r3
 80072a0:	480f      	ldr	r0, [pc, #60]	; (80072e0 <MX_TIM2_Init+0xa8>)
 80072a2:	f005 fa97 	bl	800c7d4 <HAL_TIMEx_MasterConfigSynchronization>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80072ac:	f7ff fbbe 	bl	8006a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80072b0:	2360      	movs	r3, #96	; 0x60
 80072b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80072b8:	2300      	movs	r3, #0
 80072ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80072bc:	2300      	movs	r3, #0
 80072be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80072c0:	463b      	mov	r3, r7
 80072c2:	2208      	movs	r2, #8
 80072c4:	4619      	mov	r1, r3
 80072c6:	4806      	ldr	r0, [pc, #24]	; (80072e0 <MX_TIM2_Init+0xa8>)
 80072c8:	f004 fd50 	bl	800bd6c <HAL_TIM_PWM_ConfigChannel>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80072d2:	f7ff fbab 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80072d6:	bf00      	nop
 80072d8:	3728      	adds	r7, #40	; 0x28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000764 	.word	0x20000764
 80072e4:	0015f900 	.word	0x0015f900

080072e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	; 0x28
 80072ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072ee:	f107 031c 	add.w	r3, r7, #28
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	605a      	str	r2, [r3, #4]
 80072f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80072fa:	463b      	mov	r3, r7
 80072fc:	2200      	movs	r2, #0
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	605a      	str	r2, [r3, #4]
 8007302:	609a      	str	r2, [r3, #8]
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	611a      	str	r2, [r3, #16]
 8007308:	615a      	str	r2, [r3, #20]
 800730a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800730c:	4b21      	ldr	r3, [pc, #132]	; (8007394 <MX_TIM3_Init+0xac>)
 800730e:	4a22      	ldr	r2, [pc, #136]	; (8007398 <MX_TIM3_Init+0xb0>)
 8007310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <MX_TIM3_Init+0xac>)
 8007314:	2232      	movs	r2, #50	; 0x32
 8007316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007318:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <MX_TIM3_Init+0xac>)
 800731a:	2200      	movs	r2, #0
 800731c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 800731e:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <MX_TIM3_Init+0xac>)
 8007320:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8007324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <MX_TIM3_Init+0xac>)
 8007328:	2200      	movs	r2, #0
 800732a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800732c:	4b19      	ldr	r3, [pc, #100]	; (8007394 <MX_TIM3_Init+0xac>)
 800732e:	2200      	movs	r2, #0
 8007330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007332:	4818      	ldr	r0, [pc, #96]	; (8007394 <MX_TIM3_Init+0xac>)
 8007334:	f004 fa30 	bl	800b798 <HAL_TIM_PWM_Init>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800733e:	f7ff fb75 	bl	8006a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800734a:	f107 031c 	add.w	r3, r7, #28
 800734e:	4619      	mov	r1, r3
 8007350:	4810      	ldr	r0, [pc, #64]	; (8007394 <MX_TIM3_Init+0xac>)
 8007352:	f005 fa3f 	bl	800c7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800735c:	f7ff fb66 	bl	8006a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007360:	2360      	movs	r3, #96	; 0x60
 8007362:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007368:	2300      	movs	r3, #0
 800736a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007370:	463b      	mov	r3, r7
 8007372:	2200      	movs	r2, #0
 8007374:	4619      	mov	r1, r3
 8007376:	4807      	ldr	r0, [pc, #28]	; (8007394 <MX_TIM3_Init+0xac>)
 8007378:	f004 fcf8 	bl	800bd6c <HAL_TIM_PWM_ConfigChannel>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8007382:	f7ff fb53 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007386:	4803      	ldr	r0, [pc, #12]	; (8007394 <MX_TIM3_Init+0xac>)
 8007388:	f000 f8c2 	bl	8007510 <HAL_TIM_MspPostInit>

}
 800738c:	bf00      	nop
 800738e:	3728      	adds	r7, #40	; 0x28
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200007b0 	.word	0x200007b0
 8007398:	40000400 	.word	0x40000400

0800739c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	; 0x28
 80073a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073a2:	f107 031c 	add.w	r3, r7, #28
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	605a      	str	r2, [r3, #4]
 80073ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80073ae:	463b      	mov	r3, r7
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
 80073b4:	605a      	str	r2, [r3, #4]
 80073b6:	609a      	str	r2, [r3, #8]
 80073b8:	60da      	str	r2, [r3, #12]
 80073ba:	611a      	str	r2, [r3, #16]
 80073bc:	615a      	str	r2, [r3, #20]
 80073be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80073c0:	4b2e      	ldr	r3, [pc, #184]	; (800747c <MX_TIM4_Init+0xe0>)
 80073c2:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <MX_TIM4_Init+0xe4>)
 80073c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 80073c6:	4b2d      	ldr	r3, [pc, #180]	; (800747c <MX_TIM4_Init+0xe0>)
 80073c8:	2232      	movs	r2, #50	; 0x32
 80073ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073cc:	4b2b      	ldr	r3, [pc, #172]	; (800747c <MX_TIM4_Init+0xe0>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 80073d2:	4b2a      	ldr	r3, [pc, #168]	; (800747c <MX_TIM4_Init+0xe0>)
 80073d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80073d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073da:	4b28      	ldr	r3, [pc, #160]	; (800747c <MX_TIM4_Init+0xe0>)
 80073dc:	2200      	movs	r2, #0
 80073de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073e0:	4b26      	ldr	r3, [pc, #152]	; (800747c <MX_TIM4_Init+0xe0>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80073e6:	4825      	ldr	r0, [pc, #148]	; (800747c <MX_TIM4_Init+0xe0>)
 80073e8:	f004 f9d6 	bl	800b798 <HAL_TIM_PWM_Init>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80073f2:	f7ff fb1b 	bl	8006a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80073f6:	2300      	movs	r3, #0
 80073f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80073fa:	2300      	movs	r3, #0
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80073fe:	f107 031c 	add.w	r3, r7, #28
 8007402:	4619      	mov	r1, r3
 8007404:	481d      	ldr	r0, [pc, #116]	; (800747c <MX_TIM4_Init+0xe0>)
 8007406:	f005 f9e5 	bl	800c7d4 <HAL_TIMEx_MasterConfigSynchronization>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8007410:	f7ff fb0c 	bl	8006a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007414:	2360      	movs	r3, #96	; 0x60
 8007416:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8007418:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 800741c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007426:	463b      	mov	r3, r7
 8007428:	2200      	movs	r2, #0
 800742a:	4619      	mov	r1, r3
 800742c:	4813      	ldr	r0, [pc, #76]	; (800747c <MX_TIM4_Init+0xe0>)
 800742e:	f004 fc9d 	bl	800bd6c <HAL_TIM_PWM_ConfigChannel>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8007438:	f7ff faf8 	bl	8006a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800743c:	463b      	mov	r3, r7
 800743e:	2204      	movs	r2, #4
 8007440:	4619      	mov	r1, r3
 8007442:	480e      	ldr	r0, [pc, #56]	; (800747c <MX_TIM4_Init+0xe0>)
 8007444:	f004 fc92 	bl	800bd6c <HAL_TIM_PWM_ConfigChannel>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800744e:	f7ff faed 	bl	8006a2c <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8007452:	f241 7370 	movw	r3, #6000	; 0x1770
 8007456:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007458:	463b      	mov	r3, r7
 800745a:	220c      	movs	r2, #12
 800745c:	4619      	mov	r1, r3
 800745e:	4807      	ldr	r0, [pc, #28]	; (800747c <MX_TIM4_Init+0xe0>)
 8007460:	f004 fc84 	bl	800bd6c <HAL_TIM_PWM_ConfigChannel>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800746a:	f7ff fadf 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800746e:	4803      	ldr	r0, [pc, #12]	; (800747c <MX_TIM4_Init+0xe0>)
 8007470:	f000 f84e 	bl	8007510 <HAL_TIM_MspPostInit>

}
 8007474:	bf00      	nop
 8007476:	3728      	adds	r7, #40	; 0x28
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200007fc 	.word	0x200007fc
 8007480:	40000800 	.word	0x40000800

08007484 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d10c      	bne.n	80074b0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 8007498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	6593      	str	r3, [r2, #88]	; 0x58
 80074a2:	4b18      	ldr	r3, [pc, #96]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
 80074ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80074ae:	e022      	b.n	80074f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a14      	ldr	r2, [pc, #80]	; (8007508 <HAL_TIM_PWM_MspInit+0x84>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d10c      	bne.n	80074d4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074ba:	4b12      	ldr	r3, [pc, #72]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074be:	4a11      	ldr	r2, [pc, #68]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074c0:	f043 0302 	orr.w	r3, r3, #2
 80074c4:	6593      	str	r3, [r2, #88]	; 0x58
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
}
 80074d2:	e010      	b.n	80074f6 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a0c      	ldr	r2, [pc, #48]	; (800750c <HAL_TIM_PWM_MspInit+0x88>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d10b      	bne.n	80074f6 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e2:	4a08      	ldr	r2, [pc, #32]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074e4:	f043 0304 	orr.w	r3, r3, #4
 80074e8:	6593      	str	r3, [r2, #88]	; 0x58
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <HAL_TIM_PWM_MspInit+0x80>)
 80074ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40021000 	.word	0x40021000
 8007508:	40000400 	.word	0x40000400
 800750c:	40000800 	.word	0x40000800

08007510 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b08a      	sub	sp, #40	; 0x28
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	605a      	str	r2, [r3, #4]
 8007522:	609a      	str	r2, [r3, #8]
 8007524:	60da      	str	r2, [r3, #12]
 8007526:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a22      	ldr	r2, [pc, #136]	; (80075b8 <HAL_TIM_MspPostInit+0xa8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d11c      	bne.n	800756c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007532:	4b22      	ldr	r3, [pc, #136]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 8007534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007536:	4a21      	ldr	r2, [pc, #132]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 8007538:	f043 0304 	orr.w	r3, r3, #4
 800753c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800753e:	4b1f      	ldr	r3, [pc, #124]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 8007540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007542:	f003 0304 	and.w	r3, r3, #4
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800754e:	2302      	movs	r3, #2
 8007550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007552:	2300      	movs	r3, #0
 8007554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007556:	2300      	movs	r3, #0
 8007558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800755a:	2302      	movs	r3, #2
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800755e:	f107 0314 	add.w	r3, r7, #20
 8007562:	4619      	mov	r1, r3
 8007564:	4816      	ldr	r0, [pc, #88]	; (80075c0 <HAL_TIM_MspPostInit+0xb0>)
 8007566:	f002 f835 	bl	80095d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800756a:	e021      	b.n	80075b0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <HAL_TIM_MspPostInit+0xb4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d11c      	bne.n	80075b0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 8007578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 800757c:	f043 0302 	orr.w	r3, r3, #2
 8007580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007582:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <HAL_TIM_MspPostInit+0xac>)
 8007584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800758e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007594:	2302      	movs	r3, #2
 8007596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007598:	2300      	movs	r3, #0
 800759a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800759c:	2300      	movs	r3, #0
 800759e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80075a0:	2302      	movs	r3, #2
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4619      	mov	r1, r3
 80075aa:	4807      	ldr	r0, [pc, #28]	; (80075c8 <HAL_TIM_MspPostInit+0xb8>)
 80075ac:	f002 f812 	bl	80095d4 <HAL_GPIO_Init>
}
 80075b0:	bf00      	nop
 80075b2:	3728      	adds	r7, #40	; 0x28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	40000400 	.word	0x40000400
 80075bc:	40021000 	.word	0x40021000
 80075c0:	48000800 	.word	0x48000800
 80075c4:	40000800 	.word	0x40000800
 80075c8:	48000400 	.word	0x48000400

080075cc <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80075d0:	4b22      	ldr	r3, [pc, #136]	; (800765c <MX_UART4_Init+0x90>)
 80075d2:	4a23      	ldr	r2, [pc, #140]	; (8007660 <MX_UART4_Init+0x94>)
 80075d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80075d6:	4b21      	ldr	r3, [pc, #132]	; (800765c <MX_UART4_Init+0x90>)
 80075d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80075dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80075de:	4b1f      	ldr	r3, [pc, #124]	; (800765c <MX_UART4_Init+0x90>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80075e4:	4b1d      	ldr	r3, [pc, #116]	; (800765c <MX_UART4_Init+0x90>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80075ea:	4b1c      	ldr	r3, [pc, #112]	; (800765c <MX_UART4_Init+0x90>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80075f0:	4b1a      	ldr	r3, [pc, #104]	; (800765c <MX_UART4_Init+0x90>)
 80075f2:	220c      	movs	r2, #12
 80075f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075f6:	4b19      	ldr	r3, [pc, #100]	; (800765c <MX_UART4_Init+0x90>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80075fc:	4b17      	ldr	r3, [pc, #92]	; (800765c <MX_UART4_Init+0x90>)
 80075fe:	2200      	movs	r2, #0
 8007600:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007602:	4b16      	ldr	r3, [pc, #88]	; (800765c <MX_UART4_Init+0x90>)
 8007604:	2200      	movs	r2, #0
 8007606:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007608:	4b14      	ldr	r3, [pc, #80]	; (800765c <MX_UART4_Init+0x90>)
 800760a:	2200      	movs	r2, #0
 800760c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800760e:	4b13      	ldr	r3, [pc, #76]	; (800765c <MX_UART4_Init+0x90>)
 8007610:	2200      	movs	r2, #0
 8007612:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007614:	4811      	ldr	r0, [pc, #68]	; (800765c <MX_UART4_Init+0x90>)
 8007616:	f005 f9b9 	bl	800c98c <HAL_UART_Init>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007620:	f7ff fa04 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007624:	2100      	movs	r1, #0
 8007626:	480d      	ldr	r0, [pc, #52]	; (800765c <MX_UART4_Init+0x90>)
 8007628:	f007 f8cf 	bl	800e7ca <HAL_UARTEx_SetTxFifoThreshold>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007632:	f7ff f9fb 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007636:	2100      	movs	r1, #0
 8007638:	4808      	ldr	r0, [pc, #32]	; (800765c <MX_UART4_Init+0x90>)
 800763a:	f007 f904 	bl	800e846 <HAL_UARTEx_SetRxFifoThreshold>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007644:	f7ff f9f2 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007648:	4804      	ldr	r0, [pc, #16]	; (800765c <MX_UART4_Init+0x90>)
 800764a:	f007 f885 	bl	800e758 <HAL_UARTEx_DisableFifoMode>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d001      	beq.n	8007658 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007654:	f7ff f9ea 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	20000848 	.word	0x20000848
 8007660:	40004c00 	.word	0x40004c00

08007664 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007668:	4b22      	ldr	r3, [pc, #136]	; (80076f4 <MX_UART5_Init+0x90>)
 800766a:	4a23      	ldr	r2, [pc, #140]	; (80076f8 <MX_UART5_Init+0x94>)
 800766c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800766e:	4b21      	ldr	r3, [pc, #132]	; (80076f4 <MX_UART5_Init+0x90>)
 8007670:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007674:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007676:	4b1f      	ldr	r3, [pc, #124]	; (80076f4 <MX_UART5_Init+0x90>)
 8007678:	2200      	movs	r2, #0
 800767a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800767c:	4b1d      	ldr	r3, [pc, #116]	; (80076f4 <MX_UART5_Init+0x90>)
 800767e:	2200      	movs	r2, #0
 8007680:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007682:	4b1c      	ldr	r3, [pc, #112]	; (80076f4 <MX_UART5_Init+0x90>)
 8007684:	2200      	movs	r2, #0
 8007686:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007688:	4b1a      	ldr	r3, [pc, #104]	; (80076f4 <MX_UART5_Init+0x90>)
 800768a:	220c      	movs	r2, #12
 800768c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800768e:	4b19      	ldr	r3, [pc, #100]	; (80076f4 <MX_UART5_Init+0x90>)
 8007690:	2200      	movs	r2, #0
 8007692:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007694:	4b17      	ldr	r3, [pc, #92]	; (80076f4 <MX_UART5_Init+0x90>)
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800769a:	4b16      	ldr	r3, [pc, #88]	; (80076f4 <MX_UART5_Init+0x90>)
 800769c:	2200      	movs	r2, #0
 800769e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80076a0:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <MX_UART5_Init+0x90>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80076a6:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <MX_UART5_Init+0x90>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80076ac:	4811      	ldr	r0, [pc, #68]	; (80076f4 <MX_UART5_Init+0x90>)
 80076ae:	f005 f96d 	bl	800c98c <HAL_UART_Init>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80076b8:	f7ff f9b8 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076bc:	2100      	movs	r1, #0
 80076be:	480d      	ldr	r0, [pc, #52]	; (80076f4 <MX_UART5_Init+0x90>)
 80076c0:	f007 f883 	bl	800e7ca <HAL_UARTEx_SetTxFifoThreshold>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80076ca:	f7ff f9af 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80076ce:	2100      	movs	r1, #0
 80076d0:	4808      	ldr	r0, [pc, #32]	; (80076f4 <MX_UART5_Init+0x90>)
 80076d2:	f007 f8b8 	bl	800e846 <HAL_UARTEx_SetRxFifoThreshold>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80076dc:	f7ff f9a6 	bl	8006a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <MX_UART5_Init+0x90>)
 80076e2:	f007 f839 	bl	800e758 <HAL_UARTEx_DisableFifoMode>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80076ec:	f7ff f99e 	bl	8006a2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200008d8 	.word	0x200008d8
 80076f8:	40005000 	.word	0x40005000

080076fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b0a2      	sub	sp, #136	; 0x88
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007704:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	609a      	str	r2, [r3, #8]
 8007710:	60da      	str	r2, [r3, #12]
 8007712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007714:	f107 0320 	add.w	r3, r7, #32
 8007718:	2254      	movs	r2, #84	; 0x54
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f009 fa53 	bl	8010bc8 <memset>
  if(uartHandle->Instance==UART4)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a56      	ldr	r2, [pc, #344]	; (8007880 <HAL_UART_MspInit+0x184>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d141      	bne.n	80077b0 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800772c:	2308      	movs	r3, #8
 800772e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007730:	2300      	movs	r3, #0
 8007732:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007734:	f107 0320 	add.w	r3, r7, #32
 8007738:	4618      	mov	r0, r3
 800773a:	f003 fd05 	bl	800b148 <HAL_RCCEx_PeriphCLKConfig>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007744:	f7ff f972 	bl	8006a2c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007748:	4b4e      	ldr	r3, [pc, #312]	; (8007884 <HAL_UART_MspInit+0x188>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	4a4d      	ldr	r2, [pc, #308]	; (8007884 <HAL_UART_MspInit+0x188>)
 800774e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007752:	6593      	str	r3, [r2, #88]	; 0x58
 8007754:	4b4b      	ldr	r3, [pc, #300]	; (8007884 <HAL_UART_MspInit+0x188>)
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007760:	4b48      	ldr	r3, [pc, #288]	; (8007884 <HAL_UART_MspInit+0x188>)
 8007762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007764:	4a47      	ldr	r2, [pc, #284]	; (8007884 <HAL_UART_MspInit+0x188>)
 8007766:	f043 0304 	orr.w	r3, r3, #4
 800776a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800776c:	4b45      	ldr	r3, [pc, #276]	; (8007884 <HAL_UART_MspInit+0x188>)
 800776e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007778:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800777c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800777e:	2302      	movs	r3, #2
 8007780:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007782:	2300      	movs	r3, #0
 8007784:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007786:	2300      	movs	r3, #0
 8007788:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800778c:	2305      	movs	r3, #5
 800778e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007792:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007796:	4619      	mov	r1, r3
 8007798:	483b      	ldr	r0, [pc, #236]	; (8007888 <HAL_UART_MspInit+0x18c>)
 800779a:	f001 ff1b 	bl	80095d4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800779e:	2200      	movs	r2, #0
 80077a0:	2105      	movs	r1, #5
 80077a2:	2034      	movs	r0, #52	; 0x34
 80077a4:	f001 fbbc 	bl	8008f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80077a8:	2034      	movs	r0, #52	; 0x34
 80077aa:	f001 fbd3 	bl	8008f54 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80077ae:	e063      	b.n	8007878 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a35      	ldr	r2, [pc, #212]	; (800788c <HAL_UART_MspInit+0x190>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d15e      	bne.n	8007878 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80077ba:	2310      	movs	r3, #16
 80077bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80077be:	2300      	movs	r3, #0
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077c2:	f107 0320 	add.w	r3, r7, #32
 80077c6:	4618      	mov	r0, r3
 80077c8:	f003 fcbe 	bl	800b148 <HAL_RCCEx_PeriphCLKConfig>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_UART_MspInit+0xda>
      Error_Handler();
 80077d2:	f7ff f92b 	bl	8006a2c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80077d6:	4b2b      	ldr	r3, [pc, #172]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077da:	4a2a      	ldr	r2, [pc, #168]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077e0:	6593      	str	r3, [r2, #88]	; 0x58
 80077e2:	4b28      	ldr	r3, [pc, #160]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ea:	617b      	str	r3, [r7, #20]
 80077ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ee:	4b25      	ldr	r3, [pc, #148]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	4a24      	ldr	r2, [pc, #144]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077f4:	f043 0304 	orr.w	r3, r3, #4
 80077f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077fa:	4b22      	ldr	r3, [pc, #136]	; (8007884 <HAL_UART_MspInit+0x188>)
 80077fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077fe:	f003 0304 	and.w	r3, r3, #4
 8007802:	613b      	str	r3, [r7, #16]
 8007804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007806:	4b1f      	ldr	r3, [pc, #124]	; (8007884 <HAL_UART_MspInit+0x188>)
 8007808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800780a:	4a1e      	ldr	r2, [pc, #120]	; (8007884 <HAL_UART_MspInit+0x188>)
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007812:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <HAL_UART_MspInit+0x188>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800781e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007822:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007824:	2302      	movs	r3, #2
 8007826:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007828:	2300      	movs	r3, #0
 800782a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800782c:	2300      	movs	r3, #0
 800782e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007832:	2305      	movs	r3, #5
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007838:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800783c:	4619      	mov	r1, r3
 800783e:	4812      	ldr	r0, [pc, #72]	; (8007888 <HAL_UART_MspInit+0x18c>)
 8007840:	f001 fec8 	bl	80095d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007844:	2304      	movs	r3, #4
 8007846:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007848:	2302      	movs	r3, #2
 800784a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007850:	2300      	movs	r3, #0
 8007852:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007856:	2305      	movs	r3, #5
 8007858:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800785c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007860:	4619      	mov	r1, r3
 8007862:	480b      	ldr	r0, [pc, #44]	; (8007890 <HAL_UART_MspInit+0x194>)
 8007864:	f001 feb6 	bl	80095d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8007868:	2200      	movs	r2, #0
 800786a:	2105      	movs	r1, #5
 800786c:	2035      	movs	r0, #53	; 0x35
 800786e:	f001 fb57 	bl	8008f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007872:	2035      	movs	r0, #53	; 0x35
 8007874:	f001 fb6e 	bl	8008f54 <HAL_NVIC_EnableIRQ>
}
 8007878:	bf00      	nop
 800787a:	3788      	adds	r7, #136	; 0x88
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40004c00 	.word	0x40004c00
 8007884:	40021000 	.word	0x40021000
 8007888:	48000800 	.word	0x48000800
 800788c:	40005000 	.word	0x40005000
 8007890:	48000c00 	.word	0x48000c00

08007894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007894:	480d      	ldr	r0, [pc, #52]	; (80078cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007896:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007898:	480d      	ldr	r0, [pc, #52]	; (80078d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800789a:	490e      	ldr	r1, [pc, #56]	; (80078d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800789c:	4a0e      	ldr	r2, [pc, #56]	; (80078d8 <LoopForever+0xe>)
  movs r3, #0
 800789e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80078a0:	e002      	b.n	80078a8 <LoopCopyDataInit>

080078a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078a6:	3304      	adds	r3, #4

080078a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078ac:	d3f9      	bcc.n	80078a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078ae:	4a0b      	ldr	r2, [pc, #44]	; (80078dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80078b0:	4c0b      	ldr	r4, [pc, #44]	; (80078e0 <LoopForever+0x16>)
  movs r3, #0
 80078b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078b4:	e001      	b.n	80078ba <LoopFillZerobss>

080078b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078b8:	3204      	adds	r2, #4

080078ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078bc:	d3fb      	bcc.n	80078b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80078be:	f7ff fca5 	bl	800720c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078c2:	f009 f9e5 	bl	8010c90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80078c6:	f7ff f817 	bl	80068f8 <main>

080078ca <LoopForever>:

LoopForever:
    b LoopForever
 80078ca:	e7fe      	b.n	80078ca <LoopForever>
  ldr   r0, =_estack
 80078cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80078d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80078d4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80078d8:	08011db8 	.word	0x08011db8
  ldr r2, =_sbss
 80078dc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80078e0:	20003c00 	.word	0x20003c00

080078e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80078e4:	e7fe      	b.n	80078e4 <ADC1_2_IRQHandler>

080078e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b082      	sub	sp, #8
 80078ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078f0:	2003      	movs	r0, #3
 80078f2:	f001 fb0a 	bl	8008f0a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80078f6:	200f      	movs	r0, #15
 80078f8:	f7ff fbd6 	bl	80070a8 <HAL_InitTick>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	71fb      	strb	r3, [r7, #7]
 8007906:	e001      	b.n	800790c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007908:	f7ff fba6 	bl	8007058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800790c:	79fb      	ldrb	r3, [r7, #7]

}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <HAL_IncTick+0x1c>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <HAL_IncTick+0x20>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4413      	add	r3, r2
 8007926:	4a03      	ldr	r2, [pc, #12]	; (8007934 <HAL_IncTick+0x1c>)
 8007928:	6013      	str	r3, [r2, #0]
}
 800792a:	bf00      	nop
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	20000968 	.word	0x20000968
 8007938:	2000000c 	.word	0x2000000c

0800793c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  return uwTick;
 8007940:	4b03      	ldr	r3, [pc, #12]	; (8007950 <HAL_GetTick+0x14>)
 8007942:	681b      	ldr	r3, [r3, #0]
}
 8007944:	4618      	mov	r0, r3
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	20000968 	.word	0x20000968

08007954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800795c:	f7ff ffee 	bl	800793c <HAL_GetTick>
 8007960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796c:	d004      	beq.n	8007978 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_Delay+0x40>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68fa      	ldr	r2, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007978:	bf00      	nop
 800797a:	f7ff ffdf 	bl	800793c <HAL_GetTick>
 800797e:	4602      	mov	r2, r0
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	429a      	cmp	r2, r3
 8007988:	d8f7      	bhi.n	800797a <HAL_Delay+0x26>
  {
  }
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	2000000c 	.word	0x2000000c

08007998 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	609a      	str	r2, [r3, #8]
}
 80079b2:	bf00      	nop
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	609a      	str	r2, [r3, #8]
}
 80079d8:	bf00      	nop
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3360      	adds	r3, #96	; 0x60
 8007a12:	461a      	mov	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <LL_ADC_SetOffset+0x44>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007a38:	bf00      	nop
 8007a3a:	371c      	adds	r7, #28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	03fff000 	.word	0x03fff000

08007a48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3360      	adds	r3, #96	; 0x60
 8007a56:	461a      	mov	r2, r3
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3360      	adds	r3, #96	; 0x60
 8007a84:	461a      	mov	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b087      	sub	sp, #28
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3360      	adds	r3, #96	; 0x60
 8007aba:	461a      	mov	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3360      	adds	r3, #96	; 0x60
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	431a      	orrs	r2, r3
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	615a      	str	r2, [r3, #20]
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007b50:	2301      	movs	r3, #1
 8007b52:	e000      	b.n	8007b56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr

08007b62 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b087      	sub	sp, #28
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	3330      	adds	r3, #48	; 0x30
 8007b72:	461a      	mov	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	0a1b      	lsrs	r3, r3, #8
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	f003 030c 	and.w	r3, r3, #12
 8007b7e:	4413      	add	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 031f 	and.w	r3, r3, #31
 8007b8c:	211f      	movs	r1, #31
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	43db      	mvns	r3, r3
 8007b94:	401a      	ands	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	0e9b      	lsrs	r3, r3, #26
 8007b9a:	f003 011f 	and.w	r1, r3, #31
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	f003 031f 	and.w	r3, r3, #31
 8007ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr

08007bba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b087      	sub	sp, #28
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3314      	adds	r3, #20
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	0e5b      	lsrs	r3, r3, #25
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	f003 0304 	and.w	r3, r3, #4
 8007bd6:	4413      	add	r3, r2
 8007bd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	0d1b      	lsrs	r3, r3, #20
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2107      	movs	r1, #7
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	43db      	mvns	r3, r3
 8007bee:	401a      	ands	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	0d1b      	lsrs	r3, r3, #20
 8007bf4:	f003 031f 	and.w	r3, r3, #31
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007c04:	bf00      	nop
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a0f      	ldr	r2, [pc, #60]	; (8007c5c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d10a      	bne.n	8007c3a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c30:	431a      	orrs	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8007c38:	e00a      	b.n	8007c50 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c46:	43db      	mvns	r3, r3
 8007c48:	401a      	ands	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	407f0000 	.word	0x407f0000

08007c60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 031f 	and.w	r3, r3, #31
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr

08007c7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007c8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6093      	str	r3, [r2, #8]
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cb4:	d101      	bne.n	8007cba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e000      	b.n	8007cbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007cd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007cdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d04:	d101      	bne.n	8007d0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d2c:	f043 0201 	orr.w	r2, r3, #1
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007d34:	bf00      	nop
 8007d36:	370c      	adds	r7, #12
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <LL_ADC_IsEnabled+0x18>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <LL_ADC_IsEnabled+0x1a>
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b083      	sub	sp, #12
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d7a:	f043 0204 	orr.w	r2, r3, #4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007d82:	bf00      	nop
 8007d84:	370c      	adds	r7, #12
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b083      	sub	sp, #12
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d101      	bne.n	8007da6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0308 	and.w	r3, r3, #8
 8007dc4:	2b08      	cmp	r3, #8
 8007dc6:	d101      	bne.n	8007dcc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
	...

08007ddc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b089      	sub	sp, #36	; 0x24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007de4:	2300      	movs	r3, #0
 8007de6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007de8:	2300      	movs	r3, #0
 8007dea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e1af      	b.n	8008156 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d109      	bne.n	8007e18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fd f8d9 	bl	8004fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff ff3f 	bl	8007ca0 <LL_ADC_IsDeepPowerDownEnabled>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d004      	beq.n	8007e32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7ff ff25 	bl	8007c7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff5a 	bl	8007cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d115      	bne.n	8007e6e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff ff3e 	bl	8007cc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007e4c:	4b9f      	ldr	r3, [pc, #636]	; (80080cc <HAL_ADC_Init+0x2f0>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	099b      	lsrs	r3, r3, #6
 8007e52:	4a9f      	ldr	r2, [pc, #636]	; (80080d0 <HAL_ADC_Init+0x2f4>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	099b      	lsrs	r3, r3, #6
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007e60:	e002      	b.n	8007e68 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f9      	bne.n	8007e62 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff ff3c 	bl	8007cf0 <LL_ADC_IsInternalRegulatorEnabled>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10d      	bne.n	8007e9a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	f043 0210 	orr.w	r2, r3, #16
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff ff75 	bl	8007d8e <LL_ADC_REG_IsConversionOngoing>
 8007ea4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eaa:	f003 0310 	and.w	r3, r3, #16
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f040 8148 	bne.w	8008144 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f040 8144 	bne.w	8008144 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ec0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007ec4:	f043 0202 	orr.w	r2, r3, #2
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7ff ff35 	bl	8007d40 <LL_ADC_IsEnabled>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d141      	bne.n	8007f60 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ee4:	d004      	beq.n	8007ef0 <HAL_ADC_Init+0x114>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a7a      	ldr	r2, [pc, #488]	; (80080d4 <HAL_ADC_Init+0x2f8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d10f      	bne.n	8007f10 <HAL_ADC_Init+0x134>
 8007ef0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007ef4:	f7ff ff24 	bl	8007d40 <LL_ADC_IsEnabled>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	4876      	ldr	r0, [pc, #472]	; (80080d4 <HAL_ADC_Init+0x2f8>)
 8007efc:	f7ff ff20 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f00:	4603      	mov	r3, r0
 8007f02:	4323      	orrs	r3, r4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	bf0c      	ite	eq
 8007f08:	2301      	moveq	r3, #1
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	e012      	b.n	8007f36 <HAL_ADC_Init+0x15a>
 8007f10:	4871      	ldr	r0, [pc, #452]	; (80080d8 <HAL_ADC_Init+0x2fc>)
 8007f12:	f7ff ff15 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f16:	4604      	mov	r4, r0
 8007f18:	4870      	ldr	r0, [pc, #448]	; (80080dc <HAL_ADC_Init+0x300>)
 8007f1a:	f7ff ff11 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	431c      	orrs	r4, r3
 8007f22:	486f      	ldr	r0, [pc, #444]	; (80080e0 <HAL_ADC_Init+0x304>)
 8007f24:	f7ff ff0c 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4323      	orrs	r3, r4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d012      	beq.n	8007f60 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f42:	d004      	beq.n	8007f4e <HAL_ADC_Init+0x172>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a62      	ldr	r2, [pc, #392]	; (80080d4 <HAL_ADC_Init+0x2f8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d101      	bne.n	8007f52 <HAL_ADC_Init+0x176>
 8007f4e:	4a65      	ldr	r2, [pc, #404]	; (80080e4 <HAL_ADC_Init+0x308>)
 8007f50:	e000      	b.n	8007f54 <HAL_ADC_Init+0x178>
 8007f52:	4a65      	ldr	r2, [pc, #404]	; (80080e8 <HAL_ADC_Init+0x30c>)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	f7ff fd1c 	bl	8007998 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	7f5b      	ldrb	r3, [r3, #29]
 8007f64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007f70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007f76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007f80:	4313      	orrs	r3, r2
 8007f82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d106      	bne.n	8007f9c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	3b01      	subs	r3, #1
 8007f94:	045b      	lsls	r3, r3, #17
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	4b4b      	ldr	r3, [pc, #300]	; (80080ec <HAL_ADC_Init+0x310>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	69b9      	ldr	r1, [r7, #24]
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff fed1 	bl	8007d8e <LL_ADC_REG_IsConversionOngoing>
 8007fec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff fede 	bl	8007db4 <LL_ADC_INJ_IsConversionOngoing>
 8007ff8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d17f      	bne.n	8008100 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d17c      	bne.n	8008100 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800800a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008012:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008014:	4313      	orrs	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008022:	f023 0302 	bic.w	r3, r3, #2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	69b9      	ldr	r1, [r7, #24]
 800802c:	430b      	orrs	r3, r1
 800802e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	691b      	ldr	r3, [r3, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d017      	beq.n	8008068 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008046:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008050:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	6911      	ldr	r1, [r2, #16]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6812      	ldr	r2, [r2, #0]
 8008060:	430b      	orrs	r3, r1
 8008062:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008066:	e013      	b.n	8008090 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691a      	ldr	r2, [r3, #16]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008076:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008088:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800808c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008096:	2b01      	cmp	r3, #1
 8008098:	d12a      	bne.n	80080f0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080a4:	f023 0304 	bic.w	r3, r3, #4
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80080b0:	4311      	orrs	r1, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80080b6:	4311      	orrs	r1, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80080bc:	430a      	orrs	r2, r1
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	611a      	str	r2, [r3, #16]
 80080ca:	e019      	b.n	8008100 <HAL_ADC_Init+0x324>
 80080cc:	20000004 	.word	0x20000004
 80080d0:	053e2d63 	.word	0x053e2d63
 80080d4:	50000100 	.word	0x50000100
 80080d8:	50000400 	.word	0x50000400
 80080dc:	50000500 	.word	0x50000500
 80080e0:	50000600 	.word	0x50000600
 80080e4:	50000300 	.word	0x50000300
 80080e8:	50000700 	.word	0x50000700
 80080ec:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691a      	ldr	r2, [r3, #16]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d10c      	bne.n	8008122 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810e:	f023 010f 	bic.w	r1, r3, #15
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	430a      	orrs	r2, r1
 800811e:	631a      	str	r2, [r3, #48]	; 0x30
 8008120:	e007      	b.n	8008132 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 020f 	bic.w	r2, r2, #15
 8008130:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	65da      	str	r2, [r3, #92]	; 0x5c
 8008142:	e007      	b.n	8008154 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008148:	f043 0210 	orr.w	r2, r3, #16
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008154:	7ffb      	ldrb	r3, [r7, #31]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3724      	adds	r7, #36	; 0x24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd90      	pop	{r4, r7, pc}
 800815e:	bf00      	nop

08008160 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008174:	d004      	beq.n	8008180 <HAL_ADC_Start_DMA+0x20>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a5a      	ldr	r2, [pc, #360]	; (80082e4 <HAL_ADC_Start_DMA+0x184>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d101      	bne.n	8008184 <HAL_ADC_Start_DMA+0x24>
 8008180:	4b59      	ldr	r3, [pc, #356]	; (80082e8 <HAL_ADC_Start_DMA+0x188>)
 8008182:	e000      	b.n	8008186 <HAL_ADC_Start_DMA+0x26>
 8008184:	4b59      	ldr	r3, [pc, #356]	; (80082ec <HAL_ADC_Start_DMA+0x18c>)
 8008186:	4618      	mov	r0, r3
 8008188:	f7ff fd6a 	bl	8007c60 <LL_ADC_GetMultimode>
 800818c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff fdfb 	bl	8007d8e <LL_ADC_REG_IsConversionOngoing>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	f040 809b 	bne.w	80082d6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d101      	bne.n	80081ae <HAL_ADC_Start_DMA+0x4e>
 80081aa:	2302      	movs	r3, #2
 80081ac:	e096      	b.n	80082dc <HAL_ADC_Start_DMA+0x17c>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2201      	movs	r2, #1
 80081b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a4d      	ldr	r2, [pc, #308]	; (80082f0 <HAL_ADC_Start_DMA+0x190>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d008      	beq.n	80081d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d005      	beq.n	80081d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	2b05      	cmp	r3, #5
 80081ca:	d002      	beq.n	80081d2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b09      	cmp	r3, #9
 80081d0:	d17a      	bne.n	80082c8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fcf6 	bl	8008bc4 <ADC_Enable>
 80081d8:	4603      	mov	r3, r0
 80081da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d16d      	bne.n	80082be <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081ea:	f023 0301 	bic.w	r3, r3, #1
 80081ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a3a      	ldr	r2, [pc, #232]	; (80082e4 <HAL_ADC_Start_DMA+0x184>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d009      	beq.n	8008214 <HAL_ADC_Start_DMA+0xb4>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a3b      	ldr	r2, [pc, #236]	; (80082f4 <HAL_ADC_Start_DMA+0x194>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d002      	beq.n	8008210 <HAL_ADC_Start_DMA+0xb0>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	e003      	b.n	8008218 <HAL_ADC_Start_DMA+0xb8>
 8008210:	4b39      	ldr	r3, [pc, #228]	; (80082f8 <HAL_ADC_Start_DMA+0x198>)
 8008212:	e001      	b.n	8008218 <HAL_ADC_Start_DMA+0xb8>
 8008214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	6812      	ldr	r2, [r2, #0]
 800821c:	4293      	cmp	r3, r2
 800821e:	d002      	beq.n	8008226 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d105      	bne.n	8008232 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008242:	f023 0206 	bic.w	r2, r3, #6
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	661a      	str	r2, [r3, #96]	; 0x60
 800824a:	e002      	b.n	8008252 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	4a29      	ldr	r2, [pc, #164]	; (80082fc <HAL_ADC_Start_DMA+0x19c>)
 8008258:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	4a28      	ldr	r2, [pc, #160]	; (8008300 <HAL_ADC_Start_DMA+0x1a0>)
 8008260:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	4a27      	ldr	r2, [pc, #156]	; (8008304 <HAL_ADC_Start_DMA+0x1a4>)
 8008268:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	221c      	movs	r2, #28
 8008270:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0210 	orr.w	r2, r2, #16
 8008288:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f042 0201 	orr.w	r2, r2, #1
 8008298:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3340      	adds	r3, #64	; 0x40
 80082a4:	4619      	mov	r1, r3
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f000 ff09 	bl	80090c0 <HAL_DMA_Start_IT>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7ff fd55 	bl	8007d66 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80082bc:	e00d      	b.n	80082da <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80082c6:	e008      	b.n	80082da <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80082d4:	e001      	b.n	80082da <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80082d6:	2302      	movs	r3, #2
 80082d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	50000100 	.word	0x50000100
 80082e8:	50000300 	.word	0x50000300
 80082ec:	50000700 	.word	0x50000700
 80082f0:	50000600 	.word	0x50000600
 80082f4:	50000500 	.word	0x50000500
 80082f8:	50000400 	.word	0x50000400
 80082fc:	08008c89 	.word	0x08008c89
 8008300:	08008d61 	.word	0x08008d61
 8008304:	08008d7d 	.word	0x08008d7d

08008308 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b0b6      	sub	sp, #216	; 0xd8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800835e:	2b01      	cmp	r3, #1
 8008360:	d102      	bne.n	8008368 <HAL_ADC_ConfigChannel+0x24>
 8008362:	2302      	movs	r3, #2
 8008364:	f000 bc13 	b.w	8008b8e <HAL_ADC_ConfigChannel+0x84a>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff fd0a 	bl	8007d8e <LL_ADC_REG_IsConversionOngoing>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 83f3 	bne.w	8008b68 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	6859      	ldr	r1, [r3, #4]
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7ff fbe7 	bl	8007b62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7ff fcf8 	bl	8007d8e <LL_ADC_REG_IsConversionOngoing>
 800839e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff fd04 	bl	8007db4 <LL_ADC_INJ_IsConversionOngoing>
 80083ac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80083b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f040 81d9 	bne.w	800876c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80083ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 81d4 	bne.w	800876c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083cc:	d10f      	bne.n	80083ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	4619      	mov	r1, r3
 80083da:	f7ff fbee 	bl	8007bba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fb95 	bl	8007b16 <LL_ADC_SetSamplingTimeCommonConfig>
 80083ec:	e00e      	b.n	800840c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	6819      	ldr	r1, [r3, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7ff fbdd 	bl	8007bba <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fb85 	bl	8007b16 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	695a      	ldr	r2, [r3, #20]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	08db      	lsrs	r3, r3, #3
 8008418:	f003 0303 	and.w	r3, r3, #3
 800841c:	005b      	lsls	r3, r3, #1
 800841e:	fa02 f303 	lsl.w	r3, r2, r3
 8008422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b04      	cmp	r3, #4
 800842c:	d022      	beq.n	8008474 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6919      	ldr	r1, [r3, #16]
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843e:	f7ff fadf 	bl	8007a00 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6919      	ldr	r1, [r3, #16]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	461a      	mov	r2, r3
 8008450:	f7ff fb2b 	bl	8007aaa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	6919      	ldr	r1, [r3, #16]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	7f1b      	ldrb	r3, [r3, #28]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d102      	bne.n	800846a <HAL_ADC_ConfigChannel+0x126>
 8008464:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008468:	e000      	b.n	800846c <HAL_ADC_ConfigChannel+0x128>
 800846a:	2300      	movs	r3, #0
 800846c:	461a      	mov	r2, r3
 800846e:	f7ff fb37 	bl	8007ae0 <LL_ADC_SetOffsetSaturation>
 8008472:	e17b      	b.n	800876c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f7ff fae4 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008480:	4603      	mov	r3, r0
 8008482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <HAL_ADC_ConfigChannel+0x15c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2100      	movs	r1, #0
 8008490:	4618      	mov	r0, r3
 8008492:	f7ff fad9 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008496:	4603      	mov	r3, r0
 8008498:	0e9b      	lsrs	r3, r3, #26
 800849a:	f003 021f 	and.w	r2, r3, #31
 800849e:	e01e      	b.n	80084de <HAL_ADC_ConfigChannel+0x19a>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f7ff face 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084b6:	fa93 f3a3 	rbit	r3, r3
 80084ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80084be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80084c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d101      	bne.n	80084d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80084ce:	2320      	movs	r3, #32
 80084d0:	e004      	b.n	80084dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80084d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084d6:	fab3 f383 	clz	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d105      	bne.n	80084f6 <HAL_ADC_ConfigChannel+0x1b2>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	0e9b      	lsrs	r3, r3, #26
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	e018      	b.n	8008528 <HAL_ADC_ConfigChannel+0x1e4>
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008502:	fa93 f3a3 	rbit	r3, r3
 8008506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800850a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800850e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800851a:	2320      	movs	r3, #32
 800851c:	e004      	b.n	8008528 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800851e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008522:	fab3 f383 	clz	r3, r3
 8008526:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008528:	429a      	cmp	r2, r3
 800852a:	d106      	bne.n	800853a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2200      	movs	r2, #0
 8008532:	2100      	movs	r1, #0
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff fa9d 	bl	8007a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2101      	movs	r1, #1
 8008540:	4618      	mov	r0, r3
 8008542:	f7ff fa81 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008546:	4603      	mov	r3, r0
 8008548:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <HAL_ADC_ConfigChannel+0x222>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2101      	movs	r1, #1
 8008556:	4618      	mov	r0, r3
 8008558:	f7ff fa76 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 800855c:	4603      	mov	r3, r0
 800855e:	0e9b      	lsrs	r3, r3, #26
 8008560:	f003 021f 	and.w	r2, r3, #31
 8008564:	e01e      	b.n	80085a4 <HAL_ADC_ConfigChannel+0x260>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2101      	movs	r1, #1
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff fa6b 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008572:	4603      	mov	r3, r0
 8008574:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008578:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800857c:	fa93 f3a3 	rbit	r3, r3
 8008580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008584:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800858c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008594:	2320      	movs	r3, #32
 8008596:	e004      	b.n	80085a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008598:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800859c:	fab3 f383 	clz	r3, r3
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d105      	bne.n	80085bc <HAL_ADC_ConfigChannel+0x278>
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	0e9b      	lsrs	r3, r3, #26
 80085b6:	f003 031f 	and.w	r3, r3, #31
 80085ba:	e018      	b.n	80085ee <HAL_ADC_ConfigChannel+0x2aa>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085c8:	fa93 f3a3 	rbit	r3, r3
 80085cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80085d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80085d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80085e0:	2320      	movs	r3, #32
 80085e2:	e004      	b.n	80085ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80085e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085e8:	fab3 f383 	clz	r3, r3
 80085ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d106      	bne.n	8008600 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2200      	movs	r2, #0
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7ff fa3a 	bl	8007a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2102      	movs	r1, #2
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff fa1e 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 800860c:	4603      	mov	r3, r0
 800860e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <HAL_ADC_ConfigChannel+0x2e8>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2102      	movs	r1, #2
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fa13 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008622:	4603      	mov	r3, r0
 8008624:	0e9b      	lsrs	r3, r3, #26
 8008626:	f003 021f 	and.w	r2, r3, #31
 800862a:	e01e      	b.n	800866a <HAL_ADC_ConfigChannel+0x326>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2102      	movs	r1, #2
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff fa08 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 8008638:	4603      	mov	r3, r0
 800863a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800863e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008642:	fa93 f3a3 	rbit	r3, r3
 8008646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800864a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800864e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800865a:	2320      	movs	r3, #32
 800865c:	e004      	b.n	8008668 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800865e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008662:	fab3 f383 	clz	r3, r3
 8008666:	b2db      	uxtb	r3, r3
 8008668:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <HAL_ADC_ConfigChannel+0x33e>
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	0e9b      	lsrs	r3, r3, #26
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	e016      	b.n	80086b0 <HAL_ADC_ConfigChannel+0x36c>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800868e:	fa93 f3a3 	rbit	r3, r3
 8008692:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008694:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800869a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80086a2:	2320      	movs	r3, #32
 80086a4:	e004      	b.n	80086b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80086a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086aa:	fab3 f383 	clz	r3, r3
 80086ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d106      	bne.n	80086c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2200      	movs	r2, #0
 80086ba:	2102      	movs	r1, #2
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff f9d9 	bl	8007a74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	2103      	movs	r1, #3
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff f9bd 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <HAL_ADC_ConfigChannel+0x3aa>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2103      	movs	r1, #3
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff f9b2 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 80086e4:	4603      	mov	r3, r0
 80086e6:	0e9b      	lsrs	r3, r3, #26
 80086e8:	f003 021f 	and.w	r2, r3, #31
 80086ec:	e017      	b.n	800871e <HAL_ADC_ConfigChannel+0x3da>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2103      	movs	r1, #3
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff f9a7 	bl	8007a48 <LL_ADC_GetOffsetChannel>
 80086fa:	4603      	mov	r3, r0
 80086fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008700:	fa93 f3a3 	rbit	r3, r3
 8008704:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008708:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800870a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008710:	2320      	movs	r3, #32
 8008712:	e003      	b.n	800871c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008716:	fab3 f383 	clz	r3, r3
 800871a:	b2db      	uxtb	r3, r3
 800871c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008726:	2b00      	cmp	r3, #0
 8008728:	d105      	bne.n	8008736 <HAL_ADC_ConfigChannel+0x3f2>
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	0e9b      	lsrs	r3, r3, #26
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	e011      	b.n	800875a <HAL_ADC_ConfigChannel+0x416>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800873c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800873e:	fa93 f3a3 	rbit	r3, r3
 8008742:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008746:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800874e:	2320      	movs	r3, #32
 8008750:	e003      	b.n	800875a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008754:	fab3 f383 	clz	r3, r3
 8008758:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800875a:	429a      	cmp	r2, r3
 800875c:	d106      	bne.n	800876c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2200      	movs	r2, #0
 8008764:	2103      	movs	r1, #3
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff f984 	bl	8007a74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fae5 	bl	8007d40 <LL_ADC_IsEnabled>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	f040 813d 	bne.w	80089f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6818      	ldr	r0, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	6819      	ldr	r1, [r3, #0]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	461a      	mov	r2, r3
 800878c:	f7ff fa40 	bl	8007c10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	4aa2      	ldr	r2, [pc, #648]	; (8008a20 <HAL_ADC_ConfigChannel+0x6dc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	f040 812e 	bne.w	80089f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10b      	bne.n	80087c4 <HAL_ADC_ConfigChannel+0x480>
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	0e9b      	lsrs	r3, r3, #26
 80087b2:	3301      	adds	r3, #1
 80087b4:	f003 031f 	and.w	r3, r3, #31
 80087b8:	2b09      	cmp	r3, #9
 80087ba:	bf94      	ite	ls
 80087bc:	2301      	movls	r3, #1
 80087be:	2300      	movhi	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	e019      	b.n	80087f8 <HAL_ADC_ConfigChannel+0x4b4>
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087cc:	fa93 f3a3 	rbit	r3, r3
 80087d0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80087d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80087d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80087dc:	2320      	movs	r3, #32
 80087de:	e003      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80087e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e2:	fab3 f383 	clz	r3, r3
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	3301      	adds	r3, #1
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	bf94      	ite	ls
 80087f2:	2301      	movls	r3, #1
 80087f4:	2300      	movhi	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d079      	beq.n	80088f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008804:	2b00      	cmp	r3, #0
 8008806:	d107      	bne.n	8008818 <HAL_ADC_ConfigChannel+0x4d4>
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	0e9b      	lsrs	r3, r3, #26
 800880e:	3301      	adds	r3, #1
 8008810:	069b      	lsls	r3, r3, #26
 8008812:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008816:	e015      	b.n	8008844 <HAL_ADC_ConfigChannel+0x500>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008820:	fa93 f3a3 	rbit	r3, r3
 8008824:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008828:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800882a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008830:	2320      	movs	r3, #32
 8008832:	e003      	b.n	800883c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008836:	fab3 f383 	clz	r3, r3
 800883a:	b2db      	uxtb	r3, r3
 800883c:	3301      	adds	r3, #1
 800883e:	069b      	lsls	r3, r3, #26
 8008840:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800884c:	2b00      	cmp	r3, #0
 800884e:	d109      	bne.n	8008864 <HAL_ADC_ConfigChannel+0x520>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	0e9b      	lsrs	r3, r3, #26
 8008856:	3301      	adds	r3, #1
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	2101      	movs	r1, #1
 800885e:	fa01 f303 	lsl.w	r3, r1, r3
 8008862:	e017      	b.n	8008894 <HAL_ADC_ConfigChannel+0x550>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800886a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886c:	fa93 f3a3 	rbit	r3, r3
 8008870:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008874:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800887c:	2320      	movs	r3, #32
 800887e:	e003      	b.n	8008888 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008880:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008882:	fab3 f383 	clz	r3, r3
 8008886:	b2db      	uxtb	r3, r3
 8008888:	3301      	adds	r3, #1
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	2101      	movs	r1, #1
 8008890:	fa01 f303 	lsl.w	r3, r1, r3
 8008894:	ea42 0103 	orr.w	r1, r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <HAL_ADC_ConfigChannel+0x576>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	0e9b      	lsrs	r3, r3, #26
 80088aa:	3301      	adds	r3, #1
 80088ac:	f003 021f 	and.w	r2, r3, #31
 80088b0:	4613      	mov	r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	051b      	lsls	r3, r3, #20
 80088b8:	e018      	b.n	80088ec <HAL_ADC_ConfigChannel+0x5a8>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	fa93 f3a3 	rbit	r3, r3
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80088d2:	2320      	movs	r3, #32
 80088d4:	e003      	b.n	80088de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80088d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d8:	fab3 f383 	clz	r3, r3
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	3301      	adds	r3, #1
 80088e0:	f003 021f 	and.w	r2, r3, #31
 80088e4:	4613      	mov	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	4413      	add	r3, r2
 80088ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80088ec:	430b      	orrs	r3, r1
 80088ee:	e07e      	b.n	80089ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <HAL_ADC_ConfigChannel+0x5c8>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0e9b      	lsrs	r3, r3, #26
 8008902:	3301      	adds	r3, #1
 8008904:	069b      	lsls	r3, r3, #26
 8008906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800890a:	e015      	b.n	8008938 <HAL_ADC_ConfigChannel+0x5f4>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	fa93 f3a3 	rbit	r3, r3
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008924:	2320      	movs	r3, #32
 8008926:	e003      	b.n	8008930 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	fab3 f383 	clz	r3, r3
 800892e:	b2db      	uxtb	r3, r3
 8008930:	3301      	adds	r3, #1
 8008932:	069b      	lsls	r3, r3, #26
 8008934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008940:	2b00      	cmp	r3, #0
 8008942:	d109      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x614>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	0e9b      	lsrs	r3, r3, #26
 800894a:	3301      	adds	r3, #1
 800894c:	f003 031f 	and.w	r3, r3, #31
 8008950:	2101      	movs	r1, #1
 8008952:	fa01 f303 	lsl.w	r3, r1, r3
 8008956:	e017      	b.n	8008988 <HAL_ADC_ConfigChannel+0x644>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	fa93 f3a3 	rbit	r3, r3
 8008964:	61fb      	str	r3, [r7, #28]
  return result;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008970:	2320      	movs	r3, #32
 8008972:	e003      	b.n	800897c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	fab3 f383 	clz	r3, r3
 800897a:	b2db      	uxtb	r3, r3
 800897c:	3301      	adds	r3, #1
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	2101      	movs	r1, #1
 8008984:	fa01 f303 	lsl.w	r3, r1, r3
 8008988:	ea42 0103 	orr.w	r1, r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10d      	bne.n	80089b4 <HAL_ADC_ConfigChannel+0x670>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	0e9b      	lsrs	r3, r3, #26
 800899e:	3301      	adds	r3, #1
 80089a0:	f003 021f 	and.w	r2, r3, #31
 80089a4:	4613      	mov	r3, r2
 80089a6:	005b      	lsls	r3, r3, #1
 80089a8:	4413      	add	r3, r2
 80089aa:	3b1e      	subs	r3, #30
 80089ac:	051b      	lsls	r3, r3, #20
 80089ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089b2:	e01b      	b.n	80089ec <HAL_ADC_ConfigChannel+0x6a8>
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	fa93 f3a3 	rbit	r3, r3
 80089c0:	613b      	str	r3, [r7, #16]
  return result;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80089cc:	2320      	movs	r3, #32
 80089ce:	e003      	b.n	80089d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	fab3 f383 	clz	r3, r3
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	3301      	adds	r3, #1
 80089da:	f003 021f 	and.w	r2, r3, #31
 80089de:	4613      	mov	r3, r2
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	4413      	add	r3, r2
 80089e4:	3b1e      	subs	r3, #30
 80089e6:	051b      	lsls	r3, r3, #20
 80089e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80089ec:	430b      	orrs	r3, r1
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	6892      	ldr	r2, [r2, #8]
 80089f2:	4619      	mov	r1, r3
 80089f4:	f7ff f8e1 	bl	8007bba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_ADC_ConfigChannel+0x6e0>)
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 80be 	beq.w	8008b82 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a0e:	d004      	beq.n	8008a1a <HAL_ADC_ConfigChannel+0x6d6>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a04      	ldr	r2, [pc, #16]	; (8008a28 <HAL_ADC_ConfigChannel+0x6e4>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d10a      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x6ec>
 8008a1a:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <HAL_ADC_ConfigChannel+0x6e8>)
 8008a1c:	e009      	b.n	8008a32 <HAL_ADC_ConfigChannel+0x6ee>
 8008a1e:	bf00      	nop
 8008a20:	407f0000 	.word	0x407f0000
 8008a24:	80080000 	.word	0x80080000
 8008a28:	50000100 	.word	0x50000100
 8008a2c:	50000300 	.word	0x50000300
 8008a30:	4b59      	ldr	r3, [pc, #356]	; (8008b98 <HAL_ADC_ConfigChannel+0x854>)
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe ffd6 	bl	80079e4 <LL_ADC_GetCommonPathInternalCh>
 8008a38:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a56      	ldr	r2, [pc, #344]	; (8008b9c <HAL_ADC_ConfigChannel+0x858>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_ADC_ConfigChannel+0x70c>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a55      	ldr	r2, [pc, #340]	; (8008ba0 <HAL_ADC_ConfigChannel+0x85c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d13a      	bne.n	8008ac6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008a50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d134      	bne.n	8008ac6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a64:	d005      	beq.n	8008a72 <HAL_ADC_ConfigChannel+0x72e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a4e      	ldr	r2, [pc, #312]	; (8008ba4 <HAL_ADC_ConfigChannel+0x860>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	f040 8085 	bne.w	8008b7c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a7a:	d004      	beq.n	8008a86 <HAL_ADC_ConfigChannel+0x742>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a49      	ldr	r2, [pc, #292]	; (8008ba8 <HAL_ADC_ConfigChannel+0x864>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d101      	bne.n	8008a8a <HAL_ADC_ConfigChannel+0x746>
 8008a86:	4a49      	ldr	r2, [pc, #292]	; (8008bac <HAL_ADC_ConfigChannel+0x868>)
 8008a88:	e000      	b.n	8008a8c <HAL_ADC_ConfigChannel+0x748>
 8008a8a:	4a43      	ldr	r2, [pc, #268]	; (8008b98 <HAL_ADC_ConfigChannel+0x854>)
 8008a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a94:	4619      	mov	r1, r3
 8008a96:	4610      	mov	r0, r2
 8008a98:	f7fe ff91 	bl	80079be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008a9c:	4b44      	ldr	r3, [pc, #272]	; (8008bb0 <HAL_ADC_ConfigChannel+0x86c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	099b      	lsrs	r3, r3, #6
 8008aa2:	4a44      	ldr	r2, [pc, #272]	; (8008bb4 <HAL_ADC_ConfigChannel+0x870>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	099b      	lsrs	r3, r3, #6
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	4613      	mov	r3, r2
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008ab6:	e002      	b.n	8008abe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3b01      	subs	r3, #1
 8008abc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1f9      	bne.n	8008ab8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ac4:	e05a      	b.n	8008b7c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3b      	ldr	r2, [pc, #236]	; (8008bb8 <HAL_ADC_ConfigChannel+0x874>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d125      	bne.n	8008b1c <HAL_ADC_ConfigChannel+0x7d8>
 8008ad0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008ad4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d11f      	bne.n	8008b1c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a31      	ldr	r2, [pc, #196]	; (8008ba8 <HAL_ADC_ConfigChannel+0x864>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d104      	bne.n	8008af0 <HAL_ADC_ConfigChannel+0x7ac>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a34      	ldr	r2, [pc, #208]	; (8008bbc <HAL_ADC_ConfigChannel+0x878>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d047      	beq.n	8008b80 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008af8:	d004      	beq.n	8008b04 <HAL_ADC_ConfigChannel+0x7c0>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a2a      	ldr	r2, [pc, #168]	; (8008ba8 <HAL_ADC_ConfigChannel+0x864>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d101      	bne.n	8008b08 <HAL_ADC_ConfigChannel+0x7c4>
 8008b04:	4a29      	ldr	r2, [pc, #164]	; (8008bac <HAL_ADC_ConfigChannel+0x868>)
 8008b06:	e000      	b.n	8008b0a <HAL_ADC_ConfigChannel+0x7c6>
 8008b08:	4a23      	ldr	r2, [pc, #140]	; (8008b98 <HAL_ADC_ConfigChannel+0x854>)
 8008b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f7fe ff52 	bl	80079be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b1a:	e031      	b.n	8008b80 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <HAL_ADC_ConfigChannel+0x87c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d12d      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d127      	bne.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_ADC_ConfigChannel+0x864>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d022      	beq.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b44:	d004      	beq.n	8008b50 <HAL_ADC_ConfigChannel+0x80c>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <HAL_ADC_ConfigChannel+0x864>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d101      	bne.n	8008b54 <HAL_ADC_ConfigChannel+0x810>
 8008b50:	4a16      	ldr	r2, [pc, #88]	; (8008bac <HAL_ADC_ConfigChannel+0x868>)
 8008b52:	e000      	b.n	8008b56 <HAL_ADC_ConfigChannel+0x812>
 8008b54:	4a10      	ldr	r2, [pc, #64]	; (8008b98 <HAL_ADC_ConfigChannel+0x854>)
 8008b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008b5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4610      	mov	r0, r2
 8008b62:	f7fe ff2c 	bl	80079be <LL_ADC_SetCommonPathInternalCh>
 8008b66:	e00c      	b.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6c:	f043 0220 	orr.w	r2, r3, #32
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008b7a:	e002      	b.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008b7c:	bf00      	nop
 8008b7e:	e000      	b.n	8008b82 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008b80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	37d8      	adds	r7, #216	; 0xd8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	50000700 	.word	0x50000700
 8008b9c:	c3210000 	.word	0xc3210000
 8008ba0:	90c00010 	.word	0x90c00010
 8008ba4:	50000600 	.word	0x50000600
 8008ba8:	50000100 	.word	0x50000100
 8008bac:	50000300 	.word	0x50000300
 8008bb0:	20000004 	.word	0x20000004
 8008bb4:	053e2d63 	.word	0x053e2d63
 8008bb8:	c7520000 	.word	0xc7520000
 8008bbc:	50000500 	.word	0x50000500
 8008bc0:	cb840000 	.word	0xcb840000

08008bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff f8b5 	bl	8007d40 <LL_ADC_IsEnabled>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d14d      	bne.n	8008c78 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689a      	ldr	r2, [r3, #8]
 8008be2:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <ADC_Enable+0xc0>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00d      	beq.n	8008c06 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bee:	f043 0210 	orr.w	r2, r3, #16
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bfa:	f043 0201 	orr.w	r2, r3, #1
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e039      	b.n	8008c7a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff f884 	bl	8007d18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008c10:	f7fe fe94 	bl	800793c <HAL_GetTick>
 8008c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c16:	e028      	b.n	8008c6a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff f88f 	bl	8007d40 <LL_ADC_IsEnabled>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff f873 	bl	8007d18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008c32:	f7fe fe83 	bl	800793c <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d914      	bls.n	8008c6a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d00d      	beq.n	8008c6a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c52:	f043 0210 	orr.w	r2, r3, #16
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c5e:	f043 0201 	orr.w	r2, r3, #1
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e007      	b.n	8008c7a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d1cf      	bne.n	8008c18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	8000003f 	.word	0x8000003f

08008c88 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d14b      	bne.n	8008d3a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d021      	beq.n	8008d00 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fe ff3b 	bl	8007b3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d032      	beq.n	8008d32 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d12b      	bne.n	8008d32 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d11f      	bne.n	8008d32 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf6:	f043 0201 	orr.w	r2, r3, #1
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cfe:	e018      	b.n	8008d32 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d111      	bne.n	8008d32 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d2a:	f043 0201 	orr.w	r2, r3, #1
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7ff fae8 	bl	8008308 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008d38:	e00e      	b.n	8008d58 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d3e:	f003 0310 	and.w	r3, r3, #16
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f7ff faf2 	bl	8008330 <HAL_ADC_ErrorCallback>
}
 8008d4c:	e004      	b.n	8008d58 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
}
 8008d58:	bf00      	nop
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff fad4 	bl	800831c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d74:	bf00      	nop
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9a:	f043 0204 	orr.w	r2, r3, #4
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f7ff fac4 	bl	8008330 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <__NVIC_SetPriorityGrouping+0x44>)
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008dcc:	4013      	ands	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008de2:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <__NVIC_SetPriorityGrouping+0x44>)
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	60d3      	str	r3, [r2, #12]
}
 8008de8:	bf00      	nop
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	e000ed00 	.word	0xe000ed00

08008df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008dfc:	4b04      	ldr	r3, [pc, #16]	; (8008e10 <__NVIC_GetPriorityGrouping+0x18>)
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	0a1b      	lsrs	r3, r3, #8
 8008e02:	f003 0307 	and.w	r3, r3, #7
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	e000ed00 	.word	0xe000ed00

08008e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	db0b      	blt.n	8008e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e26:	79fb      	ldrb	r3, [r7, #7]
 8008e28:	f003 021f 	and.w	r2, r3, #31
 8008e2c:	4907      	ldr	r1, [pc, #28]	; (8008e4c <__NVIC_EnableIRQ+0x38>)
 8008e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	2001      	movs	r0, #1
 8008e36:	fa00 f202 	lsl.w	r2, r0, r2
 8008e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008e3e:	bf00      	nop
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	e000e100 	.word	0xe000e100

08008e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	db0a      	blt.n	8008e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	490c      	ldr	r1, [pc, #48]	; (8008e9c <__NVIC_SetPriority+0x4c>)
 8008e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e6e:	0112      	lsls	r2, r2, #4
 8008e70:	b2d2      	uxtb	r2, r2
 8008e72:	440b      	add	r3, r1
 8008e74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008e78:	e00a      	b.n	8008e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	4908      	ldr	r1, [pc, #32]	; (8008ea0 <__NVIC_SetPriority+0x50>)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	f003 030f 	and.w	r3, r3, #15
 8008e86:	3b04      	subs	r3, #4
 8008e88:	0112      	lsls	r2, r2, #4
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	761a      	strb	r2, [r3, #24]
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	e000e100 	.word	0xe000e100
 8008ea0:	e000ed00 	.word	0xe000ed00

08008ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f1c3 0307 	rsb	r3, r3, #7
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	bf28      	it	cs
 8008ec2:	2304      	movcs	r3, #4
 8008ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	2b06      	cmp	r3, #6
 8008ecc:	d902      	bls.n	8008ed4 <NVIC_EncodePriority+0x30>
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3b03      	subs	r3, #3
 8008ed2:	e000      	b.n	8008ed6 <NVIC_EncodePriority+0x32>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	43da      	mvns	r2, r3
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	401a      	ands	r2, r3
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008eec:	f04f 31ff 	mov.w	r1, #4294967295
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef6:	43d9      	mvns	r1, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008efc:	4313      	orrs	r3, r2
         );
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3724      	adds	r7, #36	; 0x24
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b082      	sub	sp, #8
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7ff ff4c 	bl	8008db0 <__NVIC_SetPriorityGrouping>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008f2e:	f7ff ff63 	bl	8008df8 <__NVIC_GetPriorityGrouping>
 8008f32:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	6978      	ldr	r0, [r7, #20]
 8008f3a:	f7ff ffb3 	bl	8008ea4 <NVIC_EncodePriority>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f44:	4611      	mov	r1, r2
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff ff82 	bl	8008e50 <__NVIC_SetPriority>
}
 8008f4c:	bf00      	nop
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff ff56 	bl	8008e14 <__NVIC_EnableIRQ>
}
 8008f68:	bf00      	nop
 8008f6a:	3708      	adds	r7, #8
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e08d      	b.n	800909e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	4b47      	ldr	r3, [pc, #284]	; (80090a8 <HAL_DMA_Init+0x138>)
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d80f      	bhi.n	8008fae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	4b45      	ldr	r3, [pc, #276]	; (80090ac <HAL_DMA_Init+0x13c>)
 8008f96:	4413      	add	r3, r2
 8008f98:	4a45      	ldr	r2, [pc, #276]	; (80090b0 <HAL_DMA_Init+0x140>)
 8008f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f9e:	091b      	lsrs	r3, r3, #4
 8008fa0:	009a      	lsls	r2, r3, #2
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a42      	ldr	r2, [pc, #264]	; (80090b4 <HAL_DMA_Init+0x144>)
 8008faa:	641a      	str	r2, [r3, #64]	; 0x40
 8008fac:	e00e      	b.n	8008fcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	4b40      	ldr	r3, [pc, #256]	; (80090b8 <HAL_DMA_Init+0x148>)
 8008fb6:	4413      	add	r3, r2
 8008fb8:	4a3d      	ldr	r2, [pc, #244]	; (80090b0 <HAL_DMA_Init+0x140>)
 8008fba:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbe:	091b      	lsrs	r3, r3, #4
 8008fc0:	009a      	lsls	r2, r3, #2
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a3c      	ldr	r2, [pc, #240]	; (80090bc <HAL_DMA_Init+0x14c>)
 8008fca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4313      	orrs	r3, r2
 8009014:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa76 	bl	8009510 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800902c:	d102      	bne.n	8009034 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800903c:	b2d2      	uxtb	r2, r2
 800903e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009048:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d010      	beq.n	8009074 <HAL_DMA_Init+0x104>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d80c      	bhi.n	8009074 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fa96 	bl	800958c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009070:	605a      	str	r2, [r3, #4]
 8009072:	e008      	b.n	8009086 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	40020407 	.word	0x40020407
 80090ac:	bffdfff8 	.word	0xbffdfff8
 80090b0:	cccccccd 	.word	0xcccccccd
 80090b4:	40020000 	.word	0x40020000
 80090b8:	bffdfbf8 	.word	0xbffdfbf8
 80090bc:	40020400 	.word	0x40020400

080090c0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
 80090cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_DMA_Start_IT+0x20>
 80090dc:	2302      	movs	r3, #2
 80090de:	e066      	b.n	80091ae <HAL_DMA_Start_IT+0xee>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d155      	bne.n	80091a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0201 	bic.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	68b9      	ldr	r1, [r7, #8]
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f9bb 	bl	8009494 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009122:	2b00      	cmp	r3, #0
 8009124:	d008      	beq.n	8009138 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 020e 	orr.w	r2, r2, #14
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e00f      	b.n	8009158 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f022 0204 	bic.w	r2, r2, #4
 8009146:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f042 020a 	orr.w	r2, r2, #10
 8009156:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009174:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917a:	2b00      	cmp	r3, #0
 800917c:	d007      	beq.n	800918e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800918c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f042 0201 	orr.w	r2, r2, #1
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e005      	b.n	80091ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80091a8:	2302      	movs	r3, #2
 80091aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80091b6:	b480      	push	{r7}
 80091b8:	b085      	sub	sp, #20
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d005      	beq.n	80091da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2204      	movs	r2, #4
 80091d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	73fb      	strb	r3, [r7, #15]
 80091d8:	e037      	b.n	800924a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 020e 	bic.w	r2, r2, #14
 80091e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 0201 	bic.w	r2, r2, #1
 8009208:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920e:	f003 021f 	and.w	r2, r3, #31
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009216:	2101      	movs	r1, #1
 8009218:	fa01 f202 	lsl.w	r2, r1, r2
 800921c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009226:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00c      	beq.n	800924a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800923e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009248:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b02      	cmp	r3, #2
 800927e:	d00d      	beq.n	800929c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2204      	movs	r2, #4
 8009284:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	e047      	b.n	800932c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 020e 	bic.w	r2, r2, #14
 80092aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0201 	bic.w	r2, r2, #1
 80092ba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80092ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d0:	f003 021f 	and.w	r2, r3, #31
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d8:	2101      	movs	r1, #1
 80092da:	fa01 f202 	lsl.w	r2, r1, r2
 80092de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80092e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009300:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800930a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
    }
  }
  return status;
 800932c:	7bfb      	ldrb	r3, [r7, #15]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b084      	sub	sp, #16
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	2204      	movs	r2, #4
 8009358:	409a      	lsls	r2, r3
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4013      	ands	r3, r2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d026      	beq.n	80093b0 <HAL_DMA_IRQHandler+0x7a>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f003 0304 	and.w	r3, r3, #4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d021      	beq.n	80093b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0320 	and.w	r3, r3, #32
 8009376:	2b00      	cmp	r3, #0
 8009378:	d107      	bne.n	800938a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0204 	bic.w	r2, r2, #4
 8009388:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800938e:	f003 021f 	and.w	r2, r3, #31
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	2104      	movs	r1, #4
 8009398:	fa01 f202 	lsl.w	r2, r1, r2
 800939c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d071      	beq.n	800948a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80093ae:	e06c      	b.n	800948a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b4:	f003 031f 	and.w	r3, r3, #31
 80093b8:	2202      	movs	r2, #2
 80093ba:	409a      	lsls	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	4013      	ands	r3, r2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d02e      	beq.n	8009422 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d029      	beq.n	8009422 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10b      	bne.n	80093f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f022 020a 	bic.w	r2, r2, #10
 80093ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f8:	f003 021f 	and.w	r2, r3, #31
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009400:	2102      	movs	r1, #2
 8009402:	fa01 f202 	lsl.w	r2, r1, r2
 8009406:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009414:	2b00      	cmp	r3, #0
 8009416:	d038      	beq.n	800948a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009420:	e033      	b.n	800948a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009426:	f003 031f 	and.w	r3, r3, #31
 800942a:	2208      	movs	r2, #8
 800942c:	409a      	lsls	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4013      	ands	r3, r2
 8009432:	2b00      	cmp	r3, #0
 8009434:	d02a      	beq.n	800948c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f003 0308 	and.w	r3, r3, #8
 800943c:	2b00      	cmp	r3, #0
 800943e:	d025      	beq.n	800948c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f022 020e 	bic.w	r2, r2, #14
 800944e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009454:	f003 021f 	and.w	r2, r3, #31
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945c:	2101      	movs	r1, #1
 800945e:	fa01 f202 	lsl.w	r2, r1, r2
 8009462:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947e:	2b00      	cmp	r3, #0
 8009480:	d004      	beq.n	800948c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800948a:	bf00      	nop
 800948c:	bf00      	nop
}
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80094aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d004      	beq.n	80094be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80094bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c2:	f003 021f 	and.w	r2, r3, #31
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	2101      	movs	r1, #1
 80094cc:	fa01 f202 	lsl.w	r2, r1, r2
 80094d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d108      	bne.n	80094f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80094f2:	e007      	b.n	8009504 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	60da      	str	r2, [r3, #12]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009510:	b480      	push	{r7}
 8009512:	b087      	sub	sp, #28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	4b16      	ldr	r3, [pc, #88]	; (8009578 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009520:	429a      	cmp	r2, r3
 8009522:	d802      	bhi.n	800952a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009524:	4b15      	ldr	r3, [pc, #84]	; (800957c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e001      	b.n	800952e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800952a:	4b15      	ldr	r3, [pc, #84]	; (8009580 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800952c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	b2db      	uxtb	r3, r3
 8009538:	3b08      	subs	r3, #8
 800953a:	4a12      	ldr	r2, [pc, #72]	; (8009584 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800953c:	fba2 2303 	umull	r2, r3, r2, r3
 8009540:	091b      	lsrs	r3, r3, #4
 8009542:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009548:	089b      	lsrs	r3, r3, #2
 800954a:	009a      	lsls	r2, r3, #2
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	4413      	add	r3, r2
 8009550:	461a      	mov	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a0b      	ldr	r2, [pc, #44]	; (8009588 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800955a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2201      	movs	r2, #1
 8009564:	409a      	lsls	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	651a      	str	r2, [r3, #80]	; 0x50
}
 800956a:	bf00      	nop
 800956c:	371c      	adds	r7, #28
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	40020407 	.word	0x40020407
 800957c:	40020800 	.word	0x40020800
 8009580:	40020820 	.word	0x40020820
 8009584:	cccccccd 	.word	0xcccccccd
 8009588:	40020880 	.word	0x40020880

0800958c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	461a      	mov	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a08      	ldr	r2, [pc, #32]	; (80095d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80095ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	f003 031f 	and.w	r3, r3, #31
 80095b8:	2201      	movs	r2, #1
 80095ba:	409a      	lsls	r2, r3
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80095c0:	bf00      	nop
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	1000823f 	.word	0x1000823f
 80095d0:	40020940 	.word	0x40020940

080095d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80095de:	2300      	movs	r3, #0
 80095e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80095e2:	e15a      	b.n	800989a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	2101      	movs	r1, #1
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	fa01 f303 	lsl.w	r3, r1, r3
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f000 814c 	beq.w	8009894 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f003 0303 	and.w	r3, r3, #3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d005      	beq.n	8009614 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009610:	2b02      	cmp	r3, #2
 8009612:	d130      	bne.n	8009676 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	2203      	movs	r2, #3
 8009620:	fa02 f303 	lsl.w	r3, r2, r3
 8009624:	43db      	mvns	r3, r3
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4013      	ands	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	fa02 f303 	lsl.w	r3, r2, r3
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	4313      	orrs	r3, r2
 800963c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800964a:	2201      	movs	r2, #1
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	fa02 f303 	lsl.w	r3, r2, r3
 8009652:	43db      	mvns	r3, r3
 8009654:	693a      	ldr	r2, [r7, #16]
 8009656:	4013      	ands	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	091b      	lsrs	r3, r3, #4
 8009660:	f003 0201 	and.w	r2, r3, #1
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	fa02 f303 	lsl.w	r3, r2, r3
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f003 0303 	and.w	r3, r3, #3
 800967e:	2b03      	cmp	r3, #3
 8009680:	d017      	beq.n	80096b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	005b      	lsls	r3, r3, #1
 800968c:	2203      	movs	r2, #3
 800968e:	fa02 f303 	lsl.w	r3, r2, r3
 8009692:	43db      	mvns	r3, r3
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4013      	ands	r3, r2
 8009698:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689a      	ldr	r2, [r3, #8]
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	005b      	lsls	r3, r3, #1
 80096a2:	fa02 f303 	lsl.w	r3, r2, r3
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f003 0303 	and.w	r3, r3, #3
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d123      	bne.n	8009706 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	08da      	lsrs	r2, r3, #3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	3208      	adds	r2, #8
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	220f      	movs	r2, #15
 80096d6:	fa02 f303 	lsl.w	r3, r2, r3
 80096da:	43db      	mvns	r3, r3
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4013      	ands	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	691a      	ldr	r2, [r3, #16]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	08da      	lsrs	r2, r3, #3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3208      	adds	r2, #8
 8009700:	6939      	ldr	r1, [r7, #16]
 8009702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	005b      	lsls	r3, r3, #1
 8009710:	2203      	movs	r2, #3
 8009712:	fa02 f303 	lsl.w	r3, r2, r3
 8009716:	43db      	mvns	r3, r3
 8009718:	693a      	ldr	r2, [r7, #16]
 800971a:	4013      	ands	r3, r2
 800971c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f003 0203 	and.w	r2, r3, #3
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	005b      	lsls	r3, r3, #1
 800972a:	fa02 f303 	lsl.w	r3, r2, r3
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	4313      	orrs	r3, r2
 8009732:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	693a      	ldr	r2, [r7, #16]
 8009738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 80a6 	beq.w	8009894 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009748:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <HAL_GPIO_Init+0x2e4>)
 800974a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800974c:	4a5a      	ldr	r2, [pc, #360]	; (80098b8 <HAL_GPIO_Init+0x2e4>)
 800974e:	f043 0301 	orr.w	r3, r3, #1
 8009752:	6613      	str	r3, [r2, #96]	; 0x60
 8009754:	4b58      	ldr	r3, [pc, #352]	; (80098b8 <HAL_GPIO_Init+0x2e4>)
 8009756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009758:	f003 0301 	and.w	r3, r3, #1
 800975c:	60bb      	str	r3, [r7, #8]
 800975e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009760:	4a56      	ldr	r2, [pc, #344]	; (80098bc <HAL_GPIO_Init+0x2e8>)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	089b      	lsrs	r3, r3, #2
 8009766:	3302      	adds	r3, #2
 8009768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800976c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	220f      	movs	r2, #15
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	43db      	mvns	r3, r3
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4013      	ands	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800978a:	d01f      	beq.n	80097cc <HAL_GPIO_Init+0x1f8>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a4c      	ldr	r2, [pc, #304]	; (80098c0 <HAL_GPIO_Init+0x2ec>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d019      	beq.n	80097c8 <HAL_GPIO_Init+0x1f4>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a4b      	ldr	r2, [pc, #300]	; (80098c4 <HAL_GPIO_Init+0x2f0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d013      	beq.n	80097c4 <HAL_GPIO_Init+0x1f0>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a4a      	ldr	r2, [pc, #296]	; (80098c8 <HAL_GPIO_Init+0x2f4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d00d      	beq.n	80097c0 <HAL_GPIO_Init+0x1ec>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a49      	ldr	r2, [pc, #292]	; (80098cc <HAL_GPIO_Init+0x2f8>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d007      	beq.n	80097bc <HAL_GPIO_Init+0x1e8>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a48      	ldr	r2, [pc, #288]	; (80098d0 <HAL_GPIO_Init+0x2fc>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d101      	bne.n	80097b8 <HAL_GPIO_Init+0x1e4>
 80097b4:	2305      	movs	r3, #5
 80097b6:	e00a      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097b8:	2306      	movs	r3, #6
 80097ba:	e008      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097bc:	2304      	movs	r3, #4
 80097be:	e006      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097c0:	2303      	movs	r3, #3
 80097c2:	e004      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097c4:	2302      	movs	r3, #2
 80097c6:	e002      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <HAL_GPIO_Init+0x1fa>
 80097cc:	2300      	movs	r3, #0
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	f002 0203 	and.w	r2, r2, #3
 80097d4:	0092      	lsls	r2, r2, #2
 80097d6:	4093      	lsls	r3, r2
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80097de:	4937      	ldr	r1, [pc, #220]	; (80098bc <HAL_GPIO_Init+0x2e8>)
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	089b      	lsrs	r3, r3, #2
 80097e4:	3302      	adds	r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80097ec:	4b39      	ldr	r3, [pc, #228]	; (80098d4 <HAL_GPIO_Init+0x300>)
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	43db      	mvns	r3, r3
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4013      	ands	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4313      	orrs	r3, r2
 800980e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009810:	4a30      	ldr	r2, [pc, #192]	; (80098d4 <HAL_GPIO_Init+0x300>)
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009816:	4b2f      	ldr	r3, [pc, #188]	; (80098d4 <HAL_GPIO_Init+0x300>)
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	43db      	mvns	r3, r3
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4013      	ands	r3, r2
 8009824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4313      	orrs	r3, r2
 8009838:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800983a:	4a26      	ldr	r2, [pc, #152]	; (80098d4 <HAL_GPIO_Init+0x300>)
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009840:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <HAL_GPIO_Init+0x300>)
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	43db      	mvns	r3, r3
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	4013      	ands	r3, r2
 800984e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009858:	2b00      	cmp	r3, #0
 800985a:	d003      	beq.n	8009864 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800985c:	693a      	ldr	r2, [r7, #16]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4313      	orrs	r3, r2
 8009862:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009864:	4a1b      	ldr	r2, [pc, #108]	; (80098d4 <HAL_GPIO_Init+0x300>)
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800986a:	4b1a      	ldr	r3, [pc, #104]	; (80098d4 <HAL_GPIO_Init+0x300>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	43db      	mvns	r3, r3
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4013      	ands	r3, r2
 8009878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800988e:	4a11      	ldr	r2, [pc, #68]	; (80098d4 <HAL_GPIO_Init+0x300>)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	3301      	adds	r3, #1
 8009898:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	fa22 f303 	lsr.w	r3, r2, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f47f ae9d 	bne.w	80095e4 <HAL_GPIO_Init+0x10>
  }
}
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40021000 	.word	0x40021000
 80098bc:	40010000 	.word	0x40010000
 80098c0:	48000400 	.word	0x48000400
 80098c4:	48000800 	.word	0x48000800
 80098c8:	48000c00 	.word	0x48000c00
 80098cc:	48001000 	.word	0x48001000
 80098d0:	48001400 	.word	0x48001400
 80098d4:	40010400 	.word	0x40010400

080098d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	807b      	strh	r3, [r7, #2]
 80098e4:	4613      	mov	r3, r2
 80098e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80098e8:	787b      	ldrb	r3, [r7, #1]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80098ee:	887a      	ldrh	r2, [r7, #2]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80098f4:	e002      	b.n	80098fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098f6:	887a      	ldrh	r2, [r7, #2]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	460b      	mov	r3, r1
 8009912:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	695b      	ldr	r3, [r3, #20]
 8009918:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800991a:	887a      	ldrh	r2, [r7, #2]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	4013      	ands	r3, r2
 8009920:	041a      	lsls	r2, r3, #16
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	43d9      	mvns	r1, r3
 8009926:	887b      	ldrh	r3, [r7, #2]
 8009928:	400b      	ands	r3, r1
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	619a      	str	r2, [r3, #24]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e081      	b.n	8009a52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009954:	b2db      	uxtb	r3, r3
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f7fc fb92 	bl	800608c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2224      	movs	r2, #36	; 0x24
 800996c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 0201 	bic.w	r2, r2, #1
 800997e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800998c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800999c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d107      	bne.n	80099b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	e006      	b.n	80099c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80099c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d104      	bne.n	80099d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80099f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	691a      	ldr	r2, [r3, #16]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	69d9      	ldr	r1, [r3, #28]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a1a      	ldr	r2, [r3, #32]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3708      	adds	r7, #8
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b088      	sub	sp, #32
 8009a60:	af02      	add	r7, sp, #8
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	4608      	mov	r0, r1
 8009a66:	4611      	mov	r1, r2
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	817b      	strh	r3, [r7, #10]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	813b      	strh	r3, [r7, #8]
 8009a72:	4613      	mov	r3, r2
 8009a74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	f040 80f9 	bne.w	8009c76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a84:	6a3b      	ldr	r3, [r7, #32]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <HAL_I2C_Mem_Write+0x34>
 8009a8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d105      	bne.n	8009a9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0ed      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d101      	bne.n	8009aaa <HAL_I2C_Mem_Write+0x4e>
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	e0e6      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009ab2:	f7fd ff43 	bl	800793c <HAL_GetTick>
 8009ab6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2319      	movs	r3, #25
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fac3 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0d1      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2221      	movs	r2, #33	; 0x21
 8009ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2240      	movs	r2, #64	; 0x40
 8009ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a3a      	ldr	r2, [r7, #32]
 8009aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009af4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009afc:	88f8      	ldrh	r0, [r7, #6]
 8009afe:	893a      	ldrh	r2, [r7, #8]
 8009b00:	8979      	ldrh	r1, [r7, #10]
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f9d3 	bl	8009eb8 <I2C_RequestMemoryWrite>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e0a9      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	2bff      	cmp	r3, #255	; 0xff
 8009b2c:	d90e      	bls.n	8009b4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b38:	b2da      	uxtb	r2, r3
 8009b3a:	8979      	ldrh	r1, [r7, #10]
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b44:	68f8      	ldr	r0, [r7, #12]
 8009b46:	f000 fc2b 	bl	800a3a0 <I2C_TransferConfig>
 8009b4a:	e00f      	b.n	8009b6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b5a:	b2da      	uxtb	r2, r3
 8009b5c:	8979      	ldrh	r1, [r7, #10]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f000 fc1a 	bl	800a3a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 faad 	bl	800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d001      	beq.n	8009b80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e07b      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	781a      	ldrb	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b90:	1c5a      	adds	r2, r3, #1
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d034      	beq.n	8009c24 <HAL_I2C_Mem_Write+0x1c8>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d130      	bne.n	8009c24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2180      	movs	r1, #128	; 0x80
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 fa3f 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e04d      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2bff      	cmp	r3, #255	; 0xff
 8009be4:	d90e      	bls.n	8009c04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	22ff      	movs	r2, #255	; 0xff
 8009bea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	8979      	ldrh	r1, [r7, #10]
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9300      	str	r3, [sp, #0]
 8009bf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fbcf 	bl	800a3a0 <I2C_TransferConfig>
 8009c02:	e00f      	b.n	8009c24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	8979      	ldrh	r1, [r7, #10]
 8009c16:	2300      	movs	r3, #0
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 fbbe 	bl	800a3a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d19e      	bne.n	8009b6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c2e:	697a      	ldr	r2, [r7, #20]
 8009c30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 fa8c 	bl	800a150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e01a      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2220      	movs	r2, #32
 8009c48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	4b0a      	ldr	r3, [pc, #40]	; (8009c80 <HAL_I2C_Mem_Write+0x224>)
 8009c56:	400b      	ands	r3, r1
 8009c58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2220      	movs	r2, #32
 8009c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	e000      	b.n	8009c78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009c76:	2302      	movs	r3, #2
  }
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3718      	adds	r7, #24
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	fe00e800 	.word	0xfe00e800

08009c84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	60f8      	str	r0, [r7, #12]
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	461a      	mov	r2, r3
 8009c92:	4603      	mov	r3, r0
 8009c94:	817b      	strh	r3, [r7, #10]
 8009c96:	460b      	mov	r3, r1
 8009c98:	813b      	strh	r3, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b20      	cmp	r3, #32
 8009ca8:	f040 80fd 	bne.w	8009ea6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cac:	6a3b      	ldr	r3, [r7, #32]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_I2C_Mem_Read+0x34>
 8009cb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d105      	bne.n	8009cc4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0f1      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_I2C_Mem_Read+0x4e>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e0ea      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009cda:	f7fd fe2f 	bl	800793c <HAL_GetTick>
 8009cde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	2319      	movs	r3, #25
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f000 f9af 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d001      	beq.n	8009cfc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e0d5      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2222      	movs	r2, #34	; 0x22
 8009d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2240      	movs	r2, #64	; 0x40
 8009d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2200      	movs	r2, #0
 8009d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d24:	88f8      	ldrh	r0, [r7, #6]
 8009d26:	893a      	ldrh	r2, [r7, #8]
 8009d28:	8979      	ldrh	r1, [r7, #10]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	9301      	str	r3, [sp, #4]
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	9300      	str	r3, [sp, #0]
 8009d32:	4603      	mov	r3, r0
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f913 	bl	8009f60 <I2C_RequestMemoryRead>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d005      	beq.n	8009d4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e0ad      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2bff      	cmp	r3, #255	; 0xff
 8009d54:	d90e      	bls.n	8009d74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	22ff      	movs	r2, #255	; 0xff
 8009d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	8979      	ldrh	r1, [r7, #10]
 8009d64:	4b52      	ldr	r3, [pc, #328]	; (8009eb0 <HAL_I2C_Mem_Read+0x22c>)
 8009d66:	9300      	str	r3, [sp, #0]
 8009d68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d6c:	68f8      	ldr	r0, [r7, #12]
 8009d6e:	f000 fb17 	bl	800a3a0 <I2C_TransferConfig>
 8009d72:	e00f      	b.n	8009d94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	8979      	ldrh	r1, [r7, #10]
 8009d86:	4b4a      	ldr	r3, [pc, #296]	; (8009eb0 <HAL_I2C_Mem_Read+0x22c>)
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	f000 fb06 	bl	800a3a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2104      	movs	r1, #4
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 f956 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e07c      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db8:	b2d2      	uxtb	r2, r2
 8009dba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d034      	beq.n	8009e54 <HAL_I2C_Mem_Read+0x1d0>
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d130      	bne.n	8009e54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	2200      	movs	r2, #0
 8009dfa:	2180      	movs	r1, #128	; 0x80
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f927 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009e02:	4603      	mov	r3, r0
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d001      	beq.n	8009e0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e04d      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	2bff      	cmp	r3, #255	; 0xff
 8009e14:	d90e      	bls.n	8009e34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	22ff      	movs	r2, #255	; 0xff
 8009e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e20:	b2da      	uxtb	r2, r3
 8009e22:	8979      	ldrh	r1, [r7, #10]
 8009e24:	2300      	movs	r3, #0
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 fab7 	bl	800a3a0 <I2C_TransferConfig>
 8009e32:	e00f      	b.n	8009e54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e42:	b2da      	uxtb	r2, r3
 8009e44:	8979      	ldrh	r1, [r7, #10]
 8009e46:	2300      	movs	r3, #0
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 faa6 	bl	800a3a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d19a      	bne.n	8009d94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 f974 	bl	800a150 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e01a      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	2220      	movs	r2, #32
 8009e78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6859      	ldr	r1, [r3, #4]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <HAL_I2C_Mem_Read+0x230>)
 8009e86:	400b      	ands	r3, r1
 8009e88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e000      	b.n	8009ea8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009ea6:	2302      	movs	r3, #2
  }
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	80002400 	.word	0x80002400
 8009eb4:	fe00e800 	.word	0xfe00e800

08009eb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	817b      	strh	r3, [r7, #10]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	813b      	strh	r3, [r7, #8]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009ed2:	88fb      	ldrh	r3, [r7, #6]
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	8979      	ldrh	r1, [r7, #10]
 8009ed8:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <I2C_RequestMemoryWrite+0xa4>)
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fa5d 	bl	800a3a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ee6:	69fa      	ldr	r2, [r7, #28]
 8009ee8:	69b9      	ldr	r1, [r7, #24]
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 f8f0 	bl	800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e02c      	b.n	8009f54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009efa:	88fb      	ldrh	r3, [r7, #6]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d105      	bne.n	8009f0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f00:	893b      	ldrh	r3, [r7, #8]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	629a      	str	r2, [r3, #40]	; 0x28
 8009f0a:	e015      	b.n	8009f38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009f0c:	893b      	ldrh	r3, [r7, #8]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	69b9      	ldr	r1, [r7, #24]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f8d6 	bl	800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e012      	b.n	8009f54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009f2e:	893b      	ldrh	r3, [r7, #8]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2180      	movs	r1, #128	; 0x80
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f884 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	80002000 	.word	0x80002000

08009f60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	4603      	mov	r3, r0
 8009f70:	817b      	strh	r3, [r7, #10]
 8009f72:	460b      	mov	r3, r1
 8009f74:	813b      	strh	r3, [r7, #8]
 8009f76:	4613      	mov	r3, r2
 8009f78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	8979      	ldrh	r1, [r7, #10]
 8009f80:	4b20      	ldr	r3, [pc, #128]	; (800a004 <I2C_RequestMemoryRead+0xa4>)
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	2300      	movs	r3, #0
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fa0a 	bl	800a3a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f8c:	69fa      	ldr	r2, [r7, #28]
 8009f8e:	69b9      	ldr	r1, [r7, #24]
 8009f90:	68f8      	ldr	r0, [r7, #12]
 8009f92:	f000 f89d 	bl	800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e02c      	b.n	8009ffa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fa0:	88fb      	ldrh	r3, [r7, #6]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d105      	bne.n	8009fb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fa6:	893b      	ldrh	r3, [r7, #8]
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	629a      	str	r2, [r3, #40]	; 0x28
 8009fb0:	e015      	b.n	8009fde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009fb2:	893b      	ldrh	r3, [r7, #8]
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	b2da      	uxtb	r2, r3
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fc0:	69fa      	ldr	r2, [r7, #28]
 8009fc2:	69b9      	ldr	r1, [r7, #24]
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 f883 	bl	800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e012      	b.n	8009ffa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009fd4:	893b      	ldrh	r3, [r7, #8]
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	2140      	movs	r1, #64	; 0x40
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f000 f831 	bl	800a050 <I2C_WaitOnFlagUntilTimeout>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	e000      	b.n	8009ffa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	80002000 	.word	0x80002000

0800a008 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f003 0302 	and.w	r3, r3, #2
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d103      	bne.n	800a026 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b01      	cmp	r3, #1
 800a032:	d007      	beq.n	800a044 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f042 0201 	orr.w	r2, r2, #1
 800a042:	619a      	str	r2, [r3, #24]
  }
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a060:	e022      	b.n	800a0a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a068:	d01e      	beq.n	800a0a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a06a:	f7fd fc67 	bl	800793c <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	429a      	cmp	r2, r3
 800a078:	d302      	bcc.n	800a080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d113      	bne.n	800a0a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a084:	f043 0220 	orr.w	r2, r3, #32
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e00f      	b.n	800a0c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	bf0c      	ite	eq
 800a0b8:	2301      	moveq	r3, #1
 800a0ba:	2300      	movne	r3, #0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	461a      	mov	r2, r3
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d0cd      	beq.n	800a062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a0dc:	e02c      	b.n	800a138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 f870 	bl	800a1c8 <I2C_IsErrorOccurred>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e02a      	b.n	800a148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f8:	d01e      	beq.n	800a138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fa:	f7fd fc1f 	bl	800793c <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	68ba      	ldr	r2, [r7, #8]
 800a106:	429a      	cmp	r2, r3
 800a108:	d302      	bcc.n	800a110 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d113      	bne.n	800a138 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a114:	f043 0220 	orr.w	r2, r3, #32
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2220      	movs	r2, #32
 800a120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e007      	b.n	800a148 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b02      	cmp	r3, #2
 800a144:	d1cb      	bne.n	800a0de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a15c:	e028      	b.n	800a1b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 f830 	bl	800a1c8 <I2C_IsErrorOccurred>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e026      	b.n	800a1c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7fd fbe3 	bl	800793c <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d113      	bne.n	800a1b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	f043 0220 	orr.w	r2, r3, #32
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e007      	b.n	800a1c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b20      	cmp	r3, #32
 800a1bc:	d1cf      	bne.n	800a15e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3710      	adds	r7, #16
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08a      	sub	sp, #40	; 0x28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	f003 0310 	and.w	r3, r3, #16
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d075      	beq.n	800a2e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2210      	movs	r2, #16
 800a1fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1fc:	e056      	b.n	800a2ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a204:	d052      	beq.n	800a2ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a206:	f7fd fb99 	bl	800793c <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <I2C_IsErrorOccurred+0x54>
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d147      	bne.n	800a2ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a22e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a23a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a23e:	d12e      	bne.n	800a29e <I2C_IsErrorOccurred+0xd6>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a246:	d02a      	beq.n	800a29e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a248:	7cfb      	ldrb	r3, [r7, #19]
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	d027      	beq.n	800a29e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a25c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a25e:	f7fd fb6d 	bl	800793c <HAL_GetTick>
 800a262:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a264:	e01b      	b.n	800a29e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a266:	f7fd fb69 	bl	800793c <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b19      	cmp	r3, #25
 800a272:	d914      	bls.n	800a29e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a278:	f043 0220 	orr.w	r2, r3, #32
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2220      	movs	r2, #32
 800a284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f003 0320 	and.w	r3, r3, #32
 800a2a8:	2b20      	cmp	r3, #32
 800a2aa:	d1dc      	bne.n	800a266 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	f003 0320 	and.w	r3, r3, #32
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d003      	beq.n	800a2c2 <I2C_IsErrorOccurred+0xfa>
 800a2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d09d      	beq.n	800a1fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d103      	bne.n	800a2d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	f043 0304 	orr.w	r3, r3, #4
 800a2d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00b      	beq.n	800a30a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	f043 0301 	orr.w	r3, r3, #1
 800a2f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a302:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	f043 0308 	orr.w	r3, r3, #8
 800a31a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a324:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00b      	beq.n	800a34e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	f043 0302 	orr.w	r3, r3, #2
 800a33c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a34e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a352:	2b00      	cmp	r3, #0
 800a354:	d01c      	beq.n	800a390 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f7ff fe56 	bl	800a008 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <I2C_IsErrorOccurred+0x1d4>)
 800a368:	400b      	ands	r3, r1
 800a36a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	431a      	orrs	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a394:	4618      	mov	r0, r3
 800a396:	3728      	adds	r7, #40	; 0x28
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	fe00e800 	.word	0xfe00e800

0800a3a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	607b      	str	r3, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	817b      	strh	r3, [r7, #10]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3b2:	897b      	ldrh	r3, [r7, #10]
 800a3b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3b8:	7a7b      	ldrb	r3, [r7, #9]
 800a3ba:	041b      	lsls	r3, r3, #16
 800a3bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	685a      	ldr	r2, [r3, #4]
 800a3d6:	6a3b      	ldr	r3, [r7, #32]
 800a3d8:	0d5b      	lsrs	r3, r3, #21
 800a3da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <I2C_TransferConfig+0x60>)
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	43db      	mvns	r3, r3
 800a3e4:	ea02 0103 	and.w	r1, r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a3f2:	bf00      	nop
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	03ff63ff 	.word	0x03ff63ff

0800a404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b20      	cmp	r3, #32
 800a418:	d138      	bne.n	800a48c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a420:	2b01      	cmp	r3, #1
 800a422:	d101      	bne.n	800a428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a424:	2302      	movs	r3, #2
 800a426:	e032      	b.n	800a48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2224      	movs	r2, #36	; 0x24
 800a434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f022 0201 	bic.w	r2, r2, #1
 800a446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6819      	ldr	r1, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	430a      	orrs	r2, r1
 800a466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0201 	orr.w	r2, r2, #1
 800a476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	e000      	b.n	800a48e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a48c:	2302      	movs	r3, #2
  }
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b085      	sub	sp, #20
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	2b20      	cmp	r3, #32
 800a4ae:	d139      	bne.n	800a524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d101      	bne.n	800a4be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4ba:	2302      	movs	r3, #2
 800a4bc:	e033      	b.n	800a526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2224      	movs	r2, #36	; 0x24
 800a4ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f022 0201 	bic.w	r2, r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f042 0201 	orr.w	r2, r2, #1
 800a50e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e000      	b.n	800a526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a524:	2302      	movs	r3, #2
  }
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d141      	bne.n	800a5c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a542:	4b4b      	ldr	r3, [pc, #300]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a54a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a54e:	d131      	bne.n	800a5b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a550:	4b47      	ldr	r3, [pc, #284]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a556:	4a46      	ldr	r2, [pc, #280]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a558:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a55c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a560:	4b43      	ldr	r3, [pc, #268]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a568:	4a41      	ldr	r2, [pc, #260]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a56a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a56e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a570:	4b40      	ldr	r3, [pc, #256]	; (800a674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2232      	movs	r2, #50	; 0x32
 800a576:	fb02 f303 	mul.w	r3, r2, r3
 800a57a:	4a3f      	ldr	r2, [pc, #252]	; (800a678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a57c:	fba2 2303 	umull	r2, r3, r2, r3
 800a580:	0c9b      	lsrs	r3, r3, #18
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a586:	e002      	b.n	800a58e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a58e:	4b38      	ldr	r3, [pc, #224]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a590:	695b      	ldr	r3, [r3, #20]
 800a592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a59a:	d102      	bne.n	800a5a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f2      	bne.n	800a588 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a5a2:	4b33      	ldr	r3, [pc, #204]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5a4:	695b      	ldr	r3, [r3, #20]
 800a5a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ae:	d158      	bne.n	800a662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	e057      	b.n	800a664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a5b4:	4b2e      	ldr	r3, [pc, #184]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ba:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a5c4:	e04d      	b.n	800a662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5cc:	d141      	bne.n	800a652 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a5ce:	4b28      	ldr	r3, [pc, #160]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5da:	d131      	bne.n	800a640 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a5dc:	4b24      	ldr	r3, [pc, #144]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5e2:	4a23      	ldr	r2, [pc, #140]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5ec:	4b20      	ldr	r3, [pc, #128]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a5f4:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a5f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a5fc:	4b1d      	ldr	r3, [pc, #116]	; (800a674 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2232      	movs	r2, #50	; 0x32
 800a602:	fb02 f303 	mul.w	r3, r2, r3
 800a606:	4a1c      	ldr	r2, [pc, #112]	; (800a678 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a608:	fba2 2303 	umull	r2, r3, r2, r3
 800a60c:	0c9b      	lsrs	r3, r3, #18
 800a60e:	3301      	adds	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a612:	e002      	b.n	800a61a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	3b01      	subs	r3, #1
 800a618:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a61a:	4b15      	ldr	r3, [pc, #84]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a626:	d102      	bne.n	800a62e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1f2      	bne.n	800a614 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a62e:	4b10      	ldr	r3, [pc, #64]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a63a:	d112      	bne.n	800a662 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e011      	b.n	800a664 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a640:	4b0b      	ldr	r3, [pc, #44]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a642:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a646:	4a0a      	ldr	r2, [pc, #40]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a64c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a650:	e007      	b.n	800a662 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a652:	4b07      	ldr	r3, [pc, #28]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a65a:	4a05      	ldr	r2, [pc, #20]	; (800a670 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a65c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a660:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr
 800a670:	40007000 	.word	0x40007000
 800a674:	20000004 	.word	0x20000004
 800a678:	431bde83 	.word	0x431bde83

0800a67c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e306      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f003 0301 	and.w	r3, r3, #1
 800a696:	2b00      	cmp	r3, #0
 800a698:	d075      	beq.n	800a786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a69a:	4b97      	ldr	r3, [pc, #604]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 030c 	and.w	r3, r3, #12
 800a6a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a6a4:	4b94      	ldr	r3, [pc, #592]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0303 	and.w	r3, r3, #3
 800a6ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	2b0c      	cmp	r3, #12
 800a6b2:	d102      	bne.n	800a6ba <HAL_RCC_OscConfig+0x3e>
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d002      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x44>
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d10b      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6c0:	4b8d      	ldr	r3, [pc, #564]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d05b      	beq.n	800a784 <HAL_RCC_OscConfig+0x108>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d157      	bne.n	800a784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	e2e1      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e0:	d106      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x74>
 800a6e2:	4b85      	ldr	r3, [pc, #532]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a84      	ldr	r2, [pc, #528]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a6e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	e01d      	b.n	800a72c <HAL_RCC_OscConfig+0xb0>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6f8:	d10c      	bne.n	800a714 <HAL_RCC_OscConfig+0x98>
 800a6fa:	4b7f      	ldr	r3, [pc, #508]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a7e      	ldr	r2, [pc, #504]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	4b7c      	ldr	r3, [pc, #496]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a7b      	ldr	r2, [pc, #492]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a70c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	e00b      	b.n	800a72c <HAL_RCC_OscConfig+0xb0>
 800a714:	4b78      	ldr	r3, [pc, #480]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	4a77      	ldr	r2, [pc, #476]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a71a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a71e:	6013      	str	r3, [r2, #0]
 800a720:	4b75      	ldr	r3, [pc, #468]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a74      	ldr	r2, [pc, #464]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a72a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d013      	beq.n	800a75c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7fd f902 	bl	800793c <HAL_GetTick>
 800a738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a73c:	f7fd f8fe 	bl	800793c <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b64      	cmp	r3, #100	; 0x64
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e2a6      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a74e:	4b6a      	ldr	r3, [pc, #424]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d0f0      	beq.n	800a73c <HAL_RCC_OscConfig+0xc0>
 800a75a:	e014      	b.n	800a786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75c:	f7fd f8ee 	bl	800793c <HAL_GetTick>
 800a760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a762:	e008      	b.n	800a776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a764:	f7fd f8ea 	bl	800793c <HAL_GetTick>
 800a768:	4602      	mov	r2, r0
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	2b64      	cmp	r3, #100	; 0x64
 800a770:	d901      	bls.n	800a776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a772:	2303      	movs	r3, #3
 800a774:	e292      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a776:	4b60      	ldr	r3, [pc, #384]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d1f0      	bne.n	800a764 <HAL_RCC_OscConfig+0xe8>
 800a782:	e000      	b.n	800a786 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d075      	beq.n	800a87e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a792:	4b59      	ldr	r3, [pc, #356]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f003 030c 	and.w	r3, r3, #12
 800a79a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a79c:	4b56      	ldr	r3, [pc, #344]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f003 0303 	and.w	r3, r3, #3
 800a7a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b0c      	cmp	r3, #12
 800a7aa:	d102      	bne.n	800a7b2 <HAL_RCC_OscConfig+0x136>
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	2b02      	cmp	r3, #2
 800a7b0:	d002      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x13c>
 800a7b2:	69bb      	ldr	r3, [r7, #24]
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d11f      	bne.n	800a7f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7b8:	4b4f      	ldr	r3, [pc, #316]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d005      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x154>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	e265      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d0:	4b49      	ldr	r3, [pc, #292]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691b      	ldr	r3, [r3, #16]
 800a7dc:	061b      	lsls	r3, r3, #24
 800a7de:	4946      	ldr	r1, [pc, #280]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a7e4:	4b45      	ldr	r3, [pc, #276]	; (800a8fc <HAL_RCC_OscConfig+0x280>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f7fc fc5d 	bl	80070a8 <HAL_InitTick>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d043      	beq.n	800a87c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	e251      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d023      	beq.n	800a848 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a800:	4b3d      	ldr	r3, [pc, #244]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a3c      	ldr	r2, [pc, #240]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a80a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a80c:	f7fd f896 	bl	800793c <HAL_GetTick>
 800a810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a812:	e008      	b.n	800a826 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a814:	f7fd f892 	bl	800793c <HAL_GetTick>
 800a818:	4602      	mov	r2, r0
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	1ad3      	subs	r3, r2, r3
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d901      	bls.n	800a826 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a822:	2303      	movs	r3, #3
 800a824:	e23a      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a826:	4b34      	ldr	r3, [pc, #208]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d0f0      	beq.n	800a814 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a832:	4b31      	ldr	r3, [pc, #196]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	061b      	lsls	r3, r3, #24
 800a840:	492d      	ldr	r1, [pc, #180]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a842:	4313      	orrs	r3, r2
 800a844:	604b      	str	r3, [r1, #4]
 800a846:	e01a      	b.n	800a87e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a848:	4b2b      	ldr	r3, [pc, #172]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a2a      	ldr	r2, [pc, #168]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a84e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a854:	f7fd f872 	bl	800793c <HAL_GetTick>
 800a858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a85a:	e008      	b.n	800a86e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a85c:	f7fd f86e 	bl	800793c <HAL_GetTick>
 800a860:	4602      	mov	r2, r0
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d901      	bls.n	800a86e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a86a:	2303      	movs	r3, #3
 800a86c:	e216      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a86e:	4b22      	ldr	r3, [pc, #136]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a876:	2b00      	cmp	r3, #0
 800a878:	d1f0      	bne.n	800a85c <HAL_RCC_OscConfig+0x1e0>
 800a87a:	e000      	b.n	800a87e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a87c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0308 	and.w	r3, r3, #8
 800a886:	2b00      	cmp	r3, #0
 800a888:	d041      	beq.n	800a90e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01c      	beq.n	800a8cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a892:	4b19      	ldr	r3, [pc, #100]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a894:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a898:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a89a:	f043 0301 	orr.w	r3, r3, #1
 800a89e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a2:	f7fd f84b 	bl	800793c <HAL_GetTick>
 800a8a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8a8:	e008      	b.n	800a8bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8aa:	f7fd f847 	bl	800793c <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d901      	bls.n	800a8bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e1ef      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a8be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0ef      	beq.n	800a8aa <HAL_RCC_OscConfig+0x22e>
 800a8ca:	e020      	b.n	800a90e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a8ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8d2:	4a09      	ldr	r2, [pc, #36]	; (800a8f8 <HAL_RCC_OscConfig+0x27c>)
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8dc:	f7fd f82e 	bl	800793c <HAL_GetTick>
 800a8e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a8e2:	e00d      	b.n	800a900 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8e4:	f7fd f82a 	bl	800793c <HAL_GetTick>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d906      	bls.n	800a900 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e1d2      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
 800a8f6:	bf00      	nop
 800a8f8:	40021000 	.word	0x40021000
 800a8fc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a900:	4b8c      	ldr	r3, [pc, #560]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a906:	f003 0302 	and.w	r3, r3, #2
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1ea      	bne.n	800a8e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80a6 	beq.w	800aa68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a91c:	2300      	movs	r3, #0
 800a91e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a920:	4b84      	ldr	r3, [pc, #528]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <HAL_RCC_OscConfig+0x2b4>
 800a92c:	2301      	movs	r3, #1
 800a92e:	e000      	b.n	800a932 <HAL_RCC_OscConfig+0x2b6>
 800a930:	2300      	movs	r3, #0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a936:	4b7f      	ldr	r3, [pc, #508]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a93a:	4a7e      	ldr	r2, [pc, #504]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a93c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a940:	6593      	str	r3, [r2, #88]	; 0x58
 800a942:	4b7c      	ldr	r3, [pc, #496]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a94e:	2301      	movs	r3, #1
 800a950:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a952:	4b79      	ldr	r3, [pc, #484]	; (800ab38 <HAL_RCC_OscConfig+0x4bc>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d118      	bne.n	800a990 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a95e:	4b76      	ldr	r3, [pc, #472]	; (800ab38 <HAL_RCC_OscConfig+0x4bc>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a75      	ldr	r2, [pc, #468]	; (800ab38 <HAL_RCC_OscConfig+0x4bc>)
 800a964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a96a:	f7fc ffe7 	bl	800793c <HAL_GetTick>
 800a96e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a970:	e008      	b.n	800a984 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a972:	f7fc ffe3 	bl	800793c <HAL_GetTick>
 800a976:	4602      	mov	r2, r0
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d901      	bls.n	800a984 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e18b      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a984:	4b6c      	ldr	r3, [pc, #432]	; (800ab38 <HAL_RCC_OscConfig+0x4bc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0f0      	beq.n	800a972 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d108      	bne.n	800a9aa <HAL_RCC_OscConfig+0x32e>
 800a998:	4b66      	ldr	r3, [pc, #408]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a99a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a99e:	4a65      	ldr	r2, [pc, #404]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9a0:	f043 0301 	orr.w	r3, r3, #1
 800a9a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9a8:	e024      	b.n	800a9f4 <HAL_RCC_OscConfig+0x378>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b05      	cmp	r3, #5
 800a9b0:	d110      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x358>
 800a9b2:	4b60      	ldr	r3, [pc, #384]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9b8:	4a5e      	ldr	r2, [pc, #376]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9ba:	f043 0304 	orr.w	r3, r3, #4
 800a9be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9c2:	4b5c      	ldr	r3, [pc, #368]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9c8:	4a5a      	ldr	r2, [pc, #360]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9d2:	e00f      	b.n	800a9f4 <HAL_RCC_OscConfig+0x378>
 800a9d4:	4b57      	ldr	r3, [pc, #348]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	4a56      	ldr	r2, [pc, #344]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9dc:	f023 0301 	bic.w	r3, r3, #1
 800a9e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a9e4:	4b53      	ldr	r3, [pc, #332]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ea:	4a52      	ldr	r2, [pc, #328]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800a9ec:	f023 0304 	bic.w	r3, r3, #4
 800a9f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d016      	beq.n	800aa2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9fc:	f7fc ff9e 	bl	800793c <HAL_GetTick>
 800aa00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa02:	e00a      	b.n	800aa1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa04:	f7fc ff9a 	bl	800793c <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d901      	bls.n	800aa1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e140      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800aa1a:	4b46      	ldr	r3, [pc, #280]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0ed      	beq.n	800aa04 <HAL_RCC_OscConfig+0x388>
 800aa28:	e015      	b.n	800aa56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa2a:	f7fc ff87 	bl	800793c <HAL_GetTick>
 800aa2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa30:	e00a      	b.n	800aa48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa32:	f7fc ff83 	bl	800793c <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d901      	bls.n	800aa48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800aa44:	2303      	movs	r3, #3
 800aa46:	e129      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800aa48:	4b3a      	ldr	r3, [pc, #232]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4e:	f003 0302 	and.w	r3, r3, #2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1ed      	bne.n	800aa32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800aa56:	7ffb      	ldrb	r3, [r7, #31]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d105      	bne.n	800aa68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa5c:	4b35      	ldr	r3, [pc, #212]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa60:	4a34      	ldr	r2, [pc, #208]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d03c      	beq.n	800aaee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d01c      	beq.n	800aab6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa7c:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa82:	4a2c      	ldr	r2, [pc, #176]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aa84:	f043 0301 	orr.w	r3, r3, #1
 800aa88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa8c:	f7fc ff56 	bl	800793c <HAL_GetTick>
 800aa90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aa92:	e008      	b.n	800aaa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa94:	f7fc ff52 	bl	800793c <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d901      	bls.n	800aaa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e0fa      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800aaa6:	4b23      	ldr	r3, [pc, #140]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aaa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0ef      	beq.n	800aa94 <HAL_RCC_OscConfig+0x418>
 800aab4:	e01b      	b.n	800aaee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aab6:	4b1f      	ldr	r3, [pc, #124]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aab8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aabc:	4a1d      	ldr	r2, [pc, #116]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aac6:	f7fc ff39 	bl	800793c <HAL_GetTick>
 800aaca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aacc:	e008      	b.n	800aae0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aace:	f7fc ff35 	bl	800793c <HAL_GetTick>
 800aad2:	4602      	mov	r2, r0
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d901      	bls.n	800aae0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e0dd      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800aae0:	4b14      	ldr	r3, [pc, #80]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aae2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1ef      	bne.n	800aace <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80d1 	beq.w	800ac9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aaf8:	4b0e      	ldr	r3, [pc, #56]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	f003 030c 	and.w	r3, r3, #12
 800ab00:	2b0c      	cmp	r3, #12
 800ab02:	f000 808b 	beq.w	800ac1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d15e      	bne.n	800abcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab0e:	4b09      	ldr	r3, [pc, #36]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a08      	ldr	r2, [pc, #32]	; (800ab34 <HAL_RCC_OscConfig+0x4b8>)
 800ab14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab1a:	f7fc ff0f 	bl	800793c <HAL_GetTick>
 800ab1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab20:	e00c      	b.n	800ab3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab22:	f7fc ff0b 	bl	800793c <HAL_GetTick>
 800ab26:	4602      	mov	r2, r0
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	1ad3      	subs	r3, r2, r3
 800ab2c:	2b02      	cmp	r3, #2
 800ab2e:	d905      	bls.n	800ab3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e0b3      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
 800ab34:	40021000 	.word	0x40021000
 800ab38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ab3c:	4b59      	ldr	r3, [pc, #356]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1ec      	bne.n	800ab22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab48:	4b56      	ldr	r3, [pc, #344]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab4a:	68da      	ldr	r2, [r3, #12]
 800ab4c:	4b56      	ldr	r3, [pc, #344]	; (800aca8 <HAL_RCC_OscConfig+0x62c>)
 800ab4e:	4013      	ands	r3, r2
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6a11      	ldr	r1, [r2, #32]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ab58:	3a01      	subs	r2, #1
 800ab5a:	0112      	lsls	r2, r2, #4
 800ab5c:	4311      	orrs	r1, r2
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ab62:	0212      	lsls	r2, r2, #8
 800ab64:	4311      	orrs	r1, r2
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ab6a:	0852      	lsrs	r2, r2, #1
 800ab6c:	3a01      	subs	r2, #1
 800ab6e:	0552      	lsls	r2, r2, #21
 800ab70:	4311      	orrs	r1, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ab76:	0852      	lsrs	r2, r2, #1
 800ab78:	3a01      	subs	r2, #1
 800ab7a:	0652      	lsls	r2, r2, #25
 800ab7c:	4311      	orrs	r1, r2
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab82:	06d2      	lsls	r2, r2, #27
 800ab84:	430a      	orrs	r2, r1
 800ab86:	4947      	ldr	r1, [pc, #284]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ab8c:	4b45      	ldr	r3, [pc, #276]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a44      	ldr	r2, [pc, #272]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ab98:	4b42      	ldr	r3, [pc, #264]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	4a41      	ldr	r2, [pc, #260]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ab9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aba2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba4:	f7fc feca 	bl	800793c <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abac:	f7fc fec6 	bl	800793c <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e06e      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800abbe:	4b39      	ldr	r3, [pc, #228]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0f0      	beq.n	800abac <HAL_RCC_OscConfig+0x530>
 800abca:	e066      	b.n	800ac9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abcc:	4b35      	ldr	r3, [pc, #212]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a34      	ldr	r2, [pc, #208]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800abd6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800abd8:	4b32      	ldr	r3, [pc, #200]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4a31      	ldr	r2, [pc, #196]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abde:	f023 0303 	bic.w	r3, r3, #3
 800abe2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800abe4:	4b2f      	ldr	r3, [pc, #188]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	4a2e      	ldr	r2, [pc, #184]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800abea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800abee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abf2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abf4:	f7fc fea2 	bl	800793c <HAL_GetTick>
 800abf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800abfa:	e008      	b.n	800ac0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abfc:	f7fc fe9e 	bl	800793c <HAL_GetTick>
 800ac00:	4602      	mov	r2, r0
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	d901      	bls.n	800ac0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e046      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac0e:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f0      	bne.n	800abfc <HAL_RCC_OscConfig+0x580>
 800ac1a:	e03e      	b.n	800ac9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d101      	bne.n	800ac28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e039      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ac28:	4b1e      	ldr	r3, [pc, #120]	; (800aca4 <HAL_RCC_OscConfig+0x628>)
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	f003 0203 	and.w	r2, r3, #3
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d12c      	bne.n	800ac96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	3b01      	subs	r3, #1
 800ac48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d123      	bne.n	800ac96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d11b      	bne.n	800ac96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d113      	bne.n	800ac96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac78:	085b      	lsrs	r3, r3, #1
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d109      	bne.n	800ac96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8c:	085b      	lsrs	r3, r3, #1
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d001      	beq.n	800ac9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	40021000 	.word	0x40021000
 800aca8:	019f800c 	.word	0x019f800c

0800acac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800acb6:	2300      	movs	r3, #0
 800acb8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	e11e      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800acc4:	4b91      	ldr	r3, [pc, #580]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d910      	bls.n	800acf4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800acd2:	4b8e      	ldr	r3, [pc, #568]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f023 020f 	bic.w	r2, r3, #15
 800acda:	498c      	ldr	r1, [pc, #560]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	4313      	orrs	r3, r2
 800ace0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ace2:	4b8a      	ldr	r3, [pc, #552]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 030f 	and.w	r3, r3, #15
 800acea:	683a      	ldr	r2, [r7, #0]
 800acec:	429a      	cmp	r2, r3
 800acee:	d001      	beq.n	800acf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e106      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d073      	beq.n	800ade8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d129      	bne.n	800ad5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad08:	4b81      	ldr	r3, [pc, #516]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d101      	bne.n	800ad18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0f4      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ad18:	f000 f9d0 	bl	800b0bc <RCC_GetSysClockFreqFromPLLSource>
 800ad1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	4a7c      	ldr	r2, [pc, #496]	; (800af14 <HAL_RCC_ClockConfig+0x268>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d93f      	bls.n	800ada6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad26:	4b7a      	ldr	r3, [pc, #488]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d009      	beq.n	800ad46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d033      	beq.n	800ada6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d12f      	bne.n	800ada6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad46:	4b72      	ldr	r3, [pc, #456]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad4e:	4a70      	ldr	r2, [pc, #448]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ad56:	2380      	movs	r3, #128	; 0x80
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	e024      	b.n	800ada6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d107      	bne.n	800ad74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad64:	4b6a      	ldr	r3, [pc, #424]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e0c6      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ad74:	4b66      	ldr	r3, [pc, #408]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e0be      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ad84:	f000 f8ce 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800ad88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	4a61      	ldr	r2, [pc, #388]	; (800af14 <HAL_RCC_ClockConfig+0x268>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d909      	bls.n	800ada6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ad92:	4b5f      	ldr	r3, [pc, #380]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad9a:	4a5d      	ldr	r2, [pc, #372]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ad9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ada2:	2380      	movs	r3, #128	; 0x80
 800ada4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ada6:	4b5a      	ldr	r3, [pc, #360]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	f023 0203 	bic.w	r2, r3, #3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	4957      	ldr	r1, [pc, #348]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800adb4:	4313      	orrs	r3, r2
 800adb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adb8:	f7fc fdc0 	bl	800793c <HAL_GetTick>
 800adbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adbe:	e00a      	b.n	800add6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adc0:	f7fc fdbc 	bl	800793c <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	f241 3288 	movw	r2, #5000	; 0x1388
 800adce:	4293      	cmp	r3, r2
 800add0:	d901      	bls.n	800add6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e095      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800add6:	4b4e      	ldr	r3, [pc, #312]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f003 020c 	and.w	r2, r3, #12
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d1eb      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d023      	beq.n	800ae3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae00:	4b43      	ldr	r3, [pc, #268]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	4a42      	ldr	r2, [pc, #264]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 0308 	and.w	r3, r3, #8
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d007      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ae18:	4b3d      	ldr	r3, [pc, #244]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae20:	4a3b      	ldr	r2, [pc, #236]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ae26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae28:	4b39      	ldr	r3, [pc, #228]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4936      	ldr	r1, [pc, #216]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	608b      	str	r3, [r1, #8]
 800ae3a:	e008      	b.n	800ae4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2b80      	cmp	r3, #128	; 0x80
 800ae40:	d105      	bne.n	800ae4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ae42:	4b33      	ldr	r3, [pc, #204]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	4a32      	ldr	r2, [pc, #200]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800ae48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae4e:	4b2f      	ldr	r3, [pc, #188]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	683a      	ldr	r2, [r7, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d21d      	bcs.n	800ae98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae5c:	4b2b      	ldr	r3, [pc, #172]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f023 020f 	bic.w	r2, r3, #15
 800ae64:	4929      	ldr	r1, [pc, #164]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ae6c:	f7fc fd66 	bl	800793c <HAL_GetTick>
 800ae70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae72:	e00a      	b.n	800ae8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae74:	f7fc fd62 	bl	800793c <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d901      	bls.n	800ae8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e03b      	b.n	800af02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae8a:	4b20      	ldr	r3, [pc, #128]	; (800af0c <HAL_RCC_ClockConfig+0x260>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d1ed      	bne.n	800ae74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 0304 	and.w	r3, r3, #4
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d008      	beq.n	800aeb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aea4:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	4917      	ldr	r1, [pc, #92]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0308 	and.w	r3, r3, #8
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d009      	beq.n	800aed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aec2:	4b13      	ldr	r3, [pc, #76]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	00db      	lsls	r3, r3, #3
 800aed0:	490f      	ldr	r1, [pc, #60]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aed6:	f000 f825 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800aeda:	4602      	mov	r2, r0
 800aedc:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <HAL_RCC_ClockConfig+0x264>)
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	091b      	lsrs	r3, r3, #4
 800aee2:	f003 030f 	and.w	r3, r3, #15
 800aee6:	490c      	ldr	r1, [pc, #48]	; (800af18 <HAL_RCC_ClockConfig+0x26c>)
 800aee8:	5ccb      	ldrb	r3, [r1, r3]
 800aeea:	f003 031f 	and.w	r3, r3, #31
 800aeee:	fa22 f303 	lsr.w	r3, r2, r3
 800aef2:	4a0a      	ldr	r2, [pc, #40]	; (800af1c <HAL_RCC_ClockConfig+0x270>)
 800aef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aef6:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <HAL_RCC_ClockConfig+0x274>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7fc f8d4 	bl	80070a8 <HAL_InitTick>
 800af00:	4603      	mov	r3, r0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3718      	adds	r7, #24
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	40022000 	.word	0x40022000
 800af10:	40021000 	.word	0x40021000
 800af14:	04c4b400 	.word	0x04c4b400
 800af18:	08011d38 	.word	0x08011d38
 800af1c:	20000004 	.word	0x20000004
 800af20:	20000008 	.word	0x20000008

0800af24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800af2a:	4b2c      	ldr	r3, [pc, #176]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 030c 	and.w	r3, r3, #12
 800af32:	2b04      	cmp	r3, #4
 800af34:	d102      	bne.n	800af3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800af36:	4b2a      	ldr	r3, [pc, #168]	; (800afe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af38:	613b      	str	r3, [r7, #16]
 800af3a:	e047      	b.n	800afcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800af3c:	4b27      	ldr	r3, [pc, #156]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	f003 030c 	and.w	r3, r3, #12
 800af44:	2b08      	cmp	r3, #8
 800af46:	d102      	bne.n	800af4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800af48:	4b26      	ldr	r3, [pc, #152]	; (800afe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	e03e      	b.n	800afcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800af4e:	4b23      	ldr	r3, [pc, #140]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 030c 	and.w	r3, r3, #12
 800af56:	2b0c      	cmp	r3, #12
 800af58:	d136      	bne.n	800afc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800af5a:	4b20      	ldr	r3, [pc, #128]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	f003 0303 	and.w	r3, r3, #3
 800af62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800af64:	4b1d      	ldr	r3, [pc, #116]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	091b      	lsrs	r3, r3, #4
 800af6a:	f003 030f 	and.w	r3, r3, #15
 800af6e:	3301      	adds	r3, #1
 800af70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b03      	cmp	r3, #3
 800af76:	d10c      	bne.n	800af92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af78:	4a1a      	ldr	r2, [pc, #104]	; (800afe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af80:	4a16      	ldr	r2, [pc, #88]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af82:	68d2      	ldr	r2, [r2, #12]
 800af84:	0a12      	lsrs	r2, r2, #8
 800af86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800af8a:	fb02 f303 	mul.w	r3, r2, r3
 800af8e:	617b      	str	r3, [r7, #20]
      break;
 800af90:	e00c      	b.n	800afac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800af92:	4a13      	ldr	r2, [pc, #76]	; (800afe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9a:	4a10      	ldr	r2, [pc, #64]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800af9c:	68d2      	ldr	r2, [r2, #12]
 800af9e:	0a12      	lsrs	r2, r2, #8
 800afa0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800afa4:	fb02 f303 	mul.w	r3, r2, r3
 800afa8:	617b      	str	r3, [r7, #20]
      break;
 800afaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800afac:	4b0b      	ldr	r3, [pc, #44]	; (800afdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	0e5b      	lsrs	r3, r3, #25
 800afb2:	f003 0303 	and.w	r3, r3, #3
 800afb6:	3301      	adds	r3, #1
 800afb8:	005b      	lsls	r3, r3, #1
 800afba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc4:	613b      	str	r3, [r7, #16]
 800afc6:	e001      	b.n	800afcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800afcc:	693b      	ldr	r3, [r7, #16]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	40021000 	.word	0x40021000
 800afe0:	00f42400 	.word	0x00f42400
 800afe4:	007a1200 	.word	0x007a1200

0800afe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afe8:	b480      	push	{r7}
 800afea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afec:	4b03      	ldr	r3, [pc, #12]	; (800affc <HAL_RCC_GetHCLKFreq+0x14>)
 800afee:	681b      	ldr	r3, [r3, #0]
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	20000004 	.word	0x20000004

0800b000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b004:	f7ff fff0 	bl	800afe8 <HAL_RCC_GetHCLKFreq>
 800b008:	4602      	mov	r2, r0
 800b00a:	4b06      	ldr	r3, [pc, #24]	; (800b024 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	0a1b      	lsrs	r3, r3, #8
 800b010:	f003 0307 	and.w	r3, r3, #7
 800b014:	4904      	ldr	r1, [pc, #16]	; (800b028 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b016:	5ccb      	ldrb	r3, [r1, r3]
 800b018:	f003 031f 	and.w	r3, r3, #31
 800b01c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b020:	4618      	mov	r0, r3
 800b022:	bd80      	pop	{r7, pc}
 800b024:	40021000 	.word	0x40021000
 800b028:	08011d48 	.word	0x08011d48

0800b02c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b030:	f7ff ffda 	bl	800afe8 <HAL_RCC_GetHCLKFreq>
 800b034:	4602      	mov	r2, r0
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	0adb      	lsrs	r3, r3, #11
 800b03c:	f003 0307 	and.w	r3, r3, #7
 800b040:	4904      	ldr	r1, [pc, #16]	; (800b054 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b042:	5ccb      	ldrb	r3, [r1, r3]
 800b044:	f003 031f 	and.w	r3, r3, #31
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	40021000 	.word	0x40021000
 800b054:	08011d48 	.word	0x08011d48

0800b058 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	220f      	movs	r2, #15
 800b066:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b068:	4b12      	ldr	r3, [pc, #72]	; (800b0b4 <HAL_RCC_GetClockConfig+0x5c>)
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	f003 0203 	and.w	r2, r3, #3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <HAL_RCC_GetClockConfig+0x5c>)
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <HAL_RCC_GetClockConfig+0x5c>)
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b08c:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <HAL_RCC_GetClockConfig+0x5c>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	08db      	lsrs	r3, r3, #3
 800b092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b09a:	4b07      	ldr	r3, [pc, #28]	; (800b0b8 <HAL_RCC_GetClockConfig+0x60>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 020f 	and.w	r2, r3, #15
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	601a      	str	r2, [r3, #0]
}
 800b0a6:	bf00      	nop
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40021000 	.word	0x40021000
 800b0b8:	40022000 	.word	0x40022000

0800b0bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b087      	sub	sp, #28
 800b0c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b0c2:	4b1e      	ldr	r3, [pc, #120]	; (800b13c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b0cc:	4b1b      	ldr	r3, [pc, #108]	; (800b13c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	091b      	lsrs	r3, r3, #4
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	2b03      	cmp	r3, #3
 800b0de:	d10c      	bne.n	800b0fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0e0:	4a17      	ldr	r2, [pc, #92]	; (800b140 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e8:	4a14      	ldr	r2, [pc, #80]	; (800b13c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b0ea:	68d2      	ldr	r2, [r2, #12]
 800b0ec:	0a12      	lsrs	r2, r2, #8
 800b0ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b0f2:	fb02 f303 	mul.w	r3, r2, r3
 800b0f6:	617b      	str	r3, [r7, #20]
    break;
 800b0f8:	e00c      	b.n	800b114 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b0fa:	4a12      	ldr	r2, [pc, #72]	; (800b144 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b102:	4a0e      	ldr	r2, [pc, #56]	; (800b13c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b104:	68d2      	ldr	r2, [r2, #12]
 800b106:	0a12      	lsrs	r2, r2, #8
 800b108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b10c:	fb02 f303 	mul.w	r3, r2, r3
 800b110:	617b      	str	r3, [r7, #20]
    break;
 800b112:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b114:	4b09      	ldr	r3, [pc, #36]	; (800b13c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	0e5b      	lsrs	r3, r3, #25
 800b11a:	f003 0303 	and.w	r3, r3, #3
 800b11e:	3301      	adds	r3, #1
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b12e:	687b      	ldr	r3, [r7, #4]
}
 800b130:	4618      	mov	r0, r3
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	40021000 	.word	0x40021000
 800b140:	007a1200 	.word	0x007a1200
 800b144:	00f42400 	.word	0x00f42400

0800b148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b150:	2300      	movs	r3, #0
 800b152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b154:	2300      	movs	r3, #0
 800b156:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 8098 	beq.w	800b296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b166:	2300      	movs	r3, #0
 800b168:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b16a:	4b43      	ldr	r3, [pc, #268]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10d      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b176:	4b40      	ldr	r3, [pc, #256]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b17a:	4a3f      	ldr	r2, [pc, #252]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b180:	6593      	str	r3, [r2, #88]	; 0x58
 800b182:	4b3d      	ldr	r3, [pc, #244]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18a:	60bb      	str	r3, [r7, #8]
 800b18c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b18e:	2301      	movs	r3, #1
 800b190:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b192:	4b3a      	ldr	r3, [pc, #232]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a39      	ldr	r2, [pc, #228]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b19c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b19e:	f7fc fbcd 	bl	800793c <HAL_GetTick>
 800b1a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1a4:	e009      	b.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1a6:	f7fc fbc9 	bl	800793c <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d902      	bls.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	74fb      	strb	r3, [r7, #19]
        break;
 800b1b8:	e005      	b.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1ba:	4b30      	ldr	r3, [pc, #192]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0ef      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b1c6:	7cfb      	ldrb	r3, [r7, #19]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d159      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b1cc:	4b2a      	ldr	r3, [pc, #168]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d01e      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e2:	697a      	ldr	r2, [r7, #20]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d019      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b1e8:	4b23      	ldr	r3, [pc, #140]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1f4:	4b20      	ldr	r3, [pc, #128]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1fa:	4a1f      	ldr	r2, [pc, #124]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b1fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b204:	4b1c      	ldr	r3, [pc, #112]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b20a:	4a1b      	ldr	r2, [pc, #108]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b20c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b214:	4a18      	ldr	r2, [pc, #96]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f003 0301 	and.w	r3, r3, #1
 800b222:	2b00      	cmp	r3, #0
 800b224:	d016      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b226:	f7fc fb89 	bl	800793c <HAL_GetTick>
 800b22a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b22c:	e00b      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b22e:	f7fc fb85 	bl	800793c <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	f241 3288 	movw	r2, #5000	; 0x1388
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d902      	bls.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	74fb      	strb	r3, [r7, #19]
            break;
 800b244:	e006      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b246:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b24c:	f003 0302 	and.w	r3, r3, #2
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0ec      	beq.n	800b22e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b254:	7cfb      	ldrb	r3, [r7, #19]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10b      	bne.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b25a:	4b07      	ldr	r3, [pc, #28]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b268:	4903      	ldr	r1, [pc, #12]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b270:	e008      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b272:	7cfb      	ldrb	r3, [r7, #19]
 800b274:	74bb      	strb	r3, [r7, #18]
 800b276:	e005      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b278:	40021000 	.word	0x40021000
 800b27c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	7cfb      	ldrb	r3, [r7, #19]
 800b282:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b284:	7c7b      	ldrb	r3, [r7, #17]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d105      	bne.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b28a:	4ba7      	ldr	r3, [pc, #668]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b28e:	4aa6      	ldr	r2, [pc, #664]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b294:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f003 0301 	and.w	r3, r3, #1
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b2a2:	4ba1      	ldr	r3, [pc, #644]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a8:	f023 0203 	bic.w	r2, r3, #3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	499d      	ldr	r1, [pc, #628]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0302 	and.w	r3, r3, #2
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b2c4:	4b98      	ldr	r3, [pc, #608]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ca:	f023 020c 	bic.w	r2, r3, #12
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	4995      	ldr	r1, [pc, #596]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b2e6:	4b90      	ldr	r3, [pc, #576]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	498c      	ldr	r1, [pc, #560]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f003 0308 	and.w	r3, r3, #8
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b308:	4b87      	ldr	r3, [pc, #540]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	4984      	ldr	r1, [pc, #528]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0310 	and.w	r3, r3, #16
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b32a:	4b7f      	ldr	r3, [pc, #508]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	497b      	ldr	r1, [pc, #492]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b34c:	4b76      	ldr	r3, [pc, #472]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	699b      	ldr	r3, [r3, #24]
 800b35a:	4973      	ldr	r1, [pc, #460]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00a      	beq.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b36e:	4b6e      	ldr	r3, [pc, #440]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b374:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	496a      	ldr	r1, [pc, #424]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00a      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b390:	4b65      	ldr	r3, [pc, #404]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b396:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	4962      	ldr	r1, [pc, #392]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d00a      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b3b2:	4b5d      	ldr	r3, [pc, #372]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	4959      	ldr	r1, [pc, #356]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b3d4:	4b54      	ldr	r3, [pc, #336]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b3da:	f023 0203 	bic.w	r2, r3, #3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e2:	4951      	ldr	r1, [pc, #324]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00a      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3f6:	4b4c      	ldr	r3, [pc, #304]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b404:	4948      	ldr	r1, [pc, #288]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b406:	4313      	orrs	r3, r2
 800b408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b414:	2b00      	cmp	r3, #0
 800b416:	d015      	beq.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b418:	4b43      	ldr	r3, [pc, #268]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b41e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b426:	4940      	ldr	r1, [pc, #256]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b436:	d105      	bne.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b438:	4b3b      	ldr	r3, [pc, #236]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	4a3a      	ldr	r2, [pc, #232]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b43e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d015      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b450:	4b35      	ldr	r3, [pc, #212]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b456:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45e:	4932      	ldr	r1, [pc, #200]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b460:	4313      	orrs	r3, r2
 800b462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b46e:	d105      	bne.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b470:	4b2d      	ldr	r3, [pc, #180]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	4a2c      	ldr	r2, [pc, #176]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b47a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b484:	2b00      	cmp	r3, #0
 800b486:	d015      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b488:	4b27      	ldr	r3, [pc, #156]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b48a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b496:	4924      	ldr	r1, [pc, #144]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4a6:	d105      	bne.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4a8:	4b1f      	ldr	r3, [pc, #124]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	4a1e      	ldr	r2, [pc, #120]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d015      	beq.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4c0:	4b19      	ldr	r3, [pc, #100]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ce:	4916      	ldr	r1, [pc, #88]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4de:	d105      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b4e0:	4b11      	ldr	r3, [pc, #68]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	4a10      	ldr	r2, [pc, #64]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d019      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	4908      	ldr	r1, [pc, #32]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b508:	4313      	orrs	r3, r2
 800b50a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b516:	d109      	bne.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b518:	4b03      	ldr	r3, [pc, #12]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	4a02      	ldr	r2, [pc, #8]	; (800b528 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b51e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b522:	60d3      	str	r3, [r2, #12]
 800b524:	e002      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b526:	bf00      	nop
 800b528:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b534:	2b00      	cmp	r3, #0
 800b536:	d015      	beq.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b538:	4b29      	ldr	r3, [pc, #164]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b53e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b546:	4926      	ldr	r1, [pc, #152]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b548:	4313      	orrs	r3, r2
 800b54a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b556:	d105      	bne.n	800b564 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b558:	4b21      	ldr	r3, [pc, #132]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	4a20      	ldr	r2, [pc, #128]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b55e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b562:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d015      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b570:	4b1b      	ldr	r3, [pc, #108]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b576:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b57e:	4918      	ldr	r1, [pc, #96]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b580:	4313      	orrs	r3, r2
 800b582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58e:	d105      	bne.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b590:	4b13      	ldr	r3, [pc, #76]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	4a12      	ldr	r2, [pc, #72]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b59a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d015      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b5a8:	4b0d      	ldr	r3, [pc, #52]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5b6:	490a      	ldr	r1, [pc, #40]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5c6:	d105      	bne.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	4a04      	ldr	r2, [pc, #16]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b5ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b5d4:	7cbb      	ldrb	r3, [r7, #18]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	40021000 	.word	0x40021000

0800b5e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e049      	b.n	800b68a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d106      	bne.n	800b610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f841 	bl	800b692 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3304      	adds	r3, #4
 800b620:	4619      	mov	r1, r3
 800b622:	4610      	mov	r0, r2
 800b624:	f000 fcde 	bl	800bfe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2201      	movs	r2, #1
 800b674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b69a:	bf00      	nop
 800b69c:	370c      	adds	r7, #12
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d001      	beq.n	800b6c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e054      	b.n	800b76a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	68da      	ldr	r2, [r3, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f042 0201 	orr.w	r2, r2, #1
 800b6d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a26      	ldr	r2, [pc, #152]	; (800b778 <HAL_TIM_Base_Start_IT+0xd0>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d022      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6ea:	d01d      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a22      	ldr	r2, [pc, #136]	; (800b77c <HAL_TIM_Base_Start_IT+0xd4>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d018      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a21      	ldr	r2, [pc, #132]	; (800b780 <HAL_TIM_Base_Start_IT+0xd8>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d013      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a1f      	ldr	r2, [pc, #124]	; (800b784 <HAL_TIM_Base_Start_IT+0xdc>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00e      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <HAL_TIM_Base_Start_IT+0xe0>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d009      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a1c      	ldr	r2, [pc, #112]	; (800b78c <HAL_TIM_Base_Start_IT+0xe4>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d004      	beq.n	800b728 <HAL_TIM_Base_Start_IT+0x80>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a1b      	ldr	r2, [pc, #108]	; (800b790 <HAL_TIM_Base_Start_IT+0xe8>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d115      	bne.n	800b754 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	4b19      	ldr	r3, [pc, #100]	; (800b794 <HAL_TIM_Base_Start_IT+0xec>)
 800b730:	4013      	ands	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b06      	cmp	r3, #6
 800b738:	d015      	beq.n	800b766 <HAL_TIM_Base_Start_IT+0xbe>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b740:	d011      	beq.n	800b766 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f042 0201 	orr.w	r2, r2, #1
 800b750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b752:	e008      	b.n	800b766 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	601a      	str	r2, [r3, #0]
 800b764:	e000      	b.n	800b768 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b766:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b768:	2300      	movs	r3, #0
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	40012c00 	.word	0x40012c00
 800b77c:	40000400 	.word	0x40000400
 800b780:	40000800 	.word	0x40000800
 800b784:	40000c00 	.word	0x40000c00
 800b788:	40013400 	.word	0x40013400
 800b78c:	40014000 	.word	0x40014000
 800b790:	40015000 	.word	0x40015000
 800b794:	00010007 	.word	0x00010007

0800b798 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e049      	b.n	800b83e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d106      	bne.n	800b7c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7fb fe60 	bl	8007484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2202      	movs	r2, #2
 800b7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	f000 fc04 	bl	800bfe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2201      	movs	r2, #1
 800b7e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2201      	movs	r2, #1
 800b800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d109      	bne.n	800b86c <HAL_TIM_PWM_Start+0x24>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b01      	cmp	r3, #1
 800b862:	bf14      	ite	ne
 800b864:	2301      	movne	r3, #1
 800b866:	2300      	moveq	r3, #0
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	e03c      	b.n	800b8e6 <HAL_TIM_PWM_Start+0x9e>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b04      	cmp	r3, #4
 800b870:	d109      	bne.n	800b886 <HAL_TIM_PWM_Start+0x3e>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b878:	b2db      	uxtb	r3, r3
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	bf14      	ite	ne
 800b87e:	2301      	movne	r3, #1
 800b880:	2300      	moveq	r3, #0
 800b882:	b2db      	uxtb	r3, r3
 800b884:	e02f      	b.n	800b8e6 <HAL_TIM_PWM_Start+0x9e>
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d109      	bne.n	800b8a0 <HAL_TIM_PWM_Start+0x58>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b01      	cmp	r3, #1
 800b896:	bf14      	ite	ne
 800b898:	2301      	movne	r3, #1
 800b89a:	2300      	moveq	r3, #0
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	e022      	b.n	800b8e6 <HAL_TIM_PWM_Start+0x9e>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b0c      	cmp	r3, #12
 800b8a4:	d109      	bne.n	800b8ba <HAL_TIM_PWM_Start+0x72>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8ac:	b2db      	uxtb	r3, r3
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	bf14      	ite	ne
 800b8b2:	2301      	movne	r3, #1
 800b8b4:	2300      	moveq	r3, #0
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	e015      	b.n	800b8e6 <HAL_TIM_PWM_Start+0x9e>
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b10      	cmp	r3, #16
 800b8be:	d109      	bne.n	800b8d4 <HAL_TIM_PWM_Start+0x8c>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	bf14      	ite	ne
 800b8cc:	2301      	movne	r3, #1
 800b8ce:	2300      	moveq	r3, #0
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	e008      	b.n	800b8e6 <HAL_TIM_PWM_Start+0x9e>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	bf14      	ite	ne
 800b8e0:	2301      	movne	r3, #1
 800b8e2:	2300      	moveq	r3, #0
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e0a6      	b.n	800ba3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d104      	bne.n	800b8fe <HAL_TIM_PWM_Start+0xb6>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8fc:	e023      	b.n	800b946 <HAL_TIM_PWM_Start+0xfe>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b04      	cmp	r3, #4
 800b902:	d104      	bne.n	800b90e <HAL_TIM_PWM_Start+0xc6>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2202      	movs	r2, #2
 800b908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b90c:	e01b      	b.n	800b946 <HAL_TIM_PWM_Start+0xfe>
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	2b08      	cmp	r3, #8
 800b912:	d104      	bne.n	800b91e <HAL_TIM_PWM_Start+0xd6>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2202      	movs	r2, #2
 800b918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b91c:	e013      	b.n	800b946 <HAL_TIM_PWM_Start+0xfe>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b0c      	cmp	r3, #12
 800b922:	d104      	bne.n	800b92e <HAL_TIM_PWM_Start+0xe6>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2202      	movs	r2, #2
 800b928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b92c:	e00b      	b.n	800b946 <HAL_TIM_PWM_Start+0xfe>
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b10      	cmp	r3, #16
 800b932:	d104      	bne.n	800b93e <HAL_TIM_PWM_Start+0xf6>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2202      	movs	r2, #2
 800b938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b93c:	e003      	b.n	800b946 <HAL_TIM_PWM_Start+0xfe>
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2202      	movs	r2, #2
 800b942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2201      	movs	r2, #1
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 ff1a 	bl	800c788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a3a      	ldr	r2, [pc, #232]	; (800ba44 <HAL_TIM_PWM_Start+0x1fc>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d018      	beq.n	800b990 <HAL_TIM_PWM_Start+0x148>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a39      	ldr	r2, [pc, #228]	; (800ba48 <HAL_TIM_PWM_Start+0x200>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d013      	beq.n	800b990 <HAL_TIM_PWM_Start+0x148>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a37      	ldr	r2, [pc, #220]	; (800ba4c <HAL_TIM_PWM_Start+0x204>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00e      	beq.n	800b990 <HAL_TIM_PWM_Start+0x148>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a36      	ldr	r2, [pc, #216]	; (800ba50 <HAL_TIM_PWM_Start+0x208>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <HAL_TIM_PWM_Start+0x148>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a34      	ldr	r2, [pc, #208]	; (800ba54 <HAL_TIM_PWM_Start+0x20c>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <HAL_TIM_PWM_Start+0x148>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a33      	ldr	r2, [pc, #204]	; (800ba58 <HAL_TIM_PWM_Start+0x210>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d101      	bne.n	800b994 <HAL_TIM_PWM_Start+0x14c>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <HAL_TIM_PWM_Start+0x14e>
 800b994:	2300      	movs	r3, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d007      	beq.n	800b9aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a25      	ldr	r2, [pc, #148]	; (800ba44 <HAL_TIM_PWM_Start+0x1fc>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d022      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9bc:	d01d      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a26      	ldr	r2, [pc, #152]	; (800ba5c <HAL_TIM_PWM_Start+0x214>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d018      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a24      	ldr	r2, [pc, #144]	; (800ba60 <HAL_TIM_PWM_Start+0x218>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d013      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a23      	ldr	r2, [pc, #140]	; (800ba64 <HAL_TIM_PWM_Start+0x21c>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d00e      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a19      	ldr	r2, [pc, #100]	; (800ba48 <HAL_TIM_PWM_Start+0x200>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d009      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <HAL_TIM_PWM_Start+0x204>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d004      	beq.n	800b9fa <HAL_TIM_PWM_Start+0x1b2>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a18      	ldr	r2, [pc, #96]	; (800ba58 <HAL_TIM_PWM_Start+0x210>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d115      	bne.n	800ba26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689a      	ldr	r2, [r3, #8]
 800ba00:	4b19      	ldr	r3, [pc, #100]	; (800ba68 <HAL_TIM_PWM_Start+0x220>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b06      	cmp	r3, #6
 800ba0a:	d015      	beq.n	800ba38 <HAL_TIM_PWM_Start+0x1f0>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba12:	d011      	beq.n	800ba38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f042 0201 	orr.w	r2, r2, #1
 800ba22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba24:	e008      	b.n	800ba38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f042 0201 	orr.w	r2, r2, #1
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	e000      	b.n	800ba3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	40012c00 	.word	0x40012c00
 800ba48:	40013400 	.word	0x40013400
 800ba4c:	40014000 	.word	0x40014000
 800ba50:	40014400 	.word	0x40014400
 800ba54:	40014800 	.word	0x40014800
 800ba58:	40015000 	.word	0x40015000
 800ba5c:	40000400 	.word	0x40000400
 800ba60:	40000800 	.word	0x40000800
 800ba64:	40000c00 	.word	0x40000c00
 800ba68:	00010007 	.word	0x00010007

0800ba6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	d122      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d11b      	bne.n	800bac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f06f 0202 	mvn.w	r2, #2
 800ba98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d003      	beq.n	800bab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa7a 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800bab4:	e005      	b.n	800bac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa6c 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fa7d 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2200      	movs	r2, #0
 800bac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d122      	bne.n	800bb1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68db      	ldr	r3, [r3, #12]
 800badc:	f003 0304 	and.w	r3, r3, #4
 800bae0:	2b04      	cmp	r3, #4
 800bae2:	d11b      	bne.n	800bb1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f06f 0204 	mvn.w	r2, #4
 800baec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2202      	movs	r2, #2
 800baf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699b      	ldr	r3, [r3, #24]
 800bafa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d003      	beq.n	800bb0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fa50 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800bb08:	e005      	b.n	800bb16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 fa42 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 fa53 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	f003 0308 	and.w	r3, r3, #8
 800bb26:	2b08      	cmp	r3, #8
 800bb28:	d122      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68db      	ldr	r3, [r3, #12]
 800bb30:	f003 0308 	and.w	r3, r3, #8
 800bb34:	2b08      	cmp	r3, #8
 800bb36:	d11b      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f06f 0208 	mvn.w	r2, #8
 800bb40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2204      	movs	r2, #4
 800bb46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	f003 0303 	and.w	r3, r3, #3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 fa26 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800bb5c:	e005      	b.n	800bb6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fa18 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fa29 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0310 	and.w	r3, r3, #16
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d122      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0310 	and.w	r3, r3, #16
 800bb88:	2b10      	cmp	r3, #16
 800bb8a:	d11b      	bne.n	800bbc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0210 	mvn.w	r2, #16
 800bb94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2208      	movs	r2, #8
 800bb9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	69db      	ldr	r3, [r3, #28]
 800bba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 f9fc 	bl	800bfa8 <HAL_TIM_IC_CaptureCallback>
 800bbb0:	e005      	b.n	800bbbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f9ee 	bl	800bf94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f9ff 	bl	800bfbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f003 0301 	and.w	r3, r3, #1
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d10e      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d107      	bne.n	800bbf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0201 	mvn.w	r2, #1
 800bbe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7fa ff0c 	bl	8006a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfa:	2b80      	cmp	r3, #128	; 0x80
 800bbfc:	d10e      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc08:	2b80      	cmp	r3, #128	; 0x80
 800bc0a:	d107      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fe7c 	bl	800c914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc2a:	d10e      	bne.n	800bc4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc36:	2b80      	cmp	r3, #128	; 0x80
 800bc38:	d107      	bne.n	800bc4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fe6f 	bl	800c928 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc54:	2b40      	cmp	r3, #64	; 0x40
 800bc56:	d10e      	bne.n	800bc76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc62:	2b40      	cmp	r3, #64	; 0x40
 800bc64:	d107      	bne.n	800bc76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f9ad 	bl	800bfd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	f003 0320 	and.w	r3, r3, #32
 800bc80:	2b20      	cmp	r3, #32
 800bc82:	d10e      	bne.n	800bca2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b20      	cmp	r3, #32
 800bc90:	d107      	bne.n	800bca2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f06f 0220 	mvn.w	r2, #32
 800bc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fe2f 	bl	800c900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcb0:	d10f      	bne.n	800bcd2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bcbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcc0:	d107      	bne.n	800bcd2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800bcca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fe35 	bl	800c93c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bce0:	d10f      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcf0:	d107      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800bcfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fe27 	bl	800c950 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd10:	d10f      	bne.n	800bd32 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd20:	d107      	bne.n	800bd32 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800bd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fe19 	bl	800c964 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	691b      	ldr	r3, [r3, #16]
 800bd38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd40:	d10f      	bne.n	800bd62 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bd50:	d107      	bne.n	800bd62 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800bd5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 fe0b 	bl	800c978 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd62:	bf00      	nop
 800bd64:	3708      	adds	r7, #8
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
	...

0800bd6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d101      	bne.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd86:	2302      	movs	r3, #2
 800bd88:	e0ff      	b.n	800bf8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b14      	cmp	r3, #20
 800bd96:	f200 80f0 	bhi.w	800bf7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd9a:	a201      	add	r2, pc, #4	; (adr r2, 800bda0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800bdf5 	.word	0x0800bdf5
 800bda4:	0800bf7b 	.word	0x0800bf7b
 800bda8:	0800bf7b 	.word	0x0800bf7b
 800bdac:	0800bf7b 	.word	0x0800bf7b
 800bdb0:	0800be35 	.word	0x0800be35
 800bdb4:	0800bf7b 	.word	0x0800bf7b
 800bdb8:	0800bf7b 	.word	0x0800bf7b
 800bdbc:	0800bf7b 	.word	0x0800bf7b
 800bdc0:	0800be77 	.word	0x0800be77
 800bdc4:	0800bf7b 	.word	0x0800bf7b
 800bdc8:	0800bf7b 	.word	0x0800bf7b
 800bdcc:	0800bf7b 	.word	0x0800bf7b
 800bdd0:	0800beb7 	.word	0x0800beb7
 800bdd4:	0800bf7b 	.word	0x0800bf7b
 800bdd8:	0800bf7b 	.word	0x0800bf7b
 800bddc:	0800bf7b 	.word	0x0800bf7b
 800bde0:	0800bef9 	.word	0x0800bef9
 800bde4:	0800bf7b 	.word	0x0800bf7b
 800bde8:	0800bf7b 	.word	0x0800bf7b
 800bdec:	0800bf7b 	.word	0x0800bf7b
 800bdf0:	0800bf39 	.word	0x0800bf39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 f99a 	bl	800c134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699a      	ldr	r2, [r3, #24]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f042 0208 	orr.w	r2, r2, #8
 800be0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	699a      	ldr	r2, [r3, #24]
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f022 0204 	bic.w	r2, r2, #4
 800be1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	6999      	ldr	r1, [r3, #24]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	691a      	ldr	r2, [r3, #16]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	430a      	orrs	r2, r1
 800be30:	619a      	str	r2, [r3, #24]
      break;
 800be32:	e0a5      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68b9      	ldr	r1, [r7, #8]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 fa14 	bl	800c268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	699a      	ldr	r2, [r3, #24]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	699a      	ldr	r2, [r3, #24]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	6999      	ldr	r1, [r3, #24]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	021a      	lsls	r2, r3, #8
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	619a      	str	r2, [r3, #24]
      break;
 800be74:	e084      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	68b9      	ldr	r1, [r7, #8]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fa87 	bl	800c390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	69da      	ldr	r2, [r3, #28]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f042 0208 	orr.w	r2, r2, #8
 800be90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69da      	ldr	r2, [r3, #28]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f022 0204 	bic.w	r2, r2, #4
 800bea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	69d9      	ldr	r1, [r3, #28]
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	691a      	ldr	r2, [r3, #16]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	430a      	orrs	r2, r1
 800beb2:	61da      	str	r2, [r3, #28]
      break;
 800beb4:	e064      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	68b9      	ldr	r1, [r7, #8]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 faf9 	bl	800c4b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69da      	ldr	r2, [r3, #28]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	69da      	ldr	r2, [r3, #28]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	69d9      	ldr	r1, [r3, #28]
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	021a      	lsls	r2, r3, #8
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	61da      	str	r2, [r3, #28]
      break;
 800bef6:	e043      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68b9      	ldr	r1, [r7, #8]
 800befe:	4618      	mov	r0, r3
 800bf00:	f000 fb6c 	bl	800c5dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0208 	orr.w	r2, r2, #8
 800bf12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f022 0204 	bic.w	r2, r2, #4
 800bf22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	691a      	ldr	r2, [r3, #16]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	430a      	orrs	r2, r1
 800bf34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bf36:	e023      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68b9      	ldr	r1, [r7, #8]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f000 fbb6 	bl	800c6b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	021a      	lsls	r2, r3, #8
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	430a      	orrs	r2, r1
 800bf76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800bf78:	e002      	b.n	800bf80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop

0800bf94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b083      	sub	sp, #12
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfc4:	bf00      	nop
 800bfc6:	370c      	adds	r7, #12
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr

0800bfd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a46      	ldr	r2, [pc, #280]	; (800c110 <TIM_Base_SetConfig+0x12c>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d017      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c002:	d013      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a43      	ldr	r2, [pc, #268]	; (800c114 <TIM_Base_SetConfig+0x130>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d00f      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a42      	ldr	r2, [pc, #264]	; (800c118 <TIM_Base_SetConfig+0x134>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d00b      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a41      	ldr	r2, [pc, #260]	; (800c11c <TIM_Base_SetConfig+0x138>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d007      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a40      	ldr	r2, [pc, #256]	; (800c120 <TIM_Base_SetConfig+0x13c>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d003      	beq.n	800c02c <TIM_Base_SetConfig+0x48>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a3f      	ldr	r2, [pc, #252]	; (800c124 <TIM_Base_SetConfig+0x140>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	d108      	bne.n	800c03e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	4313      	orrs	r3, r2
 800c03c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	4a33      	ldr	r2, [pc, #204]	; (800c110 <TIM_Base_SetConfig+0x12c>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d023      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c04c:	d01f      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a30      	ldr	r2, [pc, #192]	; (800c114 <TIM_Base_SetConfig+0x130>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d01b      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a2f      	ldr	r2, [pc, #188]	; (800c118 <TIM_Base_SetConfig+0x134>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d017      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a2e      	ldr	r2, [pc, #184]	; (800c11c <TIM_Base_SetConfig+0x138>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d013      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a2d      	ldr	r2, [pc, #180]	; (800c120 <TIM_Base_SetConfig+0x13c>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d00f      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	4a2d      	ldr	r2, [pc, #180]	; (800c128 <TIM_Base_SetConfig+0x144>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d00b      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4a2c      	ldr	r2, [pc, #176]	; (800c12c <TIM_Base_SetConfig+0x148>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d007      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a2b      	ldr	r2, [pc, #172]	; (800c130 <TIM_Base_SetConfig+0x14c>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d003      	beq.n	800c08e <TIM_Base_SetConfig+0xaa>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	4a26      	ldr	r2, [pc, #152]	; (800c124 <TIM_Base_SetConfig+0x140>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d108      	bne.n	800c0a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	689a      	ldr	r2, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a12      	ldr	r2, [pc, #72]	; (800c110 <TIM_Base_SetConfig+0x12c>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d013      	beq.n	800c0f4 <TIM_Base_SetConfig+0x110>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a14      	ldr	r2, [pc, #80]	; (800c120 <TIM_Base_SetConfig+0x13c>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d00f      	beq.n	800c0f4 <TIM_Base_SetConfig+0x110>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a14      	ldr	r2, [pc, #80]	; (800c128 <TIM_Base_SetConfig+0x144>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00b      	beq.n	800c0f4 <TIM_Base_SetConfig+0x110>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a13      	ldr	r2, [pc, #76]	; (800c12c <TIM_Base_SetConfig+0x148>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d007      	beq.n	800c0f4 <TIM_Base_SetConfig+0x110>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a12      	ldr	r2, [pc, #72]	; (800c130 <TIM_Base_SetConfig+0x14c>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d003      	beq.n	800c0f4 <TIM_Base_SetConfig+0x110>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a0d      	ldr	r2, [pc, #52]	; (800c124 <TIM_Base_SetConfig+0x140>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d103      	bne.n	800c0fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	691a      	ldr	r2, [r3, #16]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2201      	movs	r2, #1
 800c100:	615a      	str	r2, [r3, #20]
}
 800c102:	bf00      	nop
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	40012c00 	.word	0x40012c00
 800c114:	40000400 	.word	0x40000400
 800c118:	40000800 	.word	0x40000800
 800c11c:	40000c00 	.word	0x40000c00
 800c120:	40013400 	.word	0x40013400
 800c124:	40015000 	.word	0x40015000
 800c128:	40014000 	.word	0x40014000
 800c12c:	40014400 	.word	0x40014400
 800c130:	40014800 	.word	0x40014800

0800c134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	f023 0201 	bic.w	r2, r3, #1
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f023 0302 	bic.w	r3, r3, #2
 800c180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	4313      	orrs	r3, r2
 800c18a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a30      	ldr	r2, [pc, #192]	; (800c250 <TIM_OC1_SetConfig+0x11c>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d013      	beq.n	800c1bc <TIM_OC1_SetConfig+0x88>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a2f      	ldr	r2, [pc, #188]	; (800c254 <TIM_OC1_SetConfig+0x120>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00f      	beq.n	800c1bc <TIM_OC1_SetConfig+0x88>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a2e      	ldr	r2, [pc, #184]	; (800c258 <TIM_OC1_SetConfig+0x124>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d00b      	beq.n	800c1bc <TIM_OC1_SetConfig+0x88>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a2d      	ldr	r2, [pc, #180]	; (800c25c <TIM_OC1_SetConfig+0x128>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d007      	beq.n	800c1bc <TIM_OC1_SetConfig+0x88>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a2c      	ldr	r2, [pc, #176]	; (800c260 <TIM_OC1_SetConfig+0x12c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d003      	beq.n	800c1bc <TIM_OC1_SetConfig+0x88>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a2b      	ldr	r2, [pc, #172]	; (800c264 <TIM_OC1_SetConfig+0x130>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d10c      	bne.n	800c1d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f023 0308 	bic.w	r3, r3, #8
 800c1c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	697a      	ldr	r2, [r7, #20]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f023 0304 	bic.w	r3, r3, #4
 800c1d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a1d      	ldr	r2, [pc, #116]	; (800c250 <TIM_OC1_SetConfig+0x11c>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d013      	beq.n	800c206 <TIM_OC1_SetConfig+0xd2>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a1c      	ldr	r2, [pc, #112]	; (800c254 <TIM_OC1_SetConfig+0x120>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d00f      	beq.n	800c206 <TIM_OC1_SetConfig+0xd2>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a1b      	ldr	r2, [pc, #108]	; (800c258 <TIM_OC1_SetConfig+0x124>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d00b      	beq.n	800c206 <TIM_OC1_SetConfig+0xd2>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a1a      	ldr	r2, [pc, #104]	; (800c25c <TIM_OC1_SetConfig+0x128>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d007      	beq.n	800c206 <TIM_OC1_SetConfig+0xd2>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a19      	ldr	r2, [pc, #100]	; (800c260 <TIM_OC1_SetConfig+0x12c>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d003      	beq.n	800c206 <TIM_OC1_SetConfig+0xd2>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a18      	ldr	r2, [pc, #96]	; (800c264 <TIM_OC1_SetConfig+0x130>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d111      	bne.n	800c22a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c20c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	699b      	ldr	r3, [r3, #24]
 800c224:	693a      	ldr	r2, [r7, #16]
 800c226:	4313      	orrs	r3, r2
 800c228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	685a      	ldr	r2, [r3, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	621a      	str	r2, [r3, #32]
}
 800c244:	bf00      	nop
 800c246:	371c      	adds	r7, #28
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	40012c00 	.word	0x40012c00
 800c254:	40013400 	.word	0x40013400
 800c258:	40014000 	.word	0x40014000
 800c25c:	40014400 	.word	0x40014400
 800c260:	40014800 	.word	0x40014800
 800c264:	40015000 	.word	0x40015000

0800c268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c268:	b480      	push	{r7}
 800c26a:	b087      	sub	sp, #28
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	f023 0210 	bic.w	r2, r3, #16
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	699b      	ldr	r3, [r3, #24]
 800c28e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	021b      	lsls	r3, r3, #8
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f023 0320 	bic.w	r3, r3, #32
 800c2b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	011b      	lsls	r3, r3, #4
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a2c      	ldr	r2, [pc, #176]	; (800c378 <TIM_OC2_SetConfig+0x110>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d007      	beq.n	800c2dc <TIM_OC2_SetConfig+0x74>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a2b      	ldr	r2, [pc, #172]	; (800c37c <TIM_OC2_SetConfig+0x114>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d003      	beq.n	800c2dc <TIM_OC2_SetConfig+0x74>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a2a      	ldr	r2, [pc, #168]	; (800c380 <TIM_OC2_SetConfig+0x118>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d10d      	bne.n	800c2f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	011b      	lsls	r3, r3, #4
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	4a1f      	ldr	r2, [pc, #124]	; (800c378 <TIM_OC2_SetConfig+0x110>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d013      	beq.n	800c328 <TIM_OC2_SetConfig+0xc0>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a1e      	ldr	r2, [pc, #120]	; (800c37c <TIM_OC2_SetConfig+0x114>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d00f      	beq.n	800c328 <TIM_OC2_SetConfig+0xc0>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a1e      	ldr	r2, [pc, #120]	; (800c384 <TIM_OC2_SetConfig+0x11c>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d00b      	beq.n	800c328 <TIM_OC2_SetConfig+0xc0>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a1d      	ldr	r2, [pc, #116]	; (800c388 <TIM_OC2_SetConfig+0x120>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d007      	beq.n	800c328 <TIM_OC2_SetConfig+0xc0>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a1c      	ldr	r2, [pc, #112]	; (800c38c <TIM_OC2_SetConfig+0x124>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d003      	beq.n	800c328 <TIM_OC2_SetConfig+0xc0>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a17      	ldr	r2, [pc, #92]	; (800c380 <TIM_OC2_SetConfig+0x118>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d113      	bne.n	800c350 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c32e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	4313      	orrs	r3, r2
 800c342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	4313      	orrs	r3, r2
 800c34e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	697a      	ldr	r2, [r7, #20]
 800c368:	621a      	str	r2, [r3, #32]
}
 800c36a:	bf00      	nop
 800c36c:	371c      	adds	r7, #28
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	40012c00 	.word	0x40012c00
 800c37c:	40013400 	.word	0x40013400
 800c380:	40015000 	.word	0x40015000
 800c384:	40014000 	.word	0x40014000
 800c388:	40014400 	.word	0x40014400
 800c38c:	40014800 	.word	0x40014800

0800c390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	69db      	ldr	r3, [r3, #28]
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	021b      	lsls	r3, r3, #8
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a2b      	ldr	r2, [pc, #172]	; (800c49c <TIM_OC3_SetConfig+0x10c>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d007      	beq.n	800c402 <TIM_OC3_SetConfig+0x72>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a2a      	ldr	r2, [pc, #168]	; (800c4a0 <TIM_OC3_SetConfig+0x110>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d003      	beq.n	800c402 <TIM_OC3_SetConfig+0x72>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a29      	ldr	r2, [pc, #164]	; (800c4a4 <TIM_OC3_SetConfig+0x114>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d10d      	bne.n	800c41e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	021b      	lsls	r3, r3, #8
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	4313      	orrs	r3, r2
 800c414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c41c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a1e      	ldr	r2, [pc, #120]	; (800c49c <TIM_OC3_SetConfig+0x10c>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d013      	beq.n	800c44e <TIM_OC3_SetConfig+0xbe>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a1d      	ldr	r2, [pc, #116]	; (800c4a0 <TIM_OC3_SetConfig+0x110>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d00f      	beq.n	800c44e <TIM_OC3_SetConfig+0xbe>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a1d      	ldr	r2, [pc, #116]	; (800c4a8 <TIM_OC3_SetConfig+0x118>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d00b      	beq.n	800c44e <TIM_OC3_SetConfig+0xbe>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4a1c      	ldr	r2, [pc, #112]	; (800c4ac <TIM_OC3_SetConfig+0x11c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d007      	beq.n	800c44e <TIM_OC3_SetConfig+0xbe>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	4a1b      	ldr	r2, [pc, #108]	; (800c4b0 <TIM_OC3_SetConfig+0x120>)
 800c442:	4293      	cmp	r3, r2
 800c444:	d003      	beq.n	800c44e <TIM_OC3_SetConfig+0xbe>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4a16      	ldr	r2, [pc, #88]	; (800c4a4 <TIM_OC3_SetConfig+0x114>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d113      	bne.n	800c476 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c45c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	695b      	ldr	r3, [r3, #20]
 800c462:	011b      	lsls	r3, r3, #4
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	4313      	orrs	r3, r2
 800c468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	699b      	ldr	r3, [r3, #24]
 800c46e:	011b      	lsls	r3, r3, #4
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	4313      	orrs	r3, r2
 800c474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	693a      	ldr	r2, [r7, #16]
 800c47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	685a      	ldr	r2, [r3, #4]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	621a      	str	r2, [r3, #32]
}
 800c490:	bf00      	nop
 800c492:	371c      	adds	r7, #28
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	40012c00 	.word	0x40012c00
 800c4a0:	40013400 	.word	0x40013400
 800c4a4:	40015000 	.word	0x40015000
 800c4a8:	40014000 	.word	0x40014000
 800c4ac:	40014400 	.word	0x40014400
 800c4b0:	40014800 	.word	0x40014800

0800c4b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	69db      	ldr	r3, [r3, #28]
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	021b      	lsls	r3, r3, #8
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	689b      	ldr	r3, [r3, #8]
 800c508:	031b      	lsls	r3, r3, #12
 800c50a:	697a      	ldr	r2, [r7, #20]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a2c      	ldr	r2, [pc, #176]	; (800c5c4 <TIM_OC4_SetConfig+0x110>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d007      	beq.n	800c528 <TIM_OC4_SetConfig+0x74>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a2b      	ldr	r2, [pc, #172]	; (800c5c8 <TIM_OC4_SetConfig+0x114>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d003      	beq.n	800c528 <TIM_OC4_SetConfig+0x74>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4a2a      	ldr	r2, [pc, #168]	; (800c5cc <TIM_OC4_SetConfig+0x118>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d10d      	bne.n	800c544 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c52e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	031b      	lsls	r3, r3, #12
 800c536:	697a      	ldr	r2, [r7, #20]
 800c538:	4313      	orrs	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	4a1f      	ldr	r2, [pc, #124]	; (800c5c4 <TIM_OC4_SetConfig+0x110>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d013      	beq.n	800c574 <TIM_OC4_SetConfig+0xc0>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a1e      	ldr	r2, [pc, #120]	; (800c5c8 <TIM_OC4_SetConfig+0x114>)
 800c550:	4293      	cmp	r3, r2
 800c552:	d00f      	beq.n	800c574 <TIM_OC4_SetConfig+0xc0>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	4a1e      	ldr	r2, [pc, #120]	; (800c5d0 <TIM_OC4_SetConfig+0x11c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d00b      	beq.n	800c574 <TIM_OC4_SetConfig+0xc0>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	4a1d      	ldr	r2, [pc, #116]	; (800c5d4 <TIM_OC4_SetConfig+0x120>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d007      	beq.n	800c574 <TIM_OC4_SetConfig+0xc0>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	4a1c      	ldr	r2, [pc, #112]	; (800c5d8 <TIM_OC4_SetConfig+0x124>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d003      	beq.n	800c574 <TIM_OC4_SetConfig+0xc0>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4a17      	ldr	r2, [pc, #92]	; (800c5cc <TIM_OC4_SetConfig+0x118>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d113      	bne.n	800c59c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c57a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c582:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	019b      	lsls	r3, r3, #6
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	019b      	lsls	r3, r3, #6
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	693a      	ldr	r2, [r7, #16]
 800c5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68fa      	ldr	r2, [r7, #12]
 800c5a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	621a      	str	r2, [r3, #32]
}
 800c5b6:	bf00      	nop
 800c5b8:	371c      	adds	r7, #28
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	40012c00 	.word	0x40012c00
 800c5c8:	40013400 	.word	0x40013400
 800c5cc:	40015000 	.word	0x40015000
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40014400 	.word	0x40014400
 800c5d8:	40014800 	.word	0x40014800

0800c5dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c60a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4313      	orrs	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	041b      	lsls	r3, r3, #16
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a19      	ldr	r2, [pc, #100]	; (800c698 <TIM_OC5_SetConfig+0xbc>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d013      	beq.n	800c65e <TIM_OC5_SetConfig+0x82>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a18      	ldr	r2, [pc, #96]	; (800c69c <TIM_OC5_SetConfig+0xc0>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d00f      	beq.n	800c65e <TIM_OC5_SetConfig+0x82>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a17      	ldr	r2, [pc, #92]	; (800c6a0 <TIM_OC5_SetConfig+0xc4>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d00b      	beq.n	800c65e <TIM_OC5_SetConfig+0x82>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a16      	ldr	r2, [pc, #88]	; (800c6a4 <TIM_OC5_SetConfig+0xc8>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d007      	beq.n	800c65e <TIM_OC5_SetConfig+0x82>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a15      	ldr	r2, [pc, #84]	; (800c6a8 <TIM_OC5_SetConfig+0xcc>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d003      	beq.n	800c65e <TIM_OC5_SetConfig+0x82>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4a14      	ldr	r2, [pc, #80]	; (800c6ac <TIM_OC5_SetConfig+0xd0>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d109      	bne.n	800c672 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	697a      	ldr	r2, [r7, #20]
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	697a      	ldr	r2, [r7, #20]
 800c676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	621a      	str	r2, [r3, #32]
}
 800c68c:	bf00      	nop
 800c68e:	371c      	adds	r7, #28
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	40012c00 	.word	0x40012c00
 800c69c:	40013400 	.word	0x40013400
 800c6a0:	40014000 	.word	0x40014000
 800c6a4:	40014400 	.word	0x40014400
 800c6a8:	40014800 	.word	0x40014800
 800c6ac:	40015000 	.word	0x40015000

0800c6b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c6de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	021b      	lsls	r3, r3, #8
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	051b      	lsls	r3, r3, #20
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	4313      	orrs	r3, r2
 800c702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	4a1a      	ldr	r2, [pc, #104]	; (800c770 <TIM_OC6_SetConfig+0xc0>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d013      	beq.n	800c734 <TIM_OC6_SetConfig+0x84>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	4a19      	ldr	r2, [pc, #100]	; (800c774 <TIM_OC6_SetConfig+0xc4>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d00f      	beq.n	800c734 <TIM_OC6_SetConfig+0x84>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a18      	ldr	r2, [pc, #96]	; (800c778 <TIM_OC6_SetConfig+0xc8>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00b      	beq.n	800c734 <TIM_OC6_SetConfig+0x84>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a17      	ldr	r2, [pc, #92]	; (800c77c <TIM_OC6_SetConfig+0xcc>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d007      	beq.n	800c734 <TIM_OC6_SetConfig+0x84>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a16      	ldr	r2, [pc, #88]	; (800c780 <TIM_OC6_SetConfig+0xd0>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d003      	beq.n	800c734 <TIM_OC6_SetConfig+0x84>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a15      	ldr	r2, [pc, #84]	; (800c784 <TIM_OC6_SetConfig+0xd4>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d109      	bne.n	800c748 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c73a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	695b      	ldr	r3, [r3, #20]
 800c740:	029b      	lsls	r3, r3, #10
 800c742:	697a      	ldr	r2, [r7, #20]
 800c744:	4313      	orrs	r3, r2
 800c746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	685a      	ldr	r2, [r3, #4]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	621a      	str	r2, [r3, #32]
}
 800c762:	bf00      	nop
 800c764:	371c      	adds	r7, #28
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	40012c00 	.word	0x40012c00
 800c774:	40013400 	.word	0x40013400
 800c778:	40014000 	.word	0x40014000
 800c77c:	40014400 	.word	0x40014400
 800c780:	40014800 	.word	0x40014800
 800c784:	40015000 	.word	0x40015000

0800c788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f003 031f 	and.w	r3, r3, #31
 800c79a:	2201      	movs	r2, #1
 800c79c:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6a1a      	ldr	r2, [r3, #32]
 800c7a6:	697b      	ldr	r3, [r7, #20]
 800c7a8:	43db      	mvns	r3, r3
 800c7aa:	401a      	ands	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	6a1a      	ldr	r2, [r3, #32]
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	f003 031f 	and.w	r3, r3, #31
 800c7ba:	6879      	ldr	r1, [r7, #4]
 800c7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800c7c0:	431a      	orrs	r2, r3
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	621a      	str	r2, [r3, #32]
}
 800c7c6:	bf00      	nop
 800c7c8:	371c      	adds	r7, #28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b085      	sub	sp, #20
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e074      	b.n	800c8d6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a34      	ldr	r2, [pc, #208]	; (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d009      	beq.n	800c82a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a33      	ldr	r2, [pc, #204]	; (800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d004      	beq.n	800c82a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a31      	ldr	r2, [pc, #196]	; (800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d108      	bne.n	800c83c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c830:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	4313      	orrs	r3, r2
 800c83a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4a21      	ldr	r2, [pc, #132]	; (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d022      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c86c:	d01d      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a1f      	ldr	r2, [pc, #124]	; (800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d018      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a1d      	ldr	r2, [pc, #116]	; (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d013      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a1c      	ldr	r2, [pc, #112]	; (800c8f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d00e      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a15      	ldr	r2, [pc, #84]	; (800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d009      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a18      	ldr	r2, [pc, #96]	; (800c8fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d004      	beq.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a11      	ldr	r2, [pc, #68]	; (800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d10c      	bne.n	800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	689b      	ldr	r3, [r3, #8]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	4313      	orrs	r3, r2
 800c8ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2201      	movs	r2, #1
 800c8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	40012c00 	.word	0x40012c00
 800c8e8:	40013400 	.word	0x40013400
 800c8ec:	40015000 	.word	0x40015000
 800c8f0:	40000400 	.word	0x40000400
 800c8f4:	40000800 	.word	0x40000800
 800c8f8:	40000c00 	.word	0x40000c00
 800c8fc:	40014000 	.word	0x40014000

0800c900 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d101      	bne.n	800c99e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c99a:	2301      	movs	r3, #1
 800c99c:	e042      	b.n	800ca24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d106      	bne.n	800c9b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7fa fea3 	bl	80076fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2224      	movs	r2, #36	; 0x24
 800c9ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f022 0201 	bic.w	r2, r2, #1
 800c9cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f000 fbc4 	bl	800d15c <UART_SetConfig>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b01      	cmp	r3, #1
 800c9d8:	d101      	bne.n	800c9de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e022      	b.n	800ca24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 feb4 	bl	800d754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689a      	ldr	r2, [r3, #8]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ca0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f042 0201 	orr.w	r2, r2, #1
 800ca1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 ff3b 	bl	800d898 <UART_CheckIdleState>
 800ca22:	4603      	mov	r3, r0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3708      	adds	r7, #8
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b08a      	sub	sp, #40	; 0x28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	4613      	mov	r3, r2
 800ca38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca40:	2b20      	cmp	r3, #32
 800ca42:	d142      	bne.n	800caca <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d002      	beq.n	800ca50 <HAL_UART_Receive_IT+0x24>
 800ca4a:	88fb      	ldrh	r3, [r7, #6]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ca50:	2301      	movs	r3, #1
 800ca52:	e03b      	b.n	800cacc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d101      	bne.n	800ca62 <HAL_UART_Receive_IT+0x36>
 800ca5e:	2302      	movs	r3, #2
 800ca60:	e034      	b.n	800cacc <HAL_UART_Receive_IT+0xa0>
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2201      	movs	r2, #1
 800ca66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a17      	ldr	r2, [pc, #92]	; (800cad4 <HAL_UART_Receive_IT+0xa8>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d01f      	beq.n	800caba <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d018      	beq.n	800caba <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	e853 3f00 	ldrex	r3, [r3]
 800ca94:	613b      	str	r3, [r7, #16]
   return(result);
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	461a      	mov	r2, r3
 800caa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa6:	623b      	str	r3, [r7, #32]
 800caa8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caaa:	69f9      	ldr	r1, [r7, #28]
 800caac:	6a3a      	ldr	r2, [r7, #32]
 800caae:	e841 2300 	strex	r3, r2, [r1]
 800cab2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cab4:	69bb      	ldr	r3, [r7, #24]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1e6      	bne.n	800ca88 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800caba:	88fb      	ldrh	r3, [r7, #6]
 800cabc:	461a      	mov	r2, r3
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 fffd 	bl	800dac0 <UART_Start_Receive_IT>
 800cac6:	4603      	mov	r3, r0
 800cac8:	e000      	b.n	800cacc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800caca:	2302      	movs	r3, #2
  }
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3728      	adds	r7, #40	; 0x28
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	40008000 	.word	0x40008000

0800cad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b0ba      	sub	sp, #232	; 0xe8
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	69db      	ldr	r3, [r3, #28]
 800cae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cafe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb02:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb06:	4013      	ands	r3, r2
 800cb08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d11b      	bne.n	800cb4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d015      	beq.n	800cb4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb24:	f003 0320 	and.w	r3, r3, #32
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d105      	bne.n	800cb38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d009      	beq.n	800cb4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	f000 82d6 	beq.w	800d0ee <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	4798      	blx	r3
      }
      return;
 800cb4a:	e2d0      	b.n	800d0ee <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	f000 811f 	beq.w	800cd94 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb5a:	4b8b      	ldr	r3, [pc, #556]	; (800cd88 <HAL_UART_IRQHandler+0x2b0>)
 800cb5c:	4013      	ands	r3, r2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d106      	bne.n	800cb70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb66:	4b89      	ldr	r3, [pc, #548]	; (800cd8c <HAL_UART_IRQHandler+0x2b4>)
 800cb68:	4013      	ands	r3, r2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 8112 	beq.w	800cd94 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d011      	beq.n	800cba0 <HAL_UART_IRQHandler+0xc8>
 800cb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00b      	beq.n	800cba0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb96:	f043 0201 	orr.w	r2, r3, #1
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cba4:	f003 0302 	and.w	r3, r3, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d011      	beq.n	800cbd0 <HAL_UART_IRQHandler+0xf8>
 800cbac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb0:	f003 0301 	and.w	r3, r3, #1
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00b      	beq.n	800cbd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2202      	movs	r2, #2
 800cbbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbc6:	f043 0204 	orr.w	r2, r3, #4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbd4:	f003 0304 	and.w	r3, r3, #4
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d011      	beq.n	800cc00 <HAL_UART_IRQHandler+0x128>
 800cbdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d00b      	beq.n	800cc00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2204      	movs	r2, #4
 800cbee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbf6:	f043 0202 	orr.w	r2, r3, #2
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc04:	f003 0308 	and.w	r3, r3, #8
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d017      	beq.n	800cc3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc10:	f003 0320 	and.w	r3, r3, #32
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d105      	bne.n	800cc24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc1c:	4b5a      	ldr	r3, [pc, #360]	; (800cd88 <HAL_UART_IRQHandler+0x2b0>)
 800cc1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2208      	movs	r2, #8
 800cc2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc32:	f043 0208 	orr.w	r2, r3, #8
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d012      	beq.n	800cc6e <HAL_UART_IRQHandler+0x196>
 800cc48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00c      	beq.n	800cc6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc64:	f043 0220 	orr.w	r2, r3, #32
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 823c 	beq.w	800d0f2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc7e:	f003 0320 	and.w	r3, r3, #32
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d013      	beq.n	800ccae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d105      	bne.n	800cc9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d003      	beq.n	800ccae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	689b      	ldr	r3, [r3, #8]
 800ccbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccc2:	2b40      	cmp	r3, #64	; 0x40
 800ccc4:	d005      	beq.n	800ccd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d04f      	beq.n	800cd72 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f001 f81e 	bl	800dd14 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce2:	2b40      	cmp	r3, #64	; 0x40
 800cce4:	d141      	bne.n	800cd6a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3308      	adds	r3, #8
 800ccec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccf4:	e853 3f00 	ldrex	r3, [r3]
 800ccf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ccfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	3308      	adds	r3, #8
 800cd0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cd16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cd1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cd2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1d9      	bne.n	800cce6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d013      	beq.n	800cd62 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3e:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <HAL_UART_IRQHandler+0x2b8>)
 800cd40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fc fa8e 	bl	8009268 <HAL_DMA_Abort_IT>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d017      	beq.n	800cd82 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd60:	e00f      	b.n	800cd82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f9e4 	bl	800d130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd68:	e00b      	b.n	800cd82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f9e0 	bl	800d130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	e007      	b.n	800cd82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f9dc 	bl	800d130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd80:	e1b7      	b.n	800d0f2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd82:	bf00      	nop
    return;
 800cd84:	e1b5      	b.n	800d0f2 <HAL_UART_IRQHandler+0x61a>
 800cd86:	bf00      	nop
 800cd88:	10000001 	.word	0x10000001
 800cd8c:	04000120 	.word	0x04000120
 800cd90:	0800dde1 	.word	0x0800dde1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f040 814a 	bne.w	800d032 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cda2:	f003 0310 	and.w	r3, r3, #16
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f000 8143 	beq.w	800d032 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdb0:	f003 0310 	and.w	r3, r3, #16
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 813c 	beq.w	800d032 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2210      	movs	r2, #16
 800cdc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdcc:	2b40      	cmp	r3, #64	; 0x40
 800cdce:	f040 80b5 	bne.w	800cf3c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cdde:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 8187 	beq.w	800d0f6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	f080 817f 	bcs.w	800d0f6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cdfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f003 0320 	and.w	r3, r3, #32
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 8086 	bne.w	800cf20 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ce20:	e853 3f00 	ldrex	r3, [r3]
 800ce24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ce28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ce2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ce3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ce42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ce4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ce56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d1da      	bne.n	800ce14 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3308      	adds	r3, #8
 800ce64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce68:	e853 3f00 	ldrex	r3, [r3]
 800ce6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ce6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce70:	f023 0301 	bic.w	r3, r3, #1
 800ce74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	3308      	adds	r3, #8
 800ce7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ce82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ce86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ce8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ce8e:	e841 2300 	strex	r3, r2, [r1]
 800ce92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ce94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e1      	bne.n	800ce5e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cea4:	e853 3f00 	ldrex	r3, [r3]
 800cea8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ceaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cebe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cec0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cec6:	e841 2300 	strex	r3, r2, [r1]
 800ceca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1e3      	bne.n	800ce9a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee8:	e853 3f00 	ldrex	r3, [r3]
 800ceec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ceee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cef0:	f023 0310 	bic.w	r3, r3, #16
 800cef4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	461a      	mov	r2, r3
 800cefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cf02:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf0a:	e841 2300 	strex	r3, r2, [r1]
 800cf0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cf10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d1e4      	bne.n	800cee0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fc f94b 	bl	80091b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f905 	bl	800d144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf3a:	e0dc      	b.n	800d0f6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf48:	b29b      	uxth	r3, r3
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 80ce 	beq.w	800d0fa <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800cf5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 80c9 	beq.w	800d0fa <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf70:	e853 3f00 	ldrex	r3, [r3]
 800cf74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	461a      	mov	r2, r3
 800cf86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cf8a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf8c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cf92:	e841 2300 	strex	r3, r2, [r1]
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cf98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d1e4      	bne.n	800cf68 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	3308      	adds	r3, #8
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa8:	e853 3f00 	ldrex	r3, [r3]
 800cfac:	623b      	str	r3, [r7, #32]
   return(result);
 800cfae:	6a3b      	ldr	r3, [r7, #32]
 800cfb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfb4:	f023 0301 	bic.w	r3, r3, #1
 800cfb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3308      	adds	r3, #8
 800cfc2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cfc6:	633a      	str	r2, [r7, #48]	; 0x30
 800cfc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfce:	e841 2300 	strex	r3, r2, [r1]
 800cfd2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1e1      	bne.n	800cf9e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2220      	movs	r2, #32
 800cfde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	e853 3f00 	ldrex	r3, [r3]
 800cffa:	60fb      	str	r3, [r7, #12]
   return(result);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f023 0310 	bic.w	r3, r3, #16
 800d002:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	461a      	mov	r2, r3
 800d00c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d010:	61fb      	str	r3, [r7, #28]
 800d012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d014:	69b9      	ldr	r1, [r7, #24]
 800d016:	69fa      	ldr	r2, [r7, #28]
 800d018:	e841 2300 	strex	r3, r2, [r1]
 800d01c:	617b      	str	r3, [r7, #20]
   return(result);
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d1e4      	bne.n	800cfee <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d024:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f88a 	bl	800d144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d030:	e063      	b.n	800d0fa <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00e      	beq.n	800d05c <HAL_UART_IRQHandler+0x584>
 800d03e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d046:	2b00      	cmp	r3, #0
 800d048:	d008      	beq.n	800d05c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f001 fb61 	bl	800e71c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d05a:	e051      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d064:	2b00      	cmp	r3, #0
 800d066:	d014      	beq.n	800d092 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d06c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d070:	2b00      	cmp	r3, #0
 800d072:	d105      	bne.n	800d080 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d008      	beq.n	800d092 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d084:	2b00      	cmp	r3, #0
 800d086:	d03a      	beq.n	800d0fe <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	4798      	blx	r3
    }
    return;
 800d090:	e035      	b.n	800d0fe <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d009      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x5da>
 800d09e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d003      	beq.n	800d0b2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f000 feae 	bl	800de0c <UART_EndTransmit_IT>
    return;
 800d0b0:	e026      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d009      	beq.n	800d0d2 <HAL_UART_IRQHandler+0x5fa>
 800d0be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f001 fb3a 	bl	800e744 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0d0:	e016      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d0d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d010      	beq.n	800d100 <HAL_UART_IRQHandler+0x628>
 800d0de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	da0c      	bge.n	800d100 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f001 fb22 	bl	800e730 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d0ec:	e008      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
      return;
 800d0ee:	bf00      	nop
 800d0f0:	e006      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
    return;
 800d0f2:	bf00      	nop
 800d0f4:	e004      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
      return;
 800d0f6:	bf00      	nop
 800d0f8:	e002      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
      return;
 800d0fa:	bf00      	nop
 800d0fc:	e000      	b.n	800d100 <HAL_UART_IRQHandler+0x628>
    return;
 800d0fe:	bf00      	nop
  }
}
 800d100:	37e8      	adds	r7, #232	; 0xe8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop

0800d108 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d144:	b480      	push	{r7}
 800d146:	b083      	sub	sp, #12
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	460b      	mov	r3, r1
 800d14e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d150:	bf00      	nop
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr

0800d15c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d15c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d160:	b08c      	sub	sp, #48	; 0x30
 800d162:	af00      	add	r7, sp, #0
 800d164:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d166:	2300      	movs	r3, #0
 800d168:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	689a      	ldr	r2, [r3, #8]
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	691b      	ldr	r3, [r3, #16]
 800d174:	431a      	orrs	r2, r3
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	695b      	ldr	r3, [r3, #20]
 800d17a:	431a      	orrs	r2, r3
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	69db      	ldr	r3, [r3, #28]
 800d180:	4313      	orrs	r3, r2
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	4baa      	ldr	r3, [pc, #680]	; (800d434 <UART_SetConfig+0x2d8>)
 800d18c:	4013      	ands	r3, r2
 800d18e:	697a      	ldr	r2, [r7, #20]
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d194:	430b      	orrs	r3, r1
 800d196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	685b      	ldr	r3, [r3, #4]
 800d19e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	68da      	ldr	r2, [r3, #12]
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a9f      	ldr	r2, [pc, #636]	; (800d438 <UART_SetConfig+0x2dc>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d004      	beq.n	800d1c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	6a1b      	ldr	r3, [r3, #32]
 800d1c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d1d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1dc:	430b      	orrs	r3, r1
 800d1de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	f023 010f 	bic.w	r1, r3, #15
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	430a      	orrs	r2, r1
 800d1f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4a90      	ldr	r2, [pc, #576]	; (800d43c <UART_SetConfig+0x2e0>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d125      	bne.n	800d24c <UART_SetConfig+0xf0>
 800d200:	4b8f      	ldr	r3, [pc, #572]	; (800d440 <UART_SetConfig+0x2e4>)
 800d202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d206:	f003 0303 	and.w	r3, r3, #3
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	d81a      	bhi.n	800d244 <UART_SetConfig+0xe8>
 800d20e:	a201      	add	r2, pc, #4	; (adr r2, 800d214 <UART_SetConfig+0xb8>)
 800d210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d214:	0800d225 	.word	0x0800d225
 800d218:	0800d235 	.word	0x0800d235
 800d21c:	0800d22d 	.word	0x0800d22d
 800d220:	0800d23d 	.word	0x0800d23d
 800d224:	2301      	movs	r3, #1
 800d226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d22a:	e116      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d22c:	2302      	movs	r3, #2
 800d22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d232:	e112      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d234:	2304      	movs	r3, #4
 800d236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d23a:	e10e      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d23c:	2308      	movs	r3, #8
 800d23e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d242:	e10a      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d244:	2310      	movs	r3, #16
 800d246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d24a:	e106      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a7c      	ldr	r2, [pc, #496]	; (800d444 <UART_SetConfig+0x2e8>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d138      	bne.n	800d2c8 <UART_SetConfig+0x16c>
 800d256:	4b7a      	ldr	r3, [pc, #488]	; (800d440 <UART_SetConfig+0x2e4>)
 800d258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d25c:	f003 030c 	and.w	r3, r3, #12
 800d260:	2b0c      	cmp	r3, #12
 800d262:	d82d      	bhi.n	800d2c0 <UART_SetConfig+0x164>
 800d264:	a201      	add	r2, pc, #4	; (adr r2, 800d26c <UART_SetConfig+0x110>)
 800d266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d26a:	bf00      	nop
 800d26c:	0800d2a1 	.word	0x0800d2a1
 800d270:	0800d2c1 	.word	0x0800d2c1
 800d274:	0800d2c1 	.word	0x0800d2c1
 800d278:	0800d2c1 	.word	0x0800d2c1
 800d27c:	0800d2b1 	.word	0x0800d2b1
 800d280:	0800d2c1 	.word	0x0800d2c1
 800d284:	0800d2c1 	.word	0x0800d2c1
 800d288:	0800d2c1 	.word	0x0800d2c1
 800d28c:	0800d2a9 	.word	0x0800d2a9
 800d290:	0800d2c1 	.word	0x0800d2c1
 800d294:	0800d2c1 	.word	0x0800d2c1
 800d298:	0800d2c1 	.word	0x0800d2c1
 800d29c:	0800d2b9 	.word	0x0800d2b9
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2a6:	e0d8      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2ae:	e0d4      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2b0:	2304      	movs	r3, #4
 800d2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2b6:	e0d0      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2b8:	2308      	movs	r3, #8
 800d2ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2be:	e0cc      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2c0:	2310      	movs	r3, #16
 800d2c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2c6:	e0c8      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a5e      	ldr	r2, [pc, #376]	; (800d448 <UART_SetConfig+0x2ec>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d125      	bne.n	800d31e <UART_SetConfig+0x1c2>
 800d2d2:	4b5b      	ldr	r3, [pc, #364]	; (800d440 <UART_SetConfig+0x2e4>)
 800d2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d2dc:	2b30      	cmp	r3, #48	; 0x30
 800d2de:	d016      	beq.n	800d30e <UART_SetConfig+0x1b2>
 800d2e0:	2b30      	cmp	r3, #48	; 0x30
 800d2e2:	d818      	bhi.n	800d316 <UART_SetConfig+0x1ba>
 800d2e4:	2b20      	cmp	r3, #32
 800d2e6:	d00a      	beq.n	800d2fe <UART_SetConfig+0x1a2>
 800d2e8:	2b20      	cmp	r3, #32
 800d2ea:	d814      	bhi.n	800d316 <UART_SetConfig+0x1ba>
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d002      	beq.n	800d2f6 <UART_SetConfig+0x19a>
 800d2f0:	2b10      	cmp	r3, #16
 800d2f2:	d008      	beq.n	800d306 <UART_SetConfig+0x1aa>
 800d2f4:	e00f      	b.n	800d316 <UART_SetConfig+0x1ba>
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d2fc:	e0ad      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d2fe:	2302      	movs	r3, #2
 800d300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d304:	e0a9      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d306:	2304      	movs	r3, #4
 800d308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d30c:	e0a5      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d30e:	2308      	movs	r3, #8
 800d310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d314:	e0a1      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d316:	2310      	movs	r3, #16
 800d318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d31c:	e09d      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a4a      	ldr	r2, [pc, #296]	; (800d44c <UART_SetConfig+0x2f0>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d125      	bne.n	800d374 <UART_SetConfig+0x218>
 800d328:	4b45      	ldr	r3, [pc, #276]	; (800d440 <UART_SetConfig+0x2e4>)
 800d32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d32e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d332:	2bc0      	cmp	r3, #192	; 0xc0
 800d334:	d016      	beq.n	800d364 <UART_SetConfig+0x208>
 800d336:	2bc0      	cmp	r3, #192	; 0xc0
 800d338:	d818      	bhi.n	800d36c <UART_SetConfig+0x210>
 800d33a:	2b80      	cmp	r3, #128	; 0x80
 800d33c:	d00a      	beq.n	800d354 <UART_SetConfig+0x1f8>
 800d33e:	2b80      	cmp	r3, #128	; 0x80
 800d340:	d814      	bhi.n	800d36c <UART_SetConfig+0x210>
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <UART_SetConfig+0x1f0>
 800d346:	2b40      	cmp	r3, #64	; 0x40
 800d348:	d008      	beq.n	800d35c <UART_SetConfig+0x200>
 800d34a:	e00f      	b.n	800d36c <UART_SetConfig+0x210>
 800d34c:	2300      	movs	r3, #0
 800d34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d352:	e082      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d354:	2302      	movs	r3, #2
 800d356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d35a:	e07e      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d35c:	2304      	movs	r3, #4
 800d35e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d362:	e07a      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d364:	2308      	movs	r3, #8
 800d366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d36a:	e076      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d36c:	2310      	movs	r3, #16
 800d36e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d372:	e072      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a35      	ldr	r2, [pc, #212]	; (800d450 <UART_SetConfig+0x2f4>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d12a      	bne.n	800d3d4 <UART_SetConfig+0x278>
 800d37e:	4b30      	ldr	r3, [pc, #192]	; (800d440 <UART_SetConfig+0x2e4>)
 800d380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d38c:	d01a      	beq.n	800d3c4 <UART_SetConfig+0x268>
 800d38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d392:	d81b      	bhi.n	800d3cc <UART_SetConfig+0x270>
 800d394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d398:	d00c      	beq.n	800d3b4 <UART_SetConfig+0x258>
 800d39a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d39e:	d815      	bhi.n	800d3cc <UART_SetConfig+0x270>
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d003      	beq.n	800d3ac <UART_SetConfig+0x250>
 800d3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a8:	d008      	beq.n	800d3bc <UART_SetConfig+0x260>
 800d3aa:	e00f      	b.n	800d3cc <UART_SetConfig+0x270>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3b2:	e052      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d3b4:	2302      	movs	r3, #2
 800d3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3ba:	e04e      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d3bc:	2304      	movs	r3, #4
 800d3be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3c2:	e04a      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d3c4:	2308      	movs	r3, #8
 800d3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3ca:	e046      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d3cc:	2310      	movs	r3, #16
 800d3ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d3d2:	e042      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a17      	ldr	r2, [pc, #92]	; (800d438 <UART_SetConfig+0x2dc>)
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	d13a      	bne.n	800d454 <UART_SetConfig+0x2f8>
 800d3de:	4b18      	ldr	r3, [pc, #96]	; (800d440 <UART_SetConfig+0x2e4>)
 800d3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d3e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3ec:	d01a      	beq.n	800d424 <UART_SetConfig+0x2c8>
 800d3ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d3f2:	d81b      	bhi.n	800d42c <UART_SetConfig+0x2d0>
 800d3f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3f8:	d00c      	beq.n	800d414 <UART_SetConfig+0x2b8>
 800d3fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d3fe:	d815      	bhi.n	800d42c <UART_SetConfig+0x2d0>
 800d400:	2b00      	cmp	r3, #0
 800d402:	d003      	beq.n	800d40c <UART_SetConfig+0x2b0>
 800d404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d408:	d008      	beq.n	800d41c <UART_SetConfig+0x2c0>
 800d40a:	e00f      	b.n	800d42c <UART_SetConfig+0x2d0>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d412:	e022      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d414:	2302      	movs	r3, #2
 800d416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d41a:	e01e      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d41c:	2304      	movs	r3, #4
 800d41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d422:	e01a      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d424:	2308      	movs	r3, #8
 800d426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d42a:	e016      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d42c:	2310      	movs	r3, #16
 800d42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d432:	e012      	b.n	800d45a <UART_SetConfig+0x2fe>
 800d434:	cfff69f3 	.word	0xcfff69f3
 800d438:	40008000 	.word	0x40008000
 800d43c:	40013800 	.word	0x40013800
 800d440:	40021000 	.word	0x40021000
 800d444:	40004400 	.word	0x40004400
 800d448:	40004800 	.word	0x40004800
 800d44c:	40004c00 	.word	0x40004c00
 800d450:	40005000 	.word	0x40005000
 800d454:	2310      	movs	r3, #16
 800d456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4aae      	ldr	r2, [pc, #696]	; (800d718 <UART_SetConfig+0x5bc>)
 800d460:	4293      	cmp	r3, r2
 800d462:	f040 8097 	bne.w	800d594 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d466:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d46a:	2b08      	cmp	r3, #8
 800d46c:	d823      	bhi.n	800d4b6 <UART_SetConfig+0x35a>
 800d46e:	a201      	add	r2, pc, #4	; (adr r2, 800d474 <UART_SetConfig+0x318>)
 800d470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d474:	0800d499 	.word	0x0800d499
 800d478:	0800d4b7 	.word	0x0800d4b7
 800d47c:	0800d4a1 	.word	0x0800d4a1
 800d480:	0800d4b7 	.word	0x0800d4b7
 800d484:	0800d4a7 	.word	0x0800d4a7
 800d488:	0800d4b7 	.word	0x0800d4b7
 800d48c:	0800d4b7 	.word	0x0800d4b7
 800d490:	0800d4b7 	.word	0x0800d4b7
 800d494:	0800d4af 	.word	0x0800d4af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d498:	f7fd fdb2 	bl	800b000 <HAL_RCC_GetPCLK1Freq>
 800d49c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d49e:	e010      	b.n	800d4c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4a0:	4b9e      	ldr	r3, [pc, #632]	; (800d71c <UART_SetConfig+0x5c0>)
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d4a4:	e00d      	b.n	800d4c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4a6:	f7fd fd3d 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800d4aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d4ac:	e009      	b.n	800d4c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d4b4:	e005      	b.n	800d4c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d4c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 8130 	beq.w	800d72a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	4a94      	ldr	r2, [pc, #592]	; (800d720 <UART_SetConfig+0x5c4>)
 800d4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	685a      	ldr	r2, [r3, #4]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	005b      	lsls	r3, r3, #1
 800d4e6:	4413      	add	r3, r2
 800d4e8:	69ba      	ldr	r2, [r7, #24]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d305      	bcc.n	800d4fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4f4:	69ba      	ldr	r2, [r7, #24]
 800d4f6:	429a      	cmp	r2, r3
 800d4f8:	d903      	bls.n	800d502 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d500:	e113      	b.n	800d72a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d504:	2200      	movs	r2, #0
 800d506:	60bb      	str	r3, [r7, #8]
 800d508:	60fa      	str	r2, [r7, #12]
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d50e:	4a84      	ldr	r2, [pc, #528]	; (800d720 <UART_SetConfig+0x5c4>)
 800d510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d514:	b29b      	uxth	r3, r3
 800d516:	2200      	movs	r2, #0
 800d518:	603b      	str	r3, [r7, #0]
 800d51a:	607a      	str	r2, [r7, #4]
 800d51c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d520:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d524:	f7f7 fb42 	bl	8004bac <__aeabi_uldivmod>
 800d528:	4602      	mov	r2, r0
 800d52a:	460b      	mov	r3, r1
 800d52c:	4610      	mov	r0, r2
 800d52e:	4619      	mov	r1, r3
 800d530:	f04f 0200 	mov.w	r2, #0
 800d534:	f04f 0300 	mov.w	r3, #0
 800d538:	020b      	lsls	r3, r1, #8
 800d53a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d53e:	0202      	lsls	r2, r0, #8
 800d540:	6979      	ldr	r1, [r7, #20]
 800d542:	6849      	ldr	r1, [r1, #4]
 800d544:	0849      	lsrs	r1, r1, #1
 800d546:	2000      	movs	r0, #0
 800d548:	460c      	mov	r4, r1
 800d54a:	4605      	mov	r5, r0
 800d54c:	eb12 0804 	adds.w	r8, r2, r4
 800d550:	eb43 0905 	adc.w	r9, r3, r5
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2200      	movs	r2, #0
 800d55a:	469a      	mov	sl, r3
 800d55c:	4693      	mov	fp, r2
 800d55e:	4652      	mov	r2, sl
 800d560:	465b      	mov	r3, fp
 800d562:	4640      	mov	r0, r8
 800d564:	4649      	mov	r1, r9
 800d566:	f7f7 fb21 	bl	8004bac <__aeabi_uldivmod>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4613      	mov	r3, r2
 800d570:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d572:	6a3b      	ldr	r3, [r7, #32]
 800d574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d578:	d308      	bcc.n	800d58c <UART_SetConfig+0x430>
 800d57a:	6a3b      	ldr	r3, [r7, #32]
 800d57c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d580:	d204      	bcs.n	800d58c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a3a      	ldr	r2, [r7, #32]
 800d588:	60da      	str	r2, [r3, #12]
 800d58a:	e0ce      	b.n	800d72a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d592:	e0ca      	b.n	800d72a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	69db      	ldr	r3, [r3, #28]
 800d598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d59c:	d166      	bne.n	800d66c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d59e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5a2:	2b08      	cmp	r3, #8
 800d5a4:	d827      	bhi.n	800d5f6 <UART_SetConfig+0x49a>
 800d5a6:	a201      	add	r2, pc, #4	; (adr r2, 800d5ac <UART_SetConfig+0x450>)
 800d5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ac:	0800d5d1 	.word	0x0800d5d1
 800d5b0:	0800d5d9 	.word	0x0800d5d9
 800d5b4:	0800d5e1 	.word	0x0800d5e1
 800d5b8:	0800d5f7 	.word	0x0800d5f7
 800d5bc:	0800d5e7 	.word	0x0800d5e7
 800d5c0:	0800d5f7 	.word	0x0800d5f7
 800d5c4:	0800d5f7 	.word	0x0800d5f7
 800d5c8:	0800d5f7 	.word	0x0800d5f7
 800d5cc:	0800d5ef 	.word	0x0800d5ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5d0:	f7fd fd16 	bl	800b000 <HAL_RCC_GetPCLK1Freq>
 800d5d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d5d6:	e014      	b.n	800d602 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5d8:	f7fd fd28 	bl	800b02c <HAL_RCC_GetPCLK2Freq>
 800d5dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d5de:	e010      	b.n	800d602 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d5e0:	4b4e      	ldr	r3, [pc, #312]	; (800d71c <UART_SetConfig+0x5c0>)
 800d5e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d5e4:	e00d      	b.n	800d602 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d5e6:	f7fd fc9d 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800d5ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d5ec:	e009      	b.n	800d602 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d5f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d5f4:	e005      	b.n	800d602 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 8090 	beq.w	800d72a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60e:	4a44      	ldr	r2, [pc, #272]	; (800d720 <UART_SetConfig+0x5c4>)
 800d610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d614:	461a      	mov	r2, r3
 800d616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d618:	fbb3 f3f2 	udiv	r3, r3, r2
 800d61c:	005a      	lsls	r2, r3, #1
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	441a      	add	r2, r3
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d62e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d630:	6a3b      	ldr	r3, [r7, #32]
 800d632:	2b0f      	cmp	r3, #15
 800d634:	d916      	bls.n	800d664 <UART_SetConfig+0x508>
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d63c:	d212      	bcs.n	800d664 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	b29b      	uxth	r3, r3
 800d642:	f023 030f 	bic.w	r3, r3, #15
 800d646:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	085b      	lsrs	r3, r3, #1
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	b29a      	uxth	r2, r3
 800d654:	8bfb      	ldrh	r3, [r7, #30]
 800d656:	4313      	orrs	r3, r2
 800d658:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	8bfa      	ldrh	r2, [r7, #30]
 800d660:	60da      	str	r2, [r3, #12]
 800d662:	e062      	b.n	800d72a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d66a:	e05e      	b.n	800d72a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d66c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d670:	2b08      	cmp	r3, #8
 800d672:	d828      	bhi.n	800d6c6 <UART_SetConfig+0x56a>
 800d674:	a201      	add	r2, pc, #4	; (adr r2, 800d67c <UART_SetConfig+0x520>)
 800d676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67a:	bf00      	nop
 800d67c:	0800d6a1 	.word	0x0800d6a1
 800d680:	0800d6a9 	.word	0x0800d6a9
 800d684:	0800d6b1 	.word	0x0800d6b1
 800d688:	0800d6c7 	.word	0x0800d6c7
 800d68c:	0800d6b7 	.word	0x0800d6b7
 800d690:	0800d6c7 	.word	0x0800d6c7
 800d694:	0800d6c7 	.word	0x0800d6c7
 800d698:	0800d6c7 	.word	0x0800d6c7
 800d69c:	0800d6bf 	.word	0x0800d6bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6a0:	f7fd fcae 	bl	800b000 <HAL_RCC_GetPCLK1Freq>
 800d6a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d6a6:	e014      	b.n	800d6d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d6a8:	f7fd fcc0 	bl	800b02c <HAL_RCC_GetPCLK2Freq>
 800d6ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d6ae:	e010      	b.n	800d6d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6b0:	4b1a      	ldr	r3, [pc, #104]	; (800d71c <UART_SetConfig+0x5c0>)
 800d6b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d6b4:	e00d      	b.n	800d6d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b6:	f7fd fc35 	bl	800af24 <HAL_RCC_GetSysClockFreq>
 800d6ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d6bc:	e009      	b.n	800d6d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d6c4:	e005      	b.n	800d6d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d6d0:	bf00      	nop
    }

    if (pclk != 0U)
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d028      	beq.n	800d72a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6dc:	4a10      	ldr	r2, [pc, #64]	; (800d720 <UART_SetConfig+0x5c4>)
 800d6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	085b      	lsrs	r3, r3, #1
 800d6f0:	441a      	add	r2, r3
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	2b0f      	cmp	r3, #15
 800d700:	d910      	bls.n	800d724 <UART_SetConfig+0x5c8>
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d708:	d20c      	bcs.n	800d724 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	60da      	str	r2, [r3, #12]
 800d714:	e009      	b.n	800d72a <UART_SetConfig+0x5ce>
 800d716:	bf00      	nop
 800d718:	40008000 	.word	0x40008000
 800d71c:	00f42400 	.word	0x00f42400
 800d720:	08011d50 	.word	0x08011d50
      }
      else
      {
        ret = HAL_ERROR;
 800d724:	2301      	movs	r3, #1
 800d726:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d732:	697b      	ldr	r3, [r7, #20]
 800d734:	2201      	movs	r2, #1
 800d736:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2200      	movs	r2, #0
 800d73e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2200      	movs	r2, #0
 800d744:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d746:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3730      	adds	r7, #48	; 0x30
 800d74e:	46bd      	mov	sp, r7
 800d750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d760:	f003 0301 	and.w	r3, r3, #1
 800d764:	2b00      	cmp	r3, #0
 800d766:	d00a      	beq.n	800d77e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	685b      	ldr	r3, [r3, #4]
 800d76e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d782:	f003 0302 	and.w	r3, r3, #2
 800d786:	2b00      	cmp	r3, #0
 800d788:	d00a      	beq.n	800d7a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	430a      	orrs	r2, r1
 800d79e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a4:	f003 0304 	and.w	r3, r3, #4
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00a      	beq.n	800d7c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c6:	f003 0308 	and.w	r3, r3, #8
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00a      	beq.n	800d7e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	685b      	ldr	r3, [r3, #4]
 800d7d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	430a      	orrs	r2, r1
 800d7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e8:	f003 0310 	and.w	r3, r3, #16
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00a      	beq.n	800d806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	430a      	orrs	r2, r1
 800d804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	f003 0320 	and.w	r3, r3, #32
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00a      	beq.n	800d828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	689b      	ldr	r3, [r3, #8]
 800d818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	430a      	orrs	r2, r1
 800d826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d82c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d830:	2b00      	cmp	r3, #0
 800d832:	d01a      	beq.n	800d86a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	430a      	orrs	r2, r1
 800d848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d852:	d10a      	bne.n	800d86a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	685b      	ldr	r3, [r3, #4]
 800d85a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	430a      	orrs	r2, r1
 800d868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	430a      	orrs	r2, r1
 800d88a:	605a      	str	r2, [r3, #4]
  }
}
 800d88c:	bf00      	nop
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d8a8:	f7fa f848 	bl	800793c <HAL_GetTick>
 800d8ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f003 0308 	and.w	r3, r3, #8
 800d8b8:	2b08      	cmp	r3, #8
 800d8ba:	d10e      	bne.n	800d8da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8c0:	9300      	str	r3, [sp, #0]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f82f 	bl	800d92e <UART_WaitOnFlagUntilTimeout>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d001      	beq.n	800d8da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8d6:	2303      	movs	r3, #3
 800d8d8:	e025      	b.n	800d926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d10e      	bne.n	800d906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f000 f819 	bl	800d92e <UART_WaitOnFlagUntilTimeout>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d001      	beq.n	800d906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e00f      	b.n	800d926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2220      	movs	r2, #32
 800d90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2220      	movs	r2, #32
 800d912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d924:	2300      	movs	r3, #0
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b09c      	sub	sp, #112	; 0x70
 800d932:	af00      	add	r7, sp, #0
 800d934:	60f8      	str	r0, [r7, #12]
 800d936:	60b9      	str	r1, [r7, #8]
 800d938:	603b      	str	r3, [r7, #0]
 800d93a:	4613      	mov	r3, r2
 800d93c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d93e:	e0a9      	b.n	800da94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	f000 80a5 	beq.w	800da94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d94a:	f7f9 fff7 	bl	800793c <HAL_GetTick>
 800d94e:	4602      	mov	r2, r0
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	1ad3      	subs	r3, r2, r3
 800d954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d956:	429a      	cmp	r2, r3
 800d958:	d302      	bcc.n	800d960 <UART_WaitOnFlagUntilTimeout+0x32>
 800d95a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d140      	bne.n	800d9e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d968:	e853 3f00 	ldrex	r3, [r3]
 800d96c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d96e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d974:	667b      	str	r3, [r7, #100]	; 0x64
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d97e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d980:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d986:	e841 2300 	strex	r3, r2, [r1]
 800d98a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1e6      	bne.n	800d960 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3308      	adds	r3, #8
 800d998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a4:	f023 0301 	bic.w	r3, r3, #1
 800d9a8:	663b      	str	r3, [r7, #96]	; 0x60
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3308      	adds	r3, #8
 800d9b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800d9b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d9c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e5      	bne.n	800d992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2220      	movs	r2, #32
 800d9ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2220      	movs	r2, #32
 800d9d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e069      	b.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d051      	beq.n	800da94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d9fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d9fe:	d149      	bne.n	800da94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da12:	e853 3f00 	ldrex	r3, [r3]
 800da16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800da1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	461a      	mov	r2, r3
 800da26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da28:	637b      	str	r3, [r7, #52]	; 0x34
 800da2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800da2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da30:	e841 2300 	strex	r3, r2, [r1]
 800da34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1e6      	bne.n	800da0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	3308      	adds	r3, #8
 800da42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	e853 3f00 	ldrex	r3, [r3]
 800da4a:	613b      	str	r3, [r7, #16]
   return(result);
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	f023 0301 	bic.w	r3, r3, #1
 800da52:	66bb      	str	r3, [r7, #104]	; 0x68
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	3308      	adds	r3, #8
 800da5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800da5c:	623a      	str	r2, [r7, #32]
 800da5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da60:	69f9      	ldr	r1, [r7, #28]
 800da62:	6a3a      	ldr	r2, [r7, #32]
 800da64:	e841 2300 	strex	r3, r2, [r1]
 800da68:	61bb      	str	r3, [r7, #24]
   return(result);
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e5      	bne.n	800da3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2220      	movs	r2, #32
 800da74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2220      	movs	r2, #32
 800da7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2220      	movs	r2, #32
 800da84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800da90:	2303      	movs	r3, #3
 800da92:	e010      	b.n	800dab6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	69da      	ldr	r2, [r3, #28]
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	4013      	ands	r3, r2
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	bf0c      	ite	eq
 800daa4:	2301      	moveq	r3, #1
 800daa6:	2300      	movne	r3, #0
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	461a      	mov	r2, r3
 800daac:	79fb      	ldrb	r3, [r7, #7]
 800daae:	429a      	cmp	r2, r3
 800dab0:	f43f af46 	beq.w	800d940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3770      	adds	r7, #112	; 0x70
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
	...

0800dac0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b0a3      	sub	sp, #140	; 0x8c
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	4613      	mov	r3, r2
 800dacc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	88fa      	ldrh	r2, [r7, #6]
 800dad8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	88fa      	ldrh	r2, [r7, #6]
 800dae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf2:	d10e      	bne.n	800db12 <UART_Start_Receive_IT+0x52>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <UART_Start_Receive_IT+0x48>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db06:	e02d      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	22ff      	movs	r2, #255	; 0xff
 800db0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db10:	e028      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10d      	bne.n	800db36 <UART_Start_Receive_IT+0x76>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d104      	bne.n	800db2c <UART_Start_Receive_IT+0x6c>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	22ff      	movs	r2, #255	; 0xff
 800db26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db2a:	e01b      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	227f      	movs	r2, #127	; 0x7f
 800db30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db34:	e016      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db3e:	d10d      	bne.n	800db5c <UART_Start_Receive_IT+0x9c>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d104      	bne.n	800db52 <UART_Start_Receive_IT+0x92>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	227f      	movs	r2, #127	; 0x7f
 800db4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db50:	e008      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	223f      	movs	r2, #63	; 0x3f
 800db56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db5a:	e003      	b.n	800db64 <UART_Start_Receive_IT+0xa4>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2200      	movs	r2, #0
 800db68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	2222      	movs	r2, #34	; 0x22
 800db70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3308      	adds	r3, #8
 800db7a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db7e:	e853 3f00 	ldrex	r3, [r3]
 800db82:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800db84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db86:	f043 0301 	orr.w	r3, r3, #1
 800db8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	3308      	adds	r3, #8
 800db94:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800db98:	673a      	str	r2, [r7, #112]	; 0x70
 800db9a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800db9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dba0:	e841 2300 	strex	r3, r2, [r1]
 800dba4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800dba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1e3      	bne.n	800db74 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dbb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dbb4:	d153      	bne.n	800dc5e <UART_Start_Receive_IT+0x19e>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dbbc:	88fa      	ldrh	r2, [r7, #6]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d34d      	bcc.n	800dc5e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbca:	d107      	bne.n	800dbdc <UART_Start_Receive_IT+0x11c>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a4b      	ldr	r2, [pc, #300]	; (800dd04 <UART_Start_Receive_IT+0x244>)
 800dbd8:	671a      	str	r2, [r3, #112]	; 0x70
 800dbda:	e002      	b.n	800dbe2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4a4a      	ldr	r2, [pc, #296]	; (800dd08 <UART_Start_Receive_IT+0x248>)
 800dbe0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d01a      	beq.n	800dc28 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbfa:	e853 3f00 	ldrex	r3, [r3]
 800dbfe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dc14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc16:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dc1a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc1c:	e841 2300 	strex	r3, r2, [r1]
 800dc20:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dc22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d1e4      	bne.n	800dbf2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	3308      	adds	r3, #8
 800dc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc32:	e853 3f00 	ldrex	r3, [r3]
 800dc36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	3308      	adds	r3, #8
 800dc46:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dc48:	64ba      	str	r2, [r7, #72]	; 0x48
 800dc4a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dc4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc50:	e841 2300 	strex	r3, r2, [r1]
 800dc54:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dc56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d1e5      	bne.n	800dc28 <UART_Start_Receive_IT+0x168>
 800dc5c:	e04a      	b.n	800dcf4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc66:	d107      	bne.n	800dc78 <UART_Start_Receive_IT+0x1b8>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d103      	bne.n	800dc78 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	4a26      	ldr	r2, [pc, #152]	; (800dd0c <UART_Start_Receive_IT+0x24c>)
 800dc74:	671a      	str	r2, [r3, #112]	; 0x70
 800dc76:	e002      	b.n	800dc7e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	4a25      	ldr	r2, [pc, #148]	; (800dd10 <UART_Start_Receive_IT+0x250>)
 800dc7c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	691b      	ldr	r3, [r3, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d019      	beq.n	800dcc2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	e853 3f00 	ldrex	r3, [r3]
 800dc9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800dca2:	677b      	str	r3, [r7, #116]	; 0x74
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcac:	637b      	str	r3, [r7, #52]	; 0x34
 800dcae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e6      	bne.n	800dc8e <UART_Start_Receive_IT+0x1ce>
 800dcc0:	e018      	b.n	800dcf4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	e853 3f00 	ldrex	r3, [r3]
 800dcce:	613b      	str	r3, [r7, #16]
   return(result);
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f043 0320 	orr.w	r3, r3, #32
 800dcd6:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	461a      	mov	r2, r3
 800dcde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dce0:	623b      	str	r3, [r7, #32]
 800dce2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce4:	69f9      	ldr	r1, [r7, #28]
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	e841 2300 	strex	r3, r2, [r1]
 800dcec:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcee:	69bb      	ldr	r3, [r7, #24]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d1e6      	bne.n	800dcc2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	378c      	adds	r7, #140	; 0x8c
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	0800e41d 	.word	0x0800e41d
 800dd08:	0800e125 	.word	0x0800e125
 800dd0c:	0800dfc3 	.word	0x0800dfc3
 800dd10:	0800de63 	.word	0x0800de63

0800dd14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b095      	sub	sp, #84	; 0x54
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd24:	e853 3f00 	ldrex	r3, [r3]
 800dd28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dd30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd3a:	643b      	str	r3, [r7, #64]	; 0x40
 800dd3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dd40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dd42:	e841 2300 	strex	r3, r2, [r1]
 800dd46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d1e6      	bne.n	800dd1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	3308      	adds	r3, #8
 800dd54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd56:	6a3b      	ldr	r3, [r7, #32]
 800dd58:	e853 3f00 	ldrex	r3, [r3]
 800dd5c:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd64:	f023 0301 	bic.w	r3, r3, #1
 800dd68:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3308      	adds	r3, #8
 800dd70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd72:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd7a:	e841 2300 	strex	r3, r2, [r1]
 800dd7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d1e3      	bne.n	800dd4e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	d118      	bne.n	800ddc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	e853 3f00 	ldrex	r3, [r3]
 800dd9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	f023 0310 	bic.w	r3, r3, #16
 800dda2:	647b      	str	r3, [r7, #68]	; 0x44
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	461a      	mov	r2, r3
 800ddaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddac:	61bb      	str	r3, [r7, #24]
 800ddae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddb0:	6979      	ldr	r1, [r7, #20]
 800ddb2:	69ba      	ldr	r2, [r7, #24]
 800ddb4:	e841 2300 	strex	r3, r2, [r1]
 800ddb8:	613b      	str	r3, [r7, #16]
   return(result);
 800ddba:	693b      	ldr	r3, [r7, #16]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d1e6      	bne.n	800dd8e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ddd4:	bf00      	nop
 800ddd6:	3754      	adds	r7, #84	; 0x54
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f7ff f996 	bl	800d130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de04:	bf00      	nop
 800de06:	3710      	adds	r7, #16
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b088      	sub	sp, #32
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	60bb      	str	r3, [r7, #8]
   return(result);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de28:	61fb      	str	r3, [r7, #28]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	461a      	mov	r2, r3
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	61bb      	str	r3, [r7, #24]
 800de34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de36:	6979      	ldr	r1, [r7, #20]
 800de38:	69ba      	ldr	r2, [r7, #24]
 800de3a:	e841 2300 	strex	r3, r2, [r1]
 800de3e:	613b      	str	r3, [r7, #16]
   return(result);
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1e6      	bne.n	800de14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2220      	movs	r2, #32
 800de4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7ff f957 	bl	800d108 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de5a:	bf00      	nop
 800de5c:	3720      	adds	r7, #32
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800de62:	b580      	push	{r7, lr}
 800de64:	b096      	sub	sp, #88	; 0x58
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de7a:	2b22      	cmp	r3, #34	; 0x22
 800de7c:	f040 8095 	bne.w	800dfaa <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de86:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800de8a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800de8e:	b2d9      	uxtb	r1, r3
 800de90:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800de94:	b2da      	uxtb	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de9a:	400a      	ands	r2, r1
 800de9c:	b2d2      	uxtb	r2, r2
 800de9e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	3b01      	subs	r3, #1
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d178      	bne.n	800dfba <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded0:	e853 3f00 	ldrex	r3, [r3]
 800ded4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ded6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ded8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dedc:	653b      	str	r3, [r7, #80]	; 0x50
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dee6:	647b      	str	r3, [r7, #68]	; 0x44
 800dee8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800deec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800deee:	e841 2300 	strex	r3, r2, [r1]
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800def4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e6      	bne.n	800dec8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3308      	adds	r3, #8
 800df00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df04:	e853 3f00 	ldrex	r3, [r3]
 800df08:	623b      	str	r3, [r7, #32]
   return(result);
 800df0a:	6a3b      	ldr	r3, [r7, #32]
 800df0c:	f023 0301 	bic.w	r3, r3, #1
 800df10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	3308      	adds	r3, #8
 800df18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df1a:	633a      	str	r2, [r7, #48]	; 0x30
 800df1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df22:	e841 2300 	strex	r3, r2, [r1]
 800df26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1e5      	bne.n	800defa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2220      	movs	r2, #32
 800df32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df40:	2b01      	cmp	r3, #1
 800df42:	d12e      	bne.n	800dfa2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	e853 3f00 	ldrex	r3, [r3]
 800df56:	60fb      	str	r3, [r7, #12]
   return(result);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f023 0310 	bic.w	r3, r3, #16
 800df5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	461a      	mov	r2, r3
 800df66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df68:	61fb      	str	r3, [r7, #28]
 800df6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df6c:	69b9      	ldr	r1, [r7, #24]
 800df6e:	69fa      	ldr	r2, [r7, #28]
 800df70:	e841 2300 	strex	r3, r2, [r1]
 800df74:	617b      	str	r3, [r7, #20]
   return(result);
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e6      	bne.n	800df4a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	69db      	ldr	r3, [r3, #28]
 800df82:	f003 0310 	and.w	r3, r3, #16
 800df86:	2b10      	cmp	r3, #16
 800df88:	d103      	bne.n	800df92 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	2210      	movs	r2, #16
 800df90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff f8d2 	bl	800d144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfa0:	e00b      	b.n	800dfba <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7ff f8ba 	bl	800d11c <HAL_UART_RxCpltCallback>
}
 800dfa8:	e007      	b.n	800dfba <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	699a      	ldr	r2, [r3, #24]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	f042 0208 	orr.w	r2, r2, #8
 800dfb8:	619a      	str	r2, [r3, #24]
}
 800dfba:	bf00      	nop
 800dfbc:	3758      	adds	r7, #88	; 0x58
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}

0800dfc2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b096      	sub	sp, #88	; 0x58
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dfd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dfda:	2b22      	cmp	r3, #34	; 0x22
 800dfdc:	f040 8095 	bne.w	800e10a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800dff0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800dff4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dff8:	4013      	ands	r3, r2
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dffe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e004:	1c9a      	adds	r2, r3, #2
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e010:	b29b      	uxth	r3, r3
 800e012:	3b01      	subs	r3, #1
 800e014:	b29a      	uxth	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e022:	b29b      	uxth	r3, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	d178      	bne.n	800e11a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e030:	e853 3f00 	ldrex	r3, [r3]
 800e034:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	461a      	mov	r2, r3
 800e044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e046:	643b      	str	r3, [r7, #64]	; 0x40
 800e048:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e04a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e04c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e04e:	e841 2300 	strex	r3, r2, [r1]
 800e052:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1e6      	bne.n	800e028 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	3308      	adds	r3, #8
 800e060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e062:	6a3b      	ldr	r3, [r7, #32]
 800e064:	e853 3f00 	ldrex	r3, [r3]
 800e068:	61fb      	str	r3, [r7, #28]
   return(result);
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	f023 0301 	bic.w	r3, r3, #1
 800e070:	64bb      	str	r3, [r7, #72]	; 0x48
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	3308      	adds	r3, #8
 800e078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e07a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e07c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e082:	e841 2300 	strex	r3, r2, [r1]
 800e086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1e5      	bne.n	800e05a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2220      	movs	r2, #32
 800e092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2200      	movs	r2, #0
 800e09a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d12e      	bne.n	800e102 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	e853 3f00 	ldrex	r3, [r3]
 800e0b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f023 0310 	bic.w	r3, r3, #16
 800e0be:	647b      	str	r3, [r7, #68]	; 0x44
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c8:	61bb      	str	r3, [r7, #24]
 800e0ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0cc:	6979      	ldr	r1, [r7, #20]
 800e0ce:	69ba      	ldr	r2, [r7, #24]
 800e0d0:	e841 2300 	strex	r3, r2, [r1]
 800e0d4:	613b      	str	r3, [r7, #16]
   return(result);
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1e6      	bne.n	800e0aa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	f003 0310 	and.w	r3, r3, #16
 800e0e6:	2b10      	cmp	r3, #16
 800e0e8:	d103      	bne.n	800e0f2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2210      	movs	r2, #16
 800e0f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f7ff f822 	bl	800d144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e100:	e00b      	b.n	800e11a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f7ff f80a 	bl	800d11c <HAL_UART_RxCpltCallback>
}
 800e108:	e007      	b.n	800e11a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	699a      	ldr	r2, [r3, #24]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f042 0208 	orr.w	r2, r2, #8
 800e118:	619a      	str	r2, [r3, #24]
}
 800e11a:	bf00      	nop
 800e11c:	3758      	adds	r7, #88	; 0x58
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
	...

0800e124 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b0a6      	sub	sp, #152	; 0x98
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e132:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	69db      	ldr	r3, [r3, #28]
 800e13c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	689b      	ldr	r3, [r3, #8]
 800e150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e15a:	2b22      	cmp	r3, #34	; 0x22
 800e15c:	f040 814f 	bne.w	800e3fe <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e166:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e16a:	e0f6      	b.n	800e35a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e172:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e176:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e17a:	b2d9      	uxtb	r1, r3
 800e17c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e180:	b2da      	uxtb	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e186:	400a      	ands	r2, r1
 800e188:	b2d2      	uxtb	r2, r2
 800e18a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	b29a      	uxth	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	69db      	ldr	r3, [r3, #28]
 800e1ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e1b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1b6:	f003 0307 	and.w	r3, r3, #7
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d053      	beq.n	800e266 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e1be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1c2:	f003 0301 	and.w	r3, r3, #1
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d011      	beq.n	800e1ee <UART_RxISR_8BIT_FIFOEN+0xca>
 800e1ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00b      	beq.n	800e1ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1e4:	f043 0201 	orr.w	r2, r3, #1
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d011      	beq.n	800e21e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e1fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e1fe:	f003 0301 	and.w	r3, r3, #1
 800e202:	2b00      	cmp	r3, #0
 800e204:	d00b      	beq.n	800e21e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2202      	movs	r2, #2
 800e20c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e214:	f043 0204 	orr.w	r2, r3, #4
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e21e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e222:	f003 0304 	and.w	r3, r3, #4
 800e226:	2b00      	cmp	r3, #0
 800e228:	d011      	beq.n	800e24e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e22a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e22e:	f003 0301 	and.w	r3, r3, #1
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00b      	beq.n	800e24e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2204      	movs	r2, #4
 800e23c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e244:	f043 0202 	orr.w	r2, r3, #2
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e254:	2b00      	cmp	r3, #0
 800e256:	d006      	beq.n	800e266 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7fe ff69 	bl	800d130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2200      	movs	r2, #0
 800e262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d173      	bne.n	800e35a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e282:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	461a      	mov	r2, r3
 800e290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e294:	66bb      	str	r3, [r7, #104]	; 0x68
 800e296:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e298:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e29a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e29c:	e841 2300 	strex	r3, r2, [r1]
 800e2a0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e2a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d1e4      	bne.n	800e272 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	3308      	adds	r3, #8
 800e2ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2b2:	e853 3f00 	ldrex	r3, [r3]
 800e2b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e2b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e2be:	f023 0301 	bic.w	r3, r3, #1
 800e2c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	3308      	adds	r3, #8
 800e2ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e2cc:	657a      	str	r2, [r7, #84]	; 0x54
 800e2ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2d4:	e841 2300 	strex	r3, r2, [r1]
 800e2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d1e3      	bne.n	800e2a8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d12e      	bne.n	800e354 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e304:	e853 3f00 	ldrex	r3, [r3]
 800e308:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30c:	f023 0310 	bic.w	r3, r3, #16
 800e310:	67bb      	str	r3, [r7, #120]	; 0x78
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	461a      	mov	r2, r3
 800e318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e31a:	643b      	str	r3, [r7, #64]	; 0x40
 800e31c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e31e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e320:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e322:	e841 2300 	strex	r3, r2, [r1]
 800e326:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1e6      	bne.n	800e2fc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	69db      	ldr	r3, [r3, #28]
 800e334:	f003 0310 	and.w	r3, r3, #16
 800e338:	2b10      	cmp	r3, #16
 800e33a:	d103      	bne.n	800e344 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2210      	movs	r2, #16
 800e342:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e34a:	4619      	mov	r1, r3
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7fe fef9 	bl	800d144 <HAL_UARTEx_RxEventCallback>
 800e352:	e002      	b.n	800e35a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7fe fee1 	bl	800d11c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e35a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d006      	beq.n	800e370 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e366:	f003 0320 	and.w	r3, r3, #32
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	f47f aefe 	bne.w	800e16c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e376:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e37a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d045      	beq.n	800e40e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e388:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d23e      	bcs.n	800e40e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3308      	adds	r3, #8
 800e396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	e853 3f00 	ldrex	r3, [r3]
 800e39e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e3a6:	673b      	str	r3, [r7, #112]	; 0x70
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	3308      	adds	r3, #8
 800e3ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e3b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e5      	bne.n	800e390 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	4a14      	ldr	r2, [pc, #80]	; (800e418 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e3c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	e853 3f00 	ldrex	r3, [r3]
 800e3d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	f043 0320 	orr.w	r3, r3, #32
 800e3de:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e3e8:	61bb      	str	r3, [r7, #24]
 800e3ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ec:	6979      	ldr	r1, [r7, #20]
 800e3ee:	69ba      	ldr	r2, [r7, #24]
 800e3f0:	e841 2300 	strex	r3, r2, [r1]
 800e3f4:	613b      	str	r3, [r7, #16]
   return(result);
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1e6      	bne.n	800e3ca <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3fc:	e007      	b.n	800e40e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	699a      	ldr	r2, [r3, #24]
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f042 0208 	orr.w	r2, r2, #8
 800e40c:	619a      	str	r2, [r3, #24]
}
 800e40e:	bf00      	nop
 800e410:	3798      	adds	r7, #152	; 0x98
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	0800de63 	.word	0x0800de63

0800e41c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b0a8      	sub	sp, #160	; 0xa0
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e42a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	69db      	ldr	r3, [r3, #28]
 800e434:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	689b      	ldr	r3, [r3, #8]
 800e448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e452:	2b22      	cmp	r3, #34	; 0x22
 800e454:	f040 8153 	bne.w	800e6fe <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e45e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e462:	e0fa      	b.n	800e65a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e46a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e472:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e476:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e47a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e47e:	4013      	ands	r3, r2
 800e480:	b29a      	uxth	r2, r3
 800e482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e486:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48c:	1c9a      	adds	r2, r3, #2
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e498:	b29b      	uxth	r3, r3
 800e49a:	3b01      	subs	r3, #1
 800e49c:	b29a      	uxth	r2, r3
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	69db      	ldr	r3, [r3, #28]
 800e4aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e4ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4b2:	f003 0307 	and.w	r3, r3, #7
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d053      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4be:	f003 0301 	and.w	r3, r3, #1
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d011      	beq.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0xce>
 800e4c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d00b      	beq.n	800e4ea <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4e0:	f043 0201 	orr.w	r2, r3, #1
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e4ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e4ee:	f003 0302 	and.w	r3, r3, #2
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d011      	beq.n	800e51a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e4f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e4fa:	f003 0301 	and.w	r3, r3, #1
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00b      	beq.n	800e51a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2202      	movs	r2, #2
 800e508:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e510:	f043 0204 	orr.w	r2, r3, #4
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e51e:	f003 0304 	and.w	r3, r3, #4
 800e522:	2b00      	cmp	r3, #0
 800e524:	d011      	beq.n	800e54a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e526:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e52a:	f003 0301 	and.w	r3, r3, #1
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d00b      	beq.n	800e54a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2204      	movs	r2, #4
 800e538:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e540:	f043 0202 	orr.w	r2, r3, #2
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e550:	2b00      	cmp	r3, #0
 800e552:	d006      	beq.n	800e562 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f7fe fdeb 	bl	800d130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e568:	b29b      	uxth	r3, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d175      	bne.n	800e65a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e574:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e576:	e853 3f00 	ldrex	r3, [r3]
 800e57a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e57e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	461a      	mov	r2, r3
 800e58c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e590:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e592:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e594:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e596:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e598:	e841 2300 	strex	r3, r2, [r1]
 800e59c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e59e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1e4      	bne.n	800e56e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	3308      	adds	r3, #8
 800e5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ae:	e853 3f00 	ldrex	r3, [r3]
 800e5b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e5ba:	f023 0301 	bic.w	r3, r3, #1
 800e5be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	3308      	adds	r3, #8
 800e5c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e5cc:	65ba      	str	r2, [r7, #88]	; 0x58
 800e5ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e5d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5d4:	e841 2300 	strex	r3, r2, [r1]
 800e5d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e5da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1e1      	bne.n	800e5a4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2220      	movs	r2, #32
 800e5e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f2:	2b01      	cmp	r3, #1
 800e5f4:	d12e      	bne.n	800e654 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	e853 3f00 	ldrex	r3, [r3]
 800e608:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e60c:	f023 0310 	bic.w	r3, r3, #16
 800e610:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	461a      	mov	r2, r3
 800e618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e61a:	647b      	str	r3, [r7, #68]	; 0x44
 800e61c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e61e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e620:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e622:	e841 2300 	strex	r3, r2, [r1]
 800e626:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d1e6      	bne.n	800e5fc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	69db      	ldr	r3, [r3, #28]
 800e634:	f003 0310 	and.w	r3, r3, #16
 800e638:	2b10      	cmp	r3, #16
 800e63a:	d103      	bne.n	800e644 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2210      	movs	r2, #16
 800e642:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e64a:	4619      	mov	r1, r3
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f7fe fd79 	bl	800d144 <HAL_UARTEx_RxEventCallback>
 800e652:	e002      	b.n	800e65a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f7fe fd61 	bl	800d11c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e65a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d006      	beq.n	800e670 <UART_RxISR_16BIT_FIFOEN+0x254>
 800e662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f47f aefa 	bne.w	800e464 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e676:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e67a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d045      	beq.n	800e70e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e688:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d23e      	bcs.n	800e70e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	3308      	adds	r3, #8
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69a:	e853 3f00 	ldrex	r3, [r3]
 800e69e:	623b      	str	r3, [r7, #32]
   return(result);
 800e6a0:	6a3b      	ldr	r3, [r7, #32]
 800e6a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e6a6:	677b      	str	r3, [r7, #116]	; 0x74
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3308      	adds	r3, #8
 800e6ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e6b0:	633a      	str	r2, [r7, #48]	; 0x30
 800e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b8:	e841 2300 	strex	r3, r2, [r1]
 800e6bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d1e5      	bne.n	800e690 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a14      	ldr	r2, [pc, #80]	; (800e718 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800e6c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	e853 3f00 	ldrex	r3, [r3]
 800e6d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f043 0320 	orr.w	r3, r3, #32
 800e6de:	673b      	str	r3, [r7, #112]	; 0x70
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6e8:	61fb      	str	r3, [r7, #28]
 800e6ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ec:	69b9      	ldr	r1, [r7, #24]
 800e6ee:	69fa      	ldr	r2, [r7, #28]
 800e6f0:	e841 2300 	strex	r3, r2, [r1]
 800e6f4:	617b      	str	r3, [r7, #20]
   return(result);
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1e6      	bne.n	800e6ca <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6fc:	e007      	b.n	800e70e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	699a      	ldr	r2, [r3, #24]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f042 0208 	orr.w	r2, r2, #8
 800e70c:	619a      	str	r2, [r3, #24]
}
 800e70e:	bf00      	nop
 800e710:	37a0      	adds	r7, #160	; 0xa0
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	0800dfc3 	.word	0x0800dfc3

0800e71c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e724:	bf00      	nop
 800e726:	370c      	adds	r7, #12
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e738:	bf00      	nop
 800e73a:	370c      	adds	r7, #12
 800e73c:	46bd      	mov	sp, r7
 800e73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e742:	4770      	bx	lr

0800e744 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e74c:	bf00      	nop
 800e74e:	370c      	adds	r7, #12
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e766:	2b01      	cmp	r3, #1
 800e768:	d101      	bne.n	800e76e <HAL_UARTEx_DisableFifoMode+0x16>
 800e76a:	2302      	movs	r3, #2
 800e76c:	e027      	b.n	800e7be <HAL_UARTEx_DisableFifoMode+0x66>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2224      	movs	r2, #36	; 0x24
 800e77a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f022 0201 	bic.w	r2, r2, #1
 800e794:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e79c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68fa      	ldr	r2, [r7, #12]
 800e7aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2220      	movs	r2, #32
 800e7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e7bc:	2300      	movs	r3, #0
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3714      	adds	r7, #20
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d101      	bne.n	800e7e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7de:	2302      	movs	r3, #2
 800e7e0:	e02d      	b.n	800e83e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2224      	movs	r2, #36	; 0x24
 800e7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f022 0201 	bic.w	r2, r2, #1
 800e808:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	683a      	ldr	r2, [r7, #0]
 800e81a:	430a      	orrs	r2, r1
 800e81c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f850 	bl	800e8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2220      	movs	r2, #32
 800e830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b084      	sub	sp, #16
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e856:	2b01      	cmp	r3, #1
 800e858:	d101      	bne.n	800e85e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e85a:	2302      	movs	r3, #2
 800e85c:	e02d      	b.n	800e8ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2224      	movs	r2, #36	; 0x24
 800e86a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	681a      	ldr	r2, [r3, #0]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f022 0201 	bic.w	r2, r2, #1
 800e884:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	430a      	orrs	r2, r1
 800e898:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 f812 	bl	800e8c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68fa      	ldr	r2, [r7, #12]
 800e8a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
	...

0800e8c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d108      	bne.n	800e8e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8e4:	e031      	b.n	800e94a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e8ea:	2308      	movs	r3, #8
 800e8ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	0e5b      	lsrs	r3, r3, #25
 800e8f6:	b2db      	uxtb	r3, r3
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	689b      	ldr	r3, [r3, #8]
 800e904:	0f5b      	lsrs	r3, r3, #29
 800e906:	b2db      	uxtb	r3, r3
 800e908:	f003 0307 	and.w	r3, r3, #7
 800e90c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e90e:	7bbb      	ldrb	r3, [r7, #14]
 800e910:	7b3a      	ldrb	r2, [r7, #12]
 800e912:	4911      	ldr	r1, [pc, #68]	; (800e958 <UARTEx_SetNbDataToProcess+0x94>)
 800e914:	5c8a      	ldrb	r2, [r1, r2]
 800e916:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e91a:	7b3a      	ldrb	r2, [r7, #12]
 800e91c:	490f      	ldr	r1, [pc, #60]	; (800e95c <UARTEx_SetNbDataToProcess+0x98>)
 800e91e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e920:	fb93 f3f2 	sdiv	r3, r3, r2
 800e924:	b29a      	uxth	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	7b7a      	ldrb	r2, [r7, #13]
 800e930:	4909      	ldr	r1, [pc, #36]	; (800e958 <UARTEx_SetNbDataToProcess+0x94>)
 800e932:	5c8a      	ldrb	r2, [r1, r2]
 800e934:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e938:	7b7a      	ldrb	r2, [r7, #13]
 800e93a:	4908      	ldr	r1, [pc, #32]	; (800e95c <UARTEx_SetNbDataToProcess+0x98>)
 800e93c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e93e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e942:	b29a      	uxth	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e94a:	bf00      	nop
 800e94c:	3714      	adds	r7, #20
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	08011d68 	.word	0x08011d68
 800e95c:	08011d70 	.word	0x08011d70

0800e960 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e960:	b480      	push	{r7}
 800e962:	b085      	sub	sp, #20
 800e964:	af00      	add	r7, sp, #0
 800e966:	4603      	mov	r3, r0
 800e968:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e96a:	2300      	movs	r3, #0
 800e96c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e96e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e972:	2b84      	cmp	r3, #132	; 0x84
 800e974:	d005      	beq.n	800e982 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e976:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	4413      	add	r3, r2
 800e97e:	3303      	adds	r3, #3
 800e980:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e982:	68fb      	ldr	r3, [r7, #12]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr

0800e990 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e994:	f000 fee8 	bl	800f768 <vTaskStartScheduler>
  
  return osOK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a0:	b087      	sub	sp, #28
 800e9a2:	af02      	add	r7, sp, #8
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	685c      	ldr	r4, [r3, #4]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9b4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7ff ffcf 	bl	800e960 <makeFreeRtosPriority>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	f107 030c 	add.w	r3, r7, #12
 800e9c8:	9301      	str	r3, [sp, #4]
 800e9ca:	9200      	str	r2, [sp, #0]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	4632      	mov	r2, r6
 800e9d0:	4629      	mov	r1, r5
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 fd54 	bl	800f480 <xTaskCreate>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d001      	beq.n	800e9e2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	e000      	b.n	800e9e4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3714      	adds	r7, #20
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e9ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d001      	beq.n	800ea02 <osDelay+0x16>
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	e000      	b.n	800ea04 <osDelay+0x18>
 800ea02:	2301      	movs	r3, #1
 800ea04:	4618      	mov	r0, r3
 800ea06:	f000 fe7b 	bl	800f700 <vTaskDelay>
  
  return osOK;
 800ea0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3710      	adds	r7, #16
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ea1c:	2001      	movs	r0, #1
 800ea1e:	f000 f9a1 	bl	800ed64 <xQueueCreateMutex>
 800ea22:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2b01      	cmp	r3, #1
 800ea3a:	d110      	bne.n	800ea5e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800ea3c:	2203      	movs	r2, #3
 800ea3e:	2100      	movs	r1, #0
 800ea40:	2001      	movs	r0, #1
 800ea42:	f000 f920 	bl	800ec86 <xQueueGenericCreate>
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d005      	beq.n	800ea5a <osSemaphoreCreate+0x2e>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	2200      	movs	r2, #0
 800ea52:	2100      	movs	r1, #0
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f000 f99d 	bl	800ed94 <xQueueGenericSend>
    return sema;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	e000      	b.n	800ea60 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800ea5e:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f103 0208 	add.w	r2, r3, #8
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f103 0208 	add.w	r2, r3, #8
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	f103 0208 	add.w	r2, r3, #8
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2200      	movs	r2, #0
 800ea9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ea9c:	bf00      	nop
 800ea9e:	370c      	adds	r7, #12
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa6:	4770      	bx	lr

0800eaa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b083      	sub	sp, #12
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eab6:	bf00      	nop
 800eab8:	370c      	adds	r7, #12
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr

0800eac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eac2:	b480      	push	{r7}
 800eac4:	b085      	sub	sp, #20
 800eac6:	af00      	add	r7, sp, #0
 800eac8:	6078      	str	r0, [r7, #4]
 800eaca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	689a      	ldr	r2, [r3, #8]
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	689b      	ldr	r3, [r3, #8]
 800eae4:	683a      	ldr	r2, [r7, #0]
 800eae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	1c5a      	adds	r2, r3, #1
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	601a      	str	r2, [r3, #0]
}
 800eafe:	bf00      	nop
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb20:	d103      	bne.n	800eb2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	60fb      	str	r3, [r7, #12]
 800eb28:	e00c      	b.n	800eb44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3308      	adds	r3, #8
 800eb2e:	60fb      	str	r3, [r7, #12]
 800eb30:	e002      	b.n	800eb38 <vListInsert+0x2e>
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	60fb      	str	r3, [r7, #12]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	68ba      	ldr	r2, [r7, #8]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d2f6      	bcs.n	800eb32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	685a      	ldr	r2, [r3, #4]
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	1c5a      	adds	r2, r3, #1
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	601a      	str	r2, [r3, #0]
}
 800eb70:	bf00      	nop
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	691b      	ldr	r3, [r3, #16]
 800eb88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	6892      	ldr	r2, [r2, #8]
 800eb92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	689b      	ldr	r3, [r3, #8]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	6852      	ldr	r2, [r2, #4]
 800eb9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	687a      	ldr	r2, [r7, #4]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d103      	bne.n	800ebb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	689a      	ldr	r2, [r3, #8]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	1e5a      	subs	r2, r3, #1
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d10a      	bne.n	800ebfa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ebe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe8:	f383 8811 	msr	BASEPRI, r3
 800ebec:	f3bf 8f6f 	isb	sy
 800ebf0:	f3bf 8f4f 	dsb	sy
 800ebf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ebf6:	bf00      	nop
 800ebf8:	e7fe      	b.n	800ebf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ebfa:	f001 fcbb 	bl	8010574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec06:	68f9      	ldr	r1, [r7, #12]
 800ec08:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec0a:	fb01 f303 	mul.w	r3, r1, r3
 800ec0e:	441a      	add	r2, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2200      	movs	r2, #0
 800ec18:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	68f9      	ldr	r1, [r7, #12]
 800ec2e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ec30:	fb01 f303 	mul.w	r3, r1, r3
 800ec34:	441a      	add	r2, r3
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	22ff      	movs	r2, #255	; 0xff
 800ec3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	22ff      	movs	r2, #255	; 0xff
 800ec46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d109      	bne.n	800ec64 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	691b      	ldr	r3, [r3, #16]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d00f      	beq.n	800ec78 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	3310      	adds	r3, #16
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f000 ff8b 	bl	800fb78 <xTaskRemoveFromEventList>
 800ec62:	e009      	b.n	800ec78 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	3310      	adds	r3, #16
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7ff fefd 	bl	800ea68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	3324      	adds	r3, #36	; 0x24
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fef8 	bl	800ea68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ec78:	f001 fcac 	bl	80105d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ec7c:	2301      	movs	r3, #1
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b08a      	sub	sp, #40	; 0x28
 800ec8a:	af02      	add	r7, sp, #8
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	60b9      	str	r1, [r7, #8]
 800ec90:	4613      	mov	r3, r2
 800ec92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10a      	bne.n	800ecb0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	613b      	str	r3, [r7, #16]
}
 800ecac:	bf00      	nop
 800ecae:	e7fe      	b.n	800ecae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	68ba      	ldr	r2, [r7, #8]
 800ecb4:	fb02 f303 	mul.w	r3, r2, r3
 800ecb8:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	3348      	adds	r3, #72	; 0x48
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f001 fd7a 	bl	80107b8 <pvPortMalloc>
 800ecc4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00d      	beq.n	800ece8 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	3348      	adds	r3, #72	; 0x48
 800ecd4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ecd6:	79fa      	ldrb	r2, [r7, #7]
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	9300      	str	r3, [sp, #0]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	697a      	ldr	r2, [r7, #20]
 800ece0:	68b9      	ldr	r1, [r7, #8]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f000 f805 	bl	800ecf2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ece8:	69bb      	ldr	r3, [r7, #24]
	}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3720      	adds	r7, #32
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b084      	sub	sp, #16
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	60f8      	str	r0, [r7, #12]
 800ecfa:	60b9      	str	r1, [r7, #8]
 800ecfc:	607a      	str	r2, [r7, #4]
 800ecfe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d103      	bne.n	800ed0e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	69ba      	ldr	r2, [r7, #24]
 800ed0a:	601a      	str	r2, [r3, #0]
 800ed0c:	e002      	b.n	800ed14 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ed20:	2101      	movs	r1, #1
 800ed22:	69b8      	ldr	r0, [r7, #24]
 800ed24:	f7ff ff54 	bl	800ebd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ed28:	bf00      	nop
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00e      	beq.n	800ed5c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ed50:	2300      	movs	r3, #0
 800ed52:	2200      	movs	r2, #0
 800ed54:	2100      	movs	r1, #0
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 f81c 	bl	800ed94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}

0800ed64 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	617b      	str	r3, [r7, #20]
 800ed72:	2300      	movs	r3, #0
 800ed74:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ed76:	79fb      	ldrb	r3, [r7, #7]
 800ed78:	461a      	mov	r2, r3
 800ed7a:	6939      	ldr	r1, [r7, #16]
 800ed7c:	6978      	ldr	r0, [r7, #20]
 800ed7e:	f7ff ff82 	bl	800ec86 <xQueueGenericCreate>
 800ed82:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f7ff ffd3 	bl	800ed30 <prvInitialiseMutex>

		return xNewQueue;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
	}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b08e      	sub	sp, #56	; 0x38
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	607a      	str	r2, [r7, #4]
 800eda0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800eda2:	2300      	movs	r3, #0
 800eda4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	2b00      	cmp	r3, #0
 800edae:	d10a      	bne.n	800edc6 <xQueueGenericSend+0x32>
	__asm volatile
 800edb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb4:	f383 8811 	msr	BASEPRI, r3
 800edb8:	f3bf 8f6f 	isb	sy
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800edc2:	bf00      	nop
 800edc4:	e7fe      	b.n	800edc4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d103      	bne.n	800edd4 <xQueueGenericSend+0x40>
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d101      	bne.n	800edd8 <xQueueGenericSend+0x44>
 800edd4:	2301      	movs	r3, #1
 800edd6:	e000      	b.n	800edda <xQueueGenericSend+0x46>
 800edd8:	2300      	movs	r3, #0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d10a      	bne.n	800edf4 <xQueueGenericSend+0x60>
	__asm volatile
 800edde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800edf0:	bf00      	nop
 800edf2:	e7fe      	b.n	800edf2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	d103      	bne.n	800ee02 <xQueueGenericSend+0x6e>
 800edfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d101      	bne.n	800ee06 <xQueueGenericSend+0x72>
 800ee02:	2301      	movs	r3, #1
 800ee04:	e000      	b.n	800ee08 <xQueueGenericSend+0x74>
 800ee06:	2300      	movs	r3, #0
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d10a      	bne.n	800ee22 <xQueueGenericSend+0x8e>
	__asm volatile
 800ee0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee10:	f383 8811 	msr	BASEPRI, r3
 800ee14:	f3bf 8f6f 	isb	sy
 800ee18:	f3bf 8f4f 	dsb	sy
 800ee1c:	623b      	str	r3, [r7, #32]
}
 800ee1e:	bf00      	nop
 800ee20:	e7fe      	b.n	800ee20 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ee22:	f001 f855 	bl	800fed0 <xTaskGetSchedulerState>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d102      	bne.n	800ee32 <xQueueGenericSend+0x9e>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <xQueueGenericSend+0xa2>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <xQueueGenericSend+0xa4>
 800ee36:	2300      	movs	r3, #0
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10a      	bne.n	800ee52 <xQueueGenericSend+0xbe>
	__asm volatile
 800ee3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee40:	f383 8811 	msr	BASEPRI, r3
 800ee44:	f3bf 8f6f 	isb	sy
 800ee48:	f3bf 8f4f 	dsb	sy
 800ee4c:	61fb      	str	r3, [r7, #28]
}
 800ee4e:	bf00      	nop
 800ee50:	e7fe      	b.n	800ee50 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ee52:	f001 fb8f 	bl	8010574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d302      	bcc.n	800ee68 <xQueueGenericSend+0xd4>
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d112      	bne.n	800ee8e <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ee68:	683a      	ldr	r2, [r7, #0]
 800ee6a:	68b9      	ldr	r1, [r7, #8]
 800ee6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ee6e:	f000 fa1d 	bl	800f2ac <prvCopyDataToQueue>
 800ee72:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d004      	beq.n	800ee86 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	3324      	adds	r3, #36	; 0x24
 800ee80:	4618      	mov	r0, r3
 800ee82:	f000 fe79 	bl	800fb78 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ee86:	f001 fba5 	bl	80105d4 <vPortExitCritical>
				return pdPASS;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e062      	b.n	800ef54 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d103      	bne.n	800ee9c <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee94:	f001 fb9e 	bl	80105d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e05b      	b.n	800ef54 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eea2:	f107 0314 	add.w	r3, r7, #20
 800eea6:	4618      	mov	r0, r3
 800eea8:	f000 fec8 	bl	800fc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eeac:	2301      	movs	r3, #1
 800eeae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eeb0:	f001 fb90 	bl	80105d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eeb4:	f000 fca8 	bl	800f808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eeb8:	f001 fb5c 	bl	8010574 <vPortEnterCritical>
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eec2:	b25b      	sxtb	r3, r3
 800eec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec8:	d103      	bne.n	800eed2 <xQueueGenericSend+0x13e>
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800eed8:	b25b      	sxtb	r3, r3
 800eeda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eede:	d103      	bne.n	800eee8 <xQueueGenericSend+0x154>
 800eee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee2:	2200      	movs	r2, #0
 800eee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eee8:	f001 fb74 	bl	80105d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800eeec:	1d3a      	adds	r2, r7, #4
 800eeee:	f107 0314 	add.w	r3, r7, #20
 800eef2:	4611      	mov	r1, r2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f000 feb7 	bl	800fc68 <xTaskCheckForTimeOut>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d123      	bne.n	800ef48 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ef00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef02:	f000 faa5 	bl	800f450 <prvIsQueueFull>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d017      	beq.n	800ef3c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	3310      	adds	r3, #16
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	4611      	mov	r1, r2
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fe0b 	bl	800fb30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ef1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef1c:	f000 fa30 	bl	800f380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ef20:	f000 fc80 	bl	800f824 <xTaskResumeAll>
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d193      	bne.n	800ee52 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ef2a:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <xQueueGenericSend+0x1c8>)
 800ef2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef30:	601a      	str	r2, [r3, #0]
 800ef32:	f3bf 8f4f 	dsb	sy
 800ef36:	f3bf 8f6f 	isb	sy
 800ef3a:	e78a      	b.n	800ee52 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ef3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef3e:	f000 fa1f 	bl	800f380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ef42:	f000 fc6f 	bl	800f824 <xTaskResumeAll>
 800ef46:	e784      	b.n	800ee52 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ef48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef4a:	f000 fa19 	bl	800f380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ef4e:	f000 fc69 	bl	800f824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ef52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3738      	adds	r7, #56	; 0x38
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	e000ed04 	.word	0xe000ed04

0800ef60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b08e      	sub	sp, #56	; 0x38
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10a      	bne.n	800ef8a <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ef74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef78:	f383 8811 	msr	BASEPRI, r3
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	f3bf 8f4f 	dsb	sy
 800ef84:	623b      	str	r3, [r7, #32]
}
 800ef86:	bf00      	nop
 800ef88:	e7fe      	b.n	800ef88 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d00a      	beq.n	800efa8 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ef92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef96:	f383 8811 	msr	BASEPRI, r3
 800ef9a:	f3bf 8f6f 	isb	sy
 800ef9e:	f3bf 8f4f 	dsb	sy
 800efa2:	61fb      	str	r3, [r7, #28]
}
 800efa4:	bf00      	nop
 800efa6:	e7fe      	b.n	800efa6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800efa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d103      	bne.n	800efb8 <xQueueGiveFromISR+0x58>
 800efb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d101      	bne.n	800efbc <xQueueGiveFromISR+0x5c>
 800efb8:	2301      	movs	r3, #1
 800efba:	e000      	b.n	800efbe <xQueueGiveFromISR+0x5e>
 800efbc:	2300      	movs	r3, #0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d10a      	bne.n	800efd8 <xQueueGiveFromISR+0x78>
	__asm volatile
 800efc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc6:	f383 8811 	msr	BASEPRI, r3
 800efca:	f3bf 8f6f 	isb	sy
 800efce:	f3bf 8f4f 	dsb	sy
 800efd2:	61bb      	str	r3, [r7, #24]
}
 800efd4:	bf00      	nop
 800efd6:	e7fe      	b.n	800efd6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800efd8:	f001 fbae 	bl	8010738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800efdc:	f3ef 8211 	mrs	r2, BASEPRI
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	617a      	str	r2, [r7, #20]
 800eff2:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800eff4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800eff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800effc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800effe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f004:	429a      	cmp	r2, r3
 800f006:	d22b      	bcs.n	800f060 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f014:	1c5a      	adds	r2, r3, #1
 800f016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f018:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f022:	d112      	bne.n	800f04a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d016      	beq.n	800f05a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	3324      	adds	r3, #36	; 0x24
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fda1 	bl	800fb78 <xTaskRemoveFromEventList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00e      	beq.n	800f05a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d00b      	beq.n	800f05a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f042:	683b      	ldr	r3, [r7, #0]
 800f044:	2201      	movs	r2, #1
 800f046:	601a      	str	r2, [r3, #0]
 800f048:	e007      	b.n	800f05a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f04a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f04e:	3301      	adds	r3, #1
 800f050:	b2db      	uxtb	r3, r3
 800f052:	b25a      	sxtb	r2, r3
 800f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f05a:	2301      	movs	r3, #1
 800f05c:	637b      	str	r3, [r7, #52]	; 0x34
 800f05e:	e001      	b.n	800f064 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f060:	2300      	movs	r3, #0
 800f062:	637b      	str	r3, [r7, #52]	; 0x34
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f06e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f072:	4618      	mov	r0, r3
 800f074:	3738      	adds	r7, #56	; 0x38
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
	...

0800f07c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08e      	sub	sp, #56	; 0x38
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f086:	2300      	movs	r3, #0
 800f088:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f08e:	2300      	movs	r3, #0
 800f090:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10a      	bne.n	800f0ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	623b      	str	r3, [r7, #32]
}
 800f0aa:	bf00      	nop
 800f0ac:	e7fe      	b.n	800f0ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00a      	beq.n	800f0cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ba:	f383 8811 	msr	BASEPRI, r3
 800f0be:	f3bf 8f6f 	isb	sy
 800f0c2:	f3bf 8f4f 	dsb	sy
 800f0c6:	61fb      	str	r3, [r7, #28]
}
 800f0c8:	bf00      	nop
 800f0ca:	e7fe      	b.n	800f0ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0cc:	f000 ff00 	bl	800fed0 <xTaskGetSchedulerState>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d102      	bne.n	800f0dc <xQueueSemaphoreTake+0x60>
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d101      	bne.n	800f0e0 <xQueueSemaphoreTake+0x64>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <xQueueSemaphoreTake+0x66>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d10a      	bne.n	800f0fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ea:	f383 8811 	msr	BASEPRI, r3
 800f0ee:	f3bf 8f6f 	isb	sy
 800f0f2:	f3bf 8f4f 	dsb	sy
 800f0f6:	61bb      	str	r3, [r7, #24]
}
 800f0f8:	bf00      	nop
 800f0fa:	e7fe      	b.n	800f0fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0fc:	f001 fa3a 	bl	8010574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f104:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d019      	beq.n	800f140 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f10e:	1e5a      	subs	r2, r3, #1
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d104      	bne.n	800f126 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f11c:	f001 f880 	bl	8010220 <pvTaskIncrementMutexHeldCount>
 800f120:	4602      	mov	r2, r0
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	691b      	ldr	r3, [r3, #16]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d004      	beq.n	800f138 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f130:	3310      	adds	r3, #16
 800f132:	4618      	mov	r0, r3
 800f134:	f000 fd20 	bl	800fb78 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f138:	f001 fa4c 	bl	80105d4 <vPortExitCritical>
				return pdPASS;
 800f13c:	2301      	movs	r3, #1
 800f13e:	e097      	b.n	800f270 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d111      	bne.n	800f16a <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d00a      	beq.n	800f162 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800f14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f150:	f383 8811 	msr	BASEPRI, r3
 800f154:	f3bf 8f6f 	isb	sy
 800f158:	f3bf 8f4f 	dsb	sy
 800f15c:	617b      	str	r3, [r7, #20]
}
 800f15e:	bf00      	nop
 800f160:	e7fe      	b.n	800f160 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f162:	f001 fa37 	bl	80105d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f166:	2300      	movs	r3, #0
 800f168:	e082      	b.n	800f270 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d106      	bne.n	800f17e <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f170:	f107 030c 	add.w	r3, r7, #12
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fd61 	bl	800fc3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f17a:	2301      	movs	r3, #1
 800f17c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f17e:	f001 fa29 	bl	80105d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f182:	f000 fb41 	bl	800f808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f186:	f001 f9f5 	bl	8010574 <vPortEnterCritical>
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f190:	b25b      	sxtb	r3, r3
 800f192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f196:	d103      	bne.n	800f1a0 <xQueueSemaphoreTake+0x124>
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1a6:	b25b      	sxtb	r3, r3
 800f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ac:	d103      	bne.n	800f1b6 <xQueueSemaphoreTake+0x13a>
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1b6:	f001 fa0d 	bl	80105d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1ba:	463a      	mov	r2, r7
 800f1bc:	f107 030c 	add.w	r3, r7, #12
 800f1c0:	4611      	mov	r1, r2
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	f000 fd50 	bl	800fc68 <xTaskCheckForTimeOut>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d132      	bne.n	800f234 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1d0:	f000 f928 	bl	800f424 <prvIsQueueEmpty>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d026      	beq.n	800f228 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d109      	bne.n	800f1f6 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800f1e2:	f001 f9c7 	bl	8010574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e8:	689b      	ldr	r3, [r3, #8]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fe8e 	bl	800ff0c <xTaskPriorityInherit>
 800f1f0:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1f2:	f001 f9ef 	bl	80105d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	3324      	adds	r3, #36	; 0x24
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fc96 	bl	800fb30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f206:	f000 f8bb 	bl	800f380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f20a:	f000 fb0b 	bl	800f824 <xTaskResumeAll>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	f47f af73 	bne.w	800f0fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f216:	4b18      	ldr	r3, [pc, #96]	; (800f278 <xQueueSemaphoreTake+0x1fc>)
 800f218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f21c:	601a      	str	r2, [r3, #0]
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	f3bf 8f6f 	isb	sy
 800f226:	e769      	b.n	800f0fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f22a:	f000 f8a9 	bl	800f380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f22e:	f000 faf9 	bl	800f824 <xTaskResumeAll>
 800f232:	e763      	b.n	800f0fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f236:	f000 f8a3 	bl	800f380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f23a:	f000 faf3 	bl	800f824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f240:	f000 f8f0 	bl	800f424 <prvIsQueueEmpty>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	f43f af58 	beq.w	800f0fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00d      	beq.n	800f26e <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800f252:	f001 f98f 	bl	8010574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f258:	f000 f810 	bl	800f27c <prvGetDisinheritPriorityAfterTimeout>
 800f25c:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f264:	4618      	mov	r0, r3
 800f266:	f000 ff4d 	bl	8010104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f26a:	f001 f9b3 	bl	80105d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f26e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f270:	4618      	mov	r0, r3
 800f272:	3738      	adds	r7, #56	; 0x38
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	e000ed04 	.word	0xe000ed04

0800f27c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f27c:	b480      	push	{r7}
 800f27e:	b085      	sub	sp, #20
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d006      	beq.n	800f29a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f1c3 0307 	rsb	r3, r3, #7
 800f296:	60fb      	str	r3, [r7, #12]
 800f298:	e001      	b.n	800f29e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f29a:	2300      	movs	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f29e:	68fb      	ldr	r3, [r7, #12]
	}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60f8      	str	r0, [r7, #12]
 800f2b4:	60b9      	str	r1, [r7, #8]
 800f2b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d10d      	bne.n	800f2e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d14d      	bne.n	800f36e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 fe8e 	bl	800fff8 <xTaskPriorityDisinherit>
 800f2dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	609a      	str	r2, [r3, #8]
 800f2e4:	e043      	b.n	800f36e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d119      	bne.n	800f320 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6858      	ldr	r0, [r3, #4]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	f001 fcf0 	bl	8010cdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f304:	441a      	add	r2, r3
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	685a      	ldr	r2, [r3, #4]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	689b      	ldr	r3, [r3, #8]
 800f312:	429a      	cmp	r2, r3
 800f314:	d32b      	bcc.n	800f36e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681a      	ldr	r2, [r3, #0]
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	605a      	str	r2, [r3, #4]
 800f31e:	e026      	b.n	800f36e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	68d8      	ldr	r0, [r3, #12]
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f328:	461a      	mov	r2, r3
 800f32a:	68b9      	ldr	r1, [r7, #8]
 800f32c:	f001 fcd6 	bl	8010cdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	68da      	ldr	r2, [r3, #12]
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f338:	425b      	negs	r3, r3
 800f33a:	441a      	add	r2, r3
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d207      	bcs.n	800f35c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	689a      	ldr	r2, [r3, #8]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f354:	425b      	negs	r3, r3
 800f356:	441a      	add	r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d105      	bne.n	800f36e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d002      	beq.n	800f36e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	3b01      	subs	r3, #1
 800f36c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	1c5a      	adds	r2, r3, #1
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f376:	697b      	ldr	r3, [r7, #20]
}
 800f378:	4618      	mov	r0, r3
 800f37a:	3718      	adds	r7, #24
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b084      	sub	sp, #16
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f388:	f001 f8f4 	bl	8010574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f394:	e011      	b.n	800f3ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d012      	beq.n	800f3c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	3324      	adds	r3, #36	; 0x24
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f000 fbe8 	bl	800fb78 <xTaskRemoveFromEventList>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f3ae:	f000 fccd 	bl	800fd4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
 800f3b4:	3b01      	subs	r3, #1
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f3ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	dce9      	bgt.n	800f396 <prvUnlockQueue+0x16>
 800f3c2:	e000      	b.n	800f3c6 <prvUnlockQueue+0x46>
					break;
 800f3c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	22ff      	movs	r2, #255	; 0xff
 800f3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f3ce:	f001 f901 	bl	80105d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f3d2:	f001 f8cf 	bl	8010574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f3de:	e011      	b.n	800f404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d012      	beq.n	800f40e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	3310      	adds	r3, #16
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f000 fbc3 	bl	800fb78 <xTaskRemoveFromEventList>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f3f8:	f000 fca8 	bl	800fd4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f3fc:	7bbb      	ldrb	r3, [r7, #14]
 800f3fe:	3b01      	subs	r3, #1
 800f400:	b2db      	uxtb	r3, r3
 800f402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	dce9      	bgt.n	800f3e0 <prvUnlockQueue+0x60>
 800f40c:	e000      	b.n	800f410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f40e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	22ff      	movs	r2, #255	; 0xff
 800f414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f418:	f001 f8dc 	bl	80105d4 <vPortExitCritical>
}
 800f41c:	bf00      	nop
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f42c:	f001 f8a2 	bl	8010574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f434:	2b00      	cmp	r3, #0
 800f436:	d102      	bne.n	800f43e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f438:	2301      	movs	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	e001      	b.n	800f442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f442:	f001 f8c7 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800f446:	68fb      	ldr	r3, [r7, #12]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f458:	f001 f88c 	bl	8010574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f464:	429a      	cmp	r2, r3
 800f466:	d102      	bne.n	800f46e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f468:	2301      	movs	r3, #1
 800f46a:	60fb      	str	r3, [r7, #12]
 800f46c:	e001      	b.n	800f472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f46e:	2300      	movs	r3, #0
 800f470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f472:	f001 f8af 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800f476:	68fb      	ldr	r3, [r7, #12]
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3710      	adds	r7, #16
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f480:	b580      	push	{r7, lr}
 800f482:	b08c      	sub	sp, #48	; 0x30
 800f484:	af04      	add	r7, sp, #16
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	4613      	mov	r3, r2
 800f48e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f490:	88fb      	ldrh	r3, [r7, #6]
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4618      	mov	r0, r3
 800f496:	f001 f98f 	bl	80107b8 <pvPortMalloc>
 800f49a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d00e      	beq.n	800f4c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f4a2:	20a0      	movs	r0, #160	; 0xa0
 800f4a4:	f001 f988 	bl	80107b8 <pvPortMalloc>
 800f4a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d003      	beq.n	800f4b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	631a      	str	r2, [r3, #48]	; 0x30
 800f4b6:	e005      	b.n	800f4c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f4b8:	6978      	ldr	r0, [r7, #20]
 800f4ba:	f001 fa49 	bl	8010950 <vPortFree>
 800f4be:	e001      	b.n	800f4c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f4c4:	69fb      	ldr	r3, [r7, #28]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d013      	beq.n	800f4f2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f4ca:	88fa      	ldrh	r2, [r7, #6]
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	9303      	str	r3, [sp, #12]
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	9302      	str	r3, [sp, #8]
 800f4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4d6:	9301      	str	r3, [sp, #4]
 800f4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	68b9      	ldr	r1, [r7, #8]
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f000 f80f 	bl	800f504 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f4e6:	69f8      	ldr	r0, [r7, #28]
 800f4e8:	f000 f8ae 	bl	800f648 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	61bb      	str	r3, [r7, #24]
 800f4f0:	e002      	b.n	800f4f8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f4f8:	69bb      	ldr	r3, [r7, #24]
	}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3720      	adds	r7, #32
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}
	...

0800f504 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b088      	sub	sp, #32
 800f508:	af00      	add	r7, sp, #0
 800f50a:	60f8      	str	r0, [r7, #12]
 800f50c:	60b9      	str	r1, [r7, #8]
 800f50e:	607a      	str	r2, [r7, #4]
 800f510:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f51c:	3b01      	subs	r3, #1
 800f51e:	009b      	lsls	r3, r3, #2
 800f520:	4413      	add	r3, r2
 800f522:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	f023 0307 	bic.w	r3, r3, #7
 800f52a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	f003 0307 	and.w	r3, r3, #7
 800f532:	2b00      	cmp	r3, #0
 800f534:	d00a      	beq.n	800f54c <prvInitialiseNewTask+0x48>
	__asm volatile
 800f536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f53a:	f383 8811 	msr	BASEPRI, r3
 800f53e:	f3bf 8f6f 	isb	sy
 800f542:	f3bf 8f4f 	dsb	sy
 800f546:	617b      	str	r3, [r7, #20]
}
 800f548:	bf00      	nop
 800f54a:	e7fe      	b.n	800f54a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d01f      	beq.n	800f592 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f552:	2300      	movs	r3, #0
 800f554:	61fb      	str	r3, [r7, #28]
 800f556:	e012      	b.n	800f57e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	4413      	add	r3, r2
 800f55e:	7819      	ldrb	r1, [r3, #0]
 800f560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f562:	69fb      	ldr	r3, [r7, #28]
 800f564:	4413      	add	r3, r2
 800f566:	3334      	adds	r3, #52	; 0x34
 800f568:	460a      	mov	r2, r1
 800f56a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f56c:	68ba      	ldr	r2, [r7, #8]
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	4413      	add	r3, r2
 800f572:	781b      	ldrb	r3, [r3, #0]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d006      	beq.n	800f586 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	3301      	adds	r3, #1
 800f57c:	61fb      	str	r3, [r7, #28]
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	2b0f      	cmp	r3, #15
 800f582:	d9e9      	bls.n	800f558 <prvInitialiseNewTask+0x54>
 800f584:	e000      	b.n	800f588 <prvInitialiseNewTask+0x84>
			{
				break;
 800f586:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f590:	e003      	b.n	800f59a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f594:	2200      	movs	r2, #0
 800f596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f59c:	2b06      	cmp	r3, #6
 800f59e:	d901      	bls.n	800f5a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f5a0:	2306      	movs	r3, #6
 800f5a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b8:	3304      	adds	r3, #4
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fa74 	bl	800eaa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c2:	3318      	adds	r3, #24
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7ff fa6f 	bl	800eaa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d2:	f1c3 0207 	rsb	r2, r3, #7
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	334c      	adds	r3, #76	; 0x4c
 800f5f4:	224c      	movs	r2, #76	; 0x4c
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f001 fae5 	bl	8010bc8 <memset>
 800f5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f600:	4a0e      	ldr	r2, [pc, #56]	; (800f63c <prvInitialiseNewTask+0x138>)
 800f602:	651a      	str	r2, [r3, #80]	; 0x50
 800f604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f606:	4a0e      	ldr	r2, [pc, #56]	; (800f640 <prvInitialiseNewTask+0x13c>)
 800f608:	655a      	str	r2, [r3, #84]	; 0x54
 800f60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60c:	4a0d      	ldr	r2, [pc, #52]	; (800f644 <prvInitialiseNewTask+0x140>)
 800f60e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800f610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f612:	2200      	movs	r2, #0
 800f614:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	68f9      	ldr	r1, [r7, #12]
 800f61c:	69b8      	ldr	r0, [r7, #24]
 800f61e:	f000 fe7d 	bl	801031c <pxPortInitialiseStack>
 800f622:	4602      	mov	r2, r0
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f632:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f634:	bf00      	nop
 800f636:	3720      	adds	r7, #32
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	20003ac0 	.word	0x20003ac0
 800f640:	20003b28 	.word	0x20003b28
 800f644:	20003b90 	.word	0x20003b90

0800f648 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b082      	sub	sp, #8
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f650:	f000 ff90 	bl	8010574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f654:	4b24      	ldr	r3, [pc, #144]	; (800f6e8 <prvAddNewTaskToReadyList+0xa0>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	3301      	adds	r3, #1
 800f65a:	4a23      	ldr	r2, [pc, #140]	; (800f6e8 <prvAddNewTaskToReadyList+0xa0>)
 800f65c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f65e:	4b23      	ldr	r3, [pc, #140]	; (800f6ec <prvAddNewTaskToReadyList+0xa4>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d109      	bne.n	800f67a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f666:	4a21      	ldr	r2, [pc, #132]	; (800f6ec <prvAddNewTaskToReadyList+0xa4>)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f66c:	4b1e      	ldr	r3, [pc, #120]	; (800f6e8 <prvAddNewTaskToReadyList+0xa0>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b01      	cmp	r3, #1
 800f672:	d110      	bne.n	800f696 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f674:	f000 fb88 	bl	800fd88 <prvInitialiseTaskLists>
 800f678:	e00d      	b.n	800f696 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f67a:	4b1d      	ldr	r3, [pc, #116]	; (800f6f0 <prvAddNewTaskToReadyList+0xa8>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d109      	bne.n	800f696 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f682:	4b1a      	ldr	r3, [pc, #104]	; (800f6ec <prvAddNewTaskToReadyList+0xa4>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d802      	bhi.n	800f696 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f690:	4a16      	ldr	r2, [pc, #88]	; (800f6ec <prvAddNewTaskToReadyList+0xa4>)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f696:	4b17      	ldr	r3, [pc, #92]	; (800f6f4 <prvAddNewTaskToReadyList+0xac>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	3301      	adds	r3, #1
 800f69c:	4a15      	ldr	r2, [pc, #84]	; (800f6f4 <prvAddNewTaskToReadyList+0xac>)
 800f69e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	409a      	lsls	r2, r3
 800f6a8:	4b13      	ldr	r3, [pc, #76]	; (800f6f8 <prvAddNewTaskToReadyList+0xb0>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	4a12      	ldr	r2, [pc, #72]	; (800f6f8 <prvAddNewTaskToReadyList+0xb0>)
 800f6b0:	6013      	str	r3, [r2, #0]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	009b      	lsls	r3, r3, #2
 800f6ba:	4413      	add	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4a0f      	ldr	r2, [pc, #60]	; (800f6fc <prvAddNewTaskToReadyList+0xb4>)
 800f6c0:	441a      	add	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	f7ff f9fa 	bl	800eac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f6ce:	f000 ff81 	bl	80105d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f6d2:	4b07      	ldr	r3, [pc, #28]	; (800f6f0 <prvAddNewTaskToReadyList+0xa8>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d001      	beq.n	800f6de <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f6da:	4b04      	ldr	r3, [pc, #16]	; (800f6ec <prvAddNewTaskToReadyList+0xa4>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f6de:	bf00      	nop
 800f6e0:	3708      	adds	r7, #8
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20000a6c 	.word	0x20000a6c
 800f6ec:	2000096c 	.word	0x2000096c
 800f6f0:	20000a78 	.word	0x20000a78
 800f6f4:	20000a88 	.word	0x20000a88
 800f6f8:	20000a74 	.word	0x20000a74
 800f6fc:	20000970 	.word	0x20000970

0800f700 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f708:	2300      	movs	r3, #0
 800f70a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d017      	beq.n	800f742 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <vTaskDelay+0x60>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d00a      	beq.n	800f730 <vTaskDelay+0x30>
	__asm volatile
 800f71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71e:	f383 8811 	msr	BASEPRI, r3
 800f722:	f3bf 8f6f 	isb	sy
 800f726:	f3bf 8f4f 	dsb	sy
 800f72a:	60bb      	str	r3, [r7, #8]
}
 800f72c:	bf00      	nop
 800f72e:	e7fe      	b.n	800f72e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f730:	f000 f86a 	bl	800f808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f734:	2100      	movs	r1, #0
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 fd86 	bl	8010248 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f73c:	f000 f872 	bl	800f824 <xTaskResumeAll>
 800f740:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d107      	bne.n	800f758 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f748:	4b06      	ldr	r3, [pc, #24]	; (800f764 <vTaskDelay+0x64>)
 800f74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f74e:	601a      	str	r2, [r3, #0]
 800f750:	f3bf 8f4f 	dsb	sy
 800f754:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f758:	bf00      	nop
 800f75a:	3710      	adds	r7, #16
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	20000a94 	.word	0x20000a94
 800f764:	e000ed04 	.word	0xe000ed04

0800f768 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b086      	sub	sp, #24
 800f76c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800f76e:	4b1e      	ldr	r3, [pc, #120]	; (800f7e8 <vTaskStartScheduler+0x80>)
 800f770:	9301      	str	r3, [sp, #4]
 800f772:	2300      	movs	r3, #0
 800f774:	9300      	str	r3, [sp, #0]
 800f776:	2300      	movs	r3, #0
 800f778:	2280      	movs	r2, #128	; 0x80
 800f77a:	491c      	ldr	r1, [pc, #112]	; (800f7ec <vTaskStartScheduler+0x84>)
 800f77c:	481c      	ldr	r0, [pc, #112]	; (800f7f0 <vTaskStartScheduler+0x88>)
 800f77e:	f7ff fe7f 	bl	800f480 <xTaskCreate>
 800f782:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b01      	cmp	r3, #1
 800f788:	d11b      	bne.n	800f7c2 <vTaskStartScheduler+0x5a>
	__asm volatile
 800f78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f78e:	f383 8811 	msr	BASEPRI, r3
 800f792:	f3bf 8f6f 	isb	sy
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	60bb      	str	r3, [r7, #8]
}
 800f79c:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f79e:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <vTaskStartScheduler+0x8c>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	334c      	adds	r3, #76	; 0x4c
 800f7a4:	4a14      	ldr	r2, [pc, #80]	; (800f7f8 <vTaskStartScheduler+0x90>)
 800f7a6:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f7a8:	4b14      	ldr	r3, [pc, #80]	; (800f7fc <vTaskStartScheduler+0x94>)
 800f7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f7b0:	4b13      	ldr	r3, [pc, #76]	; (800f800 <vTaskStartScheduler+0x98>)
 800f7b2:	2201      	movs	r2, #1
 800f7b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f7b6:	4b13      	ldr	r3, [pc, #76]	; (800f804 <vTaskStartScheduler+0x9c>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f7bc:	f000 fe38 	bl	8010430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f7c0:	e00e      	b.n	800f7e0 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c8:	d10a      	bne.n	800f7e0 <vTaskStartScheduler+0x78>
	__asm volatile
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	607b      	str	r3, [r7, #4]
}
 800f7dc:	bf00      	nop
 800f7de:	e7fe      	b.n	800f7de <vTaskStartScheduler+0x76>
}
 800f7e0:	bf00      	nop
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	20000a90 	.word	0x20000a90
 800f7ec:	08011d30 	.word	0x08011d30
 800f7f0:	0800fd65 	.word	0x0800fd65
 800f7f4:	2000096c 	.word	0x2000096c
 800f7f8:	20000060 	.word	0x20000060
 800f7fc:	20000a8c 	.word	0x20000a8c
 800f800:	20000a78 	.word	0x20000a78
 800f804:	20000a70 	.word	0x20000a70

0800f808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f808:	b480      	push	{r7}
 800f80a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f80c:	4b04      	ldr	r3, [pc, #16]	; (800f820 <vTaskSuspendAll+0x18>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	3301      	adds	r3, #1
 800f812:	4a03      	ldr	r2, [pc, #12]	; (800f820 <vTaskSuspendAll+0x18>)
 800f814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f816:	bf00      	nop
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr
 800f820:	20000a94 	.word	0x20000a94

0800f824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f82a:	2300      	movs	r3, #0
 800f82c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f82e:	2300      	movs	r3, #0
 800f830:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f832:	4b3b      	ldr	r3, [pc, #236]	; (800f920 <xTaskResumeAll+0xfc>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10a      	bne.n	800f850 <xTaskResumeAll+0x2c>
	__asm volatile
 800f83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f83e:	f383 8811 	msr	BASEPRI, r3
 800f842:	f3bf 8f6f 	isb	sy
 800f846:	f3bf 8f4f 	dsb	sy
 800f84a:	603b      	str	r3, [r7, #0]
}
 800f84c:	bf00      	nop
 800f84e:	e7fe      	b.n	800f84e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f850:	f000 fe90 	bl	8010574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f854:	4b32      	ldr	r3, [pc, #200]	; (800f920 <xTaskResumeAll+0xfc>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	3b01      	subs	r3, #1
 800f85a:	4a31      	ldr	r2, [pc, #196]	; (800f920 <xTaskResumeAll+0xfc>)
 800f85c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f85e:	4b30      	ldr	r3, [pc, #192]	; (800f920 <xTaskResumeAll+0xfc>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d155      	bne.n	800f912 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f866:	4b2f      	ldr	r3, [pc, #188]	; (800f924 <xTaskResumeAll+0x100>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d051      	beq.n	800f912 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f86e:	e02e      	b.n	800f8ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f870:	4b2d      	ldr	r3, [pc, #180]	; (800f928 <xTaskResumeAll+0x104>)
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	3318      	adds	r3, #24
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7ff f97d 	bl	800eb7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	3304      	adds	r3, #4
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff f978 	bl	800eb7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f890:	2201      	movs	r2, #1
 800f892:	409a      	lsls	r2, r3
 800f894:	4b25      	ldr	r3, [pc, #148]	; (800f92c <xTaskResumeAll+0x108>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4313      	orrs	r3, r2
 800f89a:	4a24      	ldr	r2, [pc, #144]	; (800f92c <xTaskResumeAll+0x108>)
 800f89c:	6013      	str	r3, [r2, #0]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a2:	4613      	mov	r3, r2
 800f8a4:	009b      	lsls	r3, r3, #2
 800f8a6:	4413      	add	r3, r2
 800f8a8:	009b      	lsls	r3, r3, #2
 800f8aa:	4a21      	ldr	r2, [pc, #132]	; (800f930 <xTaskResumeAll+0x10c>)
 800f8ac:	441a      	add	r2, r3
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	3304      	adds	r3, #4
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	4610      	mov	r0, r2
 800f8b6:	f7ff f904 	bl	800eac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8be:	4b1d      	ldr	r3, [pc, #116]	; (800f934 <xTaskResumeAll+0x110>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d302      	bcc.n	800f8ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f8c8:	4b1b      	ldr	r3, [pc, #108]	; (800f938 <xTaskResumeAll+0x114>)
 800f8ca:	2201      	movs	r2, #1
 800f8cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f8ce:	4b16      	ldr	r3, [pc, #88]	; (800f928 <xTaskResumeAll+0x104>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d1cc      	bne.n	800f870 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f8dc:	f000 fad8 	bl	800fe90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f8e0:	4b16      	ldr	r3, [pc, #88]	; (800f93c <xTaskResumeAll+0x118>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d010      	beq.n	800f90e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f8ec:	f000 f828 	bl	800f940 <xTaskIncrementTick>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f8f6:	4b10      	ldr	r3, [pc, #64]	; (800f938 <xTaskResumeAll+0x114>)
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	3b01      	subs	r3, #1
 800f900:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f1      	bne.n	800f8ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f908:	4b0c      	ldr	r3, [pc, #48]	; (800f93c <xTaskResumeAll+0x118>)
 800f90a:	2200      	movs	r2, #0
 800f90c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f90e:	4b0a      	ldr	r3, [pc, #40]	; (800f938 <xTaskResumeAll+0x114>)
 800f910:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f912:	f000 fe5f 	bl	80105d4 <vPortExitCritical>

	return xAlreadyYielded;
 800f916:	687b      	ldr	r3, [r7, #4]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3710      	adds	r7, #16
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20000a94 	.word	0x20000a94
 800f924:	20000a6c 	.word	0x20000a6c
 800f928:	20000a2c 	.word	0x20000a2c
 800f92c:	20000a74 	.word	0x20000a74
 800f930:	20000970 	.word	0x20000970
 800f934:	2000096c 	.word	0x2000096c
 800f938:	20000a80 	.word	0x20000a80
 800f93c:	20000a7c 	.word	0x20000a7c

0800f940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b086      	sub	sp, #24
 800f944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f946:	2300      	movs	r3, #0
 800f948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f94a:	4b3f      	ldr	r3, [pc, #252]	; (800fa48 <xTaskIncrementTick+0x108>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d16f      	bne.n	800fa32 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f952:	4b3e      	ldr	r3, [pc, #248]	; (800fa4c <xTaskIncrementTick+0x10c>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	3301      	adds	r3, #1
 800f958:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f95a:	4a3c      	ldr	r2, [pc, #240]	; (800fa4c <xTaskIncrementTick+0x10c>)
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d120      	bne.n	800f9a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f966:	4b3a      	ldr	r3, [pc, #232]	; (800fa50 <xTaskIncrementTick+0x110>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d00a      	beq.n	800f986 <xTaskIncrementTick+0x46>
	__asm volatile
 800f970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f974:	f383 8811 	msr	BASEPRI, r3
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	f3bf 8f4f 	dsb	sy
 800f980:	603b      	str	r3, [r7, #0]
}
 800f982:	bf00      	nop
 800f984:	e7fe      	b.n	800f984 <xTaskIncrementTick+0x44>
 800f986:	4b32      	ldr	r3, [pc, #200]	; (800fa50 <xTaskIncrementTick+0x110>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60fb      	str	r3, [r7, #12]
 800f98c:	4b31      	ldr	r3, [pc, #196]	; (800fa54 <xTaskIncrementTick+0x114>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4a2f      	ldr	r2, [pc, #188]	; (800fa50 <xTaskIncrementTick+0x110>)
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	4a2f      	ldr	r2, [pc, #188]	; (800fa54 <xTaskIncrementTick+0x114>)
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	6013      	str	r3, [r2, #0]
 800f99a:	4b2f      	ldr	r3, [pc, #188]	; (800fa58 <xTaskIncrementTick+0x118>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	4a2d      	ldr	r2, [pc, #180]	; (800fa58 <xTaskIncrementTick+0x118>)
 800f9a2:	6013      	str	r3, [r2, #0]
 800f9a4:	f000 fa74 	bl	800fe90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f9a8:	4b2c      	ldr	r3, [pc, #176]	; (800fa5c <xTaskIncrementTick+0x11c>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	693a      	ldr	r2, [r7, #16]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d344      	bcc.n	800fa3c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9b2:	4b27      	ldr	r3, [pc, #156]	; (800fa50 <xTaskIncrementTick+0x110>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d104      	bne.n	800f9c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9bc:	4b27      	ldr	r3, [pc, #156]	; (800fa5c <xTaskIncrementTick+0x11c>)
 800f9be:	f04f 32ff 	mov.w	r2, #4294967295
 800f9c2:	601a      	str	r2, [r3, #0]
					break;
 800f9c4:	e03a      	b.n	800fa3c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9c6:	4b22      	ldr	r3, [pc, #136]	; (800fa50 <xTaskIncrementTick+0x110>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9d6:	693a      	ldr	r2, [r7, #16]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d203      	bcs.n	800f9e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9de:	4a1f      	ldr	r2, [pc, #124]	; (800fa5c <xTaskIncrementTick+0x11c>)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9e4:	e02a      	b.n	800fa3c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff f8c6 	bl	800eb7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d004      	beq.n	800fa02 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	3318      	adds	r3, #24
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7ff f8bd 	bl	800eb7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa06:	2201      	movs	r2, #1
 800fa08:	409a      	lsls	r2, r3
 800fa0a:	4b15      	ldr	r3, [pc, #84]	; (800fa60 <xTaskIncrementTick+0x120>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	4a13      	ldr	r2, [pc, #76]	; (800fa60 <xTaskIncrementTick+0x120>)
 800fa12:	6013      	str	r3, [r2, #0]
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa18:	4613      	mov	r3, r2
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4a10      	ldr	r2, [pc, #64]	; (800fa64 <xTaskIncrementTick+0x124>)
 800fa22:	441a      	add	r2, r3
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	3304      	adds	r3, #4
 800fa28:	4619      	mov	r1, r3
 800fa2a:	4610      	mov	r0, r2
 800fa2c:	f7ff f849 	bl	800eac2 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa30:	e7bf      	b.n	800f9b2 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fa32:	4b0d      	ldr	r3, [pc, #52]	; (800fa68 <xTaskIncrementTick+0x128>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	3301      	adds	r3, #1
 800fa38:	4a0b      	ldr	r2, [pc, #44]	; (800fa68 <xTaskIncrementTick+0x128>)
 800fa3a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fa3c:	697b      	ldr	r3, [r7, #20]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3718      	adds	r7, #24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	20000a94 	.word	0x20000a94
 800fa4c:	20000a70 	.word	0x20000a70
 800fa50:	20000a24 	.word	0x20000a24
 800fa54:	20000a28 	.word	0x20000a28
 800fa58:	20000a84 	.word	0x20000a84
 800fa5c:	20000a8c 	.word	0x20000a8c
 800fa60:	20000a74 	.word	0x20000a74
 800fa64:	20000970 	.word	0x20000970
 800fa68:	20000a7c 	.word	0x20000a7c

0800fa6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b087      	sub	sp, #28
 800fa70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fa72:	4b29      	ldr	r3, [pc, #164]	; (800fb18 <vTaskSwitchContext+0xac>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d003      	beq.n	800fa82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fa7a:	4b28      	ldr	r3, [pc, #160]	; (800fb1c <vTaskSwitchContext+0xb0>)
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fa80:	e044      	b.n	800fb0c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fa82:	4b26      	ldr	r3, [pc, #152]	; (800fb1c <vTaskSwitchContext+0xb0>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa88:	4b25      	ldr	r3, [pc, #148]	; (800fb20 <vTaskSwitchContext+0xb4>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	fab3 f383 	clz	r3, r3
 800fa94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fa96:	7afb      	ldrb	r3, [r7, #11]
 800fa98:	f1c3 031f 	rsb	r3, r3, #31
 800fa9c:	617b      	str	r3, [r7, #20]
 800fa9e:	4921      	ldr	r1, [pc, #132]	; (800fb24 <vTaskSwitchContext+0xb8>)
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	440b      	add	r3, r1
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d10a      	bne.n	800fac8 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab6:	f383 8811 	msr	BASEPRI, r3
 800faba:	f3bf 8f6f 	isb	sy
 800fabe:	f3bf 8f4f 	dsb	sy
 800fac2:	607b      	str	r3, [r7, #4]
}
 800fac4:	bf00      	nop
 800fac6:	e7fe      	b.n	800fac6 <vTaskSwitchContext+0x5a>
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4613      	mov	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	4a14      	ldr	r2, [pc, #80]	; (800fb24 <vTaskSwitchContext+0xb8>)
 800fad4:	4413      	add	r3, r2
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	685a      	ldr	r2, [r3, #4]
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	605a      	str	r2, [r3, #4]
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	685a      	ldr	r2, [r3, #4]
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3308      	adds	r3, #8
 800faea:	429a      	cmp	r2, r3
 800faec:	d104      	bne.n	800faf8 <vTaskSwitchContext+0x8c>
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	685a      	ldr	r2, [r3, #4]
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	605a      	str	r2, [r3, #4]
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	685b      	ldr	r3, [r3, #4]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	4a0a      	ldr	r2, [pc, #40]	; (800fb28 <vTaskSwitchContext+0xbc>)
 800fb00:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb02:	4b09      	ldr	r3, [pc, #36]	; (800fb28 <vTaskSwitchContext+0xbc>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	334c      	adds	r3, #76	; 0x4c
 800fb08:	4a08      	ldr	r2, [pc, #32]	; (800fb2c <vTaskSwitchContext+0xc0>)
 800fb0a:	6013      	str	r3, [r2, #0]
}
 800fb0c:	bf00      	nop
 800fb0e:	371c      	adds	r7, #28
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr
 800fb18:	20000a94 	.word	0x20000a94
 800fb1c:	20000a80 	.word	0x20000a80
 800fb20:	20000a74 	.word	0x20000a74
 800fb24:	20000970 	.word	0x20000970
 800fb28:	2000096c 	.word	0x2000096c
 800fb2c:	20000060 	.word	0x20000060

0800fb30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10a      	bne.n	800fb56 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb44:	f383 8811 	msr	BASEPRI, r3
 800fb48:	f3bf 8f6f 	isb	sy
 800fb4c:	f3bf 8f4f 	dsb	sy
 800fb50:	60fb      	str	r3, [r7, #12]
}
 800fb52:	bf00      	nop
 800fb54:	e7fe      	b.n	800fb54 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fb56:	4b07      	ldr	r3, [pc, #28]	; (800fb74 <vTaskPlaceOnEventList+0x44>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3318      	adds	r3, #24
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7fe ffd3 	bl	800eb0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fb64:	2101      	movs	r1, #1
 800fb66:	6838      	ldr	r0, [r7, #0]
 800fb68:	f000 fb6e 	bl	8010248 <prvAddCurrentTaskToDelayedList>
}
 800fb6c:	bf00      	nop
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	2000096c 	.word	0x2000096c

0800fb78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d10a      	bne.n	800fba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb92:	f383 8811 	msr	BASEPRI, r3
 800fb96:	f3bf 8f6f 	isb	sy
 800fb9a:	f3bf 8f4f 	dsb	sy
 800fb9e:	60fb      	str	r3, [r7, #12]
}
 800fba0:	bf00      	nop
 800fba2:	e7fe      	b.n	800fba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	3318      	adds	r3, #24
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fe ffe7 	bl	800eb7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbae:	4b1d      	ldr	r3, [pc, #116]	; (800fc24 <xTaskRemoveFromEventList+0xac>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d11c      	bne.n	800fbf0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	3304      	adds	r3, #4
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fe ffde 	bl	800eb7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	409a      	lsls	r2, r3
 800fbc8:	4b17      	ldr	r3, [pc, #92]	; (800fc28 <xTaskRemoveFromEventList+0xb0>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	4a16      	ldr	r2, [pc, #88]	; (800fc28 <xTaskRemoveFromEventList+0xb0>)
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	693b      	ldr	r3, [r7, #16]
 800fbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbd6:	4613      	mov	r3, r2
 800fbd8:	009b      	lsls	r3, r3, #2
 800fbda:	4413      	add	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4a13      	ldr	r2, [pc, #76]	; (800fc2c <xTaskRemoveFromEventList+0xb4>)
 800fbe0:	441a      	add	r2, r3
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7fe ff6a 	bl	800eac2 <vListInsertEnd>
 800fbee:	e005      	b.n	800fbfc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	3318      	adds	r3, #24
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	480e      	ldr	r0, [pc, #56]	; (800fc30 <xTaskRemoveFromEventList+0xb8>)
 800fbf8:	f7fe ff63 	bl	800eac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fbfc:	693b      	ldr	r3, [r7, #16]
 800fbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc00:	4b0c      	ldr	r3, [pc, #48]	; (800fc34 <xTaskRemoveFromEventList+0xbc>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d905      	bls.n	800fc16 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fc0e:	4b0a      	ldr	r3, [pc, #40]	; (800fc38 <xTaskRemoveFromEventList+0xc0>)
 800fc10:	2201      	movs	r2, #1
 800fc12:	601a      	str	r2, [r3, #0]
 800fc14:	e001      	b.n	800fc1a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800fc16:	2300      	movs	r3, #0
 800fc18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fc1a:	697b      	ldr	r3, [r7, #20]
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3718      	adds	r7, #24
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	20000a94 	.word	0x20000a94
 800fc28:	20000a74 	.word	0x20000a74
 800fc2c:	20000970 	.word	0x20000970
 800fc30:	20000a2c 	.word	0x20000a2c
 800fc34:	2000096c 	.word	0x2000096c
 800fc38:	20000a80 	.word	0x20000a80

0800fc3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b083      	sub	sp, #12
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fc44:	4b06      	ldr	r3, [pc, #24]	; (800fc60 <vTaskInternalSetTimeOutState+0x24>)
 800fc46:	681a      	ldr	r2, [r3, #0]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fc4c:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <vTaskInternalSetTimeOutState+0x28>)
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	605a      	str	r2, [r3, #4]
}
 800fc54:	bf00      	nop
 800fc56:	370c      	adds	r7, #12
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	20000a84 	.word	0x20000a84
 800fc64:	20000a70 	.word	0x20000a70

0800fc68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b088      	sub	sp, #32
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d10a      	bne.n	800fc8e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800fc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc7c:	f383 8811 	msr	BASEPRI, r3
 800fc80:	f3bf 8f6f 	isb	sy
 800fc84:	f3bf 8f4f 	dsb	sy
 800fc88:	613b      	str	r3, [r7, #16]
}
 800fc8a:	bf00      	nop
 800fc8c:	e7fe      	b.n	800fc8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d10a      	bne.n	800fcaa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc98:	f383 8811 	msr	BASEPRI, r3
 800fc9c:	f3bf 8f6f 	isb	sy
 800fca0:	f3bf 8f4f 	dsb	sy
 800fca4:	60fb      	str	r3, [r7, #12]
}
 800fca6:	bf00      	nop
 800fca8:	e7fe      	b.n	800fca8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800fcaa:	f000 fc63 	bl	8010574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fcae:	4b24      	ldr	r3, [pc, #144]	; (800fd40 <xTaskCheckForTimeOut+0xd8>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	685b      	ldr	r3, [r3, #4]
 800fcb8:	69ba      	ldr	r2, [r7, #24]
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800fcbe:	4b21      	ldr	r3, [pc, #132]	; (800fd44 <xTaskCheckForTimeOut+0xdc>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d007      	beq.n	800fcda <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800fcca:	4b1e      	ldr	r3, [pc, #120]	; (800fd44 <xTaskCheckForTimeOut+0xdc>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	e02b      	b.n	800fd32 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce2:	d102      	bne.n	800fcea <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fce4:	2300      	movs	r3, #0
 800fce6:	61fb      	str	r3, [r7, #28]
 800fce8:	e023      	b.n	800fd32 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	4b16      	ldr	r3, [pc, #88]	; (800fd48 <xTaskCheckForTimeOut+0xe0>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d007      	beq.n	800fd06 <xTaskCheckForTimeOut+0x9e>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	69ba      	ldr	r2, [r7, #24]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d302      	bcc.n	800fd06 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fd00:	2301      	movs	r3, #1
 800fd02:	61fb      	str	r3, [r7, #28]
 800fd04:	e015      	b.n	800fd32 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fd06:	683b      	ldr	r3, [r7, #0]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d20b      	bcs.n	800fd28 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	697b      	ldr	r3, [r7, #20]
 800fd16:	1ad2      	subs	r2, r2, r3
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff ff8d 	bl	800fc3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fd22:	2300      	movs	r3, #0
 800fd24:	61fb      	str	r3, [r7, #28]
 800fd26:	e004      	b.n	800fd32 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fd32:	f000 fc4f 	bl	80105d4 <vPortExitCritical>

	return xReturn;
 800fd36:	69fb      	ldr	r3, [r7, #28]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3720      	adds	r7, #32
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	20000a70 	.word	0x20000a70
 800fd44:	2000096c 	.word	0x2000096c
 800fd48:	20000a84 	.word	0x20000a84

0800fd4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fd50:	4b03      	ldr	r3, [pc, #12]	; (800fd60 <vTaskMissedYield+0x14>)
 800fd52:	2201      	movs	r2, #1
 800fd54:	601a      	str	r2, [r3, #0]
}
 800fd56:	bf00      	nop
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr
 800fd60:	20000a80 	.word	0x20000a80

0800fd64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fd6c:	f000 f84c 	bl	800fe08 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 800fd70:	4b04      	ldr	r3, [pc, #16]	; (800fd84 <prvIdleTask+0x20>)
 800fd72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd76:	601a      	str	r2, [r3, #0]
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fd80:	e7f4      	b.n	800fd6c <prvIdleTask+0x8>
 800fd82:	bf00      	nop
 800fd84:	e000ed04 	.word	0xe000ed04

0800fd88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fd8e:	2300      	movs	r3, #0
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	e00c      	b.n	800fdae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	4613      	mov	r3, r2
 800fd98:	009b      	lsls	r3, r3, #2
 800fd9a:	4413      	add	r3, r2
 800fd9c:	009b      	lsls	r3, r3, #2
 800fd9e:	4a12      	ldr	r2, [pc, #72]	; (800fde8 <prvInitialiseTaskLists+0x60>)
 800fda0:	4413      	add	r3, r2
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fe fe60 	bl	800ea68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3301      	adds	r3, #1
 800fdac:	607b      	str	r3, [r7, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2b06      	cmp	r3, #6
 800fdb2:	d9ef      	bls.n	800fd94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fdb4:	480d      	ldr	r0, [pc, #52]	; (800fdec <prvInitialiseTaskLists+0x64>)
 800fdb6:	f7fe fe57 	bl	800ea68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fdba:	480d      	ldr	r0, [pc, #52]	; (800fdf0 <prvInitialiseTaskLists+0x68>)
 800fdbc:	f7fe fe54 	bl	800ea68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fdc0:	480c      	ldr	r0, [pc, #48]	; (800fdf4 <prvInitialiseTaskLists+0x6c>)
 800fdc2:	f7fe fe51 	bl	800ea68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fdc6:	480c      	ldr	r0, [pc, #48]	; (800fdf8 <prvInitialiseTaskLists+0x70>)
 800fdc8:	f7fe fe4e 	bl	800ea68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fdcc:	480b      	ldr	r0, [pc, #44]	; (800fdfc <prvInitialiseTaskLists+0x74>)
 800fdce:	f7fe fe4b 	bl	800ea68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fdd2:	4b0b      	ldr	r3, [pc, #44]	; (800fe00 <prvInitialiseTaskLists+0x78>)
 800fdd4:	4a05      	ldr	r2, [pc, #20]	; (800fdec <prvInitialiseTaskLists+0x64>)
 800fdd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fdd8:	4b0a      	ldr	r3, [pc, #40]	; (800fe04 <prvInitialiseTaskLists+0x7c>)
 800fdda:	4a05      	ldr	r2, [pc, #20]	; (800fdf0 <prvInitialiseTaskLists+0x68>)
 800fddc:	601a      	str	r2, [r3, #0]
}
 800fdde:	bf00      	nop
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20000970 	.word	0x20000970
 800fdec:	200009fc 	.word	0x200009fc
 800fdf0:	20000a10 	.word	0x20000a10
 800fdf4:	20000a2c 	.word	0x20000a2c
 800fdf8:	20000a40 	.word	0x20000a40
 800fdfc:	20000a58 	.word	0x20000a58
 800fe00:	20000a24 	.word	0x20000a24
 800fe04:	20000a28 	.word	0x20000a28

0800fe08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe0e:	e019      	b.n	800fe44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fe10:	f000 fbb0 	bl	8010574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe14:	4b10      	ldr	r3, [pc, #64]	; (800fe58 <prvCheckTasksWaitingTermination+0x50>)
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe feab 	bl	800eb7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fe26:	4b0d      	ldr	r3, [pc, #52]	; (800fe5c <prvCheckTasksWaitingTermination+0x54>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4a0b      	ldr	r2, [pc, #44]	; (800fe5c <prvCheckTasksWaitingTermination+0x54>)
 800fe2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fe30:	4b0b      	ldr	r3, [pc, #44]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	4a0a      	ldr	r2, [pc, #40]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fe3a:	f000 fbcb 	bl	80105d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f000 f810 	bl	800fe64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fe44:	4b06      	ldr	r3, [pc, #24]	; (800fe60 <prvCheckTasksWaitingTermination+0x58>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1e1      	bne.n	800fe10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fe4c:	bf00      	nop
 800fe4e:	bf00      	nop
 800fe50:	3708      	adds	r7, #8
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20000a40 	.word	0x20000a40
 800fe5c:	20000a6c 	.word	0x20000a6c
 800fe60:	20000a54 	.word	0x20000a54

0800fe64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	334c      	adds	r3, #76	; 0x4c
 800fe70:	4618      	mov	r0, r3
 800fe72:	f000 feb1 	bl	8010bd8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f000 fd68 	bl	8010950 <vPortFree>
			vPortFree( pxTCB );
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fd65 	bl	8010950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fe86:	bf00      	nop
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe96:	4b0c      	ldr	r3, [pc, #48]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d104      	bne.n	800feaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fea0:	4b0a      	ldr	r3, [pc, #40]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800fea2:	f04f 32ff 	mov.w	r2, #4294967295
 800fea6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fea8:	e008      	b.n	800febc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800feaa:	4b07      	ldr	r3, [pc, #28]	; (800fec8 <prvResetNextTaskUnblockTime+0x38>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	68db      	ldr	r3, [r3, #12]
 800feb0:	68db      	ldr	r3, [r3, #12]
 800feb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4a04      	ldr	r2, [pc, #16]	; (800fecc <prvResetNextTaskUnblockTime+0x3c>)
 800feba:	6013      	str	r3, [r2, #0]
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	20000a24 	.word	0x20000a24
 800fecc:	20000a8c 	.word	0x20000a8c

0800fed0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fed6:	4b0b      	ldr	r3, [pc, #44]	; (800ff04 <xTaskGetSchedulerState+0x34>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fede:	2301      	movs	r3, #1
 800fee0:	607b      	str	r3, [r7, #4]
 800fee2:	e008      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fee4:	4b08      	ldr	r3, [pc, #32]	; (800ff08 <xTaskGetSchedulerState+0x38>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d102      	bne.n	800fef2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800feec:	2302      	movs	r3, #2
 800feee:	607b      	str	r3, [r7, #4]
 800fef0:	e001      	b.n	800fef6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fef2:	2300      	movs	r3, #0
 800fef4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fef6:	687b      	ldr	r3, [r7, #4]
	}
 800fef8:	4618      	mov	r0, r3
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	20000a78 	.word	0x20000a78
 800ff08:	20000a94 	.word	0x20000a94

0800ff0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d05e      	beq.n	800ffe0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff26:	4b31      	ldr	r3, [pc, #196]	; (800ffec <xTaskPriorityInherit+0xe0>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d24e      	bcs.n	800ffce <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	699b      	ldr	r3, [r3, #24]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	db06      	blt.n	800ff46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff38:	4b2c      	ldr	r3, [pc, #176]	; (800ffec <xTaskPriorityInherit+0xe0>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3e:	f1c3 0207 	rsb	r2, r3, #7
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	6959      	ldr	r1, [r3, #20]
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4e:	4613      	mov	r3, r2
 800ff50:	009b      	lsls	r3, r3, #2
 800ff52:	4413      	add	r3, r2
 800ff54:	009b      	lsls	r3, r3, #2
 800ff56:	4a26      	ldr	r2, [pc, #152]	; (800fff0 <xTaskPriorityInherit+0xe4>)
 800ff58:	4413      	add	r3, r2
 800ff5a:	4299      	cmp	r1, r3
 800ff5c:	d12f      	bne.n	800ffbe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	3304      	adds	r3, #4
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7fe fe0a 	bl	800eb7c <uxListRemove>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10a      	bne.n	800ff84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff72:	2201      	movs	r2, #1
 800ff74:	fa02 f303 	lsl.w	r3, r2, r3
 800ff78:	43da      	mvns	r2, r3
 800ff7a:	4b1e      	ldr	r3, [pc, #120]	; (800fff4 <xTaskPriorityInherit+0xe8>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4013      	ands	r3, r2
 800ff80:	4a1c      	ldr	r2, [pc, #112]	; (800fff4 <xTaskPriorityInherit+0xe8>)
 800ff82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff84:	4b19      	ldr	r3, [pc, #100]	; (800ffec <xTaskPriorityInherit+0xe0>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff92:	2201      	movs	r2, #1
 800ff94:	409a      	lsls	r2, r3
 800ff96:	4b17      	ldr	r3, [pc, #92]	; (800fff4 <xTaskPriorityInherit+0xe8>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	4a15      	ldr	r2, [pc, #84]	; (800fff4 <xTaskPriorityInherit+0xe8>)
 800ff9e:	6013      	str	r3, [r2, #0]
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa4:	4613      	mov	r3, r2
 800ffa6:	009b      	lsls	r3, r3, #2
 800ffa8:	4413      	add	r3, r2
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4a10      	ldr	r2, [pc, #64]	; (800fff0 <xTaskPriorityInherit+0xe4>)
 800ffae:	441a      	add	r2, r3
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	3304      	adds	r3, #4
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	f7fe fd83 	bl	800eac2 <vListInsertEnd>
 800ffbc:	e004      	b.n	800ffc8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ffbe:	4b0b      	ldr	r3, [pc, #44]	; (800ffec <xTaskPriorityInherit+0xe0>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	60fb      	str	r3, [r7, #12]
 800ffcc:	e008      	b.n	800ffe0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffd2:	4b06      	ldr	r3, [pc, #24]	; (800ffec <xTaskPriorityInherit+0xe0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d201      	bcs.n	800ffe0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ffdc:	2301      	movs	r3, #1
 800ffde:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
	}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	2000096c 	.word	0x2000096c
 800fff0:	20000970 	.word	0x20000970
 800fff4:	20000a74 	.word	0x20000a74

0800fff8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010004:	2300      	movs	r3, #0
 8010006:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d06e      	beq.n	80100ec <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801000e:	4b3a      	ldr	r3, [pc, #232]	; (80100f8 <xTaskPriorityDisinherit+0x100>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	693a      	ldr	r2, [r7, #16]
 8010014:	429a      	cmp	r2, r3
 8010016:	d00a      	beq.n	801002e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001c:	f383 8811 	msr	BASEPRI, r3
 8010020:	f3bf 8f6f 	isb	sy
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	60fb      	str	r3, [r7, #12]
}
 801002a:	bf00      	nop
 801002c:	e7fe      	b.n	801002c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801002e:	693b      	ldr	r3, [r7, #16]
 8010030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010032:	2b00      	cmp	r3, #0
 8010034:	d10a      	bne.n	801004c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003a:	f383 8811 	msr	BASEPRI, r3
 801003e:	f3bf 8f6f 	isb	sy
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	60bb      	str	r3, [r7, #8]
}
 8010048:	bf00      	nop
 801004a:	e7fe      	b.n	801004a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010050:	1e5a      	subs	r2, r3, #1
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801005e:	429a      	cmp	r2, r3
 8010060:	d044      	beq.n	80100ec <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010066:	2b00      	cmp	r3, #0
 8010068:	d140      	bne.n	80100ec <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	3304      	adds	r3, #4
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe fd84 	bl	800eb7c <uxListRemove>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d115      	bne.n	80100a6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801007a:	693b      	ldr	r3, [r7, #16]
 801007c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007e:	491f      	ldr	r1, [pc, #124]	; (80100fc <xTaskPriorityDisinherit+0x104>)
 8010080:	4613      	mov	r3, r2
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	4413      	add	r3, r2
 8010086:	009b      	lsls	r3, r3, #2
 8010088:	440b      	add	r3, r1
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10a      	bne.n	80100a6 <xTaskPriorityDisinherit+0xae>
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010094:	2201      	movs	r2, #1
 8010096:	fa02 f303 	lsl.w	r3, r2, r3
 801009a:	43da      	mvns	r2, r3
 801009c:	4b18      	ldr	r3, [pc, #96]	; (8010100 <xTaskPriorityDisinherit+0x108>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4013      	ands	r3, r2
 80100a2:	4a17      	ldr	r2, [pc, #92]	; (8010100 <xTaskPriorityDisinherit+0x108>)
 80100a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b2:	f1c3 0207 	rsb	r2, r3, #7
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100be:	2201      	movs	r2, #1
 80100c0:	409a      	lsls	r2, r3
 80100c2:	4b0f      	ldr	r3, [pc, #60]	; (8010100 <xTaskPriorityDisinherit+0x108>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	4a0d      	ldr	r2, [pc, #52]	; (8010100 <xTaskPriorityDisinherit+0x108>)
 80100ca:	6013      	str	r3, [r2, #0]
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100d0:	4613      	mov	r3, r2
 80100d2:	009b      	lsls	r3, r3, #2
 80100d4:	4413      	add	r3, r2
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	4a08      	ldr	r2, [pc, #32]	; (80100fc <xTaskPriorityDisinherit+0x104>)
 80100da:	441a      	add	r2, r3
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	3304      	adds	r3, #4
 80100e0:	4619      	mov	r1, r3
 80100e2:	4610      	mov	r0, r2
 80100e4:	f7fe fced 	bl	800eac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80100e8:	2301      	movs	r3, #1
 80100ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80100ec:	697b      	ldr	r3, [r7, #20]
	}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3718      	adds	r7, #24
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	2000096c 	.word	0x2000096c
 80100fc:	20000970 	.word	0x20000970
 8010100:	20000a74 	.word	0x20000a74

08010104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010104:	b580      	push	{r7, lr}
 8010106:	b088      	sub	sp, #32
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010112:	2301      	movs	r3, #1
 8010114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d077      	beq.n	801020c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801011c:	69bb      	ldr	r3, [r7, #24]
 801011e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010120:	2b00      	cmp	r3, #0
 8010122:	d10a      	bne.n	801013a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010128:	f383 8811 	msr	BASEPRI, r3
 801012c:	f3bf 8f6f 	isb	sy
 8010130:	f3bf 8f4f 	dsb	sy
 8010134:	60fb      	str	r3, [r7, #12]
}
 8010136:	bf00      	nop
 8010138:	e7fe      	b.n	8010138 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801013a:	69bb      	ldr	r3, [r7, #24]
 801013c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801013e:	683a      	ldr	r2, [r7, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d902      	bls.n	801014a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	61fb      	str	r3, [r7, #28]
 8010148:	e002      	b.n	8010150 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801014e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010150:	69bb      	ldr	r3, [r7, #24]
 8010152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010154:	69fa      	ldr	r2, [r7, #28]
 8010156:	429a      	cmp	r2, r3
 8010158:	d058      	beq.n	801020c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801015a:	69bb      	ldr	r3, [r7, #24]
 801015c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	429a      	cmp	r2, r3
 8010162:	d153      	bne.n	801020c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010164:	4b2b      	ldr	r3, [pc, #172]	; (8010214 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	69ba      	ldr	r2, [r7, #24]
 801016a:	429a      	cmp	r2, r3
 801016c:	d10a      	bne.n	8010184 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	60bb      	str	r3, [r7, #8]
}
 8010180:	bf00      	nop
 8010182:	e7fe      	b.n	8010182 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010184:	69bb      	ldr	r3, [r7, #24]
 8010186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010188:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	69fa      	ldr	r2, [r7, #28]
 801018e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	2b00      	cmp	r3, #0
 8010196:	db04      	blt.n	80101a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	f1c3 0207 	rsb	r2, r3, #7
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	6959      	ldr	r1, [r3, #20]
 80101a6:	693a      	ldr	r2, [r7, #16]
 80101a8:	4613      	mov	r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	4a19      	ldr	r2, [pc, #100]	; (8010218 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80101b2:	4413      	add	r3, r2
 80101b4:	4299      	cmp	r1, r3
 80101b6:	d129      	bne.n	801020c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101b8:	69bb      	ldr	r3, [r7, #24]
 80101ba:	3304      	adds	r3, #4
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fe fcdd 	bl	800eb7c <uxListRemove>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d10a      	bne.n	80101de <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80101c8:	69bb      	ldr	r3, [r7, #24]
 80101ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101cc:	2201      	movs	r2, #1
 80101ce:	fa02 f303 	lsl.w	r3, r2, r3
 80101d2:	43da      	mvns	r2, r3
 80101d4:	4b11      	ldr	r3, [pc, #68]	; (801021c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4013      	ands	r3, r2
 80101da:	4a10      	ldr	r2, [pc, #64]	; (801021c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80101dc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80101de:	69bb      	ldr	r3, [r7, #24]
 80101e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e2:	2201      	movs	r2, #1
 80101e4:	409a      	lsls	r2, r3
 80101e6:	4b0d      	ldr	r3, [pc, #52]	; (801021c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4313      	orrs	r3, r2
 80101ec:	4a0b      	ldr	r2, [pc, #44]	; (801021c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80101ee:	6013      	str	r3, [r2, #0]
 80101f0:	69bb      	ldr	r3, [r7, #24]
 80101f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f4:	4613      	mov	r3, r2
 80101f6:	009b      	lsls	r3, r3, #2
 80101f8:	4413      	add	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4a06      	ldr	r2, [pc, #24]	; (8010218 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80101fe:	441a      	add	r2, r3
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	3304      	adds	r3, #4
 8010204:	4619      	mov	r1, r3
 8010206:	4610      	mov	r0, r2
 8010208:	f7fe fc5b 	bl	800eac2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801020c:	bf00      	nop
 801020e:	3720      	adds	r7, #32
 8010210:	46bd      	mov	sp, r7
 8010212:	bd80      	pop	{r7, pc}
 8010214:	2000096c 	.word	0x2000096c
 8010218:	20000970 	.word	0x20000970
 801021c:	20000a74 	.word	0x20000a74

08010220 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010220:	b480      	push	{r7}
 8010222:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010224:	4b07      	ldr	r3, [pc, #28]	; (8010244 <pvTaskIncrementMutexHeldCount+0x24>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d004      	beq.n	8010236 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801022c:	4b05      	ldr	r3, [pc, #20]	; (8010244 <pvTaskIncrementMutexHeldCount+0x24>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010232:	3201      	adds	r2, #1
 8010234:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010236:	4b03      	ldr	r3, [pc, #12]	; (8010244 <pvTaskIncrementMutexHeldCount+0x24>)
 8010238:	681b      	ldr	r3, [r3, #0]
	}
 801023a:	4618      	mov	r0, r3
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr
 8010244:	2000096c 	.word	0x2000096c

08010248 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010252:	4b2b      	ldr	r3, [pc, #172]	; (8010300 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010258:	4b2a      	ldr	r3, [pc, #168]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010262:	4b28      	ldr	r3, [pc, #160]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	3304      	adds	r3, #4
 8010268:	4618      	mov	r0, r3
 801026a:	f7fe fc87 	bl	800eb7c <uxListRemove>
 801026e:	4603      	mov	r3, r0
 8010270:	2b00      	cmp	r3, #0
 8010272:	d10b      	bne.n	801028c <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010274:	4b23      	ldr	r3, [pc, #140]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801027a:	2201      	movs	r2, #1
 801027c:	fa02 f303 	lsl.w	r3, r2, r3
 8010280:	43da      	mvns	r2, r3
 8010282:	4b21      	ldr	r3, [pc, #132]	; (8010308 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4013      	ands	r3, r2
 8010288:	4a1f      	ldr	r2, [pc, #124]	; (8010308 <prvAddCurrentTaskToDelayedList+0xc0>)
 801028a:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010292:	d10a      	bne.n	80102aa <prvAddCurrentTaskToDelayedList+0x62>
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d007      	beq.n	80102aa <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801029a:	4b1a      	ldr	r3, [pc, #104]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	3304      	adds	r3, #4
 80102a0:	4619      	mov	r1, r3
 80102a2:	481a      	ldr	r0, [pc, #104]	; (801030c <prvAddCurrentTaskToDelayedList+0xc4>)
 80102a4:	f7fe fc0d 	bl	800eac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80102a8:	e026      	b.n	80102f8 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4413      	add	r3, r2
 80102b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80102b2:	4b14      	ldr	r3, [pc, #80]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80102ba:	68ba      	ldr	r2, [r7, #8]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d209      	bcs.n	80102d6 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102c2:	4b13      	ldr	r3, [pc, #76]	; (8010310 <prvAddCurrentTaskToDelayedList+0xc8>)
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3304      	adds	r3, #4
 80102cc:	4619      	mov	r1, r3
 80102ce:	4610      	mov	r0, r2
 80102d0:	f7fe fc1b 	bl	800eb0a <vListInsert>
}
 80102d4:	e010      	b.n	80102f8 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80102d6:	4b0f      	ldr	r3, [pc, #60]	; (8010314 <prvAddCurrentTaskToDelayedList+0xcc>)
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	4b0a      	ldr	r3, [pc, #40]	; (8010304 <prvAddCurrentTaskToDelayedList+0xbc>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3304      	adds	r3, #4
 80102e0:	4619      	mov	r1, r3
 80102e2:	4610      	mov	r0, r2
 80102e4:	f7fe fc11 	bl	800eb0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80102e8:	4b0b      	ldr	r3, [pc, #44]	; (8010318 <prvAddCurrentTaskToDelayedList+0xd0>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	68ba      	ldr	r2, [r7, #8]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d202      	bcs.n	80102f8 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 80102f2:	4a09      	ldr	r2, [pc, #36]	; (8010318 <prvAddCurrentTaskToDelayedList+0xd0>)
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	6013      	str	r3, [r2, #0]
}
 80102f8:	bf00      	nop
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	20000a70 	.word	0x20000a70
 8010304:	2000096c 	.word	0x2000096c
 8010308:	20000a74 	.word	0x20000a74
 801030c:	20000a58 	.word	0x20000a58
 8010310:	20000a28 	.word	0x20000a28
 8010314:	20000a24 	.word	0x20000a24
 8010318:	20000a8c 	.word	0x20000a8c

0801031c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801031c:	b480      	push	{r7}
 801031e:	b085      	sub	sp, #20
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	60b9      	str	r1, [r7, #8]
 8010326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	3b04      	subs	r3, #4
 801032c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	3b04      	subs	r3, #4
 801033a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	f023 0201 	bic.w	r2, r3, #1
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	3b04      	subs	r3, #4
 801034a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801034c:	4a0c      	ldr	r2, [pc, #48]	; (8010380 <pxPortInitialiseStack+0x64>)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	3b14      	subs	r3, #20
 8010356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	3b04      	subs	r3, #4
 8010362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	f06f 0202 	mvn.w	r2, #2
 801036a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	3b20      	subs	r3, #32
 8010370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010372:	68fb      	ldr	r3, [r7, #12]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3714      	adds	r7, #20
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	08010385 	.word	0x08010385

08010384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801038e:	4b12      	ldr	r3, [pc, #72]	; (80103d8 <prvTaskExitError+0x54>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010396:	d00a      	beq.n	80103ae <prvTaskExitError+0x2a>
	__asm volatile
 8010398:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039c:	f383 8811 	msr	BASEPRI, r3
 80103a0:	f3bf 8f6f 	isb	sy
 80103a4:	f3bf 8f4f 	dsb	sy
 80103a8:	60fb      	str	r3, [r7, #12]
}
 80103aa:	bf00      	nop
 80103ac:	e7fe      	b.n	80103ac <prvTaskExitError+0x28>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	60bb      	str	r3, [r7, #8]
}
 80103c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80103c2:	bf00      	nop
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d0fc      	beq.n	80103c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80103ca:	bf00      	nop
 80103cc:	bf00      	nop
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr
 80103d8:	20000010 	.word	0x20000010
 80103dc:	00000000 	.word	0x00000000

080103e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80103e0:	4b07      	ldr	r3, [pc, #28]	; (8010400 <pxCurrentTCBConst2>)
 80103e2:	6819      	ldr	r1, [r3, #0]
 80103e4:	6808      	ldr	r0, [r1, #0]
 80103e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ea:	f380 8809 	msr	PSP, r0
 80103ee:	f3bf 8f6f 	isb	sy
 80103f2:	f04f 0000 	mov.w	r0, #0
 80103f6:	f380 8811 	msr	BASEPRI, r0
 80103fa:	4770      	bx	lr
 80103fc:	f3af 8000 	nop.w

08010400 <pxCurrentTCBConst2>:
 8010400:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010404:	bf00      	nop
 8010406:	bf00      	nop

08010408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010408:	4808      	ldr	r0, [pc, #32]	; (801042c <prvPortStartFirstTask+0x24>)
 801040a:	6800      	ldr	r0, [r0, #0]
 801040c:	6800      	ldr	r0, [r0, #0]
 801040e:	f380 8808 	msr	MSP, r0
 8010412:	f04f 0000 	mov.w	r0, #0
 8010416:	f380 8814 	msr	CONTROL, r0
 801041a:	b662      	cpsie	i
 801041c:	b661      	cpsie	f
 801041e:	f3bf 8f4f 	dsb	sy
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	df00      	svc	0
 8010428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801042a:	bf00      	nop
 801042c:	e000ed08 	.word	0xe000ed08

08010430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b086      	sub	sp, #24
 8010434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010436:	4b46      	ldr	r3, [pc, #280]	; (8010550 <xPortStartScheduler+0x120>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	4a46      	ldr	r2, [pc, #280]	; (8010554 <xPortStartScheduler+0x124>)
 801043c:	4293      	cmp	r3, r2
 801043e:	d10a      	bne.n	8010456 <xPortStartScheduler+0x26>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010444:	f383 8811 	msr	BASEPRI, r3
 8010448:	f3bf 8f6f 	isb	sy
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	613b      	str	r3, [r7, #16]
}
 8010452:	bf00      	nop
 8010454:	e7fe      	b.n	8010454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010456:	4b3e      	ldr	r3, [pc, #248]	; (8010550 <xPortStartScheduler+0x120>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4a3f      	ldr	r2, [pc, #252]	; (8010558 <xPortStartScheduler+0x128>)
 801045c:	4293      	cmp	r3, r2
 801045e:	d10a      	bne.n	8010476 <xPortStartScheduler+0x46>
	__asm volatile
 8010460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010464:	f383 8811 	msr	BASEPRI, r3
 8010468:	f3bf 8f6f 	isb	sy
 801046c:	f3bf 8f4f 	dsb	sy
 8010470:	60fb      	str	r3, [r7, #12]
}
 8010472:	bf00      	nop
 8010474:	e7fe      	b.n	8010474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010476:	4b39      	ldr	r3, [pc, #228]	; (801055c <xPortStartScheduler+0x12c>)
 8010478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	b2db      	uxtb	r3, r3
 8010480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	22ff      	movs	r2, #255	; 0xff
 8010486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	b2db      	uxtb	r3, r3
 801048e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010490:	78fb      	ldrb	r3, [r7, #3]
 8010492:	b2db      	uxtb	r3, r3
 8010494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010498:	b2da      	uxtb	r2, r3
 801049a:	4b31      	ldr	r3, [pc, #196]	; (8010560 <xPortStartScheduler+0x130>)
 801049c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801049e:	4b31      	ldr	r3, [pc, #196]	; (8010564 <xPortStartScheduler+0x134>)
 80104a0:	2207      	movs	r2, #7
 80104a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104a4:	e009      	b.n	80104ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80104a6:	4b2f      	ldr	r3, [pc, #188]	; (8010564 <xPortStartScheduler+0x134>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	3b01      	subs	r3, #1
 80104ac:	4a2d      	ldr	r2, [pc, #180]	; (8010564 <xPortStartScheduler+0x134>)
 80104ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80104b0:	78fb      	ldrb	r3, [r7, #3]
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80104ba:	78fb      	ldrb	r3, [r7, #3]
 80104bc:	b2db      	uxtb	r3, r3
 80104be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80104c2:	2b80      	cmp	r3, #128	; 0x80
 80104c4:	d0ef      	beq.n	80104a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80104c6:	4b27      	ldr	r3, [pc, #156]	; (8010564 <xPortStartScheduler+0x134>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f1c3 0307 	rsb	r3, r3, #7
 80104ce:	2b04      	cmp	r3, #4
 80104d0:	d00a      	beq.n	80104e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	60bb      	str	r3, [r7, #8]
}
 80104e4:	bf00      	nop
 80104e6:	e7fe      	b.n	80104e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80104e8:	4b1e      	ldr	r3, [pc, #120]	; (8010564 <xPortStartScheduler+0x134>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	021b      	lsls	r3, r3, #8
 80104ee:	4a1d      	ldr	r2, [pc, #116]	; (8010564 <xPortStartScheduler+0x134>)
 80104f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80104f2:	4b1c      	ldr	r3, [pc, #112]	; (8010564 <xPortStartScheduler+0x134>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104fa:	4a1a      	ldr	r2, [pc, #104]	; (8010564 <xPortStartScheduler+0x134>)
 80104fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	b2da      	uxtb	r2, r3
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010506:	4b18      	ldr	r3, [pc, #96]	; (8010568 <xPortStartScheduler+0x138>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a17      	ldr	r2, [pc, #92]	; (8010568 <xPortStartScheduler+0x138>)
 801050c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010512:	4b15      	ldr	r3, [pc, #84]	; (8010568 <xPortStartScheduler+0x138>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a14      	ldr	r2, [pc, #80]	; (8010568 <xPortStartScheduler+0x138>)
 8010518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801051c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801051e:	f000 f8dd 	bl	80106dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010522:	4b12      	ldr	r3, [pc, #72]	; (801056c <xPortStartScheduler+0x13c>)
 8010524:	2200      	movs	r2, #0
 8010526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010528:	f000 f8fc 	bl	8010724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801052c:	4b10      	ldr	r3, [pc, #64]	; (8010570 <xPortStartScheduler+0x140>)
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a0f      	ldr	r2, [pc, #60]	; (8010570 <xPortStartScheduler+0x140>)
 8010532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010538:	f7ff ff66 	bl	8010408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801053c:	f7ff fa96 	bl	800fa6c <vTaskSwitchContext>
	prvTaskExitError();
 8010540:	f7ff ff20 	bl	8010384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3718      	adds	r7, #24
 801054a:	46bd      	mov	sp, r7
 801054c:	bd80      	pop	{r7, pc}
 801054e:	bf00      	nop
 8010550:	e000ed00 	.word	0xe000ed00
 8010554:	410fc271 	.word	0x410fc271
 8010558:	410fc270 	.word	0x410fc270
 801055c:	e000e400 	.word	0xe000e400
 8010560:	20000a98 	.word	0x20000a98
 8010564:	20000a9c 	.word	0x20000a9c
 8010568:	e000ed20 	.word	0xe000ed20
 801056c:	20000010 	.word	0x20000010
 8010570:	e000ef34 	.word	0xe000ef34

08010574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
	__asm volatile
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	607b      	str	r3, [r7, #4]
}
 801058c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801058e:	4b0f      	ldr	r3, [pc, #60]	; (80105cc <vPortEnterCritical+0x58>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	3301      	adds	r3, #1
 8010594:	4a0d      	ldr	r2, [pc, #52]	; (80105cc <vPortEnterCritical+0x58>)
 8010596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010598:	4b0c      	ldr	r3, [pc, #48]	; (80105cc <vPortEnterCritical+0x58>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2b01      	cmp	r3, #1
 801059e:	d10f      	bne.n	80105c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80105a0:	4b0b      	ldr	r3, [pc, #44]	; (80105d0 <vPortEnterCritical+0x5c>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d00a      	beq.n	80105c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80105aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ae:	f383 8811 	msr	BASEPRI, r3
 80105b2:	f3bf 8f6f 	isb	sy
 80105b6:	f3bf 8f4f 	dsb	sy
 80105ba:	603b      	str	r3, [r7, #0]
}
 80105bc:	bf00      	nop
 80105be:	e7fe      	b.n	80105be <vPortEnterCritical+0x4a>
	}
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr
 80105cc:	20000010 	.word	0x20000010
 80105d0:	e000ed04 	.word	0xe000ed04

080105d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80105d4:	b480      	push	{r7}
 80105d6:	b083      	sub	sp, #12
 80105d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80105da:	4b12      	ldr	r3, [pc, #72]	; (8010624 <vPortExitCritical+0x50>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d10a      	bne.n	80105f8 <vPortExitCritical+0x24>
	__asm volatile
 80105e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e6:	f383 8811 	msr	BASEPRI, r3
 80105ea:	f3bf 8f6f 	isb	sy
 80105ee:	f3bf 8f4f 	dsb	sy
 80105f2:	607b      	str	r3, [r7, #4]
}
 80105f4:	bf00      	nop
 80105f6:	e7fe      	b.n	80105f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80105f8:	4b0a      	ldr	r3, [pc, #40]	; (8010624 <vPortExitCritical+0x50>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3b01      	subs	r3, #1
 80105fe:	4a09      	ldr	r2, [pc, #36]	; (8010624 <vPortExitCritical+0x50>)
 8010600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010602:	4b08      	ldr	r3, [pc, #32]	; (8010624 <vPortExitCritical+0x50>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d105      	bne.n	8010616 <vPortExitCritical+0x42>
 801060a:	2300      	movs	r3, #0
 801060c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	f383 8811 	msr	BASEPRI, r3
}
 8010614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010616:	bf00      	nop
 8010618:	370c      	adds	r7, #12
 801061a:	46bd      	mov	sp, r7
 801061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010620:	4770      	bx	lr
 8010622:	bf00      	nop
 8010624:	20000010 	.word	0x20000010
	...

08010630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010630:	f3ef 8009 	mrs	r0, PSP
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	4b15      	ldr	r3, [pc, #84]	; (8010690 <pxCurrentTCBConst>)
 801063a:	681a      	ldr	r2, [r3, #0]
 801063c:	f01e 0f10 	tst.w	lr, #16
 8010640:	bf08      	it	eq
 8010642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064a:	6010      	str	r0, [r2, #0]
 801064c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010654:	f380 8811 	msr	BASEPRI, r0
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	f3bf 8f6f 	isb	sy
 8010660:	f7ff fa04 	bl	800fa6c <vTaskSwitchContext>
 8010664:	f04f 0000 	mov.w	r0, #0
 8010668:	f380 8811 	msr	BASEPRI, r0
 801066c:	bc09      	pop	{r0, r3}
 801066e:	6819      	ldr	r1, [r3, #0]
 8010670:	6808      	ldr	r0, [r1, #0]
 8010672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010676:	f01e 0f10 	tst.w	lr, #16
 801067a:	bf08      	it	eq
 801067c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010680:	f380 8809 	msr	PSP, r0
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	f3af 8000 	nop.w

08010690 <pxCurrentTCBConst>:
 8010690:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010694:	bf00      	nop
 8010696:	bf00      	nop

08010698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b082      	sub	sp, #8
 801069c:	af00      	add	r7, sp, #0
	__asm volatile
 801069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a2:	f383 8811 	msr	BASEPRI, r3
 80106a6:	f3bf 8f6f 	isb	sy
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	607b      	str	r3, [r7, #4]
}
 80106b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80106b2:	f7ff f945 	bl	800f940 <xTaskIncrementTick>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d003      	beq.n	80106c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80106bc:	4b06      	ldr	r3, [pc, #24]	; (80106d8 <SysTick_Handler+0x40>)
 80106be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106c2:	601a      	str	r2, [r3, #0]
 80106c4:	2300      	movs	r3, #0
 80106c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	f383 8811 	msr	BASEPRI, r3
}
 80106ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80106d0:	bf00      	nop
 80106d2:	3708      	adds	r7, #8
 80106d4:	46bd      	mov	sp, r7
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	e000ed04 	.word	0xe000ed04

080106dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80106dc:	b480      	push	{r7}
 80106de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80106e0:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <vPortSetupTimerInterrupt+0x34>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80106e6:	4b0b      	ldr	r3, [pc, #44]	; (8010714 <vPortSetupTimerInterrupt+0x38>)
 80106e8:	2200      	movs	r2, #0
 80106ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80106ec:	4b0a      	ldr	r3, [pc, #40]	; (8010718 <vPortSetupTimerInterrupt+0x3c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a0a      	ldr	r2, [pc, #40]	; (801071c <vPortSetupTimerInterrupt+0x40>)
 80106f2:	fba2 2303 	umull	r2, r3, r2, r3
 80106f6:	099b      	lsrs	r3, r3, #6
 80106f8:	4a09      	ldr	r2, [pc, #36]	; (8010720 <vPortSetupTimerInterrupt+0x44>)
 80106fa:	3b01      	subs	r3, #1
 80106fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80106fe:	4b04      	ldr	r3, [pc, #16]	; (8010710 <vPortSetupTimerInterrupt+0x34>)
 8010700:	2207      	movs	r2, #7
 8010702:	601a      	str	r2, [r3, #0]
}
 8010704:	bf00      	nop
 8010706:	46bd      	mov	sp, r7
 8010708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	e000e010 	.word	0xe000e010
 8010714:	e000e018 	.word	0xe000e018
 8010718:	20000004 	.word	0x20000004
 801071c:	10624dd3 	.word	0x10624dd3
 8010720:	e000e014 	.word	0xe000e014

08010724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010734 <vPortEnableVFP+0x10>
 8010728:	6801      	ldr	r1, [r0, #0]
 801072a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801072e:	6001      	str	r1, [r0, #0]
 8010730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010732:	bf00      	nop
 8010734:	e000ed88 	.word	0xe000ed88

08010738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801073e:	f3ef 8305 	mrs	r3, IPSR
 8010742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2b0f      	cmp	r3, #15
 8010748:	d914      	bls.n	8010774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801074a:	4a17      	ldr	r2, [pc, #92]	; (80107a8 <vPortValidateInterruptPriority+0x70>)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	4413      	add	r3, r2
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010754:	4b15      	ldr	r3, [pc, #84]	; (80107ac <vPortValidateInterruptPriority+0x74>)
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	7afa      	ldrb	r2, [r7, #11]
 801075a:	429a      	cmp	r2, r3
 801075c:	d20a      	bcs.n	8010774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801075e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010762:	f383 8811 	msr	BASEPRI, r3
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	f3bf 8f4f 	dsb	sy
 801076e:	607b      	str	r3, [r7, #4]
}
 8010770:	bf00      	nop
 8010772:	e7fe      	b.n	8010772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010774:	4b0e      	ldr	r3, [pc, #56]	; (80107b0 <vPortValidateInterruptPriority+0x78>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801077c:	4b0d      	ldr	r3, [pc, #52]	; (80107b4 <vPortValidateInterruptPriority+0x7c>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	429a      	cmp	r2, r3
 8010782:	d90a      	bls.n	801079a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010788:	f383 8811 	msr	BASEPRI, r3
 801078c:	f3bf 8f6f 	isb	sy
 8010790:	f3bf 8f4f 	dsb	sy
 8010794:	603b      	str	r3, [r7, #0]
}
 8010796:	bf00      	nop
 8010798:	e7fe      	b.n	8010798 <vPortValidateInterruptPriority+0x60>
	}
 801079a:	bf00      	nop
 801079c:	3714      	adds	r7, #20
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	e000e3f0 	.word	0xe000e3f0
 80107ac:	20000a98 	.word	0x20000a98
 80107b0:	e000ed0c 	.word	0xe000ed0c
 80107b4:	20000a9c 	.word	0x20000a9c

080107b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b08a      	sub	sp, #40	; 0x28
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80107c0:	2300      	movs	r3, #0
 80107c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80107c4:	f7ff f820 	bl	800f808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80107c8:	4b5b      	ldr	r3, [pc, #364]	; (8010938 <pvPortMalloc+0x180>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d101      	bne.n	80107d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80107d0:	f000 f920 	bl	8010a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80107d4:	4b59      	ldr	r3, [pc, #356]	; (801093c <pvPortMalloc+0x184>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4013      	ands	r3, r2
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f040 8093 	bne.w	8010908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01d      	beq.n	8010824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80107e8:	2208      	movs	r2, #8
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	4413      	add	r3, r2
 80107ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f003 0307 	and.w	r3, r3, #7
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d014      	beq.n	8010824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f023 0307 	bic.w	r3, r3, #7
 8010800:	3308      	adds	r3, #8
 8010802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f003 0307 	and.w	r3, r3, #7
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00a      	beq.n	8010824 <pvPortMalloc+0x6c>
	__asm volatile
 801080e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010812:	f383 8811 	msr	BASEPRI, r3
 8010816:	f3bf 8f6f 	isb	sy
 801081a:	f3bf 8f4f 	dsb	sy
 801081e:	617b      	str	r3, [r7, #20]
}
 8010820:	bf00      	nop
 8010822:	e7fe      	b.n	8010822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d06e      	beq.n	8010908 <pvPortMalloc+0x150>
 801082a:	4b45      	ldr	r3, [pc, #276]	; (8010940 <pvPortMalloc+0x188>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	687a      	ldr	r2, [r7, #4]
 8010830:	429a      	cmp	r2, r3
 8010832:	d869      	bhi.n	8010908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010834:	4b43      	ldr	r3, [pc, #268]	; (8010944 <pvPortMalloc+0x18c>)
 8010836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010838:	4b42      	ldr	r3, [pc, #264]	; (8010944 <pvPortMalloc+0x18c>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801083e:	e004      	b.n	801084a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	429a      	cmp	r2, r3
 8010852:	d903      	bls.n	801085c <pvPortMalloc+0xa4>
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d1f1      	bne.n	8010840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801085c:	4b36      	ldr	r3, [pc, #216]	; (8010938 <pvPortMalloc+0x180>)
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010862:	429a      	cmp	r2, r3
 8010864:	d050      	beq.n	8010908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010866:	6a3b      	ldr	r3, [r7, #32]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2208      	movs	r2, #8
 801086c:	4413      	add	r3, r2
 801086e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010872:	681a      	ldr	r2, [r3, #0]
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087a:	685a      	ldr	r2, [r3, #4]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	1ad2      	subs	r2, r2, r3
 8010880:	2308      	movs	r3, #8
 8010882:	005b      	lsls	r3, r3, #1
 8010884:	429a      	cmp	r2, r3
 8010886:	d91f      	bls.n	80108c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	4413      	add	r3, r2
 801088e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	f003 0307 	and.w	r3, r3, #7
 8010896:	2b00      	cmp	r3, #0
 8010898:	d00a      	beq.n	80108b0 <pvPortMalloc+0xf8>
	__asm volatile
 801089a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801089e:	f383 8811 	msr	BASEPRI, r3
 80108a2:	f3bf 8f6f 	isb	sy
 80108a6:	f3bf 8f4f 	dsb	sy
 80108aa:	613b      	str	r3, [r7, #16]
}
 80108ac:	bf00      	nop
 80108ae:	e7fe      	b.n	80108ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80108b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108b2:	685a      	ldr	r2, [r3, #4]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	1ad2      	subs	r2, r2, r3
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80108bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80108c2:	69b8      	ldr	r0, [r7, #24]
 80108c4:	f000 f908 	bl	8010ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80108c8:	4b1d      	ldr	r3, [pc, #116]	; (8010940 <pvPortMalloc+0x188>)
 80108ca:	681a      	ldr	r2, [r3, #0]
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	4a1b      	ldr	r2, [pc, #108]	; (8010940 <pvPortMalloc+0x188>)
 80108d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80108d6:	4b1a      	ldr	r3, [pc, #104]	; (8010940 <pvPortMalloc+0x188>)
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	4b1b      	ldr	r3, [pc, #108]	; (8010948 <pvPortMalloc+0x190>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	429a      	cmp	r2, r3
 80108e0:	d203      	bcs.n	80108ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80108e2:	4b17      	ldr	r3, [pc, #92]	; (8010940 <pvPortMalloc+0x188>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a18      	ldr	r2, [pc, #96]	; (8010948 <pvPortMalloc+0x190>)
 80108e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	685a      	ldr	r2, [r3, #4]
 80108ee:	4b13      	ldr	r3, [pc, #76]	; (801093c <pvPortMalloc+0x184>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	431a      	orrs	r2, r3
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80108f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fa:	2200      	movs	r2, #0
 80108fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80108fe:	4b13      	ldr	r3, [pc, #76]	; (801094c <pvPortMalloc+0x194>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	3301      	adds	r3, #1
 8010904:	4a11      	ldr	r2, [pc, #68]	; (801094c <pvPortMalloc+0x194>)
 8010906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010908:	f7fe ff8c 	bl	800f824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	f003 0307 	and.w	r3, r3, #7
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00a      	beq.n	801092c <pvPortMalloc+0x174>
	__asm volatile
 8010916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091a:	f383 8811 	msr	BASEPRI, r3
 801091e:	f3bf 8f6f 	isb	sy
 8010922:	f3bf 8f4f 	dsb	sy
 8010926:	60fb      	str	r3, [r7, #12]
}
 8010928:	bf00      	nop
 801092a:	e7fe      	b.n	801092a <pvPortMalloc+0x172>
	return pvReturn;
 801092c:	69fb      	ldr	r3, [r7, #28]
}
 801092e:	4618      	mov	r0, r3
 8010930:	3728      	adds	r7, #40	; 0x28
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	20003aa8 	.word	0x20003aa8
 801093c:	20003abc 	.word	0x20003abc
 8010940:	20003aac 	.word	0x20003aac
 8010944:	20003aa0 	.word	0x20003aa0
 8010948:	20003ab0 	.word	0x20003ab0
 801094c:	20003ab4 	.word	0x20003ab4

08010950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d04d      	beq.n	80109fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010962:	2308      	movs	r3, #8
 8010964:	425b      	negs	r3, r3
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	4413      	add	r3, r2
 801096a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	4b24      	ldr	r3, [pc, #144]	; (8010a08 <vPortFree+0xb8>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4013      	ands	r3, r2
 801097a:	2b00      	cmp	r3, #0
 801097c:	d10a      	bne.n	8010994 <vPortFree+0x44>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	60fb      	str	r3, [r7, #12]
}
 8010990:	bf00      	nop
 8010992:	e7fe      	b.n	8010992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00a      	beq.n	80109b2 <vPortFree+0x62>
	__asm volatile
 801099c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109a0:	f383 8811 	msr	BASEPRI, r3
 80109a4:	f3bf 8f6f 	isb	sy
 80109a8:	f3bf 8f4f 	dsb	sy
 80109ac:	60bb      	str	r3, [r7, #8]
}
 80109ae:	bf00      	nop
 80109b0:	e7fe      	b.n	80109b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	4b14      	ldr	r3, [pc, #80]	; (8010a08 <vPortFree+0xb8>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4013      	ands	r3, r2
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d01e      	beq.n	80109fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d11a      	bne.n	80109fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	685a      	ldr	r2, [r3, #4]
 80109cc:	4b0e      	ldr	r3, [pc, #56]	; (8010a08 <vPortFree+0xb8>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	43db      	mvns	r3, r3
 80109d2:	401a      	ands	r2, r3
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80109d8:	f7fe ff16 	bl	800f808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	685a      	ldr	r2, [r3, #4]
 80109e0:	4b0a      	ldr	r3, [pc, #40]	; (8010a0c <vPortFree+0xbc>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4413      	add	r3, r2
 80109e6:	4a09      	ldr	r2, [pc, #36]	; (8010a0c <vPortFree+0xbc>)
 80109e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80109ea:	6938      	ldr	r0, [r7, #16]
 80109ec:	f000 f874 	bl	8010ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80109f0:	4b07      	ldr	r3, [pc, #28]	; (8010a10 <vPortFree+0xc0>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	4a06      	ldr	r2, [pc, #24]	; (8010a10 <vPortFree+0xc0>)
 80109f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80109fa:	f7fe ff13 	bl	800f824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80109fe:	bf00      	nop
 8010a00:	3718      	adds	r7, #24
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
 8010a06:	bf00      	nop
 8010a08:	20003abc 	.word	0x20003abc
 8010a0c:	20003aac 	.word	0x20003aac
 8010a10:	20003ab8 	.word	0x20003ab8

08010a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010a14:	b480      	push	{r7}
 8010a16:	b085      	sub	sp, #20
 8010a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010a20:	4b27      	ldr	r3, [pc, #156]	; (8010ac0 <prvHeapInit+0xac>)
 8010a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f003 0307 	and.w	r3, r3, #7
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00c      	beq.n	8010a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	3307      	adds	r3, #7
 8010a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f023 0307 	bic.w	r3, r3, #7
 8010a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	4a1f      	ldr	r2, [pc, #124]	; (8010ac0 <prvHeapInit+0xac>)
 8010a44:	4413      	add	r3, r2
 8010a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a4c:	4a1d      	ldr	r2, [pc, #116]	; (8010ac4 <prvHeapInit+0xb0>)
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a52:	4b1c      	ldr	r3, [pc, #112]	; (8010ac4 <prvHeapInit+0xb0>)
 8010a54:	2200      	movs	r2, #0
 8010a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	68ba      	ldr	r2, [r7, #8]
 8010a5c:	4413      	add	r3, r2
 8010a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010a60:	2208      	movs	r2, #8
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	1a9b      	subs	r3, r3, r2
 8010a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	f023 0307 	bic.w	r3, r3, #7
 8010a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	4a15      	ldr	r2, [pc, #84]	; (8010ac8 <prvHeapInit+0xb4>)
 8010a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010a76:	4b14      	ldr	r3, [pc, #80]	; (8010ac8 <prvHeapInit+0xb4>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a7e:	4b12      	ldr	r3, [pc, #72]	; (8010ac8 <prvHeapInit+0xb4>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	2200      	movs	r2, #0
 8010a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010a8a:	683b      	ldr	r3, [r7, #0]
 8010a8c:	68fa      	ldr	r2, [r7, #12]
 8010a8e:	1ad2      	subs	r2, r2, r3
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a94:	4b0c      	ldr	r3, [pc, #48]	; (8010ac8 <prvHeapInit+0xb4>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	4a0a      	ldr	r2, [pc, #40]	; (8010acc <prvHeapInit+0xb8>)
 8010aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	4a09      	ldr	r2, [pc, #36]	; (8010ad0 <prvHeapInit+0xbc>)
 8010aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010aac:	4b09      	ldr	r3, [pc, #36]	; (8010ad4 <prvHeapInit+0xc0>)
 8010aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010ab2:	601a      	str	r2, [r3, #0]
}
 8010ab4:	bf00      	nop
 8010ab6:	3714      	adds	r7, #20
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abe:	4770      	bx	lr
 8010ac0:	20000aa0 	.word	0x20000aa0
 8010ac4:	20003aa0 	.word	0x20003aa0
 8010ac8:	20003aa8 	.word	0x20003aa8
 8010acc:	20003ab0 	.word	0x20003ab0
 8010ad0:	20003aac 	.word	0x20003aac
 8010ad4:	20003abc 	.word	0x20003abc

08010ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ae0:	4b28      	ldr	r3, [pc, #160]	; (8010b84 <prvInsertBlockIntoFreeList+0xac>)
 8010ae2:	60fb      	str	r3, [r7, #12]
 8010ae4:	e002      	b.n	8010aec <prvInsertBlockIntoFreeList+0x14>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	687a      	ldr	r2, [r7, #4]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d8f7      	bhi.n	8010ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	4413      	add	r3, r2
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d108      	bne.n	8010b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	685a      	ldr	r2, [r3, #4]
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	685b      	ldr	r3, [r3, #4]
 8010b10:	441a      	add	r2, r3
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	68ba      	ldr	r2, [r7, #8]
 8010b24:	441a      	add	r2, r3
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d118      	bne.n	8010b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	4b15      	ldr	r3, [pc, #84]	; (8010b88 <prvInsertBlockIntoFreeList+0xb0>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d00d      	beq.n	8010b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	685a      	ldr	r2, [r3, #4]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	441a      	add	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	601a      	str	r2, [r3, #0]
 8010b54:	e008      	b.n	8010b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010b56:	4b0c      	ldr	r3, [pc, #48]	; (8010b88 <prvInsertBlockIntoFreeList+0xb0>)
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	601a      	str	r2, [r3, #0]
 8010b5e:	e003      	b.n	8010b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d002      	beq.n	8010b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b76:	bf00      	nop
 8010b78:	3714      	adds	r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	20003aa0 	.word	0x20003aa0
 8010b88:	20003aa8 	.word	0x20003aa8

08010b8c <arm_pid_init_f32>:
 8010b8c:	edd0 6a08 	vldr	s13, [r0, #32]
 8010b90:	edd0 7a06 	vldr	s15, [r0, #24]
 8010b94:	ed90 7a07 	vldr	s14, [r0, #28]
 8010b98:	edc0 6a02 	vstr	s13, [r0, #8]
 8010b9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ba0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8010ba4:	eef1 7a67 	vneg.f32	s15, s15
 8010ba8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010bac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010bb0:	ed80 7a00 	vstr	s14, [r0]
 8010bb4:	edc0 7a01 	vstr	s15, [r0, #4]
 8010bb8:	b901      	cbnz	r1, 8010bbc <arm_pid_init_f32+0x30>
 8010bba:	4770      	bx	lr
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	60c3      	str	r3, [r0, #12]
 8010bc0:	6103      	str	r3, [r0, #16]
 8010bc2:	6143      	str	r3, [r0, #20]
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <memset>:
 8010bc8:	4402      	add	r2, r0
 8010bca:	4603      	mov	r3, r0
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d100      	bne.n	8010bd2 <memset+0xa>
 8010bd0:	4770      	bx	lr
 8010bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8010bd6:	e7f9      	b.n	8010bcc <memset+0x4>

08010bd8 <_reclaim_reent>:
 8010bd8:	4b29      	ldr	r3, [pc, #164]	; (8010c80 <_reclaim_reent+0xa8>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4283      	cmp	r3, r0
 8010bde:	b570      	push	{r4, r5, r6, lr}
 8010be0:	4604      	mov	r4, r0
 8010be2:	d04b      	beq.n	8010c7c <_reclaim_reent+0xa4>
 8010be4:	69c3      	ldr	r3, [r0, #28]
 8010be6:	b143      	cbz	r3, 8010bfa <_reclaim_reent+0x22>
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d144      	bne.n	8010c78 <_reclaim_reent+0xa0>
 8010bee:	69e3      	ldr	r3, [r4, #28]
 8010bf0:	6819      	ldr	r1, [r3, #0]
 8010bf2:	b111      	cbz	r1, 8010bfa <_reclaim_reent+0x22>
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	f000 f87f 	bl	8010cf8 <_free_r>
 8010bfa:	6961      	ldr	r1, [r4, #20]
 8010bfc:	b111      	cbz	r1, 8010c04 <_reclaim_reent+0x2c>
 8010bfe:	4620      	mov	r0, r4
 8010c00:	f000 f87a 	bl	8010cf8 <_free_r>
 8010c04:	69e1      	ldr	r1, [r4, #28]
 8010c06:	b111      	cbz	r1, 8010c0e <_reclaim_reent+0x36>
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f000 f875 	bl	8010cf8 <_free_r>
 8010c0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010c10:	b111      	cbz	r1, 8010c18 <_reclaim_reent+0x40>
 8010c12:	4620      	mov	r0, r4
 8010c14:	f000 f870 	bl	8010cf8 <_free_r>
 8010c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c1a:	b111      	cbz	r1, 8010c22 <_reclaim_reent+0x4a>
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 f86b 	bl	8010cf8 <_free_r>
 8010c22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010c24:	b111      	cbz	r1, 8010c2c <_reclaim_reent+0x54>
 8010c26:	4620      	mov	r0, r4
 8010c28:	f000 f866 	bl	8010cf8 <_free_r>
 8010c2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010c2e:	b111      	cbz	r1, 8010c36 <_reclaim_reent+0x5e>
 8010c30:	4620      	mov	r0, r4
 8010c32:	f000 f861 	bl	8010cf8 <_free_r>
 8010c36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010c38:	b111      	cbz	r1, 8010c40 <_reclaim_reent+0x68>
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 f85c 	bl	8010cf8 <_free_r>
 8010c40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010c42:	b111      	cbz	r1, 8010c4a <_reclaim_reent+0x72>
 8010c44:	4620      	mov	r0, r4
 8010c46:	f000 f857 	bl	8010cf8 <_free_r>
 8010c4a:	6a23      	ldr	r3, [r4, #32]
 8010c4c:	b1b3      	cbz	r3, 8010c7c <_reclaim_reent+0xa4>
 8010c4e:	4620      	mov	r0, r4
 8010c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c54:	4718      	bx	r3
 8010c56:	5949      	ldr	r1, [r1, r5]
 8010c58:	b941      	cbnz	r1, 8010c6c <_reclaim_reent+0x94>
 8010c5a:	3504      	adds	r5, #4
 8010c5c:	69e3      	ldr	r3, [r4, #28]
 8010c5e:	2d80      	cmp	r5, #128	; 0x80
 8010c60:	68d9      	ldr	r1, [r3, #12]
 8010c62:	d1f8      	bne.n	8010c56 <_reclaim_reent+0x7e>
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 f847 	bl	8010cf8 <_free_r>
 8010c6a:	e7c0      	b.n	8010bee <_reclaim_reent+0x16>
 8010c6c:	680e      	ldr	r6, [r1, #0]
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f000 f842 	bl	8010cf8 <_free_r>
 8010c74:	4631      	mov	r1, r6
 8010c76:	e7ef      	b.n	8010c58 <_reclaim_reent+0x80>
 8010c78:	2500      	movs	r5, #0
 8010c7a:	e7ef      	b.n	8010c5c <_reclaim_reent+0x84>
 8010c7c:	bd70      	pop	{r4, r5, r6, pc}
 8010c7e:	bf00      	nop
 8010c80:	20000060 	.word	0x20000060

08010c84 <__errno>:
 8010c84:	4b01      	ldr	r3, [pc, #4]	; (8010c8c <__errno+0x8>)
 8010c86:	6818      	ldr	r0, [r3, #0]
 8010c88:	4770      	bx	lr
 8010c8a:	bf00      	nop
 8010c8c:	20000060 	.word	0x20000060

08010c90 <__libc_init_array>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	4d0d      	ldr	r5, [pc, #52]	; (8010cc8 <__libc_init_array+0x38>)
 8010c94:	4c0d      	ldr	r4, [pc, #52]	; (8010ccc <__libc_init_array+0x3c>)
 8010c96:	1b64      	subs	r4, r4, r5
 8010c98:	10a4      	asrs	r4, r4, #2
 8010c9a:	2600      	movs	r6, #0
 8010c9c:	42a6      	cmp	r6, r4
 8010c9e:	d109      	bne.n	8010cb4 <__libc_init_array+0x24>
 8010ca0:	4d0b      	ldr	r5, [pc, #44]	; (8010cd0 <__libc_init_array+0x40>)
 8010ca2:	4c0c      	ldr	r4, [pc, #48]	; (8010cd4 <__libc_init_array+0x44>)
 8010ca4:	f000 ffb8 	bl	8011c18 <_init>
 8010ca8:	1b64      	subs	r4, r4, r5
 8010caa:	10a4      	asrs	r4, r4, #2
 8010cac:	2600      	movs	r6, #0
 8010cae:	42a6      	cmp	r6, r4
 8010cb0:	d105      	bne.n	8010cbe <__libc_init_array+0x2e>
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cb8:	4798      	blx	r3
 8010cba:	3601      	adds	r6, #1
 8010cbc:	e7ee      	b.n	8010c9c <__libc_init_array+0xc>
 8010cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cc2:	4798      	blx	r3
 8010cc4:	3601      	adds	r6, #1
 8010cc6:	e7f2      	b.n	8010cae <__libc_init_array+0x1e>
 8010cc8:	08011db0 	.word	0x08011db0
 8010ccc:	08011db0 	.word	0x08011db0
 8010cd0:	08011db0 	.word	0x08011db0
 8010cd4:	08011db4 	.word	0x08011db4

08010cd8 <__retarget_lock_acquire_recursive>:
 8010cd8:	4770      	bx	lr

08010cda <__retarget_lock_release_recursive>:
 8010cda:	4770      	bx	lr

08010cdc <memcpy>:
 8010cdc:	440a      	add	r2, r1
 8010cde:	4291      	cmp	r1, r2
 8010ce0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ce4:	d100      	bne.n	8010ce8 <memcpy+0xc>
 8010ce6:	4770      	bx	lr
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010cf2:	4291      	cmp	r1, r2
 8010cf4:	d1f9      	bne.n	8010cea <memcpy+0xe>
 8010cf6:	bd10      	pop	{r4, pc}

08010cf8 <_free_r>:
 8010cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010cfa:	2900      	cmp	r1, #0
 8010cfc:	d044      	beq.n	8010d88 <_free_r+0x90>
 8010cfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d02:	9001      	str	r0, [sp, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	f1a1 0404 	sub.w	r4, r1, #4
 8010d0a:	bfb8      	it	lt
 8010d0c:	18e4      	addlt	r4, r4, r3
 8010d0e:	f000 f83f 	bl	8010d90 <__malloc_lock>
 8010d12:	4a1e      	ldr	r2, [pc, #120]	; (8010d8c <_free_r+0x94>)
 8010d14:	9801      	ldr	r0, [sp, #4]
 8010d16:	6813      	ldr	r3, [r2, #0]
 8010d18:	b933      	cbnz	r3, 8010d28 <_free_r+0x30>
 8010d1a:	6063      	str	r3, [r4, #4]
 8010d1c:	6014      	str	r4, [r2, #0]
 8010d1e:	b003      	add	sp, #12
 8010d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d24:	f000 b83a 	b.w	8010d9c <__malloc_unlock>
 8010d28:	42a3      	cmp	r3, r4
 8010d2a:	d908      	bls.n	8010d3e <_free_r+0x46>
 8010d2c:	6825      	ldr	r5, [r4, #0]
 8010d2e:	1961      	adds	r1, r4, r5
 8010d30:	428b      	cmp	r3, r1
 8010d32:	bf01      	itttt	eq
 8010d34:	6819      	ldreq	r1, [r3, #0]
 8010d36:	685b      	ldreq	r3, [r3, #4]
 8010d38:	1949      	addeq	r1, r1, r5
 8010d3a:	6021      	streq	r1, [r4, #0]
 8010d3c:	e7ed      	b.n	8010d1a <_free_r+0x22>
 8010d3e:	461a      	mov	r2, r3
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	b10b      	cbz	r3, 8010d48 <_free_r+0x50>
 8010d44:	42a3      	cmp	r3, r4
 8010d46:	d9fa      	bls.n	8010d3e <_free_r+0x46>
 8010d48:	6811      	ldr	r1, [r2, #0]
 8010d4a:	1855      	adds	r5, r2, r1
 8010d4c:	42a5      	cmp	r5, r4
 8010d4e:	d10b      	bne.n	8010d68 <_free_r+0x70>
 8010d50:	6824      	ldr	r4, [r4, #0]
 8010d52:	4421      	add	r1, r4
 8010d54:	1854      	adds	r4, r2, r1
 8010d56:	42a3      	cmp	r3, r4
 8010d58:	6011      	str	r1, [r2, #0]
 8010d5a:	d1e0      	bne.n	8010d1e <_free_r+0x26>
 8010d5c:	681c      	ldr	r4, [r3, #0]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	6053      	str	r3, [r2, #4]
 8010d62:	440c      	add	r4, r1
 8010d64:	6014      	str	r4, [r2, #0]
 8010d66:	e7da      	b.n	8010d1e <_free_r+0x26>
 8010d68:	d902      	bls.n	8010d70 <_free_r+0x78>
 8010d6a:	230c      	movs	r3, #12
 8010d6c:	6003      	str	r3, [r0, #0]
 8010d6e:	e7d6      	b.n	8010d1e <_free_r+0x26>
 8010d70:	6825      	ldr	r5, [r4, #0]
 8010d72:	1961      	adds	r1, r4, r5
 8010d74:	428b      	cmp	r3, r1
 8010d76:	bf04      	itt	eq
 8010d78:	6819      	ldreq	r1, [r3, #0]
 8010d7a:	685b      	ldreq	r3, [r3, #4]
 8010d7c:	6063      	str	r3, [r4, #4]
 8010d7e:	bf04      	itt	eq
 8010d80:	1949      	addeq	r1, r1, r5
 8010d82:	6021      	streq	r1, [r4, #0]
 8010d84:	6054      	str	r4, [r2, #4]
 8010d86:	e7ca      	b.n	8010d1e <_free_r+0x26>
 8010d88:	b003      	add	sp, #12
 8010d8a:	bd30      	pop	{r4, r5, pc}
 8010d8c:	20003bfc 	.word	0x20003bfc

08010d90 <__malloc_lock>:
 8010d90:	4801      	ldr	r0, [pc, #4]	; (8010d98 <__malloc_lock+0x8>)
 8010d92:	f7ff bfa1 	b.w	8010cd8 <__retarget_lock_acquire_recursive>
 8010d96:	bf00      	nop
 8010d98:	20003bf8 	.word	0x20003bf8

08010d9c <__malloc_unlock>:
 8010d9c:	4801      	ldr	r0, [pc, #4]	; (8010da4 <__malloc_unlock+0x8>)
 8010d9e:	f7ff bf9c 	b.w	8010cda <__retarget_lock_release_recursive>
 8010da2:	bf00      	nop
 8010da4:	20003bf8 	.word	0x20003bf8

08010da8 <pow>:
 8010da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010daa:	ed2d 8b02 	vpush	{d8}
 8010dae:	eeb0 8a40 	vmov.f32	s16, s0
 8010db2:	eef0 8a60 	vmov.f32	s17, s1
 8010db6:	ec55 4b11 	vmov	r4, r5, d1
 8010dba:	f000 f871 	bl	8010ea0 <__ieee754_pow>
 8010dbe:	4622      	mov	r2, r4
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	4620      	mov	r0, r4
 8010dc4:	4629      	mov	r1, r5
 8010dc6:	ec57 6b10 	vmov	r6, r7, d0
 8010dca:	f7f3 fe89 	bl	8004ae0 <__aeabi_dcmpun>
 8010dce:	2800      	cmp	r0, #0
 8010dd0:	d13b      	bne.n	8010e4a <pow+0xa2>
 8010dd2:	ec51 0b18 	vmov	r0, r1, d8
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	2300      	movs	r3, #0
 8010dda:	f7f3 fe4f 	bl	8004a7c <__aeabi_dcmpeq>
 8010dde:	b1b8      	cbz	r0, 8010e10 <pow+0x68>
 8010de0:	2200      	movs	r2, #0
 8010de2:	2300      	movs	r3, #0
 8010de4:	4620      	mov	r0, r4
 8010de6:	4629      	mov	r1, r5
 8010de8:	f7f3 fe48 	bl	8004a7c <__aeabi_dcmpeq>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d146      	bne.n	8010e7e <pow+0xd6>
 8010df0:	ec45 4b10 	vmov	d0, r4, r5
 8010df4:	f000 f848 	bl	8010e88 <finite>
 8010df8:	b338      	cbz	r0, 8010e4a <pow+0xa2>
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	4620      	mov	r0, r4
 8010e00:	4629      	mov	r1, r5
 8010e02:	f7f3 fe45 	bl	8004a90 <__aeabi_dcmplt>
 8010e06:	b300      	cbz	r0, 8010e4a <pow+0xa2>
 8010e08:	f7ff ff3c 	bl	8010c84 <__errno>
 8010e0c:	2322      	movs	r3, #34	; 0x22
 8010e0e:	e01b      	b.n	8010e48 <pow+0xa0>
 8010e10:	ec47 6b10 	vmov	d0, r6, r7
 8010e14:	f000 f838 	bl	8010e88 <finite>
 8010e18:	b9e0      	cbnz	r0, 8010e54 <pow+0xac>
 8010e1a:	eeb0 0a48 	vmov.f32	s0, s16
 8010e1e:	eef0 0a68 	vmov.f32	s1, s17
 8010e22:	f000 f831 	bl	8010e88 <finite>
 8010e26:	b1a8      	cbz	r0, 8010e54 <pow+0xac>
 8010e28:	ec45 4b10 	vmov	d0, r4, r5
 8010e2c:	f000 f82c 	bl	8010e88 <finite>
 8010e30:	b180      	cbz	r0, 8010e54 <pow+0xac>
 8010e32:	4632      	mov	r2, r6
 8010e34:	463b      	mov	r3, r7
 8010e36:	4630      	mov	r0, r6
 8010e38:	4639      	mov	r1, r7
 8010e3a:	f7f3 fe51 	bl	8004ae0 <__aeabi_dcmpun>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d0e2      	beq.n	8010e08 <pow+0x60>
 8010e42:	f7ff ff1f 	bl	8010c84 <__errno>
 8010e46:	2321      	movs	r3, #33	; 0x21
 8010e48:	6003      	str	r3, [r0, #0]
 8010e4a:	ecbd 8b02 	vpop	{d8}
 8010e4e:	ec47 6b10 	vmov	d0, r6, r7
 8010e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e54:	2200      	movs	r2, #0
 8010e56:	2300      	movs	r3, #0
 8010e58:	4630      	mov	r0, r6
 8010e5a:	4639      	mov	r1, r7
 8010e5c:	f7f3 fe0e 	bl	8004a7c <__aeabi_dcmpeq>
 8010e60:	2800      	cmp	r0, #0
 8010e62:	d0f2      	beq.n	8010e4a <pow+0xa2>
 8010e64:	eeb0 0a48 	vmov.f32	s0, s16
 8010e68:	eef0 0a68 	vmov.f32	s1, s17
 8010e6c:	f000 f80c 	bl	8010e88 <finite>
 8010e70:	2800      	cmp	r0, #0
 8010e72:	d0ea      	beq.n	8010e4a <pow+0xa2>
 8010e74:	ec45 4b10 	vmov	d0, r4, r5
 8010e78:	f000 f806 	bl	8010e88 <finite>
 8010e7c:	e7c3      	b.n	8010e06 <pow+0x5e>
 8010e7e:	4f01      	ldr	r7, [pc, #4]	; (8010e84 <pow+0xdc>)
 8010e80:	2600      	movs	r6, #0
 8010e82:	e7e2      	b.n	8010e4a <pow+0xa2>
 8010e84:	3ff00000 	.word	0x3ff00000

08010e88 <finite>:
 8010e88:	b082      	sub	sp, #8
 8010e8a:	ed8d 0b00 	vstr	d0, [sp]
 8010e8e:	9801      	ldr	r0, [sp, #4]
 8010e90:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010e94:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8010e98:	0fc0      	lsrs	r0, r0, #31
 8010e9a:	b002      	add	sp, #8
 8010e9c:	4770      	bx	lr
	...

08010ea0 <__ieee754_pow>:
 8010ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea4:	ed2d 8b06 	vpush	{d8-d10}
 8010ea8:	b089      	sub	sp, #36	; 0x24
 8010eaa:	ed8d 1b00 	vstr	d1, [sp]
 8010eae:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010eb2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010eb6:	ea58 0102 	orrs.w	r1, r8, r2
 8010eba:	ec57 6b10 	vmov	r6, r7, d0
 8010ebe:	d115      	bne.n	8010eec <__ieee754_pow+0x4c>
 8010ec0:	19b3      	adds	r3, r6, r6
 8010ec2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010ec6:	4152      	adcs	r2, r2
 8010ec8:	4299      	cmp	r1, r3
 8010eca:	4b89      	ldr	r3, [pc, #548]	; (80110f0 <__ieee754_pow+0x250>)
 8010ecc:	4193      	sbcs	r3, r2
 8010ece:	f080 84d1 	bcs.w	8011874 <__ieee754_pow+0x9d4>
 8010ed2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ed6:	4630      	mov	r0, r6
 8010ed8:	4639      	mov	r1, r7
 8010eda:	f7f3 f9b1 	bl	8004240 <__adddf3>
 8010ede:	ec41 0b10 	vmov	d0, r0, r1
 8010ee2:	b009      	add	sp, #36	; 0x24
 8010ee4:	ecbd 8b06 	vpop	{d8-d10}
 8010ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eec:	4b81      	ldr	r3, [pc, #516]	; (80110f4 <__ieee754_pow+0x254>)
 8010eee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010ef2:	429c      	cmp	r4, r3
 8010ef4:	ee10 aa10 	vmov	sl, s0
 8010ef8:	463d      	mov	r5, r7
 8010efa:	dc06      	bgt.n	8010f0a <__ieee754_pow+0x6a>
 8010efc:	d101      	bne.n	8010f02 <__ieee754_pow+0x62>
 8010efe:	2e00      	cmp	r6, #0
 8010f00:	d1e7      	bne.n	8010ed2 <__ieee754_pow+0x32>
 8010f02:	4598      	cmp	r8, r3
 8010f04:	dc01      	bgt.n	8010f0a <__ieee754_pow+0x6a>
 8010f06:	d10f      	bne.n	8010f28 <__ieee754_pow+0x88>
 8010f08:	b172      	cbz	r2, 8010f28 <__ieee754_pow+0x88>
 8010f0a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010f0e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010f12:	ea55 050a 	orrs.w	r5, r5, sl
 8010f16:	d1dc      	bne.n	8010ed2 <__ieee754_pow+0x32>
 8010f18:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010f1c:	18db      	adds	r3, r3, r3
 8010f1e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010f22:	4152      	adcs	r2, r2
 8010f24:	429d      	cmp	r5, r3
 8010f26:	e7d0      	b.n	8010eca <__ieee754_pow+0x2a>
 8010f28:	2d00      	cmp	r5, #0
 8010f2a:	da3b      	bge.n	8010fa4 <__ieee754_pow+0x104>
 8010f2c:	4b72      	ldr	r3, [pc, #456]	; (80110f8 <__ieee754_pow+0x258>)
 8010f2e:	4598      	cmp	r8, r3
 8010f30:	dc51      	bgt.n	8010fd6 <__ieee754_pow+0x136>
 8010f32:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010f36:	4598      	cmp	r8, r3
 8010f38:	f340 84ab 	ble.w	8011892 <__ieee754_pow+0x9f2>
 8010f3c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010f40:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010f44:	2b14      	cmp	r3, #20
 8010f46:	dd0f      	ble.n	8010f68 <__ieee754_pow+0xc8>
 8010f48:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010f4c:	fa22 f103 	lsr.w	r1, r2, r3
 8010f50:	fa01 f303 	lsl.w	r3, r1, r3
 8010f54:	4293      	cmp	r3, r2
 8010f56:	f040 849c 	bne.w	8011892 <__ieee754_pow+0x9f2>
 8010f5a:	f001 0101 	and.w	r1, r1, #1
 8010f5e:	f1c1 0302 	rsb	r3, r1, #2
 8010f62:	9304      	str	r3, [sp, #16]
 8010f64:	b182      	cbz	r2, 8010f88 <__ieee754_pow+0xe8>
 8010f66:	e05f      	b.n	8011028 <__ieee754_pow+0x188>
 8010f68:	2a00      	cmp	r2, #0
 8010f6a:	d15b      	bne.n	8011024 <__ieee754_pow+0x184>
 8010f6c:	f1c3 0314 	rsb	r3, r3, #20
 8010f70:	fa48 f103 	asr.w	r1, r8, r3
 8010f74:	fa01 f303 	lsl.w	r3, r1, r3
 8010f78:	4543      	cmp	r3, r8
 8010f7a:	f040 8487 	bne.w	801188c <__ieee754_pow+0x9ec>
 8010f7e:	f001 0101 	and.w	r1, r1, #1
 8010f82:	f1c1 0302 	rsb	r3, r1, #2
 8010f86:	9304      	str	r3, [sp, #16]
 8010f88:	4b5c      	ldr	r3, [pc, #368]	; (80110fc <__ieee754_pow+0x25c>)
 8010f8a:	4598      	cmp	r8, r3
 8010f8c:	d132      	bne.n	8010ff4 <__ieee754_pow+0x154>
 8010f8e:	f1b9 0f00 	cmp.w	r9, #0
 8010f92:	f280 8477 	bge.w	8011884 <__ieee754_pow+0x9e4>
 8010f96:	4959      	ldr	r1, [pc, #356]	; (80110fc <__ieee754_pow+0x25c>)
 8010f98:	4632      	mov	r2, r6
 8010f9a:	463b      	mov	r3, r7
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	f7f3 fc2f 	bl	8004800 <__aeabi_ddiv>
 8010fa2:	e79c      	b.n	8010ede <__ieee754_pow+0x3e>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9304      	str	r3, [sp, #16]
 8010fa8:	2a00      	cmp	r2, #0
 8010faa:	d13d      	bne.n	8011028 <__ieee754_pow+0x188>
 8010fac:	4b51      	ldr	r3, [pc, #324]	; (80110f4 <__ieee754_pow+0x254>)
 8010fae:	4598      	cmp	r8, r3
 8010fb0:	d1ea      	bne.n	8010f88 <__ieee754_pow+0xe8>
 8010fb2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010fb6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010fba:	ea53 030a 	orrs.w	r3, r3, sl
 8010fbe:	f000 8459 	beq.w	8011874 <__ieee754_pow+0x9d4>
 8010fc2:	4b4f      	ldr	r3, [pc, #316]	; (8011100 <__ieee754_pow+0x260>)
 8010fc4:	429c      	cmp	r4, r3
 8010fc6:	dd08      	ble.n	8010fda <__ieee754_pow+0x13a>
 8010fc8:	f1b9 0f00 	cmp.w	r9, #0
 8010fcc:	f2c0 8456 	blt.w	801187c <__ieee754_pow+0x9dc>
 8010fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fd4:	e783      	b.n	8010ede <__ieee754_pow+0x3e>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	e7e5      	b.n	8010fa6 <__ieee754_pow+0x106>
 8010fda:	f1b9 0f00 	cmp.w	r9, #0
 8010fde:	f04f 0000 	mov.w	r0, #0
 8010fe2:	f04f 0100 	mov.w	r1, #0
 8010fe6:	f6bf af7a 	bge.w	8010ede <__ieee754_pow+0x3e>
 8010fea:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010fee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010ff2:	e774      	b.n	8010ede <__ieee754_pow+0x3e>
 8010ff4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010ff8:	d106      	bne.n	8011008 <__ieee754_pow+0x168>
 8010ffa:	4632      	mov	r2, r6
 8010ffc:	463b      	mov	r3, r7
 8010ffe:	4630      	mov	r0, r6
 8011000:	4639      	mov	r1, r7
 8011002:	f7f3 fad3 	bl	80045ac <__aeabi_dmul>
 8011006:	e76a      	b.n	8010ede <__ieee754_pow+0x3e>
 8011008:	4b3e      	ldr	r3, [pc, #248]	; (8011104 <__ieee754_pow+0x264>)
 801100a:	4599      	cmp	r9, r3
 801100c:	d10c      	bne.n	8011028 <__ieee754_pow+0x188>
 801100e:	2d00      	cmp	r5, #0
 8011010:	db0a      	blt.n	8011028 <__ieee754_pow+0x188>
 8011012:	ec47 6b10 	vmov	d0, r6, r7
 8011016:	b009      	add	sp, #36	; 0x24
 8011018:	ecbd 8b06 	vpop	{d8-d10}
 801101c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011020:	f000 bd20 	b.w	8011a64 <__ieee754_sqrt>
 8011024:	2300      	movs	r3, #0
 8011026:	9304      	str	r3, [sp, #16]
 8011028:	ec47 6b10 	vmov	d0, r6, r7
 801102c:	f000 fc62 	bl	80118f4 <fabs>
 8011030:	ec51 0b10 	vmov	r0, r1, d0
 8011034:	f1ba 0f00 	cmp.w	sl, #0
 8011038:	d129      	bne.n	801108e <__ieee754_pow+0x1ee>
 801103a:	b124      	cbz	r4, 8011046 <__ieee754_pow+0x1a6>
 801103c:	4b2f      	ldr	r3, [pc, #188]	; (80110fc <__ieee754_pow+0x25c>)
 801103e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011042:	429a      	cmp	r2, r3
 8011044:	d123      	bne.n	801108e <__ieee754_pow+0x1ee>
 8011046:	f1b9 0f00 	cmp.w	r9, #0
 801104a:	da05      	bge.n	8011058 <__ieee754_pow+0x1b8>
 801104c:	4602      	mov	r2, r0
 801104e:	460b      	mov	r3, r1
 8011050:	2000      	movs	r0, #0
 8011052:	492a      	ldr	r1, [pc, #168]	; (80110fc <__ieee754_pow+0x25c>)
 8011054:	f7f3 fbd4 	bl	8004800 <__aeabi_ddiv>
 8011058:	2d00      	cmp	r5, #0
 801105a:	f6bf af40 	bge.w	8010ede <__ieee754_pow+0x3e>
 801105e:	9b04      	ldr	r3, [sp, #16]
 8011060:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011064:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011068:	431c      	orrs	r4, r3
 801106a:	d108      	bne.n	801107e <__ieee754_pow+0x1de>
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4610      	mov	r0, r2
 8011072:	4619      	mov	r1, r3
 8011074:	f7f3 f8e2 	bl	800423c <__aeabi_dsub>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	e78f      	b.n	8010f9e <__ieee754_pow+0xfe>
 801107e:	9b04      	ldr	r3, [sp, #16]
 8011080:	2b01      	cmp	r3, #1
 8011082:	f47f af2c 	bne.w	8010ede <__ieee754_pow+0x3e>
 8011086:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801108a:	4619      	mov	r1, r3
 801108c:	e727      	b.n	8010ede <__ieee754_pow+0x3e>
 801108e:	0feb      	lsrs	r3, r5, #31
 8011090:	3b01      	subs	r3, #1
 8011092:	9306      	str	r3, [sp, #24]
 8011094:	9a06      	ldr	r2, [sp, #24]
 8011096:	9b04      	ldr	r3, [sp, #16]
 8011098:	4313      	orrs	r3, r2
 801109a:	d102      	bne.n	80110a2 <__ieee754_pow+0x202>
 801109c:	4632      	mov	r2, r6
 801109e:	463b      	mov	r3, r7
 80110a0:	e7e6      	b.n	8011070 <__ieee754_pow+0x1d0>
 80110a2:	4b19      	ldr	r3, [pc, #100]	; (8011108 <__ieee754_pow+0x268>)
 80110a4:	4598      	cmp	r8, r3
 80110a6:	f340 80fb 	ble.w	80112a0 <__ieee754_pow+0x400>
 80110aa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80110ae:	4598      	cmp	r8, r3
 80110b0:	4b13      	ldr	r3, [pc, #76]	; (8011100 <__ieee754_pow+0x260>)
 80110b2:	dd0c      	ble.n	80110ce <__ieee754_pow+0x22e>
 80110b4:	429c      	cmp	r4, r3
 80110b6:	dc0f      	bgt.n	80110d8 <__ieee754_pow+0x238>
 80110b8:	f1b9 0f00 	cmp.w	r9, #0
 80110bc:	da0f      	bge.n	80110de <__ieee754_pow+0x23e>
 80110be:	2000      	movs	r0, #0
 80110c0:	b009      	add	sp, #36	; 0x24
 80110c2:	ecbd 8b06 	vpop	{d8-d10}
 80110c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ca:	f000 bcc2 	b.w	8011a52 <__math_oflow>
 80110ce:	429c      	cmp	r4, r3
 80110d0:	dbf2      	blt.n	80110b8 <__ieee754_pow+0x218>
 80110d2:	4b0a      	ldr	r3, [pc, #40]	; (80110fc <__ieee754_pow+0x25c>)
 80110d4:	429c      	cmp	r4, r3
 80110d6:	dd19      	ble.n	801110c <__ieee754_pow+0x26c>
 80110d8:	f1b9 0f00 	cmp.w	r9, #0
 80110dc:	dcef      	bgt.n	80110be <__ieee754_pow+0x21e>
 80110de:	2000      	movs	r0, #0
 80110e0:	b009      	add	sp, #36	; 0x24
 80110e2:	ecbd 8b06 	vpop	{d8-d10}
 80110e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ea:	f000 bca9 	b.w	8011a40 <__math_uflow>
 80110ee:	bf00      	nop
 80110f0:	fff00000 	.word	0xfff00000
 80110f4:	7ff00000 	.word	0x7ff00000
 80110f8:	433fffff 	.word	0x433fffff
 80110fc:	3ff00000 	.word	0x3ff00000
 8011100:	3fefffff 	.word	0x3fefffff
 8011104:	3fe00000 	.word	0x3fe00000
 8011108:	41e00000 	.word	0x41e00000
 801110c:	4b60      	ldr	r3, [pc, #384]	; (8011290 <__ieee754_pow+0x3f0>)
 801110e:	2200      	movs	r2, #0
 8011110:	f7f3 f894 	bl	800423c <__aeabi_dsub>
 8011114:	a354      	add	r3, pc, #336	; (adr r3, 8011268 <__ieee754_pow+0x3c8>)
 8011116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801111a:	4604      	mov	r4, r0
 801111c:	460d      	mov	r5, r1
 801111e:	f7f3 fa45 	bl	80045ac <__aeabi_dmul>
 8011122:	a353      	add	r3, pc, #332	; (adr r3, 8011270 <__ieee754_pow+0x3d0>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	4606      	mov	r6, r0
 801112a:	460f      	mov	r7, r1
 801112c:	4620      	mov	r0, r4
 801112e:	4629      	mov	r1, r5
 8011130:	f7f3 fa3c 	bl	80045ac <__aeabi_dmul>
 8011134:	4b57      	ldr	r3, [pc, #348]	; (8011294 <__ieee754_pow+0x3f4>)
 8011136:	4682      	mov	sl, r0
 8011138:	468b      	mov	fp, r1
 801113a:	2200      	movs	r2, #0
 801113c:	4620      	mov	r0, r4
 801113e:	4629      	mov	r1, r5
 8011140:	f7f3 fa34 	bl	80045ac <__aeabi_dmul>
 8011144:	4602      	mov	r2, r0
 8011146:	460b      	mov	r3, r1
 8011148:	a14b      	add	r1, pc, #300	; (adr r1, 8011278 <__ieee754_pow+0x3d8>)
 801114a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801114e:	f7f3 f875 	bl	800423c <__aeabi_dsub>
 8011152:	4622      	mov	r2, r4
 8011154:	462b      	mov	r3, r5
 8011156:	f7f3 fa29 	bl	80045ac <__aeabi_dmul>
 801115a:	4602      	mov	r2, r0
 801115c:	460b      	mov	r3, r1
 801115e:	2000      	movs	r0, #0
 8011160:	494d      	ldr	r1, [pc, #308]	; (8011298 <__ieee754_pow+0x3f8>)
 8011162:	f7f3 f86b 	bl	800423c <__aeabi_dsub>
 8011166:	4622      	mov	r2, r4
 8011168:	4680      	mov	r8, r0
 801116a:	4689      	mov	r9, r1
 801116c:	462b      	mov	r3, r5
 801116e:	4620      	mov	r0, r4
 8011170:	4629      	mov	r1, r5
 8011172:	f7f3 fa1b 	bl	80045ac <__aeabi_dmul>
 8011176:	4602      	mov	r2, r0
 8011178:	460b      	mov	r3, r1
 801117a:	4640      	mov	r0, r8
 801117c:	4649      	mov	r1, r9
 801117e:	f7f3 fa15 	bl	80045ac <__aeabi_dmul>
 8011182:	a33f      	add	r3, pc, #252	; (adr r3, 8011280 <__ieee754_pow+0x3e0>)
 8011184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011188:	f7f3 fa10 	bl	80045ac <__aeabi_dmul>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4650      	mov	r0, sl
 8011192:	4659      	mov	r1, fp
 8011194:	f7f3 f852 	bl	800423c <__aeabi_dsub>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4680      	mov	r8, r0
 801119e:	4689      	mov	r9, r1
 80111a0:	4630      	mov	r0, r6
 80111a2:	4639      	mov	r1, r7
 80111a4:	f7f3 f84c 	bl	8004240 <__adddf3>
 80111a8:	2000      	movs	r0, #0
 80111aa:	4632      	mov	r2, r6
 80111ac:	463b      	mov	r3, r7
 80111ae:	4604      	mov	r4, r0
 80111b0:	460d      	mov	r5, r1
 80111b2:	f7f3 f843 	bl	800423c <__aeabi_dsub>
 80111b6:	4602      	mov	r2, r0
 80111b8:	460b      	mov	r3, r1
 80111ba:	4640      	mov	r0, r8
 80111bc:	4649      	mov	r1, r9
 80111be:	f7f3 f83d 	bl	800423c <__aeabi_dsub>
 80111c2:	9b04      	ldr	r3, [sp, #16]
 80111c4:	9a06      	ldr	r2, [sp, #24]
 80111c6:	3b01      	subs	r3, #1
 80111c8:	4313      	orrs	r3, r2
 80111ca:	4682      	mov	sl, r0
 80111cc:	468b      	mov	fp, r1
 80111ce:	f040 81e7 	bne.w	80115a0 <__ieee754_pow+0x700>
 80111d2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011288 <__ieee754_pow+0x3e8>
 80111d6:	eeb0 8a47 	vmov.f32	s16, s14
 80111da:	eef0 8a67 	vmov.f32	s17, s15
 80111de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80111e2:	2600      	movs	r6, #0
 80111e4:	4632      	mov	r2, r6
 80111e6:	463b      	mov	r3, r7
 80111e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111ec:	f7f3 f826 	bl	800423c <__aeabi_dsub>
 80111f0:	4622      	mov	r2, r4
 80111f2:	462b      	mov	r3, r5
 80111f4:	f7f3 f9da 	bl	80045ac <__aeabi_dmul>
 80111f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111fc:	4680      	mov	r8, r0
 80111fe:	4689      	mov	r9, r1
 8011200:	4650      	mov	r0, sl
 8011202:	4659      	mov	r1, fp
 8011204:	f7f3 f9d2 	bl	80045ac <__aeabi_dmul>
 8011208:	4602      	mov	r2, r0
 801120a:	460b      	mov	r3, r1
 801120c:	4640      	mov	r0, r8
 801120e:	4649      	mov	r1, r9
 8011210:	f7f3 f816 	bl	8004240 <__adddf3>
 8011214:	4632      	mov	r2, r6
 8011216:	463b      	mov	r3, r7
 8011218:	4680      	mov	r8, r0
 801121a:	4689      	mov	r9, r1
 801121c:	4620      	mov	r0, r4
 801121e:	4629      	mov	r1, r5
 8011220:	f7f3 f9c4 	bl	80045ac <__aeabi_dmul>
 8011224:	460b      	mov	r3, r1
 8011226:	4604      	mov	r4, r0
 8011228:	460d      	mov	r5, r1
 801122a:	4602      	mov	r2, r0
 801122c:	4649      	mov	r1, r9
 801122e:	4640      	mov	r0, r8
 8011230:	f7f3 f806 	bl	8004240 <__adddf3>
 8011234:	4b19      	ldr	r3, [pc, #100]	; (801129c <__ieee754_pow+0x3fc>)
 8011236:	4299      	cmp	r1, r3
 8011238:	ec45 4b19 	vmov	d9, r4, r5
 801123c:	4606      	mov	r6, r0
 801123e:	460f      	mov	r7, r1
 8011240:	468b      	mov	fp, r1
 8011242:	f340 82f0 	ble.w	8011826 <__ieee754_pow+0x986>
 8011246:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801124a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801124e:	4303      	orrs	r3, r0
 8011250:	f000 81e4 	beq.w	801161c <__ieee754_pow+0x77c>
 8011254:	ec51 0b18 	vmov	r0, r1, d8
 8011258:	2200      	movs	r2, #0
 801125a:	2300      	movs	r3, #0
 801125c:	f7f3 fc18 	bl	8004a90 <__aeabi_dcmplt>
 8011260:	3800      	subs	r0, #0
 8011262:	bf18      	it	ne
 8011264:	2001      	movne	r0, #1
 8011266:	e72b      	b.n	80110c0 <__ieee754_pow+0x220>
 8011268:	60000000 	.word	0x60000000
 801126c:	3ff71547 	.word	0x3ff71547
 8011270:	f85ddf44 	.word	0xf85ddf44
 8011274:	3e54ae0b 	.word	0x3e54ae0b
 8011278:	55555555 	.word	0x55555555
 801127c:	3fd55555 	.word	0x3fd55555
 8011280:	652b82fe 	.word	0x652b82fe
 8011284:	3ff71547 	.word	0x3ff71547
 8011288:	00000000 	.word	0x00000000
 801128c:	bff00000 	.word	0xbff00000
 8011290:	3ff00000 	.word	0x3ff00000
 8011294:	3fd00000 	.word	0x3fd00000
 8011298:	3fe00000 	.word	0x3fe00000
 801129c:	408fffff 	.word	0x408fffff
 80112a0:	4bd5      	ldr	r3, [pc, #852]	; (80115f8 <__ieee754_pow+0x758>)
 80112a2:	402b      	ands	r3, r5
 80112a4:	2200      	movs	r2, #0
 80112a6:	b92b      	cbnz	r3, 80112b4 <__ieee754_pow+0x414>
 80112a8:	4bd4      	ldr	r3, [pc, #848]	; (80115fc <__ieee754_pow+0x75c>)
 80112aa:	f7f3 f97f 	bl	80045ac <__aeabi_dmul>
 80112ae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80112b2:	460c      	mov	r4, r1
 80112b4:	1523      	asrs	r3, r4, #20
 80112b6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112ba:	4413      	add	r3, r2
 80112bc:	9305      	str	r3, [sp, #20]
 80112be:	4bd0      	ldr	r3, [pc, #832]	; (8011600 <__ieee754_pow+0x760>)
 80112c0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80112c4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80112c8:	429c      	cmp	r4, r3
 80112ca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80112ce:	dd08      	ble.n	80112e2 <__ieee754_pow+0x442>
 80112d0:	4bcc      	ldr	r3, [pc, #816]	; (8011604 <__ieee754_pow+0x764>)
 80112d2:	429c      	cmp	r4, r3
 80112d4:	f340 8162 	ble.w	801159c <__ieee754_pow+0x6fc>
 80112d8:	9b05      	ldr	r3, [sp, #20]
 80112da:	3301      	adds	r3, #1
 80112dc:	9305      	str	r3, [sp, #20]
 80112de:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80112e2:	2400      	movs	r4, #0
 80112e4:	00e3      	lsls	r3, r4, #3
 80112e6:	9307      	str	r3, [sp, #28]
 80112e8:	4bc7      	ldr	r3, [pc, #796]	; (8011608 <__ieee754_pow+0x768>)
 80112ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112ee:	ed93 7b00 	vldr	d7, [r3]
 80112f2:	4629      	mov	r1, r5
 80112f4:	ec53 2b17 	vmov	r2, r3, d7
 80112f8:	eeb0 9a47 	vmov.f32	s18, s14
 80112fc:	eef0 9a67 	vmov.f32	s19, s15
 8011300:	4682      	mov	sl, r0
 8011302:	f7f2 ff9b 	bl	800423c <__aeabi_dsub>
 8011306:	4652      	mov	r2, sl
 8011308:	4606      	mov	r6, r0
 801130a:	460f      	mov	r7, r1
 801130c:	462b      	mov	r3, r5
 801130e:	ec51 0b19 	vmov	r0, r1, d9
 8011312:	f7f2 ff95 	bl	8004240 <__adddf3>
 8011316:	4602      	mov	r2, r0
 8011318:	460b      	mov	r3, r1
 801131a:	2000      	movs	r0, #0
 801131c:	49bb      	ldr	r1, [pc, #748]	; (801160c <__ieee754_pow+0x76c>)
 801131e:	f7f3 fa6f 	bl	8004800 <__aeabi_ddiv>
 8011322:	ec41 0b1a 	vmov	d10, r0, r1
 8011326:	4602      	mov	r2, r0
 8011328:	460b      	mov	r3, r1
 801132a:	4630      	mov	r0, r6
 801132c:	4639      	mov	r1, r7
 801132e:	f7f3 f93d 	bl	80045ac <__aeabi_dmul>
 8011332:	2300      	movs	r3, #0
 8011334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011338:	9302      	str	r3, [sp, #8]
 801133a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801133e:	46ab      	mov	fp, r5
 8011340:	106d      	asrs	r5, r5, #1
 8011342:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011346:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801134a:	ec41 0b18 	vmov	d8, r0, r1
 801134e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011352:	2200      	movs	r2, #0
 8011354:	4640      	mov	r0, r8
 8011356:	4649      	mov	r1, r9
 8011358:	4614      	mov	r4, r2
 801135a:	461d      	mov	r5, r3
 801135c:	f7f3 f926 	bl	80045ac <__aeabi_dmul>
 8011360:	4602      	mov	r2, r0
 8011362:	460b      	mov	r3, r1
 8011364:	4630      	mov	r0, r6
 8011366:	4639      	mov	r1, r7
 8011368:	f7f2 ff68 	bl	800423c <__aeabi_dsub>
 801136c:	ec53 2b19 	vmov	r2, r3, d9
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	4620      	mov	r0, r4
 8011376:	4629      	mov	r1, r5
 8011378:	f7f2 ff60 	bl	800423c <__aeabi_dsub>
 801137c:	4602      	mov	r2, r0
 801137e:	460b      	mov	r3, r1
 8011380:	4650      	mov	r0, sl
 8011382:	4659      	mov	r1, fp
 8011384:	f7f2 ff5a 	bl	800423c <__aeabi_dsub>
 8011388:	4642      	mov	r2, r8
 801138a:	464b      	mov	r3, r9
 801138c:	f7f3 f90e 	bl	80045ac <__aeabi_dmul>
 8011390:	4602      	mov	r2, r0
 8011392:	460b      	mov	r3, r1
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7f2 ff50 	bl	800423c <__aeabi_dsub>
 801139c:	ec53 2b1a 	vmov	r2, r3, d10
 80113a0:	f7f3 f904 	bl	80045ac <__aeabi_dmul>
 80113a4:	ec53 2b18 	vmov	r2, r3, d8
 80113a8:	ec41 0b19 	vmov	d9, r0, r1
 80113ac:	ec51 0b18 	vmov	r0, r1, d8
 80113b0:	f7f3 f8fc 	bl	80045ac <__aeabi_dmul>
 80113b4:	a37c      	add	r3, pc, #496	; (adr r3, 80115a8 <__ieee754_pow+0x708>)
 80113b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ba:	4604      	mov	r4, r0
 80113bc:	460d      	mov	r5, r1
 80113be:	f7f3 f8f5 	bl	80045ac <__aeabi_dmul>
 80113c2:	a37b      	add	r3, pc, #492	; (adr r3, 80115b0 <__ieee754_pow+0x710>)
 80113c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c8:	f7f2 ff3a 	bl	8004240 <__adddf3>
 80113cc:	4622      	mov	r2, r4
 80113ce:	462b      	mov	r3, r5
 80113d0:	f7f3 f8ec 	bl	80045ac <__aeabi_dmul>
 80113d4:	a378      	add	r3, pc, #480	; (adr r3, 80115b8 <__ieee754_pow+0x718>)
 80113d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113da:	f7f2 ff31 	bl	8004240 <__adddf3>
 80113de:	4622      	mov	r2, r4
 80113e0:	462b      	mov	r3, r5
 80113e2:	f7f3 f8e3 	bl	80045ac <__aeabi_dmul>
 80113e6:	a376      	add	r3, pc, #472	; (adr r3, 80115c0 <__ieee754_pow+0x720>)
 80113e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ec:	f7f2 ff28 	bl	8004240 <__adddf3>
 80113f0:	4622      	mov	r2, r4
 80113f2:	462b      	mov	r3, r5
 80113f4:	f7f3 f8da 	bl	80045ac <__aeabi_dmul>
 80113f8:	a373      	add	r3, pc, #460	; (adr r3, 80115c8 <__ieee754_pow+0x728>)
 80113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fe:	f7f2 ff1f 	bl	8004240 <__adddf3>
 8011402:	4622      	mov	r2, r4
 8011404:	462b      	mov	r3, r5
 8011406:	f7f3 f8d1 	bl	80045ac <__aeabi_dmul>
 801140a:	a371      	add	r3, pc, #452	; (adr r3, 80115d0 <__ieee754_pow+0x730>)
 801140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011410:	f7f2 ff16 	bl	8004240 <__adddf3>
 8011414:	4622      	mov	r2, r4
 8011416:	4606      	mov	r6, r0
 8011418:	460f      	mov	r7, r1
 801141a:	462b      	mov	r3, r5
 801141c:	4620      	mov	r0, r4
 801141e:	4629      	mov	r1, r5
 8011420:	f7f3 f8c4 	bl	80045ac <__aeabi_dmul>
 8011424:	4602      	mov	r2, r0
 8011426:	460b      	mov	r3, r1
 8011428:	4630      	mov	r0, r6
 801142a:	4639      	mov	r1, r7
 801142c:	f7f3 f8be 	bl	80045ac <__aeabi_dmul>
 8011430:	4642      	mov	r2, r8
 8011432:	4604      	mov	r4, r0
 8011434:	460d      	mov	r5, r1
 8011436:	464b      	mov	r3, r9
 8011438:	ec51 0b18 	vmov	r0, r1, d8
 801143c:	f7f2 ff00 	bl	8004240 <__adddf3>
 8011440:	ec53 2b19 	vmov	r2, r3, d9
 8011444:	f7f3 f8b2 	bl	80045ac <__aeabi_dmul>
 8011448:	4622      	mov	r2, r4
 801144a:	462b      	mov	r3, r5
 801144c:	f7f2 fef8 	bl	8004240 <__adddf3>
 8011450:	4642      	mov	r2, r8
 8011452:	4682      	mov	sl, r0
 8011454:	468b      	mov	fp, r1
 8011456:	464b      	mov	r3, r9
 8011458:	4640      	mov	r0, r8
 801145a:	4649      	mov	r1, r9
 801145c:	f7f3 f8a6 	bl	80045ac <__aeabi_dmul>
 8011460:	4b6b      	ldr	r3, [pc, #428]	; (8011610 <__ieee754_pow+0x770>)
 8011462:	2200      	movs	r2, #0
 8011464:	4606      	mov	r6, r0
 8011466:	460f      	mov	r7, r1
 8011468:	f7f2 feea 	bl	8004240 <__adddf3>
 801146c:	4652      	mov	r2, sl
 801146e:	465b      	mov	r3, fp
 8011470:	f7f2 fee6 	bl	8004240 <__adddf3>
 8011474:	2000      	movs	r0, #0
 8011476:	4604      	mov	r4, r0
 8011478:	460d      	mov	r5, r1
 801147a:	4602      	mov	r2, r0
 801147c:	460b      	mov	r3, r1
 801147e:	4640      	mov	r0, r8
 8011480:	4649      	mov	r1, r9
 8011482:	f7f3 f893 	bl	80045ac <__aeabi_dmul>
 8011486:	4b62      	ldr	r3, [pc, #392]	; (8011610 <__ieee754_pow+0x770>)
 8011488:	4680      	mov	r8, r0
 801148a:	4689      	mov	r9, r1
 801148c:	2200      	movs	r2, #0
 801148e:	4620      	mov	r0, r4
 8011490:	4629      	mov	r1, r5
 8011492:	f7f2 fed3 	bl	800423c <__aeabi_dsub>
 8011496:	4632      	mov	r2, r6
 8011498:	463b      	mov	r3, r7
 801149a:	f7f2 fecf 	bl	800423c <__aeabi_dsub>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4650      	mov	r0, sl
 80114a4:	4659      	mov	r1, fp
 80114a6:	f7f2 fec9 	bl	800423c <__aeabi_dsub>
 80114aa:	ec53 2b18 	vmov	r2, r3, d8
 80114ae:	f7f3 f87d 	bl	80045ac <__aeabi_dmul>
 80114b2:	4622      	mov	r2, r4
 80114b4:	4606      	mov	r6, r0
 80114b6:	460f      	mov	r7, r1
 80114b8:	462b      	mov	r3, r5
 80114ba:	ec51 0b19 	vmov	r0, r1, d9
 80114be:	f7f3 f875 	bl	80045ac <__aeabi_dmul>
 80114c2:	4602      	mov	r2, r0
 80114c4:	460b      	mov	r3, r1
 80114c6:	4630      	mov	r0, r6
 80114c8:	4639      	mov	r1, r7
 80114ca:	f7f2 feb9 	bl	8004240 <__adddf3>
 80114ce:	4606      	mov	r6, r0
 80114d0:	460f      	mov	r7, r1
 80114d2:	4602      	mov	r2, r0
 80114d4:	460b      	mov	r3, r1
 80114d6:	4640      	mov	r0, r8
 80114d8:	4649      	mov	r1, r9
 80114da:	f7f2 feb1 	bl	8004240 <__adddf3>
 80114de:	a33e      	add	r3, pc, #248	; (adr r3, 80115d8 <__ieee754_pow+0x738>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	2000      	movs	r0, #0
 80114e6:	4604      	mov	r4, r0
 80114e8:	460d      	mov	r5, r1
 80114ea:	f7f3 f85f 	bl	80045ac <__aeabi_dmul>
 80114ee:	4642      	mov	r2, r8
 80114f0:	ec41 0b18 	vmov	d8, r0, r1
 80114f4:	464b      	mov	r3, r9
 80114f6:	4620      	mov	r0, r4
 80114f8:	4629      	mov	r1, r5
 80114fa:	f7f2 fe9f 	bl	800423c <__aeabi_dsub>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4630      	mov	r0, r6
 8011504:	4639      	mov	r1, r7
 8011506:	f7f2 fe99 	bl	800423c <__aeabi_dsub>
 801150a:	a335      	add	r3, pc, #212	; (adr r3, 80115e0 <__ieee754_pow+0x740>)
 801150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011510:	f7f3 f84c 	bl	80045ac <__aeabi_dmul>
 8011514:	a334      	add	r3, pc, #208	; (adr r3, 80115e8 <__ieee754_pow+0x748>)
 8011516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801151a:	4606      	mov	r6, r0
 801151c:	460f      	mov	r7, r1
 801151e:	4620      	mov	r0, r4
 8011520:	4629      	mov	r1, r5
 8011522:	f7f3 f843 	bl	80045ac <__aeabi_dmul>
 8011526:	4602      	mov	r2, r0
 8011528:	460b      	mov	r3, r1
 801152a:	4630      	mov	r0, r6
 801152c:	4639      	mov	r1, r7
 801152e:	f7f2 fe87 	bl	8004240 <__adddf3>
 8011532:	9a07      	ldr	r2, [sp, #28]
 8011534:	4b37      	ldr	r3, [pc, #220]	; (8011614 <__ieee754_pow+0x774>)
 8011536:	4413      	add	r3, r2
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	f7f2 fe80 	bl	8004240 <__adddf3>
 8011540:	4682      	mov	sl, r0
 8011542:	9805      	ldr	r0, [sp, #20]
 8011544:	468b      	mov	fp, r1
 8011546:	f7f2 ffc7 	bl	80044d8 <__aeabi_i2d>
 801154a:	9a07      	ldr	r2, [sp, #28]
 801154c:	4b32      	ldr	r3, [pc, #200]	; (8011618 <__ieee754_pow+0x778>)
 801154e:	4413      	add	r3, r2
 8011550:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011554:	4606      	mov	r6, r0
 8011556:	460f      	mov	r7, r1
 8011558:	4652      	mov	r2, sl
 801155a:	465b      	mov	r3, fp
 801155c:	ec51 0b18 	vmov	r0, r1, d8
 8011560:	f7f2 fe6e 	bl	8004240 <__adddf3>
 8011564:	4642      	mov	r2, r8
 8011566:	464b      	mov	r3, r9
 8011568:	f7f2 fe6a 	bl	8004240 <__adddf3>
 801156c:	4632      	mov	r2, r6
 801156e:	463b      	mov	r3, r7
 8011570:	f7f2 fe66 	bl	8004240 <__adddf3>
 8011574:	2000      	movs	r0, #0
 8011576:	4632      	mov	r2, r6
 8011578:	463b      	mov	r3, r7
 801157a:	4604      	mov	r4, r0
 801157c:	460d      	mov	r5, r1
 801157e:	f7f2 fe5d 	bl	800423c <__aeabi_dsub>
 8011582:	4642      	mov	r2, r8
 8011584:	464b      	mov	r3, r9
 8011586:	f7f2 fe59 	bl	800423c <__aeabi_dsub>
 801158a:	ec53 2b18 	vmov	r2, r3, d8
 801158e:	f7f2 fe55 	bl	800423c <__aeabi_dsub>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	4650      	mov	r0, sl
 8011598:	4659      	mov	r1, fp
 801159a:	e610      	b.n	80111be <__ieee754_pow+0x31e>
 801159c:	2401      	movs	r4, #1
 801159e:	e6a1      	b.n	80112e4 <__ieee754_pow+0x444>
 80115a0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80115f0 <__ieee754_pow+0x750>
 80115a4:	e617      	b.n	80111d6 <__ieee754_pow+0x336>
 80115a6:	bf00      	nop
 80115a8:	4a454eef 	.word	0x4a454eef
 80115ac:	3fca7e28 	.word	0x3fca7e28
 80115b0:	93c9db65 	.word	0x93c9db65
 80115b4:	3fcd864a 	.word	0x3fcd864a
 80115b8:	a91d4101 	.word	0xa91d4101
 80115bc:	3fd17460 	.word	0x3fd17460
 80115c0:	518f264d 	.word	0x518f264d
 80115c4:	3fd55555 	.word	0x3fd55555
 80115c8:	db6fabff 	.word	0xdb6fabff
 80115cc:	3fdb6db6 	.word	0x3fdb6db6
 80115d0:	33333303 	.word	0x33333303
 80115d4:	3fe33333 	.word	0x3fe33333
 80115d8:	e0000000 	.word	0xe0000000
 80115dc:	3feec709 	.word	0x3feec709
 80115e0:	dc3a03fd 	.word	0xdc3a03fd
 80115e4:	3feec709 	.word	0x3feec709
 80115e8:	145b01f5 	.word	0x145b01f5
 80115ec:	be3e2fe0 	.word	0xbe3e2fe0
 80115f0:	00000000 	.word	0x00000000
 80115f4:	3ff00000 	.word	0x3ff00000
 80115f8:	7ff00000 	.word	0x7ff00000
 80115fc:	43400000 	.word	0x43400000
 8011600:	0003988e 	.word	0x0003988e
 8011604:	000bb679 	.word	0x000bb679
 8011608:	08011d78 	.word	0x08011d78
 801160c:	3ff00000 	.word	0x3ff00000
 8011610:	40080000 	.word	0x40080000
 8011614:	08011d98 	.word	0x08011d98
 8011618:	08011d88 	.word	0x08011d88
 801161c:	a3b3      	add	r3, pc, #716	; (adr r3, 80118ec <__ieee754_pow+0xa4c>)
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	4640      	mov	r0, r8
 8011624:	4649      	mov	r1, r9
 8011626:	f7f2 fe0b 	bl	8004240 <__adddf3>
 801162a:	4622      	mov	r2, r4
 801162c:	ec41 0b1a 	vmov	d10, r0, r1
 8011630:	462b      	mov	r3, r5
 8011632:	4630      	mov	r0, r6
 8011634:	4639      	mov	r1, r7
 8011636:	f7f2 fe01 	bl	800423c <__aeabi_dsub>
 801163a:	4602      	mov	r2, r0
 801163c:	460b      	mov	r3, r1
 801163e:	ec51 0b1a 	vmov	r0, r1, d10
 8011642:	f7f3 fa43 	bl	8004acc <__aeabi_dcmpgt>
 8011646:	2800      	cmp	r0, #0
 8011648:	f47f ae04 	bne.w	8011254 <__ieee754_pow+0x3b4>
 801164c:	4aa2      	ldr	r2, [pc, #648]	; (80118d8 <__ieee754_pow+0xa38>)
 801164e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011652:	4293      	cmp	r3, r2
 8011654:	f340 8107 	ble.w	8011866 <__ieee754_pow+0x9c6>
 8011658:	151b      	asrs	r3, r3, #20
 801165a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801165e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011662:	fa4a fa03 	asr.w	sl, sl, r3
 8011666:	44da      	add	sl, fp
 8011668:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801166c:	489b      	ldr	r0, [pc, #620]	; (80118dc <__ieee754_pow+0xa3c>)
 801166e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011672:	4108      	asrs	r0, r1
 8011674:	ea00 030a 	and.w	r3, r0, sl
 8011678:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801167c:	f1c1 0114 	rsb	r1, r1, #20
 8011680:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011684:	fa4a fa01 	asr.w	sl, sl, r1
 8011688:	f1bb 0f00 	cmp.w	fp, #0
 801168c:	f04f 0200 	mov.w	r2, #0
 8011690:	4620      	mov	r0, r4
 8011692:	4629      	mov	r1, r5
 8011694:	bfb8      	it	lt
 8011696:	f1ca 0a00 	rsblt	sl, sl, #0
 801169a:	f7f2 fdcf 	bl	800423c <__aeabi_dsub>
 801169e:	ec41 0b19 	vmov	d9, r0, r1
 80116a2:	4642      	mov	r2, r8
 80116a4:	464b      	mov	r3, r9
 80116a6:	ec51 0b19 	vmov	r0, r1, d9
 80116aa:	f7f2 fdc9 	bl	8004240 <__adddf3>
 80116ae:	a37a      	add	r3, pc, #488	; (adr r3, 8011898 <__ieee754_pow+0x9f8>)
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	2000      	movs	r0, #0
 80116b6:	4604      	mov	r4, r0
 80116b8:	460d      	mov	r5, r1
 80116ba:	f7f2 ff77 	bl	80045ac <__aeabi_dmul>
 80116be:	ec53 2b19 	vmov	r2, r3, d9
 80116c2:	4606      	mov	r6, r0
 80116c4:	460f      	mov	r7, r1
 80116c6:	4620      	mov	r0, r4
 80116c8:	4629      	mov	r1, r5
 80116ca:	f7f2 fdb7 	bl	800423c <__aeabi_dsub>
 80116ce:	4602      	mov	r2, r0
 80116d0:	460b      	mov	r3, r1
 80116d2:	4640      	mov	r0, r8
 80116d4:	4649      	mov	r1, r9
 80116d6:	f7f2 fdb1 	bl	800423c <__aeabi_dsub>
 80116da:	a371      	add	r3, pc, #452	; (adr r3, 80118a0 <__ieee754_pow+0xa00>)
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	f7f2 ff64 	bl	80045ac <__aeabi_dmul>
 80116e4:	a370      	add	r3, pc, #448	; (adr r3, 80118a8 <__ieee754_pow+0xa08>)
 80116e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ea:	4680      	mov	r8, r0
 80116ec:	4689      	mov	r9, r1
 80116ee:	4620      	mov	r0, r4
 80116f0:	4629      	mov	r1, r5
 80116f2:	f7f2 ff5b 	bl	80045ac <__aeabi_dmul>
 80116f6:	4602      	mov	r2, r0
 80116f8:	460b      	mov	r3, r1
 80116fa:	4640      	mov	r0, r8
 80116fc:	4649      	mov	r1, r9
 80116fe:	f7f2 fd9f 	bl	8004240 <__adddf3>
 8011702:	4604      	mov	r4, r0
 8011704:	460d      	mov	r5, r1
 8011706:	4602      	mov	r2, r0
 8011708:	460b      	mov	r3, r1
 801170a:	4630      	mov	r0, r6
 801170c:	4639      	mov	r1, r7
 801170e:	f7f2 fd97 	bl	8004240 <__adddf3>
 8011712:	4632      	mov	r2, r6
 8011714:	463b      	mov	r3, r7
 8011716:	4680      	mov	r8, r0
 8011718:	4689      	mov	r9, r1
 801171a:	f7f2 fd8f 	bl	800423c <__aeabi_dsub>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4620      	mov	r0, r4
 8011724:	4629      	mov	r1, r5
 8011726:	f7f2 fd89 	bl	800423c <__aeabi_dsub>
 801172a:	4642      	mov	r2, r8
 801172c:	4606      	mov	r6, r0
 801172e:	460f      	mov	r7, r1
 8011730:	464b      	mov	r3, r9
 8011732:	4640      	mov	r0, r8
 8011734:	4649      	mov	r1, r9
 8011736:	f7f2 ff39 	bl	80045ac <__aeabi_dmul>
 801173a:	a35d      	add	r3, pc, #372	; (adr r3, 80118b0 <__ieee754_pow+0xa10>)
 801173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011740:	4604      	mov	r4, r0
 8011742:	460d      	mov	r5, r1
 8011744:	f7f2 ff32 	bl	80045ac <__aeabi_dmul>
 8011748:	a35b      	add	r3, pc, #364	; (adr r3, 80118b8 <__ieee754_pow+0xa18>)
 801174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174e:	f7f2 fd75 	bl	800423c <__aeabi_dsub>
 8011752:	4622      	mov	r2, r4
 8011754:	462b      	mov	r3, r5
 8011756:	f7f2 ff29 	bl	80045ac <__aeabi_dmul>
 801175a:	a359      	add	r3, pc, #356	; (adr r3, 80118c0 <__ieee754_pow+0xa20>)
 801175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011760:	f7f2 fd6e 	bl	8004240 <__adddf3>
 8011764:	4622      	mov	r2, r4
 8011766:	462b      	mov	r3, r5
 8011768:	f7f2 ff20 	bl	80045ac <__aeabi_dmul>
 801176c:	a356      	add	r3, pc, #344	; (adr r3, 80118c8 <__ieee754_pow+0xa28>)
 801176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011772:	f7f2 fd63 	bl	800423c <__aeabi_dsub>
 8011776:	4622      	mov	r2, r4
 8011778:	462b      	mov	r3, r5
 801177a:	f7f2 ff17 	bl	80045ac <__aeabi_dmul>
 801177e:	a354      	add	r3, pc, #336	; (adr r3, 80118d0 <__ieee754_pow+0xa30>)
 8011780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011784:	f7f2 fd5c 	bl	8004240 <__adddf3>
 8011788:	4622      	mov	r2, r4
 801178a:	462b      	mov	r3, r5
 801178c:	f7f2 ff0e 	bl	80045ac <__aeabi_dmul>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	4640      	mov	r0, r8
 8011796:	4649      	mov	r1, r9
 8011798:	f7f2 fd50 	bl	800423c <__aeabi_dsub>
 801179c:	4604      	mov	r4, r0
 801179e:	460d      	mov	r5, r1
 80117a0:	4602      	mov	r2, r0
 80117a2:	460b      	mov	r3, r1
 80117a4:	4640      	mov	r0, r8
 80117a6:	4649      	mov	r1, r9
 80117a8:	f7f2 ff00 	bl	80045ac <__aeabi_dmul>
 80117ac:	2200      	movs	r2, #0
 80117ae:	ec41 0b19 	vmov	d9, r0, r1
 80117b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80117b6:	4620      	mov	r0, r4
 80117b8:	4629      	mov	r1, r5
 80117ba:	f7f2 fd3f 	bl	800423c <__aeabi_dsub>
 80117be:	4602      	mov	r2, r0
 80117c0:	460b      	mov	r3, r1
 80117c2:	ec51 0b19 	vmov	r0, r1, d9
 80117c6:	f7f3 f81b 	bl	8004800 <__aeabi_ddiv>
 80117ca:	4632      	mov	r2, r6
 80117cc:	4604      	mov	r4, r0
 80117ce:	460d      	mov	r5, r1
 80117d0:	463b      	mov	r3, r7
 80117d2:	4640      	mov	r0, r8
 80117d4:	4649      	mov	r1, r9
 80117d6:	f7f2 fee9 	bl	80045ac <__aeabi_dmul>
 80117da:	4632      	mov	r2, r6
 80117dc:	463b      	mov	r3, r7
 80117de:	f7f2 fd2f 	bl	8004240 <__adddf3>
 80117e2:	4602      	mov	r2, r0
 80117e4:	460b      	mov	r3, r1
 80117e6:	4620      	mov	r0, r4
 80117e8:	4629      	mov	r1, r5
 80117ea:	f7f2 fd27 	bl	800423c <__aeabi_dsub>
 80117ee:	4642      	mov	r2, r8
 80117f0:	464b      	mov	r3, r9
 80117f2:	f7f2 fd23 	bl	800423c <__aeabi_dsub>
 80117f6:	460b      	mov	r3, r1
 80117f8:	4602      	mov	r2, r0
 80117fa:	4939      	ldr	r1, [pc, #228]	; (80118e0 <__ieee754_pow+0xa40>)
 80117fc:	2000      	movs	r0, #0
 80117fe:	f7f2 fd1d 	bl	800423c <__aeabi_dsub>
 8011802:	ec41 0b10 	vmov	d0, r0, r1
 8011806:	ee10 3a90 	vmov	r3, s1
 801180a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801180e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011812:	da2b      	bge.n	801186c <__ieee754_pow+0x9cc>
 8011814:	4650      	mov	r0, sl
 8011816:	f000 f877 	bl	8011908 <scalbn>
 801181a:	ec51 0b10 	vmov	r0, r1, d0
 801181e:	ec53 2b18 	vmov	r2, r3, d8
 8011822:	f7ff bbee 	b.w	8011002 <__ieee754_pow+0x162>
 8011826:	4b2f      	ldr	r3, [pc, #188]	; (80118e4 <__ieee754_pow+0xa44>)
 8011828:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801182c:	429e      	cmp	r6, r3
 801182e:	f77f af0d 	ble.w	801164c <__ieee754_pow+0x7ac>
 8011832:	4b2d      	ldr	r3, [pc, #180]	; (80118e8 <__ieee754_pow+0xa48>)
 8011834:	440b      	add	r3, r1
 8011836:	4303      	orrs	r3, r0
 8011838:	d009      	beq.n	801184e <__ieee754_pow+0x9ae>
 801183a:	ec51 0b18 	vmov	r0, r1, d8
 801183e:	2200      	movs	r2, #0
 8011840:	2300      	movs	r3, #0
 8011842:	f7f3 f925 	bl	8004a90 <__aeabi_dcmplt>
 8011846:	3800      	subs	r0, #0
 8011848:	bf18      	it	ne
 801184a:	2001      	movne	r0, #1
 801184c:	e448      	b.n	80110e0 <__ieee754_pow+0x240>
 801184e:	4622      	mov	r2, r4
 8011850:	462b      	mov	r3, r5
 8011852:	f7f2 fcf3 	bl	800423c <__aeabi_dsub>
 8011856:	4642      	mov	r2, r8
 8011858:	464b      	mov	r3, r9
 801185a:	f7f3 f92d 	bl	8004ab8 <__aeabi_dcmpge>
 801185e:	2800      	cmp	r0, #0
 8011860:	f43f aef4 	beq.w	801164c <__ieee754_pow+0x7ac>
 8011864:	e7e9      	b.n	801183a <__ieee754_pow+0x99a>
 8011866:	f04f 0a00 	mov.w	sl, #0
 801186a:	e71a      	b.n	80116a2 <__ieee754_pow+0x802>
 801186c:	ec51 0b10 	vmov	r0, r1, d0
 8011870:	4619      	mov	r1, r3
 8011872:	e7d4      	b.n	801181e <__ieee754_pow+0x97e>
 8011874:	491a      	ldr	r1, [pc, #104]	; (80118e0 <__ieee754_pow+0xa40>)
 8011876:	2000      	movs	r0, #0
 8011878:	f7ff bb31 	b.w	8010ede <__ieee754_pow+0x3e>
 801187c:	2000      	movs	r0, #0
 801187e:	2100      	movs	r1, #0
 8011880:	f7ff bb2d 	b.w	8010ede <__ieee754_pow+0x3e>
 8011884:	4630      	mov	r0, r6
 8011886:	4639      	mov	r1, r7
 8011888:	f7ff bb29 	b.w	8010ede <__ieee754_pow+0x3e>
 801188c:	9204      	str	r2, [sp, #16]
 801188e:	f7ff bb7b 	b.w	8010f88 <__ieee754_pow+0xe8>
 8011892:	2300      	movs	r3, #0
 8011894:	f7ff bb65 	b.w	8010f62 <__ieee754_pow+0xc2>
 8011898:	00000000 	.word	0x00000000
 801189c:	3fe62e43 	.word	0x3fe62e43
 80118a0:	fefa39ef 	.word	0xfefa39ef
 80118a4:	3fe62e42 	.word	0x3fe62e42
 80118a8:	0ca86c39 	.word	0x0ca86c39
 80118ac:	be205c61 	.word	0xbe205c61
 80118b0:	72bea4d0 	.word	0x72bea4d0
 80118b4:	3e663769 	.word	0x3e663769
 80118b8:	c5d26bf1 	.word	0xc5d26bf1
 80118bc:	3ebbbd41 	.word	0x3ebbbd41
 80118c0:	af25de2c 	.word	0xaf25de2c
 80118c4:	3f11566a 	.word	0x3f11566a
 80118c8:	16bebd93 	.word	0x16bebd93
 80118cc:	3f66c16c 	.word	0x3f66c16c
 80118d0:	5555553e 	.word	0x5555553e
 80118d4:	3fc55555 	.word	0x3fc55555
 80118d8:	3fe00000 	.word	0x3fe00000
 80118dc:	fff00000 	.word	0xfff00000
 80118e0:	3ff00000 	.word	0x3ff00000
 80118e4:	4090cbff 	.word	0x4090cbff
 80118e8:	3f6f3400 	.word	0x3f6f3400
 80118ec:	652b82fe 	.word	0x652b82fe
 80118f0:	3c971547 	.word	0x3c971547

080118f4 <fabs>:
 80118f4:	ec51 0b10 	vmov	r0, r1, d0
 80118f8:	ee10 2a10 	vmov	r2, s0
 80118fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011900:	ec43 2b10 	vmov	d0, r2, r3
 8011904:	4770      	bx	lr
	...

08011908 <scalbn>:
 8011908:	b570      	push	{r4, r5, r6, lr}
 801190a:	ec55 4b10 	vmov	r4, r5, d0
 801190e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011912:	4606      	mov	r6, r0
 8011914:	462b      	mov	r3, r5
 8011916:	b999      	cbnz	r1, 8011940 <scalbn+0x38>
 8011918:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801191c:	4323      	orrs	r3, r4
 801191e:	d03f      	beq.n	80119a0 <scalbn+0x98>
 8011920:	4b35      	ldr	r3, [pc, #212]	; (80119f8 <scalbn+0xf0>)
 8011922:	4629      	mov	r1, r5
 8011924:	ee10 0a10 	vmov	r0, s0
 8011928:	2200      	movs	r2, #0
 801192a:	f7f2 fe3f 	bl	80045ac <__aeabi_dmul>
 801192e:	4b33      	ldr	r3, [pc, #204]	; (80119fc <scalbn+0xf4>)
 8011930:	429e      	cmp	r6, r3
 8011932:	4604      	mov	r4, r0
 8011934:	460d      	mov	r5, r1
 8011936:	da10      	bge.n	801195a <scalbn+0x52>
 8011938:	a327      	add	r3, pc, #156	; (adr r3, 80119d8 <scalbn+0xd0>)
 801193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193e:	e01f      	b.n	8011980 <scalbn+0x78>
 8011940:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011944:	4291      	cmp	r1, r2
 8011946:	d10c      	bne.n	8011962 <scalbn+0x5a>
 8011948:	ee10 2a10 	vmov	r2, s0
 801194c:	4620      	mov	r0, r4
 801194e:	4629      	mov	r1, r5
 8011950:	f7f2 fc76 	bl	8004240 <__adddf3>
 8011954:	4604      	mov	r4, r0
 8011956:	460d      	mov	r5, r1
 8011958:	e022      	b.n	80119a0 <scalbn+0x98>
 801195a:	460b      	mov	r3, r1
 801195c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011960:	3936      	subs	r1, #54	; 0x36
 8011962:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011966:	4296      	cmp	r6, r2
 8011968:	dd0d      	ble.n	8011986 <scalbn+0x7e>
 801196a:	2d00      	cmp	r5, #0
 801196c:	a11c      	add	r1, pc, #112	; (adr r1, 80119e0 <scalbn+0xd8>)
 801196e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011972:	da02      	bge.n	801197a <scalbn+0x72>
 8011974:	a11c      	add	r1, pc, #112	; (adr r1, 80119e8 <scalbn+0xe0>)
 8011976:	e9d1 0100 	ldrd	r0, r1, [r1]
 801197a:	a319      	add	r3, pc, #100	; (adr r3, 80119e0 <scalbn+0xd8>)
 801197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011980:	f7f2 fe14 	bl	80045ac <__aeabi_dmul>
 8011984:	e7e6      	b.n	8011954 <scalbn+0x4c>
 8011986:	1872      	adds	r2, r6, r1
 8011988:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801198c:	428a      	cmp	r2, r1
 801198e:	dcec      	bgt.n	801196a <scalbn+0x62>
 8011990:	2a00      	cmp	r2, #0
 8011992:	dd08      	ble.n	80119a6 <scalbn+0x9e>
 8011994:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801199c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80119a0:	ec45 4b10 	vmov	d0, r4, r5
 80119a4:	bd70      	pop	{r4, r5, r6, pc}
 80119a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80119aa:	da08      	bge.n	80119be <scalbn+0xb6>
 80119ac:	2d00      	cmp	r5, #0
 80119ae:	a10a      	add	r1, pc, #40	; (adr r1, 80119d8 <scalbn+0xd0>)
 80119b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119b4:	dac0      	bge.n	8011938 <scalbn+0x30>
 80119b6:	a10e      	add	r1, pc, #56	; (adr r1, 80119f0 <scalbn+0xe8>)
 80119b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119bc:	e7bc      	b.n	8011938 <scalbn+0x30>
 80119be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80119c2:	3236      	adds	r2, #54	; 0x36
 80119c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80119c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80119cc:	4620      	mov	r0, r4
 80119ce:	4b0c      	ldr	r3, [pc, #48]	; (8011a00 <scalbn+0xf8>)
 80119d0:	2200      	movs	r2, #0
 80119d2:	e7d5      	b.n	8011980 <scalbn+0x78>
 80119d4:	f3af 8000 	nop.w
 80119d8:	c2f8f359 	.word	0xc2f8f359
 80119dc:	01a56e1f 	.word	0x01a56e1f
 80119e0:	8800759c 	.word	0x8800759c
 80119e4:	7e37e43c 	.word	0x7e37e43c
 80119e8:	8800759c 	.word	0x8800759c
 80119ec:	fe37e43c 	.word	0xfe37e43c
 80119f0:	c2f8f359 	.word	0xc2f8f359
 80119f4:	81a56e1f 	.word	0x81a56e1f
 80119f8:	43500000 	.word	0x43500000
 80119fc:	ffff3cb0 	.word	0xffff3cb0
 8011a00:	3c900000 	.word	0x3c900000

08011a04 <with_errno>:
 8011a04:	b570      	push	{r4, r5, r6, lr}
 8011a06:	4604      	mov	r4, r0
 8011a08:	460d      	mov	r5, r1
 8011a0a:	4616      	mov	r6, r2
 8011a0c:	f7ff f93a 	bl	8010c84 <__errno>
 8011a10:	4629      	mov	r1, r5
 8011a12:	6006      	str	r6, [r0, #0]
 8011a14:	4620      	mov	r0, r4
 8011a16:	bd70      	pop	{r4, r5, r6, pc}

08011a18 <xflow>:
 8011a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a1a:	4614      	mov	r4, r2
 8011a1c:	461d      	mov	r5, r3
 8011a1e:	b108      	cbz	r0, 8011a24 <xflow+0xc>
 8011a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a24:	e9cd 2300 	strd	r2, r3, [sp]
 8011a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	4629      	mov	r1, r5
 8011a30:	f7f2 fdbc 	bl	80045ac <__aeabi_dmul>
 8011a34:	2222      	movs	r2, #34	; 0x22
 8011a36:	b003      	add	sp, #12
 8011a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a3c:	f7ff bfe2 	b.w	8011a04 <with_errno>

08011a40 <__math_uflow>:
 8011a40:	b508      	push	{r3, lr}
 8011a42:	2200      	movs	r2, #0
 8011a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011a48:	f7ff ffe6 	bl	8011a18 <xflow>
 8011a4c:	ec41 0b10 	vmov	d0, r0, r1
 8011a50:	bd08      	pop	{r3, pc}

08011a52 <__math_oflow>:
 8011a52:	b508      	push	{r3, lr}
 8011a54:	2200      	movs	r2, #0
 8011a56:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011a5a:	f7ff ffdd 	bl	8011a18 <xflow>
 8011a5e:	ec41 0b10 	vmov	d0, r0, r1
 8011a62:	bd08      	pop	{r3, pc}

08011a64 <__ieee754_sqrt>:
 8011a64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a68:	ec55 4b10 	vmov	r4, r5, d0
 8011a6c:	4e67      	ldr	r6, [pc, #412]	; (8011c0c <__ieee754_sqrt+0x1a8>)
 8011a6e:	43ae      	bics	r6, r5
 8011a70:	ee10 0a10 	vmov	r0, s0
 8011a74:	ee10 2a10 	vmov	r2, s0
 8011a78:	4629      	mov	r1, r5
 8011a7a:	462b      	mov	r3, r5
 8011a7c:	d10d      	bne.n	8011a9a <__ieee754_sqrt+0x36>
 8011a7e:	f7f2 fd95 	bl	80045ac <__aeabi_dmul>
 8011a82:	4602      	mov	r2, r0
 8011a84:	460b      	mov	r3, r1
 8011a86:	4620      	mov	r0, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7f2 fbd9 	bl	8004240 <__adddf3>
 8011a8e:	4604      	mov	r4, r0
 8011a90:	460d      	mov	r5, r1
 8011a92:	ec45 4b10 	vmov	d0, r4, r5
 8011a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a9a:	2d00      	cmp	r5, #0
 8011a9c:	dc0b      	bgt.n	8011ab6 <__ieee754_sqrt+0x52>
 8011a9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011aa2:	4326      	orrs	r6, r4
 8011aa4:	d0f5      	beq.n	8011a92 <__ieee754_sqrt+0x2e>
 8011aa6:	b135      	cbz	r5, 8011ab6 <__ieee754_sqrt+0x52>
 8011aa8:	f7f2 fbc8 	bl	800423c <__aeabi_dsub>
 8011aac:	4602      	mov	r2, r0
 8011aae:	460b      	mov	r3, r1
 8011ab0:	f7f2 fea6 	bl	8004800 <__aeabi_ddiv>
 8011ab4:	e7eb      	b.n	8011a8e <__ieee754_sqrt+0x2a>
 8011ab6:	1509      	asrs	r1, r1, #20
 8011ab8:	f000 808d 	beq.w	8011bd6 <__ieee754_sqrt+0x172>
 8011abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ac0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ac8:	07c9      	lsls	r1, r1, #31
 8011aca:	bf5c      	itt	pl
 8011acc:	005b      	lslpl	r3, r3, #1
 8011ace:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011ad6:	bf58      	it	pl
 8011ad8:	0052      	lslpl	r2, r2, #1
 8011ada:	2500      	movs	r5, #0
 8011adc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011ae0:	1076      	asrs	r6, r6, #1
 8011ae2:	0052      	lsls	r2, r2, #1
 8011ae4:	f04f 0e16 	mov.w	lr, #22
 8011ae8:	46ac      	mov	ip, r5
 8011aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011aee:	eb0c 0001 	add.w	r0, ip, r1
 8011af2:	4298      	cmp	r0, r3
 8011af4:	bfde      	ittt	le
 8011af6:	1a1b      	suble	r3, r3, r0
 8011af8:	eb00 0c01 	addle.w	ip, r0, r1
 8011afc:	186d      	addle	r5, r5, r1
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	f1be 0e01 	subs.w	lr, lr, #1
 8011b04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011b08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011b0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011b10:	d1ed      	bne.n	8011aee <__ieee754_sqrt+0x8a>
 8011b12:	4674      	mov	r4, lr
 8011b14:	2720      	movs	r7, #32
 8011b16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011b1a:	4563      	cmp	r3, ip
 8011b1c:	eb01 000e 	add.w	r0, r1, lr
 8011b20:	dc02      	bgt.n	8011b28 <__ieee754_sqrt+0xc4>
 8011b22:	d113      	bne.n	8011b4c <__ieee754_sqrt+0xe8>
 8011b24:	4290      	cmp	r0, r2
 8011b26:	d811      	bhi.n	8011b4c <__ieee754_sqrt+0xe8>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	eb00 0e01 	add.w	lr, r0, r1
 8011b2e:	da57      	bge.n	8011be0 <__ieee754_sqrt+0x17c>
 8011b30:	f1be 0f00 	cmp.w	lr, #0
 8011b34:	db54      	blt.n	8011be0 <__ieee754_sqrt+0x17c>
 8011b36:	f10c 0801 	add.w	r8, ip, #1
 8011b3a:	eba3 030c 	sub.w	r3, r3, ip
 8011b3e:	4290      	cmp	r0, r2
 8011b40:	bf88      	it	hi
 8011b42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011b46:	1a12      	subs	r2, r2, r0
 8011b48:	440c      	add	r4, r1
 8011b4a:	46c4      	mov	ip, r8
 8011b4c:	005b      	lsls	r3, r3, #1
 8011b4e:	3f01      	subs	r7, #1
 8011b50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011b54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011b58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011b5c:	d1dd      	bne.n	8011b1a <__ieee754_sqrt+0xb6>
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	d01b      	beq.n	8011b9a <__ieee754_sqrt+0x136>
 8011b62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011c10 <__ieee754_sqrt+0x1ac>
 8011b66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011c14 <__ieee754_sqrt+0x1b0>
 8011b6a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b72:	f7f2 fb63 	bl	800423c <__aeabi_dsub>
 8011b76:	e9da 8900 	ldrd	r8, r9, [sl]
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	4640      	mov	r0, r8
 8011b80:	4649      	mov	r1, r9
 8011b82:	f7f2 ff8f 	bl	8004aa4 <__aeabi_dcmple>
 8011b86:	b140      	cbz	r0, 8011b9a <__ieee754_sqrt+0x136>
 8011b88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011b8c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011b90:	e9db 2300 	ldrd	r2, r3, [fp]
 8011b94:	d126      	bne.n	8011be4 <__ieee754_sqrt+0x180>
 8011b96:	3501      	adds	r5, #1
 8011b98:	463c      	mov	r4, r7
 8011b9a:	106a      	asrs	r2, r5, #1
 8011b9c:	0863      	lsrs	r3, r4, #1
 8011b9e:	07e9      	lsls	r1, r5, #31
 8011ba0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011ba4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011ba8:	bf48      	it	mi
 8011baa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011bae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011bb2:	461c      	mov	r4, r3
 8011bb4:	e76d      	b.n	8011a92 <__ieee754_sqrt+0x2e>
 8011bb6:	0ad3      	lsrs	r3, r2, #11
 8011bb8:	3815      	subs	r0, #21
 8011bba:	0552      	lsls	r2, r2, #21
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d0fa      	beq.n	8011bb6 <__ieee754_sqrt+0x152>
 8011bc0:	02dc      	lsls	r4, r3, #11
 8011bc2:	d50a      	bpl.n	8011bda <__ieee754_sqrt+0x176>
 8011bc4:	f1c1 0420 	rsb	r4, r1, #32
 8011bc8:	fa22 f404 	lsr.w	r4, r2, r4
 8011bcc:	1e4d      	subs	r5, r1, #1
 8011bce:	408a      	lsls	r2, r1
 8011bd0:	4323      	orrs	r3, r4
 8011bd2:	1b41      	subs	r1, r0, r5
 8011bd4:	e772      	b.n	8011abc <__ieee754_sqrt+0x58>
 8011bd6:	4608      	mov	r0, r1
 8011bd8:	e7f0      	b.n	8011bbc <__ieee754_sqrt+0x158>
 8011bda:	005b      	lsls	r3, r3, #1
 8011bdc:	3101      	adds	r1, #1
 8011bde:	e7ef      	b.n	8011bc0 <__ieee754_sqrt+0x15c>
 8011be0:	46e0      	mov	r8, ip
 8011be2:	e7aa      	b.n	8011b3a <__ieee754_sqrt+0xd6>
 8011be4:	f7f2 fb2c 	bl	8004240 <__adddf3>
 8011be8:	e9da 8900 	ldrd	r8, r9, [sl]
 8011bec:	4602      	mov	r2, r0
 8011bee:	460b      	mov	r3, r1
 8011bf0:	4640      	mov	r0, r8
 8011bf2:	4649      	mov	r1, r9
 8011bf4:	f7f2 ff4c 	bl	8004a90 <__aeabi_dcmplt>
 8011bf8:	b120      	cbz	r0, 8011c04 <__ieee754_sqrt+0x1a0>
 8011bfa:	1ca0      	adds	r0, r4, #2
 8011bfc:	bf08      	it	eq
 8011bfe:	3501      	addeq	r5, #1
 8011c00:	3402      	adds	r4, #2
 8011c02:	e7ca      	b.n	8011b9a <__ieee754_sqrt+0x136>
 8011c04:	3401      	adds	r4, #1
 8011c06:	f024 0401 	bic.w	r4, r4, #1
 8011c0a:	e7c6      	b.n	8011b9a <__ieee754_sqrt+0x136>
 8011c0c:	7ff00000 	.word	0x7ff00000
 8011c10:	20000068 	.word	0x20000068
 8011c14:	20000070 	.word	0x20000070

08011c18 <_init>:
 8011c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c1a:	bf00      	nop
 8011c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c1e:	bc08      	pop	{r3}
 8011c20:	469e      	mov	lr, r3
 8011c22:	4770      	bx	lr

08011c24 <_fini>:
 8011c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c26:	bf00      	nop
 8011c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c2a:	bc08      	pop	{r3}
 8011c2c:	469e      	mov	lr, r3
 8011c2e:	4770      	bx	lr
