
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c30  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08018e10  08018e10  00018e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080190a0  080190a0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  080190a0  080190a0  000190a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080190a8  080190a8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080190a8  080190a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080190ac  080190ac  000190ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080190b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005624  200001f0  080192a0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005814  080192a0  00025814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003547b  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000771c  00000000  00000000  00055753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002808  00000000  00000000  0005ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001eac  00000000  00000000  0005f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032fc2  00000000  00000000  00061524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038eb9  00000000  00000000  000944e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128622  00000000  00000000  000cd39f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ae48  00000000  00000000  001f59c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0020080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  0020087e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	200001f0 	.word	0x200001f0
 80041fc:	00000000 	.word	0x00000000
 8004200:	08018df8 	.word	0x08018df8

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	200001f4 	.word	0x200001f4
 800421c:	08018df8 	.word	0x08018df8

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <strlen>:
 8004234:	4603      	mov	r3, r0
 8004236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1fb      	bne.n	8004236 <strlen+0x2>
 800423e:	1a18      	subs	r0, r3, r0
 8004240:	3801      	subs	r0, #1
 8004242:	4770      	bx	lr

08004244 <__aeabi_drsub>:
 8004244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004248:	e002      	b.n	8004250 <__adddf3>
 800424a:	bf00      	nop

0800424c <__aeabi_dsub>:
 800424c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004250 <__adddf3>:
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800425a:	ea94 0f05 	teq	r4, r5
 800425e:	bf08      	it	eq
 8004260:	ea90 0f02 	teqeq	r0, r2
 8004264:	bf1f      	itttt	ne
 8004266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800426a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800426e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004276:	f000 80e2 	beq.w	800443e <__adddf3+0x1ee>
 800427a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800427e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004282:	bfb8      	it	lt
 8004284:	426d      	neglt	r5, r5
 8004286:	dd0c      	ble.n	80042a2 <__adddf3+0x52>
 8004288:	442c      	add	r4, r5
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	ea82 0000 	eor.w	r0, r2, r0
 8004296:	ea83 0101 	eor.w	r1, r3, r1
 800429a:	ea80 0202 	eor.w	r2, r0, r2
 800429e:	ea81 0303 	eor.w	r3, r1, r3
 80042a2:	2d36      	cmp	r5, #54	; 0x36
 80042a4:	bf88      	it	hi
 80042a6:	bd30      	pophi	{r4, r5, pc}
 80042a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042b8:	d002      	beq.n	80042c0 <__adddf3+0x70>
 80042ba:	4240      	negs	r0, r0
 80042bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042cc:	d002      	beq.n	80042d4 <__adddf3+0x84>
 80042ce:	4252      	negs	r2, r2
 80042d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042d4:	ea94 0f05 	teq	r4, r5
 80042d8:	f000 80a7 	beq.w	800442a <__adddf3+0x1da>
 80042dc:	f1a4 0401 	sub.w	r4, r4, #1
 80042e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042e4:	db0d      	blt.n	8004302 <__adddf3+0xb2>
 80042e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042ea:	fa22 f205 	lsr.w	r2, r2, r5
 80042ee:	1880      	adds	r0, r0, r2
 80042f0:	f141 0100 	adc.w	r1, r1, #0
 80042f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042f8:	1880      	adds	r0, r0, r2
 80042fa:	fa43 f305 	asr.w	r3, r3, r5
 80042fe:	4159      	adcs	r1, r3
 8004300:	e00e      	b.n	8004320 <__adddf3+0xd0>
 8004302:	f1a5 0520 	sub.w	r5, r5, #32
 8004306:	f10e 0e20 	add.w	lr, lr, #32
 800430a:	2a01      	cmp	r2, #1
 800430c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004310:	bf28      	it	cs
 8004312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004316:	fa43 f305 	asr.w	r3, r3, r5
 800431a:	18c0      	adds	r0, r0, r3
 800431c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004324:	d507      	bpl.n	8004336 <__adddf3+0xe6>
 8004326:	f04f 0e00 	mov.w	lr, #0
 800432a:	f1dc 0c00 	rsbs	ip, ip, #0
 800432e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004332:	eb6e 0101 	sbc.w	r1, lr, r1
 8004336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800433a:	d31b      	bcc.n	8004374 <__adddf3+0x124>
 800433c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004340:	d30c      	bcc.n	800435c <__adddf3+0x10c>
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	ea5f 0030 	movs.w	r0, r0, rrx
 8004348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800434c:	f104 0401 	add.w	r4, r4, #1
 8004350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004358:	f080 809a 	bcs.w	8004490 <__adddf3+0x240>
 800435c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004360:	bf08      	it	eq
 8004362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004366:	f150 0000 	adcs.w	r0, r0, #0
 800436a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800436e:	ea41 0105 	orr.w	r1, r1, r5
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004378:	4140      	adcs	r0, r0
 800437a:	eb41 0101 	adc.w	r1, r1, r1
 800437e:	3c01      	subs	r4, #1
 8004380:	bf28      	it	cs
 8004382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004386:	d2e9      	bcs.n	800435c <__adddf3+0x10c>
 8004388:	f091 0f00 	teq	r1, #0
 800438c:	bf04      	itt	eq
 800438e:	4601      	moveq	r1, r0
 8004390:	2000      	moveq	r0, #0
 8004392:	fab1 f381 	clz	r3, r1
 8004396:	bf08      	it	eq
 8004398:	3320      	addeq	r3, #32
 800439a:	f1a3 030b 	sub.w	r3, r3, #11
 800439e:	f1b3 0220 	subs.w	r2, r3, #32
 80043a2:	da0c      	bge.n	80043be <__adddf3+0x16e>
 80043a4:	320c      	adds	r2, #12
 80043a6:	dd08      	ble.n	80043ba <__adddf3+0x16a>
 80043a8:	f102 0c14 	add.w	ip, r2, #20
 80043ac:	f1c2 020c 	rsb	r2, r2, #12
 80043b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043b4:	fa21 f102 	lsr.w	r1, r1, r2
 80043b8:	e00c      	b.n	80043d4 <__adddf3+0x184>
 80043ba:	f102 0214 	add.w	r2, r2, #20
 80043be:	bfd8      	it	le
 80043c0:	f1c2 0c20 	rsble	ip, r2, #32
 80043c4:	fa01 f102 	lsl.w	r1, r1, r2
 80043c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043cc:	bfdc      	itt	le
 80043ce:	ea41 010c 	orrle.w	r1, r1, ip
 80043d2:	4090      	lslle	r0, r2
 80043d4:	1ae4      	subs	r4, r4, r3
 80043d6:	bfa2      	ittt	ge
 80043d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043dc:	4329      	orrge	r1, r5
 80043de:	bd30      	popge	{r4, r5, pc}
 80043e0:	ea6f 0404 	mvn.w	r4, r4
 80043e4:	3c1f      	subs	r4, #31
 80043e6:	da1c      	bge.n	8004422 <__adddf3+0x1d2>
 80043e8:	340c      	adds	r4, #12
 80043ea:	dc0e      	bgt.n	800440a <__adddf3+0x1ba>
 80043ec:	f104 0414 	add.w	r4, r4, #20
 80043f0:	f1c4 0220 	rsb	r2, r4, #32
 80043f4:	fa20 f004 	lsr.w	r0, r0, r4
 80043f8:	fa01 f302 	lsl.w	r3, r1, r2
 80043fc:	ea40 0003 	orr.w	r0, r0, r3
 8004400:	fa21 f304 	lsr.w	r3, r1, r4
 8004404:	ea45 0103 	orr.w	r1, r5, r3
 8004408:	bd30      	pop	{r4, r5, pc}
 800440a:	f1c4 040c 	rsb	r4, r4, #12
 800440e:	f1c4 0220 	rsb	r2, r4, #32
 8004412:	fa20 f002 	lsr.w	r0, r0, r2
 8004416:	fa01 f304 	lsl.w	r3, r1, r4
 800441a:	ea40 0003 	orr.w	r0, r0, r3
 800441e:	4629      	mov	r1, r5
 8004420:	bd30      	pop	{r4, r5, pc}
 8004422:	fa21 f004 	lsr.w	r0, r1, r4
 8004426:	4629      	mov	r1, r5
 8004428:	bd30      	pop	{r4, r5, pc}
 800442a:	f094 0f00 	teq	r4, #0
 800442e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004432:	bf06      	itte	eq
 8004434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004438:	3401      	addeq	r4, #1
 800443a:	3d01      	subne	r5, #1
 800443c:	e74e      	b.n	80042dc <__adddf3+0x8c>
 800443e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004442:	bf18      	it	ne
 8004444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004448:	d029      	beq.n	800449e <__adddf3+0x24e>
 800444a:	ea94 0f05 	teq	r4, r5
 800444e:	bf08      	it	eq
 8004450:	ea90 0f02 	teqeq	r0, r2
 8004454:	d005      	beq.n	8004462 <__adddf3+0x212>
 8004456:	ea54 0c00 	orrs.w	ip, r4, r0
 800445a:	bf04      	itt	eq
 800445c:	4619      	moveq	r1, r3
 800445e:	4610      	moveq	r0, r2
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	ea91 0f03 	teq	r1, r3
 8004466:	bf1e      	ittt	ne
 8004468:	2100      	movne	r1, #0
 800446a:	2000      	movne	r0, #0
 800446c:	bd30      	popne	{r4, r5, pc}
 800446e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004472:	d105      	bne.n	8004480 <__adddf3+0x230>
 8004474:	0040      	lsls	r0, r0, #1
 8004476:	4149      	adcs	r1, r1
 8004478:	bf28      	it	cs
 800447a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004484:	bf3c      	itt	cc
 8004486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800448a:	bd30      	popcc	{r4, r5, pc}
 800448c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	bd30      	pop	{r4, r5, pc}
 800449e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044a2:	bf1a      	itte	ne
 80044a4:	4619      	movne	r1, r3
 80044a6:	4610      	movne	r0, r2
 80044a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044ac:	bf1c      	itt	ne
 80044ae:	460b      	movne	r3, r1
 80044b0:	4602      	movne	r2, r0
 80044b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044b6:	bf06      	itte	eq
 80044b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044bc:	ea91 0f03 	teqeq	r1, r3
 80044c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <__aeabi_ui2d>:
 80044c8:	f090 0f00 	teq	r0, #0
 80044cc:	bf04      	itt	eq
 80044ce:	2100      	moveq	r1, #0
 80044d0:	4770      	bxeq	lr
 80044d2:	b530      	push	{r4, r5, lr}
 80044d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044dc:	f04f 0500 	mov.w	r5, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	e750      	b.n	8004388 <__adddf3+0x138>
 80044e6:	bf00      	nop

080044e8 <__aeabi_i2d>:
 80044e8:	f090 0f00 	teq	r0, #0
 80044ec:	bf04      	itt	eq
 80044ee:	2100      	moveq	r1, #0
 80044f0:	4770      	bxeq	lr
 80044f2:	b530      	push	{r4, r5, lr}
 80044f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004500:	bf48      	it	mi
 8004502:	4240      	negmi	r0, r0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	e73e      	b.n	8004388 <__adddf3+0x138>
 800450a:	bf00      	nop

0800450c <__aeabi_f2d>:
 800450c:	0042      	lsls	r2, r0, #1
 800450e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004512:	ea4f 0131 	mov.w	r1, r1, rrx
 8004516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800451a:	bf1f      	itttt	ne
 800451c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004528:	4770      	bxne	lr
 800452a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800452e:	bf08      	it	eq
 8004530:	4770      	bxeq	lr
 8004532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004536:	bf04      	itt	eq
 8004538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800453c:	4770      	bxeq	lr
 800453e:	b530      	push	{r4, r5, lr}
 8004540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800454c:	e71c      	b.n	8004388 <__adddf3+0x138>
 800454e:	bf00      	nop

08004550 <__aeabi_ul2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	e00a      	b.n	8004576 <__aeabi_l2d+0x16>

08004560 <__aeabi_l2d>:
 8004560:	ea50 0201 	orrs.w	r2, r0, r1
 8004564:	bf08      	it	eq
 8004566:	4770      	bxeq	lr
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800456e:	d502      	bpl.n	8004576 <__aeabi_l2d+0x16>
 8004570:	4240      	negs	r0, r0
 8004572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800457a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800457e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004582:	f43f aed8 	beq.w	8004336 <__adddf3+0xe6>
 8004586:	f04f 0203 	mov.w	r2, #3
 800458a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800458e:	bf18      	it	ne
 8004590:	3203      	addne	r2, #3
 8004592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004596:	bf18      	it	ne
 8004598:	3203      	addne	r2, #3
 800459a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800459e:	f1c2 0320 	rsb	r3, r2, #32
 80045a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80045a6:	fa20 f002 	lsr.w	r0, r0, r2
 80045aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80045ae:	ea40 000e 	orr.w	r0, r0, lr
 80045b2:	fa21 f102 	lsr.w	r1, r1, r2
 80045b6:	4414      	add	r4, r2
 80045b8:	e6bd      	b.n	8004336 <__adddf3+0xe6>
 80045ba:	bf00      	nop

080045bc <__aeabi_dmul>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ca:	bf1d      	ittte	ne
 80045cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045d0:	ea94 0f0c 	teqne	r4, ip
 80045d4:	ea95 0f0c 	teqne	r5, ip
 80045d8:	f000 f8de 	bleq	8004798 <__aeabi_dmul+0x1dc>
 80045dc:	442c      	add	r4, r5
 80045de:	ea81 0603 	eor.w	r6, r1, r3
 80045e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045ee:	bf18      	it	ne
 80045f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fc:	d038      	beq.n	8004670 <__aeabi_dmul+0xb4>
 80045fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8004602:	f04f 0500 	mov.w	r5, #0
 8004606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800460a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800460e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004612:	f04f 0600 	mov.w	r6, #0
 8004616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800461a:	f09c 0f00 	teq	ip, #0
 800461e:	bf18      	it	ne
 8004620:	f04e 0e01 	orrne.w	lr, lr, #1
 8004624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800462c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004630:	d204      	bcs.n	800463c <__aeabi_dmul+0x80>
 8004632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004636:	416d      	adcs	r5, r5
 8004638:	eb46 0606 	adc.w	r6, r6, r6
 800463c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800464c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004654:	bf88      	it	hi
 8004656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800465a:	d81e      	bhi.n	800469a <__aeabi_dmul+0xde>
 800465c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004660:	bf08      	it	eq
 8004662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004666:	f150 0000 	adcs.w	r0, r0, #0
 800466a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004674:	ea46 0101 	orr.w	r1, r6, r1
 8004678:	ea40 0002 	orr.w	r0, r0, r2
 800467c:	ea81 0103 	eor.w	r1, r1, r3
 8004680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004684:	bfc2      	ittt	gt
 8004686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800468a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800468e:	bd70      	popgt	{r4, r5, r6, pc}
 8004690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004694:	f04f 0e00 	mov.w	lr, #0
 8004698:	3c01      	subs	r4, #1
 800469a:	f300 80ab 	bgt.w	80047f4 <__aeabi_dmul+0x238>
 800469e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046a2:	bfde      	ittt	le
 80046a4:	2000      	movle	r0, #0
 80046a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046aa:	bd70      	pople	{r4, r5, r6, pc}
 80046ac:	f1c4 0400 	rsb	r4, r4, #0
 80046b0:	3c20      	subs	r4, #32
 80046b2:	da35      	bge.n	8004720 <__aeabi_dmul+0x164>
 80046b4:	340c      	adds	r4, #12
 80046b6:	dc1b      	bgt.n	80046f0 <__aeabi_dmul+0x134>
 80046b8:	f104 0414 	add.w	r4, r4, #20
 80046bc:	f1c4 0520 	rsb	r5, r4, #32
 80046c0:	fa00 f305 	lsl.w	r3, r0, r5
 80046c4:	fa20 f004 	lsr.w	r0, r0, r4
 80046c8:	fa01 f205 	lsl.w	r2, r1, r5
 80046cc:	ea40 0002 	orr.w	r0, r0, r2
 80046d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046dc:	fa21 f604 	lsr.w	r6, r1, r4
 80046e0:	eb42 0106 	adc.w	r1, r2, r6
 80046e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046e8:	bf08      	it	eq
 80046ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f1c4 040c 	rsb	r4, r4, #12
 80046f4:	f1c4 0520 	rsb	r5, r4, #32
 80046f8:	fa00 f304 	lsl.w	r3, r0, r4
 80046fc:	fa20 f005 	lsr.w	r0, r0, r5
 8004700:	fa01 f204 	lsl.w	r2, r1, r4
 8004704:	ea40 0002 	orr.w	r0, r0, r2
 8004708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800470c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004710:	f141 0100 	adc.w	r1, r1, #0
 8004714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004718:	bf08      	it	eq
 800471a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f205 	lsl.w	r2, r0, r5
 8004728:	ea4e 0e02 	orr.w	lr, lr, r2
 800472c:	fa20 f304 	lsr.w	r3, r0, r4
 8004730:	fa01 f205 	lsl.w	r2, r1, r5
 8004734:	ea43 0302 	orr.w	r3, r3, r2
 8004738:	fa21 f004 	lsr.w	r0, r1, r4
 800473c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004740:	fa21 f204 	lsr.w	r2, r1, r4
 8004744:	ea20 0002 	bic.w	r0, r0, r2
 8004748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800474c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004750:	bf08      	it	eq
 8004752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f094 0f00 	teq	r4, #0
 800475c:	d10f      	bne.n	800477e <__aeabi_dmul+0x1c2>
 800475e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004762:	0040      	lsls	r0, r0, #1
 8004764:	eb41 0101 	adc.w	r1, r1, r1
 8004768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800476c:	bf08      	it	eq
 800476e:	3c01      	subeq	r4, #1
 8004770:	d0f7      	beq.n	8004762 <__aeabi_dmul+0x1a6>
 8004772:	ea41 0106 	orr.w	r1, r1, r6
 8004776:	f095 0f00 	teq	r5, #0
 800477a:	bf18      	it	ne
 800477c:	4770      	bxne	lr
 800477e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	eb43 0303 	adc.w	r3, r3, r3
 8004788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800478c:	bf08      	it	eq
 800478e:	3d01      	subeq	r5, #1
 8004790:	d0f7      	beq.n	8004782 <__aeabi_dmul+0x1c6>
 8004792:	ea43 0306 	orr.w	r3, r3, r6
 8004796:	4770      	bx	lr
 8004798:	ea94 0f0c 	teq	r4, ip
 800479c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047a0:	bf18      	it	ne
 80047a2:	ea95 0f0c 	teqne	r5, ip
 80047a6:	d00c      	beq.n	80047c2 <__aeabi_dmul+0x206>
 80047a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047ac:	bf18      	it	ne
 80047ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047b2:	d1d1      	bne.n	8004758 <__aeabi_dmul+0x19c>
 80047b4:	ea81 0103 	eor.w	r1, r1, r3
 80047b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047c6:	bf06      	itte	eq
 80047c8:	4610      	moveq	r0, r2
 80047ca:	4619      	moveq	r1, r3
 80047cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047d0:	d019      	beq.n	8004806 <__aeabi_dmul+0x24a>
 80047d2:	ea94 0f0c 	teq	r4, ip
 80047d6:	d102      	bne.n	80047de <__aeabi_dmul+0x222>
 80047d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047dc:	d113      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047de:	ea95 0f0c 	teq	r5, ip
 80047e2:	d105      	bne.n	80047f0 <__aeabi_dmul+0x234>
 80047e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047e8:	bf1c      	itt	ne
 80047ea:	4610      	movne	r0, r2
 80047ec:	4619      	movne	r1, r3
 80047ee:	d10a      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047f0:	ea81 0103 	eor.w	r1, r1, r3
 80047f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800480a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800480e:	bd70      	pop	{r4, r5, r6, pc}

08004810 <__aeabi_ddiv>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800481a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800481e:	bf1d      	ittte	ne
 8004820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004824:	ea94 0f0c 	teqne	r4, ip
 8004828:	ea95 0f0c 	teqne	r5, ip
 800482c:	f000 f8a7 	bleq	800497e <__aeabi_ddiv+0x16e>
 8004830:	eba4 0405 	sub.w	r4, r4, r5
 8004834:	ea81 0e03 	eor.w	lr, r1, r3
 8004838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800483c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004840:	f000 8088 	beq.w	8004954 <__aeabi_ddiv+0x144>
 8004844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800484c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800485c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004868:	429d      	cmp	r5, r3
 800486a:	bf08      	it	eq
 800486c:	4296      	cmpeq	r6, r2
 800486e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004876:	d202      	bcs.n	800487e <__aeabi_ddiv+0x6e>
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	ea4f 0232 	mov.w	r2, r2, rrx
 800487e:	1ab6      	subs	r6, r6, r2
 8004880:	eb65 0503 	sbc.w	r5, r5, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	ea4f 0232 	mov.w	r2, r2, rrx
 800488a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800488e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004892:	ebb6 0e02 	subs.w	lr, r6, r2
 8004896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800489a:	bf22      	ittt	cs
 800489c:	1ab6      	subcs	r6, r6, r2
 800489e:	4675      	movcs	r5, lr
 80048a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048b2:	bf22      	ittt	cs
 80048b4:	1ab6      	subcs	r6, r6, r2
 80048b6:	4675      	movcs	r5, lr
 80048b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	ea4f 0232 	mov.w	r2, r2, rrx
 80048c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ca:	bf22      	ittt	cs
 80048cc:	1ab6      	subcs	r6, r6, r2
 80048ce:	4675      	movcs	r5, lr
 80048d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048da:	ebb6 0e02 	subs.w	lr, r6, r2
 80048de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048e2:	bf22      	ittt	cs
 80048e4:	1ab6      	subcs	r6, r6, r2
 80048e6:	4675      	movcs	r5, lr
 80048e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80048f0:	d018      	beq.n	8004924 <__aeabi_ddiv+0x114>
 80048f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800490a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800490e:	d1c0      	bne.n	8004892 <__aeabi_ddiv+0x82>
 8004910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004914:	d10b      	bne.n	800492e <__aeabi_ddiv+0x11e>
 8004916:	ea41 0100 	orr.w	r1, r1, r0
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004922:	e7b6      	b.n	8004892 <__aeabi_ddiv+0x82>
 8004924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004928:	bf04      	itt	eq
 800492a:	4301      	orreq	r1, r0
 800492c:	2000      	moveq	r0, #0
 800492e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004932:	bf88      	it	hi
 8004934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004938:	f63f aeaf 	bhi.w	800469a <__aeabi_dmul+0xde>
 800493c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004940:	bf04      	itt	eq
 8004942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800494a:	f150 0000 	adcs.w	r0, r0, #0
 800494e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800495c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004960:	bfc2      	ittt	gt
 8004962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800496a:	bd70      	popgt	{r4, r5, r6, pc}
 800496c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004970:	f04f 0e00 	mov.w	lr, #0
 8004974:	3c01      	subs	r4, #1
 8004976:	e690      	b.n	800469a <__aeabi_dmul+0xde>
 8004978:	ea45 0e06 	orr.w	lr, r5, r6
 800497c:	e68d      	b.n	800469a <__aeabi_dmul+0xde>
 800497e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004982:	ea94 0f0c 	teq	r4, ip
 8004986:	bf08      	it	eq
 8004988:	ea95 0f0c 	teqeq	r5, ip
 800498c:	f43f af3b 	beq.w	8004806 <__aeabi_dmul+0x24a>
 8004990:	ea94 0f0c 	teq	r4, ip
 8004994:	d10a      	bne.n	80049ac <__aeabi_ddiv+0x19c>
 8004996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800499a:	f47f af34 	bne.w	8004806 <__aeabi_dmul+0x24a>
 800499e:	ea95 0f0c 	teq	r5, ip
 80049a2:	f47f af25 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	e72c      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049ac:	ea95 0f0c 	teq	r5, ip
 80049b0:	d106      	bne.n	80049c0 <__aeabi_ddiv+0x1b0>
 80049b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049b6:	f43f aefd 	beq.w	80047b4 <__aeabi_dmul+0x1f8>
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	e722      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049c4:	bf18      	it	ne
 80049c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ca:	f47f aec5 	bne.w	8004758 <__aeabi_dmul+0x19c>
 80049ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049d2:	f47f af0d 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049da:	f47f aeeb 	bne.w	80047b4 <__aeabi_dmul+0x1f8>
 80049de:	e712      	b.n	8004806 <__aeabi_dmul+0x24a>

080049e0 <__gedf2>:
 80049e0:	f04f 3cff 	mov.w	ip, #4294967295
 80049e4:	e006      	b.n	80049f4 <__cmpdf2+0x4>
 80049e6:	bf00      	nop

080049e8 <__ledf2>:
 80049e8:	f04f 0c01 	mov.w	ip, #1
 80049ec:	e002      	b.n	80049f4 <__cmpdf2+0x4>
 80049ee:	bf00      	nop

080049f0 <__cmpdf2>:
 80049f0:	f04f 0c01 	mov.w	ip, #1
 80049f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a04:	bf18      	it	ne
 8004a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a0a:	d01b      	beq.n	8004a44 <__cmpdf2+0x54>
 8004a0c:	b001      	add	sp, #4
 8004a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a12:	bf0c      	ite	eq
 8004a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a18:	ea91 0f03 	teqne	r1, r3
 8004a1c:	bf02      	ittt	eq
 8004a1e:	ea90 0f02 	teqeq	r0, r2
 8004a22:	2000      	moveq	r0, #0
 8004a24:	4770      	bxeq	lr
 8004a26:	f110 0f00 	cmn.w	r0, #0
 8004a2a:	ea91 0f03 	teq	r1, r3
 8004a2e:	bf58      	it	pl
 8004a30:	4299      	cmppl	r1, r3
 8004a32:	bf08      	it	eq
 8004a34:	4290      	cmpeq	r0, r2
 8004a36:	bf2c      	ite	cs
 8004a38:	17d8      	asrcs	r0, r3, #31
 8004a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a3e:	f040 0001 	orr.w	r0, r0, #1
 8004a42:	4770      	bx	lr
 8004a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d102      	bne.n	8004a54 <__cmpdf2+0x64>
 8004a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a52:	d107      	bne.n	8004a64 <__cmpdf2+0x74>
 8004a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a5c:	d1d6      	bne.n	8004a0c <__cmpdf2+0x1c>
 8004a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a62:	d0d3      	beq.n	8004a0c <__cmpdf2+0x1c>
 8004a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdrcmple>:
 8004a6c:	4684      	mov	ip, r0
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4662      	mov	r2, ip
 8004a72:	468c      	mov	ip, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	4663      	mov	r3, ip
 8004a78:	e000      	b.n	8004a7c <__aeabi_cdcmpeq>
 8004a7a:	bf00      	nop

08004a7c <__aeabi_cdcmpeq>:
 8004a7c:	b501      	push	{r0, lr}
 8004a7e:	f7ff ffb7 	bl	80049f0 <__cmpdf2>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	bf48      	it	mi
 8004a86:	f110 0f00 	cmnmi.w	r0, #0
 8004a8a:	bd01      	pop	{r0, pc}

08004a8c <__aeabi_dcmpeq>:
 8004a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a90:	f7ff fff4 	bl	8004a7c <__aeabi_cdcmpeq>
 8004a94:	bf0c      	ite	eq
 8004a96:	2001      	moveq	r0, #1
 8004a98:	2000      	movne	r0, #0
 8004a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a9e:	bf00      	nop

08004aa0 <__aeabi_dcmplt>:
 8004aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa4:	f7ff ffea 	bl	8004a7c <__aeabi_cdcmpeq>
 8004aa8:	bf34      	ite	cc
 8004aaa:	2001      	movcc	r0, #1
 8004aac:	2000      	movcs	r0, #0
 8004aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab2:	bf00      	nop

08004ab4 <__aeabi_dcmple>:
 8004ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ab8:	f7ff ffe0 	bl	8004a7c <__aeabi_cdcmpeq>
 8004abc:	bf94      	ite	ls
 8004abe:	2001      	movls	r0, #1
 8004ac0:	2000      	movhi	r0, #0
 8004ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_dcmpge>:
 8004ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004acc:	f7ff ffce 	bl	8004a6c <__aeabi_cdrcmple>
 8004ad0:	bf94      	ite	ls
 8004ad2:	2001      	movls	r0, #1
 8004ad4:	2000      	movhi	r0, #0
 8004ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ada:	bf00      	nop

08004adc <__aeabi_dcmpgt>:
 8004adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae0:	f7ff ffc4 	bl	8004a6c <__aeabi_cdrcmple>
 8004ae4:	bf34      	ite	cc
 8004ae6:	2001      	movcc	r0, #1
 8004ae8:	2000      	movcs	r0, #0
 8004aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aee:	bf00      	nop

08004af0 <__aeabi_dcmpun>:
 8004af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x10>
 8004afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004afe:	d10a      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b08:	d102      	bne.n	8004b10 <__aeabi_dcmpun+0x20>
 8004b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b0e:	d102      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	4770      	bx	lr
 8004b16:	f04f 0001 	mov.w	r0, #1
 8004b1a:	4770      	bx	lr

08004b1c <__aeabi_d2f>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b24:	bf24      	itt	cs
 8004b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b2e:	d90d      	bls.n	8004b4c <__aeabi_d2f+0x30>
 8004b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b44:	bf08      	it	eq
 8004b46:	f020 0001 	biceq.w	r0, r0, #1
 8004b4a:	4770      	bx	lr
 8004b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b50:	d121      	bne.n	8004b96 <__aeabi_d2f+0x7a>
 8004b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b56:	bfbc      	itt	lt
 8004b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	4770      	bxlt	lr
 8004b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b66:	f1c2 0218 	rsb	r2, r2, #24
 8004b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b72:	fa20 f002 	lsr.w	r0, r0, r2
 8004b76:	bf18      	it	ne
 8004b78:	f040 0001 	orrne.w	r0, r0, #1
 8004b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b88:	ea40 000c 	orr.w	r0, r0, ip
 8004b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b94:	e7cc      	b.n	8004b30 <__aeabi_d2f+0x14>
 8004b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b9a:	d107      	bne.n	8004bac <__aeabi_d2f+0x90>
 8004b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004ba0:	bf1e      	ittt	ne
 8004ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004baa:	4770      	bxne	lr
 8004bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <__aeabi_uldivmod>:
 8004bbc:	b953      	cbnz	r3, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bbe:	b94a      	cbnz	r2, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	bf08      	it	eq
 8004bc4:	2800      	cmpeq	r0, #0
 8004bc6:	bf1c      	itt	ne
 8004bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bd0:	f000 b970 	b.w	8004eb4 <__aeabi_idiv0>
 8004bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bdc:	f000 f806 	bl	8004bec <__udivmoddi4>
 8004be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr

08004bec <__udivmoddi4>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	9e08      	ldr	r6, [sp, #32]
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	460f      	mov	r7, r1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d14a      	bne.n	8004c92 <__udivmoddi4+0xa6>
 8004bfc:	428a      	cmp	r2, r1
 8004bfe:	4694      	mov	ip, r2
 8004c00:	d965      	bls.n	8004cce <__udivmoddi4+0xe2>
 8004c02:	fab2 f382 	clz	r3, r2
 8004c06:	b143      	cbz	r3, 8004c1a <__udivmoddi4+0x2e>
 8004c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8004c0c:	f1c3 0220 	rsb	r2, r3, #32
 8004c10:	409f      	lsls	r7, r3
 8004c12:	fa20 f202 	lsr.w	r2, r0, r2
 8004c16:	4317      	orrs	r7, r2
 8004c18:	409c      	lsls	r4, r3
 8004c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004c1e:	fa1f f58c 	uxth.w	r5, ip
 8004c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8004c26:	0c22      	lsrs	r2, r4, #16
 8004c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8004c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c30:	fb01 f005 	mul.w	r0, r1, r5
 8004c34:	4290      	cmp	r0, r2
 8004c36:	d90a      	bls.n	8004c4e <__udivmoddi4+0x62>
 8004c38:	eb1c 0202 	adds.w	r2, ip, r2
 8004c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8004c40:	f080 811c 	bcs.w	8004e7c <__udivmoddi4+0x290>
 8004c44:	4290      	cmp	r0, r2
 8004c46:	f240 8119 	bls.w	8004e7c <__udivmoddi4+0x290>
 8004c4a:	3902      	subs	r1, #2
 8004c4c:	4462      	add	r2, ip
 8004c4e:	1a12      	subs	r2, r2, r0
 8004c50:	b2a4      	uxth	r4, r4
 8004c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8004c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8004c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c5e:	fb00 f505 	mul.w	r5, r0, r5
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	d90a      	bls.n	8004c7c <__udivmoddi4+0x90>
 8004c66:	eb1c 0404 	adds.w	r4, ip, r4
 8004c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004c6e:	f080 8107 	bcs.w	8004e80 <__udivmoddi4+0x294>
 8004c72:	42a5      	cmp	r5, r4
 8004c74:	f240 8104 	bls.w	8004e80 <__udivmoddi4+0x294>
 8004c78:	4464      	add	r4, ip
 8004c7a:	3802      	subs	r0, #2
 8004c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004c80:	1b64      	subs	r4, r4, r5
 8004c82:	2100      	movs	r1, #0
 8004c84:	b11e      	cbz	r6, 8004c8e <__udivmoddi4+0xa2>
 8004c86:	40dc      	lsrs	r4, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	428b      	cmp	r3, r1
 8004c94:	d908      	bls.n	8004ca8 <__udivmoddi4+0xbc>
 8004c96:	2e00      	cmp	r6, #0
 8004c98:	f000 80ed 	beq.w	8004e76 <__udivmoddi4+0x28a>
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8004ca2:	4608      	mov	r0, r1
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	fab3 f183 	clz	r1, r3
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d149      	bne.n	8004d44 <__udivmoddi4+0x158>
 8004cb0:	42ab      	cmp	r3, r5
 8004cb2:	d302      	bcc.n	8004cba <__udivmoddi4+0xce>
 8004cb4:	4282      	cmp	r2, r0
 8004cb6:	f200 80f8 	bhi.w	8004eaa <__udivmoddi4+0x2be>
 8004cba:	1a84      	subs	r4, r0, r2
 8004cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8004cc0:	2001      	movs	r0, #1
 8004cc2:	4617      	mov	r7, r2
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	d0e2      	beq.n	8004c8e <__udivmoddi4+0xa2>
 8004cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8004ccc:	e7df      	b.n	8004c8e <__udivmoddi4+0xa2>
 8004cce:	b902      	cbnz	r2, 8004cd2 <__udivmoddi4+0xe6>
 8004cd0:	deff      	udf	#255	; 0xff
 8004cd2:	fab2 f382 	clz	r3, r2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 8090 	bne.w	8004dfc <__udivmoddi4+0x210>
 8004cdc:	1a8a      	subs	r2, r1, r2
 8004cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004ce2:	fa1f fe8c 	uxth.w	lr, ip
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8004cec:	fb07 2015 	mls	r0, r7, r5, r2
 8004cf0:	0c22      	lsrs	r2, r4, #16
 8004cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004cf6:	fb0e f005 	mul.w	r0, lr, r5
 8004cfa:	4290      	cmp	r0, r2
 8004cfc:	d908      	bls.n	8004d10 <__udivmoddi4+0x124>
 8004cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8004d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8004d06:	d202      	bcs.n	8004d0e <__udivmoddi4+0x122>
 8004d08:	4290      	cmp	r0, r2
 8004d0a:	f200 80cb 	bhi.w	8004ea4 <__udivmoddi4+0x2b8>
 8004d0e:	4645      	mov	r5, r8
 8004d10:	1a12      	subs	r2, r2, r0
 8004d12:	b2a4      	uxth	r4, r4
 8004d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8004d18:	fb07 2210 	mls	r2, r7, r0, r2
 8004d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004d20:	fb0e fe00 	mul.w	lr, lr, r0
 8004d24:	45a6      	cmp	lr, r4
 8004d26:	d908      	bls.n	8004d3a <__udivmoddi4+0x14e>
 8004d28:	eb1c 0404 	adds.w	r4, ip, r4
 8004d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8004d30:	d202      	bcs.n	8004d38 <__udivmoddi4+0x14c>
 8004d32:	45a6      	cmp	lr, r4
 8004d34:	f200 80bb 	bhi.w	8004eae <__udivmoddi4+0x2c2>
 8004d38:	4610      	mov	r0, r2
 8004d3a:	eba4 040e 	sub.w	r4, r4, lr
 8004d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004d42:	e79f      	b.n	8004c84 <__udivmoddi4+0x98>
 8004d44:	f1c1 0720 	rsb	r7, r1, #32
 8004d48:	408b      	lsls	r3, r1
 8004d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d52:	fa05 f401 	lsl.w	r4, r5, r1
 8004d56:	fa20 f307 	lsr.w	r3, r0, r7
 8004d5a:	40fd      	lsrs	r5, r7
 8004d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d60:	4323      	orrs	r3, r4
 8004d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8004d66:	fa1f fe8c 	uxth.w	lr, ip
 8004d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8004d6e:	0c1c      	lsrs	r4, r3, #16
 8004d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004d74:	fb08 f50e 	mul.w	r5, r8, lr
 8004d78:	42a5      	cmp	r5, r4
 8004d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8004d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8004d82:	d90b      	bls.n	8004d9c <__udivmoddi4+0x1b0>
 8004d84:	eb1c 0404 	adds.w	r4, ip, r4
 8004d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d8c:	f080 8088 	bcs.w	8004ea0 <__udivmoddi4+0x2b4>
 8004d90:	42a5      	cmp	r5, r4
 8004d92:	f240 8085 	bls.w	8004ea0 <__udivmoddi4+0x2b4>
 8004d96:	f1a8 0802 	sub.w	r8, r8, #2
 8004d9a:	4464      	add	r4, ip
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	b29d      	uxth	r5, r3
 8004da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8004da4:	fb09 4413 	mls	r4, r9, r3, r4
 8004da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8004db0:	45a6      	cmp	lr, r4
 8004db2:	d908      	bls.n	8004dc6 <__udivmoddi4+0x1da>
 8004db4:	eb1c 0404 	adds.w	r4, ip, r4
 8004db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8004dbc:	d26c      	bcs.n	8004e98 <__udivmoddi4+0x2ac>
 8004dbe:	45a6      	cmp	lr, r4
 8004dc0:	d96a      	bls.n	8004e98 <__udivmoddi4+0x2ac>
 8004dc2:	3b02      	subs	r3, #2
 8004dc4:	4464      	add	r4, ip
 8004dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dca:	fba3 9502 	umull	r9, r5, r3, r2
 8004dce:	eba4 040e 	sub.w	r4, r4, lr
 8004dd2:	42ac      	cmp	r4, r5
 8004dd4:	46c8      	mov	r8, r9
 8004dd6:	46ae      	mov	lr, r5
 8004dd8:	d356      	bcc.n	8004e88 <__udivmoddi4+0x29c>
 8004dda:	d053      	beq.n	8004e84 <__udivmoddi4+0x298>
 8004ddc:	b156      	cbz	r6, 8004df4 <__udivmoddi4+0x208>
 8004dde:	ebb0 0208 	subs.w	r2, r0, r8
 8004de2:	eb64 040e 	sbc.w	r4, r4, lr
 8004de6:	fa04 f707 	lsl.w	r7, r4, r7
 8004dea:	40ca      	lsrs	r2, r1
 8004dec:	40cc      	lsrs	r4, r1
 8004dee:	4317      	orrs	r7, r2
 8004df0:	e9c6 7400 	strd	r7, r4, [r6]
 8004df4:	4618      	mov	r0, r3
 8004df6:	2100      	movs	r1, #0
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	f1c3 0120 	rsb	r1, r3, #32
 8004e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8004e04:	fa20 f201 	lsr.w	r2, r0, r1
 8004e08:	fa25 f101 	lsr.w	r1, r5, r1
 8004e0c:	409d      	lsls	r5, r3
 8004e0e:	432a      	orrs	r2, r5
 8004e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e14:	fa1f fe8c 	uxth.w	lr, ip
 8004e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8004e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8004e20:	0c11      	lsrs	r1, r2, #16
 8004e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e26:	fb00 f50e 	mul.w	r5, r0, lr
 8004e2a:	428d      	cmp	r5, r1
 8004e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8004e30:	d908      	bls.n	8004e44 <__udivmoddi4+0x258>
 8004e32:	eb1c 0101 	adds.w	r1, ip, r1
 8004e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e3a:	d22f      	bcs.n	8004e9c <__udivmoddi4+0x2b0>
 8004e3c:	428d      	cmp	r5, r1
 8004e3e:	d92d      	bls.n	8004e9c <__udivmoddi4+0x2b0>
 8004e40:	3802      	subs	r0, #2
 8004e42:	4461      	add	r1, ip
 8004e44:	1b49      	subs	r1, r1, r5
 8004e46:	b292      	uxth	r2, r2
 8004e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8004e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8004e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e54:	fb05 f10e 	mul.w	r1, r5, lr
 8004e58:	4291      	cmp	r1, r2
 8004e5a:	d908      	bls.n	8004e6e <__udivmoddi4+0x282>
 8004e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8004e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8004e64:	d216      	bcs.n	8004e94 <__udivmoddi4+0x2a8>
 8004e66:	4291      	cmp	r1, r2
 8004e68:	d914      	bls.n	8004e94 <__udivmoddi4+0x2a8>
 8004e6a:	3d02      	subs	r5, #2
 8004e6c:	4462      	add	r2, ip
 8004e6e:	1a52      	subs	r2, r2, r1
 8004e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004e74:	e738      	b.n	8004ce8 <__udivmoddi4+0xfc>
 8004e76:	4631      	mov	r1, r6
 8004e78:	4630      	mov	r0, r6
 8004e7a:	e708      	b.n	8004c8e <__udivmoddi4+0xa2>
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	e6e6      	b.n	8004c4e <__udivmoddi4+0x62>
 8004e80:	4610      	mov	r0, r2
 8004e82:	e6fb      	b.n	8004c7c <__udivmoddi4+0x90>
 8004e84:	4548      	cmp	r0, r9
 8004e86:	d2a9      	bcs.n	8004ddc <__udivmoddi4+0x1f0>
 8004e88:	ebb9 0802 	subs.w	r8, r9, r2
 8004e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004e90:	3b01      	subs	r3, #1
 8004e92:	e7a3      	b.n	8004ddc <__udivmoddi4+0x1f0>
 8004e94:	4645      	mov	r5, r8
 8004e96:	e7ea      	b.n	8004e6e <__udivmoddi4+0x282>
 8004e98:	462b      	mov	r3, r5
 8004e9a:	e794      	b.n	8004dc6 <__udivmoddi4+0x1da>
 8004e9c:	4640      	mov	r0, r8
 8004e9e:	e7d1      	b.n	8004e44 <__udivmoddi4+0x258>
 8004ea0:	46d0      	mov	r8, sl
 8004ea2:	e77b      	b.n	8004d9c <__udivmoddi4+0x1b0>
 8004ea4:	3d02      	subs	r5, #2
 8004ea6:	4462      	add	r2, ip
 8004ea8:	e732      	b.n	8004d10 <__udivmoddi4+0x124>
 8004eaa:	4608      	mov	r0, r1
 8004eac:	e70a      	b.n	8004cc4 <__udivmoddi4+0xd8>
 8004eae:	4464      	add	r4, ip
 8004eb0:	3802      	subs	r0, #2
 8004eb2:	e742      	b.n	8004d3a <__udivmoddi4+0x14e>

08004eb4 <__aeabi_idiv0>:
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop

08004eb8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f012 ff6d 	bl	8017da4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004eca:	4b3a      	ldr	r3, [pc, #232]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ecc:	4a3a      	ldr	r2, [pc, #232]	; (8004fb8 <MX_ADC2_Init+0x100>)
 8004ece:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ed0:	4b38      	ldr	r3, [pc, #224]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ed2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ed6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ed8:	4b36      	ldr	r3, [pc, #216]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ede:	4b35      	ldr	r3, [pc, #212]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004ee4:	4b33      	ldr	r3, [pc, #204]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004eea:	4b32      	ldr	r3, [pc, #200]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ef0:	4b30      	ldr	r3, [pc, #192]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004ef6:	4b2f      	ldr	r3, [pc, #188]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004efc:	4b2d      	ldr	r3, [pc, #180]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004efe:	2201      	movs	r2, #1
 8004f00:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004f02:	4b2c      	ldr	r3, [pc, #176]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f04:	2203      	movs	r2, #3
 8004f06:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f10:	4b28      	ldr	r3, [pc, #160]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f24:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f2c:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f34:	481f      	ldr	r0, [pc, #124]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f36:	f003 fd05 	bl	8008944 <HAL_ADC_Init>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f40:	f002 fad8 	bl	80074f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f44:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <MX_ADC2_Init+0x104>)
 8004f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f48:	2306      	movs	r3, #6
 8004f4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f50:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <MX_ADC2_Init+0x108>)
 8004f52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f54:	2304      	movs	r3, #4
 8004f56:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f5c:	463b      	mov	r3, r7
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4814      	ldr	r0, [pc, #80]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f62:	f003 ffa3 	bl	8008eac <HAL_ADC_ConfigChannel>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f6c:	f002 fac2 	bl	80074f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f70:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <MX_ADC2_Init+0x10c>)
 8004f72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f74:	230c      	movs	r3, #12
 8004f76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f78:	463b      	mov	r3, r7
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	480d      	ldr	r0, [pc, #52]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f7e:	f003 ff95 	bl	8008eac <HAL_ADC_ConfigChannel>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f88:	f002 fab4 	bl	80074f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <MX_ADC2_Init+0x110>)
 8004f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f90:	2312      	movs	r3, #18
 8004f92:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f94:	237f      	movs	r3, #127	; 0x7f
 8004f96:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f98:	463b      	mov	r3, r7
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4805      	ldr	r0, [pc, #20]	; (8004fb4 <MX_ADC2_Init+0xfc>)
 8004f9e:	f003 ff85 	bl	8008eac <HAL_ADC_ConfigChannel>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004fa8:	f002 faa4 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004fac:	bf00      	nop
 8004fae:	3720      	adds	r7, #32
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	2000020c 	.word	0x2000020c
 8004fb8:	50000100 	.word	0x50000100
 8004fbc:	04300002 	.word	0x04300002
 8004fc0:	407f0000 	.word	0x407f0000
 8004fc4:	19200040 	.word	0x19200040
 8004fc8:	2a000400 	.word	0x2a000400

08004fcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b0a0      	sub	sp, #128	; 0x80
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fe4:	f107 0318 	add.w	r3, r7, #24
 8004fe8:	2254      	movs	r2, #84	; 0x54
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f012 fed9 	bl	8017da4 <memset>
  if(adcHandle->Instance==ADC2)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4c      	ldr	r2, [pc, #304]	; (8005128 <HAL_ADC_MspInit+0x15c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	f040 8090 	bne.w	800511e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005002:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005004:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005008:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800500a:	f107 0318 	add.w	r3, r7, #24
 800500e:	4618      	mov	r0, r3
 8005010:	f008 fba2 	bl	800d758 <HAL_RCCEx_PeriphCLKConfig>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800501a:	f002 fa6b 	bl	80074f4 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800501e:	4b43      	ldr	r3, [pc, #268]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005022:	4a42      	ldr	r2, [pc, #264]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800502a:	4b40      	ldr	r3, [pc, #256]	; (800512c <HAL_ADC_MspInit+0x160>)
 800502c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005036:	4b3d      	ldr	r3, [pc, #244]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	4a3c      	ldr	r2, [pc, #240]	; (800512c <HAL_ADC_MspInit+0x160>)
 800503c:	f043 0320 	orr.w	r3, r3, #32
 8005040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005042:	4b3a      	ldr	r3, [pc, #232]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005046:	f003 0320 	and.w	r3, r3, #32
 800504a:	613b      	str	r3, [r7, #16]
 800504c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800504e:	4b37      	ldr	r3, [pc, #220]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005052:	4a36      	ldr	r2, [pc, #216]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005054:	f043 0304 	orr.w	r3, r3, #4
 8005058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_ADC_MspInit+0x160>)
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005066:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	4a30      	ldr	r2, [pc, #192]	; (800512c <HAL_ADC_MspInit+0x160>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005072:	4b2e      	ldr	r3, [pc, #184]	; (800512c <HAL_ADC_MspInit+0x160>)
 8005074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800507e:	2302      	movs	r3, #2
 8005080:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005082:	2303      	movs	r3, #3
 8005084:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005086:	2300      	movs	r3, #0
 8005088:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800508a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800508e:	4619      	mov	r1, r3
 8005090:	4827      	ldr	r0, [pc, #156]	; (8005130 <HAL_ADC_MspInit+0x164>)
 8005092:	f005 f853 	bl	800a13c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005096:	2303      	movs	r3, #3
 8005098:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800509a:	2303      	movs	r3, #3
 800509c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050a6:	4619      	mov	r1, r3
 80050a8:	4822      	ldr	r0, [pc, #136]	; (8005134 <HAL_ADC_MspInit+0x168>)
 80050aa:	f005 f847 	bl	800a13c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050ae:	2303      	movs	r3, #3
 80050b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050b2:	2303      	movs	r3, #3
 80050b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050be:	4619      	mov	r1, r3
 80050c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050c4:	f005 f83a 	bl	800a13c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050c8:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050ca:	4a1c      	ldr	r2, [pc, #112]	; (800513c <HAL_ADC_MspInit+0x170>)
 80050cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050d0:	2224      	movs	r2, #36	; 0x24
 80050d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050d4:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050da:	4b17      	ldr	r3, [pc, #92]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050dc:	2200      	movs	r2, #0
 80050de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050e0:	4b15      	ldr	r3, [pc, #84]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050ec:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050f8:	2220      	movs	r2, #32
 80050fa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050fc:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 80050fe:	2200      	movs	r2, #0
 8005100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005102:	480d      	ldr	r0, [pc, #52]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 8005104:	f004 fce8 	bl	8009ad8 <HAL_DMA_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 800510e:	f002 f9f1 	bl	80074f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
 8005118:	4a07      	ldr	r2, [pc, #28]	; (8005138 <HAL_ADC_MspInit+0x16c>)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800511e:	bf00      	nop
 8005120:	3780      	adds	r7, #128	; 0x80
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	50000100 	.word	0x50000100
 800512c:	40021000 	.word	0x40021000
 8005130:	48001400 	.word	0x48001400
 8005134:	48000800 	.word	0x48000800
 8005138:	20000278 	.word	0x20000278
 800513c:	40020008 	.word	0x40020008

08005140 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	3304      	adds	r3, #4
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff f9c9 	bl	80044e8 <__aeabi_i2d>
 8005156:	a30f      	add	r3, pc, #60	; (adr r3, 8005194 <Battery_ReadBatteryVoltage+0x54>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7ff fa2e 	bl	80045bc <__aeabi_dmul>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4610      	mov	r0, r2
 8005166:	4619      	mov	r1, r3
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	4b08      	ldr	r3, [pc, #32]	; (8005190 <Battery_ReadBatteryVoltage+0x50>)
 800516e:	f7ff fb4f 	bl	8004810 <__aeabi_ddiv>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4610      	mov	r0, r2
 8005178:	4619      	mov	r1, r3
 800517a:	f7ff fccf 	bl	8004b1c <__aeabi_d2f>
 800517e:	4602      	mov	r2, r0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	601a      	str	r2, [r3, #0]
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	f3af 8000 	nop.w
 8005190:	40b00000 	.word	0x40b00000
 8005194:	66666666 	.word	0x66666666
 8005198:	400a6666 	.word	0x400a6666
 800519c:	00000000 	.word	0x00000000

080051a0 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	3302      	adds	r3, #2
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7ff f999 	bl	80044e8 <__aeabi_i2d>
 80051b6:	a319      	add	r3, pc, #100	; (adr r3, 800521c <Battery_ReadCurrent3V3+0x7c>)
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	f7ff f9fe 	bl	80045bc <__aeabi_dmul>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	4b12      	ldr	r3, [pc, #72]	; (8005218 <Battery_ReadCurrent3V3+0x78>)
 80051ce:	f7ff fb1f 	bl	8004810 <__aeabi_ddiv>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4610      	mov	r0, r2
 80051d8:	4619      	mov	r1, r3
 80051da:	f7ff fc9f 	bl	8004b1c <__aeabi_d2f>
 80051de:	4603      	mov	r3, r0
 80051e0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f7ff f992 	bl	800450c <__aeabi_f2d>
 80051e8:	a309      	add	r3, pc, #36	; (adr r3, 8005210 <Battery_ReadCurrent3V3+0x70>)
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f7ff fb0f 	bl	8004810 <__aeabi_ddiv>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7ff fc8f 	bl	8004b1c <__aeabi_d2f>
 80051fe:	4602      	mov	r2, r0
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	605a      	str	r2, [r3, #4]
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	f3af 8000 	nop.w
 8005210:	d2f1a9fc 	.word	0xd2f1a9fc
 8005214:	3f60624d 	.word	0x3f60624d
 8005218:	40b00000 	.word	0x40b00000
 800521c:	66666666 	.word	0x66666666
 8005220:	400a6666 	.word	0x400a6666
 8005224:	00000000 	.word	0x00000000

08005228 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	881b      	ldrh	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff f956 	bl	80044e8 <__aeabi_i2d>
 800523c:	a319      	add	r3, pc, #100	; (adr r3, 80052a4 <Battery_ReadCurrent5V+0x7c>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	f7ff f9bb 	bl	80045bc <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4610      	mov	r0, r2
 800524c:	4619      	mov	r1, r3
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	4b13      	ldr	r3, [pc, #76]	; (80052a0 <Battery_ReadCurrent5V+0x78>)
 8005254:	f7ff fadc 	bl	8004810 <__aeabi_ddiv>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	f7ff fc5c 	bl	8004b1c <__aeabi_d2f>
 8005264:	4603      	mov	r3, r0
 8005266:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff f94f 	bl	800450c <__aeabi_f2d>
 800526e:	a30a      	add	r3, pc, #40	; (adr r3, 8005298 <Battery_ReadCurrent5V+0x70>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7ff facc 	bl	8004810 <__aeabi_ddiv>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	f7ff fc4c 	bl	8004b1c <__aeabi_d2f>
 8005284:	4602      	mov	r2, r0
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]
}
 800528a:	bf00      	nop
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	f3af 8000 	nop.w
 8005298:	d2f1a9fc 	.word	0xd2f1a9fc
 800529c:	3f60624d 	.word	0x3f60624d
 80052a0:	40b00000 	.word	0x40b00000
 80052a4:	66666666 	.word	0x66666666
 80052a8:	400a6666 	.word	0x400a6666
 80052ac:	00000000 	.word	0x00000000

080052b0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052c8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff f91d 	bl	800450c <__aeabi_f2d>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	a10f      	add	r1, pc, #60	; (adr r1, 8005314 <Battery_RemaningTime+0x64>)
 80052d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052dc:	f7ff fa98 	bl	8004810 <__aeabi_ddiv>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	f7ff fc18 	bl	8004b1c <__aeabi_d2f>
 80052ec:	4603      	mov	r3, r0
 80052ee:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80052f4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005310 <Battery_RemaningTime+0x60>
 80052f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005300:	ee17 2a90 	vmov	r2, s15
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	60da      	str	r2, [r3, #12]
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	4a5bba00 	.word	0x4a5bba00
 8005314:	9999999a 	.word	0x9999999a
 8005318:	40019999 	.word	0x40019999

0800531c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800531c:	b5b0      	push	{r4, r5, r7, lr}
 800531e:	b0b8      	sub	sp, #224	; 0xe0
 8005320:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8005322:	4b6b      	ldr	r3, [pc, #428]	; (80054d0 <MX_FREERTOS_Init+0x1b4>)
 8005324:	9306      	str	r3, [sp, #24]
 8005326:	2302      	movs	r3, #2
 8005328:	9305      	str	r3, [sp, #20]
 800532a:	2301      	movs	r3, #1
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	2304      	movs	r3, #4
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	4b68      	ldr	r3, [pc, #416]	; (80054d4 <MX_FREERTOS_Init+0x1b8>)
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	2380      	movs	r3, #128	; 0x80
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	4b66      	ldr	r3, [pc, #408]	; (80054d4 <MX_FREERTOS_Init+0x1b8>)
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	2340      	movs	r3, #64	; 0x40
 8005340:	4a64      	ldr	r2, [pc, #400]	; (80054d4 <MX_FREERTOS_Init+0x1b8>)
 8005342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005346:	4864      	ldr	r0, [pc, #400]	; (80054d8 <MX_FREERTOS_Init+0x1bc>)
 8005348:	f002 fb4a 	bl	80079e0 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800534c:	4963      	ldr	r1, [pc, #396]	; (80054dc <MX_FREERTOS_Init+0x1c0>)
 800534e:	4864      	ldr	r0, [pc, #400]	; (80054e0 <MX_FREERTOS_Init+0x1c4>)
 8005350:	f000 fe2d 	bl	8005fae <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800535a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800535e:	4618      	mov	r0, r3
 8005360:	f00f ff5b 	bl	801521a <osMutexCreate>
 8005364:	4603      	mov	r3, r0
 8005366:	4a5f      	ldr	r2, [pc, #380]	; (80054e4 <MX_FREERTOS_Init+0x1c8>)
 8005368:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800536a:	2300      	movs	r3, #0
 800536c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005370:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f00f ff5b 	bl	8015232 <osSemaphoreCreate>
 800537c:	4603      	mov	r3, r0
 800537e:	4a5a      	ldr	r2, [pc, #360]	; (80054e8 <MX_FREERTOS_Init+0x1cc>)
 8005380:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8005382:	2300      	movs	r3, #0
 8005384:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005388:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800538c:	2101      	movs	r1, #1
 800538e:	4618      	mov	r0, r3
 8005390:	f00f ff4f 	bl	8015232 <osSemaphoreCreate>
 8005394:	4603      	mov	r3, r0
 8005396:	4a55      	ldr	r2, [pc, #340]	; (80054ec <MX_FREERTOS_Init+0x1d0>)
 8005398:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800539a:	4b55      	ldr	r3, [pc, #340]	; (80054f0 <MX_FREERTOS_Init+0x1d4>)
 800539c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80053a0:	461d      	mov	r5, r3
 80053a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80053aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053ae:	2100      	movs	r1, #0
 80053b0:	4618      	mov	r0, r3
 80053b2:	f00f fef7 	bl	80151a4 <osThreadCreate>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a4e      	ldr	r2, [pc, #312]	; (80054f4 <MX_FREERTOS_Init+0x1d8>)
 80053ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053bc:	4b4e      	ldr	r3, [pc, #312]	; (80054f8 <MX_FREERTOS_Init+0x1dc>)
 80053be:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80053c2:	461d      	mov	r5, r3
 80053c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053d0:	2100      	movs	r1, #0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f00f fee6 	bl	80151a4 <osThreadCreate>
 80053d8:	4603      	mov	r3, r0
 80053da:	4a48      	ldr	r2, [pc, #288]	; (80054fc <MX_FREERTOS_Init+0x1e0>)
 80053dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053de:	4b48      	ldr	r3, [pc, #288]	; (8005500 <MX_FREERTOS_Init+0x1e4>)
 80053e0:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80053e4:	461d      	mov	r5, r3
 80053e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053f2:	2100      	movs	r1, #0
 80053f4:	4618      	mov	r0, r3
 80053f6:	f00f fed5 	bl	80151a4 <osThreadCreate>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4a41      	ldr	r2, [pc, #260]	; (8005504 <MX_FREERTOS_Init+0x1e8>)
 80053fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 8005400:	4b41      	ldr	r3, [pc, #260]	; (8005508 <MX_FREERTOS_Init+0x1ec>)
 8005402:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8005406:	461d      	mov	r5, r3
 8005408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800540a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005410:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f00f fec4 	bl	80151a4 <osThreadCreate>
 800541c:	4603      	mov	r3, r0
 800541e:	4a3b      	ldr	r2, [pc, #236]	; (800550c <MX_FREERTOS_Init+0x1f0>)
 8005420:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8005422:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <MX_FREERTOS_Init+0x1f4>)
 8005424:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005428:	461d      	mov	r5, r3
 800542a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800542c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800542e:	682b      	ldr	r3, [r5, #0]
 8005430:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8005432:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005436:	2100      	movs	r1, #0
 8005438:	4618      	mov	r0, r3
 800543a:	f00f feb3 	bl	80151a4 <osThreadCreate>
 800543e:	4603      	mov	r3, r0
 8005440:	4a34      	ldr	r2, [pc, #208]	; (8005514 <MX_FREERTOS_Init+0x1f8>)
 8005442:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8005444:	4b34      	ldr	r3, [pc, #208]	; (8005518 <MX_FREERTOS_Init+0x1fc>)
 8005446:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800544a:	461d      	mov	r5, r3
 800544c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800544e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8005454:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f00f fea2 	bl	80151a4 <osThreadCreate>
 8005460:	4603      	mov	r3, r0
 8005462:	4a2e      	ldr	r2, [pc, #184]	; (800551c <MX_FREERTOS_Init+0x200>)
 8005464:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8005466:	4b2e      	ldr	r3, [pc, #184]	; (8005520 <MX_FREERTOS_Init+0x204>)
 8005468:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800546c:	461d      	mov	r5, r3
 800546e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005472:	682b      	ldr	r3, [r5, #0]
 8005474:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8005476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f00f fe91 	bl	80151a4 <osThreadCreate>
 8005482:	4603      	mov	r3, r0
 8005484:	4a27      	ldr	r2, [pc, #156]	; (8005524 <MX_FREERTOS_Init+0x208>)
 8005486:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <MX_FREERTOS_Init+0x20c>)
 800548a:	f107 0414 	add.w	r4, r7, #20
 800548e:	461d      	mov	r5, r3
 8005490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005494:	682b      	ldr	r3, [r5, #0]
 8005496:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8005498:	f107 0314 	add.w	r3, r7, #20
 800549c:	2100      	movs	r1, #0
 800549e:	4618      	mov	r0, r3
 80054a0:	f00f fe80 	bl	80151a4 <osThreadCreate>
 80054a4:	4603      	mov	r3, r0
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <MX_FREERTOS_Init+0x210>)
 80054a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 80054aa:	4b21      	ldr	r3, [pc, #132]	; (8005530 <MX_FREERTOS_Init+0x214>)
 80054ac:	463c      	mov	r4, r7
 80054ae:	461d      	mov	r5, r3
 80054b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 80054b8:	463b      	mov	r3, r7
 80054ba:	2100      	movs	r1, #0
 80054bc:	4618      	mov	r0, r3
 80054be:	f00f fe71 	bl	80151a4 <osThreadCreate>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <MX_FREERTOS_Init+0x218>)
 80054c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80054c8:	bf00      	nop
 80054ca:	37c0      	adds	r7, #192	; 0xc0
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bdb0      	pop	{r4, r5, r7, pc}
 80054d0:	20000a28 	.word	0x20000a28
 80054d4:	48000400 	.word	0x48000400
 80054d8:	2000047c 	.word	0x2000047c
 80054dc:	200003c0 	.word	0x200003c0
 80054e0:	20000374 	.word	0x20000374
 80054e4:	20000368 	.word	0x20000368
 80054e8:	2000036c 	.word	0x2000036c
 80054ec:	20000370 	.word	0x20000370
 80054f0:	08018e18 	.word	0x08018e18
 80054f4:	20000344 	.word	0x20000344
 80054f8:	08018e38 	.word	0x08018e38
 80054fc:	20000348 	.word	0x20000348
 8005500:	08018e58 	.word	0x08018e58
 8005504:	2000034c 	.word	0x2000034c
 8005508:	08018e74 	.word	0x08018e74
 800550c:	20000350 	.word	0x20000350
 8005510:	08018e98 	.word	0x08018e98
 8005514:	20000354 	.word	0x20000354
 8005518:	08018eb0 	.word	0x08018eb0
 800551c:	20000358 	.word	0x20000358
 8005520:	08018ed0 	.word	0x08018ed0
 8005524:	2000035c 	.word	0x2000035c
 8005528:	08018ef4 	.word	0x08018ef4
 800552c:	20000360 	.word	0x20000360
 8005530:	08018f14 	.word	0x08018f14
 8005534:	20000364 	.word	0x20000364

08005538 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005540:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005548:	f004 ff92 	bl	800a470 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 800554c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005550:	f010 fcda 	bl	8015f08 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005554:	e7f4      	b.n	8005540 <StartLedTask+0x8>
	...

08005558 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005560:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80055a8 <StartRoll_PID+0x50>
 8005564:	eddf 0a11 	vldr	s1, [pc, #68]	; 80055ac <StartRoll_PID+0x54>
 8005568:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80055b0 <StartRoll_PID+0x58>
 800556c:	4811      	ldr	r0, [pc, #68]	; (80055b4 <StartRoll_PID+0x5c>)
 800556e:	f002 f811 	bl	8007594 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <StartRoll_PID+0x60>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2119      	movs	r1, #25
 8005578:	4618      	mov	r0, r3
 800557a:	f010 f983 	bl	8015884 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 800557e:	490f      	ldr	r1, [pc, #60]	; (80055bc <StartRoll_PID+0x64>)
 8005580:	480f      	ldr	r0, [pc, #60]	; (80055c0 <StartRoll_PID+0x68>)
 8005582:	f000 fe8f 	bl	80062a4 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <StartRoll_PID+0x60>)
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	f010 f804 	bl	801559c <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <StartRoll_PID+0x6c>)
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <StartRoll_PID+0x64>)
 8005598:	490b      	ldr	r1, [pc, #44]	; (80055c8 <StartRoll_PID+0x70>)
 800559a:	4806      	ldr	r0, [pc, #24]	; (80055b4 <StartRoll_PID+0x5c>)
 800559c:	f002 f858 	bl	8007650 <Pid_CompensateRoll>
		vTaskDelay(150);
 80055a0:	2096      	movs	r0, #150	; 0x96
 80055a2:	f010 fcb1 	bl	8015f08 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055a6:	e7e4      	b.n	8005572 <StartRoll_PID+0x1a>
 80055a8:	bdb15662 	.word	0xbdb15662
 80055ac:	bce59984 	.word	0xbce59984
 80055b0:	be07bf5a 	.word	0xbe07bf5a
 80055b4:	20000320 	.word	0x20000320
 80055b8:	20000368 	.word	0x20000368
 80055bc:	200003c0 	.word	0x200003c0
 80055c0:	20000374 	.word	0x20000374
 80055c4:	2000047c 	.word	0x2000047c
 80055c8:	20000468 	.word	0x20000468

080055cc <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80055d4:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055d8:	eddf 0a10 	vldr	s1, [pc, #64]	; 800561c <StartPitch_PID+0x50>
 80055dc:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005620 <StartPitch_PID+0x54>
 80055e0:	4810      	ldr	r0, [pc, #64]	; (8005624 <StartPitch_PID+0x58>)
 80055e2:	f001 ffd7 	bl	8007594 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055e6:	4b10      	ldr	r3, [pc, #64]	; (8005628 <StartPitch_PID+0x5c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2119      	movs	r1, #25
 80055ec:	4618      	mov	r0, r3
 80055ee:	f010 f949 	bl	8015884 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055f2:	490e      	ldr	r1, [pc, #56]	; (800562c <StartPitch_PID+0x60>)
 80055f4:	480e      	ldr	r0, [pc, #56]	; (8005630 <StartPitch_PID+0x64>)
 80055f6:	f000 fea7 	bl	8006348 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <StartPitch_PID+0x5c>)
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	2300      	movs	r3, #0
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	f00f ffca 	bl	801559c <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <StartPitch_PID+0x68>)
 800560a:	4a08      	ldr	r2, [pc, #32]	; (800562c <StartPitch_PID+0x60>)
 800560c:	490a      	ldr	r1, [pc, #40]	; (8005638 <StartPitch_PID+0x6c>)
 800560e:	4805      	ldr	r0, [pc, #20]	; (8005624 <StartPitch_PID+0x58>)
 8005610:	f002 f8e4 	bl	80077dc <Pid_CompensatePitch>
		vTaskDelay(150);
 8005614:	2096      	movs	r0, #150	; 0x96
 8005616:	f010 fc77 	bl	8015f08 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800561a:	e7e4      	b.n	80055e6 <StartPitch_PID+0x1a>
 800561c:	3ccccccd 	.word	0x3ccccccd
 8005620:	42c80000 	.word	0x42c80000
 8005624:	200002d8 	.word	0x200002d8
 8005628:	20000368 	.word	0x20000368
 800562c:	200003c0 	.word	0x200003c0
 8005630:	20000374 	.word	0x20000374
 8005634:	2000047c 	.word	0x2000047c
 8005638:	20000468 	.word	0x20000468

0800563c <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 8005644:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005648:	eddf 0a10 	vldr	s1, [pc, #64]	; 800568c <StartYaw_PID+0x50>
 800564c:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005690 <StartYaw_PID+0x54>
 8005650:	4810      	ldr	r0, [pc, #64]	; (8005694 <StartYaw_PID+0x58>)
 8005652:	f001 ff9f 	bl	8007594 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005656:	4b10      	ldr	r3, [pc, #64]	; (8005698 <StartYaw_PID+0x5c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2119      	movs	r1, #25
 800565c:	4618      	mov	r0, r3
 800565e:	f010 f911 	bl	8015884 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 8005662:	490e      	ldr	r1, [pc, #56]	; (800569c <StartYaw_PID+0x60>)
 8005664:	480e      	ldr	r0, [pc, #56]	; (80056a0 <StartYaw_PID+0x64>)
 8005666:	f000 fec1 	bl	80063ec <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <StartYaw_PID+0x5c>)
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	2200      	movs	r2, #0
 8005672:	2100      	movs	r1, #0
 8005674:	f00f ff92 	bl	801559c <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <StartYaw_PID+0x68>)
 800567a:	4a08      	ldr	r2, [pc, #32]	; (800569c <StartYaw_PID+0x60>)
 800567c:	490a      	ldr	r1, [pc, #40]	; (80056a8 <StartYaw_PID+0x6c>)
 800567e:	4805      	ldr	r0, [pc, #20]	; (8005694 <StartYaw_PID+0x58>)
 8005680:	f001 ffa3 	bl	80075ca <Pid_CompensateYaw>
		vTaskDelay(150);
 8005684:	2096      	movs	r0, #150	; 0x96
 8005686:	f010 fc3f 	bl	8015f08 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800568a:	e7e4      	b.n	8005656 <StartYaw_PID+0x1a>
 800568c:	3ccccccd 	.word	0x3ccccccd
 8005690:	42c80000 	.word	0x42c80000
 8005694:	200002fc 	.word	0x200002fc
 8005698:	20000368 	.word	0x20000368
 800569c:	200003c0 	.word	0x200003c0
 80056a0:	20000374 	.word	0x20000374
 80056a4:	2000047c 	.word	0x2000047c
 80056a8:	20000468 	.word	0x20000468

080056ac <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 80056b4:	480f      	ldr	r0, [pc, #60]	; (80056f4 <StartPressureMonitor+0x48>)
 80056b6:	f000 f9ed 	bl	8005a94 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056ba:	4b0f      	ldr	r3, [pc, #60]	; (80056f8 <StartPressureMonitor+0x4c>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	490e      	ldr	r1, [pc, #56]	; (80056fc <StartPressureMonitor+0x50>)
 80056c2:	480c      	ldr	r0, [pc, #48]	; (80056f4 <StartPressureMonitor+0x48>)
 80056c4:	f000 fa30 	bl	8005b28 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056c8:	4b0b      	ldr	r3, [pc, #44]	; (80056f8 <StartPressureMonitor+0x4c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	490b      	ldr	r1, [pc, #44]	; (80056fc <StartPressureMonitor+0x50>)
 80056d0:	4808      	ldr	r0, [pc, #32]	; (80056f4 <StartPressureMonitor+0x48>)
 80056d2:	f000 f979 	bl	80059c8 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <StartPressureMonitor+0x4c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	4907      	ldr	r1, [pc, #28]	; (80056fc <StartPressureMonitor+0x50>)
 80056de:	4805      	ldr	r0, [pc, #20]	; (80056f4 <StartPressureMonitor+0x48>)
 80056e0:	f000 f91c 	bl	800591c <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <StartPressureMonitor+0x50>)
 80056e6:	f000 fa4b 	bl	8005b80 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80056ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056ee:	f010 fc0b 	bl	8015f08 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056f2:	e7e9      	b.n	80056c8 <StartPressureMonitor+0x1c>
 80056f4:	20000374 	.word	0x20000374
 80056f8:	20000368 	.word	0x20000368
 80056fc:	200004ac 	.word	0x200004ac

08005700 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <StartGPS+0x34>)
 800570e:	480a      	ldr	r0, [pc, #40]	; (8005738 <StartGPS+0x38>)
 8005710:	f009 fea8 	bl	800f464 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <StartGPS+0x3c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4909      	ldr	r1, [pc, #36]	; (8005740 <StartGPS+0x40>)
 800571a:	4618      	mov	r0, r3
 800571c:	f010 f8b2 	bl	8015884 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 8005720:	4908      	ldr	r1, [pc, #32]	; (8005744 <StartGPS+0x44>)
 8005722:	4804      	ldr	r0, [pc, #16]	; (8005734 <StartGPS+0x34>)
 8005724:	f001 f82a 	bl	800677c <gps_ReadNMEA>
	  vTaskDelay(1000);
 8005728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800572c:	f010 fbec 	bl	8015f08 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005730:	e7ea      	b.n	8005708 <StartGPS+0x8>
 8005732:	bf00      	nop
 8005734:	200004f0 	.word	0x200004f0
 8005738:	20000a74 	.word	0x20000a74
 800573c:	2000036c 	.word	0x2000036c
 8005740:	000186a0 	.word	0x000186a0
 8005744:	200004c0 	.word	0x200004c0

08005748 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b09c      	sub	sp, #112	; 0x70
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005750:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <StartMainTask+0x70>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4919      	ldr	r1, [pc, #100]	; (80057bc <StartMainTask+0x74>)
 8005756:	4618      	mov	r0, r3
 8005758:	f010 f894 	bl	8015884 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <StartMainTask+0x70>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4916      	ldr	r1, [pc, #88]	; (80057bc <StartMainTask+0x74>)
 8005762:	4618      	mov	r0, r3
 8005764:	f010 f88e 	bl	8015884 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005768:	2300      	movs	r3, #0
 800576a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800576c:	e011      	b.n	8005792 <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 800576e:	4b14      	ldr	r3, [pc, #80]	; (80057c0 <StartMainTask+0x78>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005776:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005778:	2064      	movs	r0, #100	; 0x64
 800577a:	f010 fbc5 	bl	8015f08 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 800577e:	4b10      	ldr	r3, [pc, #64]	; (80057c0 <StartMainTask+0x78>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005786:	2064      	movs	r0, #100	; 0x64
 8005788:	f010 fbbe 	bl	8015f08 <vTaskDelay>
	for(int i=0;i<5;i++){
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	3301      	adds	r3, #1
 8005790:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005794:	2b04      	cmp	r3, #4
 8005796:	ddea      	ble.n	800576e <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <StartMainTask+0x7c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	490a      	ldr	r1, [pc, #40]	; (80057c8 <StartMainTask+0x80>)
 80057a0:	480a      	ldr	r0, [pc, #40]	; (80057cc <StartMainTask+0x84>)
 80057a2:	f000 fc61 	bl	8006068 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 80057a6:	4908      	ldr	r1, [pc, #32]	; (80057c8 <StartMainTask+0x80>)
 80057a8:	4808      	ldr	r0, [pc, #32]	; (80057cc <StartMainTask+0x84>)
 80057aa:	f000 fe59 	bl	8006460 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 80057ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057b2:	f010 fba9 	bl	8015f08 <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057b6:	e7ef      	b.n	8005798 <StartMainTask+0x50>
 80057b8:	20000370 	.word	0x20000370
 80057bc:	6fc0ffff 	.word	0x6fc0ffff
 80057c0:	200009dc 	.word	0x200009dc
 80057c4:	20000368 	.word	0x20000368
 80057c8:	200003c0 	.word	0x200003c0
 80057cc:	20000374 	.word	0x20000374

080057d0 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057d8:	4909      	ldr	r1, [pc, #36]	; (8005800 <StartBatteryMonitoring+0x30>)
 80057da:	480a      	ldr	r0, [pc, #40]	; (8005804 <StartBatteryMonitoring+0x34>)
 80057dc:	f7ff fcb0 	bl	8005140 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80057e0:	4907      	ldr	r1, [pc, #28]	; (8005800 <StartBatteryMonitoring+0x30>)
 80057e2:	4808      	ldr	r0, [pc, #32]	; (8005804 <StartBatteryMonitoring+0x34>)
 80057e4:	f7ff fd20 	bl	8005228 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80057e8:	4905      	ldr	r1, [pc, #20]	; (8005800 <StartBatteryMonitoring+0x30>)
 80057ea:	4806      	ldr	r0, [pc, #24]	; (8005804 <StartBatteryMonitoring+0x34>)
 80057ec:	f7ff fcd8 	bl	80051a0 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80057f0:	4804      	ldr	r0, [pc, #16]	; (8005804 <StartBatteryMonitoring+0x34>)
 80057f2:	f7ff fd5d 	bl	80052b0 <Battery_RemaningTime>
    vTaskDelay(5000);
 80057f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80057fa:	f010 fb85 	bl	8015f08 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057fe:	e7eb      	b.n	80057d8 <StartBatteryMonitoring+0x8>
 8005800:	200008d8 	.word	0x200008d8
 8005804:	200004e0 	.word	0x200004e0

08005808 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 8005810:	4803      	ldr	r0, [pc, #12]	; (8005820 <StartTelemetry+0x18>)
 8005812:	f001 fb71 	bl	8006ef8 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 8005816:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800581a:	f010 fb75 	bl	8015f08 <vTaskDelay>
 800581e:	e7fa      	b.n	8005816 <StartTelemetry+0xe>
 8005820:	20000b04 	.word	0x20000b04

08005824 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af04      	add	r7, sp, #16
 800582a:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800582c:	230a      	movs	r3, #10
 800582e:	9302      	str	r3, [sp, #8]
 8005830:	2301      	movs	r3, #1
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	f107 030f 	add.w	r3, r7, #15
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	2301      	movs	r3, #1
 800583c:	221b      	movs	r2, #27
 800583e:	21ec      	movs	r1, #236	; 0xec
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f004 fff5 	bl	800a830 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	f003 0332 	and.w	r3, r3, #50	; 0x32
 800584c:	b2db      	uxtb	r3, r3
 800584e:	3301      	adds	r3, #1
 8005850:	b2db      	uxtb	r3, r3
 8005852:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005854:	230a      	movs	r3, #10
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	2301      	movs	r3, #1
 800585a:	9301      	str	r3, [sp, #4]
 800585c:	f107 030e 	add.w	r3, r7, #14
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	2301      	movs	r3, #1
 8005864:	221b      	movs	r2, #27
 8005866:	21ec      	movs	r1, #236	; 0xec
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f004 fecd 	bl	800a608 <HAL_I2C_Mem_Write>
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 8005876:	b580      	push	{r7, lr}
 8005878:	b088      	sub	sp, #32
 800587a:	af04      	add	r7, sp, #16
 800587c:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800587e:	230a      	movs	r3, #10
 8005880:	9302      	str	r3, [sp, #8]
 8005882:	2301      	movs	r3, #1
 8005884:	9301      	str	r3, [sp, #4]
 8005886:	f107 030f 	add.w	r3, r7, #15
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	2301      	movs	r3, #1
 800588e:	221b      	movs	r2, #27
 8005890:	21ec      	movs	r1, #236	; 0xec
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f004 ffcc 	bl	800a830 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	3301      	adds	r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058a6:	230a      	movs	r3, #10
 80058a8:	9302      	str	r3, [sp, #8]
 80058aa:	2301      	movs	r3, #1
 80058ac:	9301      	str	r3, [sp, #4]
 80058ae:	f107 030e 	add.w	r3, r7, #14
 80058b2:	9300      	str	r3, [sp, #0]
 80058b4:	2301      	movs	r3, #1
 80058b6:	221b      	movs	r2, #27
 80058b8:	21ec      	movs	r1, #236	; 0xec
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f004 fea4 	bl	800a608 <HAL_I2C_Mem_Write>
}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af04      	add	r7, sp, #16
 80058ce:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80058d0:	230a      	movs	r3, #10
 80058d2:	9302      	str	r3, [sp, #8]
 80058d4:	2301      	movs	r3, #1
 80058d6:	9301      	str	r3, [sp, #4]
 80058d8:	f107 030f 	add.w	r3, r7, #15
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2301      	movs	r3, #1
 80058e0:	221b      	movs	r2, #27
 80058e2:	21ec      	movs	r1, #236	; 0xec
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f004 ffa3 	bl	800a830 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	3330      	adds	r3, #48	; 0x30
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058f8:	230a      	movs	r3, #10
 80058fa:	9302      	str	r3, [sp, #8]
 80058fc:	2301      	movs	r3, #1
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	f107 030e 	add.w	r3, r7, #14
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	2301      	movs	r3, #1
 8005908:	221b      	movs	r2, #27
 800590a:	21ec      	movs	r1, #236	; 0xec
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f004 fe7b 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 800591c:	b580      	push	{r7, lr}
 800591e:	b08a      	sub	sp, #40	; 0x28
 8005920:	af04      	add	r7, sp, #16
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005928:	2123      	movs	r1, #35	; 0x23
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f00f ffaa 	bl	8015884 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005930:	230a      	movs	r3, #10
 8005932:	9302      	str	r3, [sp, #8]
 8005934:	2301      	movs	r3, #1
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	f107 0313 	add.w	r3, r7, #19
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2301      	movs	r3, #1
 8005940:	2207      	movs	r2, #7
 8005942:	21ec      	movs	r1, #236	; 0xec
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f004 ff73 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 800594a:	230a      	movs	r3, #10
 800594c:	9302      	str	r3, [sp, #8]
 800594e:	2301      	movs	r3, #1
 8005950:	9301      	str	r3, [sp, #4]
 8005952:	f107 0312 	add.w	r3, r7, #18
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	2301      	movs	r3, #1
 800595a:	2208      	movs	r2, #8
 800595c:	21ec      	movs	r1, #236	; 0xec
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f004 ff66 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8005964:	230a      	movs	r3, #10
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	2301      	movs	r3, #1
 800596a:	9301      	str	r3, [sp, #4]
 800596c:	f107 0311 	add.w	r3, r7, #17
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	2301      	movs	r3, #1
 8005974:	2209      	movs	r2, #9
 8005976:	21ec      	movs	r1, #236	; 0xec
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f004 ff59 	bl	800a830 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f00f fe09 	bl	801559c <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800598a:	7cfb      	ldrb	r3, [r7, #19]
 800598c:	461a      	mov	r2, r3
 800598e:	7cbb      	ldrb	r3, [r7, #18]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	441a      	add	r2, r3
 8005994:	7c7b      	ldrb	r3, [r7, #17]
 8005996:	041b      	lsls	r3, r3, #16
 8005998:	4413      	add	r3, r2
 800599a:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <BMP390_ReadTemp+0xa8>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	1ad2      	subs	r2, r2, r3
 80059a6:	0852      	lsrs	r2, r2, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	0c5b      	lsrs	r3, r3, #17
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80059ba:	bf00      	nop
 80059bc:	3718      	adds	r7, #24
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	04000105 	.word	0x04000105

080059c8 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af04      	add	r7, sp, #16
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80059d4:	2123      	movs	r1, #35	; 0x23
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f00f ff54 	bl	8015884 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80059dc:	230a      	movs	r3, #10
 80059de:	9302      	str	r3, [sp, #8]
 80059e0:	2301      	movs	r3, #1
 80059e2:	9301      	str	r3, [sp, #4]
 80059e4:	f107 0313 	add.w	r3, r7, #19
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2301      	movs	r3, #1
 80059ec:	2204      	movs	r2, #4
 80059ee:	21ec      	movs	r1, #236	; 0xec
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f004 ff1d 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80059f6:	230a      	movs	r3, #10
 80059f8:	9302      	str	r3, [sp, #8]
 80059fa:	2301      	movs	r3, #1
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f107 0312 	add.w	r3, r7, #18
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2301      	movs	r3, #1
 8005a06:	2205      	movs	r2, #5
 8005a08:	21ec      	movs	r1, #236	; 0xec
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f004 ff10 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005a10:	230a      	movs	r3, #10
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	2301      	movs	r3, #1
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	f107 0311 	add.w	r3, r7, #17
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	2301      	movs	r3, #1
 8005a20:	2206      	movs	r2, #6
 8005a22:	21ec      	movs	r1, #236	; 0xec
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f004 ff03 	bl	800a830 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f00f fdb3 	bl	801559c <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	7cbb      	ldrb	r3, [r7, #18]
 8005a3c:	021b      	lsls	r3, r3, #8
 8005a3e:	441a      	add	r2, r3
 8005a40:	7c7b      	ldrb	r3, [r7, #17]
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	4413      	add	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005a48:	6978      	ldr	r0, [r7, #20]
 8005a4a:	f7fe fd3d 	bl	80044c8 <__aeabi_ui2d>
 8005a4e:	f04f 0200 	mov.w	r2, #0
 8005a52:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <BMP390_ReadPress+0xc8>)
 8005a54:	f7fe fdb2 	bl	80045bc <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	a309      	add	r3, pc, #36	; (adr r3, 8005a88 <BMP390_ReadPress+0xc0>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fe fbf3 	bl	8004250 <__adddf3>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7ff f853 	bl	8004b1c <__aeabi_d2f>
 8005a76:	4602      	mov	r2, r0
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	601a      	str	r2, [r3, #0]

}
 8005a7c:	bf00      	nop
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	f3af 8000 	nop.w
 8005a88:	00000000 	.word	0x00000000
 8005a8c:	4072c000 	.word	0x4072c000
 8005a90:	3f0db000 	.word	0x3f0db000

08005a94 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af04      	add	r7, sp, #16
 8005a9a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005aa0:	230a      	movs	r3, #10
 8005aa2:	9302      	str	r3, [sp, #8]
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	9301      	str	r3, [sp, #4]
 8005aa8:	f107 030e 	add.w	r3, r7, #14
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	2301      	movs	r3, #1
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	21ec      	movs	r1, #236	; 0xec
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f004 febb 	bl	800a830 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	2b60      	cmp	r3, #96	; 0x60
 8005abe:	d001      	beq.n	8005ac4 <BMP390_Init+0x30>
		res = 1;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005ac4:	230a      	movs	r3, #10
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	2301      	movs	r3, #1
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	f107 030e 	add.w	r3, r7, #14
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	21ec      	movs	r1, #236	; 0xec
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f004 fea9 	bl	800a830 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005ade:	7bbb      	ldrb	r3, [r7, #14]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d001      	beq.n	8005ae8 <BMP390_Init+0x54>
		res = 1;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff fec4 	bl	8005876 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fe98 	bl	8005824 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff fee7 	bl	80058c8 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005afa:	2005      	movs	r0, #5
 8005afc:	f002 fcde 	bl	80084bc <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005b00:	2342      	movs	r3, #66	; 0x42
 8005b02:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005b04:	230a      	movs	r3, #10
 8005b06:	9302      	str	r3, [sp, #8]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	f107 030e 	add.w	r3, r7, #14
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	2301      	movs	r3, #1
 8005b14:	2219      	movs	r2, #25
 8005b16:	21ec      	movs	r1, #236	; 0xec
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f004 fd75 	bl	800a608 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	e010      	b.n	8005b5c <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff42 	bl	80059c8 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	edd3 7a00 	vldr	s15, [r3]
 8005b4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b52:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	ddeb      	ble.n	8005b3a <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005b62:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	0000      	movs	r0, r0
	...

08005b80 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	ed93 7a00 	vldr	s14, [r3]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b98:	ee16 0a90 	vmov	r0, s13
 8005b9c:	f7fe fcb6 	bl	800450c <__aeabi_f2d>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005bf0 <BMP390_GetRelativeAltitude+0x70>
 8005ba8:	ec43 2b10 	vmov	d0, r2, r3
 8005bac:	f012 f9ea 	bl	8017f84 <pow>
 8005bb0:	ec53 2b10 	vmov	r2, r3, d0
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	4911      	ldr	r1, [pc, #68]	; (8005c00 <BMP390_GetRelativeAltitude+0x80>)
 8005bba:	f7fe fb47 	bl	800424c <__aeabi_dsub>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4610      	mov	r0, r2
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	a30c      	add	r3, pc, #48	; (adr r3, 8005bf8 <BMP390_GetRelativeAltitude+0x78>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fe fcf6 	bl	80045bc <__aeabi_dmul>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7fe ffa0 	bl	8004b1c <__aeabi_d2f>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	611a      	str	r2, [r3, #16]
}
 8005be2:	bf00      	nop
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	f3af 8000 	nop.w
 8005bf0:	1a36e2eb 	.word	0x1a36e2eb
 8005bf4:	3fc85bc0 	.word	0x3fc85bc0
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	40e5a540 	.word	0x40e5a540
 8005c00:	3ff00000 	.word	0x3ff00000

08005c04 <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af04      	add	r7, sp, #16
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005c10:	230a      	movs	r3, #10
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	2301      	movs	r3, #1
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	1cfb      	adds	r3, r7, #3
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	2207      	movs	r2, #7
 8005c20:	2150      	movs	r1, #80	; 0x50
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f004 fcf0 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af04      	add	r7, sp, #16
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005c3e:	7afa      	ldrb	r2, [r7, #11]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005c46:	230a      	movs	r3, #10
 8005c48:	9302      	str	r3, [sp, #8]
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	f107 030b 	add.w	r3, r7, #11
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2301      	movs	r3, #1
 8005c56:	223d      	movs	r2, #61	; 0x3d
 8005c58:	2150      	movs	r1, #80	; 0x50
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f004 fcd4 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b088      	sub	sp, #32
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c70:	2364      	movs	r3, #100	; 0x64
 8005c72:	9302      	str	r3, [sp, #8]
 8005c74:	2301      	movs	r3, #1
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	f107 030f 	add.w	r3, r7, #15
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	2301      	movs	r3, #1
 8005c80:	223f      	movs	r2, #63	; 0x3f
 8005c82:	2150      	movs	r1, #80	; 0x50
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f004 fdd3 	bl	800a830 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af04      	add	r7, sp, #16
 8005c9a:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005c9c:	2364      	movs	r3, #100	; 0x64
 8005c9e:	9302      	str	r3, [sp, #8]
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	f107 030f 	add.w	r3, r7, #15
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	2301      	movs	r3, #1
 8005cac:	2237      	movs	r2, #55	; 0x37
 8005cae:	2150      	movs	r1, #80	; 0x50
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f004 fdbd 	bl	800a830 <HAL_I2C_Mem_Read>
	return system_reg;
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af04      	add	r7, sp, #16
 8005cc6:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005cc8:	2364      	movs	r3, #100	; 0x64
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	f107 030f 	add.w	r3, r7, #15
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	2210      	movs	r2, #16
 8005cda:	2150      	movs	r1, #80	; 0x50
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f004 fda7 	bl	800a830 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	f043 0320 	orr.w	r3, r3, #32
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005cec:	230a      	movs	r3, #10
 8005cee:	9302      	str	r3, [sp, #8]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	f107 030f 	add.w	r3, r7, #15
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	2210      	movs	r2, #16
 8005cfe:	2150      	movs	r1, #80	; 0x50
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f004 fc81 	bl	800a608 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005d06:	2364      	movs	r3, #100	; 0x64
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f107 030f 	add.w	r3, r7, #15
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2301      	movs	r3, #1
 8005d16:	220f      	movs	r2, #15
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f004 fd88 	bl	800a830 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	f043 0320 	orr.w	r3, r3, #32
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	9302      	str	r3, [sp, #8]
 8005d2e:	2301      	movs	r3, #1
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	f107 030f 	add.w	r3, r7, #15
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	220f      	movs	r2, #15
 8005d3c:	2150      	movs	r1, #80	; 0x50
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f004 fc62 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af04      	add	r7, sp, #16
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d58:	2364      	movs	r3, #100	; 0x64
 8005d5a:	9302      	str	r3, [sp, #8]
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	9301      	str	r3, [sp, #4]
 8005d60:	f107 030f 	add.w	r3, r7, #15
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	2301      	movs	r3, #1
 8005d68:	2212      	movs	r2, #18
 8005d6a:	2150      	movs	r1, #80	; 0x50
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f004 fd5f 	bl	800a830 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	2b5a      	cmp	r3, #90	; 0x5a
 8005d76:	d012      	beq.n	8005d9e <BNO055_EnableHighGAcc+0x52>
 8005d78:	2b5a      	cmp	r3, #90	; 0x5a
 8005d7a:	dc16      	bgt.n	8005daa <BNO055_EnableHighGAcc+0x5e>
 8005d7c:	2b58      	cmp	r3, #88	; 0x58
 8005d7e:	d002      	beq.n	8005d86 <BNO055_EnableHighGAcc+0x3a>
 8005d80:	2b59      	cmp	r3, #89	; 0x59
 8005d82:	d006      	beq.n	8005d92 <BNO055_EnableHighGAcc+0x46>
 8005d84:	e011      	b.n	8005daa <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d86:	7bfb      	ldrb	r3, [r7, #15]
 8005d88:	f043 0320 	orr.w	r3, r3, #32
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	73fb      	strb	r3, [r7, #15]
			break;
 8005d90:	e00b      	b.n	8005daa <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	73fb      	strb	r3, [r7, #15]
			break;
 8005d9c:	e005      	b.n	8005daa <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	73fb      	strb	r3, [r7, #15]
			break;
 8005da8:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005daa:	230a      	movs	r3, #10
 8005dac:	9302      	str	r3, [sp, #8]
 8005dae:	2301      	movs	r3, #1
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f107 030f 	add.w	r3, r7, #15
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2301      	movs	r3, #1
 8005dba:	2212      	movs	r2, #18
 8005dbc:	2150      	movs	r1, #80	; 0x50
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f004 fc22 	bl	800a608 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005dc4:	2364      	movs	r3, #100	; 0x64
 8005dc6:	9302      	str	r3, [sp, #8]
 8005dc8:	2301      	movs	r3, #1
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	f107 030f 	add.w	r3, r7, #15
 8005dd0:	9300      	str	r3, [sp, #0]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	2212      	movs	r2, #18
 8005dd6:	2150      	movs	r1, #80	; 0x50
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f004 fd29 	bl	800a830 <HAL_I2C_Mem_Read>
}
 8005dde:	bf00      	nop
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b088      	sub	sp, #32
 8005dea:	af04      	add	r7, sp, #16
 8005dec:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005dee:	2364      	movs	r3, #100	; 0x64
 8005df0:	9302      	str	r3, [sp, #8]
 8005df2:	2301      	movs	r3, #1
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	f107 030f 	add.w	r3, r7, #15
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	223f      	movs	r2, #63	; 0x3f
 8005e00:	2150      	movs	r1, #80	; 0x50
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f004 fd14 	bl	800a830 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005e12:	230a      	movs	r3, #10
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	2301      	movs	r3, #1
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	f107 030f 	add.w	r3, r7, #15
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	223f      	movs	r2, #63	; 0x3f
 8005e24:	2150      	movs	r1, #80	; 0x50
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f004 fbee 	bl	800a608 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f7ff ff31 	bl	8005c94 <BNO055_ReadITStatus>
}
 8005e32:	bf00      	nop
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b088      	sub	sp, #32
 8005e3e:	af04      	add	r7, sp, #16
 8005e40:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ff10 	bl	8005c68 <BNO055_ReadSystemReg>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	3b80      	subs	r3, #128	; 0x80
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e5a:	230a      	movs	r3, #10
 8005e5c:	9302      	str	r3, [sp, #8]
 8005e5e:	2301      	movs	r3, #1
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	f107 030e 	add.w	r3, r7, #14
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	223f      	movs	r2, #63	; 0x3f
 8005e6c:	2150      	movs	r1, #80	; 0x50
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f004 fbca 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af04      	add	r7, sp, #16
 8005e82:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff feef 	bl	8005c68 <BNO055_ReadSystemReg>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e9c:	230a      	movs	r3, #10
 8005e9e:	9302      	str	r3, [sp, #8]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	f107 030e 	add.w	r3, r7, #14
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	2301      	movs	r3, #1
 8005eac:	223f      	movs	r2, #63	; 0x3f
 8005eae:	2150      	movs	r1, #80	; 0x50
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f004 fba9 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005eb6:	bf00      	nop
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af04      	add	r7, sp, #16
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005ecc:	230a      	movs	r3, #10
 8005ece:	9302      	str	r3, [sp, #8]
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	9301      	str	r3, [sp, #4]
 8005ed4:	f107 030e 	add.w	r3, r7, #14
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2301      	movs	r3, #1
 8005edc:	2236      	movs	r2, #54	; 0x36
 8005ede:	2150      	movs	r1, #80	; 0x50
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f004 fca5 	bl	800a830 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2b0f      	cmp	r3, #15
 8005eee:	d001      	beq.n	8005ef4 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f7ff ffc1 	bl	8005e7c <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005efa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005efe:	f00f f978 	bl	80151f2 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005f02:	230a      	movs	r3, #10
 8005f04:	9302      	str	r3, [sp, #8]
 8005f06:	2301      	movs	r3, #1
 8005f08:	9301      	str	r3, [sp, #4]
 8005f0a:	f107 030e 	add.w	r3, r7, #14
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2301      	movs	r3, #1
 8005f12:	223a      	movs	r2, #58	; 0x3a
 8005f14:	2150      	movs	r1, #80	; 0x50
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f004 fc8a 	bl	800a830 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005f1c:	7bbb      	ldrb	r3, [r7, #14]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005f26:	230a      	movs	r3, #10
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	9301      	str	r3, [sp, #4]
 8005f2e:	f107 030e 	add.w	r3, r7, #14
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	2301      	movs	r3, #1
 8005f36:	2239      	movs	r2, #57	; 0x39
 8005f38:	2150      	movs	r1, #80	; 0x50
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f004 fc78 	bl	800a830 <HAL_I2C_Mem_Read>

	return res;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af04      	add	r7, sp, #16
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005f5a:	230a      	movs	r3, #10
 8005f5c:	9302      	str	r3, [sp, #8]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	f107 030f 	add.w	r3, r7, #15
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	2301      	movs	r3, #1
 8005f6a:	2214      	movs	r2, #20
 8005f6c:	2150      	movs	r1, #80	; 0x50
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f004 fb4a 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005f74:	bf00      	nop
 8005f76:	3710      	adds	r7, #16
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b088      	sub	sp, #32
 8005f80:	af04      	add	r7, sp, #16
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f8c:	230a      	movs	r3, #10
 8005f8e:	9302      	str	r3, [sp, #8]
 8005f90:	2301      	movs	r3, #1
 8005f92:	9301      	str	r3, [sp, #4]
 8005f94:	f107 030f 	add.w	r3, r7, #15
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	2213      	movs	r2, #19
 8005f9e:	2150      	movs	r1, #80	; 0x50
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f004 fb31 	bl	800a608 <HAL_I2C_Mem_Write>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b088      	sub	sp, #32
 8005fb2:	af04      	add	r7, sp, #16
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005fcc:	2101      	movs	r1, #1
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff fe18 	bl	8005c04 <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff fe73 	bl	8005cc0 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005fda:	2158      	movs	r1, #88	; 0x58
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff feb5 	bl	8005d4c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005fe2:	2159      	movs	r1, #89	; 0x59
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff feb1 	bl	8005d4c <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005fea:	215a      	movs	r1, #90	; 0x5a
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff fead 	bl	8005d4c <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005ff2:	2150      	movs	r1, #80	; 0x50
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ffa8 	bl	8005f4a <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8005ffa:	2140      	movs	r1, #64	; 0x40
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ffbd 	bl	8005f7c <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8006002:	2100      	movs	r1, #0
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff fdfd 	bl	8005c04 <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff ff15 	bl	8005e3a <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8006010:	20c8      	movs	r0, #200	; 0xc8
 8006012:	f00f f8ee 	bl	80151f2 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ff50 	bl	8005ebe <BNO055_CheckSelfTestResult>
 800601e:	4603      	mov	r3, r0
 8006020:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <BNO055_Init+0x7e>
		res = 1;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	210c      	movs	r1, #12
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fdfd 	bl	8005c30 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8006036:	230a      	movs	r3, #10
 8006038:	9302      	str	r3, [sp, #8]
 800603a:	2301      	movs	r3, #1
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	f107 030e 	add.w	r3, r7, #14
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2301      	movs	r3, #1
 8006046:	223d      	movs	r2, #61	; 0x3d
 8006048:	2150      	movs	r1, #80	; 0x50
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f004 fbf0 	bl	800a830 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	2b0c      	cmp	r3, #12
 8006054:	d001      	beq.n	800605a <BNO055_Init+0xac>
		res = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800605a:	7bfb      	ldrb	r3, [r7, #15]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	0000      	movs	r0, r0
	...

08006068 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af04      	add	r7, sp, #16
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 8006074:	2119      	movs	r1, #25
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f00f fc04 	bl	8015884 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 800607c:	230a      	movs	r3, #10
 800607e:	9302      	str	r3, [sp, #8]
 8006080:	2301      	movs	r3, #1
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	f107 0317 	add.w	r3, r7, #23
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	2301      	movs	r3, #1
 800608c:	2208      	movs	r2, #8
 800608e:	2150      	movs	r1, #80	; 0x50
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f004 fbcd 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 8006096:	230a      	movs	r3, #10
 8006098:	9302      	str	r3, [sp, #8]
 800609a:	2301      	movs	r3, #1
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	f107 0316 	add.w	r3, r7, #22
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2301      	movs	r3, #1
 80060a6:	2209      	movs	r2, #9
 80060a8:	2150      	movs	r1, #80	; 0x50
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f004 fbc0 	bl	800a830 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80060b0:	2300      	movs	r3, #0
 80060b2:	2200      	movs	r2, #0
 80060b4:	2100      	movs	r1, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f00f fa70 	bl	801559c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	461a      	mov	r2, r3
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	4413      	add	r3, r2
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060ce:	4b74      	ldr	r3, [pc, #464]	; (80062a0 <BNO055_ReadAccel+0x238>)
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fe fa0f 	bl	800450c <__aeabi_f2d>
 80060ee:	a368      	add	r3, pc, #416	; (adr r3, 8006290 <BNO055_ReadAccel+0x228>)
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f7fe fcf2 	bl	8004adc <__aeabi_dcmpgt>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fa02 	bl	800450c <__aeabi_f2d>
 8006108:	a363      	add	r3, pc, #396	; (adr r3, 8006298 <BNO055_ReadAccel+0x230>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fe f89d 	bl	800424c <__aeabi_dsub>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4610      	mov	r0, r2
 8006118:	4619      	mov	r1, r3
 800611a:	f7fe fcff 	bl	8004b1c <__aeabi_d2f>
 800611e:	4602      	mov	r2, r0
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 8006124:	2119      	movs	r1, #25
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f00f fbac 	bl	8015884 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 800612c:	230a      	movs	r3, #10
 800612e:	9302      	str	r3, [sp, #8]
 8006130:	2301      	movs	r3, #1
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	f107 0317 	add.w	r3, r7, #23
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2301      	movs	r3, #1
 800613c:	220a      	movs	r2, #10
 800613e:	2150      	movs	r1, #80	; 0x50
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f004 fb75 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 8006146:	230a      	movs	r3, #10
 8006148:	9302      	str	r3, [sp, #8]
 800614a:	2301      	movs	r3, #1
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	f107 0316 	add.w	r3, r7, #22
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2301      	movs	r3, #1
 8006156:	220b      	movs	r2, #11
 8006158:	2150      	movs	r1, #80	; 0x50
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f004 fb68 	bl	800a830 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006160:	2300      	movs	r3, #0
 8006162:	2200      	movs	r2, #0
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f00f fa18 	bl	801559c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	461a      	mov	r2, r3
 8006170:	7dbb      	ldrb	r3, [r7, #22]
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	4413      	add	r3, r2
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800617e:	4b48      	ldr	r3, [pc, #288]	; (80062a0 <BNO055_ReadAccel+0x238>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800618a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe f9b7 	bl	800450c <__aeabi_f2d>
 800619e:	a33c      	add	r3, pc, #240	; (adr r3, 8006290 <BNO055_ReadAccel+0x228>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f7fe fc9a 	bl	8004adc <__aeabi_dcmpgt>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d012      	beq.n	80061d4 <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe f9aa 	bl	800450c <__aeabi_f2d>
 80061b8:	a337      	add	r3, pc, #220	; (adr r3, 8006298 <BNO055_ReadAccel+0x230>)
 80061ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061be:	f7fe f845 	bl	800424c <__aeabi_dsub>
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4610      	mov	r0, r2
 80061c8:	4619      	mov	r1, r3
 80061ca:	f7fe fca7 	bl	8004b1c <__aeabi_d2f>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80061d4:	2119      	movs	r1, #25
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f00f fb54 	bl	8015884 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80061dc:	230a      	movs	r3, #10
 80061de:	9302      	str	r3, [sp, #8]
 80061e0:	2301      	movs	r3, #1
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f107 0317 	add.w	r3, r7, #23
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	2301      	movs	r3, #1
 80061ec:	220c      	movs	r2, #12
 80061ee:	2150      	movs	r1, #80	; 0x50
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f004 fb1d 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80061f6:	230a      	movs	r3, #10
 80061f8:	9302      	str	r3, [sp, #8]
 80061fa:	2301      	movs	r3, #1
 80061fc:	9301      	str	r3, [sp, #4]
 80061fe:	f107 0316 	add.w	r3, r7, #22
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	2301      	movs	r3, #1
 8006206:	220d      	movs	r2, #13
 8006208:	2150      	movs	r1, #80	; 0x50
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f004 fb10 	bl	800a830 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	2100      	movs	r1, #0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f00f f9c0 	bl	801559c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	461a      	mov	r2, r3
 8006220:	7dbb      	ldrb	r3, [r7, #22]
 8006222:	021b      	lsls	r3, r3, #8
 8006224:	4413      	add	r3, r2
 8006226:	ee07 3a90 	vmov	s15, r3
 800622a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800622e:	4b1c      	ldr	r3, [pc, #112]	; (80062a0 <BNO055_ReadAccel+0x238>)
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800623a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe f95f 	bl	800450c <__aeabi_f2d>
 800624e:	a310      	add	r3, pc, #64	; (adr r3, 8006290 <BNO055_ReadAccel+0x228>)
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fe fc42 	bl	8004adc <__aeabi_dcmpgt>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d100      	bne.n	8006260 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 800625e:	e012      	b.n	8006286 <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	695b      	ldr	r3, [r3, #20]
 8006264:	4618      	mov	r0, r3
 8006266:	f7fe f951 	bl	800450c <__aeabi_f2d>
 800626a:	a30b      	add	r3, pc, #44	; (adr r3, 8006298 <BNO055_ReadAccel+0x230>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fd ffec 	bl	800424c <__aeabi_dsub>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	f7fe fc4e 	bl	8004b1c <__aeabi_d2f>
 8006280:	4602      	mov	r2, r0
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	615a      	str	r2, [r3, #20]
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	47ae147b 	.word	0x47ae147b
 8006294:	40747ae1 	.word	0x40747ae1
 8006298:	47ae147b 	.word	0x47ae147b
 800629c:	40847ae1 	.word	0x40847ae1
 80062a0:	20000000 	.word	0x20000000

080062a4 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80062ae:	230a      	movs	r3, #10
 80062b0:	9302      	str	r3, [sp, #8]
 80062b2:	2301      	movs	r3, #1
 80062b4:	9301      	str	r3, [sp, #4]
 80062b6:	f107 030f 	add.w	r3, r7, #15
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	2301      	movs	r3, #1
 80062be:	221c      	movs	r2, #28
 80062c0:	2150      	movs	r1, #80	; 0x50
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f004 fab4 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80062c8:	230a      	movs	r3, #10
 80062ca:	9302      	str	r3, [sp, #8]
 80062cc:	2301      	movs	r3, #1
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	f107 030e 	add.w	r3, r7, #14
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	2301      	movs	r3, #1
 80062d8:	221d      	movs	r2, #29
 80062da:	2150      	movs	r1, #80	; 0x50
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f004 faa7 	bl	800a830 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	461a      	mov	r2, r3
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	4413      	add	r3, r2
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062f4:	4b11      	ldr	r3, [pc, #68]	; (800633c <BNO055_ReadEuler_Roll+0x98>)
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	ee07 3a90 	vmov	s15, r3
 80062fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006310:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006340 <BNO055_ReadEuler_Roll+0x9c>
 8006314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631c:	dc00      	bgt.n	8006320 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 800631e:	e009      	b.n	8006334 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006326:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006344 <BNO055_ReadEuler_Roll+0xa0>
 800632a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8006334:	bf00      	nop
 8006336:	3710      	adds	r7, #16
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000002 	.word	0x20000002
 8006340:	44fa0000 	.word	0x44fa0000
 8006344:	45800000 	.word	0x45800000

08006348 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af04      	add	r7, sp, #16
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 8006352:	230a      	movs	r3, #10
 8006354:	9302      	str	r3, [sp, #8]
 8006356:	2301      	movs	r3, #1
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	f107 030f 	add.w	r3, r7, #15
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	2301      	movs	r3, #1
 8006362:	221e      	movs	r2, #30
 8006364:	2150      	movs	r1, #80	; 0x50
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f004 fa62 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 800636c:	230a      	movs	r3, #10
 800636e:	9302      	str	r3, [sp, #8]
 8006370:	2301      	movs	r3, #1
 8006372:	9301      	str	r3, [sp, #4]
 8006374:	f107 030e 	add.w	r3, r7, #14
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	2301      	movs	r3, #1
 800637c:	221f      	movs	r2, #31
 800637e:	2150      	movs	r1, #80	; 0x50
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f004 fa55 	bl	800a830 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	461a      	mov	r2, r3
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	021b      	lsls	r3, r3, #8
 800638e:	4413      	add	r3, r2
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006398:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <BNO055_ReadEuler_Pitch+0x98>)
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063b4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80063e4 <BNO055_ReadEuler_Pitch+0x9c>
 80063b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c0:	dc00      	bgt.n	80063c4 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80063c2:	e009      	b.n	80063d8 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063ca:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80063e8 <BNO055_ReadEuler_Pitch+0xa0>
 80063ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000002 	.word	0x20000002
 80063e4:	44fa0000 	.word	0x44fa0000
 80063e8:	45800000 	.word	0x45800000

080063ec <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af04      	add	r7, sp, #16
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80063f6:	230a      	movs	r3, #10
 80063f8:	9302      	str	r3, [sp, #8]
 80063fa:	2301      	movs	r3, #1
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	f107 030f 	add.w	r3, r7, #15
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	2301      	movs	r3, #1
 8006406:	221a      	movs	r2, #26
 8006408:	2150      	movs	r1, #80	; 0x50
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f004 fa10 	bl	800a830 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006410:	230a      	movs	r3, #10
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	2301      	movs	r3, #1
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f107 030e 	add.w	r3, r7, #14
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	2301      	movs	r3, #1
 8006420:	221b      	movs	r2, #27
 8006422:	2150      	movs	r1, #80	; 0x50
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f004 fa03 	bl	800a830 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	461a      	mov	r2, r3
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	4413      	add	r3, r2
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <BNO055_ReadEuler_Yaw+0x70>)
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000002 	.word	0x20000002

08006460 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8006470:	f002 f818 	bl	80084a4 <HAL_GetTick>
 8006474:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800647c:	ed97 7a07 	vldr	s14, [r7, #28]
 8006480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006484:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <BNO055_ComputeSpeed+0x60>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80064aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ae:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	10624dd3 	.word	0x10624dd3

080064c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80064ca:	4b12      	ldr	r3, [pc, #72]	; (8006514 <MX_DMA_Init+0x50>)
 80064cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ce:	4a11      	ldr	r2, [pc, #68]	; (8006514 <MX_DMA_Init+0x50>)
 80064d0:	f043 0304 	orr.w	r3, r3, #4
 80064d4:	6493      	str	r3, [r2, #72]	; 0x48
 80064d6:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <MX_DMA_Init+0x50>)
 80064d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064da:	f003 0304 	and.w	r3, r3, #4
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <MX_DMA_Init+0x50>)
 80064e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e6:	4a0b      	ldr	r2, [pc, #44]	; (8006514 <MX_DMA_Init+0x50>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	6493      	str	r3, [r2, #72]	; 0x48
 80064ee:	4b09      	ldr	r3, [pc, #36]	; (8006514 <MX_DMA_Init+0x50>)
 80064f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2105      	movs	r1, #5
 80064fe:	200b      	movs	r0, #11
 8006500:	f003 fac2 	bl	8009a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006504:	200b      	movs	r0, #11
 8006506:	f003 fad9 	bl	8009abc <HAL_NVIC_EnableIRQ>

}
 800650a:	bf00      	nop
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40021000 	.word	0x40021000

08006518 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b08a      	sub	sp, #40	; 0x28
 800651c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	609a      	str	r2, [r3, #8]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800652e:	4b37      	ldr	r3, [pc, #220]	; (800660c <MX_GPIO_Init+0xf4>)
 8006530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006532:	4a36      	ldr	r2, [pc, #216]	; (800660c <MX_GPIO_Init+0xf4>)
 8006534:	f043 0320 	orr.w	r3, r3, #32
 8006538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800653a:	4b34      	ldr	r3, [pc, #208]	; (800660c <MX_GPIO_Init+0xf4>)
 800653c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006546:	4b31      	ldr	r3, [pc, #196]	; (800660c <MX_GPIO_Init+0xf4>)
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	4a30      	ldr	r2, [pc, #192]	; (800660c <MX_GPIO_Init+0xf4>)
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006552:	4b2e      	ldr	r3, [pc, #184]	; (800660c <MX_GPIO_Init+0xf4>)
 8006554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800655e:	4b2b      	ldr	r3, [pc, #172]	; (800660c <MX_GPIO_Init+0xf4>)
 8006560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006562:	4a2a      	ldr	r2, [pc, #168]	; (800660c <MX_GPIO_Init+0xf4>)
 8006564:	f043 0301 	orr.w	r3, r3, #1
 8006568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800656a:	4b28      	ldr	r3, [pc, #160]	; (800660c <MX_GPIO_Init+0xf4>)
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006576:	4b25      	ldr	r3, [pc, #148]	; (800660c <MX_GPIO_Init+0xf4>)
 8006578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800657a:	4a24      	ldr	r2, [pc, #144]	; (800660c <MX_GPIO_Init+0xf4>)
 800657c:	f043 0308 	orr.w	r3, r3, #8
 8006580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006582:	4b22      	ldr	r3, [pc, #136]	; (800660c <MX_GPIO_Init+0xf4>)
 8006584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800658e:	4b1f      	ldr	r3, [pc, #124]	; (800660c <MX_GPIO_Init+0xf4>)
 8006590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006592:	4a1e      	ldr	r2, [pc, #120]	; (800660c <MX_GPIO_Init+0xf4>)
 8006594:	f043 0302 	orr.w	r3, r3, #2
 8006598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800659a:	4b1c      	ldr	r3, [pc, #112]	; (800660c <MX_GPIO_Init+0xf4>)
 800659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	603b      	str	r3, [r7, #0]
 80065a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065a6:	2200      	movs	r2, #0
 80065a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b0:	f003 ff46 	bl	800a440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80065b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065ba:	2301      	movs	r3, #1
 80065bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065c2:	2300      	movs	r3, #0
 80065c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065c6:	f107 0314 	add.w	r3, r7, #20
 80065ca:	4619      	mov	r1, r3
 80065cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065d0:	f003 fdb4 	bl	800a13c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80065d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80065de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80065e4:	f107 0314 	add.w	r3, r7, #20
 80065e8:	4619      	mov	r1, r3
 80065ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065ee:	f003 fda5 	bl	800a13c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80065f2:	2200      	movs	r2, #0
 80065f4:	2105      	movs	r1, #5
 80065f6:	2028      	movs	r0, #40	; 0x28
 80065f8:	f003 fa46 	bl	8009a88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80065fc:	2028      	movs	r0, #40	; 0x28
 80065fe:	f003 fa5d 	bl	8009abc <HAL_NVIC_EnableIRQ>

}
 8006602:	bf00      	nop
 8006604:	3728      	adds	r7, #40	; 0x28
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	40021000 	.word	0x40021000

08006610 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <MX_I2C2_Init+0x74>)
 8006616:	4a1c      	ldr	r2, [pc, #112]	; (8006688 <MX_I2C2_Init+0x78>)
 8006618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <MX_I2C2_Init+0x74>)
 800661c:	4a1b      	ldr	r2, [pc, #108]	; (800668c <MX_I2C2_Init+0x7c>)
 800661e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006620:	4b18      	ldr	r3, [pc, #96]	; (8006684 <MX_I2C2_Init+0x74>)
 8006622:	2200      	movs	r2, #0
 8006624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <MX_I2C2_Init+0x74>)
 8006628:	2201      	movs	r2, #1
 800662a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <MX_I2C2_Init+0x74>)
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <MX_I2C2_Init+0x74>)
 8006634:	2200      	movs	r2, #0
 8006636:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <MX_I2C2_Init+0x74>)
 800663a:	2200      	movs	r2, #0
 800663c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <MX_I2C2_Init+0x74>)
 8006640:	2200      	movs	r2, #0
 8006642:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006644:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <MX_I2C2_Init+0x74>)
 8006646:	2200      	movs	r2, #0
 8006648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800664a:	480e      	ldr	r0, [pc, #56]	; (8006684 <MX_I2C2_Init+0x74>)
 800664c:	f003 ff4d 	bl	800a4ea <HAL_I2C_Init>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006656:	f000 ff4d 	bl	80074f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800665a:	2100      	movs	r1, #0
 800665c:	4809      	ldr	r0, [pc, #36]	; (8006684 <MX_I2C2_Init+0x74>)
 800665e:	f004 fca7 	bl	800afb0 <HAL_I2CEx_ConfigAnalogFilter>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006668:	f000 ff44 	bl	80074f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800666c:	2100      	movs	r1, #0
 800666e:	4805      	ldr	r0, [pc, #20]	; (8006684 <MX_I2C2_Init+0x74>)
 8006670:	f004 fce9 	bl	800b046 <HAL_I2CEx_ConfigDigitalFilter>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800667a:	f000 ff3b 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800667e:	bf00      	nop
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000374 	.word	0x20000374
 8006688:	40005800 	.word	0x40005800
 800668c:	20c0edff 	.word	0x20c0edff

08006690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b0a0      	sub	sp, #128	; 0x80
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006698:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066a8:	f107 0318 	add.w	r3, r7, #24
 80066ac:	2254      	movs	r2, #84	; 0x54
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f011 fb77 	bl	8017da4 <memset>
  if(i2cHandle->Instance==I2C2)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a2c      	ldr	r2, [pc, #176]	; (800676c <HAL_I2C_MspInit+0xdc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d151      	bne.n	8006764 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80066c0:	2380      	movs	r3, #128	; 0x80
 80066c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80066c4:	2300      	movs	r3, #0
 80066c6:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066c8:	f107 0318 	add.w	r3, r7, #24
 80066cc:	4618      	mov	r0, r3
 80066ce:	f007 f843 	bl	800d758 <HAL_RCCEx_PeriphCLKConfig>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80066d8:	f000 ff0c 	bl	80074f4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 80066de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e0:	4a23      	ldr	r2, [pc, #140]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 80066e2:	f043 0320 	orr.w	r3, r3, #32
 80066e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066e8:	4b21      	ldr	r3, [pc, #132]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 80066ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	617b      	str	r3, [r7, #20]
 80066f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 80066f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 80066fa:	f043 0304 	orr.w	r3, r3, #4
 80066fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006700:	4b1b      	ldr	r3, [pc, #108]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 8006702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	613b      	str	r3, [r7, #16]
 800670a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800670c:	2301      	movs	r3, #1
 800670e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006710:	2312      	movs	r3, #18
 8006712:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006714:	2300      	movs	r3, #0
 8006716:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006718:	2300      	movs	r3, #0
 800671a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800671c:	2304      	movs	r3, #4
 800671e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006720:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006724:	4619      	mov	r1, r3
 8006726:	4813      	ldr	r0, [pc, #76]	; (8006774 <HAL_I2C_MspInit+0xe4>)
 8006728:	f003 fd08 	bl	800a13c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800672c:	2310      	movs	r3, #16
 800672e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006730:	2312      	movs	r3, #18
 8006732:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006734:	2300      	movs	r3, #0
 8006736:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006738:	2300      	movs	r3, #0
 800673a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800673c:	2304      	movs	r3, #4
 800673e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006740:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006744:	4619      	mov	r1, r3
 8006746:	480c      	ldr	r0, [pc, #48]	; (8006778 <HAL_I2C_MspInit+0xe8>)
 8006748:	f003 fcf8 	bl	800a13c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 800674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006750:	4a07      	ldr	r2, [pc, #28]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 8006752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006756:	6593      	str	r3, [r2, #88]	; 0x58
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <HAL_I2C_MspInit+0xe0>)
 800675a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800675c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006764:	bf00      	nop
 8006766:	3780      	adds	r7, #128	; 0x80
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40005800 	.word	0x40005800
 8006770:	40021000 	.word	0x40021000
 8006774:	48001400 	.word	0x48001400
 8006778:	48000800 	.word	0x48000800

0800677c <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 800677c:	b580      	push	{r7, lr}
 800677e:	b08e      	sub	sp, #56	; 0x38
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 8006786:	4a70      	ldr	r2, [pc, #448]	; (8006948 <gps_ReadNMEA+0x1cc>)
 8006788:	f107 0318 	add.w	r3, r7, #24
 800678c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006790:	6018      	str	r0, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800679c:	2300      	movs	r3, #0
 800679e:	633b      	str	r3, [r7, #48]	; 0x30
 80067a0:	e0c8      	b.n	8006934 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	4413      	add	r3, r2
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b24      	cmp	r3, #36	; 0x24
 80067ac:	f040 80bf 	bne.w	800692e <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067b4:	e00f      	b.n	80067d6 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80067b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	4413      	add	r3, r2
 80067bc:	3301      	adds	r3, #1
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	7819      	ldrb	r1, [r3, #0]
 80067c4:	f107 0220 	add.w	r2, r7, #32
 80067c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ca:	4413      	add	r3, r2
 80067cc:	460a      	mov	r2, r1
 80067ce:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	3301      	adds	r3, #1
 80067d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d8:	2b04      	cmp	r3, #4
 80067da:	ddec      	ble.n	80067b6 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80067e2:	f107 0218 	add.w	r2, r7, #24
 80067e6:	f107 0320 	add.w	r3, r7, #32
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fd fd17 	bl	8004220 <strcmp>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f040 809a 	bne.w	800692e <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80067fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fc:	3306      	adds	r3, #6
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006800:	2300      	movs	r3, #0
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
 8006804:	e08e      	b.n	8006924 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	3301      	adds	r3, #1
 800680a:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006818:	e013      	b.n	8006842 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	441a      	add	r2, r3
 8006820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	3338      	adds	r3, #56	; 0x38
 8006828:	443b      	add	r3, r7
 800682a:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	3301      	adds	r3, #1
 8006832:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	b2da      	uxtb	r2, r3
 8006838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <gps_ReadNMEA+0xde>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b2c      	cmp	r3, #44	; 0x2c
 8006858:	d1df      	bne.n	800681a <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 800685a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800685e:	3301      	adds	r3, #1
 8006860:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8006864:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006868:	3b01      	subs	r3, #1
 800686a:	2b0a      	cmp	r3, #10
 800686c:	d857      	bhi.n	800691e <gps_ReadNMEA+0x1a2>
 800686e:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <gps_ReadNMEA+0xf8>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	080068a1 	.word	0x080068a1
 8006878:	080068af 	.word	0x080068af
 800687c:	080068bd 	.word	0x080068bd
 8006880:	080068cb 	.word	0x080068cb
 8006884:	080068d9 	.word	0x080068d9
 8006888:	080068e7 	.word	0x080068e7
 800688c:	080068f5 	.word	0x080068f5
 8006890:	0800691f 	.word	0x0800691f
 8006894:	08006903 	.word	0x08006903
 8006898:	0800691f 	.word	0x0800691f
 800689c:	08006911 	.word	0x08006911
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 f850 	bl	800694c <gps_ProcessUTC>
							break;
 80068ac:	e037      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 f887 	bl	80069c8 <gps_ProcessLatitude>
							break;
 80068ba:	e030      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f9fa 	bl	8006cbc <gps_ProcessNorthSouth>
							break;
 80068c8:	e029      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80068ca:	f107 030c 	add.w	r3, r7, #12
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f935 	bl	8006b40 <gps_ProcessLongitude>
							break;
 80068d6:	e022      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa02 	bl	8006ce8 <gps_ProcessEastWest>
							break;
 80068e4:	e01b      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80068e6:	f107 030c 	add.w	r3, r7, #12
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fa11 	bl	8006d14 <gps_ProcessFix>
							break;
 80068f2:	e014      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80068f4:	f107 030c 	add.w	r3, r7, #12
 80068f8:	6839      	ldr	r1, [r7, #0]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fa28 	bl	8006d50 <gps_ProcessSatelliteCount>
							break;
 8006900:	e00d      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8006902:	f107 030c 	add.w	r3, r7, #12
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fa3d 	bl	8006d88 <gps_ProcessAltitude>
							break;
 800690e:	e006      	b.n	800691e <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fa92 	bl	8006e40 <gps_ProcessAltitudeCorre>
							break;
 800691c:	bf00      	nop
				for(int k=0;k<12;k++){
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	3301      	adds	r3, #1
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	2b0b      	cmp	r3, #11
 8006928:	f77f af6d 	ble.w	8006806 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 800692c:	e008      	b.n	8006940 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	3301      	adds	r3, #1
 8006932:	633b      	str	r3, [r7, #48]	; 0x30
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800693a:	f6ff af32 	blt.w	80067a2 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 800693e:	bf00      	nop
 8006940:	bf00      	nop
 8006942:	3738      	adds	r7, #56	; 0x38
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	08018f28 	.word	0x08018f28

0800694c <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	4413      	add	r3, r2
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	b2da      	uxtb	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3301      	adds	r3, #1
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	4413      	add	r3, r2
 800696c:	b2db      	uxtb	r3, r3
 800696e:	3b10      	subs	r3, #16
 8006970:	b2da      	uxtb	r2, r3
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	3302      	adds	r3, #2
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	0092      	lsls	r2, r2, #2
 8006980:	4413      	add	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3303      	adds	r3, #3
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	4413      	add	r3, r2
 800698e:	b2db      	uxtb	r3, r3
 8006990:	3b10      	subs	r3, #16
 8006992:	b2da      	uxtb	r2, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	0092      	lsls	r2, r2, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3305      	adds	r3, #5
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	4413      	add	r3, r2
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	3b10      	subs	r3, #16
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	769a      	strb	r2, [r3, #26]
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
 80069d2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	3b30      	subs	r3, #48	; 0x30
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	461a      	mov	r2, r3
 80069e8:	0092      	lsls	r2, r2, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	005b      	lsls	r3, r3, #1
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3301      	adds	r3, #1
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	4413      	add	r3, r2
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	3b30      	subs	r3, #48	; 0x30
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3302      	adds	r3, #2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	4413      	add	r3, r2
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	461a      	mov	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3303      	adds	r3, #3
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	3b30      	subs	r3, #48	; 0x30
 8006a1c:	4413      	add	r3, r2
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a26:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006a2a:	68b8      	ldr	r0, [r7, #8]
 8006a2c:	f7fd fd6e 	bl	800450c <__aeabi_f2d>
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3305      	adds	r3, #5
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	3b30      	subs	r3, #48	; 0x30
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fd fd53 	bl	80044e8 <__aeabi_i2d>
 8006a42:	a336      	add	r3, pc, #216	; (adr r3, 8006b1c <gps_ProcessLatitude+0x154>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	f7fd fdb8 	bl	80045bc <__aeabi_dmul>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4690      	mov	r8, r2
 8006a52:	4699      	mov	r9, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3306      	adds	r3, #6
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	3b30      	subs	r3, #48	; 0x30
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd fd43 	bl	80044e8 <__aeabi_i2d>
 8006a62:	a330      	add	r3, pc, #192	; (adr r3, 8006b24 <gps_ProcessLatitude+0x15c>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	f7fd fda8 	bl	80045bc <__aeabi_dmul>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	460b      	mov	r3, r1
 8006a70:	4640      	mov	r0, r8
 8006a72:	4649      	mov	r1, r9
 8006a74:	f7fd fbec 	bl	8004250 <__adddf3>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	4690      	mov	r8, r2
 8006a7e:	4699      	mov	r9, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3307      	adds	r3, #7
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	3b30      	subs	r3, #48	; 0x30
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fd fd2d 	bl	80044e8 <__aeabi_i2d>
 8006a8e:	a327      	add	r3, pc, #156	; (adr r3, 8006b2c <gps_ProcessLatitude+0x164>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7fd fd92 	bl	80045bc <__aeabi_dmul>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fd fbd6 	bl	8004250 <__adddf3>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4690      	mov	r8, r2
 8006aaa:	4699      	mov	r9, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	3b30      	subs	r3, #48	; 0x30
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f7fd fd17 	bl	80044e8 <__aeabi_i2d>
 8006aba:	a31e      	add	r3, pc, #120	; (adr r3, 8006b34 <gps_ProcessLatitude+0x16c>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7fd fd7c 	bl	80045bc <__aeabi_dmul>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7fd fbc0 	bl	8004250 <__adddf3>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f7fd fbba 	bl	8004250 <__adddf3>
 8006adc:	4602      	mov	r2, r0
 8006ade:	460b      	mov	r3, r1
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f7fe f81a 	bl	8004b1c <__aeabi_d2f>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af0:	ee07 3a90 	vmov	s15, r3
 8006af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af8:	edd7 6a02 	vldr	s13, [r7, #8]
 8006afc:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006b18 <gps_ProcessLatitude+0x150>
 8006b00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	edc3 7a00 	vstr	s15, [r3]
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b18:	42700000 	.word	0x42700000
 8006b1c:	9999999a 	.word	0x9999999a
 8006b20:	3fb99999 	.word	0x3fb99999
 8006b24:	47ae147b 	.word	0x47ae147b
 8006b28:	3f847ae1 	.word	0x3f847ae1
 8006b2c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b30:	3f50624d 	.word	0x3f50624d
 8006b34:	eb1c432d 	.word	0xeb1c432d
 8006b38:	3f1a36e2 	.word	0x3f1a36e2
 8006b3c:	00000000 	.word	0x00000000

08006b40 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	3b30      	subs	r3, #48	; 0x30
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	461a      	mov	r2, r3
 8006b62:	0092      	lsls	r2, r2, #2
 8006b64:	4413      	add	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	3b30      	subs	r3, #48	; 0x30
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3303      	adds	r3, #3
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3304      	adds	r3, #4
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	3b30      	subs	r3, #48	; 0x30
 8006b96:	4413      	add	r3, r2
 8006b98:	ee07 3a90 	vmov	s15, r3
 8006b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba0:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006ba4:	68b8      	ldr	r0, [r7, #8]
 8006ba6:	f7fd fcb1 	bl	800450c <__aeabi_f2d>
 8006baa:	4604      	mov	r4, r0
 8006bac:	460d      	mov	r5, r1
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	3305      	adds	r3, #5
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	3b30      	subs	r3, #48	; 0x30
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fd fc96 	bl	80044e8 <__aeabi_i2d>
 8006bbc:	a337      	add	r3, pc, #220	; (adr r3, 8006c9c <gps_ProcessLongitude+0x15c>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7fd fcfb 	bl	80045bc <__aeabi_dmul>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4690      	mov	r8, r2
 8006bcc:	4699      	mov	r9, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3306      	adds	r3, #6
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	3b30      	subs	r3, #48	; 0x30
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7fd fc86 	bl	80044e8 <__aeabi_i2d>
 8006bdc:	a331      	add	r3, pc, #196	; (adr r3, 8006ca4 <gps_ProcessLongitude+0x164>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7fd fceb 	bl	80045bc <__aeabi_dmul>
 8006be6:	4602      	mov	r2, r0
 8006be8:	460b      	mov	r3, r1
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	f7fd fb2f 	bl	8004250 <__adddf3>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4690      	mov	r8, r2
 8006bf8:	4699      	mov	r9, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3307      	adds	r3, #7
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	3b30      	subs	r3, #48	; 0x30
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd fc70 	bl	80044e8 <__aeabi_i2d>
 8006c08:	a328      	add	r3, pc, #160	; (adr r3, 8006cac <gps_ProcessLongitude+0x16c>)
 8006c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0e:	f7fd fcd5 	bl	80045bc <__aeabi_dmul>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	4640      	mov	r0, r8
 8006c18:	4649      	mov	r1, r9
 8006c1a:	f7fd fb19 	bl	8004250 <__adddf3>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4690      	mov	r8, r2
 8006c24:	4699      	mov	r9, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3308      	adds	r3, #8
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	3b30      	subs	r3, #48	; 0x30
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7fd fc5a 	bl	80044e8 <__aeabi_i2d>
 8006c34:	a31f      	add	r3, pc, #124	; (adr r3, 8006cb4 <gps_ProcessLongitude+0x174>)
 8006c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3a:	f7fd fcbf 	bl	80045bc <__aeabi_dmul>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7fd fb03 	bl	8004250 <__adddf3>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4620      	mov	r0, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	f7fd fafd 	bl	8004250 <__adddf3>
 8006c56:	4602      	mov	r2, r0
 8006c58:	460b      	mov	r3, r1
 8006c5a:	4610      	mov	r0, r2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	f7fd ff5d 	bl	8004b1c <__aeabi_d2f>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c72:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c76:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006c98 <gps_ProcessLongitude+0x158>
 8006c7a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006c88:	bf00      	nop
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c92:	bf00      	nop
 8006c94:	f3af 8000 	nop.w
 8006c98:	42700000 	.word	0x42700000
 8006c9c:	9999999a 	.word	0x9999999a
 8006ca0:	3fb99999 	.word	0x3fb99999
 8006ca4:	47ae147b 	.word	0x47ae147b
 8006ca8:	3f847ae1 	.word	0x3f847ae1
 8006cac:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cb0:	3f50624d 	.word	0x3f50624d
 8006cb4:	eb1c432d 	.word	0xeb1c432d
 8006cb8:	3f1a36e2 	.word	0x3f1a36e2

08006cbc <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2b4e      	cmp	r3, #78	; 0x4e
 8006ccc:	d103      	bne.n	8006cd6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8006cd4:	e002      	b.n	8006cdc <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	741a      	strb	r2, [r3, #16]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b45      	cmp	r3, #69	; 0x45
 8006cf8:	d103      	bne.n	8006d02 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006d00:	e002      	b.n	8006d08 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2203      	movs	r2, #3
 8006d06:	745a      	strb	r2, [r3, #17]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b31      	cmp	r3, #49	; 0x31
 8006d24:	d103      	bne.n	8006d2e <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006d2c:	e00a      	b.n	8006d44 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b32      	cmp	r3, #50	; 0x32
 8006d34:	d103      	bne.n	8006d3e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	771a      	strb	r2, [r3, #28]
}
 8006d3c:	e002      	b.n	8006d44 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2200      	movs	r2, #0
 8006d42:	771a      	strb	r2, [r3, #28]
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	0092      	lsls	r2, r2, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	4413      	add	r3, r2
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	3b10      	subs	r3, #16
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	76da      	strb	r2, [r3, #27]
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006d92:	f04f 0300 	mov.w	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	e03f      	b.n	8006e22 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4413      	add	r3, r2
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	2b2e      	cmp	r3, #46	; 0x2e
 8006dac:	d104      	bne.n	8006db8 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006dae:	2301      	movs	r3, #1
 8006db0:	74fb      	strb	r3, [r7, #19]
			i++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006db8:	7cfb      	ldrb	r3, [r7, #19]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01b      	beq.n	8006df6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	3b30      	subs	r3, #48	; 0x30
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fd fb8d 	bl	80044e8 <__aeabi_i2d>
 8006dce:	a31a      	add	r3, pc, #104	; (adr r3, 8006e38 <gps_ProcessAltitude+0xb0>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7fd fbf2 	bl	80045bc <__aeabi_dmul>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	f7fd fe9c 	bl	8004b1c <__aeabi_d2f>
 8006de4:	ee07 0a10 	vmov	s14, r0
 8006de8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006df4:	e018      	b.n	8006e28 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006dfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	3b30      	subs	r3, #48	; 0x30
 8006e0c:	ee07 3a90 	vmov	s15, r3
 8006e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e18:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b03      	cmp	r3, #3
 8006e26:	d9bc      	bls.n	8006da2 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	609a      	str	r2, [r3, #8]
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	9999999a 	.word	0x9999999a
 8006e3c:	3fb99999 	.word	0x3fb99999

08006e40 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	e03f      	b.n	8006eda <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	4413      	add	r3, r2
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b2e      	cmp	r3, #46	; 0x2e
 8006e64:	d104      	bne.n	8006e70 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006e66:	2301      	movs	r3, #1
 8006e68:	74fb      	strb	r3, [r7, #19]
			i++;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006e70:	7cfb      	ldrb	r3, [r7, #19]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01b      	beq.n	8006eae <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	3b30      	subs	r3, #48	; 0x30
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd fb31 	bl	80044e8 <__aeabi_i2d>
 8006e86:	a31a      	add	r3, pc, #104	; (adr r3, 8006ef0 <gps_ProcessAltitudeCorre+0xb0>)
 8006e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8c:	f7fd fb96 	bl	80045bc <__aeabi_dmul>
 8006e90:	4602      	mov	r2, r0
 8006e92:	460b      	mov	r3, r1
 8006e94:	4610      	mov	r0, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	f7fd fe40 	bl	8004b1c <__aeabi_d2f>
 8006e9c:	ee07 0a10 	vmov	s14, r0
 8006ea0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ea4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ea8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006eac:	e018      	b.n	8006ee0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eb2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006eb6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	3b30      	subs	r3, #48	; 0x30
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d9bc      	bls.n	8006e5a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	60da      	str	r2, [r3, #12]
}
 8006ee6:	bf00      	nop
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	9999999a 	.word	0x9999999a
 8006ef4:	3fb99999 	.word	0x3fb99999

08006ef8 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b0a0      	sub	sp, #128	; 0x80
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8006f00:	2300      	movs	r3, #0
 8006f02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t string[100] = {0};
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	f107 031c 	add.w	r3, r7, #28
 8006f0e:	2260      	movs	r2, #96	; 0x60
 8006f10:	2100      	movs	r1, #0
 8006f12:	4618      	mov	r0, r3
 8006f14:	f010 ff46 	bl	8017da4 <memset>
	uint8_t firmware_version[10] = {0};
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	f107 0310 	add.w	r3, r7, #16
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	809a      	strh	r2, [r3, #4]

	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8006f26:	2364      	movs	r3, #100	; 0x64
 8006f28:	2208      	movs	r2, #8
 8006f2a:	491b      	ldr	r1, [pc, #108]	; (8006f98 <WIOE5_Init+0xa0>)
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f008 f92f 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8006f32:	f107 0118 	add.w	r1, r7, #24
 8006f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f3a:	2264      	movs	r2, #100	; 0x64
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f008 f9bd 	bl	800f2bc <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8006f42:	f107 0318 	add.w	r3, r7, #24
 8006f46:	4915      	ldr	r1, [pc, #84]	; (8006f9c <WIOE5_Init+0xa4>)
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fd f969 	bl	8004220 <strcmp>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <WIOE5_Init+0x66>
		res++;
 8006f54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f58:	3301      	adds	r3, #1
 8006f5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	WIOE5_ReadFirmwareVersion(firmware_version, huart);
 8006f5e:	f107 030c 	add.w	r3, r7, #12
 8006f62:	6879      	ldr	r1, [r7, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 f877 	bl	8007058 <WIOE5_ReadFirmwareVersion>

	/*Set lora channel*/
	WIOE5_ChannelSwitch(LORA_CHANNEL_INIT,huart);
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	2003      	movs	r0, #3
 8006f6e:	f000 f819 	bl	8006fa4 <WIOE5_ChannelSwitch>
	/*Set data rate*/
	WIOE5_SetDataRate(LORA_868Mhz_FSK_50000BPS,huart);
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	2007      	movs	r0, #7
 8006f76:	f000 f8b3 	bl	80070e0 <WIOE5_SetDataRate>
	/*Set transmit power*/
	WIOE5_SetTxPower(LORA_868Mhz_16dBm, huart);
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	2010      	movs	r0, #16
 8006f7e:	f000 f909 	bl	8007194 <WIOE5_SetTxPower>

	/*Send 0x1234 5678*/
	WIOE5_SendData(305419896, huart);
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	4806      	ldr	r0, [pc, #24]	; (8006fa0 <WIOE5_Init+0xa8>)
 8006f86:	f000 f979 	bl	800727c <WIOE5_SendData>

	return res;
 8006f8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3780      	adds	r7, #128	; 0x80
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	08018f30 	.word	0x08018f30
 8006f9c:	08018f38 	.word	0x08018f38
 8006fa0:	12345678 	.word	0x12345678

08006fa4 <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b0a2      	sub	sp, #136	; 0x88
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	4603      	mov	r3, r0
 8006fac:	6039      	str	r1, [r7, #0]
 8006fae:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 8006fb0:	4a27      	ldr	r2, [pc, #156]	; (8007050 <WIOE5_ChannelSwitch+0xac>)
 8006fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fba:	6018      	str	r0, [r3, #0]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	8019      	strh	r1, [r3, #0]
 8006fc0:	3302      	adds	r3, #2
 8006fc2:	0c0a      	lsrs	r2, r1, #16
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006fca:	2200      	movs	r2, #0
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	609a      	str	r2, [r3, #8]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	3330      	adds	r3, #48	; 0x30
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	60bb      	str	r3, [r7, #8]
 8006fe4:	f107 030c 	add.w	r3, r7, #12
 8006fe8:	2260      	movs	r2, #96	; 0x60
 8006fea:	2100      	movs	r1, #0
 8006fec:	4618      	mov	r0, r3
 8006fee:	f010 fed9 	bl	8017da4 <memset>
	uint8_t res = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8006ff8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd f919 	bl	8004234 <strlen>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800700a:	4413      	add	r3, r2
 800700c:	4a11      	ldr	r2, [pc, #68]	; (8007054 <WIOE5_ChannelSwitch+0xb0>)
 800700e:	8811      	ldrh	r1, [r2, #0]
 8007010:	7892      	ldrb	r2, [r2, #2]
 8007012:	8019      	strh	r1, [r3, #0]
 8007014:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007016:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800701a:	2364      	movs	r3, #100	; 0x64
 800701c:	2219      	movs	r2, #25
 800701e:	6838      	ldr	r0, [r7, #0]
 8007020:	f008 f8b6 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007024:	f107 0108 	add.w	r1, r7, #8
 8007028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800702c:	2264      	movs	r2, #100	; 0x64
 800702e:	6838      	ldr	r0, [r7, #0]
 8007030:	f008 f944 	bl	800f2bc <HAL_UART_Receive>
	if(string[0]!='+'){
 8007034:	7a3b      	ldrb	r3, [r7, #8]
 8007036:	2b2b      	cmp	r3, #43	; 0x2b
 8007038:	d004      	beq.n	8007044 <WIOE5_ChannelSwitch+0xa0>
		res++;
 800703a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800703e:	3301      	adds	r3, #1
 8007040:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007044:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007048:	4618      	mov	r0, r3
 800704a:	3788      	adds	r7, #136	; 0x88
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	08018f48 	.word	0x08018f48
 8007054:	08018f44 	.word	0x08018f44

08007058 <WIOE5_ReadFirmwareVersion>:
/* Function use to read WIOE5 firmware version
 * INPUT:
 *    @version_output is an array of
 *	  @huart is a pointer on uart handdle
 * */
void WIOE5_ReadFirmwareVersion(uint8_t version_output[],UART_HandleTypeDef *huart){
 8007058:	b580      	push	{r7, lr}
 800705a:	b09c      	sub	sp, #112	; 0x70
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]

	uint8_t string[100] = {0};
 8007062:	2300      	movs	r3, #0
 8007064:	60bb      	str	r3, [r7, #8]
 8007066:	f107 030c 	add.w	r3, r7, #12
 800706a:	2260      	movs	r2, #96	; 0x60
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f010 fe98 	bl	8017da4 <memset>
	uint8_t index = 6;
 8007074:	2306      	movs	r3, #6
 8007076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_UART_Transmit(huart, "AT+VER\r\n", sizeof("AT+VER\r\n"), 100);
 800707a:	2364      	movs	r3, #100	; 0x64
 800707c:	2209      	movs	r2, #9
 800707e:	4917      	ldr	r1, [pc, #92]	; (80070dc <WIOE5_ReadFirmwareVersion+0x84>)
 8007080:	6838      	ldr	r0, [r7, #0]
 8007082:	f008 f885 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007086:	f107 0108 	add.w	r1, r7, #8
 800708a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800708e:	2264      	movs	r2, #100	; 0x64
 8007090:	6838      	ldr	r0, [r7, #0]
 8007092:	f008 f913 	bl	800f2bc <HAL_UART_Receive>

	while((string[index] != '\r') || (index > sizeof(string))){
 8007096:	e010      	b.n	80070ba <WIOE5_ReadFirmwareVersion+0x62>
		version_output[index-5] = string[index];
 8007098:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800709c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070a0:	3b05      	subs	r3, #5
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	440b      	add	r3, r1
 80070a6:	3270      	adds	r2, #112	; 0x70
 80070a8:	443a      	add	r2, r7
 80070aa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80070ae:	701a      	strb	r2, [r3, #0]
		index++;
 80070b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070b4:	3301      	adds	r3, #1
 80070b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while((string[index] != '\r') || (index > sizeof(string))){
 80070ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070be:	3370      	adds	r3, #112	; 0x70
 80070c0:	443b      	add	r3, r7
 80070c2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80070c6:	2b0d      	cmp	r3, #13
 80070c8:	d1e6      	bne.n	8007098 <WIOE5_ReadFirmwareVersion+0x40>
 80070ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070ce:	2b64      	cmp	r3, #100	; 0x64
 80070d0:	d8e2      	bhi.n	8007098 <WIOE5_ReadFirmwareVersion+0x40>
	}
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	3770      	adds	r7, #112	; 0x70
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	08018f64 	.word	0x08018f64

080070e0 <WIOE5_SetDataRate>:
 *    @dr is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetDataRate(uint8_t dr,UART_HandleTypeDef *huart){
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b0a2      	sub	sp, #136	; 0x88
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	6039      	str	r1, [r7, #0]
 80070ea:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+DR=";
 80070ec:	4a27      	ldr	r2, [pc, #156]	; (800718c <WIOE5_SetDataRate+0xac>)
 80070ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80070f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070f6:	6018      	str	r0, [r3, #0]
 80070f8:	3304      	adds	r3, #4
 80070fa:	8019      	strh	r1, [r3, #0]
 80070fc:	3302      	adds	r3, #2
 80070fe:	0c0a      	lsrs	r2, r1, #16
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8007106:	2200      	movs	r2, #0
 8007108:	601a      	str	r2, [r3, #0]
 800710a:	605a      	str	r2, [r3, #4]
 800710c:	609a      	str	r2, [r3, #8]
 800710e:	60da      	str	r2, [r3, #12]
 8007110:	821a      	strh	r2, [r3, #16]
	querry[6] =  (dr+'0');
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	3330      	adds	r3, #48	; 0x30
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	f107 030c 	add.w	r3, r7, #12
 8007124:	2260      	movs	r2, #96	; 0x60
 8007126:	2100      	movs	r1, #0
 8007128:	4618      	mov	r0, r3
 800712a:	f010 fe3b 	bl	8017da4 <memset>
	uint8_t res = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8007134:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007138:	4618      	mov	r0, r3
 800713a:	f7fd f87b 	bl	8004234 <strlen>
 800713e:	4603      	mov	r3, r0
 8007140:	461a      	mov	r2, r3
 8007142:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007146:	4413      	add	r3, r2
 8007148:	4a11      	ldr	r2, [pc, #68]	; (8007190 <WIOE5_SetDataRate+0xb0>)
 800714a:	8811      	ldrh	r1, [r2, #0]
 800714c:	7892      	ldrb	r2, [r2, #2]
 800714e:	8019      	strh	r1, [r3, #0]
 8007150:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007152:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007156:	2364      	movs	r3, #100	; 0x64
 8007158:	2219      	movs	r2, #25
 800715a:	6838      	ldr	r0, [r7, #0]
 800715c:	f008 f818 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007168:	2264      	movs	r2, #100	; 0x64
 800716a:	6838      	ldr	r0, [r7, #0]
 800716c:	f008 f8a6 	bl	800f2bc <HAL_UART_Receive>
	if(string[0]!='+'){
 8007170:	7a3b      	ldrb	r3, [r7, #8]
 8007172:	2b2b      	cmp	r3, #43	; 0x2b
 8007174:	d004      	beq.n	8007180 <WIOE5_SetDataRate+0xa0>
		res++;
 8007176:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800717a:	3301      	adds	r3, #1
 800717c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007180:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007184:	4618      	mov	r0, r3
 8007186:	3788      	adds	r7, #136	; 0x88
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	08018f70 	.word	0x08018f70
 8007190:	08018f44 	.word	0x08018f44

08007194 <WIOE5_SetTxPower>:
 *    @tx_power is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetTxPower(uint8_t tx_power,UART_HandleTypeDef *huart){
 8007194:	b580      	push	{r7, lr}
 8007196:	b0a2      	sub	sp, #136	; 0x88
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+POWER=";
 80071a0:	4a33      	ldr	r2, [pc, #204]	; (8007270 <WIOE5_SetTxPower+0xdc>)
 80071a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80071a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80071a8:	c303      	stmia	r3!, {r0, r1}
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	609a      	str	r2, [r3, #8]
 80071b8:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t string[100] = {0};
 80071bc:	2300      	movs	r3, #0
 80071be:	60bb      	str	r3, [r7, #8]
 80071c0:	f107 030c 	add.w	r3, r7, #12
 80071c4:	2260      	movs	r2, #96	; 0x60
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f010 fdeb 	bl	8017da4 <memset>
	uint8_t res = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if(tx_power < 10){	/*Two digit at least*/
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d805      	bhi.n	80071e6 <WIOE5_SetTxPower+0x52>
		querry[9] =  (tx_power+'0');
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	3330      	adds	r3, #48	; 0x30
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80071e4:	e018      	b.n	8007218 <WIOE5_SetTxPower+0x84>
	}
	else{
		querry[9] =  ((tx_power/10)+'0');
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <WIOE5_SetTxPower+0xe0>)
 80071ea:	fba2 2303 	umull	r2, r3, r2, r3
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	3330      	adds	r3, #48	; 0x30
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		querry[10] =  ((tx_power%10)+'0');
 80071fa:	79fa      	ldrb	r2, [r7, #7]
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <WIOE5_SetTxPower+0xe0>)
 80071fe:	fba3 1302 	umull	r1, r3, r3, r2
 8007202:	08d9      	lsrs	r1, r3, #3
 8007204:	460b      	mov	r3, r1
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	3330      	adds	r3, #48	; 0x30
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	strcat(querry, "\r\n");
 8007218:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd f809 	bl	8004234 <strlen>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800722a:	4413      	add	r3, r2
 800722c:	4a12      	ldr	r2, [pc, #72]	; (8007278 <WIOE5_SetTxPower+0xe4>)
 800722e:	8811      	ldrh	r1, [r2, #0]
 8007230:	7892      	ldrb	r2, [r2, #2]
 8007232:	8019      	strh	r1, [r3, #0]
 8007234:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007236:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800723a:	2364      	movs	r3, #100	; 0x64
 800723c:	2219      	movs	r2, #25
 800723e:	6838      	ldr	r0, [r7, #0]
 8007240:	f007 ffa6 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007244:	f107 0108 	add.w	r1, r7, #8
 8007248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800724c:	2264      	movs	r2, #100	; 0x64
 800724e:	6838      	ldr	r0, [r7, #0]
 8007250:	f008 f834 	bl	800f2bc <HAL_UART_Receive>
	if(string[0]!='+'){
 8007254:	7a3b      	ldrb	r3, [r7, #8]
 8007256:	2b2b      	cmp	r3, #43	; 0x2b
 8007258:	d004      	beq.n	8007264 <WIOE5_SetTxPower+0xd0>
		res++;
 800725a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800725e:	3301      	adds	r3, #1
 8007260:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007264:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007268:	4618      	mov	r0, r3
 800726a:	3788      	adds	r7, #136	; 0x88
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	08018f8c 	.word	0x08018f8c
 8007274:	cccccccd 	.word	0xcccccccd
 8007278:	08018f44 	.word	0x08018f44

0800727c <WIOE5_SendData>:
 *    @data is an integer - this is the 4 byte to send
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendData(uint32_t data,UART_HandleTypeDef *huart){
 800727c:	b580      	push	{r7, lr}
 800727e:	b0a6      	sub	sp, #152	; 0x98
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]

	uint8_t querry[30] = "AT+MSGHEX=";
 8007286:	4a44      	ldr	r2, [pc, #272]	; (8007398 <WIOE5_SendData+0x11c>)
 8007288:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800728c:	ca07      	ldmia	r2, {r0, r1, r2}
 800728e:	c303      	stmia	r3!, {r0, r1}
 8007290:	801a      	strh	r2, [r3, #0]
 8007292:	3302      	adds	r3, #2
 8007294:	0c12      	lsrs	r2, r2, #16
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 800729c:	2200      	movs	r2, #0
 800729e:	601a      	str	r2, [r3, #0]
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	609a      	str	r2, [r3, #8]
 80072a4:	60da      	str	r2, [r3, #12]
 80072a6:	f8c3 200f 	str.w	r2, [r3, #15]
	querry[10] = '"';
 80072aa:	2322      	movs	r3, #34	; 0x22
 80072ac:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	uint8_t hex_char = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t res;
	uint8_t string[100] = {0};
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	2260      	movs	r2, #96	; 0x60
 80072c0:	2100      	movs	r1, #0
 80072c2:	4618      	mov	r0, r3
 80072c4:	f010 fd6e 	bl	8017da4 <memset>

	/*Split 32 bits into 4 byte*/
	for(int i=0;i<8;i++){
 80072c8:	2300      	movs	r3, #0
 80072ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ce:	e02c      	b.n	800732a <WIOE5_SendData+0xae>
		hex_char = (data&(0xf<<(i*4)))>>(i*4);
 80072d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	220f      	movs	r2, #15
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	401a      	ands	r2, r3
 80072e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
 80072ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if(hex_char > 10){
 80072f0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072f4:	2b0a      	cmp	r3, #10
 80072f6:	d905      	bls.n	8007304 <WIOE5_SendData+0x88>
			hex_char = hex_char + 55;
 80072f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80072fc:	3337      	adds	r3, #55	; 0x37
 80072fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007302:	e004      	b.n	800730e <WIOE5_SendData+0x92>
		}
		else{
			hex_char = hex_char + 48;
 8007304:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007308:	3330      	adds	r3, #48	; 0x30
 800730a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		querry[11+i] = hex_char;
 800730e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007312:	330b      	adds	r3, #11
 8007314:	3398      	adds	r3, #152	; 0x98
 8007316:	443b      	add	r3, r7
 8007318:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800731c:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(int i=0;i<8;i++){
 8007320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007324:	3301      	adds	r3, #1
 8007326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800732a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800732e:	2b07      	cmp	r3, #7
 8007330:	ddce      	ble.n	80072d0 <WIOE5_SendData+0x54>
	}
	querry[19] = '"';
 8007332:	2322      	movs	r3, #34	; 0x22
 8007334:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	strcat(querry,"\r\n");
 8007338:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800733c:	4618      	mov	r0, r3
 800733e:	f7fc ff79 	bl	8004234 <strlen>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800734a:	4413      	add	r3, r2
 800734c:	4a13      	ldr	r2, [pc, #76]	; (800739c <WIOE5_SendData+0x120>)
 800734e:	8811      	ldrh	r1, [r2, #0]
 8007350:	7892      	ldrb	r2, [r2, #2]
 8007352:	8019      	strh	r1, [r3, #0]
 8007354:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007356:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800735a:	2364      	movs	r3, #100	; 0x64
 800735c:	221e      	movs	r2, #30
 800735e:	6838      	ldr	r0, [r7, #0]
 8007360:	f007 ff16 	bl	800f190 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007364:	f107 010c 	add.w	r1, r7, #12
 8007368:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800736c:	2264      	movs	r2, #100	; 0x64
 800736e:	6838      	ldr	r0, [r7, #0]
 8007370:	f007 ffa4 	bl	800f2bc <HAL_UART_Receive>

	/*Check if receive a DONE*/
	if(strcmp("+MSGHEX: Start\r\n",string)!=0x00){
 8007374:	f107 030c 	add.w	r3, r7, #12
 8007378:	4619      	mov	r1, r3
 800737a:	4809      	ldr	r0, [pc, #36]	; (80073a0 <WIOE5_SendData+0x124>)
 800737c:	f7fc ff50 	bl	8004220 <strcmp>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <WIOE5_SendData+0x110>
		res = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	}
	return res;
 800738c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
}
 8007390:	4618      	mov	r0, r3
 8007392:	3798      	adds	r7, #152	; 0x98
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	08018fbc 	.word	0x08018fbc
 800739c:	08018f44 	.word	0x08018f44
 80073a0:	08018fa8 	.word	0x08018fa8

080073a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004000;
 80073a8:	4b1c      	ldr	r3, [pc, #112]	; (800741c <main+0x78>)
 80073aa:	4a1d      	ldr	r2, [pc, #116]	; (8007420 <main+0x7c>)
 80073ac:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80073ae:	b662      	cpsie	i
}
 80073b0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80073b2:	f001 f84c 	bl	800844e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80073b6:	f000 f83d 	bl	8007434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80073ba:	f7ff f8ad 	bl	8006518 <MX_GPIO_Init>
  MX_DMA_Init();
 80073be:	f7ff f881 	bl	80064c4 <MX_DMA_Init>
  MX_I2C2_Init();
 80073c2:	f7ff f925 	bl	8006610 <MX_I2C2_Init>
  MX_TIM2_Init();
 80073c6:	f000 fcf3 	bl	8007db0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80073ca:	f000 fd49 	bl	8007e60 <MX_TIM3_Init>
  MX_TIM4_Init();
 80073ce:	f000 fda1 	bl	8007f14 <MX_TIM4_Init>
  MX_UART4_Init();
 80073d2:	f000 feb7 	bl	8008144 <MX_UART4_Init>
  MX_UART5_Init();
 80073d6:	f000 ff01 	bl	80081dc <MX_UART5_Init>
  MX_ADC2_Init();
 80073da:	f7fd fd6d 	bl	8004eb8 <MX_ADC2_Init>
  MX_USB_Device_Init();
 80073de:	f00f ffdd 	bl	801739c <MX_USB_Device_Init>
  MX_SPI1_Init();
 80073e2:	f000 fb5f 	bl	8007aa4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80073e6:	2100      	movs	r1, #0
 80073e8:	480e      	ldr	r0, [pc, #56]	; (8007424 <main+0x80>)
 80073ea:	f006 fddf 	bl	800dfac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80073ee:	2100      	movs	r1, #0
 80073f0:	480d      	ldr	r0, [pc, #52]	; (8007428 <main+0x84>)
 80073f2:	f006 fddb 	bl	800dfac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80073f6:	2104      	movs	r1, #4
 80073f8:	480b      	ldr	r0, [pc, #44]	; (8007428 <main+0x84>)
 80073fa:	f006 fdd7 	bl	800dfac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80073fe:	210c      	movs	r1, #12
 8007400:	4809      	ldr	r0, [pc, #36]	; (8007428 <main+0x84>)
 8007402:	f006 fdd3 	bl	800dfac <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8007406:	2203      	movs	r2, #3
 8007408:	4908      	ldr	r1, [pc, #32]	; (800742c <main+0x88>)
 800740a:	4809      	ldr	r0, [pc, #36]	; (8007430 <main+0x8c>)
 800740c:	f001 fc5c 	bl	8008cc8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8007410:	f7fd ff84 	bl	800531c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8007414:	f00d febf 	bl	8015196 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007418:	e7fe      	b.n	8007418 <main+0x74>
 800741a:	bf00      	nop
 800741c:	e000ed00 	.word	0xe000ed00
 8007420:	08004000 	.word	0x08004000
 8007424:	200009dc 	.word	0x200009dc
 8007428:	20000a28 	.word	0x20000a28
 800742c:	200008d8 	.word	0x200008d8
 8007430:	2000020c 	.word	0x2000020c

08007434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b094      	sub	sp, #80	; 0x50
 8007438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800743a:	f107 0318 	add.w	r3, r7, #24
 800743e:	2238      	movs	r2, #56	; 0x38
 8007440:	2100      	movs	r1, #0
 8007442:	4618      	mov	r0, r3
 8007444:	f010 fcae 	bl	8017da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007448:	1d3b      	adds	r3, r7, #4
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	605a      	str	r2, [r3, #4]
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	60da      	str	r2, [r3, #12]
 8007454:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007456:	f44f 7000 	mov.w	r0, #512	; 0x200
 800745a:	f005 fb73 	bl	800cb44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800745e:	2322      	movs	r3, #34	; 0x22
 8007460:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007462:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007468:	2340      	movs	r3, #64	; 0x40
 800746a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800746c:	2301      	movs	r3, #1
 800746e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007470:	2302      	movs	r3, #2
 8007472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007474:	2302      	movs	r3, #2
 8007476:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007478:	2304      	movs	r3, #4
 800747a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800747c:	234b      	movs	r3, #75	; 0x4b
 800747e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007480:	2302      	movs	r3, #2
 8007482:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007484:	2302      	movs	r3, #2
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007488:	2302      	movs	r3, #2
 800748a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800748c:	f107 0318 	add.w	r3, r7, #24
 8007490:	4618      	mov	r0, r3
 8007492:	f005 fbfb 	bl	800cc8c <HAL_RCC_OscConfig>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800749c:	f000 f82a 	bl	80074f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074a0:	230f      	movs	r3, #15
 80074a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074a4:	2303      	movs	r3, #3
 80074a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074ac:	2300      	movs	r3, #0
 80074ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80074b4:	1d3b      	adds	r3, r7, #4
 80074b6:	2104      	movs	r1, #4
 80074b8:	4618      	mov	r0, r3
 80074ba:	f005 feff 	bl	800d2bc <HAL_RCC_ClockConfig>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80074c4:	f000 f816 	bl	80074f4 <Error_Handler>
  }
}
 80074c8:	bf00      	nop
 80074ca:	3750      	adds	r7, #80	; 0x50
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a04      	ldr	r2, [pc, #16]	; (80074f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d101      	bne.n	80074e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80074e2:	f000 ffcd 	bl	8008480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80074e6:	bf00      	nop
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00

080074f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80074f8:	b672      	cpsid	i
}
 80074fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80074fc:	e7fe      	b.n	80074fc <Error_Handler+0x8>

080074fe <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 80074fe:	b480      	push	{r7}
 8007500:	b085      	sub	sp, #20
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	edd3 7a02 	vldr	s15, [r3, #8]
 8007514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007518:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	ee07 3a90 	vmov	s15, r3
}
 8007522:	eeb0 0a67 	vmov.f32	s0, s15
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	edd3 7a03 	vldr	s15, [r3, #12]
 8007546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800754a:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	ee07 3a90 	vmov	s15, r3
}
 8007554:	eeb0 0a67 	vmov.f32	s0, s15
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	edd3 7a04 	vldr	s15, [r3, #16]
 8007578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800757c:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	ee07 3a90 	vmov	s15, r3
}
 8007586:	eeb0 0a67 	vmov.f32	s0, s15
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	ed87 0a02 	vstr	s0, [r7, #8]
 80075a0:	edc7 0a01 	vstr	s1, [r7, #4]
 80075a4:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 80075ba:	2101      	movs	r1, #1
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f010 fbd3 	bl	8017d68 <arm_pid_init_f32>

}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b08a      	sub	sp, #40	; 0x28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68b8      	ldr	r0, [r7, #8]
 80075dc:	f7ff ffa8 	bl	8007530 <Pid_CalculateYawError>
 80075e0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	ed93 7a00 	vldr	s14, [r3]
 80075f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80075f6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	edd3 6a01 	vldr	s13, [r3, #4]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	edd3 7a03 	vldr	s15, [r3, #12]
 8007606:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800760a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	edd3 6a02 	vldr	s13, [r3, #8]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	edd3 7a04 	vldr	s15, [r3, #16]
 800761a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800761e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800762c:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8007644:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007646:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8007648:	bf00      	nop
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	; 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f7ff ff7e 	bl	8007562 <Pid_CalculateRollError>
 8007666:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	61fb      	str	r3, [r7, #28]
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	ed93 7a00 	vldr	s14, [r3]
 8007678:	edd7 7a06 	vldr	s15, [r7, #24]
 800767c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	edd3 6a01 	vldr	s13, [r3, #4]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	edd3 7a03 	vldr	s15, [r3, #12]
 800768c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007690:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	edd3 6a02 	vldr	s13, [r3, #8]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	edd3 7a04 	vldr	s15, [r3, #16]
 80076a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80076ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076b2:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	615a      	str	r2, [r3, #20]
    return (out);
 80076ca:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 80076cc:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076da:	edd7 7a08 	vldr	s15, [r7, #32]
 80076de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076e2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80077d4 <Pid_CompensateRoll+0x184>
 80076e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ee:	dd04      	ble.n	80076fa <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80076f6:	625a      	str	r2, [r3, #36]	; 0x24
 80076f8:	e025      	b.n	8007746 <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007706:	edd7 7a08 	vldr	s15, [r7, #32]
 800770a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800770e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80077d8 <Pid_CompensateRoll+0x188>
 8007712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800771a:	d504      	bpl.n	8007726 <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	f240 5214 	movw	r2, #1300	; 0x514
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
 8007724:	e00f      	b.n	8007746 <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007732:	edd7 7a08 	vldr	s15, [r7, #32]
 8007736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800773a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773e:	ee17 2a90 	vmov	r2, s15
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007752:	edd7 7a08 	vldr	s15, [r7, #32]
 8007756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800775a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80077d4 <Pid_CompensateRoll+0x184>
 800775e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	dd04      	ble.n	8007772 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800776e:	629a      	str	r2, [r3, #40]	; 0x28
 8007770:	e025      	b.n	80077be <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800777e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007786:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80077d8 <Pid_CompensateRoll+0x188>
 800778a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800778e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007792:	d504      	bpl.n	800779e <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f240 5214 	movw	r2, #1300	; 0x514
 800779a:	629a      	str	r2, [r3, #40]	; 0x28
 800779c:	e00f      	b.n	80077be <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80077aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80077ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077b6:	ee17 2a90 	vmov	r2, s15
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80077be:	6838      	ldr	r0, [r7, #0]
 80077c0:	f000 f8d2 	bl	8007968 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80077c4:	6838      	ldr	r0, [r7, #0]
 80077c6:	f000 f8ed 	bl	80079a4 <PropulsionAndControl_UpdateRightFlaps>

}
 80077ca:	bf00      	nop
 80077cc:	3728      	adds	r7, #40	; 0x28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	455ac000 	.word	0x455ac000
 80077d8:	44a28000 	.word	0x44a28000

080077dc <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	; 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	68b8      	ldr	r0, [r7, #8]
 80077ee:	f7ff fe86 	bl	80074fe <Pid_CalculatePitchError>
 80077f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	61fb      	str	r3, [r7, #28]
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	ed93 7a00 	vldr	s14, [r3]
 8007804:	edd7 7a06 	vldr	s15, [r7, #24]
 8007808:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	edd3 7a03 	vldr	s15, [r3, #12]
 8007818:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800781c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	edd3 6a02 	vldr	s13, [r3, #8]
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	edd3 7a04 	vldr	s15, [r3, #16]
 800782c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800783a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800783e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	615a      	str	r2, [r3, #20]
    return (out);
 8007856:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007858:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	ee07 3a90 	vmov	s15, r3
 8007862:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007866:	edd7 7a08 	vldr	s15, [r7, #32]
 800786a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800786e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007960 <Pid_CompensatePitch+0x184>
 8007872:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800787a:	dd04      	ble.n	8007886 <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007882:	625a      	str	r2, [r3, #36]	; 0x24
 8007884:	e025      	b.n	80078d2 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007892:	edd7 7a08 	vldr	s15, [r7, #32]
 8007896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800789a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007964 <Pid_CompensatePitch+0x188>
 800789e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a6:	d504      	bpl.n	80078b2 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	f240 5214 	movw	r2, #1300	; 0x514
 80078ae:	625a      	str	r2, [r3, #36]	; 0x24
 80078b0:	e00f      	b.n	80078d2 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078be:	edd7 7a08 	vldr	s15, [r7, #32]
 80078c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ca:	ee17 2a90 	vmov	r2, s15
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078de:	edd7 7a08 	vldr	s15, [r7, #32]
 80078e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078e6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007960 <Pid_CompensatePitch+0x184>
 80078ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f2:	dd04      	ble.n	80078fe <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28
 80078fc:	e025      	b.n	800794a <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800790a:	edd7 7a08 	vldr	s15, [r7, #32]
 800790e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007912:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007964 <Pid_CompensatePitch+0x188>
 8007916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800791a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791e:	d504      	bpl.n	800792a <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	f240 5214 	movw	r2, #1300	; 0x514
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
 8007928:	e00f      	b.n	800794a <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007936:	edd7 7a08 	vldr	s15, [r7, #32]
 800793a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800793e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007942:	ee17 2a90 	vmov	r2, s15
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800794a:	6838      	ldr	r0, [r7, #0]
 800794c:	f000 f80c 	bl	8007968 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007950:	6838      	ldr	r0, [r7, #0]
 8007952:	f000 f827 	bl	80079a4 <PropulsionAndControl_UpdateRightFlaps>

}
 8007956:	bf00      	nop
 8007958:	3728      	adds	r7, #40	; 0x28
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	455ac000 	.word	0x455ac000
 8007964:	44a28000 	.word	0x44a28000

08007968 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3334      	adds	r3, #52	; 0x34
 8007978:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7f5b      	ldrb	r3, [r3, #29]
 800797e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007982:	3b01      	subs	r3, #1
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800798e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3334      	adds	r3, #52	; 0x34
 80079b4:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7f9b      	ldrb	r3, [r3, #30]
 80079ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079be:	3b01      	subs	r3, #1
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4413      	add	r3, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80079ca:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80079d4:	bf00      	nop
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
 80079ec:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 80079fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2e:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8007a30:	2014      	movs	r0, #20
 8007a32:	f000 fd43 	bl	80084bc <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f240 5214 	movw	r2, #1300	; 0x514
 8007a3c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f7ff ff92 	bl	8007968 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007a4a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff ffa9 	bl	80079a4 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8007a52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007a56:	f000 fd31 	bl	80084bc <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f7ff ff80 	bl	8007968 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f240 5214 	movw	r2, #1300	; 0x514
 8007a6e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff ff97 	bl	80079a4 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 8007a76:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007a7a:	f000 fd1f 	bl	80084bc <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff ff6e 	bl	8007968 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007a92:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f7ff ff85 	bl	80079a4 <PropulsionAndControl_UpdateRightFlaps>
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
	...

08007aa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007aa8:	4b1b      	ldr	r3, [pc, #108]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <MX_SPI1_Init+0x78>)
 8007aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007abe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007ac2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ac4:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007aca:	4b13      	ldr	r3, [pc, #76]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ad6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007ad8:	4b0f      	ldr	r3, [pc, #60]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ada:	2228      	movs	r2, #40	; 0x28
 8007adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007ade:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007aea:	4b0b      	ldr	r3, [pc, #44]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007af0:	4b09      	ldr	r3, [pc, #36]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007af2:	2207      	movs	r2, #7
 8007af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007af8:	2200      	movs	r2, #0
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007afc:	4b06      	ldr	r3, [pc, #24]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007afe:	2200      	movs	r2, #0
 8007b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007b02:	4805      	ldr	r0, [pc, #20]	; (8007b18 <MX_SPI1_Init+0x74>)
 8007b04:	f006 f876 	bl	800dbf4 <HAL_SPI_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007b0e:	f7ff fcf1 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200008e0 	.word	0x200008e0
 8007b1c:	40013000 	.word	0x40013000

08007b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	; 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b28:	f107 0314 	add.w	r3, r7, #20
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	605a      	str	r2, [r3, #4]
 8007b32:	609a      	str	r2, [r3, #8]
 8007b34:	60da      	str	r2, [r3, #12]
 8007b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <HAL_SPI_MspInit+0x7c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d128      	bne.n	8007b94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b42:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b46:	4a16      	ldr	r2, [pc, #88]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b4c:	6613      	str	r3, [r2, #96]	; 0x60
 8007b4e:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	4a10      	ldr	r2, [pc, #64]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b66:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <HAL_SPI_MspInit+0x80>)
 8007b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007b72:	23e0      	movs	r3, #224	; 0xe0
 8007b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b76:	2302      	movs	r3, #2
 8007b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b82:	2305      	movs	r3, #5
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b86:	f107 0314 	add.w	r3, r7, #20
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b90:	f002 fad4 	bl	800a13c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007b94:	bf00      	nop
 8007b96:	3728      	adds	r7, #40	; 0x28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40013000 	.word	0x40013000
 8007ba0:	40021000 	.word	0x40021000

08007ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007baa:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bae:	4a10      	ldr	r2, [pc, #64]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bb0:	f043 0301 	orr.w	r3, r3, #1
 8007bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8007bb6:	4b0e      	ldr	r3, [pc, #56]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bba:	f003 0301 	and.w	r3, r3, #1
 8007bbe:	607b      	str	r3, [r7, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007bc2:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8007bce:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <HAL_MspInit+0x4c>)
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007bda:	2200      	movs	r2, #0
 8007bdc:	210f      	movs	r1, #15
 8007bde:	f06f 0001 	mvn.w	r0, #1
 8007be2:	f001 ff51 	bl	8009a88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007be6:	bf00      	nop
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40021000 	.word	0x40021000

08007bf4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	; 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007c00:	2300      	movs	r3, #0
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007c04:	4b2c      	ldr	r3, [pc, #176]	; (8007cb8 <HAL_InitTick+0xc4>)
 8007c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c08:	4a2b      	ldr	r2, [pc, #172]	; (8007cb8 <HAL_InitTick+0xc4>)
 8007c0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8007c10:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <HAL_InitTick+0xc4>)
 8007c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007c1c:	f107 020c 	add.w	r2, r7, #12
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	4611      	mov	r1, r2
 8007c26:	4618      	mov	r0, r3
 8007c28:	f005 fd1e 	bl	800d668 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007c2c:	f005 fd06 	bl	800d63c <HAL_RCC_GetPCLK2Freq>
 8007c30:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c34:	4a21      	ldr	r2, [pc, #132]	; (8007cbc <HAL_InitTick+0xc8>)
 8007c36:	fba2 2303 	umull	r2, r3, r2, r3
 8007c3a:	0c9b      	lsrs	r3, r3, #18
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007c40:	4b1f      	ldr	r3, [pc, #124]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c42:	4a20      	ldr	r2, [pc, #128]	; (8007cc4 <HAL_InitTick+0xd0>)
 8007c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007c46:	4b1e      	ldr	r3, [pc, #120]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007c4e:	4a1c      	ldr	r2, [pc, #112]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007c54:	4b1a      	ldr	r3, [pc, #104]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c5a:	4b19      	ldr	r3, [pc, #100]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007c60:	4817      	ldr	r0, [pc, #92]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c62:	f006 f872 	bl	800dd4a <HAL_TIM_Base_Init>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d11b      	bne.n	8007cac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007c74:	4812      	ldr	r0, [pc, #72]	; (8007cc0 <HAL_InitTick+0xcc>)
 8007c76:	f006 f8c9 	bl	800de0c <HAL_TIM_Base_Start_IT>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d111      	bne.n	8007cac <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007c88:	2019      	movs	r0, #25
 8007c8a:	f001 ff17 	bl	8009abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b0f      	cmp	r3, #15
 8007c92:	d808      	bhi.n	8007ca6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007c94:	2200      	movs	r2, #0
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	2019      	movs	r0, #25
 8007c9a:	f001 fef5 	bl	8009a88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007c9e:	4a0a      	ldr	r2, [pc, #40]	; (8007cc8 <HAL_InitTick+0xd4>)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6013      	str	r3, [r2, #0]
 8007ca4:	e002      	b.n	8007cac <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3730      	adds	r7, #48	; 0x30
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40021000 	.word	0x40021000
 8007cbc:	431bde83 	.word	0x431bde83
 8007cc0:	20000944 	.word	0x20000944
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	20000008 	.word	0x20000008

08007ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007cd0:	e7fe      	b.n	8007cd0 <NMI_Handler+0x4>

08007cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007cd6:	e7fe      	b.n	8007cd6 <HardFault_Handler+0x4>

08007cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007cdc:	e7fe      	b.n	8007cdc <MemManage_Handler+0x4>

08007cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ce2:	e7fe      	b.n	8007ce2 <BusFault_Handler+0x4>

08007ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ce8:	e7fe      	b.n	8007ce8 <UsageFault_Handler+0x4>

08007cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007cea:	b480      	push	{r7}
 8007cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007cee:	bf00      	nop
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007cfc:	4802      	ldr	r0, [pc, #8]	; (8007d08 <DMA1_Channel1_IRQHandler+0x10>)
 8007cfe:	f002 f8ce 	bl	8009e9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000278 	.word	0x20000278

08007d0c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007d10:	4802      	ldr	r0, [pc, #8]	; (8007d1c <USB_LP_IRQHandler+0x10>)
 8007d12:	f003 faeb 	bl	800b2ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007d16:	bf00      	nop
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200051c0 	.word	0x200051c0

08007d20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007d24:	4802      	ldr	r0, [pc, #8]	; (8007d30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007d26:	f006 fa53 	bl	800e1d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20000944 	.word	0x20000944

08007d34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8007d38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007d3c:	f002 fbb2 	bl	800a4a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8007d40:	4805      	ldr	r0, [pc, #20]	; (8007d58 <EXTI15_10_IRQHandler+0x24>)
 8007d42:	f7fe f850 	bl	8005de6 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <EXTI15_10_IRQHandler+0x28>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f00d fd0b 	bl	8015768 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007d52:	bf00      	nop
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20000374 	.word	0x20000374
 8007d5c:	20000370 	.word	0x20000370

08007d60 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007d64:	4805      	ldr	r0, [pc, #20]	; (8007d7c <UART4_IRQHandler+0x1c>)
 8007d66:	f007 fbd3 	bl	800f510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8007d6a:	4b05      	ldr	r3, [pc, #20]	; (8007d80 <UART4_IRQHandler+0x20>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4618      	mov	r0, r3
 8007d72:	f00d fcf9 	bl	8015768 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000a74 	.word	0x20000a74
 8007d80:	2000036c 	.word	0x2000036c

08007d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007d84:	b480      	push	{r7}
 8007d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007d88:	4b08      	ldr	r3, [pc, #32]	; (8007dac <SystemInit+0x28>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8e:	4a07      	ldr	r2, [pc, #28]	; (8007dac <SystemInit+0x28>)
 8007d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <SystemInit+0x28>)
 8007d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d9e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007da0:	bf00      	nop
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	e000ed00 	.word	0xe000ed00

08007db0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08a      	sub	sp, #40	; 0x28
 8007db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007db6:	f107 031c 	add.w	r3, r7, #28
 8007dba:	2200      	movs	r2, #0
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	605a      	str	r2, [r3, #4]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	60da      	str	r2, [r3, #12]
 8007dce:	611a      	str	r2, [r3, #16]
 8007dd0:	615a      	str	r2, [r3, #20]
 8007dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007dd4:	4b20      	ldr	r3, [pc, #128]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007dd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007dda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007ddc:	4b1e      	ldr	r3, [pc, #120]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007de2:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 8007de8:	4b1b      	ldr	r3, [pc, #108]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007dea:	4a1c      	ldr	r2, [pc, #112]	; (8007e5c <MX_TIM2_Init+0xac>)
 8007dec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dee:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007df4:	4b18      	ldr	r3, [pc, #96]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007dfa:	4817      	ldr	r0, [pc, #92]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007dfc:	f006 f87e 	bl	800defc <HAL_TIM_PWM_Init>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8007e06:	f7ff fb75 	bl	80074f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e12:	f107 031c 	add.w	r3, r7, #28
 8007e16:	4619      	mov	r1, r3
 8007e18:	480f      	ldr	r0, [pc, #60]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007e1a:	f007 f88d 	bl	800ef38 <HAL_TIMEx_MasterConfigSynchronization>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8007e24:	f7ff fb66 	bl	80074f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e28:	2360      	movs	r3, #96	; 0x60
 8007e2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e34:	2300      	movs	r3, #0
 8007e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007e38:	463b      	mov	r3, r7
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	4806      	ldr	r0, [pc, #24]	; (8007e58 <MX_TIM2_Init+0xa8>)
 8007e40:	f006 fb46 	bl	800e4d0 <HAL_TIM_PWM_ConfigChannel>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007e4a:	f7ff fb53 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007e4e:	bf00      	nop
 8007e50:	3728      	adds	r7, #40	; 0x28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000990 	.word	0x20000990
 8007e5c:	0015f900 	.word	0x0015f900

08007e60 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e66:	f107 031c 	add.w	r3, r7, #28
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	605a      	str	r2, [r3, #4]
 8007e70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007e72:	463b      	mov	r3, r7
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	605a      	str	r2, [r3, #4]
 8007e7a:	609a      	str	r2, [r3, #8]
 8007e7c:	60da      	str	r2, [r3, #12]
 8007e7e:	611a      	str	r2, [r3, #16]
 8007e80:	615a      	str	r2, [r3, #20]
 8007e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007e84:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007e86:	4a22      	ldr	r2, [pc, #136]	; (8007f10 <MX_TIM3_Init+0xb0>)
 8007e88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007e8c:	2232      	movs	r2, #50	; 0x32
 8007e8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e90:	4b1e      	ldr	r3, [pc, #120]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007e98:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8007e9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e9e:	4b1b      	ldr	r3, [pc, #108]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ea4:	4b19      	ldr	r3, [pc, #100]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007eaa:	4818      	ldr	r0, [pc, #96]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007eac:	f006 f826 	bl	800defc <HAL_TIM_PWM_Init>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8007eb6:	f7ff fb1d 	bl	80074f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ec2:	f107 031c 	add.w	r3, r7, #28
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4810      	ldr	r0, [pc, #64]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007eca:	f007 f835 	bl	800ef38 <HAL_TIMEx_MasterConfigSynchronization>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007ed4:	f7ff fb0e 	bl	80074f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ed8:	2360      	movs	r3, #96	; 0x60
 8007eda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007edc:	2300      	movs	r3, #0
 8007ede:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ee8:	463b      	mov	r3, r7
 8007eea:	2200      	movs	r2, #0
 8007eec:	4619      	mov	r1, r3
 8007eee:	4807      	ldr	r0, [pc, #28]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007ef0:	f006 faee 	bl	800e4d0 <HAL_TIM_PWM_ConfigChannel>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8007efa:	f7ff fafb 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007efe:	4803      	ldr	r0, [pc, #12]	; (8007f0c <MX_TIM3_Init+0xac>)
 8007f00:	f000 f8c2 	bl	8008088 <HAL_TIM_MspPostInit>

}
 8007f04:	bf00      	nop
 8007f06:	3728      	adds	r7, #40	; 0x28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	200009dc 	.word	0x200009dc
 8007f10:	40000400 	.word	0x40000400

08007f14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	; 0x28
 8007f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f1a:	f107 031c 	add.w	r3, r7, #28
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	605a      	str	r2, [r3, #4]
 8007f24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007f26:	463b      	mov	r3, r7
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	609a      	str	r2, [r3, #8]
 8007f30:	60da      	str	r2, [r3, #12]
 8007f32:	611a      	str	r2, [r3, #16]
 8007f34:	615a      	str	r2, [r3, #20]
 8007f36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007f38:	4b2e      	ldr	r3, [pc, #184]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f3a:	4a2f      	ldr	r2, [pc, #188]	; (8007ff8 <MX_TIM4_Init+0xe4>)
 8007f3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8007f3e:	4b2d      	ldr	r3, [pc, #180]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f40:	2232      	movs	r2, #50	; 0x32
 8007f42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f44:	4b2b      	ldr	r3, [pc, #172]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8007f4a:	4b2a      	ldr	r3, [pc, #168]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f4c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007f50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f52:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f58:	4b26      	ldr	r3, [pc, #152]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007f5e:	4825      	ldr	r0, [pc, #148]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f60:	f005 ffcc 	bl	800defc <HAL_TIM_PWM_Init>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8007f6a:	f7ff fac3 	bl	80074f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007f76:	f107 031c 	add.w	r3, r7, #28
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	481d      	ldr	r0, [pc, #116]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007f7e:	f006 ffdb 	bl	800ef38 <HAL_TIMEx_MasterConfigSynchronization>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8007f88:	f7ff fab4 	bl	80074f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007f8c:	2360      	movs	r3, #96	; 0x60
 8007f8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8007f90:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8007f94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4813      	ldr	r0, [pc, #76]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007fa6:	f006 fa93 	bl	800e4d0 <HAL_TIM_PWM_ConfigChannel>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8007fb0:	f7ff faa0 	bl	80074f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	2204      	movs	r2, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	480e      	ldr	r0, [pc, #56]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007fbc:	f006 fa88 	bl	800e4d0 <HAL_TIM_PWM_ConfigChannel>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8007fc6:	f7ff fa95 	bl	80074f4 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8007fca:	f241 7370 	movw	r3, #6000	; 0x1770
 8007fce:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007fd0:	463b      	mov	r3, r7
 8007fd2:	220c      	movs	r2, #12
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4807      	ldr	r0, [pc, #28]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007fd8:	f006 fa7a 	bl	800e4d0 <HAL_TIM_PWM_ConfigChannel>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8007fe2:	f7ff fa87 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007fe6:	4803      	ldr	r0, [pc, #12]	; (8007ff4 <MX_TIM4_Init+0xe0>)
 8007fe8:	f000 f84e 	bl	8008088 <HAL_TIM_MspPostInit>

}
 8007fec:	bf00      	nop
 8007fee:	3728      	adds	r7, #40	; 0x28
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}
 8007ff4:	20000a28 	.word	0x20000a28
 8007ff8:	40000800 	.word	0x40000800

08007ffc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800800c:	d10c      	bne.n	8008028 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800800e:	4b1b      	ldr	r3, [pc, #108]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008012:	4a1a      	ldr	r2, [pc, #104]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	6593      	str	r3, [r2, #88]	; 0x58
 800801a:	4b18      	ldr	r3, [pc, #96]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8008026:	e022      	b.n	800806e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a14      	ldr	r2, [pc, #80]	; (8008080 <HAL_TIM_PWM_MspInit+0x84>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008032:	4b12      	ldr	r3, [pc, #72]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008036:	4a11      	ldr	r2, [pc, #68]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008038:	f043 0302 	orr.w	r3, r3, #2
 800803c:	6593      	str	r3, [r2, #88]	; 0x58
 800803e:	4b0f      	ldr	r3, [pc, #60]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	693b      	ldr	r3, [r7, #16]
}
 800804a:	e010      	b.n	800806e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0c      	ldr	r2, [pc, #48]	; (8008084 <HAL_TIM_PWM_MspInit+0x88>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d10b      	bne.n	800806e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008056:	4b09      	ldr	r3, [pc, #36]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800805a:	4a08      	ldr	r2, [pc, #32]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 800805c:	f043 0304 	orr.w	r3, r3, #4
 8008060:	6593      	str	r3, [r2, #88]	; 0x58
 8008062:	4b06      	ldr	r3, [pc, #24]	; (800807c <HAL_TIM_PWM_MspInit+0x80>)
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40021000 	.word	0x40021000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800

08008088 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008090:	f107 0314 	add.w	r3, r7, #20
 8008094:	2200      	movs	r2, #0
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	609a      	str	r2, [r3, #8]
 800809c:	60da      	str	r2, [r3, #12]
 800809e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a22      	ldr	r2, [pc, #136]	; (8008130 <HAL_TIM_MspPostInit+0xa8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d11c      	bne.n	80080e4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080aa:	4b22      	ldr	r3, [pc, #136]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ae:	4a21      	ldr	r2, [pc, #132]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080b0:	f043 0304 	orr.w	r3, r3, #4
 80080b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080b6:	4b1f      	ldr	r3, [pc, #124]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	613b      	str	r3, [r7, #16]
 80080c0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80080c2:	2340      	movs	r3, #64	; 0x40
 80080c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c6:	2302      	movs	r3, #2
 80080c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ce:	2300      	movs	r3, #0
 80080d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80080d2:	2302      	movs	r3, #2
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080d6:	f107 0314 	add.w	r3, r7, #20
 80080da:	4619      	mov	r1, r3
 80080dc:	4816      	ldr	r0, [pc, #88]	; (8008138 <HAL_TIM_MspPostInit+0xb0>)
 80080de:	f002 f82d 	bl	800a13c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80080e2:	e021      	b.n	8008128 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <HAL_TIM_MspPostInit+0xb4>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d11c      	bne.n	8008128 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080ee:	4b11      	ldr	r3, [pc, #68]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f2:	4a10      	ldr	r2, [pc, #64]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080f4:	f043 0302 	orr.w	r3, r3, #2
 80080f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080fa:	4b0e      	ldr	r3, [pc, #56]	; (8008134 <HAL_TIM_MspPostInit+0xac>)
 80080fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008106:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800810a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810c:	2302      	movs	r3, #2
 800810e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008114:	2300      	movs	r3, #0
 8008116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008118:	2302      	movs	r3, #2
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800811c:	f107 0314 	add.w	r3, r7, #20
 8008120:	4619      	mov	r1, r3
 8008122:	4807      	ldr	r0, [pc, #28]	; (8008140 <HAL_TIM_MspPostInit+0xb8>)
 8008124:	f002 f80a 	bl	800a13c <HAL_GPIO_Init>
}
 8008128:	bf00      	nop
 800812a:	3728      	adds	r7, #40	; 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	40000400 	.word	0x40000400
 8008134:	40021000 	.word	0x40021000
 8008138:	48000800 	.word	0x48000800
 800813c:	40000800 	.word	0x40000800
 8008140:	48000400 	.word	0x48000400

08008144 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8008148:	4b22      	ldr	r3, [pc, #136]	; (80081d4 <MX_UART4_Init+0x90>)
 800814a:	4a23      	ldr	r2, [pc, #140]	; (80081d8 <MX_UART4_Init+0x94>)
 800814c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <MX_UART4_Init+0x90>)
 8008150:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008154:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008156:	4b1f      	ldr	r3, [pc, #124]	; (80081d4 <MX_UART4_Init+0x90>)
 8008158:	2200      	movs	r2, #0
 800815a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800815c:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <MX_UART4_Init+0x90>)
 800815e:	2200      	movs	r2, #0
 8008160:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008162:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <MX_UART4_Init+0x90>)
 8008164:	2200      	movs	r2, #0
 8008166:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008168:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <MX_UART4_Init+0x90>)
 800816a:	220c      	movs	r2, #12
 800816c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800816e:	4b19      	ldr	r3, [pc, #100]	; (80081d4 <MX_UART4_Init+0x90>)
 8008170:	2200      	movs	r2, #0
 8008172:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008174:	4b17      	ldr	r3, [pc, #92]	; (80081d4 <MX_UART4_Init+0x90>)
 8008176:	2200      	movs	r2, #0
 8008178:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800817a:	4b16      	ldr	r3, [pc, #88]	; (80081d4 <MX_UART4_Init+0x90>)
 800817c:	2200      	movs	r2, #0
 800817e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008180:	4b14      	ldr	r3, [pc, #80]	; (80081d4 <MX_UART4_Init+0x90>)
 8008182:	2200      	movs	r2, #0
 8008184:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008186:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <MX_UART4_Init+0x90>)
 8008188:	2200      	movs	r2, #0
 800818a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800818c:	4811      	ldr	r0, [pc, #68]	; (80081d4 <MX_UART4_Init+0x90>)
 800818e:	f006 ffaf 	bl	800f0f0 <HAL_UART_Init>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8008198:	f7ff f9ac 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800819c:	2100      	movs	r1, #0
 800819e:	480d      	ldr	r0, [pc, #52]	; (80081d4 <MX_UART4_Init+0x90>)
 80081a0:	f009 f82f 	bl	8011202 <HAL_UARTEx_SetTxFifoThreshold>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80081aa:	f7ff f9a3 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80081ae:	2100      	movs	r1, #0
 80081b0:	4808      	ldr	r0, [pc, #32]	; (80081d4 <MX_UART4_Init+0x90>)
 80081b2:	f009 f864 	bl	801127e <HAL_UARTEx_SetRxFifoThreshold>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d001      	beq.n	80081c0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80081bc:	f7ff f99a 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80081c0:	4804      	ldr	r0, [pc, #16]	; (80081d4 <MX_UART4_Init+0x90>)
 80081c2:	f008 ffe5 	bl	8011190 <HAL_UARTEx_DisableFifoMode>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80081cc:	f7ff f992 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	20000a74 	.word	0x20000a74
 80081d8:	40004c00 	.word	0x40004c00

080081dc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80081e0:	4b22      	ldr	r3, [pc, #136]	; (800826c <MX_UART5_Init+0x90>)
 80081e2:	4a23      	ldr	r2, [pc, #140]	; (8008270 <MX_UART5_Init+0x94>)
 80081e4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <MX_UART5_Init+0x90>)
 80081e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80081ec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80081ee:	4b1f      	ldr	r3, [pc, #124]	; (800826c <MX_UART5_Init+0x90>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80081f4:	4b1d      	ldr	r3, [pc, #116]	; (800826c <MX_UART5_Init+0x90>)
 80081f6:	2200      	movs	r2, #0
 80081f8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80081fa:	4b1c      	ldr	r3, [pc, #112]	; (800826c <MX_UART5_Init+0x90>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008200:	4b1a      	ldr	r3, [pc, #104]	; (800826c <MX_UART5_Init+0x90>)
 8008202:	220c      	movs	r2, #12
 8008204:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008206:	4b19      	ldr	r3, [pc, #100]	; (800826c <MX_UART5_Init+0x90>)
 8008208:	2200      	movs	r2, #0
 800820a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800820c:	4b17      	ldr	r3, [pc, #92]	; (800826c <MX_UART5_Init+0x90>)
 800820e:	2200      	movs	r2, #0
 8008210:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008212:	4b16      	ldr	r3, [pc, #88]	; (800826c <MX_UART5_Init+0x90>)
 8008214:	2200      	movs	r2, #0
 8008216:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008218:	4b14      	ldr	r3, [pc, #80]	; (800826c <MX_UART5_Init+0x90>)
 800821a:	2200      	movs	r2, #0
 800821c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800821e:	4b13      	ldr	r3, [pc, #76]	; (800826c <MX_UART5_Init+0x90>)
 8008220:	2200      	movs	r2, #0
 8008222:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008224:	4811      	ldr	r0, [pc, #68]	; (800826c <MX_UART5_Init+0x90>)
 8008226:	f006 ff63 	bl	800f0f0 <HAL_UART_Init>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d001      	beq.n	8008234 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8008230:	f7ff f960 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008234:	2100      	movs	r1, #0
 8008236:	480d      	ldr	r0, [pc, #52]	; (800826c <MX_UART5_Init+0x90>)
 8008238:	f008 ffe3 	bl	8011202 <HAL_UARTEx_SetTxFifoThreshold>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8008242:	f7ff f957 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008246:	2100      	movs	r1, #0
 8008248:	4808      	ldr	r0, [pc, #32]	; (800826c <MX_UART5_Init+0x90>)
 800824a:	f009 f818 	bl	801127e <HAL_UARTEx_SetRxFifoThreshold>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8008254:	f7ff f94e 	bl	80074f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8008258:	4804      	ldr	r0, [pc, #16]	; (800826c <MX_UART5_Init+0x90>)
 800825a:	f008 ff99 	bl	8011190 <HAL_UARTEx_DisableFifoMode>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8008264:	f7ff f946 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8008268:	bf00      	nop
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20000b04 	.word	0x20000b04
 8008270:	40005000 	.word	0x40005000

08008274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b0a2      	sub	sp, #136	; 0x88
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800827c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008280:	2200      	movs	r2, #0
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	605a      	str	r2, [r3, #4]
 8008286:	609a      	str	r2, [r3, #8]
 8008288:	60da      	str	r2, [r3, #12]
 800828a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800828c:	f107 0320 	add.w	r3, r7, #32
 8008290:	2254      	movs	r2, #84	; 0x54
 8008292:	2100      	movs	r1, #0
 8008294:	4618      	mov	r0, r3
 8008296:	f00f fd85 	bl	8017da4 <memset>
  if(uartHandle->Instance==UART4)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a52      	ldr	r2, [pc, #328]	; (80083e8 <HAL_UART_MspInit+0x174>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d141      	bne.n	8008328 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80082a4:	2308      	movs	r3, #8
 80082a6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80082a8:	2300      	movs	r3, #0
 80082aa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082ac:	f107 0320 	add.w	r3, r7, #32
 80082b0:	4618      	mov	r0, r3
 80082b2:	f005 fa51 	bl	800d758 <HAL_RCCEx_PeriphCLKConfig>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80082bc:	f7ff f91a 	bl	80074f4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80082c0:	4b4a      	ldr	r3, [pc, #296]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	4a49      	ldr	r2, [pc, #292]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082ca:	6593      	str	r3, [r2, #88]	; 0x58
 80082cc:	4b47      	ldr	r3, [pc, #284]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082d4:	61fb      	str	r3, [r7, #28]
 80082d6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082d8:	4b44      	ldr	r3, [pc, #272]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082dc:	4a43      	ldr	r2, [pc, #268]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082de:	f043 0304 	orr.w	r3, r3, #4
 80082e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e4:	4b41      	ldr	r3, [pc, #260]	; (80083ec <HAL_UART_MspInit+0x178>)
 80082e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	61bb      	str	r3, [r7, #24]
 80082ee:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80082f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80082f4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f6:	2302      	movs	r3, #2
 80082f8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fe:	2300      	movs	r3, #0
 8008300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008304:	2305      	movs	r3, #5
 8008306:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800830a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800830e:	4619      	mov	r1, r3
 8008310:	4837      	ldr	r0, [pc, #220]	; (80083f0 <HAL_UART_MspInit+0x17c>)
 8008312:	f001 ff13 	bl	800a13c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8008316:	2200      	movs	r2, #0
 8008318:	2105      	movs	r1, #5
 800831a:	2034      	movs	r0, #52	; 0x34
 800831c:	f001 fbb4 	bl	8009a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008320:	2034      	movs	r0, #52	; 0x34
 8008322:	f001 fbcb 	bl	8009abc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8008326:	e05b      	b.n	80083e0 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a31      	ldr	r2, [pc, #196]	; (80083f4 <HAL_UART_MspInit+0x180>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d156      	bne.n	80083e0 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8008332:	2310      	movs	r3, #16
 8008334:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8008336:	2300      	movs	r3, #0
 8008338:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800833a:	f107 0320 	add.w	r3, r7, #32
 800833e:	4618      	mov	r0, r3
 8008340:	f005 fa0a 	bl	800d758 <HAL_RCCEx_PeriphCLKConfig>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_UART_MspInit+0xda>
      Error_Handler();
 800834a:	f7ff f8d3 	bl	80074f4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800834e:	4b27      	ldr	r3, [pc, #156]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008352:	4a26      	ldr	r2, [pc, #152]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008354:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008358:	6593      	str	r3, [r2, #88]	; 0x58
 800835a:	4b24      	ldr	r3, [pc, #144]	; (80083ec <HAL_UART_MspInit+0x178>)
 800835c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800835e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008362:	617b      	str	r3, [r7, #20]
 8008364:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008366:	4b21      	ldr	r3, [pc, #132]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800836a:	4a20      	ldr	r2, [pc, #128]	; (80083ec <HAL_UART_MspInit+0x178>)
 800836c:	f043 0304 	orr.w	r3, r3, #4
 8008370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008376:	f003 0304 	and.w	r3, r3, #4
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800837e:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008382:	4a1a      	ldr	r2, [pc, #104]	; (80083ec <HAL_UART_MspInit+0x178>)
 8008384:	f043 0308 	orr.w	r3, r3, #8
 8008388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800838a:	4b18      	ldr	r3, [pc, #96]	; (80083ec <HAL_UART_MspInit+0x178>)
 800838c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800839c:	2302      	movs	r3, #2
 800839e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80083aa:	2305      	movs	r3, #5
 80083ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80083b4:	4619      	mov	r1, r3
 80083b6:	480e      	ldr	r0, [pc, #56]	; (80083f0 <HAL_UART_MspInit+0x17c>)
 80083b8:	f001 fec0 	bl	800a13c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80083bc:	2304      	movs	r3, #4
 80083be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083c0:	2302      	movs	r3, #2
 80083c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c4:	2300      	movs	r3, #0
 80083c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c8:	2300      	movs	r3, #0
 80083ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80083ce:	2305      	movs	r3, #5
 80083d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80083d8:	4619      	mov	r1, r3
 80083da:	4807      	ldr	r0, [pc, #28]	; (80083f8 <HAL_UART_MspInit+0x184>)
 80083dc:	f001 feae 	bl	800a13c <HAL_GPIO_Init>
}
 80083e0:	bf00      	nop
 80083e2:	3788      	adds	r7, #136	; 0x88
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	40004c00 	.word	0x40004c00
 80083ec:	40021000 	.word	0x40021000
 80083f0:	48000800 	.word	0x48000800
 80083f4:	40005000 	.word	0x40005000
 80083f8:	48000c00 	.word	0x48000c00

080083fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80083fc:	480d      	ldr	r0, [pc, #52]	; (8008434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80083fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008400:	480d      	ldr	r0, [pc, #52]	; (8008438 <LoopForever+0x6>)
  ldr r1, =_edata
 8008402:	490e      	ldr	r1, [pc, #56]	; (800843c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008404:	4a0e      	ldr	r2, [pc, #56]	; (8008440 <LoopForever+0xe>)
  movs r3, #0
 8008406:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008408:	e002      	b.n	8008410 <LoopCopyDataInit>

0800840a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800840a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800840c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800840e:	3304      	adds	r3, #4

08008410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008414:	d3f9      	bcc.n	800840a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008416:	4a0b      	ldr	r2, [pc, #44]	; (8008444 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008418:	4c0b      	ldr	r4, [pc, #44]	; (8008448 <LoopForever+0x16>)
  movs r3, #0
 800841a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800841c:	e001      	b.n	8008422 <LoopFillZerobss>

0800841e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800841e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008420:	3204      	adds	r2, #4

08008422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008424:	d3fb      	bcc.n	800841e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008426:	f7ff fcad 	bl	8007d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800842a:	f00f fd1f 	bl	8017e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800842e:	f7fe ffb9 	bl	80073a4 <main>

08008432 <LoopForever>:

LoopForever:
    b LoopForever
 8008432:	e7fe      	b.n	8008432 <LoopForever>
  ldr   r0, =_estack
 8008434:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800843c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008440:	080190b0 	.word	0x080190b0
  ldr r2, =_sbss
 8008444:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008448:	20005814 	.word	0x20005814

0800844c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800844c:	e7fe      	b.n	800844c <ADC1_2_IRQHandler>

0800844e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008458:	2003      	movs	r0, #3
 800845a:	f001 fb0a 	bl	8009a72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800845e:	200f      	movs	r0, #15
 8008460:	f7ff fbc8 	bl	8007bf4 <HAL_InitTick>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	71fb      	strb	r3, [r7, #7]
 800846e:	e001      	b.n	8008474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008470:	f7ff fb98 	bl	8007ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008474:	79fb      	ldrb	r3, [r7, #7]

}
 8008476:	4618      	mov	r0, r3
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}
	...

08008480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008480:	b480      	push	{r7}
 8008482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_IncTick+0x1c>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <HAL_IncTick+0x20>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4413      	add	r3, r2
 800848e:	4a03      	ldr	r2, [pc, #12]	; (800849c <HAL_IncTick+0x1c>)
 8008490:	6013      	str	r3, [r2, #0]
}
 8008492:	bf00      	nop
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	20000b94 	.word	0x20000b94
 80084a0:	2000000c 	.word	0x2000000c

080084a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  return uwTick;
 80084a8:	4b03      	ldr	r3, [pc, #12]	; (80084b8 <HAL_GetTick+0x14>)
 80084aa:	681b      	ldr	r3, [r3, #0]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20000b94 	.word	0x20000b94

080084bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084c4:	f7ff ffee 	bl	80084a4 <HAL_GetTick>
 80084c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d004      	beq.n	80084e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80084d6:	4b09      	ldr	r3, [pc, #36]	; (80084fc <HAL_Delay+0x40>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084e0:	bf00      	nop
 80084e2:	f7ff ffdf 	bl	80084a4 <HAL_GetTick>
 80084e6:	4602      	mov	r2, r0
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d8f7      	bhi.n	80084e2 <HAL_Delay+0x26>
  {
  }
}
 80084f2:	bf00      	nop
 80084f4:	bf00      	nop
 80084f6:	3710      	adds	r7, #16
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	2000000c 	.word	0x2000000c

08008500 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	431a      	orrs	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	609a      	str	r2, [r3, #8]
}
 800851a:	bf00      	nop
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800855c:	4618      	mov	r0, r3
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3360      	adds	r3, #96	; 0x60
 800857a:	461a      	mov	r2, r3
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	4b08      	ldr	r3, [pc, #32]	; (80085ac <LL_ADC_SetOffset+0x44>)
 800858a:	4013      	ands	r3, r2
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	4313      	orrs	r3, r2
 8008598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	03fff000 	.word	0x03fff000

080085b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3360      	adds	r3, #96	; 0x60
 80085be:	461a      	mov	r2, r3
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3360      	adds	r3, #96	; 0x60
 80085ec:	461a      	mov	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	009b      	lsls	r3, r3, #2
 80085f2:	4413      	add	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	431a      	orrs	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3360      	adds	r3, #96	; 0x60
 8008622:	461a      	mov	r2, r3
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	431a      	orrs	r2, r3
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800863c:	bf00      	nop
 800863e:	371c      	adds	r7, #28
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3360      	adds	r3, #96	; 0x60
 8008658:	461a      	mov	r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	431a      	orrs	r2, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008672:	bf00      	nop
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	695b      	ldr	r3, [r3, #20]
 800868c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	615a      	str	r2, [r3, #20]
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b087      	sub	sp, #28
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	60f8      	str	r0, [r7, #12]
 80086d2:	60b9      	str	r1, [r7, #8]
 80086d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3330      	adds	r3, #48	; 0x30
 80086da:	461a      	mov	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	f003 030c 	and.w	r3, r3, #12
 80086e6:	4413      	add	r3, r2
 80086e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f003 031f 	and.w	r3, r3, #31
 80086f4:	211f      	movs	r1, #31
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	43db      	mvns	r3, r3
 80086fc:	401a      	ands	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	0e9b      	lsrs	r3, r3, #26
 8008702:	f003 011f 	and.w	r1, r3, #31
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	431a      	orrs	r2, r3
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008722:	b480      	push	{r7}
 8008724:	b087      	sub	sp, #28
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3314      	adds	r3, #20
 8008732:	461a      	mov	r2, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	0e5b      	lsrs	r3, r3, #25
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	4413      	add	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	0d1b      	lsrs	r3, r3, #20
 800874a:	f003 031f 	and.w	r3, r3, #31
 800874e:	2107      	movs	r1, #7
 8008750:	fa01 f303 	lsl.w	r3, r1, r3
 8008754:	43db      	mvns	r3, r3
 8008756:	401a      	ands	r2, r3
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	0d1b      	lsrs	r3, r3, #20
 800875c:	f003 031f 	and.w	r3, r3, #31
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	fa01 f303 	lsl.w	r3, r1, r3
 8008766:	431a      	orrs	r2, r3
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800876c:	bf00      	nop
 800876e:	371c      	adds	r7, #28
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a0f      	ldr	r2, [pc, #60]	; (80087c4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d10a      	bne.n	80087a2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008798:	431a      	orrs	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80087a0:	e00a      	b.n	80087b8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ae:	43db      	mvns	r3, r3
 80087b0:	401a      	ands	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	407f0000 	.word	0x407f0000

080087c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 031f 	and.w	r3, r3, #31
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80087f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	6093      	str	r3, [r2, #8]
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800881c:	d101      	bne.n	8008822 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008822:	2300      	movs	r3, #0
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800886c:	d101      	bne.n	8008872 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800886e:	2301      	movs	r3, #1
 8008870:	e000      	b.n	8008874 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008894:	f043 0201 	orr.w	r2, r3, #1
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <LL_ADC_IsEnabled+0x18>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <LL_ADC_IsEnabled+0x1a>
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80088ce:	b480      	push	{r7}
 80088d0:	b083      	sub	sp, #12
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80088ea:	bf00      	nop
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	f003 0304 	and.w	r3, r3, #4
 8008906:	2b04      	cmp	r3, #4
 8008908:	d101      	bne.n	800890e <LL_ADC_REG_IsConversionOngoing+0x18>
 800890a:	2301      	movs	r3, #1
 800890c:	e000      	b.n	8008910 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 0308 	and.w	r3, r3, #8
 800892c:	2b08      	cmp	r3, #8
 800892e:	d101      	bne.n	8008934 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008930:	2301      	movs	r3, #1
 8008932:	e000      	b.n	8008936 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008944:	b590      	push	{r4, r7, lr}
 8008946:	b089      	sub	sp, #36	; 0x24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800894c:	2300      	movs	r3, #0
 800894e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008950:	2300      	movs	r3, #0
 8008952:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e1af      	b.n	8008cbe <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7fc fb2d 	bl	8004fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff ff3f 	bl	8008808 <LL_ADC_IsDeepPowerDownEnabled>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f7ff ff25 	bl	80087e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ff5a 	bl	8008858 <LL_ADC_IsInternalRegulatorEnabled>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d115      	bne.n	80089d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff ff3e 	bl	8008830 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80089b4:	4b9f      	ldr	r3, [pc, #636]	; (8008c34 <HAL_ADC_Init+0x2f0>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	099b      	lsrs	r3, r3, #6
 80089ba:	4a9f      	ldr	r2, [pc, #636]	; (8008c38 <HAL_ADC_Init+0x2f4>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	099b      	lsrs	r3, r3, #6
 80089c2:	3301      	adds	r3, #1
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80089c8:	e002      	b.n	80089d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f9      	bne.n	80089ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff ff3c 	bl	8008858 <LL_ADC_IsInternalRegulatorEnabled>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10d      	bne.n	8008a02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ea:	f043 0210 	orr.w	r2, r3, #16
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089f6:	f043 0201 	orr.w	r2, r3, #1
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7ff ff75 	bl	80088f6 <LL_ADC_REG_IsConversionOngoing>
 8008a0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f040 8148 	bne.w	8008cac <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 8144 	bne.w	8008cac <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a28:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008a2c:	f043 0202 	orr.w	r2, r3, #2
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff ff35 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d141      	bne.n	8008ac8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a4c:	d004      	beq.n	8008a58 <HAL_ADC_Init+0x114>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a7a      	ldr	r2, [pc, #488]	; (8008c3c <HAL_ADC_Init+0x2f8>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d10f      	bne.n	8008a78 <HAL_ADC_Init+0x134>
 8008a58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008a5c:	f7ff ff24 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a60:	4604      	mov	r4, r0
 8008a62:	4876      	ldr	r0, [pc, #472]	; (8008c3c <HAL_ADC_Init+0x2f8>)
 8008a64:	f7ff ff20 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	4323      	orrs	r3, r4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf0c      	ite	eq
 8008a70:	2301      	moveq	r3, #1
 8008a72:	2300      	movne	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	e012      	b.n	8008a9e <HAL_ADC_Init+0x15a>
 8008a78:	4871      	ldr	r0, [pc, #452]	; (8008c40 <HAL_ADC_Init+0x2fc>)
 8008a7a:	f7ff ff15 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4870      	ldr	r0, [pc, #448]	; (8008c44 <HAL_ADC_Init+0x300>)
 8008a82:	f7ff ff11 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a86:	4603      	mov	r3, r0
 8008a88:	431c      	orrs	r4, r3
 8008a8a:	486f      	ldr	r0, [pc, #444]	; (8008c48 <HAL_ADC_Init+0x304>)
 8008a8c:	f7ff ff0c 	bl	80088a8 <LL_ADC_IsEnabled>
 8008a90:	4603      	mov	r3, r0
 8008a92:	4323      	orrs	r3, r4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bf0c      	ite	eq
 8008a98:	2301      	moveq	r3, #1
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d012      	beq.n	8008ac8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aaa:	d004      	beq.n	8008ab6 <HAL_ADC_Init+0x172>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a62      	ldr	r2, [pc, #392]	; (8008c3c <HAL_ADC_Init+0x2f8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d101      	bne.n	8008aba <HAL_ADC_Init+0x176>
 8008ab6:	4a65      	ldr	r2, [pc, #404]	; (8008c4c <HAL_ADC_Init+0x308>)
 8008ab8:	e000      	b.n	8008abc <HAL_ADC_Init+0x178>
 8008aba:	4a65      	ldr	r2, [pc, #404]	; (8008c50 <HAL_ADC_Init+0x30c>)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	4610      	mov	r0, r2
 8008ac4:	f7ff fd1c 	bl	8008500 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	7f5b      	ldrb	r3, [r3, #29]
 8008acc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ad2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008ad8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008ade:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ae6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d106      	bne.n	8008b04 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	3b01      	subs	r3, #1
 8008afc:	045b      	lsls	r3, r3, #17
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	4b4b      	ldr	r3, [pc, #300]	; (8008c54 <HAL_ADC_Init+0x310>)
 8008b28:	4013      	ands	r3, r2
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
 8008b2e:	69b9      	ldr	r1, [r7, #24]
 8008b30:	430b      	orrs	r3, r1
 8008b32:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fed1 	bl	80088f6 <LL_ADC_REG_IsConversionOngoing>
 8008b54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fede 	bl	800891c <LL_ADC_INJ_IsConversionOngoing>
 8008b60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d17f      	bne.n	8008c68 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d17c      	bne.n	8008c68 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b72:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b7a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b8a:	f023 0302 	bic.w	r3, r3, #2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6812      	ldr	r2, [r2, #0]
 8008b92:	69b9      	ldr	r1, [r7, #24]
 8008b94:	430b      	orrs	r3, r1
 8008b96:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d017      	beq.n	8008bd0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008bae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008bb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008bbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6911      	ldr	r1, [r2, #16]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008bce:	e013      	b.n	8008bf8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	691a      	ldr	r2, [r3, #16]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008bde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008bf4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d12a      	bne.n	8008c58 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008c18:	4311      	orrs	r1, r2
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008c1e:	4311      	orrs	r1, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008c24:	430a      	orrs	r2, r1
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f042 0201 	orr.w	r2, r2, #1
 8008c30:	611a      	str	r2, [r3, #16]
 8008c32:	e019      	b.n	8008c68 <HAL_ADC_Init+0x324>
 8008c34:	20000004 	.word	0x20000004
 8008c38:	053e2d63 	.word	0x053e2d63
 8008c3c:	50000100 	.word	0x50000100
 8008c40:	50000400 	.word	0x50000400
 8008c44:	50000500 	.word	0x50000500
 8008c48:	50000600 	.word	0x50000600
 8008c4c:	50000300 	.word	0x50000300
 8008c50:	50000700 	.word	0x50000700
 8008c54:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	691a      	ldr	r2, [r3, #16]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d10c      	bne.n	8008c8a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c76:	f023 010f 	bic.w	r1, r3, #15
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	430a      	orrs	r2, r1
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
 8008c88:	e007      	b.n	8008c9a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 020f 	bic.w	r2, r2, #15
 8008c98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	f023 0303 	bic.w	r3, r3, #3
 8008ca2:	f043 0201 	orr.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8008caa:	e007      	b.n	8008cbc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb0:	f043 0210 	orr.w	r2, r3, #16
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008cbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3724      	adds	r7, #36	; 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd90      	pop	{r4, r7, pc}
 8008cc6:	bf00      	nop

08008cc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cdc:	d004      	beq.n	8008ce8 <HAL_ADC_Start_DMA+0x20>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a5a      	ldr	r2, [pc, #360]	; (8008e4c <HAL_ADC_Start_DMA+0x184>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d101      	bne.n	8008cec <HAL_ADC_Start_DMA+0x24>
 8008ce8:	4b59      	ldr	r3, [pc, #356]	; (8008e50 <HAL_ADC_Start_DMA+0x188>)
 8008cea:	e000      	b.n	8008cee <HAL_ADC_Start_DMA+0x26>
 8008cec:	4b59      	ldr	r3, [pc, #356]	; (8008e54 <HAL_ADC_Start_DMA+0x18c>)
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fd6a 	bl	80087c8 <LL_ADC_GetMultimode>
 8008cf4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff fdfb 	bl	80088f6 <LL_ADC_REG_IsConversionOngoing>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f040 809b 	bne.w	8008e3e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d101      	bne.n	8008d16 <HAL_ADC_Start_DMA+0x4e>
 8008d12:	2302      	movs	r3, #2
 8008d14:	e096      	b.n	8008e44 <HAL_ADC_Start_DMA+0x17c>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a4d      	ldr	r2, [pc, #308]	; (8008e58 <HAL_ADC_Start_DMA+0x190>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d008      	beq.n	8008d3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2b05      	cmp	r3, #5
 8008d32:	d002      	beq.n	8008d3a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b09      	cmp	r3, #9
 8008d38:	d17a      	bne.n	8008e30 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fcf6 	bl	800972c <ADC_Enable>
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008d44:	7dfb      	ldrb	r3, [r7, #23]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d16d      	bne.n	8008e26 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008d52:	f023 0301 	bic.w	r3, r3, #1
 8008d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a3a      	ldr	r2, [pc, #232]	; (8008e4c <HAL_ADC_Start_DMA+0x184>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d009      	beq.n	8008d7c <HAL_ADC_Start_DMA+0xb4>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a3b      	ldr	r2, [pc, #236]	; (8008e5c <HAL_ADC_Start_DMA+0x194>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d002      	beq.n	8008d78 <HAL_ADC_Start_DMA+0xb0>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	e003      	b.n	8008d80 <HAL_ADC_Start_DMA+0xb8>
 8008d78:	4b39      	ldr	r3, [pc, #228]	; (8008e60 <HAL_ADC_Start_DMA+0x198>)
 8008d7a:	e001      	b.n	8008d80 <HAL_ADC_Start_DMA+0xb8>
 8008d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	6812      	ldr	r2, [r2, #0]
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d002      	beq.n	8008d8e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d105      	bne.n	8008d9a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008daa:	f023 0206 	bic.w	r2, r3, #6
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	661a      	str	r2, [r3, #96]	; 0x60
 8008db2:	e002      	b.n	8008dba <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2200      	movs	r2, #0
 8008db8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	4a29      	ldr	r2, [pc, #164]	; (8008e64 <HAL_ADC_Start_DMA+0x19c>)
 8008dc0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc6:	4a28      	ldr	r2, [pc, #160]	; (8008e68 <HAL_ADC_Start_DMA+0x1a0>)
 8008dc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dce:	4a27      	ldr	r2, [pc, #156]	; (8008e6c <HAL_ADC_Start_DMA+0x1a4>)
 8008dd0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	221c      	movs	r2, #28
 8008dd8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f042 0210 	orr.w	r2, r2, #16
 8008df0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68da      	ldr	r2, [r3, #12]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f042 0201 	orr.w	r2, r2, #1
 8008e00:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	3340      	adds	r3, #64	; 0x40
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	68ba      	ldr	r2, [r7, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f000 ff09 	bl	8009c28 <HAL_DMA_Start_IT>
 8008e16:	4603      	mov	r3, r0
 8008e18:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fd55 	bl	80088ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008e24:	e00d      	b.n	8008e42 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008e2e:	e008      	b.n	8008e42 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008e30:	2301      	movs	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008e3c:	e001      	b.n	8008e42 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008e3e:	2302      	movs	r3, #2
 8008e40:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	50000100 	.word	0x50000100
 8008e50:	50000300 	.word	0x50000300
 8008e54:	50000700 	.word	0x50000700
 8008e58:	50000600 	.word	0x50000600
 8008e5c:	50000500 	.word	0x50000500
 8008e60:	50000400 	.word	0x50000400
 8008e64:	080097f1 	.word	0x080097f1
 8008e68:	080098c9 	.word	0x080098c9
 8008e6c:	080098e5 	.word	0x080098e5

08008e70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b0b6      	sub	sp, #216	; 0xd8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d102      	bne.n	8008ed0 <HAL_ADC_ConfigChannel+0x24>
 8008eca:	2302      	movs	r3, #2
 8008ecc:	f000 bc13 	b.w	80096f6 <HAL_ADC_ConfigChannel+0x84a>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fd0a 	bl	80088f6 <LL_ADC_REG_IsConversionOngoing>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f040 83f3 	bne.w	80096d0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6818      	ldr	r0, [r3, #0]
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	6859      	ldr	r1, [r3, #4]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	f7ff fbe7 	bl	80086ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff fcf8 	bl	80088f6 <LL_ADC_REG_IsConversionOngoing>
 8008f06:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fd04 	bl	800891c <LL_ADC_INJ_IsConversionOngoing>
 8008f14:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008f18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 81d9 	bne.w	80092d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 81d4 	bne.w	80092d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f34:	d10f      	bne.n	8008f56 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4619      	mov	r1, r3
 8008f42:	f7ff fbee 	bl	8008722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff fb95 	bl	800867e <LL_ADC_SetSamplingTimeCommonConfig>
 8008f54:	e00e      	b.n	8008f74 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6818      	ldr	r0, [r3, #0]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	461a      	mov	r2, r3
 8008f64:	f7ff fbdd 	bl	8008722 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fb85 	bl	800867e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	08db      	lsrs	r3, r3, #3
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	2b04      	cmp	r3, #4
 8008f94:	d022      	beq.n	8008fdc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	6919      	ldr	r1, [r3, #16]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008fa6:	f7ff fadf 	bl	8008568 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6818      	ldr	r0, [r3, #0]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	6919      	ldr	r1, [r3, #16]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f7ff fb2b 	bl	8008612 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6919      	ldr	r1, [r3, #16]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	7f1b      	ldrb	r3, [r3, #28]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d102      	bne.n	8008fd2 <HAL_ADC_ConfigChannel+0x126>
 8008fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fd0:	e000      	b.n	8008fd4 <HAL_ADC_ConfigChannel+0x128>
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	f7ff fb37 	bl	8008648 <LL_ADC_SetOffsetSaturation>
 8008fda:	e17b      	b.n	80092d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff fae4 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10a      	bne.n	8009008 <HAL_ADC_ConfigChannel+0x15c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fad9 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8008ffe:	4603      	mov	r3, r0
 8009000:	0e9b      	lsrs	r3, r3, #26
 8009002:	f003 021f 	and.w	r2, r3, #31
 8009006:	e01e      	b.n	8009046 <HAL_ADC_ConfigChannel+0x19a>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2100      	movs	r1, #0
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff face 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8009014:	4603      	mov	r3, r0
 8009016:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800901a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800901e:	fa93 f3a3 	rbit	r3, r3
 8009022:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800902a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800902e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8009036:	2320      	movs	r3, #32
 8009038:	e004      	b.n	8009044 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800903a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800903e:	fab3 f383 	clz	r3, r3
 8009042:	b2db      	uxtb	r3, r3
 8009044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <HAL_ADC_ConfigChannel+0x1b2>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	0e9b      	lsrs	r3, r3, #26
 8009058:	f003 031f 	and.w	r3, r3, #31
 800905c:	e018      	b.n	8009090 <HAL_ADC_ConfigChannel+0x1e4>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009066:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800906a:	fa93 f3a3 	rbit	r3, r3
 800906e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8009072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009076:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800907a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8009082:	2320      	movs	r3, #32
 8009084:	e004      	b.n	8009090 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8009086:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800908a:	fab3 f383 	clz	r3, r3
 800908e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009090:	429a      	cmp	r2, r3
 8009092:	d106      	bne.n	80090a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2200      	movs	r2, #0
 800909a:	2100      	movs	r1, #0
 800909c:	4618      	mov	r0, r3
 800909e:	f7ff fa9d 	bl	80085dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2101      	movs	r1, #1
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fa81 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <HAL_ADC_ConfigChannel+0x222>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2101      	movs	r1, #1
 80090be:	4618      	mov	r0, r3
 80090c0:	f7ff fa76 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 80090c4:	4603      	mov	r3, r0
 80090c6:	0e9b      	lsrs	r3, r3, #26
 80090c8:	f003 021f 	and.w	r2, r3, #31
 80090cc:	e01e      	b.n	800910c <HAL_ADC_ConfigChannel+0x260>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2101      	movs	r1, #1
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fa6b 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 80090da:	4603      	mov	r3, r0
 80090dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80090e4:	fa93 f3a3 	rbit	r3, r3
 80090e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80090ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80090f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80090f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80090fc:	2320      	movs	r3, #32
 80090fe:	e004      	b.n	800910a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8009100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009104:	fab3 f383 	clz	r3, r3
 8009108:	b2db      	uxtb	r3, r3
 800910a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009114:	2b00      	cmp	r3, #0
 8009116:	d105      	bne.n	8009124 <HAL_ADC_ConfigChannel+0x278>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	0e9b      	lsrs	r3, r3, #26
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	e018      	b.n	8009156 <HAL_ADC_ConfigChannel+0x2aa>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800912c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009130:	fa93 f3a3 	rbit	r3, r3
 8009134:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8009138:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800913c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8009140:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8009148:	2320      	movs	r3, #32
 800914a:	e004      	b.n	8009156 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800914c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009150:	fab3 f383 	clz	r3, r3
 8009154:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009156:	429a      	cmp	r2, r3
 8009158:	d106      	bne.n	8009168 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2200      	movs	r2, #0
 8009160:	2101      	movs	r1, #1
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fa3a 	bl	80085dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2102      	movs	r1, #2
 800916e:	4618      	mov	r0, r3
 8009170:	f7ff fa1e 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8009174:	4603      	mov	r3, r0
 8009176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <HAL_ADC_ConfigChannel+0x2e8>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff fa13 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 800918a:	4603      	mov	r3, r0
 800918c:	0e9b      	lsrs	r3, r3, #26
 800918e:	f003 021f 	and.w	r2, r3, #31
 8009192:	e01e      	b.n	80091d2 <HAL_ADC_ConfigChannel+0x326>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2102      	movs	r1, #2
 800919a:	4618      	mov	r0, r3
 800919c:	f7ff fa08 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091aa:	fa93 f3a3 	rbit	r3, r3
 80091ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80091b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80091ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80091c2:	2320      	movs	r3, #32
 80091c4:	e004      	b.n	80091d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80091c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091ca:	fab3 f383 	clz	r3, r3
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <HAL_ADC_ConfigChannel+0x33e>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	0e9b      	lsrs	r3, r3, #26
 80091e4:	f003 031f 	and.w	r3, r3, #31
 80091e8:	e016      	b.n	8009218 <HAL_ADC_ConfigChannel+0x36c>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80091f6:	fa93 f3a3 	rbit	r3, r3
 80091fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80091fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800920a:	2320      	movs	r3, #32
 800920c:	e004      	b.n	8009218 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800920e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009212:	fab3 f383 	clz	r3, r3
 8009216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009218:	429a      	cmp	r2, r3
 800921a:	d106      	bne.n	800922a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2200      	movs	r2, #0
 8009222:	2102      	movs	r1, #2
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff f9d9 	bl	80085dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2103      	movs	r1, #3
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff f9bd 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8009236:	4603      	mov	r3, r0
 8009238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10a      	bne.n	8009256 <HAL_ADC_ConfigChannel+0x3aa>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2103      	movs	r1, #3
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff f9b2 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 800924c:	4603      	mov	r3, r0
 800924e:	0e9b      	lsrs	r3, r3, #26
 8009250:	f003 021f 	and.w	r2, r3, #31
 8009254:	e017      	b.n	8009286 <HAL_ADC_ConfigChannel+0x3da>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2103      	movs	r1, #3
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff f9a7 	bl	80085b0 <LL_ADC_GetOffsetChannel>
 8009262:	4603      	mov	r3, r0
 8009264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009268:	fa93 f3a3 	rbit	r3, r3
 800926c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800926e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009270:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8009272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8009278:	2320      	movs	r3, #32
 800927a:	e003      	b.n	8009284 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800927c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800927e:	fab3 f383 	clz	r3, r3
 8009282:	b2db      	uxtb	r3, r3
 8009284:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <HAL_ADC_ConfigChannel+0x3f2>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	0e9b      	lsrs	r3, r3, #26
 8009298:	f003 031f 	and.w	r3, r3, #31
 800929c:	e011      	b.n	80092c2 <HAL_ADC_ConfigChannel+0x416>
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80092a6:	fa93 f3a3 	rbit	r3, r3
 80092aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80092ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80092b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80092b6:	2320      	movs	r3, #32
 80092b8:	e003      	b.n	80092c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80092ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092bc:	fab3 f383 	clz	r3, r3
 80092c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d106      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2200      	movs	r2, #0
 80092cc:	2103      	movs	r1, #3
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7ff f984 	bl	80085dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff fae5 	bl	80088a8 <LL_ADC_IsEnabled>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f040 813d 	bne.w	8009560 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6819      	ldr	r1, [r3, #0]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f7ff fa40 	bl	8008778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	4aa2      	ldr	r2, [pc, #648]	; (8009588 <HAL_ADC_ConfigChannel+0x6dc>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	f040 812e 	bne.w	8009560 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10b      	bne.n	800932c <HAL_ADC_ConfigChannel+0x480>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	0e9b      	lsrs	r3, r3, #26
 800931a:	3301      	adds	r3, #1
 800931c:	f003 031f 	and.w	r3, r3, #31
 8009320:	2b09      	cmp	r3, #9
 8009322:	bf94      	ite	ls
 8009324:	2301      	movls	r3, #1
 8009326:	2300      	movhi	r3, #0
 8009328:	b2db      	uxtb	r3, r3
 800932a:	e019      	b.n	8009360 <HAL_ADC_ConfigChannel+0x4b4>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009334:	fa93 f3a3 	rbit	r3, r3
 8009338:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800933a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800933c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800933e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009344:	2320      	movs	r3, #32
 8009346:	e003      	b.n	8009350 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8009348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	3301      	adds	r3, #1
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	2b09      	cmp	r3, #9
 8009358:	bf94      	ite	ls
 800935a:	2301      	movls	r3, #1
 800935c:	2300      	movhi	r3, #0
 800935e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009360:	2b00      	cmp	r3, #0
 8009362:	d079      	beq.n	8009458 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800936c:	2b00      	cmp	r3, #0
 800936e:	d107      	bne.n	8009380 <HAL_ADC_ConfigChannel+0x4d4>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	0e9b      	lsrs	r3, r3, #26
 8009376:	3301      	adds	r3, #1
 8009378:	069b      	lsls	r3, r3, #26
 800937a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800937e:	e015      	b.n	80093ac <HAL_ADC_ConfigChannel+0x500>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009388:	fa93 f3a3 	rbit	r3, r3
 800938c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800938e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009390:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8009392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8009398:	2320      	movs	r3, #32
 800939a:	e003      	b.n	80093a4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800939c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800939e:	fab3 f383 	clz	r3, r3
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	3301      	adds	r3, #1
 80093a6:	069b      	lsls	r3, r3, #26
 80093a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d109      	bne.n	80093cc <HAL_ADC_ConfigChannel+0x520>
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	0e9b      	lsrs	r3, r3, #26
 80093be:	3301      	adds	r3, #1
 80093c0:	f003 031f 	and.w	r3, r3, #31
 80093c4:	2101      	movs	r1, #1
 80093c6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ca:	e017      	b.n	80093fc <HAL_ADC_ConfigChannel+0x550>
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093d4:	fa93 f3a3 	rbit	r3, r3
 80093d8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80093da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80093de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d101      	bne.n	80093e8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80093e4:	2320      	movs	r3, #32
 80093e6:	e003      	b.n	80093f0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80093e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ea:	fab3 f383 	clz	r3, r3
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	3301      	adds	r3, #1
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	2101      	movs	r1, #1
 80093f8:	fa01 f303 	lsl.w	r3, r1, r3
 80093fc:	ea42 0103 	orr.w	r1, r2, r3
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <HAL_ADC_ConfigChannel+0x576>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	0e9b      	lsrs	r3, r3, #26
 8009412:	3301      	adds	r3, #1
 8009414:	f003 021f 	and.w	r2, r3, #31
 8009418:	4613      	mov	r3, r2
 800941a:	005b      	lsls	r3, r3, #1
 800941c:	4413      	add	r3, r2
 800941e:	051b      	lsls	r3, r3, #20
 8009420:	e018      	b.n	8009454 <HAL_ADC_ConfigChannel+0x5a8>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	fa93 f3a3 	rbit	r3, r3
 800942e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800943a:	2320      	movs	r3, #32
 800943c:	e003      	b.n	8009446 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800943e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009440:	fab3 f383 	clz	r3, r3
 8009444:	b2db      	uxtb	r3, r3
 8009446:	3301      	adds	r3, #1
 8009448:	f003 021f 	and.w	r2, r3, #31
 800944c:	4613      	mov	r3, r2
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	4413      	add	r3, r2
 8009452:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009454:	430b      	orrs	r3, r1
 8009456:	e07e      	b.n	8009556 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009460:	2b00      	cmp	r3, #0
 8009462:	d107      	bne.n	8009474 <HAL_ADC_ConfigChannel+0x5c8>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	0e9b      	lsrs	r3, r3, #26
 800946a:	3301      	adds	r3, #1
 800946c:	069b      	lsls	r3, r3, #26
 800946e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009472:	e015      	b.n	80094a0 <HAL_ADC_ConfigChannel+0x5f4>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947c:	fa93 f3a3 	rbit	r3, r3
 8009480:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8009482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009484:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8009486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800948c:	2320      	movs	r3, #32
 800948e:	e003      	b.n	8009498 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	fab3 f383 	clz	r3, r3
 8009496:	b2db      	uxtb	r3, r3
 8009498:	3301      	adds	r3, #1
 800949a:	069b      	lsls	r3, r3, #26
 800949c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <HAL_ADC_ConfigChannel+0x614>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	0e9b      	lsrs	r3, r3, #26
 80094b2:	3301      	adds	r3, #1
 80094b4:	f003 031f 	and.w	r3, r3, #31
 80094b8:	2101      	movs	r1, #1
 80094ba:	fa01 f303 	lsl.w	r3, r1, r3
 80094be:	e017      	b.n	80094f0 <HAL_ADC_ConfigChannel+0x644>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	fa93 f3a3 	rbit	r3, r3
 80094cc:	61fb      	str	r3, [r7, #28]
  return result;
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d101      	bne.n	80094dc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80094d8:	2320      	movs	r3, #32
 80094da:	e003      	b.n	80094e4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	fab3 f383 	clz	r3, r3
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	3301      	adds	r3, #1
 80094e6:	f003 031f 	and.w	r3, r3, #31
 80094ea:	2101      	movs	r1, #1
 80094ec:	fa01 f303 	lsl.w	r3, r1, r3
 80094f0:	ea42 0103 	orr.w	r1, r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10d      	bne.n	800951c <HAL_ADC_ConfigChannel+0x670>
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	0e9b      	lsrs	r3, r3, #26
 8009506:	3301      	adds	r3, #1
 8009508:	f003 021f 	and.w	r2, r3, #31
 800950c:	4613      	mov	r3, r2
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	4413      	add	r3, r2
 8009512:	3b1e      	subs	r3, #30
 8009514:	051b      	lsls	r3, r3, #20
 8009516:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800951a:	e01b      	b.n	8009554 <HAL_ADC_ConfigChannel+0x6a8>
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	fa93 f3a3 	rbit	r3, r3
 8009528:	613b      	str	r3, [r7, #16]
  return result;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009534:	2320      	movs	r3, #32
 8009536:	e003      	b.n	8009540 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	fab3 f383 	clz	r3, r3
 800953e:	b2db      	uxtb	r3, r3
 8009540:	3301      	adds	r3, #1
 8009542:	f003 021f 	and.w	r2, r3, #31
 8009546:	4613      	mov	r3, r2
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4413      	add	r3, r2
 800954c:	3b1e      	subs	r3, #30
 800954e:	051b      	lsls	r3, r3, #20
 8009550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009554:	430b      	orrs	r3, r1
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	6892      	ldr	r2, [r2, #8]
 800955a:	4619      	mov	r1, r3
 800955c:	f7ff f8e1 	bl	8008722 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b09      	ldr	r3, [pc, #36]	; (800958c <HAL_ADC_ConfigChannel+0x6e0>)
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80be 	beq.w	80096ea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009576:	d004      	beq.n	8009582 <HAL_ADC_ConfigChannel+0x6d6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a04      	ldr	r2, [pc, #16]	; (8009590 <HAL_ADC_ConfigChannel+0x6e4>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d10a      	bne.n	8009598 <HAL_ADC_ConfigChannel+0x6ec>
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <HAL_ADC_ConfigChannel+0x6e8>)
 8009584:	e009      	b.n	800959a <HAL_ADC_ConfigChannel+0x6ee>
 8009586:	bf00      	nop
 8009588:	407f0000 	.word	0x407f0000
 800958c:	80080000 	.word	0x80080000
 8009590:	50000100 	.word	0x50000100
 8009594:	50000300 	.word	0x50000300
 8009598:	4b59      	ldr	r3, [pc, #356]	; (8009700 <HAL_ADC_ConfigChannel+0x854>)
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe ffd6 	bl	800854c <LL_ADC_GetCommonPathInternalCh>
 80095a0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a56      	ldr	r2, [pc, #344]	; (8009704 <HAL_ADC_ConfigChannel+0x858>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d004      	beq.n	80095b8 <HAL_ADC_ConfigChannel+0x70c>
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a55      	ldr	r2, [pc, #340]	; (8009708 <HAL_ADC_ConfigChannel+0x85c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d13a      	bne.n	800962e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80095b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d134      	bne.n	800962e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095cc:	d005      	beq.n	80095da <HAL_ADC_ConfigChannel+0x72e>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a4e      	ldr	r2, [pc, #312]	; (800970c <HAL_ADC_ConfigChannel+0x860>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	f040 8085 	bne.w	80096e4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095e2:	d004      	beq.n	80095ee <HAL_ADC_ConfigChannel+0x742>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a49      	ldr	r2, [pc, #292]	; (8009710 <HAL_ADC_ConfigChannel+0x864>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d101      	bne.n	80095f2 <HAL_ADC_ConfigChannel+0x746>
 80095ee:	4a49      	ldr	r2, [pc, #292]	; (8009714 <HAL_ADC_ConfigChannel+0x868>)
 80095f0:	e000      	b.n	80095f4 <HAL_ADC_ConfigChannel+0x748>
 80095f2:	4a43      	ldr	r2, [pc, #268]	; (8009700 <HAL_ADC_ConfigChannel+0x854>)
 80095f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f7fe ff91 	bl	8008526 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009604:	4b44      	ldr	r3, [pc, #272]	; (8009718 <HAL_ADC_ConfigChannel+0x86c>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	099b      	lsrs	r3, r3, #6
 800960a:	4a44      	ldr	r2, [pc, #272]	; (800971c <HAL_ADC_ConfigChannel+0x870>)
 800960c:	fba2 2303 	umull	r2, r3, r2, r3
 8009610:	099b      	lsrs	r3, r3, #6
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	4613      	mov	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4413      	add	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800961e:	e002      	b.n	8009626 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3b01      	subs	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d1f9      	bne.n	8009620 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800962c:	e05a      	b.n	80096e4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a3b      	ldr	r2, [pc, #236]	; (8009720 <HAL_ADC_ConfigChannel+0x874>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d125      	bne.n	8009684 <HAL_ADC_ConfigChannel+0x7d8>
 8009638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800963c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d11f      	bne.n	8009684 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a31      	ldr	r2, [pc, #196]	; (8009710 <HAL_ADC_ConfigChannel+0x864>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d104      	bne.n	8009658 <HAL_ADC_ConfigChannel+0x7ac>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a34      	ldr	r2, [pc, #208]	; (8009724 <HAL_ADC_ConfigChannel+0x878>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d047      	beq.n	80096e8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009660:	d004      	beq.n	800966c <HAL_ADC_ConfigChannel+0x7c0>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a2a      	ldr	r2, [pc, #168]	; (8009710 <HAL_ADC_ConfigChannel+0x864>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d101      	bne.n	8009670 <HAL_ADC_ConfigChannel+0x7c4>
 800966c:	4a29      	ldr	r2, [pc, #164]	; (8009714 <HAL_ADC_ConfigChannel+0x868>)
 800966e:	e000      	b.n	8009672 <HAL_ADC_ConfigChannel+0x7c6>
 8009670:	4a23      	ldr	r2, [pc, #140]	; (8009700 <HAL_ADC_ConfigChannel+0x854>)
 8009672:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f7fe ff52 	bl	8008526 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009682:	e031      	b.n	80096e8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a27      	ldr	r2, [pc, #156]	; (8009728 <HAL_ADC_ConfigChannel+0x87c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d12d      	bne.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800968e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d127      	bne.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a1c      	ldr	r2, [pc, #112]	; (8009710 <HAL_ADC_ConfigChannel+0x864>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d022      	beq.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ac:	d004      	beq.n	80096b8 <HAL_ADC_ConfigChannel+0x80c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a17      	ldr	r2, [pc, #92]	; (8009710 <HAL_ADC_ConfigChannel+0x864>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d101      	bne.n	80096bc <HAL_ADC_ConfigChannel+0x810>
 80096b8:	4a16      	ldr	r2, [pc, #88]	; (8009714 <HAL_ADC_ConfigChannel+0x868>)
 80096ba:	e000      	b.n	80096be <HAL_ADC_ConfigChannel+0x812>
 80096bc:	4a10      	ldr	r2, [pc, #64]	; (8009700 <HAL_ADC_ConfigChannel+0x854>)
 80096be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80096c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f7fe ff2c 	bl	8008526 <LL_ADC_SetCommonPathInternalCh>
 80096ce:	e00c      	b.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d4:	f043 0220 	orr.w	r2, r3, #32
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80096e2:	e002      	b.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096e4:	bf00      	nop
 80096e6:	e000      	b.n	80096ea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80096e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80096f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	37d8      	adds	r7, #216	; 0xd8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	50000700 	.word	0x50000700
 8009704:	c3210000 	.word	0xc3210000
 8009708:	90c00010 	.word	0x90c00010
 800970c:	50000600 	.word	0x50000600
 8009710:	50000100 	.word	0x50000100
 8009714:	50000300 	.word	0x50000300
 8009718:	20000004 	.word	0x20000004
 800971c:	053e2d63 	.word	0x053e2d63
 8009720:	c7520000 	.word	0xc7520000
 8009724:	50000500 	.word	0x50000500
 8009728:	cb840000 	.word	0xcb840000

0800972c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff f8b5 	bl	80088a8 <LL_ADC_IsEnabled>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d14d      	bne.n	80097e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	4b28      	ldr	r3, [pc, #160]	; (80097ec <ADC_Enable+0xc0>)
 800974c:	4013      	ands	r3, r2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00d      	beq.n	800976e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009756:	f043 0210 	orr.w	r2, r3, #16
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009762:	f043 0201 	orr.w	r2, r3, #1
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e039      	b.n	80097e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff f884 	bl	8008880 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009778:	f7fe fe94 	bl	80084a4 <HAL_GetTick>
 800977c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800977e:	e028      	b.n	80097d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff f88f 	bl	80088a8 <LL_ADC_IsEnabled>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d104      	bne.n	800979a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff f873 	bl	8008880 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800979a:	f7fe fe83 	bl	80084a4 <HAL_GetTick>
 800979e:	4602      	mov	r2, r0
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	1ad3      	subs	r3, r2, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d914      	bls.n	80097d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d00d      	beq.n	80097d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ba:	f043 0210 	orr.w	r2, r3, #16
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c6:	f043 0201 	orr.w	r2, r3, #1
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e007      	b.n	80097e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d1cf      	bne.n	8009780 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	8000003f 	.word	0x8000003f

080097f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009802:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009806:	2b00      	cmp	r3, #0
 8009808:	d14b      	bne.n	80098a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800980e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 0308 	and.w	r3, r3, #8
 8009820:	2b00      	cmp	r3, #0
 8009822:	d021      	beq.n	8009868 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f7fe ff3b 	bl	80086a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d032      	beq.n	800989a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d12b      	bne.n	800989a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d11f      	bne.n	800989a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800985e:	f043 0201 	orr.w	r2, r3, #1
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	65da      	str	r2, [r3, #92]	; 0x5c
 8009866:	e018      	b.n	800989a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0302 	and.w	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d111      	bne.n	800989a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800987a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009886:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d105      	bne.n	800989a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009892:	f043 0201 	orr.w	r2, r3, #1
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f7ff fae8 	bl	8008e70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80098a0:	e00e      	b.n	80098c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a6:	f003 0310 	and.w	r3, r3, #16
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff faf2 	bl	8008e98 <HAL_ADC_ErrorCallback>
}
 80098b4:	e004      	b.n	80098c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	4798      	blx	r3
}
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff fad4 	bl	8008e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009902:	f043 0204 	orr.w	r2, r3, #4
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fac4 	bl	8008e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009910:	bf00      	nop
 8009912:	3710      	adds	r7, #16
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f003 0307 	and.w	r3, r3, #7
 8009926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <__NVIC_SetPriorityGrouping+0x44>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009934:	4013      	ands	r3, r2
 8009936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800994a:	4a04      	ldr	r2, [pc, #16]	; (800995c <__NVIC_SetPriorityGrouping+0x44>)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	60d3      	str	r3, [r2, #12]
}
 8009950:	bf00      	nop
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr
 800995c:	e000ed00 	.word	0xe000ed00

08009960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <__NVIC_GetPriorityGrouping+0x18>)
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	0a1b      	lsrs	r3, r3, #8
 800996a:	f003 0307 	and.w	r3, r3, #7
}
 800996e:	4618      	mov	r0, r3
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	e000ed00 	.word	0xe000ed00

0800997c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800998a:	2b00      	cmp	r3, #0
 800998c:	db0b      	blt.n	80099a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	f003 021f 	and.w	r2, r3, #31
 8009994:	4907      	ldr	r1, [pc, #28]	; (80099b4 <__NVIC_EnableIRQ+0x38>)
 8009996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	2001      	movs	r0, #1
 800999e:	fa00 f202 	lsl.w	r2, r0, r2
 80099a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	e000e100 	.word	0xe000e100

080099b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	4603      	mov	r3, r0
 80099c0:	6039      	str	r1, [r7, #0]
 80099c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	db0a      	blt.n	80099e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	b2da      	uxtb	r2, r3
 80099d0:	490c      	ldr	r1, [pc, #48]	; (8009a04 <__NVIC_SetPriority+0x4c>)
 80099d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099d6:	0112      	lsls	r2, r2, #4
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	440b      	add	r3, r1
 80099dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80099e0:	e00a      	b.n	80099f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	4908      	ldr	r1, [pc, #32]	; (8009a08 <__NVIC_SetPriority+0x50>)
 80099e8:	79fb      	ldrb	r3, [r7, #7]
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	3b04      	subs	r3, #4
 80099f0:	0112      	lsls	r2, r2, #4
 80099f2:	b2d2      	uxtb	r2, r2
 80099f4:	440b      	add	r3, r1
 80099f6:	761a      	strb	r2, [r3, #24]
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	e000e100 	.word	0xe000e100
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b089      	sub	sp, #36	; 0x24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f003 0307 	and.w	r3, r3, #7
 8009a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f1c3 0307 	rsb	r3, r3, #7
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	bf28      	it	cs
 8009a2a:	2304      	movcs	r3, #4
 8009a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	3304      	adds	r3, #4
 8009a32:	2b06      	cmp	r3, #6
 8009a34:	d902      	bls.n	8009a3c <NVIC_EncodePriority+0x30>
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	3b03      	subs	r3, #3
 8009a3a:	e000      	b.n	8009a3e <NVIC_EncodePriority+0x32>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a40:	f04f 32ff 	mov.w	r2, #4294967295
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4a:	43da      	mvns	r2, r3
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	401a      	ands	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a54:	f04f 31ff 	mov.w	r1, #4294967295
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5e:	43d9      	mvns	r1, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a64:	4313      	orrs	r3, r2
         );
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3724      	adds	r7, #36	; 0x24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ff4c 	bl	8009918 <__NVIC_SetPriorityGrouping>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a96:	f7ff ff63 	bl	8009960 <__NVIC_GetPriorityGrouping>
 8009a9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	68b9      	ldr	r1, [r7, #8]
 8009aa0:	6978      	ldr	r0, [r7, #20]
 8009aa2:	f7ff ffb3 	bl	8009a0c <NVIC_EncodePriority>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aac:	4611      	mov	r1, r2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f7ff ff82 	bl	80099b8 <__NVIC_SetPriority>
}
 8009ab4:	bf00      	nop
 8009ab6:	3718      	adds	r7, #24
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7ff ff56 	bl	800997c <__NVIC_EnableIRQ>
}
 8009ad0:	bf00      	nop
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d101      	bne.n	8009aea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e08d      	b.n	8009c06 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	4b47      	ldr	r3, [pc, #284]	; (8009c10 <HAL_DMA_Init+0x138>)
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d80f      	bhi.n	8009b16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	4b45      	ldr	r3, [pc, #276]	; (8009c14 <HAL_DMA_Init+0x13c>)
 8009afe:	4413      	add	r3, r2
 8009b00:	4a45      	ldr	r2, [pc, #276]	; (8009c18 <HAL_DMA_Init+0x140>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	091b      	lsrs	r3, r3, #4
 8009b08:	009a      	lsls	r2, r3, #2
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a42      	ldr	r2, [pc, #264]	; (8009c1c <HAL_DMA_Init+0x144>)
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40
 8009b14:	e00e      	b.n	8009b34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4b40      	ldr	r3, [pc, #256]	; (8009c20 <HAL_DMA_Init+0x148>)
 8009b1e:	4413      	add	r3, r2
 8009b20:	4a3d      	ldr	r2, [pc, #244]	; (8009c18 <HAL_DMA_Init+0x140>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	091b      	lsrs	r3, r3, #4
 8009b28:	009a      	lsls	r2, r3, #2
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a3c      	ldr	r2, [pc, #240]	; (8009c24 <HAL_DMA_Init+0x14c>)
 8009b32:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a1b      	ldr	r3, [r3, #32]
 8009b76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fa76 	bl	800a078 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b94:	d102      	bne.n	8009b9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba4:	b2d2      	uxtb	r2, r2
 8009ba6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009bb0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d010      	beq.n	8009bdc <HAL_DMA_Init+0x104>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2b04      	cmp	r3, #4
 8009bc0:	d80c      	bhi.n	8009bdc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa96 	bl	800a0f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bcc:	2200      	movs	r2, #0
 8009bce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009bd8:	605a      	str	r2, [r3, #4]
 8009bda:	e008      	b.n	8009bee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3710      	adds	r7, #16
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	40020407 	.word	0x40020407
 8009c14:	bffdfff8 	.word	0xbffdfff8
 8009c18:	cccccccd 	.word	0xcccccccd
 8009c1c:	40020000 	.word	0x40020000
 8009c20:	bffdfbf8 	.word	0xbffdfbf8
 8009c24:	40020400 	.word	0x40020400

08009c28 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
 8009c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d101      	bne.n	8009c48 <HAL_DMA_Start_IT+0x20>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e066      	b.n	8009d16 <HAL_DMA_Start_IT+0xee>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d155      	bne.n	8009d08 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f022 0201 	bic.w	r2, r2, #1
 8009c78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	68b9      	ldr	r1, [r7, #8]
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f000 f9bb 	bl	8009ffc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d008      	beq.n	8009ca0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f042 020e 	orr.w	r2, r2, #14
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	e00f      	b.n	8009cc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0204 	bic.w	r2, r2, #4
 8009cae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 020a 	orr.w	r2, r2, #10
 8009cbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d007      	beq.n	8009cde <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cdc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d007      	beq.n	8009cf6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cf4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	601a      	str	r2, [r3, #0]
 8009d06:	e005      	b.n	8009d14 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009d10:	2302      	movs	r3, #2
 8009d12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3718      	adds	r7, #24
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b085      	sub	sp, #20
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b02      	cmp	r3, #2
 8009d34:	d005      	beq.n	8009d42 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
 8009d40:	e037      	b.n	8009db2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f022 020e 	bic.w	r2, r2, #14
 8009d50:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d60:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f022 0201 	bic.w	r2, r2, #1
 8009d70:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d76:	f003 021f 	and.w	r2, r3, #31
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7e:	2101      	movs	r1, #1
 8009d80:	fa01 f202 	lsl.w	r2, r1, r2
 8009d84:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d8a:	687a      	ldr	r2, [r7, #4]
 8009d8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009d8e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00c      	beq.n	8009db2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009da6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009db0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b084      	sub	sp, #16
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d00d      	beq.n	8009e04 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2204      	movs	r2, #4
 8009dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	73fb      	strb	r3, [r7, #15]
 8009e02:	e047      	b.n	8009e94 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 020e 	bic.w	r2, r2, #14
 8009e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f022 0201 	bic.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e38:	f003 021f 	and.w	r2, r3, #31
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e40:	2101      	movs	r1, #1
 8009e42:	fa01 f202 	lsl.w	r2, r1, r2
 8009e46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00c      	beq.n	8009e74 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	4798      	blx	r3
    }
  }
  return status;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	409a      	lsls	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d026      	beq.n	8009f18 <HAL_DMA_IRQHandler+0x7a>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	f003 0304 	and.w	r3, r3, #4
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d021      	beq.n	8009f18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0320 	and.w	r3, r3, #32
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d107      	bne.n	8009ef2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0204 	bic.w	r2, r2, #4
 8009ef0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ef6:	f003 021f 	and.w	r2, r3, #31
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efe:	2104      	movs	r1, #4
 8009f00:	fa01 f202 	lsl.w	r2, r1, r2
 8009f04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d071      	beq.n	8009ff2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009f16:	e06c      	b.n	8009ff2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	f003 031f 	and.w	r3, r3, #31
 8009f20:	2202      	movs	r2, #2
 8009f22:	409a      	lsls	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	4013      	ands	r3, r2
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d02e      	beq.n	8009f8a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d029      	beq.n	8009f8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0320 	and.w	r3, r3, #32
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10b      	bne.n	8009f5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 020a 	bic.w	r2, r2, #10
 8009f52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f60:	f003 021f 	and.w	r2, r3, #31
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f68:	2102      	movs	r1, #2
 8009f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8009f6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2200      	movs	r2, #0
 8009f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d038      	beq.n	8009ff2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009f88:	e033      	b.n	8009ff2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8e:	f003 031f 	and.w	r3, r3, #31
 8009f92:	2208      	movs	r2, #8
 8009f94:	409a      	lsls	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	4013      	ands	r3, r2
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d02a      	beq.n	8009ff4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d025      	beq.n	8009ff4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f022 020e 	bic.w	r2, r2, #14
 8009fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbc:	f003 021f 	and.w	r2, r3, #31
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8009fca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2201      	movs	r2, #1
 8009fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d004      	beq.n	8009ff4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
}
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a012:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d004      	beq.n	800a026 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a020:	68fa      	ldr	r2, [r7, #12]
 800a022:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a024:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02a:	f003 021f 	and.w	r2, r3, #31
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	2101      	movs	r1, #1
 800a034:	fa01 f202 	lsl.w	r2, r1, r2
 800a038:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	2b10      	cmp	r3, #16
 800a048:	d108      	bne.n	800a05c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a05a:	e007      	b.n	800a06c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	60da      	str	r2, [r3, #12]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	461a      	mov	r2, r3
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a088:	429a      	cmp	r2, r3
 800a08a:	d802      	bhi.n	800a092 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a08c:	4b15      	ldr	r3, [pc, #84]	; (800a0e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	e001      	b.n	800a096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a092:	4b15      	ldr	r3, [pc, #84]	; (800a0e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a094:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	3b08      	subs	r3, #8
 800a0a2:	4a12      	ldr	r2, [pc, #72]	; (800a0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a0a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a8:	091b      	lsrs	r3, r3, #4
 800a0aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b0:	089b      	lsrs	r3, r3, #2
 800a0b2:	009a      	lsls	r2, r3, #2
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	4a0b      	ldr	r2, [pc, #44]	; (800a0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a0c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 031f 	and.w	r3, r3, #31
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	409a      	lsls	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a0d2:	bf00      	nop
 800a0d4:	371c      	adds	r7, #28
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	40020407 	.word	0x40020407
 800a0e4:	40020800 	.word	0x40020800
 800a0e8:	40020820 	.word	0x40020820
 800a0ec:	cccccccd 	.word	0xcccccccd
 800a0f0:	40020880 	.word	0x40020880

0800a0f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	b2db      	uxtb	r3, r3
 800a102:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a108:	4413      	add	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	461a      	mov	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a08      	ldr	r2, [pc, #32]	; (800a138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a116:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	f003 031f 	and.w	r3, r3, #31
 800a120:	2201      	movs	r2, #1
 800a122:	409a      	lsls	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a128:	bf00      	nop
 800a12a:	3714      	adds	r7, #20
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	1000823f 	.word	0x1000823f
 800a138:	40020940 	.word	0x40020940

0800a13c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a146:	2300      	movs	r3, #0
 800a148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a14a:	e15a      	b.n	800a402 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	2101      	movs	r1, #1
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	fa01 f303 	lsl.w	r3, r1, r3
 800a158:	4013      	ands	r3, r2
 800a15a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 814c 	beq.w	800a3fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f003 0303 	and.w	r3, r3, #3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d005      	beq.n	800a17c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d130      	bne.n	800a1de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	2203      	movs	r2, #3
 800a188:	fa02 f303 	lsl.w	r3, r2, r3
 800a18c:	43db      	mvns	r3, r3
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	4013      	ands	r3, r2
 800a192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	68da      	ldr	r2, [r3, #12]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ba:	43db      	mvns	r3, r3
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4013      	ands	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	091b      	lsrs	r3, r3, #4
 800a1c8:	f003 0201 	and.w	r2, r3, #1
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	693a      	ldr	r2, [r7, #16]
 800a1dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	f003 0303 	and.w	r3, r3, #3
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d017      	beq.n	800a21a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	005b      	lsls	r3, r3, #1
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	43db      	mvns	r3, r3
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4013      	ands	r3, r2
 800a200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	fa02 f303 	lsl.w	r3, r2, r3
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	4313      	orrs	r3, r2
 800a212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f003 0303 	and.w	r3, r3, #3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d123      	bne.n	800a26e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	08da      	lsrs	r2, r3, #3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3208      	adds	r2, #8
 800a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	220f      	movs	r2, #15
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	43db      	mvns	r3, r3
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	4013      	ands	r3, r2
 800a248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f003 0307 	and.w	r3, r3, #7
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	fa02 f303 	lsl.w	r3, r2, r3
 800a25a:	693a      	ldr	r2, [r7, #16]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	08da      	lsrs	r2, r3, #3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3208      	adds	r2, #8
 800a268:	6939      	ldr	r1, [r7, #16]
 800a26a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	2203      	movs	r2, #3
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	43db      	mvns	r3, r3
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	4013      	ands	r3, r2
 800a284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	f003 0203 	and.w	r2, r3, #3
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	fa02 f303 	lsl.w	r3, r2, r3
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	4313      	orrs	r3, r2
 800a29a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f000 80a6 	beq.w	800a3fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2b0:	4b5b      	ldr	r3, [pc, #364]	; (800a420 <HAL_GPIO_Init+0x2e4>)
 800a2b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2b4:	4a5a      	ldr	r2, [pc, #360]	; (800a420 <HAL_GPIO_Init+0x2e4>)
 800a2b6:	f043 0301 	orr.w	r3, r3, #1
 800a2ba:	6613      	str	r3, [r2, #96]	; 0x60
 800a2bc:	4b58      	ldr	r3, [pc, #352]	; (800a420 <HAL_GPIO_Init+0x2e4>)
 800a2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	60bb      	str	r3, [r7, #8]
 800a2c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2c8:	4a56      	ldr	r2, [pc, #344]	; (800a424 <HAL_GPIO_Init+0x2e8>)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	089b      	lsrs	r3, r3, #2
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f003 0303 	and.w	r3, r3, #3
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	220f      	movs	r2, #15
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e4:	43db      	mvns	r3, r3
 800a2e6:	693a      	ldr	r2, [r7, #16]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a2f2:	d01f      	beq.n	800a334 <HAL_GPIO_Init+0x1f8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a4c      	ldr	r2, [pc, #304]	; (800a428 <HAL_GPIO_Init+0x2ec>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d019      	beq.n	800a330 <HAL_GPIO_Init+0x1f4>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a4b      	ldr	r2, [pc, #300]	; (800a42c <HAL_GPIO_Init+0x2f0>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d013      	beq.n	800a32c <HAL_GPIO_Init+0x1f0>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a4a      	ldr	r2, [pc, #296]	; (800a430 <HAL_GPIO_Init+0x2f4>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00d      	beq.n	800a328 <HAL_GPIO_Init+0x1ec>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a49      	ldr	r2, [pc, #292]	; (800a434 <HAL_GPIO_Init+0x2f8>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d007      	beq.n	800a324 <HAL_GPIO_Init+0x1e8>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a48      	ldr	r2, [pc, #288]	; (800a438 <HAL_GPIO_Init+0x2fc>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d101      	bne.n	800a320 <HAL_GPIO_Init+0x1e4>
 800a31c:	2305      	movs	r3, #5
 800a31e:	e00a      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a320:	2306      	movs	r3, #6
 800a322:	e008      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a324:	2304      	movs	r3, #4
 800a326:	e006      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a328:	2303      	movs	r3, #3
 800a32a:	e004      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e002      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <HAL_GPIO_Init+0x1fa>
 800a334:	2300      	movs	r3, #0
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	f002 0203 	and.w	r2, r2, #3
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	4093      	lsls	r3, r2
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a346:	4937      	ldr	r1, [pc, #220]	; (800a424 <HAL_GPIO_Init+0x2e8>)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	3302      	adds	r3, #2
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a354:	4b39      	ldr	r3, [pc, #228]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	43db      	mvns	r3, r3
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4013      	ands	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a378:	4a30      	ldr	r2, [pc, #192]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a37e:	4b2f      	ldr	r3, [pc, #188]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	43db      	mvns	r3, r3
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4013      	ands	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3a2:	4a26      	ldr	r2, [pc, #152]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a3a8:	4b24      	ldr	r3, [pc, #144]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a3cc:	4a1b      	ldr	r2, [pc, #108]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a3d2:	4b1a      	ldr	r3, [pc, #104]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	43db      	mvns	r3, r3
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	4013      	ands	r3, r2
 800a3e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a3f6:	4a11      	ldr	r2, [pc, #68]	; (800a43c <HAL_GPIO_Init+0x300>)
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3301      	adds	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	fa22 f303 	lsr.w	r3, r2, r3
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f47f ae9d 	bne.w	800a14c <HAL_GPIO_Init+0x10>
  }
}
 800a412:	bf00      	nop
 800a414:	bf00      	nop
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	40021000 	.word	0x40021000
 800a424:	40010000 	.word	0x40010000
 800a428:	48000400 	.word	0x48000400
 800a42c:	48000800 	.word	0x48000800
 800a430:	48000c00 	.word	0x48000c00
 800a434:	48001000 	.word	0x48001000
 800a438:	48001400 	.word	0x48001400
 800a43c:	40010400 	.word	0x40010400

0800a440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	807b      	strh	r3, [r7, #2]
 800a44c:	4613      	mov	r3, r2
 800a44e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a450:	787b      	ldrb	r3, [r7, #1]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a456:	887a      	ldrh	r2, [r7, #2]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a45c:	e002      	b.n	800a464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a45e:	887a      	ldrh	r2, [r7, #2]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a482:	887a      	ldrh	r2, [r7, #2]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4013      	ands	r3, r2
 800a488:	041a      	lsls	r2, r3, #16
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	43d9      	mvns	r1, r3
 800a48e:	887b      	ldrh	r3, [r7, #2]
 800a490:	400b      	ands	r3, r1
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	619a      	str	r2, [r3, #24]
}
 800a498:	bf00      	nop
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b082      	sub	sp, #8
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a4ae:	4b08      	ldr	r3, [pc, #32]	; (800a4d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4b0:	695a      	ldr	r2, [r3, #20]
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4ba:	4a05      	ldr	r2, [pc, #20]	; (800a4d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 f806 	bl	800a4d4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a4c8:	bf00      	nop
 800a4ca:	3708      	adds	r7, #8
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	40010400 	.word	0x40010400

0800a4d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b082      	sub	sp, #8
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e081      	b.n	800a600 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d106      	bne.n	800a516 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f7fc f8bd 	bl	8006690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2224      	movs	r2, #36	; 0x24
 800a51a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	681a      	ldr	r2, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0201 	bic.w	r2, r2, #1
 800a52c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	685a      	ldr	r2, [r3, #4]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a53a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689a      	ldr	r2, [r3, #8]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a54a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	68db      	ldr	r3, [r3, #12]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d107      	bne.n	800a564 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689a      	ldr	r2, [r3, #8]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a560:	609a      	str	r2, [r3, #8]
 800a562:	e006      	b.n	800a572 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689a      	ldr	r2, [r3, #8]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a570:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	2b02      	cmp	r3, #2
 800a578:	d104      	bne.n	800a584 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a582:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	6812      	ldr	r2, [r2, #0]
 800a58e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a596:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a5a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	69d9      	ldr	r1, [r3, #28]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1a      	ldr	r2, [r3, #32]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f042 0201 	orr.w	r2, r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2220      	movs	r2, #32
 800a5ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a5fe:	2300      	movs	r3, #0
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af02      	add	r7, sp, #8
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	4608      	mov	r0, r1
 800a612:	4611      	mov	r1, r2
 800a614:	461a      	mov	r2, r3
 800a616:	4603      	mov	r3, r0
 800a618:	817b      	strh	r3, [r7, #10]
 800a61a:	460b      	mov	r3, r1
 800a61c:	813b      	strh	r3, [r7, #8]
 800a61e:	4613      	mov	r3, r2
 800a620:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	f040 80f9 	bne.w	800a822 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <HAL_I2C_Mem_Write+0x34>
 800a636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d105      	bne.n	800a648 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a642:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a644:	2301      	movs	r3, #1
 800a646:	e0ed      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <HAL_I2C_Mem_Write+0x4e>
 800a652:	2302      	movs	r3, #2
 800a654:	e0e6      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a65e:	f7fd ff21 	bl	80084a4 <HAL_GetTick>
 800a662:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	2319      	movs	r3, #25
 800a66a:	2201      	movs	r2, #1
 800a66c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 fac3 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e0d1      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2221      	movs	r2, #33	; 0x21
 800a684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2240      	movs	r2, #64	; 0x40
 800a68c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	6a3a      	ldr	r2, [r7, #32]
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a6a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a6a8:	88f8      	ldrh	r0, [r7, #6]
 800a6aa:	893a      	ldrh	r2, [r7, #8]
 800a6ac:	8979      	ldrh	r1, [r7, #10]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	f000 f9d3 	bl	800aa64 <I2C_RequestMemoryWrite>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d005      	beq.n	800a6d0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e0a9      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	2bff      	cmp	r3, #255	; 0xff
 800a6d8:	d90e      	bls.n	800a6f8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	22ff      	movs	r2, #255	; 0xff
 800a6de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	8979      	ldrh	r1, [r7, #10]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fc2b 	bl	800af4c <I2C_TransferConfig>
 800a6f6:	e00f      	b.n	800a718 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a706:	b2da      	uxtb	r2, r3
 800a708:	8979      	ldrh	r1, [r7, #10]
 800a70a:	2300      	movs	r3, #0
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 fc1a 	bl	800af4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a718:	697a      	ldr	r2, [r7, #20]
 800a71a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 faad 	bl	800ac7c <I2C_WaitOnTXISFlagUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e07b      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	781a      	ldrb	r2, [r3, #0]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73c:	1c5a      	adds	r2, r3, #1
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a746:	b29b      	uxth	r3, r3
 800a748:	3b01      	subs	r3, #1
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a754:	3b01      	subs	r3, #1
 800a756:	b29a      	uxth	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a760:	b29b      	uxth	r3, r3
 800a762:	2b00      	cmp	r3, #0
 800a764:	d034      	beq.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d130      	bne.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	2200      	movs	r2, #0
 800a776:	2180      	movs	r1, #128	; 0x80
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 fa3f 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e04d      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	2bff      	cmp	r3, #255	; 0xff
 800a790:	d90e      	bls.n	800a7b0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	22ff      	movs	r2, #255	; 0xff
 800a796:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	8979      	ldrh	r1, [r7, #10]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fbcf 	bl	800af4c <I2C_TransferConfig>
 800a7ae:	e00f      	b.n	800a7d0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	8979      	ldrh	r1, [r7, #10]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9300      	str	r3, [sp, #0]
 800a7c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fbbe 	bl	800af4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d19e      	bne.n	800a718 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fa8c 	bl	800acfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d001      	beq.n	800a7ee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e01a      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2220      	movs	r2, #32
 800a7f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6859      	ldr	r1, [r3, #4]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b0a      	ldr	r3, [pc, #40]	; (800a82c <HAL_I2C_Mem_Write+0x224>)
 800a802:	400b      	ands	r3, r1
 800a804:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2220      	movs	r2, #32
 800a80a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	e000      	b.n	800a824 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a822:	2302      	movs	r3, #2
  }
}
 800a824:	4618      	mov	r0, r3
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	fe00e800 	.word	0xfe00e800

0800a830 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	4603      	mov	r3, r0
 800a840:	817b      	strh	r3, [r7, #10]
 800a842:	460b      	mov	r3, r1
 800a844:	813b      	strh	r3, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b20      	cmp	r3, #32
 800a854:	f040 80fd 	bne.w	800aa52 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <HAL_I2C_Mem_Read+0x34>
 800a85e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a86a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0f1      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_I2C_Mem_Read+0x4e>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e0ea      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a886:	f7fd fe0d 	bl	80084a4 <HAL_GetTick>
 800a88a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	2319      	movs	r3, #25
 800a892:	2201      	movs	r2, #1
 800a894:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f9af 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0d5      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2222      	movs	r2, #34	; 0x22
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2240      	movs	r2, #64	; 0x40
 800a8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a3a      	ldr	r2, [r7, #32]
 800a8c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8d0:	88f8      	ldrh	r0, [r7, #6]
 800a8d2:	893a      	ldrh	r2, [r7, #8]
 800a8d4:	8979      	ldrh	r1, [r7, #10]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4603      	mov	r3, r0
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f913 	bl	800ab0c <I2C_RequestMemoryRead>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0ad      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2bff      	cmp	r3, #255	; 0xff
 800a900:	d90e      	bls.n	800a920 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	22ff      	movs	r2, #255	; 0xff
 800a906:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	8979      	ldrh	r1, [r7, #10]
 800a910:	4b52      	ldr	r3, [pc, #328]	; (800aa5c <HAL_I2C_Mem_Read+0x22c>)
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 fb17 	bl	800af4c <I2C_TransferConfig>
 800a91e:	e00f      	b.n	800a940 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	8979      	ldrh	r1, [r7, #10]
 800a932:	4b4a      	ldr	r3, [pc, #296]	; (800aa5c <HAL_I2C_Mem_Read+0x22c>)
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fb06 	bl	800af4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a946:	2200      	movs	r2, #0
 800a948:	2104      	movs	r1, #4
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 f956 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d001      	beq.n	800a95a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e07c      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a976:	3b01      	subs	r3, #1
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a990:	b29b      	uxth	r3, r3
 800a992:	2b00      	cmp	r3, #0
 800a994:	d034      	beq.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d130      	bne.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	2180      	movs	r1, #128	; 0x80
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f000 f927 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d001      	beq.n	800a9b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e04d      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	2bff      	cmp	r3, #255	; 0xff
 800a9c0:	d90e      	bls.n	800a9e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	22ff      	movs	r2, #255	; 0xff
 800a9c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9cc:	b2da      	uxtb	r2, r3
 800a9ce:	8979      	ldrh	r1, [r7, #10]
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 fab7 	bl	800af4c <I2C_TransferConfig>
 800a9de:	e00f      	b.n	800aa00 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	8979      	ldrh	r1, [r7, #10]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 faa6 	bl	800af4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d19a      	bne.n	800a940 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f000 f974 	bl	800acfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e01a      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2220      	movs	r2, #32
 800aa24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6859      	ldr	r1, [r3, #4]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	4b0b      	ldr	r3, [pc, #44]	; (800aa60 <HAL_I2C_Mem_Read+0x230>)
 800aa32:	400b      	ands	r3, r1
 800aa34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2220      	movs	r2, #32
 800aa3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e000      	b.n	800aa54 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800aa52:	2302      	movs	r3, #2
  }
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	80002400 	.word	0x80002400
 800aa60:	fe00e800 	.word	0xfe00e800

0800aa64 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af02      	add	r7, sp, #8
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	4608      	mov	r0, r1
 800aa6e:	4611      	mov	r1, r2
 800aa70:	461a      	mov	r2, r3
 800aa72:	4603      	mov	r3, r0
 800aa74:	817b      	strh	r3, [r7, #10]
 800aa76:	460b      	mov	r3, r1
 800aa78:	813b      	strh	r3, [r7, #8]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	8979      	ldrh	r1, [r7, #10]
 800aa84:	4b20      	ldr	r3, [pc, #128]	; (800ab08 <I2C_RequestMemoryWrite+0xa4>)
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f000 fa5d 	bl	800af4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa92:	69fa      	ldr	r2, [r7, #28]
 800aa94:	69b9      	ldr	r1, [r7, #24]
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f000 f8f0 	bl	800ac7c <I2C_WaitOnTXISFlagUntilTimeout>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e02c      	b.n	800ab00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aaa6:	88fb      	ldrh	r3, [r7, #6]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d105      	bne.n	800aab8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	b2da      	uxtb	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	629a      	str	r2, [r3, #40]	; 0x28
 800aab6:	e015      	b.n	800aae4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aab8:	893b      	ldrh	r3, [r7, #8]
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	69b9      	ldr	r1, [r7, #24]
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f000 f8d6 	bl	800ac7c <I2C_WaitOnTXISFlagUntilTimeout>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d001      	beq.n	800aada <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e012      	b.n	800ab00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2200      	movs	r2, #0
 800aaec:	2180      	movs	r1, #128	; 0x80
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f884 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e000      	b.n	800ab00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	80002000 	.word	0x80002000

0800ab0c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af02      	add	r7, sp, #8
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	4608      	mov	r0, r1
 800ab16:	4611      	mov	r1, r2
 800ab18:	461a      	mov	r2, r3
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	817b      	strh	r3, [r7, #10]
 800ab1e:	460b      	mov	r3, r1
 800ab20:	813b      	strh	r3, [r7, #8]
 800ab22:	4613      	mov	r3, r2
 800ab24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ab26:	88fb      	ldrh	r3, [r7, #6]
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	8979      	ldrh	r1, [r7, #10]
 800ab2c:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <I2C_RequestMemoryRead+0xa4>)
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	2300      	movs	r3, #0
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 fa0a 	bl	800af4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab38:	69fa      	ldr	r2, [r7, #28]
 800ab3a:	69b9      	ldr	r1, [r7, #24]
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 f89d 	bl	800ac7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e02c      	b.n	800aba6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d105      	bne.n	800ab5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab52:	893b      	ldrh	r3, [r7, #8]
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	629a      	str	r2, [r3, #40]	; 0x28
 800ab5c:	e015      	b.n	800ab8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ab5e:	893b      	ldrh	r3, [r7, #8]
 800ab60:	0a1b      	lsrs	r3, r3, #8
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab6c:	69fa      	ldr	r2, [r7, #28]
 800ab6e:	69b9      	ldr	r1, [r7, #24]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f883 	bl	800ac7c <I2C_WaitOnTXISFlagUntilTimeout>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d001      	beq.n	800ab80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	e012      	b.n	800aba6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ab80:	893b      	ldrh	r3, [r7, #8]
 800ab82:	b2da      	uxtb	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	9300      	str	r3, [sp, #0]
 800ab8e:	69bb      	ldr	r3, [r7, #24]
 800ab90:	2200      	movs	r2, #0
 800ab92:	2140      	movs	r1, #64	; 0x40
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f000 f831 	bl	800abfc <I2C_WaitOnFlagUntilTimeout>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d001      	beq.n	800aba4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e000      	b.n	800aba6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	80002000 	.word	0x80002000

0800abb4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d103      	bne.n	800abd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2200      	movs	r2, #0
 800abd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	699b      	ldr	r3, [r3, #24]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d007      	beq.n	800abf0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	699a      	ldr	r2, [r3, #24]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0201 	orr.w	r2, r2, #1
 800abee:	619a      	str	r2, [r3, #24]
  }
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	4613      	mov	r3, r2
 800ac0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac0c:	e022      	b.n	800ac54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac14:	d01e      	beq.n	800ac54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac16:	f7fd fc45 	bl	80084a4 <HAL_GetTick>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	1ad3      	subs	r3, r2, r3
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d302      	bcc.n	800ac2c <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d113      	bne.n	800ac54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac30:	f043 0220 	orr.w	r2, r3, #32
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	2220      	movs	r2, #32
 800ac3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e00f      	b.n	800ac74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	699a      	ldr	r2, [r3, #24]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	68ba      	ldr	r2, [r7, #8]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	bf0c      	ite	eq
 800ac64:	2301      	moveq	r3, #1
 800ac66:	2300      	movne	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	79fb      	ldrb	r3, [r7, #7]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d0cd      	beq.n	800ac0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ac88:	e02c      	b.n	800ace4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	68b9      	ldr	r1, [r7, #8]
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 f870 	bl	800ad74 <I2C_IsErrorOccurred>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e02a      	b.n	800acf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d01e      	beq.n	800ace4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aca6:	f7fd fbfd 	bl	80084a4 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d302      	bcc.n	800acbc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d113      	bne.n	800ace4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc0:	f043 0220 	orr.w	r2, r3, #32
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2220      	movs	r2, #32
 800accc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ace0:	2301      	movs	r3, #1
 800ace2:	e007      	b.n	800acf4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f003 0302 	and.w	r3, r3, #2
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d1cb      	bne.n	800ac8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad08:	e028      	b.n	800ad5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f830 	bl	800ad74 <I2C_IsErrorOccurred>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e026      	b.n	800ad6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad1e:	f7fd fbc1 	bl	80084a4 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	68ba      	ldr	r2, [r7, #8]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d302      	bcc.n	800ad34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d113      	bne.n	800ad5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad38:	f043 0220 	orr.w	r2, r3, #32
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e007      	b.n	800ad6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f003 0320 	and.w	r3, r3, #32
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d1cf      	bne.n	800ad0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	; 0x28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f003 0310 	and.w	r3, r3, #16
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d075      	beq.n	800ae8c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2210      	movs	r2, #16
 800ada6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ada8:	e056      	b.n	800ae58 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb0:	d052      	beq.n	800ae58 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800adb2:	f7fd fb77 	bl	80084a4 <HAL_GetTick>
 800adb6:	4602      	mov	r2, r0
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d302      	bcc.n	800adc8 <I2C_IsErrorOccurred+0x54>
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d147      	bne.n	800ae58 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800add2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800adda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ade6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adea:	d12e      	bne.n	800ae4a <I2C_IsErrorOccurred+0xd6>
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adf2:	d02a      	beq.n	800ae4a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800adf4:	7cfb      	ldrb	r3, [r7, #19]
 800adf6:	2b20      	cmp	r3, #32
 800adf8:	d027      	beq.n	800ae4a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae08:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ae0a:	f7fd fb4b 	bl	80084a4 <HAL_GetTick>
 800ae0e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae10:	e01b      	b.n	800ae4a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ae12:	f7fd fb47 	bl	80084a4 <HAL_GetTick>
 800ae16:	4602      	mov	r2, r0
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b19      	cmp	r3, #25
 800ae1e:	d914      	bls.n	800ae4a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae24:	f043 0220 	orr.w	r2, r3, #32
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	f003 0320 	and.w	r3, r3, #32
 800ae54:	2b20      	cmp	r3, #32
 800ae56:	d1dc      	bne.n	800ae12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	699b      	ldr	r3, [r3, #24]
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b20      	cmp	r3, #32
 800ae64:	d003      	beq.n	800ae6e <I2C_IsErrorOccurred+0xfa>
 800ae66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d09d      	beq.n	800adaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ae6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2220      	movs	r2, #32
 800ae7c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ae7e:	6a3b      	ldr	r3, [r7, #32]
 800ae80:	f043 0304 	orr.w	r3, r3, #4
 800ae84:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d00b      	beq.n	800aeb6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	f043 0301 	orr.w	r3, r3, #1
 800aea4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aeae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00b      	beq.n	800aed8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aec0:	6a3b      	ldr	r3, [r7, #32]
 800aec2:	f043 0308 	orr.w	r3, r3, #8
 800aec6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aed0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00b      	beq.n	800aefa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	f043 0302 	orr.w	r3, r3, #2
 800aee8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aefa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01c      	beq.n	800af3c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7ff fe56 	bl	800abb4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6859      	ldr	r1, [r3, #4]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4b0d      	ldr	r3, [pc, #52]	; (800af48 <I2C_IsErrorOccurred+0x1d4>)
 800af14:	400b      	ands	r3, r1
 800af16:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	431a      	orrs	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2220      	movs	r2, #32
 800af28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800af3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800af40:	4618      	mov	r0, r3
 800af42:	3728      	adds	r7, #40	; 0x28
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	fe00e800 	.word	0xfe00e800

0800af4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b087      	sub	sp, #28
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	607b      	str	r3, [r7, #4]
 800af56:	460b      	mov	r3, r1
 800af58:	817b      	strh	r3, [r7, #10]
 800af5a:	4613      	mov	r3, r2
 800af5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af5e:	897b      	ldrh	r3, [r7, #10]
 800af60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af64:	7a7b      	ldrb	r3, [r7, #9]
 800af66:	041b      	lsls	r3, r3, #16
 800af68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af6c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	4313      	orrs	r3, r2
 800af76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af7a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	685a      	ldr	r2, [r3, #4]
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	0d5b      	lsrs	r3, r3, #21
 800af86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800af8a:	4b08      	ldr	r3, [pc, #32]	; (800afac <I2C_TransferConfig+0x60>)
 800af8c:	430b      	orrs	r3, r1
 800af8e:	43db      	mvns	r3, r3
 800af90:	ea02 0103 	and.w	r1, r2, r3
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	430a      	orrs	r2, r1
 800af9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af9e:	bf00      	nop
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	03ff63ff 	.word	0x03ff63ff

0800afb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b20      	cmp	r3, #32
 800afc4:	d138      	bne.n	800b038 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d101      	bne.n	800afd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800afd0:	2302      	movs	r3, #2
 800afd2:	e032      	b.n	800b03a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2224      	movs	r2, #36	; 0x24
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f022 0201 	bic.w	r2, r2, #1
 800aff2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b002:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6819      	ldr	r1, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2220      	movs	r2, #32
 800b028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	e000      	b.n	800b03a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b038:	2302      	movs	r3, #2
  }
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	370c      	adds	r7, #12
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr

0800b046 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b046:	b480      	push	{r7}
 800b048:	b085      	sub	sp, #20
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	6078      	str	r0, [r7, #4]
 800b04e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b20      	cmp	r3, #32
 800b05a:	d139      	bne.n	800b0d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b066:	2302      	movs	r3, #2
 800b068:	e033      	b.n	800b0d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2224      	movs	r2, #36	; 0x24
 800b076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f022 0201 	bic.w	r2, r2, #1
 800b088:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b098:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	021b      	lsls	r3, r3, #8
 800b09e:	68fa      	ldr	r2, [r7, #12]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f042 0201 	orr.w	r2, r2, #1
 800b0ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	e000      	b.n	800b0d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b0d0:	2302      	movs	r3, #2
  }
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b0de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0e0:	b08b      	sub	sp, #44	; 0x2c
 800b0e2:	af06      	add	r7, sp, #24
 800b0e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e0d7      	b.n	800b2a0 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f00c fb29 	bl	801775c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2203      	movs	r2, #3
 800b10e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4618      	mov	r0, r3
 800b118:	f006 f955 	bl	80113c6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
 800b120:	e04c      	b.n	800b1bc <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b122:	7bfb      	ldrb	r3, [r7, #15]
 800b124:	6879      	ldr	r1, [r7, #4]
 800b126:	1c5a      	adds	r2, r3, #1
 800b128:	4613      	mov	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	4413      	add	r3, r2
 800b12e:	00db      	lsls	r3, r3, #3
 800b130:	440b      	add	r3, r1
 800b132:	3301      	adds	r3, #1
 800b134:	2201      	movs	r2, #1
 800b136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	00db      	lsls	r3, r3, #3
 800b146:	440b      	add	r3, r1
 800b148:	7bfa      	ldrb	r2, [r7, #15]
 800b14a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b14c:	7bfa      	ldrb	r2, [r7, #15]
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	b298      	uxth	r0, r3
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4613      	mov	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	440b      	add	r3, r1
 800b15e:	3336      	adds	r3, #54	; 0x36
 800b160:	4602      	mov	r2, r0
 800b162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	6879      	ldr	r1, [r7, #4]
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	00db      	lsls	r3, r3, #3
 800b172:	440b      	add	r3, r1
 800b174:	3303      	adds	r3, #3
 800b176:	2200      	movs	r2, #0
 800b178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b17a:	7bfa      	ldrb	r2, [r7, #15]
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	4613      	mov	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4413      	add	r3, r2
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	440b      	add	r3, r1
 800b188:	3338      	adds	r3, #56	; 0x38
 800b18a:	2200      	movs	r2, #0
 800b18c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b18e:	7bfa      	ldrb	r2, [r7, #15]
 800b190:	6879      	ldr	r1, [r7, #4]
 800b192:	4613      	mov	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	440b      	add	r3, r1
 800b19c:	333c      	adds	r3, #60	; 0x3c
 800b19e:	2200      	movs	r2, #0
 800b1a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b1a2:	7bfa      	ldrb	r2, [r7, #15]
 800b1a4:	6879      	ldr	r1, [r7, #4]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	00db      	lsls	r3, r3, #3
 800b1ae:	440b      	add	r3, r1
 800b1b0:	3340      	adds	r3, #64	; 0x40
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	73fb      	strb	r3, [r7, #15]
 800b1bc:	7bfa      	ldrb	r2, [r7, #15]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d3ad      	bcc.n	800b122 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]
 800b1ca:	e044      	b.n	800b256 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b1cc:	7bfa      	ldrb	r2, [r7, #15]
 800b1ce:	6879      	ldr	r1, [r7, #4]
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	00db      	lsls	r3, r3, #3
 800b1d8:	440b      	add	r3, r1
 800b1da:	f203 1369 	addw	r3, r3, #361	; 0x169
 800b1de:	2200      	movs	r2, #0
 800b1e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b1e2:	7bfa      	ldrb	r2, [r7, #15]
 800b1e4:	6879      	ldr	r1, [r7, #4]
 800b1e6:	4613      	mov	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4413      	add	r3, r2
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b1f4:	7bfa      	ldrb	r2, [r7, #15]
 800b1f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b1f8:	7bfa      	ldrb	r2, [r7, #15]
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	440b      	add	r3, r1
 800b206:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800b20a:	2200      	movs	r2, #0
 800b20c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b20e:	7bfa      	ldrb	r2, [r7, #15]
 800b210:	6879      	ldr	r1, [r7, #4]
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	440b      	add	r3, r1
 800b21c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b224:	7bfa      	ldrb	r2, [r7, #15]
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	440b      	add	r3, r1
 800b232:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b236:	2200      	movs	r2, #0
 800b238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b23a:	7bfa      	ldrb	r2, [r7, #15]
 800b23c:	6879      	ldr	r1, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	440b      	add	r3, r1
 800b248:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800b24c:	2200      	movs	r2, #0
 800b24e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	3301      	adds	r3, #1
 800b254:	73fb      	strb	r3, [r7, #15]
 800b256:	7bfa      	ldrb	r2, [r7, #15]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	429a      	cmp	r2, r3
 800b25e:	d3b5      	bcc.n	800b1cc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	603b      	str	r3, [r7, #0]
 800b266:	687e      	ldr	r6, [r7, #4]
 800b268:	466d      	mov	r5, sp
 800b26a:	f106 0410 	add.w	r4, r6, #16
 800b26e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b272:	6823      	ldr	r3, [r4, #0]
 800b274:	602b      	str	r3, [r5, #0]
 800b276:	1d33      	adds	r3, r6, #4
 800b278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b27a:	6838      	ldr	r0, [r7, #0]
 800b27c:	f006 f8be 	bl	80113fc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d102      	bne.n	800b29e <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f001 fc29 	bl	800caf0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b29e:	2300      	movs	r3, #0
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b2a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d101      	bne.n	800b2be <HAL_PCD_Start+0x16>
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	e012      	b.n	800b2e4 <HAL_PCD_Start+0x3c>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f006 f864 	bl	8011398 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f008 fa7d 	bl	80137d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f008 fa82 	bl	8013802 <USB_ReadInterrupts>
 800b2fe:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fb26 	bl	800b95c <PCD_EP_ISR_Handler>

    return;
 800b310:	e110      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b324:	b29a      	uxth	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b32e:	b292      	uxth	r2, r2
 800b330:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f00c faa2 	bl	801787e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b33a:	2100      	movs	r1, #0
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f8fc 	bl	800b53a <HAL_PCD_SetAddress>

    return;
 800b342:	e0f7      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00c      	beq.n	800b368 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b356:	b29a      	uxth	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b360:	b292      	uxth	r2, r2
 800b362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b366:	e0e5      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00c      	beq.n	800b38c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b384:	b292      	uxth	r2, r2
 800b386:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b38a:	e0d3      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d034      	beq.n	800b400 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b39e:	b29a      	uxth	r2, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f022 0204 	bic.w	r2, r2, #4
 800b3a8:	b292      	uxth	r2, r2
 800b3aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 0208 	bic.w	r2, r2, #8
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d107      	bne.n	800b3e0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b3d8:	2100      	movs	r1, #0
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f00c fc44 	bl	8017c68 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f00c fa85 	bl	80178f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b3f8:	b292      	uxth	r2, r2
 800b3fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b3fe:	e099      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b406:	2b00      	cmp	r3, #0
 800b408:	d027      	beq.n	800b45a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b412:	b29a      	uxth	r2, r3
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f042 0208 	orr.w	r2, r2, #8
 800b41c:	b292      	uxth	r2, r2
 800b41e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b42a:	b29a      	uxth	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b434:	b292      	uxth	r2, r2
 800b436:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b442:	b29a      	uxth	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0204 	orr.w	r2, r2, #4
 800b44c:	b292      	uxth	r2, r2
 800b44e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f00c fa32 	bl	80178bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b458:	e06c      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b460:	2b00      	cmp	r3, #0
 800b462:	d040      	beq.n	800b4e6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b476:	b292      	uxth	r2, r2
 800b478:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d12b      	bne.n	800b4de <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b48e:	b29a      	uxth	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f042 0204 	orr.w	r2, r2, #4
 800b498:	b292      	uxth	r2, r2
 800b49a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f042 0208 	orr.w	r2, r2, #8
 800b4b0:	b292      	uxth	r2, r2
 800b4b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	089b      	lsrs	r3, r3, #2
 800b4ca:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b4d4:	2101      	movs	r1, #1
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f00c fbc6 	bl	8017c68 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b4dc:	e02a      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f00c f9ec 	bl	80178bc <HAL_PCD_SuspendCallback>
    return;
 800b4e4:	e026      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00f      	beq.n	800b510 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b502:	b292      	uxth	r2, r2
 800b504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f00c f9aa 	bl	8017862 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b50e:	e011      	b.n	800b534 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00c      	beq.n	800b534 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b52c:	b292      	uxth	r2, r2
 800b52e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b532:	bf00      	nop
  }
}
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b082      	sub	sp, #8
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	460b      	mov	r3, r1
 800b544:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d101      	bne.n	800b554 <HAL_PCD_SetAddress+0x1a>
 800b550:	2302      	movs	r3, #2
 800b552:	e013      	b.n	800b57c <HAL_PCD_SetAddress+0x42>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2201      	movs	r2, #1
 800b558:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	78fa      	ldrb	r2, [r7, #3]
 800b560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	78fa      	ldrb	r2, [r7, #3]
 800b56a:	4611      	mov	r1, r2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f008 f91d 	bl	80137ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	4608      	mov	r0, r1
 800b58e:	4611      	mov	r1, r2
 800b590:	461a      	mov	r2, r3
 800b592:	4603      	mov	r3, r0
 800b594:	70fb      	strb	r3, [r7, #3]
 800b596:	460b      	mov	r3, r1
 800b598:	803b      	strh	r3, [r7, #0]
 800b59a:	4613      	mov	r3, r2
 800b59c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b5a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	da0e      	bge.n	800b5c8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5aa:	78fb      	ldrb	r3, [r7, #3]
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	4413      	add	r3, r2
 800b5b8:	00db      	lsls	r3, r3, #3
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4413      	add	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	705a      	strb	r2, [r3, #1]
 800b5c6:	e00e      	b.n	800b5e6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5c8:	78fb      	ldrb	r3, [r7, #3]
 800b5ca:	f003 0207 	and.w	r2, r3, #7
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	009b      	lsls	r3, r3, #2
 800b5d2:	4413      	add	r3, r2
 800b5d4:	00db      	lsls	r3, r3, #3
 800b5d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b5e6:	78fb      	ldrb	r3, [r7, #3]
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	b2da      	uxtb	r2, r3
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b5f2:	883a      	ldrh	r2, [r7, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	78ba      	ldrb	r2, [r7, #2]
 800b5fc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	785b      	ldrb	r3, [r3, #1]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d004      	beq.n	800b610 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b610:	78bb      	ldrb	r3, [r7, #2]
 800b612:	2b02      	cmp	r3, #2
 800b614:	d102      	bne.n	800b61c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2200      	movs	r2, #0
 800b61a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b622:	2b01      	cmp	r3, #1
 800b624:	d101      	bne.n	800b62a <HAL_PCD_EP_Open+0xa6>
 800b626:	2302      	movs	r3, #2
 800b628:	e00e      	b.n	800b648 <HAL_PCD_EP_Open+0xc4>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68f9      	ldr	r1, [r7, #12]
 800b638:	4618      	mov	r0, r3
 800b63a:	f005 ff01 	bl	8011440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800b646:	7afb      	ldrb	r3, [r7, #11]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b65c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b660:	2b00      	cmp	r3, #0
 800b662:	da0e      	bge.n	800b682 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b664:	78fb      	ldrb	r3, [r7, #3]
 800b666:	f003 0307 	and.w	r3, r3, #7
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	00db      	lsls	r3, r3, #3
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	4413      	add	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2201      	movs	r2, #1
 800b67e:	705a      	strb	r2, [r3, #1]
 800b680:	e00e      	b.n	800b6a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	f003 0207 	and.w	r2, r3, #7
 800b688:	4613      	mov	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4413      	add	r3, r2
 800b698:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	f003 0307 	and.w	r3, r3, #7
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_PCD_EP_Close+0x6a>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e00e      	b.n	800b6d8 <HAL_PCD_EP_Close+0x88>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68f9      	ldr	r1, [r7, #12]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f006 fa4d 	bl	8011b68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b086      	sub	sp, #24
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	607a      	str	r2, [r7, #4]
 800b6ea:	603b      	str	r3, [r7, #0]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6f0:	7afb      	ldrb	r3, [r7, #11]
 800b6f2:	f003 0207 	and.w	r2, r3, #7
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b702:	68fa      	ldr	r2, [r7, #12]
 800b704:	4413      	add	r3, r2
 800b706:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2200      	movs	r2, #0
 800b718:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b720:	7afb      	ldrb	r3, [r7, #11]
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	b2da      	uxtb	r2, r3
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b72c:	7afb      	ldrb	r3, [r7, #11]
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6979      	ldr	r1, [r7, #20]
 800b73c:	4618      	mov	r0, r3
 800b73e:	f006 fc00 	bl	8011f42 <USB_EPStartXfer>
 800b742:	e005      	b.n	800b750 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6979      	ldr	r1, [r7, #20]
 800b74a:	4618      	mov	r0, r3
 800b74c:	f006 fbf9 	bl	8011f42 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3718      	adds	r7, #24
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	460b      	mov	r3, r1
 800b764:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b766:	78fb      	ldrb	r3, [r7, #3]
 800b768:	f003 0207 	and.w	r2, r3, #7
 800b76c:	6879      	ldr	r1, [r7, #4]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	440b      	add	r3, r1
 800b778:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b77c:	681b      	ldr	r3, [r3, #0]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr

0800b78a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	607a      	str	r2, [r7, #4]
 800b794:	603b      	str	r3, [r7, #0]
 800b796:	460b      	mov	r3, r1
 800b798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b79a:	7afb      	ldrb	r3, [r7, #11]
 800b79c:	f003 0307 	and.w	r3, r3, #7
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	00db      	lsls	r3, r3, #3
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7d6:	7afb      	ldrb	r3, [r7, #11]
 800b7d8:	f003 0307 	and.w	r3, r3, #7
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b7e2:	7afb      	ldrb	r3, [r7, #11]
 800b7e4:	f003 0307 	and.w	r3, r3, #7
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d106      	bne.n	800b7fa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6979      	ldr	r1, [r7, #20]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f006 fba5 	bl	8011f42 <USB_EPStartXfer>
 800b7f8:	e005      	b.n	800b806 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6979      	ldr	r1, [r7, #20]
 800b800:	4618      	mov	r0, r3
 800b802:	f006 fb9e 	bl	8011f42 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b81c:	78fb      	ldrb	r3, [r7, #3]
 800b81e:	f003 0207 	and.w	r2, r3, #7
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	429a      	cmp	r2, r3
 800b828:	d901      	bls.n	800b82e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e03e      	b.n	800b8ac <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b82e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b832:	2b00      	cmp	r3, #0
 800b834:	da0e      	bge.n	800b854 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b836:	78fb      	ldrb	r3, [r7, #3]
 800b838:	f003 0307 	and.w	r3, r3, #7
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	4613      	mov	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	4413      	add	r3, r2
 800b844:	00db      	lsls	r3, r3, #3
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4413      	add	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2201      	movs	r2, #1
 800b850:	705a      	strb	r2, [r3, #1]
 800b852:	e00c      	b.n	800b86e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4613      	mov	r3, r2
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	4413      	add	r3, r2
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	4413      	add	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2201      	movs	r2, #1
 800b872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b874:	78fb      	ldrb	r3, [r7, #3]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <HAL_PCD_EP_SetStall+0x7e>
 800b88a:	2302      	movs	r3, #2
 800b88c:	e00e      	b.n	800b8ac <HAL_PCD_EP_SetStall+0x9c>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f007 fe86 	bl	80135ae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b8c0:	78fb      	ldrb	r3, [r7, #3]
 800b8c2:	f003 020f 	and.w	r2, r3, #15
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d901      	bls.n	800b8d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e040      	b.n	800b954 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b8d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	da0e      	bge.n	800b8f8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	f003 0307 	and.w	r3, r3, #7
 800b8e0:	1c5a      	adds	r2, r3, #1
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	00db      	lsls	r3, r3, #3
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	705a      	strb	r2, [r3, #1]
 800b8f6:	e00e      	b.n	800b916 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	f003 0207 	and.w	r2, r3, #7
 800b8fe:	4613      	mov	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	00db      	lsls	r3, r3, #3
 800b906:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	4413      	add	r3, r2
 800b90e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2200      	movs	r2, #0
 800b914:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b91c:	78fb      	ldrb	r3, [r7, #3]
 800b91e:	f003 0307 	and.w	r3, r3, #7
 800b922:	b2da      	uxtb	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b92e:	2b01      	cmp	r3, #1
 800b930:	d101      	bne.n	800b936 <HAL_PCD_EP_ClrStall+0x82>
 800b932:	2302      	movs	r3, #2
 800b934:	e00e      	b.n	800b954 <HAL_PCD_EP_ClrStall+0xa0>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	68f9      	ldr	r1, [r7, #12]
 800b944:	4618      	mov	r0, r3
 800b946:	f007 fe83 	bl	8013650 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3710      	adds	r7, #16
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b096      	sub	sp, #88	; 0x58
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b964:	e39c      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b96e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b972:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 030f 	and.w	r3, r3, #15
 800b97c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800b980:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 815e 	bne.w	800bc46 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b98a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b98e:	f003 0310 	and.w	r3, r3, #16
 800b992:	2b00      	cmp	r3, #0
 800b994:	d150      	bne.n	800ba38 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800b9a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a6:	81fb      	strh	r3, [r7, #14]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	89fb      	ldrh	r3, [r7, #14]
 800b9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3328      	adds	r3, #40	; 0x28
 800b9be:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9c8:	b29b      	uxth	r3, r3
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	4413      	add	r3, r2
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	6812      	ldr	r2, [r2, #0]
 800b9d8:	4413      	add	r3, r2
 800b9da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ea:	695a      	ldr	r2, [r3, #20]
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	441a      	add	r2, r3
 800b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f00b ff18 	bl	801782e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba04:	b2db      	uxtb	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f000 834a 	beq.w	800c0a0 <PCD_EP_ISR_Handler+0x744>
 800ba0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba0e:	699b      	ldr	r3, [r3, #24]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f040 8345 	bne.w	800c0a0 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba22:	b2da      	uxtb	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ba36:	e333      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ba3e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800ba4a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800ba4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d032      	beq.n	800babc <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	4413      	add	r3, r2
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	6812      	ldr	r2, [r2, #0]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800ba7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6818      	ldr	r0, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800ba88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800ba8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f007 ff08 	bl	80138a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800baa2:	4013      	ands	r3, r2
 800baa4:	823b      	strh	r3, [r7, #16]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	8a3a      	ldrh	r2, [r7, #16]
 800baac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bab0:	b292      	uxth	r2, r2
 800bab2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f00b fe8d 	bl	80177d4 <HAL_PCD_SetupStageCallback>
 800baba:	e2f1      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800babc:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	f280 82ed 	bge.w	800c0a0 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29a      	uxth	r2, r3
 800bace:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bad2:	4013      	ands	r3, r2
 800bad4:	83fb      	strh	r3, [r7, #30]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	8bfa      	ldrh	r2, [r7, #30]
 800badc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bae0:	b292      	uxth	r2, r2
 800bae2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baec:	b29b      	uxth	r3, r3
 800baee:	461a      	mov	r2, r3
 800baf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	00db      	lsls	r3, r3, #3
 800baf6:	4413      	add	r3, r2
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	6812      	ldr	r2, [r2, #0]
 800bafc:	4413      	add	r3, r2
 800bafe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bb08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bb0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d019      	beq.n	800bb48 <PCD_EP_ISR_Handler+0x1ec>
 800bb14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb16:	695b      	ldr	r3, [r3, #20]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d015      	beq.n	800bb48 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6818      	ldr	r0, [r3, #0]
 800bb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb22:	6959      	ldr	r1, [r3, #20]
 800bb24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb26:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	f007 feba 	bl	80138a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb34:	695a      	ldr	r2, [r3, #20]
 800bb36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	441a      	add	r2, r3
 800bb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb3e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bb40:	2100      	movs	r1, #0
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f00b fe58 	bl	80177f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f040 82a3 	bne.w	800c0a0 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	61bb      	str	r3, [r7, #24]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	4413      	add	r3, r2
 800bb70:	61bb      	str	r3, [r7, #24]
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	2b3e      	cmp	r3, #62	; 0x3e
 800bb80:	d918      	bls.n	800bbb4 <PCD_EP_ISR_Handler+0x258>
 800bb82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	095b      	lsrs	r3, r3, #5
 800bb88:	647b      	str	r3, [r7, #68]	; 0x44
 800bb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	f003 031f 	and.w	r3, r3, #31
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <PCD_EP_ISR_Handler+0x240>
 800bb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	647b      	str	r3, [r7, #68]	; 0x44
 800bb9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb9e:	b29b      	uxth	r3, r3
 800bba0:	029b      	lsls	r3, r3, #10
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	801a      	strh	r2, [r3, #0]
 800bbb2:	e029      	b.n	800bc08 <PCD_EP_ISR_Handler+0x2ac>
 800bbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d112      	bne.n	800bbe2 <PCD_EP_ISR_Handler+0x286>
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	801a      	strh	r2, [r3, #0]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	801a      	strh	r2, [r3, #0]
 800bbe0:	e012      	b.n	800bc08 <PCD_EP_ISR_Handler+0x2ac>
 800bbe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	085b      	lsrs	r3, r3, #1
 800bbe8:	647b      	str	r3, [r7, #68]	; 0x44
 800bbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbec:	691b      	ldr	r3, [r3, #16]
 800bbee:	f003 0301 	and.w	r3, r3, #1
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <PCD_EP_ISR_Handler+0x2a0>
 800bbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	647b      	str	r3, [r7, #68]	; 0x44
 800bbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	029b      	lsls	r3, r3, #10
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc18:	827b      	strh	r3, [r7, #18]
 800bc1a:	8a7b      	ldrh	r3, [r7, #18]
 800bc1c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc20:	827b      	strh	r3, [r7, #18]
 800bc22:	8a7b      	ldrh	r3, [r7, #18]
 800bc24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bc28:	827b      	strh	r3, [r7, #18]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	8a7b      	ldrh	r3, [r7, #18]
 800bc30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	8013      	strh	r3, [r2, #0]
 800bc44:	e22c      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	4413      	add	r3, r2
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bc5a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f280 80f6 	bge.w	800be50 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	461a      	mov	r2, r3
 800bc6a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	881b      	ldrh	r3, [r3, #0]
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bc7a:	4013      	ands	r3, r2
 800bc7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bc92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc96:	b292      	uxth	r2, r2
 800bc98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800bc9a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	4413      	add	r3, r2
 800bcae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800bcb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb2:	7b1b      	ldrb	r3, [r3, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d123      	bne.n	800bd00 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	4413      	add	r3, r2
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	6812      	ldr	r2, [r2, #0]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bcdc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 800bce0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 808e 	beq.w	800be06 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf0:	6959      	ldr	r1, [r3, #20]
 800bcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcf4:	88da      	ldrh	r2, [r3, #6]
 800bcf6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bcfa:	f007 fdd4 	bl	80138a6 <USB_ReadPMA>
 800bcfe:	e082      	b.n	800be06 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bd00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd02:	78db      	ldrb	r3, [r3, #3]
 800bd04:	2b02      	cmp	r3, #2
 800bd06:	d10a      	bne.n	800bd1e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bd08:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 f9d3 	bl	800c0bc <HAL_PCD_EP_DB_Receive>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bd1c:	e073      	b.n	800be06 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	461a      	mov	r2, r3
 800bd24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	461a      	mov	r2, r3
 800bd42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	441a      	add	r2, r3
 800bd4a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bd4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	461a      	mov	r2, r3
 800bd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d022      	beq.n	800bdc2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	461a      	mov	r2, r3
 800bd88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	00db      	lsls	r3, r3, #3
 800bd8e:	4413      	add	r3, r2
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	6812      	ldr	r2, [r2, #0]
 800bd94:	4413      	add	r3, r2
 800bd96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd9a:	881b      	ldrh	r3, [r3, #0]
 800bd9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bda0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bda4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d02c      	beq.n	800be06 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6818      	ldr	r0, [r3, #0]
 800bdb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb2:	6959      	ldr	r1, [r3, #20]
 800bdb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb6:	891a      	ldrh	r2, [r3, #8]
 800bdb8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bdbc:	f007 fd73 	bl	80138a6 <USB_ReadPMA>
 800bdc0:	e021      	b.n	800be06 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	461a      	mov	r2, r3
 800bdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	4413      	add	r3, r2
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	4413      	add	r3, r2
 800bddc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bde0:	881b      	ldrh	r3, [r3, #0]
 800bde2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bde6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800bdea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf8:	6959      	ldr	r1, [r3, #20]
 800bdfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdfc:	895a      	ldrh	r2, [r3, #10]
 800bdfe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800be02:	f007 fd50 	bl	80138a6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800be06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be08:	69da      	ldr	r2, [r3, #28]
 800be0a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800be0e:	441a      	add	r2, r3
 800be10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800be14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be16:	695a      	ldr	r2, [r3, #20]
 800be18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800be1c:	441a      	add	r2, r3
 800be1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be20:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800be22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d005      	beq.n	800be36 <PCD_EP_ISR_Handler+0x4da>
 800be2a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800be2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	429a      	cmp	r2, r3
 800be34:	d206      	bcs.n	800be44 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800be36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f00b fcdb 	bl	80177f8 <HAL_PCD_DataOutStageCallback>
 800be42:	e005      	b.n	800be50 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be4a:	4618      	mov	r0, r3
 800be4c:	f006 f879 	bl	8011f42 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800be50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800be54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 8121 	beq.w	800c0a0 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800be5e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	4613      	mov	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	4413      	add	r3, r2
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	4413      	add	r3, r2
 800be70:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	461a      	mov	r2, r3
 800be78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	b29b      	uxth	r3, r3
 800be84:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800be88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	461a      	mov	r2, r3
 800be96:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	441a      	add	r2, r3
 800be9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beaa:	b29b      	uxth	r3, r3
 800beac:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800beae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beb0:	78db      	ldrb	r3, [r3, #3]
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	f000 80a2 	beq.w	800bffc <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800beb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beba:	2200      	movs	r2, #0
 800bebc:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec0:	7b1b      	ldrb	r3, [r3, #12]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 8093 	beq.w	800bfee <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bec8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800becc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d046      	beq.n	800bf62 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d126      	bne.n	800bf2a <PCD_EP_ISR_Handler+0x5ce>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	627b      	str	r3, [r7, #36]	; 0x24
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800beea:	b29b      	uxth	r3, r3
 800beec:	461a      	mov	r2, r3
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	4413      	add	r3, r2
 800bef2:	627b      	str	r3, [r7, #36]	; 0x24
 800bef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	00da      	lsls	r2, r3, #3
 800befa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befc:	4413      	add	r3, r2
 800befe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf02:	623b      	str	r3, [r7, #32]
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29b      	uxth	r3, r3
 800bf0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bf0e:	b29a      	uxth	r2, r3
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	801a      	strh	r2, [r3, #0]
 800bf14:	6a3b      	ldr	r3, [r7, #32]
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	e061      	b.n	800bfee <PCD_EP_ISR_Handler+0x692>
 800bf2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d15d      	bne.n	800bfee <PCD_EP_ISR_Handler+0x692>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	4413      	add	r3, r2
 800bf48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	00da      	lsls	r2, r3, #3
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	4413      	add	r3, r2
 800bf54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf58:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	801a      	strh	r2, [r3, #0]
 800bf60:	e045      	b.n	800bfee <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf6a:	785b      	ldrb	r3, [r3, #1]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d126      	bne.n	800bfbe <PCD_EP_ISR_Handler+0x662>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	637b      	str	r3, [r7, #52]	; 0x34
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	461a      	mov	r2, r3
 800bf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf84:	4413      	add	r3, r2
 800bf86:	637b      	str	r3, [r7, #52]	; 0x34
 800bf88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	00da      	lsls	r2, r3, #3
 800bf8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf90:	4413      	add	r3, r2
 800bf92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf96:	633b      	str	r3, [r7, #48]	; 0x30
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	801a      	strh	r2, [r3, #0]
 800bfa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfaa:	881b      	ldrh	r3, [r3, #0]
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfb6:	b29a      	uxth	r2, r3
 800bfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfba:	801a      	strh	r2, [r3, #0]
 800bfbc:	e017      	b.n	800bfee <PCD_EP_ISR_Handler+0x692>
 800bfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc0:	785b      	ldrb	r3, [r3, #1]
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d113      	bne.n	800bfee <PCD_EP_ISR_Handler+0x692>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	461a      	mov	r2, r3
 800bfd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd4:	4413      	add	r3, r2
 800bfd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	00da      	lsls	r2, r3, #3
 800bfde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe0:	4413      	add	r3, r2
 800bfe2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfe6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfea:	2200      	movs	r2, #0
 800bfec:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bfee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	4619      	mov	r1, r3
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f00b fc1a 	bl	801782e <HAL_PCD_DataInStageCallback>
 800bffa:	e051      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bffc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c004:	2b00      	cmp	r3, #0
 800c006:	d144      	bne.n	800c092 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c010:	b29b      	uxth	r3, r3
 800c012:	461a      	mov	r2, r3
 800c014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	4413      	add	r3, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6812      	ldr	r2, [r2, #0]
 800c020:	4413      	add	r3, r2
 800c022:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c02c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c032:	699a      	ldr	r2, [r3, #24]
 800c034:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c038:	429a      	cmp	r2, r3
 800c03a:	d907      	bls.n	800c04c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800c03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c03e:	699a      	ldr	r2, [r3, #24]
 800c040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c044:	1ad2      	subs	r2, r2, r3
 800c046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c048:	619a      	str	r2, [r3, #24]
 800c04a:	e002      	b.n	800c052 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800c04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c04e:	2200      	movs	r2, #0
 800c050:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	4619      	mov	r1, r3
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f00b fbe4 	bl	801782e <HAL_PCD_DataInStageCallback>
 800c066:	e01b      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c06a:	695a      	ldr	r2, [r3, #20]
 800c06c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c070:	441a      	add	r2, r3
 800c072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c074:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c078:	69da      	ldr	r2, [r3, #28]
 800c07a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c07e:	441a      	add	r2, r3
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c08a:	4618      	mov	r0, r3
 800c08c:	f005 ff59 	bl	8011f42 <USB_EPStartXfer>
 800c090:	e006      	b.n	800c0a0 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c092:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800c096:	461a      	mov	r2, r3
 800c098:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f917 	bl	800c2ce <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f6ff ac5a 	blt.w	800b966 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3758      	adds	r7, #88	; 0x58
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b088      	sub	sp, #32
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c0ca:	88fb      	ldrh	r3, [r7, #6]
 800c0cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d07c      	beq.n	800c1ce <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	00db      	lsls	r3, r3, #3
 800c0e6:	4413      	add	r3, r2
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	6812      	ldr	r2, [r2, #0]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	699a      	ldr	r2, [r3, #24]
 800c0fe:	8b7b      	ldrh	r3, [r7, #26]
 800c100:	429a      	cmp	r2, r3
 800c102:	d306      	bcc.n	800c112 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	699a      	ldr	r2, [r3, #24]
 800c108:	8b7b      	ldrh	r3, [r7, #26]
 800c10a:	1ad2      	subs	r2, r2, r3
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	619a      	str	r2, [r3, #24]
 800c110:	e002      	b.n	800c118 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2200      	movs	r2, #0
 800c116:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	699b      	ldr	r3, [r3, #24]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d123      	bne.n	800c168 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	881b      	ldrh	r3, [r3, #0]
 800c130:	b29b      	uxth	r3, r3
 800c132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c13a:	833b      	strh	r3, [r7, #24]
 800c13c:	8b3b      	ldrh	r3, [r7, #24]
 800c13e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c142:	833b      	strh	r3, [r7, #24]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	461a      	mov	r2, r3
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	441a      	add	r2, r3
 800c152:	8b3b      	ldrh	r3, [r7, #24]
 800c154:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c158:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c15c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c164:	b29b      	uxth	r3, r3
 800c166:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c168:	88fb      	ldrh	r3, [r7, #6]
 800c16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d01f      	beq.n	800c1b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	4413      	add	r3, r2
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	b29b      	uxth	r3, r3
 800c184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c18c:	82fb      	strh	r3, [r7, #22]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	441a      	add	r2, r3
 800c19c:	8afb      	ldrh	r3, [r7, #22]
 800c19e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c1aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c1b2:	8b7b      	ldrh	r3, [r7, #26]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8085 	beq.w	800c2c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6818      	ldr	r0, [r3, #0]
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	6959      	ldr	r1, [r3, #20]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	891a      	ldrh	r2, [r3, #8]
 800c1c6:	8b7b      	ldrh	r3, [r7, #26]
 800c1c8:	f007 fb6d 	bl	80138a6 <USB_ReadPMA>
 800c1cc:	e07a      	b.n	800c2c4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	461a      	mov	r2, r3
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	00db      	lsls	r3, r3, #3
 800c1e0:	4413      	add	r3, r2
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	6812      	ldr	r2, [r2, #0]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c1ec:	881b      	ldrh	r3, [r3, #0]
 800c1ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	8b7b      	ldrh	r3, [r7, #26]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d306      	bcc.n	800c20c <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	699a      	ldr	r2, [r3, #24]
 800c202:	8b7b      	ldrh	r3, [r7, #26]
 800c204:	1ad2      	subs	r2, r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	619a      	str	r2, [r3, #24]
 800c20a:	e002      	b.n	800c212 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2200      	movs	r2, #0
 800c210:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	699b      	ldr	r3, [r3, #24]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d123      	bne.n	800c262 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	4413      	add	r3, r2
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c234:	83fb      	strh	r3, [r7, #30]
 800c236:	8bfb      	ldrh	r3, [r7, #30]
 800c238:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c23c:	83fb      	strh	r3, [r7, #30]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	461a      	mov	r2, r3
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	441a      	add	r2, r3
 800c24c:	8bfb      	ldrh	r3, [r7, #30]
 800c24e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c252:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c25e:	b29b      	uxth	r3, r3
 800c260:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c262:	88fb      	ldrh	r3, [r7, #6]
 800c264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d11f      	bne.n	800c2ac <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	461a      	mov	r2, r3
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c286:	83bb      	strh	r3, [r7, #28]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	441a      	add	r2, r3
 800c296:	8bbb      	ldrh	r3, [r7, #28]
 800c298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c2ac:	8b7b      	ldrh	r3, [r7, #26]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d008      	beq.n	800c2c4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	6959      	ldr	r1, [r3, #20]
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	895a      	ldrh	r2, [r3, #10]
 800c2be:	8b7b      	ldrh	r3, [r7, #26]
 800c2c0:	f007 faf1 	bl	80138a6 <USB_ReadPMA>
    }
  }

  return count;
 800c2c4:	8b7b      	ldrh	r3, [r7, #26]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3720      	adds	r7, #32
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b0a2      	sub	sp, #136	; 0x88
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	4613      	mov	r3, r2
 800c2da:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c2dc:	88fb      	ldrh	r3, [r7, #6]
 800c2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 81c5 	beq.w	800c672 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	00db      	lsls	r3, r3, #3
 800c2fa:	4413      	add	r3, r2
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	6812      	ldr	r2, [r2, #0]
 800c300:	4413      	add	r3, r2
 800c302:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c306:	881b      	ldrh	r3, [r3, #0]
 800c308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c30c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	699a      	ldr	r2, [r3, #24]
 800c314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c318:	429a      	cmp	r2, r3
 800c31a:	d907      	bls.n	800c32c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	699a      	ldr	r2, [r3, #24]
 800c320:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c324:	1ad2      	subs	r2, r2, r3
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	619a      	str	r2, [r3, #24]
 800c32a:	e002      	b.n	800c332 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	2200      	movs	r2, #0
 800c330:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	699b      	ldr	r3, [r3, #24]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f040 80b9 	bne.w	800c4ae <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	785b      	ldrb	r3, [r3, #1]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d126      	bne.n	800c392 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	62bb      	str	r3, [r7, #40]	; 0x28
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c358:	4413      	add	r3, r2
 800c35a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	00da      	lsls	r2, r3, #3
 800c362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c364:	4413      	add	r3, r2
 800c366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c36a:	627b      	str	r3, [r7, #36]	; 0x24
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	b29b      	uxth	r3, r3
 800c372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c376:	b29a      	uxth	r2, r3
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	801a      	strh	r2, [r3, #0]
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	b29b      	uxth	r3, r3
 800c382:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c386:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38e:	801a      	strh	r2, [r3, #0]
 800c390:	e01a      	b.n	800c3c8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	2b01      	cmp	r3, #1
 800c398:	d116      	bne.n	800c3c8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	633b      	str	r3, [r7, #48]	; 0x30
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ae:	4413      	add	r3, r2
 800c3b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	00da      	lsls	r2, r3, #3
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	4413      	add	r3, r2
 800c3bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	623b      	str	r3, [r7, #32]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	785b      	ldrb	r3, [r3, #1]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d126      	bne.n	800c424 <HAL_PCD_EP_DB_Transmit+0x156>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	61bb      	str	r3, [r7, #24]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3e4:	b29b      	uxth	r3, r3
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	61bb      	str	r3, [r7, #24]
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	781b      	ldrb	r3, [r3, #0]
 800c3f2:	00da      	lsls	r2, r3, #3
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c3fc:	617b      	str	r3, [r7, #20]
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	881b      	ldrh	r3, [r3, #0]
 800c402:	b29b      	uxth	r3, r3
 800c404:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c408:	b29a      	uxth	r2, r3
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	b29b      	uxth	r3, r3
 800c414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	801a      	strh	r2, [r3, #0]
 800c422:	e017      	b.n	800c454 <HAL_PCD_EP_DB_Transmit+0x186>
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d113      	bne.n	800c454 <HAL_PCD_EP_DB_Transmit+0x186>
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c434:	b29b      	uxth	r3, r3
 800c436:	461a      	mov	r2, r3
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	4413      	add	r3, r2
 800c43c:	623b      	str	r3, [r7, #32]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	00da      	lsls	r2, r3, #3
 800c444:	6a3b      	ldr	r3, [r7, #32]
 800c446:	4413      	add	r3, r2
 800c448:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c44c:	61fb      	str	r3, [r7, #28]
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	2200      	movs	r2, #0
 800c452:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	4619      	mov	r1, r3
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f00b f9e7 	bl	801782e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c460:	88fb      	ldrh	r3, [r7, #6]
 800c462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 82d2 	beq.w	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c486:	827b      	strh	r3, [r7, #18]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	461a      	mov	r2, r3
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	441a      	add	r2, r3
 800c496:	8a7b      	ldrh	r3, [r7, #18]
 800c498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c49c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	8013      	strh	r3, [r2, #0]
 800c4ac:	e2b0      	b.n	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c4ae:	88fb      	ldrh	r3, [r7, #6]
 800c4b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d021      	beq.n	800c4fc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	4413      	add	r3, r2
 800c4c6:	881b      	ldrh	r3, [r3, #0]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	441a      	add	r2, r3
 800c4e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c4e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c4ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c502:	2b01      	cmp	r3, #1
 800c504:	f040 8284 	bne.w	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	695a      	ldr	r2, [r3, #20]
 800c50c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c510:	441a      	add	r2, r3
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	69da      	ldr	r2, [r3, #28]
 800c51a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c51e:	441a      	add	r2, r3
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	6a1a      	ldr	r2, [r3, #32]
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	691b      	ldr	r3, [r3, #16]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d309      	bcc.n	800c544 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	6a1a      	ldr	r2, [r3, #32]
 800c53a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c53c:	1ad2      	subs	r2, r2, r3
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	621a      	str	r2, [r3, #32]
 800c542:	e015      	b.n	800c570 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	6a1b      	ldr	r3, [r3, #32]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d107      	bne.n	800c55c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800c54c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c550:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c55a:	e009      	b.n	800c570 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6a1b      	ldr	r3, [r3, #32]
 800c568:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2200      	movs	r2, #0
 800c56e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	785b      	ldrb	r3, [r3, #1]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d155      	bne.n	800c624 <HAL_PCD_EP_DB_Transmit+0x356>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c586:	b29b      	uxth	r3, r3
 800c588:	461a      	mov	r2, r3
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	4413      	add	r3, r2
 800c58e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	00da      	lsls	r2, r3, #3
 800c596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c598:	4413      	add	r3, r2
 800c59a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34
 800c5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a2:	2b3e      	cmp	r3, #62	; 0x3e
 800c5a4:	d916      	bls.n	800c5d4 <HAL_PCD_EP_DB_Transmit+0x306>
 800c5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5a8:	095b      	lsrs	r3, r3, #5
 800c5aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5ae:	f003 031f 	and.w	r3, r3, #31
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d102      	bne.n	800c5bc <HAL_PCD_EP_DB_Transmit+0x2ee>
 800c5b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800c5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	029b      	lsls	r3, r3, #10
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5d0:	801a      	strh	r2, [r3, #0]
 800c5d2:	e043      	b.n	800c65c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d112      	bne.n	800c600 <HAL_PCD_EP_DB_Transmit+0x332>
 800c5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e8:	801a      	strh	r2, [r3, #0]
 800c5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5f8:	b29a      	uxth	r2, r3
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fc:	801a      	strh	r2, [r3, #0]
 800c5fe:	e02d      	b.n	800c65c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c602:	085b      	lsrs	r3, r3, #1
 800c604:	64bb      	str	r3, [r7, #72]	; 0x48
 800c606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c608:	f003 0301 	and.w	r3, r3, #1
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <HAL_PCD_EP_DB_Transmit+0x348>
 800c610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c612:	3301      	adds	r3, #1
 800c614:	64bb      	str	r3, [r7, #72]	; 0x48
 800c616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c618:	b29b      	uxth	r3, r3
 800c61a:	029b      	lsls	r3, r3, #10
 800c61c:	b29a      	uxth	r2, r3
 800c61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c620:	801a      	strh	r2, [r3, #0]
 800c622:	e01b      	b.n	800c65c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	785b      	ldrb	r3, [r3, #1]
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d117      	bne.n	800c65c <HAL_PCD_EP_DB_Transmit+0x38e>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	643b      	str	r3, [r7, #64]	; 0x40
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	461a      	mov	r2, r3
 800c63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c640:	4413      	add	r3, r2
 800c642:	643b      	str	r3, [r7, #64]	; 0x40
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	00da      	lsls	r2, r3, #3
 800c64a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c64c:	4413      	add	r3, r2
 800c64e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c656:	b29a      	uxth	r2, r3
 800c658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c65a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6818      	ldr	r0, [r3, #0]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	6959      	ldr	r1, [r3, #20]
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	891a      	ldrh	r2, [r3, #8]
 800c668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	f007 f8d9 	bl	8013822 <USB_WritePMA>
 800c670:	e1ce      	b.n	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	461a      	mov	r2, r3
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	00db      	lsls	r3, r3, #3
 800c684:	4413      	add	r3, r2
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	6812      	ldr	r2, [r2, #0]
 800c68a:	4413      	add	r3, r2
 800c68c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c696:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	699a      	ldr	r2, [r3, #24]
 800c69e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d307      	bcc.n	800c6b6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	699a      	ldr	r2, [r3, #24]
 800c6aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c6ae:	1ad2      	subs	r2, r2, r3
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	619a      	str	r2, [r3, #24]
 800c6b4:	e002      	b.n	800c6bc <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	f040 80c4 	bne.w	800c84e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d126      	bne.n	800c71c <HAL_PCD_EP_DB_Transmit+0x44e>
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	461a      	mov	r2, r3
 800c6e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6e2:	4413      	add	r3, r2
 800c6e4:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	00da      	lsls	r2, r3, #3
 800c6ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c6f4:	667b      	str	r3, [r7, #100]	; 0x64
 800c6f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c700:	b29a      	uxth	r2, r3
 800c702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c704:	801a      	strh	r2, [r3, #0]
 800c706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29b      	uxth	r3, r3
 800c70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c714:	b29a      	uxth	r2, r3
 800c716:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c718:	801a      	strh	r2, [r3, #0]
 800c71a:	e01a      	b.n	800c752 <HAL_PCD_EP_DB_Transmit+0x484>
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	785b      	ldrb	r3, [r3, #1]
 800c720:	2b01      	cmp	r3, #1
 800c722:	d116      	bne.n	800c752 <HAL_PCD_EP_DB_Transmit+0x484>
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	673b      	str	r3, [r7, #112]	; 0x70
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c732:	b29b      	uxth	r3, r3
 800c734:	461a      	mov	r2, r3
 800c736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c738:	4413      	add	r3, r2
 800c73a:	673b      	str	r3, [r7, #112]	; 0x70
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	00da      	lsls	r2, r3, #3
 800c742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c744:	4413      	add	r3, r2
 800c746:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c74a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c74c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c74e:	2200      	movs	r2, #0
 800c750:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	785b      	ldrb	r3, [r3, #1]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d12f      	bne.n	800c7c0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c770:	b29b      	uxth	r3, r3
 800c772:	461a      	mov	r2, r3
 800c774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c778:	4413      	add	r3, r2
 800c77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	00da      	lsls	r2, r3, #3
 800c784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c788:	4413      	add	r3, r2
 800c78a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c78e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c796:	881b      	ldrh	r3, [r3, #0]
 800c798:	b29b      	uxth	r3, r3
 800c79a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7a4:	801a      	strh	r2, [r3, #0]
 800c7a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7bc:	801a      	strh	r2, [r3, #0]
 800c7be:	e017      	b.n	800c7f0 <HAL_PCD_EP_DB_Transmit+0x522>
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d113      	bne.n	800c7f0 <HAL_PCD_EP_DB_Transmit+0x522>
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7d6:	4413      	add	r3, r2
 800c7d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	00da      	lsls	r2, r3, #3
 800c7e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7e2:	4413      	add	r3, r2
 800c7e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c7ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f00b f819 	bl	801782e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c802:	2b00      	cmp	r3, #0
 800c804:	f040 8104 	bne.w	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c81e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c822:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	441a      	add	r2, r3
 800c834:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c83c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c840:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c848:	b29b      	uxth	r3, r3
 800c84a:	8013      	strh	r3, [r2, #0]
 800c84c:	e0e0      	b.n	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c84e:	88fb      	ldrh	r3, [r7, #6]
 800c850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d121      	bne.n	800c89c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	461a      	mov	r2, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c86e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c872:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	461a      	mov	r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	441a      	add	r2, r3
 800c884:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c88c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c898:	b29b      	uxth	r3, r3
 800c89a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c8a2:	2b01      	cmp	r3, #1
 800c8a4:	f040 80b4 	bne.w	800ca10 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	695a      	ldr	r2, [r3, #20]
 800c8ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8b0:	441a      	add	r2, r3
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	69da      	ldr	r2, [r3, #28]
 800c8ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8be:	441a      	add	r2, r3
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	6a1a      	ldr	r2, [r3, #32]
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d309      	bcc.n	800c8e4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	6a1a      	ldr	r2, [r3, #32]
 800c8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8dc:	1ad2      	subs	r2, r2, r3
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	621a      	str	r2, [r3, #32]
 800c8e2:	e015      	b.n	800c910 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d107      	bne.n	800c8fc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 800c8ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c8fa:	e009      	b.n	800c910 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	6a1b      	ldr	r3, [r3, #32]
 800c900:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	2200      	movs	r2, #0
 800c906:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	663b      	str	r3, [r7, #96]	; 0x60
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	785b      	ldrb	r3, [r3, #1]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d155      	bne.n	800c9ca <HAL_PCD_EP_DB_Transmit+0x6fc>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	65bb      	str	r3, [r7, #88]	; 0x58
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	461a      	mov	r2, r3
 800c930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c932:	4413      	add	r3, r2
 800c934:	65bb      	str	r3, [r7, #88]	; 0x58
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	00da      	lsls	r2, r3, #3
 800c93c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c93e:	4413      	add	r3, r2
 800c940:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c944:	657b      	str	r3, [r7, #84]	; 0x54
 800c946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c948:	2b3e      	cmp	r3, #62	; 0x3e
 800c94a:	d916      	bls.n	800c97a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800c94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c94e:	095b      	lsrs	r3, r3, #5
 800c950:	677b      	str	r3, [r7, #116]	; 0x74
 800c952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c954:	f003 031f 	and.w	r3, r3, #31
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d102      	bne.n	800c962 <HAL_PCD_EP_DB_Transmit+0x694>
 800c95c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c95e:	3b01      	subs	r3, #1
 800c960:	677b      	str	r3, [r7, #116]	; 0x74
 800c962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c964:	b29b      	uxth	r3, r3
 800c966:	029b      	lsls	r3, r3, #10
 800c968:	b29b      	uxth	r3, r3
 800c96a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c96e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c972:	b29a      	uxth	r2, r3
 800c974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c976:	801a      	strh	r2, [r3, #0]
 800c978:	e040      	b.n	800c9fc <HAL_PCD_EP_DB_Transmit+0x72e>
 800c97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d112      	bne.n	800c9a6 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800c980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c982:	881b      	ldrh	r3, [r3, #0]
 800c984:	b29b      	uxth	r3, r3
 800c986:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c98e:	801a      	strh	r2, [r3, #0]
 800c990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c992:	881b      	ldrh	r3, [r3, #0]
 800c994:	b29b      	uxth	r3, r3
 800c996:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c99a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9a2:	801a      	strh	r2, [r3, #0]
 800c9a4:	e02a      	b.n	800c9fc <HAL_PCD_EP_DB_Transmit+0x72e>
 800c9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	677b      	str	r3, [r7, #116]	; 0x74
 800c9ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <HAL_PCD_EP_DB_Transmit+0x6ee>
 800c9b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	677b      	str	r3, [r7, #116]	; 0x74
 800c9bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	029b      	lsls	r3, r3, #10
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9c6:	801a      	strh	r2, [r3, #0]
 800c9c8:	e018      	b.n	800c9fc <HAL_PCD_EP_DB_Transmit+0x72e>
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	785b      	ldrb	r3, [r3, #1]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d114      	bne.n	800c9fc <HAL_PCD_EP_DB_Transmit+0x72e>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9da:	b29b      	uxth	r3, r3
 800c9dc:	461a      	mov	r2, r3
 800c9de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9e0:	4413      	add	r3, r2
 800c9e2:	663b      	str	r3, [r7, #96]	; 0x60
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	00da      	lsls	r2, r3, #3
 800c9ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9fa:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6818      	ldr	r0, [r3, #0]
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	6959      	ldr	r1, [r3, #20]
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	895a      	ldrh	r2, [r3, #10]
 800ca08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	f006 ff09 	bl	8013822 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	461a      	mov	r2, r3
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca2a:	823b      	strh	r3, [r7, #16]
 800ca2c:	8a3b      	ldrh	r3, [r7, #16]
 800ca2e:	f083 0310 	eor.w	r3, r3, #16
 800ca32:	823b      	strh	r3, [r7, #16]
 800ca34:	8a3b      	ldrh	r3, [r7, #16]
 800ca36:	f083 0320 	eor.w	r3, r3, #32
 800ca3a:	823b      	strh	r3, [r7, #16]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	461a      	mov	r2, r3
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	441a      	add	r2, r3
 800ca4a:	8a3b      	ldrh	r3, [r7, #16]
 800ca4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3788      	adds	r7, #136	; 0x88
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b087      	sub	sp, #28
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	607b      	str	r3, [r7, #4]
 800ca74:	460b      	mov	r3, r1
 800ca76:	817b      	strh	r3, [r7, #10]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ca7c:	897b      	ldrh	r3, [r7, #10]
 800ca7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca88:	897b      	ldrh	r3, [r7, #10]
 800ca8a:	f003 0307 	and.w	r3, r3, #7
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	4613      	mov	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	00db      	lsls	r3, r3, #3
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	617b      	str	r3, [r7, #20]
 800ca9e:	e009      	b.n	800cab4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800caa0:	897a      	ldrh	r2, [r7, #10]
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	4413      	add	r3, r2
 800cab2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cab4:	893b      	ldrh	r3, [r7, #8]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d107      	bne.n	800caca <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2200      	movs	r2, #0
 800cabe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	b29a      	uxth	r2, r3
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	80da      	strh	r2, [r3, #6]
 800cac8:	e00b      	b.n	800cae2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2201      	movs	r2, #1
 800cace:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	b29a      	uxth	r2, r3
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	0c1b      	lsrs	r3, r3, #16
 800cadc:	b29a      	uxth	r2, r3
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	371c      	adds	r7, #28
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b085      	sub	sp, #20
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2201      	movs	r2, #1
 800cb02:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	f043 0301 	orr.w	r3, r3, #1
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	f043 0302 	orr.w	r3, r3, #2
 800cb2e:	b29a      	uxth	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b085      	sub	sp, #20
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d141      	bne.n	800cbd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cb52:	4b4b      	ldr	r3, [pc, #300]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb5e:	d131      	bne.n	800cbc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cb60:	4b47      	ldr	r3, [pc, #284]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb66:	4a46      	ldr	r2, [pc, #280]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cb70:	4b43      	ldr	r3, [pc, #268]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cb78:	4a41      	ldr	r2, [pc, #260]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cb7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cb80:	4b40      	ldr	r3, [pc, #256]	; (800cc84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2232      	movs	r2, #50	; 0x32
 800cb86:	fb02 f303 	mul.w	r3, r2, r3
 800cb8a:	4a3f      	ldr	r2, [pc, #252]	; (800cc88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cb8c:	fba2 2303 	umull	r2, r3, r2, r3
 800cb90:	0c9b      	lsrs	r3, r3, #18
 800cb92:	3301      	adds	r3, #1
 800cb94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb96:	e002      	b.n	800cb9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3b01      	subs	r3, #1
 800cb9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cb9e:	4b38      	ldr	r3, [pc, #224]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cba0:	695b      	ldr	r3, [r3, #20]
 800cba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbaa:	d102      	bne.n	800cbb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1f2      	bne.n	800cb98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cbb2:	4b33      	ldr	r3, [pc, #204]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbbe:	d158      	bne.n	800cc72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	e057      	b.n	800cc74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cbc4:	4b2e      	ldr	r3, [pc, #184]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbca:	4a2d      	ldr	r2, [pc, #180]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cbd4:	e04d      	b.n	800cc72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbdc:	d141      	bne.n	800cc62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cbde:	4b28      	ldr	r3, [pc, #160]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cbe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbea:	d131      	bne.n	800cc50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cbec:	4b24      	ldr	r3, [pc, #144]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cbf2:	4a23      	ldr	r2, [pc, #140]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cbf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cbfc:	4b20      	ldr	r3, [pc, #128]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cc04:	4a1e      	ldr	r2, [pc, #120]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cc0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cc0c:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2232      	movs	r2, #50	; 0x32
 800cc12:	fb02 f303 	mul.w	r3, r2, r3
 800cc16:	4a1c      	ldr	r2, [pc, #112]	; (800cc88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cc18:	fba2 2303 	umull	r2, r3, r2, r3
 800cc1c:	0c9b      	lsrs	r3, r3, #18
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cc22:	e002      	b.n	800cc2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cc2a:	4b15      	ldr	r3, [pc, #84]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc2c:	695b      	ldr	r3, [r3, #20]
 800cc2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc36:	d102      	bne.n	800cc3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1f2      	bne.n	800cc24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cc3e:	4b10      	ldr	r3, [pc, #64]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc40:	695b      	ldr	r3, [r3, #20]
 800cc42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc4a:	d112      	bne.n	800cc72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e011      	b.n	800cc74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cc50:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc56:	4a0a      	ldr	r2, [pc, #40]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cc60:	e007      	b.n	800cc72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cc6a:	4a05      	ldr	r2, [pc, #20]	; (800cc80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cc6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cc70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	40007000 	.word	0x40007000
 800cc84:	20000004 	.word	0x20000004
 800cc88:	431bde83 	.word	0x431bde83

0800cc8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d101      	bne.n	800cc9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e306      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f003 0301 	and.w	r3, r3, #1
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d075      	beq.n	800cd96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccaa:	4b97      	ldr	r3, [pc, #604]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ccac:	689b      	ldr	r3, [r3, #8]
 800ccae:	f003 030c 	and.w	r3, r3, #12
 800ccb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ccb4:	4b94      	ldr	r3, [pc, #592]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ccb6:	68db      	ldr	r3, [r3, #12]
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ccbe:	69bb      	ldr	r3, [r7, #24]
 800ccc0:	2b0c      	cmp	r3, #12
 800ccc2:	d102      	bne.n	800ccca <HAL_RCC_OscConfig+0x3e>
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2b03      	cmp	r3, #3
 800ccc8:	d002      	beq.n	800ccd0 <HAL_RCC_OscConfig+0x44>
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	2b08      	cmp	r3, #8
 800ccce:	d10b      	bne.n	800cce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccd0:	4b8d      	ldr	r3, [pc, #564]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d05b      	beq.n	800cd94 <HAL_RCC_OscConfig+0x108>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d157      	bne.n	800cd94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e2e1      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf0:	d106      	bne.n	800cd00 <HAL_RCC_OscConfig+0x74>
 800ccf2:	4b85      	ldr	r3, [pc, #532]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	4a84      	ldr	r2, [pc, #528]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ccf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccfc:	6013      	str	r3, [r2, #0]
 800ccfe:	e01d      	b.n	800cd3c <HAL_RCC_OscConfig+0xb0>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd08:	d10c      	bne.n	800cd24 <HAL_RCC_OscConfig+0x98>
 800cd0a:	4b7f      	ldr	r3, [pc, #508]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	4a7e      	ldr	r2, [pc, #504]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd14:	6013      	str	r3, [r2, #0]
 800cd16:	4b7c      	ldr	r3, [pc, #496]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a7b      	ldr	r2, [pc, #492]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	e00b      	b.n	800cd3c <HAL_RCC_OscConfig+0xb0>
 800cd24:	4b78      	ldr	r3, [pc, #480]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a77      	ldr	r2, [pc, #476]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd2e:	6013      	str	r3, [r2, #0]
 800cd30:	4b75      	ldr	r3, [pc, #468]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a74      	ldr	r2, [pc, #464]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d013      	beq.n	800cd6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd44:	f7fb fbae 	bl	80084a4 <HAL_GetTick>
 800cd48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd4a:	e008      	b.n	800cd5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd4c:	f7fb fbaa 	bl	80084a4 <HAL_GetTick>
 800cd50:	4602      	mov	r2, r0
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	1ad3      	subs	r3, r2, r3
 800cd56:	2b64      	cmp	r3, #100	; 0x64
 800cd58:	d901      	bls.n	800cd5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cd5a:	2303      	movs	r3, #3
 800cd5c:	e2a6      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cd5e:	4b6a      	ldr	r3, [pc, #424]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d0f0      	beq.n	800cd4c <HAL_RCC_OscConfig+0xc0>
 800cd6a:	e014      	b.n	800cd96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd6c:	f7fb fb9a 	bl	80084a4 <HAL_GetTick>
 800cd70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd72:	e008      	b.n	800cd86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd74:	f7fb fb96 	bl	80084a4 <HAL_GetTick>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b64      	cmp	r3, #100	; 0x64
 800cd80:	d901      	bls.n	800cd86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e292      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cd86:	4b60      	ldr	r3, [pc, #384]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1f0      	bne.n	800cd74 <HAL_RCC_OscConfig+0xe8>
 800cd92:	e000      	b.n	800cd96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 0302 	and.w	r3, r3, #2
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d075      	beq.n	800ce8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cda2:	4b59      	ldr	r3, [pc, #356]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f003 030c 	and.w	r3, r3, #12
 800cdaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cdac:	4b56      	ldr	r3, [pc, #344]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cdae:	68db      	ldr	r3, [r3, #12]
 800cdb0:	f003 0303 	and.w	r3, r3, #3
 800cdb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cdb6:	69bb      	ldr	r3, [r7, #24]
 800cdb8:	2b0c      	cmp	r3, #12
 800cdba:	d102      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x136>
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d002      	beq.n	800cdc8 <HAL_RCC_OscConfig+0x13c>
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	2b04      	cmp	r3, #4
 800cdc6:	d11f      	bne.n	800ce08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cdc8:	4b4f      	ldr	r3, [pc, #316]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d005      	beq.n	800cde0 <HAL_RCC_OscConfig+0x154>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d101      	bne.n	800cde0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e265      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cde0:	4b49      	ldr	r3, [pc, #292]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	061b      	lsls	r3, r3, #24
 800cdee:	4946      	ldr	r1, [pc, #280]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cdf4:	4b45      	ldr	r3, [pc, #276]	; (800cf0c <HAL_RCC_OscConfig+0x280>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fa fefb 	bl	8007bf4 <HAL_InitTick>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d043      	beq.n	800ce8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	e251      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d023      	beq.n	800ce58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce10:	4b3d      	ldr	r3, [pc, #244]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a3c      	ldr	r2, [pc, #240]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce1c:	f7fb fb42 	bl	80084a4 <HAL_GetTick>
 800ce20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce22:	e008      	b.n	800ce36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce24:	f7fb fb3e 	bl	80084a4 <HAL_GetTick>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d901      	bls.n	800ce36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e23a      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce36:	4b34      	ldr	r3, [pc, #208]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d0f0      	beq.n	800ce24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce42:	4b31      	ldr	r3, [pc, #196]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	061b      	lsls	r3, r3, #24
 800ce50:	492d      	ldr	r1, [pc, #180]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce52:	4313      	orrs	r3, r2
 800ce54:	604b      	str	r3, [r1, #4]
 800ce56:	e01a      	b.n	800ce8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce58:	4b2b      	ldr	r3, [pc, #172]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a2a      	ldr	r2, [pc, #168]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce64:	f7fb fb1e 	bl	80084a4 <HAL_GetTick>
 800ce68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce6a:	e008      	b.n	800ce7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce6c:	f7fb fb1a 	bl	80084a4 <HAL_GetTick>
 800ce70:	4602      	mov	r2, r0
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	1ad3      	subs	r3, r2, r3
 800ce76:	2b02      	cmp	r3, #2
 800ce78:	d901      	bls.n	800ce7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e216      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ce7e:	4b22      	ldr	r3, [pc, #136]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1f0      	bne.n	800ce6c <HAL_RCC_OscConfig+0x1e0>
 800ce8a:	e000      	b.n	800ce8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ce8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0308 	and.w	r3, r3, #8
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d041      	beq.n	800cf1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d01c      	beq.n	800cedc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cea2:	4b19      	ldr	r3, [pc, #100]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cea8:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb2:	f7fb faf7 	bl	80084a4 <HAL_GetTick>
 800ceb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ceb8:	e008      	b.n	800cecc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ceba:	f7fb faf3 	bl	80084a4 <HAL_GetTick>
 800cebe:	4602      	mov	r2, r0
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d901      	bls.n	800cecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cec8:	2303      	movs	r3, #3
 800ceca:	e1ef      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cecc:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d0ef      	beq.n	800ceba <HAL_RCC_OscConfig+0x22e>
 800ceda:	e020      	b.n	800cf1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cedc:	4b0a      	ldr	r3, [pc, #40]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cee2:	4a09      	ldr	r2, [pc, #36]	; (800cf08 <HAL_RCC_OscConfig+0x27c>)
 800cee4:	f023 0301 	bic.w	r3, r3, #1
 800cee8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceec:	f7fb fada 	bl	80084a4 <HAL_GetTick>
 800cef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cef2:	e00d      	b.n	800cf10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cef4:	f7fb fad6 	bl	80084a4 <HAL_GetTick>
 800cef8:	4602      	mov	r2, r0
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d906      	bls.n	800cf10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cf02:	2303      	movs	r3, #3
 800cf04:	e1d2      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
 800cf06:	bf00      	nop
 800cf08:	40021000 	.word	0x40021000
 800cf0c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cf10:	4b8c      	ldr	r3, [pc, #560]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cf12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf16:	f003 0302 	and.w	r3, r3, #2
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1ea      	bne.n	800cef4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f003 0304 	and.w	r3, r3, #4
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 80a6 	beq.w	800d078 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cf30:	4b84      	ldr	r3, [pc, #528]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cf32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d101      	bne.n	800cf40 <HAL_RCC_OscConfig+0x2b4>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	e000      	b.n	800cf42 <HAL_RCC_OscConfig+0x2b6>
 800cf40:	2300      	movs	r3, #0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00d      	beq.n	800cf62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf46:	4b7f      	ldr	r3, [pc, #508]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf4a:	4a7e      	ldr	r2, [pc, #504]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cf4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf50:	6593      	str	r3, [r2, #88]	; 0x58
 800cf52:	4b7c      	ldr	r3, [pc, #496]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cf54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf62:	4b79      	ldr	r3, [pc, #484]	; (800d148 <HAL_RCC_OscConfig+0x4bc>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d118      	bne.n	800cfa0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cf6e:	4b76      	ldr	r3, [pc, #472]	; (800d148 <HAL_RCC_OscConfig+0x4bc>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a75      	ldr	r2, [pc, #468]	; (800d148 <HAL_RCC_OscConfig+0x4bc>)
 800cf74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf7a:	f7fb fa93 	bl	80084a4 <HAL_GetTick>
 800cf7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf80:	e008      	b.n	800cf94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf82:	f7fb fa8f 	bl	80084a4 <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b02      	cmp	r3, #2
 800cf8e:	d901      	bls.n	800cf94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e18b      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cf94:	4b6c      	ldr	r3, [pc, #432]	; (800d148 <HAL_RCC_OscConfig+0x4bc>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0f0      	beq.n	800cf82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d108      	bne.n	800cfba <HAL_RCC_OscConfig+0x32e>
 800cfa8:	4b66      	ldr	r3, [pc, #408]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfae:	4a65      	ldr	r2, [pc, #404]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfb0:	f043 0301 	orr.w	r3, r3, #1
 800cfb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cfb8:	e024      	b.n	800d004 <HAL_RCC_OscConfig+0x378>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	2b05      	cmp	r3, #5
 800cfc0:	d110      	bne.n	800cfe4 <HAL_RCC_OscConfig+0x358>
 800cfc2:	4b60      	ldr	r3, [pc, #384]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfc8:	4a5e      	ldr	r2, [pc, #376]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfca:	f043 0304 	orr.w	r3, r3, #4
 800cfce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cfd2:	4b5c      	ldr	r3, [pc, #368]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfd8:	4a5a      	ldr	r2, [pc, #360]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfda:	f043 0301 	orr.w	r3, r3, #1
 800cfde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cfe2:	e00f      	b.n	800d004 <HAL_RCC_OscConfig+0x378>
 800cfe4:	4b57      	ldr	r3, [pc, #348]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfea:	4a56      	ldr	r2, [pc, #344]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cfec:	f023 0301 	bic.w	r3, r3, #1
 800cff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cff4:	4b53      	ldr	r3, [pc, #332]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cffa:	4a52      	ldr	r2, [pc, #328]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800cffc:	f023 0304 	bic.w	r3, r3, #4
 800d000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d016      	beq.n	800d03a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d00c:	f7fb fa4a 	bl	80084a4 <HAL_GetTick>
 800d010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d012:	e00a      	b.n	800d02a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d014:	f7fb fa46 	bl	80084a4 <HAL_GetTick>
 800d018:	4602      	mov	r2, r0
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d022:	4293      	cmp	r3, r2
 800d024:	d901      	bls.n	800d02a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d026:	2303      	movs	r3, #3
 800d028:	e140      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d02a:	4b46      	ldr	r3, [pc, #280]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0ed      	beq.n	800d014 <HAL_RCC_OscConfig+0x388>
 800d038:	e015      	b.n	800d066 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d03a:	f7fb fa33 	bl	80084a4 <HAL_GetTick>
 800d03e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d040:	e00a      	b.n	800d058 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d042:	f7fb fa2f 	bl	80084a4 <HAL_GetTick>
 800d046:	4602      	mov	r2, r0
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d050:	4293      	cmp	r3, r2
 800d052:	d901      	bls.n	800d058 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d054:	2303      	movs	r3, #3
 800d056:	e129      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d058:	4b3a      	ldr	r3, [pc, #232]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1ed      	bne.n	800d042 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d066:	7ffb      	ldrb	r3, [r7, #31]
 800d068:	2b01      	cmp	r3, #1
 800d06a:	d105      	bne.n	800d078 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d06c:	4b35      	ldr	r3, [pc, #212]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d070:	4a34      	ldr	r2, [pc, #208]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d076:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0320 	and.w	r3, r3, #32
 800d080:	2b00      	cmp	r3, #0
 800d082:	d03c      	beq.n	800d0fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	699b      	ldr	r3, [r3, #24]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01c      	beq.n	800d0c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d08c:	4b2d      	ldr	r3, [pc, #180]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d08e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d092:	4a2c      	ldr	r2, [pc, #176]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d094:	f043 0301 	orr.w	r3, r3, #1
 800d098:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d09c:	f7fb fa02 	bl	80084a4 <HAL_GetTick>
 800d0a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d0a2:	e008      	b.n	800d0b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0a4:	f7fb f9fe 	bl	80084a4 <HAL_GetTick>
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d901      	bls.n	800d0b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d0b2:	2303      	movs	r3, #3
 800d0b4:	e0fa      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d0b6:	4b23      	ldr	r3, [pc, #140]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d0b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d0bc:	f003 0302 	and.w	r3, r3, #2
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d0ef      	beq.n	800d0a4 <HAL_RCC_OscConfig+0x418>
 800d0c4:	e01b      	b.n	800d0fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d0c6:	4b1f      	ldr	r3, [pc, #124]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d0c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d0cc:	4a1d      	ldr	r2, [pc, #116]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d0ce:	f023 0301 	bic.w	r3, r3, #1
 800d0d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d0d6:	f7fb f9e5 	bl	80084a4 <HAL_GetTick>
 800d0da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d0dc:	e008      	b.n	800d0f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0de:	f7fb f9e1 	bl	80084a4 <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d901      	bls.n	800d0f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e0dd      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d0f0:	4b14      	ldr	r3, [pc, #80]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d0f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1ef      	bne.n	800d0de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	69db      	ldr	r3, [r3, #28]
 800d102:	2b00      	cmp	r3, #0
 800d104:	f000 80d1 	beq.w	800d2aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d108:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d10a:	689b      	ldr	r3, [r3, #8]
 800d10c:	f003 030c 	and.w	r3, r3, #12
 800d110:	2b0c      	cmp	r3, #12
 800d112:	f000 808b 	beq.w	800d22c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	69db      	ldr	r3, [r3, #28]
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d15e      	bne.n	800d1dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d11e:	4b09      	ldr	r3, [pc, #36]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4a08      	ldr	r2, [pc, #32]	; (800d144 <HAL_RCC_OscConfig+0x4b8>)
 800d124:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d12a:	f7fb f9bb 	bl	80084a4 <HAL_GetTick>
 800d12e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d130:	e00c      	b.n	800d14c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d132:	f7fb f9b7 	bl	80084a4 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	2b02      	cmp	r3, #2
 800d13e:	d905      	bls.n	800d14c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e0b3      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
 800d144:	40021000 	.word	0x40021000
 800d148:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d14c:	4b59      	ldr	r3, [pc, #356]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1ec      	bne.n	800d132 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d158:	4b56      	ldr	r3, [pc, #344]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d15a:	68da      	ldr	r2, [r3, #12]
 800d15c:	4b56      	ldr	r3, [pc, #344]	; (800d2b8 <HAL_RCC_OscConfig+0x62c>)
 800d15e:	4013      	ands	r3, r2
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	6a11      	ldr	r1, [r2, #32]
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d168:	3a01      	subs	r2, #1
 800d16a:	0112      	lsls	r2, r2, #4
 800d16c:	4311      	orrs	r1, r2
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d172:	0212      	lsls	r2, r2, #8
 800d174:	4311      	orrs	r1, r2
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d17a:	0852      	lsrs	r2, r2, #1
 800d17c:	3a01      	subs	r2, #1
 800d17e:	0552      	lsls	r2, r2, #21
 800d180:	4311      	orrs	r1, r2
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d186:	0852      	lsrs	r2, r2, #1
 800d188:	3a01      	subs	r2, #1
 800d18a:	0652      	lsls	r2, r2, #25
 800d18c:	4311      	orrs	r1, r2
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d192:	06d2      	lsls	r2, r2, #27
 800d194:	430a      	orrs	r2, r1
 800d196:	4947      	ldr	r1, [pc, #284]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d198:	4313      	orrs	r3, r2
 800d19a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d19c:	4b45      	ldr	r3, [pc, #276]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a44      	ldr	r2, [pc, #272]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d1a8:	4b42      	ldr	r3, [pc, #264]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	4a41      	ldr	r2, [pc, #260]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d1b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1b4:	f7fb f976 	bl	80084a4 <HAL_GetTick>
 800d1b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1ba:	e008      	b.n	800d1ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1bc:	f7fb f972 	bl	80084a4 <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d901      	bls.n	800d1ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e06e      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d1ce:	4b39      	ldr	r3, [pc, #228]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d0f0      	beq.n	800d1bc <HAL_RCC_OscConfig+0x530>
 800d1da:	e066      	b.n	800d2aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1dc:	4b35      	ldr	r3, [pc, #212]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a34      	ldr	r2, [pc, #208]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800d1e8:	4b32      	ldr	r3, [pc, #200]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	4a31      	ldr	r2, [pc, #196]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1ee:	f023 0303 	bic.w	r3, r3, #3
 800d1f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d1f4:	4b2f      	ldr	r3, [pc, #188]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	4a2e      	ldr	r2, [pc, #184]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d1fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800d1fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d204:	f7fb f94e 	bl	80084a4 <HAL_GetTick>
 800d208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d20a:	e008      	b.n	800d21e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d20c:	f7fb f94a 	bl	80084a4 <HAL_GetTick>
 800d210:	4602      	mov	r2, r0
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	1ad3      	subs	r3, r2, r3
 800d216:	2b02      	cmp	r3, #2
 800d218:	d901      	bls.n	800d21e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e046      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d21e:	4b25      	ldr	r3, [pc, #148]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1f0      	bne.n	800d20c <HAL_RCC_OscConfig+0x580>
 800d22a:	e03e      	b.n	800d2aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	69db      	ldr	r3, [r3, #28]
 800d230:	2b01      	cmp	r3, #1
 800d232:	d101      	bne.n	800d238 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e039      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d238:	4b1e      	ldr	r3, [pc, #120]	; (800d2b4 <HAL_RCC_OscConfig+0x628>)
 800d23a:	68db      	ldr	r3, [r3, #12]
 800d23c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	f003 0203 	and.w	r2, r3, #3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a1b      	ldr	r3, [r3, #32]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d12c      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	3b01      	subs	r3, #1
 800d258:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d123      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d268:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d11b      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d113      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d288:	085b      	lsrs	r3, r3, #1
 800d28a:	3b01      	subs	r3, #1
 800d28c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d28e:	429a      	cmp	r2, r3
 800d290:	d109      	bne.n	800d2a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29c:	085b      	lsrs	r3, r3, #1
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d001      	beq.n	800d2aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e000      	b.n	800d2ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3720      	adds	r7, #32
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	40021000 	.word	0x40021000
 800d2b8:	019f800c 	.word	0x019f800c

0800d2bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b086      	sub	sp, #24
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
 800d2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e11e      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d2d4:	4b91      	ldr	r3, [pc, #580]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 030f 	and.w	r3, r3, #15
 800d2dc:	683a      	ldr	r2, [r7, #0]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d910      	bls.n	800d304 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d2e2:	4b8e      	ldr	r3, [pc, #568]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f023 020f 	bic.w	r2, r3, #15
 800d2ea:	498c      	ldr	r1, [pc, #560]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2f2:	4b8a      	ldr	r3, [pc, #552]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f003 030f 	and.w	r3, r3, #15
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d001      	beq.n	800d304 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e106      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d073      	beq.n	800d3f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	2b03      	cmp	r3, #3
 800d316:	d129      	bne.n	800d36c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d318:	4b81      	ldr	r3, [pc, #516]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d101      	bne.n	800d328 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e0f4      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d328:	f000 f9d0 	bl	800d6cc <RCC_GetSysClockFreqFromPLLSource>
 800d32c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	4a7c      	ldr	r2, [pc, #496]	; (800d524 <HAL_RCC_ClockConfig+0x268>)
 800d332:	4293      	cmp	r3, r2
 800d334:	d93f      	bls.n	800d3b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d336:	4b7a      	ldr	r3, [pc, #488]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d009      	beq.n	800d356 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d033      	beq.n	800d3b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d352:	2b00      	cmp	r3, #0
 800d354:	d12f      	bne.n	800d3b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d356:	4b72      	ldr	r3, [pc, #456]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d35e:	4a70      	ldr	r2, [pc, #448]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d364:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d366:	2380      	movs	r3, #128	; 0x80
 800d368:	617b      	str	r3, [r7, #20]
 800d36a:	e024      	b.n	800d3b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	2b02      	cmp	r3, #2
 800d372:	d107      	bne.n	800d384 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d374:	4b6a      	ldr	r3, [pc, #424]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d109      	bne.n	800d394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d380:	2301      	movs	r3, #1
 800d382:	e0c6      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d384:	4b66      	ldr	r3, [pc, #408]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e0be      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d394:	f000 f8ce 	bl	800d534 <HAL_RCC_GetSysClockFreq>
 800d398:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d39a:	693b      	ldr	r3, [r7, #16]
 800d39c:	4a61      	ldr	r2, [pc, #388]	; (800d524 <HAL_RCC_ClockConfig+0x268>)
 800d39e:	4293      	cmp	r3, r2
 800d3a0:	d909      	bls.n	800d3b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d3a2:	4b5f      	ldr	r3, [pc, #380]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3aa:	4a5d      	ldr	r2, [pc, #372]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d3b2:	2380      	movs	r3, #128	; 0x80
 800d3b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d3b6:	4b5a      	ldr	r3, [pc, #360]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	f023 0203 	bic.w	r2, r3, #3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	4957      	ldr	r1, [pc, #348]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3c8:	f7fb f86c 	bl	80084a4 <HAL_GetTick>
 800d3cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3ce:	e00a      	b.n	800d3e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d3d0:	f7fb f868 	bl	80084a4 <HAL_GetTick>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	1ad3      	subs	r3, r2, r3
 800d3da:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d901      	bls.n	800d3e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e095      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d3e6:	4b4e      	ldr	r3, [pc, #312]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d3e8:	689b      	ldr	r3, [r3, #8]
 800d3ea:	f003 020c 	and.w	r2, r3, #12
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d1eb      	bne.n	800d3d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0302 	and.w	r3, r3, #2
 800d400:	2b00      	cmp	r3, #0
 800d402:	d023      	beq.n	800d44c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0304 	and.w	r3, r3, #4
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d005      	beq.n	800d41c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d410:	4b43      	ldr	r3, [pc, #268]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d412:	689b      	ldr	r3, [r3, #8]
 800d414:	4a42      	ldr	r2, [pc, #264]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d416:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d41a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f003 0308 	and.w	r3, r3, #8
 800d424:	2b00      	cmp	r3, #0
 800d426:	d007      	beq.n	800d438 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d428:	4b3d      	ldr	r3, [pc, #244]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d430:	4a3b      	ldr	r2, [pc, #236]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d432:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d438:	4b39      	ldr	r3, [pc, #228]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	4936      	ldr	r1, [pc, #216]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d446:	4313      	orrs	r3, r2
 800d448:	608b      	str	r3, [r1, #8]
 800d44a:	e008      	b.n	800d45e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	2b80      	cmp	r3, #128	; 0x80
 800d450:	d105      	bne.n	800d45e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d452:	4b33      	ldr	r3, [pc, #204]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	4a32      	ldr	r2, [pc, #200]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d45c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d45e:	4b2f      	ldr	r3, [pc, #188]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f003 030f 	and.w	r3, r3, #15
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d21d      	bcs.n	800d4a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d46c:	4b2b      	ldr	r3, [pc, #172]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f023 020f 	bic.w	r2, r3, #15
 800d474:	4929      	ldr	r1, [pc, #164]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	4313      	orrs	r3, r2
 800d47a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d47c:	f7fb f812 	bl	80084a4 <HAL_GetTick>
 800d480:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d482:	e00a      	b.n	800d49a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d484:	f7fb f80e 	bl	80084a4 <HAL_GetTick>
 800d488:	4602      	mov	r2, r0
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d492:	4293      	cmp	r3, r2
 800d494:	d901      	bls.n	800d49a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d496:	2303      	movs	r3, #3
 800d498:	e03b      	b.n	800d512 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d49a:	4b20      	ldr	r3, [pc, #128]	; (800d51c <HAL_RCC_ClockConfig+0x260>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 030f 	and.w	r3, r3, #15
 800d4a2:	683a      	ldr	r2, [r7, #0]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d1ed      	bne.n	800d484 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f003 0304 	and.w	r3, r3, #4
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d008      	beq.n	800d4c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d4b4:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d4b6:	689b      	ldr	r3, [r3, #8]
 800d4b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	4917      	ldr	r1, [pc, #92]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f003 0308 	and.w	r3, r3, #8
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d009      	beq.n	800d4e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d4d2:	4b13      	ldr	r3, [pc, #76]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d4d4:	689b      	ldr	r3, [r3, #8]
 800d4d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	691b      	ldr	r3, [r3, #16]
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	490f      	ldr	r1, [pc, #60]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d4e6:	f000 f825 	bl	800d534 <HAL_RCC_GetSysClockFreq>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	4b0c      	ldr	r3, [pc, #48]	; (800d520 <HAL_RCC_ClockConfig+0x264>)
 800d4ee:	689b      	ldr	r3, [r3, #8]
 800d4f0:	091b      	lsrs	r3, r3, #4
 800d4f2:	f003 030f 	and.w	r3, r3, #15
 800d4f6:	490c      	ldr	r1, [pc, #48]	; (800d528 <HAL_RCC_ClockConfig+0x26c>)
 800d4f8:	5ccb      	ldrb	r3, [r1, r3]
 800d4fa:	f003 031f 	and.w	r3, r3, #31
 800d4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800d502:	4a0a      	ldr	r2, [pc, #40]	; (800d52c <HAL_RCC_ClockConfig+0x270>)
 800d504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d506:	4b0a      	ldr	r3, [pc, #40]	; (800d530 <HAL_RCC_ClockConfig+0x274>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fa fb72 	bl	8007bf4 <HAL_InitTick>
 800d510:	4603      	mov	r3, r0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
 800d51a:	bf00      	nop
 800d51c:	40022000 	.word	0x40022000
 800d520:	40021000 	.word	0x40021000
 800d524:	04c4b400 	.word	0x04c4b400
 800d528:	0801902c 	.word	0x0801902c
 800d52c:	20000004 	.word	0x20000004
 800d530:	20000008 	.word	0x20000008

0800d534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d534:	b480      	push	{r7}
 800d536:	b087      	sub	sp, #28
 800d538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d53a:	4b2c      	ldr	r3, [pc, #176]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	f003 030c 	and.w	r3, r3, #12
 800d542:	2b04      	cmp	r3, #4
 800d544:	d102      	bne.n	800d54c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d546:	4b2a      	ldr	r3, [pc, #168]	; (800d5f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d548:	613b      	str	r3, [r7, #16]
 800d54a:	e047      	b.n	800d5dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d54c:	4b27      	ldr	r3, [pc, #156]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	f003 030c 	and.w	r3, r3, #12
 800d554:	2b08      	cmp	r3, #8
 800d556:	d102      	bne.n	800d55e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d558:	4b26      	ldr	r3, [pc, #152]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d55a:	613b      	str	r3, [r7, #16]
 800d55c:	e03e      	b.n	800d5dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d55e:	4b23      	ldr	r3, [pc, #140]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	f003 030c 	and.w	r3, r3, #12
 800d566:	2b0c      	cmp	r3, #12
 800d568:	d136      	bne.n	800d5d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d56a:	4b20      	ldr	r3, [pc, #128]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	f003 0303 	and.w	r3, r3, #3
 800d572:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d574:	4b1d      	ldr	r3, [pc, #116]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	091b      	lsrs	r3, r3, #4
 800d57a:	f003 030f 	and.w	r3, r3, #15
 800d57e:	3301      	adds	r3, #1
 800d580:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2b03      	cmp	r3, #3
 800d586:	d10c      	bne.n	800d5a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d588:	4a1a      	ldr	r2, [pc, #104]	; (800d5f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d590:	4a16      	ldr	r2, [pc, #88]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d592:	68d2      	ldr	r2, [r2, #12]
 800d594:	0a12      	lsrs	r2, r2, #8
 800d596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d59a:	fb02 f303 	mul.w	r3, r2, r3
 800d59e:	617b      	str	r3, [r7, #20]
      break;
 800d5a0:	e00c      	b.n	800d5bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d5a2:	4a13      	ldr	r2, [pc, #76]	; (800d5f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5aa:	4a10      	ldr	r2, [pc, #64]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d5ac:	68d2      	ldr	r2, [r2, #12]
 800d5ae:	0a12      	lsrs	r2, r2, #8
 800d5b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d5b4:	fb02 f303 	mul.w	r3, r2, r3
 800d5b8:	617b      	str	r3, [r7, #20]
      break;
 800d5ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d5bc:	4b0b      	ldr	r3, [pc, #44]	; (800d5ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	0e5b      	lsrs	r3, r3, #25
 800d5c2:	f003 0303 	and.w	r3, r3, #3
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	005b      	lsls	r3, r3, #1
 800d5ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d5cc:	697a      	ldr	r2, [r7, #20]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5d4:	613b      	str	r3, [r7, #16]
 800d5d6:	e001      	b.n	800d5dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d5d8:	2300      	movs	r3, #0
 800d5da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d5dc:	693b      	ldr	r3, [r7, #16]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	371c      	adds	r7, #28
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	40021000 	.word	0x40021000
 800d5f0:	00f42400 	.word	0x00f42400
 800d5f4:	007a1200 	.word	0x007a1200

0800d5f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d5fc:	4b03      	ldr	r3, [pc, #12]	; (800d60c <HAL_RCC_GetHCLKFreq+0x14>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
}
 800d600:	4618      	mov	r0, r3
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	20000004 	.word	0x20000004

0800d610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d614:	f7ff fff0 	bl	800d5f8 <HAL_RCC_GetHCLKFreq>
 800d618:	4602      	mov	r2, r0
 800d61a:	4b06      	ldr	r3, [pc, #24]	; (800d634 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	0a1b      	lsrs	r3, r3, #8
 800d620:	f003 0307 	and.w	r3, r3, #7
 800d624:	4904      	ldr	r1, [pc, #16]	; (800d638 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d626:	5ccb      	ldrb	r3, [r1, r3]
 800d628:	f003 031f 	and.w	r3, r3, #31
 800d62c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d630:	4618      	mov	r0, r3
 800d632:	bd80      	pop	{r7, pc}
 800d634:	40021000 	.word	0x40021000
 800d638:	0801903c 	.word	0x0801903c

0800d63c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d640:	f7ff ffda 	bl	800d5f8 <HAL_RCC_GetHCLKFreq>
 800d644:	4602      	mov	r2, r0
 800d646:	4b06      	ldr	r3, [pc, #24]	; (800d660 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d648:	689b      	ldr	r3, [r3, #8]
 800d64a:	0adb      	lsrs	r3, r3, #11
 800d64c:	f003 0307 	and.w	r3, r3, #7
 800d650:	4904      	ldr	r1, [pc, #16]	; (800d664 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d652:	5ccb      	ldrb	r3, [r1, r3]
 800d654:	f003 031f 	and.w	r3, r3, #31
 800d658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	40021000 	.word	0x40021000
 800d664:	0801903c 	.word	0x0801903c

0800d668 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	220f      	movs	r2, #15
 800d676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d678:	4b12      	ldr	r3, [pc, #72]	; (800d6c4 <HAL_RCC_GetClockConfig+0x5c>)
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	f003 0203 	and.w	r2, r3, #3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d684:	4b0f      	ldr	r3, [pc, #60]	; (800d6c4 <HAL_RCC_GetClockConfig+0x5c>)
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d690:	4b0c      	ldr	r3, [pc, #48]	; (800d6c4 <HAL_RCC_GetClockConfig+0x5c>)
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d69c:	4b09      	ldr	r3, [pc, #36]	; (800d6c4 <HAL_RCC_GetClockConfig+0x5c>)
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	08db      	lsrs	r3, r3, #3
 800d6a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d6aa:	4b07      	ldr	r3, [pc, #28]	; (800d6c8 <HAL_RCC_GetClockConfig+0x60>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f003 020f 	and.w	r2, r3, #15
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	601a      	str	r2, [r3, #0]
}
 800d6b6:	bf00      	nop
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	40021000 	.word	0x40021000
 800d6c8:	40022000 	.word	0x40022000

0800d6cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d6d2:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	f003 0303 	and.w	r3, r3, #3
 800d6da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d6dc:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d6de:	68db      	ldr	r3, [r3, #12]
 800d6e0:	091b      	lsrs	r3, r3, #4
 800d6e2:	f003 030f 	and.w	r3, r3, #15
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	2b03      	cmp	r3, #3
 800d6ee:	d10c      	bne.n	800d70a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d6f0:	4a17      	ldr	r2, [pc, #92]	; (800d750 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6f8:	4a14      	ldr	r2, [pc, #80]	; (800d74c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d6fa:	68d2      	ldr	r2, [r2, #12]
 800d6fc:	0a12      	lsrs	r2, r2, #8
 800d6fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d702:	fb02 f303 	mul.w	r3, r2, r3
 800d706:	617b      	str	r3, [r7, #20]
    break;
 800d708:	e00c      	b.n	800d724 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d70a:	4a12      	ldr	r2, [pc, #72]	; (800d754 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d712:	4a0e      	ldr	r2, [pc, #56]	; (800d74c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d714:	68d2      	ldr	r2, [r2, #12]
 800d716:	0a12      	lsrs	r2, r2, #8
 800d718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d71c:	fb02 f303 	mul.w	r3, r2, r3
 800d720:	617b      	str	r3, [r7, #20]
    break;
 800d722:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d724:	4b09      	ldr	r3, [pc, #36]	; (800d74c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	0e5b      	lsrs	r3, r3, #25
 800d72a:	f003 0303 	and.w	r3, r3, #3
 800d72e:	3301      	adds	r3, #1
 800d730:	005b      	lsls	r3, r3, #1
 800d732:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d734:	697a      	ldr	r2, [r7, #20]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	fbb2 f3f3 	udiv	r3, r2, r3
 800d73c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d73e:	687b      	ldr	r3, [r7, #4]
}
 800d740:	4618      	mov	r0, r3
 800d742:	371c      	adds	r7, #28
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	40021000 	.word	0x40021000
 800d750:	007a1200 	.word	0x007a1200
 800d754:	00f42400 	.word	0x00f42400

0800d758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b086      	sub	sp, #24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d760:	2300      	movs	r3, #0
 800d762:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d764:	2300      	movs	r3, #0
 800d766:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d770:	2b00      	cmp	r3, #0
 800d772:	f000 8098 	beq.w	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d776:	2300      	movs	r3, #0
 800d778:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d77a:	4b43      	ldr	r3, [pc, #268]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d77e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d782:	2b00      	cmp	r3, #0
 800d784:	d10d      	bne.n	800d7a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d786:	4b40      	ldr	r3, [pc, #256]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d78a:	4a3f      	ldr	r2, [pc, #252]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d790:	6593      	str	r3, [r2, #88]	; 0x58
 800d792:	4b3d      	ldr	r3, [pc, #244]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d79a:	60bb      	str	r3, [r7, #8]
 800d79c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d7a2:	4b3a      	ldr	r3, [pc, #232]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a39      	ldr	r2, [pc, #228]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d7a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d7ae:	f7fa fe79 	bl	80084a4 <HAL_GetTick>
 800d7b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7b4:	e009      	b.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7b6:	f7fa fe75 	bl	80084a4 <HAL_GetTick>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	1ad3      	subs	r3, r2, r3
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d902      	bls.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d7c4:	2303      	movs	r3, #3
 800d7c6:	74fb      	strb	r3, [r7, #19]
        break;
 800d7c8:	e005      	b.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d7ca:	4b30      	ldr	r3, [pc, #192]	; (800d88c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d0ef      	beq.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d7d6:	7cfb      	ldrb	r3, [r7, #19]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d159      	bne.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d7dc:	4b2a      	ldr	r3, [pc, #168]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d7e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d01e      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d019      	beq.n	800d82c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d7f8:	4b23      	ldr	r3, [pc, #140]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d802:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d804:	4b20      	ldr	r3, [pc, #128]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80a:	4a1f      	ldr	r2, [pc, #124]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d80c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d814:	4b1c      	ldr	r3, [pc, #112]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d81a:	4a1b      	ldr	r2, [pc, #108]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d81c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d824:	4a18      	ldr	r2, [pc, #96]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d82c:	697b      	ldr	r3, [r7, #20]
 800d82e:	f003 0301 	and.w	r3, r3, #1
 800d832:	2b00      	cmp	r3, #0
 800d834:	d016      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d836:	f7fa fe35 	bl	80084a4 <HAL_GetTick>
 800d83a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d83c:	e00b      	b.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d83e:	f7fa fe31 	bl	80084a4 <HAL_GetTick>
 800d842:	4602      	mov	r2, r0
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	1ad3      	subs	r3, r2, r3
 800d848:	f241 3288 	movw	r2, #5000	; 0x1388
 800d84c:	4293      	cmp	r3, r2
 800d84e:	d902      	bls.n	800d856 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	74fb      	strb	r3, [r7, #19]
            break;
 800d854:	e006      	b.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d856:	4b0c      	ldr	r3, [pc, #48]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d85c:	f003 0302 	and.w	r3, r3, #2
 800d860:	2b00      	cmp	r3, #0
 800d862:	d0ec      	beq.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d864:	7cfb      	ldrb	r3, [r7, #19]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10b      	bne.n	800d882 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d86a:	4b07      	ldr	r3, [pc, #28]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d86c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d878:	4903      	ldr	r1, [pc, #12]	; (800d888 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d880:	e008      	b.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d882:	7cfb      	ldrb	r3, [r7, #19]
 800d884:	74bb      	strb	r3, [r7, #18]
 800d886:	e005      	b.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d888:	40021000 	.word	0x40021000
 800d88c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d890:	7cfb      	ldrb	r3, [r7, #19]
 800d892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d894:	7c7b      	ldrb	r3, [r7, #17]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d105      	bne.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d89a:	4ba7      	ldr	r3, [pc, #668]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d89e:	4aa6      	ldr	r2, [pc, #664]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d8a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f003 0301 	and.w	r3, r3, #1
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d8b2:	4ba1      	ldr	r3, [pc, #644]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8b8:	f023 0203 	bic.w	r2, r3, #3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	499d      	ldr	r1, [pc, #628]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d00a      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d8d4:	4b98      	ldr	r3, [pc, #608]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8da:	f023 020c 	bic.w	r2, r3, #12
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	4995      	ldr	r1, [pc, #596]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	f003 0304 	and.w	r3, r3, #4
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d00a      	beq.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d8f6:	4b90      	ldr	r3, [pc, #576]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	498c      	ldr	r1, [pc, #560]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d906:	4313      	orrs	r3, r2
 800d908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d918:	4b87      	ldr	r3, [pc, #540]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d91e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	4984      	ldr	r1, [pc, #528]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d928:	4313      	orrs	r3, r2
 800d92a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f003 0310 	and.w	r3, r3, #16
 800d936:	2b00      	cmp	r3, #0
 800d938:	d00a      	beq.n	800d950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d93a:	4b7f      	ldr	r3, [pc, #508]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d93c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	497b      	ldr	r1, [pc, #492]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d94a:	4313      	orrs	r3, r2
 800d94c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d00a      	beq.n	800d972 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d95c:	4b76      	ldr	r3, [pc, #472]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d95e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	4973      	ldr	r1, [pc, #460]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d00a      	beq.n	800d994 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d97e:	4b6e      	ldr	r3, [pc, #440]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d984:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	69db      	ldr	r3, [r3, #28]
 800d98c:	496a      	ldr	r1, [pc, #424]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d98e:	4313      	orrs	r3, r2
 800d990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00a      	beq.n	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d9a0:	4b65      	ldr	r3, [pc, #404]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	4962      	ldr	r1, [pc, #392]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00a      	beq.n	800d9d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d9c2:	4b5d      	ldr	r3, [pc, #372]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d0:	4959      	ldr	r1, [pc, #356]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d00a      	beq.n	800d9fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d9e4:	4b54      	ldr	r3, [pc, #336]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d9ea:	f023 0203 	bic.w	r2, r3, #3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f2:	4951      	ldr	r1, [pc, #324]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da02:	2b00      	cmp	r3, #0
 800da04:	d00a      	beq.n	800da1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800da06:	4b4c      	ldr	r3, [pc, #304]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da14:	4948      	ldr	r1, [pc, #288]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da16:	4313      	orrs	r3, r2
 800da18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800da24:	2b00      	cmp	r3, #0
 800da26:	d015      	beq.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800da28:	4b43      	ldr	r3, [pc, #268]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da36:	4940      	ldr	r1, [pc, #256]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da38:	4313      	orrs	r3, r2
 800da3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da46:	d105      	bne.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da48:	4b3b      	ldr	r3, [pc, #236]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da4a:	68db      	ldr	r3, [r3, #12]
 800da4c:	4a3a      	ldr	r2, [pc, #232]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d015      	beq.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800da60:	4b35      	ldr	r3, [pc, #212]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6e:	4932      	ldr	r1, [pc, #200]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da70:	4313      	orrs	r3, r2
 800da72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800da7e:	d105      	bne.n	800da8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800da80:	4b2d      	ldr	r3, [pc, #180]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	4a2c      	ldr	r2, [pc, #176]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800da8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800da94:	2b00      	cmp	r3, #0
 800da96:	d015      	beq.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800da98:	4b27      	ldr	r3, [pc, #156]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800da9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa6:	4924      	ldr	r1, [pc, #144]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daa8:	4313      	orrs	r3, r2
 800daaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dab6:	d105      	bne.n	800dac4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dab8:	4b1f      	ldr	r3, [pc, #124]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	4a1e      	ldr	r2, [pc, #120]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dabe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dac2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d015      	beq.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dad0:	4b19      	ldr	r3, [pc, #100]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dade:	4916      	ldr	r1, [pc, #88]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dae0:	4313      	orrs	r3, r2
 800dae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800daee:	d105      	bne.n	800dafc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800daf0:	4b11      	ldr	r3, [pc, #68]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	4a10      	ldr	r2, [pc, #64]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800daf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dafa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db04:	2b00      	cmp	r3, #0
 800db06:	d019      	beq.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800db08:	4b0b      	ldr	r3, [pc, #44]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db16:	4908      	ldr	r1, [pc, #32]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db18:	4313      	orrs	r3, r2
 800db1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db26:	d109      	bne.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800db28:	4b03      	ldr	r3, [pc, #12]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db2a:	68db      	ldr	r3, [r3, #12]
 800db2c:	4a02      	ldr	r2, [pc, #8]	; (800db38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db32:	60d3      	str	r3, [r2, #12]
 800db34:	e002      	b.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800db36:	bf00      	nop
 800db38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db44:	2b00      	cmp	r3, #0
 800db46:	d015      	beq.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800db48:	4b29      	ldr	r3, [pc, #164]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db56:	4926      	ldr	r1, [pc, #152]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db66:	d105      	bne.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800db68:	4b21      	ldr	r3, [pc, #132]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	4a20      	ldr	r2, [pc, #128]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800db72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d015      	beq.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800db80:	4b1b      	ldr	r3, [pc, #108]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db8e:	4918      	ldr	r1, [pc, #96]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800db90:	4313      	orrs	r3, r2
 800db92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db9e:	d105      	bne.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800dba0:	4b13      	ldr	r3, [pc, #76]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	4a12      	ldr	r2, [pc, #72]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbaa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d015      	beq.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dbb8:	4b0d      	ldr	r3, [pc, #52]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dbba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dbbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbc6:	490a      	ldr	r1, [pc, #40]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbd6:	d105      	bne.n	800dbe4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dbd8:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	4a04      	ldr	r2, [pc, #16]	; (800dbf0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800dbde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbe2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800dbe4:	7cbb      	ldrb	r3, [r7, #18]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	40021000 	.word	0x40021000

0800dbf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e09d      	b.n	800dd42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d108      	bne.n	800dc20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dc16:	d009      	beq.n	800dc2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	61da      	str	r2, [r3, #28]
 800dc1e:	e005      	b.n	800dc2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2200      	movs	r2, #0
 800dc24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7f9 ff6a 	bl	8007b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2202      	movs	r2, #2
 800dc50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc6c:	d902      	bls.n	800dc74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
 800dc72:	e002      	b.n	800dc7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dc74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800dc82:	d007      	beq.n	800dc94 <HAL_SPI_Init+0xa0>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800dc8c:	d002      	beq.n	800dc94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800dca4:	431a      	orrs	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	691b      	ldr	r3, [r3, #16]
 800dcaa:	f003 0302 	and.w	r3, r3, #2
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	431a      	orrs	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	699b      	ldr	r3, [r3, #24]
 800dcbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcc2:	431a      	orrs	r2, r3
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	69db      	ldr	r3, [r3, #28]
 800dcc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dccc:	431a      	orrs	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6a1b      	ldr	r3, [r3, #32]
 800dcd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcd6:	ea42 0103 	orr.w	r1, r2, r3
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	430a      	orrs	r2, r1
 800dce8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	699b      	ldr	r3, [r3, #24]
 800dcee:	0c1b      	lsrs	r3, r3, #16
 800dcf0:	f003 0204 	and.w	r2, r3, #4
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf8:	f003 0310 	and.w	r3, r3, #16
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd02:	f003 0308 	and.w	r3, r3, #8
 800dd06:	431a      	orrs	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800dd10:	ea42 0103 	orr.w	r1, r2, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	430a      	orrs	r2, r1
 800dd20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	69da      	ldr	r2, [r3, #28]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2201      	movs	r2, #1
 800dd3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e049      	b.n	800ddf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d106      	bne.n	800dd76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 f841 	bl	800ddf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2202      	movs	r2, #2
 800dd7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3304      	adds	r3, #4
 800dd86:	4619      	mov	r1, r3
 800dd88:	4610      	mov	r0, r2
 800dd8a:	f000 fcdd 	bl	800e748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2201      	movs	r2, #1
 800dd9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2201      	movs	r2, #1
 800ddaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2201      	movs	r2, #1
 800ddb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2201      	movs	r2, #1
 800ddd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2201      	movs	r2, #1
 800ddda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b085      	sub	sp, #20
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d001      	beq.n	800de24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800de20:	2301      	movs	r3, #1
 800de22:	e054      	b.n	800dece <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2202      	movs	r2, #2
 800de28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f042 0201 	orr.w	r2, r2, #1
 800de3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4a26      	ldr	r2, [pc, #152]	; (800dedc <HAL_TIM_Base_Start_IT+0xd0>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d022      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de4e:	d01d      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	4a22      	ldr	r2, [pc, #136]	; (800dee0 <HAL_TIM_Base_Start_IT+0xd4>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d018      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a21      	ldr	r2, [pc, #132]	; (800dee4 <HAL_TIM_Base_Start_IT+0xd8>)
 800de60:	4293      	cmp	r3, r2
 800de62:	d013      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a1f      	ldr	r2, [pc, #124]	; (800dee8 <HAL_TIM_Base_Start_IT+0xdc>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d00e      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	4a1e      	ldr	r2, [pc, #120]	; (800deec <HAL_TIM_Base_Start_IT+0xe0>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d009      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a1c      	ldr	r2, [pc, #112]	; (800def0 <HAL_TIM_Base_Start_IT+0xe4>)
 800de7e:	4293      	cmp	r3, r2
 800de80:	d004      	beq.n	800de8c <HAL_TIM_Base_Start_IT+0x80>
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4a1b      	ldr	r2, [pc, #108]	; (800def4 <HAL_TIM_Base_Start_IT+0xe8>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d115      	bne.n	800deb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	689a      	ldr	r2, [r3, #8]
 800de92:	4b19      	ldr	r3, [pc, #100]	; (800def8 <HAL_TIM_Base_Start_IT+0xec>)
 800de94:	4013      	ands	r3, r2
 800de96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b06      	cmp	r3, #6
 800de9c:	d015      	beq.n	800deca <HAL_TIM_Base_Start_IT+0xbe>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dea4:	d011      	beq.n	800deca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f042 0201 	orr.w	r2, r2, #1
 800deb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deb6:	e008      	b.n	800deca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f042 0201 	orr.w	r2, r2, #1
 800dec6:	601a      	str	r2, [r3, #0]
 800dec8:	e000      	b.n	800decc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	40012c00 	.word	0x40012c00
 800dee0:	40000400 	.word	0x40000400
 800dee4:	40000800 	.word	0x40000800
 800dee8:	40000c00 	.word	0x40000c00
 800deec:	40013400 	.word	0x40013400
 800def0:	40014000 	.word	0x40014000
 800def4:	40015000 	.word	0x40015000
 800def8:	00010007 	.word	0x00010007

0800defc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d101      	bne.n	800df0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800df0a:	2301      	movs	r3, #1
 800df0c:	e049      	b.n	800dfa2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df14:	b2db      	uxtb	r3, r3
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f7fa f86a 	bl	8007ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681a      	ldr	r2, [r3, #0]
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	3304      	adds	r3, #4
 800df38:	4619      	mov	r1, r3
 800df3a:	4610      	mov	r0, r2
 800df3c:	f000 fc04 	bl	800e748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2201      	movs	r2, #1
 800df54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2201      	movs	r2, #1
 800df5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2201      	movs	r2, #1
 800df6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2201      	movs	r2, #1
 800df94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2201      	movs	r2, #1
 800df9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dfa0:	2300      	movs	r3, #0
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3708      	adds	r7, #8
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
	...

0800dfac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d109      	bne.n	800dfd0 <HAL_TIM_PWM_Start+0x24>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	bf14      	ite	ne
 800dfc8:	2301      	movne	r3, #1
 800dfca:	2300      	moveq	r3, #0
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	e03c      	b.n	800e04a <HAL_TIM_PWM_Start+0x9e>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b04      	cmp	r3, #4
 800dfd4:	d109      	bne.n	800dfea <HAL_TIM_PWM_Start+0x3e>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	bf14      	ite	ne
 800dfe2:	2301      	movne	r3, #1
 800dfe4:	2300      	moveq	r3, #0
 800dfe6:	b2db      	uxtb	r3, r3
 800dfe8:	e02f      	b.n	800e04a <HAL_TIM_PWM_Start+0x9e>
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2b08      	cmp	r3, #8
 800dfee:	d109      	bne.n	800e004 <HAL_TIM_PWM_Start+0x58>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	bf14      	ite	ne
 800dffc:	2301      	movne	r3, #1
 800dffe:	2300      	moveq	r3, #0
 800e000:	b2db      	uxtb	r3, r3
 800e002:	e022      	b.n	800e04a <HAL_TIM_PWM_Start+0x9e>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b0c      	cmp	r3, #12
 800e008:	d109      	bne.n	800e01e <HAL_TIM_PWM_Start+0x72>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b01      	cmp	r3, #1
 800e014:	bf14      	ite	ne
 800e016:	2301      	movne	r3, #1
 800e018:	2300      	moveq	r3, #0
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	e015      	b.n	800e04a <HAL_TIM_PWM_Start+0x9e>
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	2b10      	cmp	r3, #16
 800e022:	d109      	bne.n	800e038 <HAL_TIM_PWM_Start+0x8c>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e02a:	b2db      	uxtb	r3, r3
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	bf14      	ite	ne
 800e030:	2301      	movne	r3, #1
 800e032:	2300      	moveq	r3, #0
 800e034:	b2db      	uxtb	r3, r3
 800e036:	e008      	b.n	800e04a <HAL_TIM_PWM_Start+0x9e>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b01      	cmp	r3, #1
 800e042:	bf14      	ite	ne
 800e044:	2301      	movne	r3, #1
 800e046:	2300      	moveq	r3, #0
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	e0a6      	b.n	800e1a0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d104      	bne.n	800e062 <HAL_TIM_PWM_Start+0xb6>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2202      	movs	r2, #2
 800e05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e060:	e023      	b.n	800e0aa <HAL_TIM_PWM_Start+0xfe>
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b04      	cmp	r3, #4
 800e066:	d104      	bne.n	800e072 <HAL_TIM_PWM_Start+0xc6>
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2202      	movs	r2, #2
 800e06c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e070:	e01b      	b.n	800e0aa <HAL_TIM_PWM_Start+0xfe>
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	2b08      	cmp	r3, #8
 800e076:	d104      	bne.n	800e082 <HAL_TIM_PWM_Start+0xd6>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2202      	movs	r2, #2
 800e07c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e080:	e013      	b.n	800e0aa <HAL_TIM_PWM_Start+0xfe>
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2b0c      	cmp	r3, #12
 800e086:	d104      	bne.n	800e092 <HAL_TIM_PWM_Start+0xe6>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2202      	movs	r2, #2
 800e08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e090:	e00b      	b.n	800e0aa <HAL_TIM_PWM_Start+0xfe>
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b10      	cmp	r3, #16
 800e096:	d104      	bne.n	800e0a2 <HAL_TIM_PWM_Start+0xf6>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2202      	movs	r2, #2
 800e09c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e0a0:	e003      	b.n	800e0aa <HAL_TIM_PWM_Start+0xfe>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2202      	movs	r2, #2
 800e0a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	6839      	ldr	r1, [r7, #0]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f000 ff1a 	bl	800eeec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4a3a      	ldr	r2, [pc, #232]	; (800e1a8 <HAL_TIM_PWM_Start+0x1fc>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d018      	beq.n	800e0f4 <HAL_TIM_PWM_Start+0x148>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a39      	ldr	r2, [pc, #228]	; (800e1ac <HAL_TIM_PWM_Start+0x200>)
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	d013      	beq.n	800e0f4 <HAL_TIM_PWM_Start+0x148>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	4a37      	ldr	r2, [pc, #220]	; (800e1b0 <HAL_TIM_PWM_Start+0x204>)
 800e0d2:	4293      	cmp	r3, r2
 800e0d4:	d00e      	beq.n	800e0f4 <HAL_TIM_PWM_Start+0x148>
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4a36      	ldr	r2, [pc, #216]	; (800e1b4 <HAL_TIM_PWM_Start+0x208>)
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d009      	beq.n	800e0f4 <HAL_TIM_PWM_Start+0x148>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a34      	ldr	r2, [pc, #208]	; (800e1b8 <HAL_TIM_PWM_Start+0x20c>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d004      	beq.n	800e0f4 <HAL_TIM_PWM_Start+0x148>
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4a33      	ldr	r2, [pc, #204]	; (800e1bc <HAL_TIM_PWM_Start+0x210>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d101      	bne.n	800e0f8 <HAL_TIM_PWM_Start+0x14c>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e000      	b.n	800e0fa <HAL_TIM_PWM_Start+0x14e>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d007      	beq.n	800e10e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e10c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4a25      	ldr	r2, [pc, #148]	; (800e1a8 <HAL_TIM_PWM_Start+0x1fc>)
 800e114:	4293      	cmp	r3, r2
 800e116:	d022      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e120:	d01d      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4a26      	ldr	r2, [pc, #152]	; (800e1c0 <HAL_TIM_PWM_Start+0x214>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d018      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4a24      	ldr	r2, [pc, #144]	; (800e1c4 <HAL_TIM_PWM_Start+0x218>)
 800e132:	4293      	cmp	r3, r2
 800e134:	d013      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a23      	ldr	r2, [pc, #140]	; (800e1c8 <HAL_TIM_PWM_Start+0x21c>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d00e      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4a19      	ldr	r2, [pc, #100]	; (800e1ac <HAL_TIM_PWM_Start+0x200>)
 800e146:	4293      	cmp	r3, r2
 800e148:	d009      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	4a18      	ldr	r2, [pc, #96]	; (800e1b0 <HAL_TIM_PWM_Start+0x204>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d004      	beq.n	800e15e <HAL_TIM_PWM_Start+0x1b2>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a18      	ldr	r2, [pc, #96]	; (800e1bc <HAL_TIM_PWM_Start+0x210>)
 800e15a:	4293      	cmp	r3, r2
 800e15c:	d115      	bne.n	800e18a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689a      	ldr	r2, [r3, #8]
 800e164:	4b19      	ldr	r3, [pc, #100]	; (800e1cc <HAL_TIM_PWM_Start+0x220>)
 800e166:	4013      	ands	r3, r2
 800e168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	2b06      	cmp	r3, #6
 800e16e:	d015      	beq.n	800e19c <HAL_TIM_PWM_Start+0x1f0>
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e176:	d011      	beq.n	800e19c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f042 0201 	orr.w	r2, r2, #1
 800e186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e188:	e008      	b.n	800e19c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	f042 0201 	orr.w	r2, r2, #1
 800e198:	601a      	str	r2, [r3, #0]
 800e19a:	e000      	b.n	800e19e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e19c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	40012c00 	.word	0x40012c00
 800e1ac:	40013400 	.word	0x40013400
 800e1b0:	40014000 	.word	0x40014000
 800e1b4:	40014400 	.word	0x40014400
 800e1b8:	40014800 	.word	0x40014800
 800e1bc:	40015000 	.word	0x40015000
 800e1c0:	40000400 	.word	0x40000400
 800e1c4:	40000800 	.word	0x40000800
 800e1c8:	40000c00 	.word	0x40000c00
 800e1cc:	00010007 	.word	0x00010007

0800e1d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	691b      	ldr	r3, [r3, #16]
 800e1de:	f003 0302 	and.w	r3, r3, #2
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d122      	bne.n	800e22c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f003 0302 	and.w	r3, r3, #2
 800e1f0:	2b02      	cmp	r3, #2
 800e1f2:	d11b      	bne.n	800e22c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f06f 0202 	mvn.w	r2, #2
 800e1fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2201      	movs	r2, #1
 800e202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	699b      	ldr	r3, [r3, #24]
 800e20a:	f003 0303 	and.w	r3, r3, #3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d003      	beq.n	800e21a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f000 fa7a 	bl	800e70c <HAL_TIM_IC_CaptureCallback>
 800e218:	e005      	b.n	800e226 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fa6c 	bl	800e6f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fa7d 	bl	800e720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	f003 0304 	and.w	r3, r3, #4
 800e236:	2b04      	cmp	r3, #4
 800e238:	d122      	bne.n	800e280 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f003 0304 	and.w	r3, r3, #4
 800e244:	2b04      	cmp	r3, #4
 800e246:	d11b      	bne.n	800e280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f06f 0204 	mvn.w	r2, #4
 800e250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2202      	movs	r2, #2
 800e256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fa50 	bl	800e70c <HAL_TIM_IC_CaptureCallback>
 800e26c:	e005      	b.n	800e27a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa42 	bl	800e6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fa53 	bl	800e720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f003 0308 	and.w	r3, r3, #8
 800e28a:	2b08      	cmp	r3, #8
 800e28c:	d122      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	f003 0308 	and.w	r3, r3, #8
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d11b      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f06f 0208 	mvn.w	r2, #8
 800e2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2204      	movs	r2, #4
 800e2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	f003 0303 	and.w	r3, r3, #3
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 fa26 	bl	800e70c <HAL_TIM_IC_CaptureCallback>
 800e2c0:	e005      	b.n	800e2ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fa18 	bl	800e6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fa29 	bl	800e720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d122      	bne.n	800e328 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f003 0310 	and.w	r3, r3, #16
 800e2ec:	2b10      	cmp	r3, #16
 800e2ee:	d11b      	bne.n	800e328 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f06f 0210 	mvn.w	r2, #16
 800e2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2208      	movs	r2, #8
 800e2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f9fc 	bl	800e70c <HAL_TIM_IC_CaptureCallback>
 800e314:	e005      	b.n	800e322 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 f9ee 	bl	800e6f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f9ff 	bl	800e720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b01      	cmp	r3, #1
 800e334:	d10e      	bne.n	800e354 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b01      	cmp	r3, #1
 800e342:	d107      	bne.n	800e354 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f06f 0201 	mvn.w	r2, #1
 800e34c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7f9 f8be 	bl	80074d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e35e:	2b80      	cmp	r3, #128	; 0x80
 800e360:	d10e      	bne.n	800e380 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	68db      	ldr	r3, [r3, #12]
 800e368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36c:	2b80      	cmp	r3, #128	; 0x80
 800e36e:	d107      	bne.n	800e380 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 fe7c 	bl	800f078 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	691b      	ldr	r3, [r3, #16]
 800e386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e38e:	d10e      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e39a:	2b80      	cmp	r3, #128	; 0x80
 800e39c:	d107      	bne.n	800e3ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fe6f 	bl	800f08c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	691b      	ldr	r3, [r3, #16]
 800e3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3b8:	2b40      	cmp	r3, #64	; 0x40
 800e3ba:	d10e      	bne.n	800e3da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68db      	ldr	r3, [r3, #12]
 800e3c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c6:	2b40      	cmp	r3, #64	; 0x40
 800e3c8:	d107      	bne.n	800e3da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f9ad 	bl	800e734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f003 0320 	and.w	r3, r3, #32
 800e3e4:	2b20      	cmp	r3, #32
 800e3e6:	d10e      	bne.n	800e406 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	f003 0320 	and.w	r3, r3, #32
 800e3f2:	2b20      	cmp	r3, #32
 800e3f4:	d107      	bne.n	800e406 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f06f 0220 	mvn.w	r2, #32
 800e3fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fe2f 	bl	800f064 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	691b      	ldr	r3, [r3, #16]
 800e40c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e414:	d10f      	bne.n	800e436 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e424:	d107      	bne.n	800e436 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fe35 	bl	800f0a0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e440:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e444:	d10f      	bne.n	800e466 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68db      	ldr	r3, [r3, #12]
 800e44c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e450:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e454:	d107      	bne.n	800e466 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e45e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 fe27 	bl	800f0b4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e474:	d10f      	bne.n	800e496 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e484:	d107      	bne.n	800e496 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fe19 	bl	800f0c8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4a4:	d10f      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4b4:	d107      	bne.n	800e4c6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f000 fe0b 	bl	800f0dc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4c6:	bf00      	nop
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}
	...

0800e4d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d101      	bne.n	800e4ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	e0ff      	b.n	800e6ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b14      	cmp	r3, #20
 800e4fa:	f200 80f0 	bhi.w	800e6de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e4fe:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e504:	0800e559 	.word	0x0800e559
 800e508:	0800e6df 	.word	0x0800e6df
 800e50c:	0800e6df 	.word	0x0800e6df
 800e510:	0800e6df 	.word	0x0800e6df
 800e514:	0800e599 	.word	0x0800e599
 800e518:	0800e6df 	.word	0x0800e6df
 800e51c:	0800e6df 	.word	0x0800e6df
 800e520:	0800e6df 	.word	0x0800e6df
 800e524:	0800e5db 	.word	0x0800e5db
 800e528:	0800e6df 	.word	0x0800e6df
 800e52c:	0800e6df 	.word	0x0800e6df
 800e530:	0800e6df 	.word	0x0800e6df
 800e534:	0800e61b 	.word	0x0800e61b
 800e538:	0800e6df 	.word	0x0800e6df
 800e53c:	0800e6df 	.word	0x0800e6df
 800e540:	0800e6df 	.word	0x0800e6df
 800e544:	0800e65d 	.word	0x0800e65d
 800e548:	0800e6df 	.word	0x0800e6df
 800e54c:	0800e6df 	.word	0x0800e6df
 800e550:	0800e6df 	.word	0x0800e6df
 800e554:	0800e69d 	.word	0x0800e69d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 f99a 	bl	800e898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	699a      	ldr	r2, [r3, #24]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f042 0208 	orr.w	r2, r2, #8
 800e572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	699a      	ldr	r2, [r3, #24]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0204 	bic.w	r2, r2, #4
 800e582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6999      	ldr	r1, [r3, #24]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	691a      	ldr	r2, [r3, #16]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	619a      	str	r2, [r3, #24]
      break;
 800e596:	e0a5      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68b9      	ldr	r1, [r7, #8]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 fa14 	bl	800e9cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699a      	ldr	r2, [r3, #24]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	699a      	ldr	r2, [r3, #24]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6999      	ldr	r1, [r3, #24]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	021a      	lsls	r2, r3, #8
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	430a      	orrs	r2, r1
 800e5d6:	619a      	str	r2, [r3, #24]
      break;
 800e5d8:	e084      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68b9      	ldr	r1, [r7, #8]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f000 fa87 	bl	800eaf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	69da      	ldr	r2, [r3, #28]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f042 0208 	orr.w	r2, r2, #8
 800e5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	69da      	ldr	r2, [r3, #28]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f022 0204 	bic.w	r2, r2, #4
 800e604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	69d9      	ldr	r1, [r3, #28]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	691a      	ldr	r2, [r3, #16]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	430a      	orrs	r2, r1
 800e616:	61da      	str	r2, [r3, #28]
      break;
 800e618:	e064      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	68b9      	ldr	r1, [r7, #8]
 800e620:	4618      	mov	r0, r3
 800e622:	f000 faf9 	bl	800ec18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	69da      	ldr	r2, [r3, #28]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69da      	ldr	r2, [r3, #28]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	69d9      	ldr	r1, [r3, #28]
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	021a      	lsls	r2, r3, #8
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	61da      	str	r2, [r3, #28]
      break;
 800e65a:	e043      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	68b9      	ldr	r1, [r7, #8]
 800e662:	4618      	mov	r0, r3
 800e664:	f000 fb6c 	bl	800ed40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	f042 0208 	orr.w	r2, r2, #8
 800e676:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f022 0204 	bic.w	r2, r2, #4
 800e686:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	691a      	ldr	r2, [r3, #16]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	430a      	orrs	r2, r1
 800e698:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e69a:	e023      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	68b9      	ldr	r1, [r7, #8]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 fbb6 	bl	800ee14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	691b      	ldr	r3, [r3, #16]
 800e6d2:	021a      	lsls	r2, r3, #8
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	430a      	orrs	r2, r1
 800e6da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e6dc:	e002      	b.n	800e6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e6e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop

0800e6f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e700:	bf00      	nop
 800e702:	370c      	adds	r7, #12
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e714:	bf00      	nop
 800e716:	370c      	adds	r7, #12
 800e718:	46bd      	mov	sp, r7
 800e71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71e:	4770      	bx	lr

0800e720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e720:	b480      	push	{r7}
 800e722:	b083      	sub	sp, #12
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e728:	bf00      	nop
 800e72a:	370c      	adds	r7, #12
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr

0800e734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e73c:	bf00      	nop
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e748:	b480      	push	{r7}
 800e74a:	b085      	sub	sp, #20
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a46      	ldr	r2, [pc, #280]	; (800e874 <TIM_Base_SetConfig+0x12c>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d017      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e766:	d013      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4a43      	ldr	r2, [pc, #268]	; (800e878 <TIM_Base_SetConfig+0x130>)
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d00f      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4a42      	ldr	r2, [pc, #264]	; (800e87c <TIM_Base_SetConfig+0x134>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d00b      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	4a41      	ldr	r2, [pc, #260]	; (800e880 <TIM_Base_SetConfig+0x138>)
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d007      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	4a40      	ldr	r2, [pc, #256]	; (800e884 <TIM_Base_SetConfig+0x13c>)
 800e784:	4293      	cmp	r3, r2
 800e786:	d003      	beq.n	800e790 <TIM_Base_SetConfig+0x48>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	4a3f      	ldr	r2, [pc, #252]	; (800e888 <TIM_Base_SetConfig+0x140>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d108      	bne.n	800e7a2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a33      	ldr	r2, [pc, #204]	; (800e874 <TIM_Base_SetConfig+0x12c>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d023      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7b0:	d01f      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a30      	ldr	r2, [pc, #192]	; (800e878 <TIM_Base_SetConfig+0x130>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d01b      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4a2f      	ldr	r2, [pc, #188]	; (800e87c <TIM_Base_SetConfig+0x134>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d017      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	4a2e      	ldr	r2, [pc, #184]	; (800e880 <TIM_Base_SetConfig+0x138>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d013      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	4a2d      	ldr	r2, [pc, #180]	; (800e884 <TIM_Base_SetConfig+0x13c>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d00f      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4a2d      	ldr	r2, [pc, #180]	; (800e88c <TIM_Base_SetConfig+0x144>)
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	d00b      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	4a2c      	ldr	r2, [pc, #176]	; (800e890 <TIM_Base_SetConfig+0x148>)
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d007      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4a2b      	ldr	r2, [pc, #172]	; (800e894 <TIM_Base_SetConfig+0x14c>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d003      	beq.n	800e7f2 <TIM_Base_SetConfig+0xaa>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	4a26      	ldr	r2, [pc, #152]	; (800e888 <TIM_Base_SetConfig+0x140>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d108      	bne.n	800e804 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	4313      	orrs	r3, r2
 800e802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	695b      	ldr	r3, [r3, #20]
 800e80e:	4313      	orrs	r3, r2
 800e810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	689a      	ldr	r2, [r3, #8]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	4a12      	ldr	r2, [pc, #72]	; (800e874 <TIM_Base_SetConfig+0x12c>)
 800e82c:	4293      	cmp	r3, r2
 800e82e:	d013      	beq.n	800e858 <TIM_Base_SetConfig+0x110>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	4a14      	ldr	r2, [pc, #80]	; (800e884 <TIM_Base_SetConfig+0x13c>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d00f      	beq.n	800e858 <TIM_Base_SetConfig+0x110>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4a14      	ldr	r2, [pc, #80]	; (800e88c <TIM_Base_SetConfig+0x144>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d00b      	beq.n	800e858 <TIM_Base_SetConfig+0x110>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	4a13      	ldr	r2, [pc, #76]	; (800e890 <TIM_Base_SetConfig+0x148>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d007      	beq.n	800e858 <TIM_Base_SetConfig+0x110>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	4a12      	ldr	r2, [pc, #72]	; (800e894 <TIM_Base_SetConfig+0x14c>)
 800e84c:	4293      	cmp	r3, r2
 800e84e:	d003      	beq.n	800e858 <TIM_Base_SetConfig+0x110>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4a0d      	ldr	r2, [pc, #52]	; (800e888 <TIM_Base_SetConfig+0x140>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d103      	bne.n	800e860 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	691a      	ldr	r2, [r3, #16]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2201      	movs	r2, #1
 800e864:	615a      	str	r2, [r3, #20]
}
 800e866:	bf00      	nop
 800e868:	3714      	adds	r7, #20
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr
 800e872:	bf00      	nop
 800e874:	40012c00 	.word	0x40012c00
 800e878:	40000400 	.word	0x40000400
 800e87c:	40000800 	.word	0x40000800
 800e880:	40000c00 	.word	0x40000c00
 800e884:	40013400 	.word	0x40013400
 800e888:	40015000 	.word	0x40015000
 800e88c:	40014000 	.word	0x40014000
 800e890:	40014400 	.word	0x40014400
 800e894:	40014800 	.word	0x40014800

0800e898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e898:	b480      	push	{r7}
 800e89a:	b087      	sub	sp, #28
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	f023 0201 	bic.w	r2, r3, #1
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a1b      	ldr	r3, [r3, #32]
 800e8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	699b      	ldr	r3, [r3, #24]
 800e8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f023 0303 	bic.w	r3, r3, #3
 800e8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f023 0302 	bic.w	r3, r3, #2
 800e8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a30      	ldr	r2, [pc, #192]	; (800e9b4 <TIM_OC1_SetConfig+0x11c>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d013      	beq.n	800e920 <TIM_OC1_SetConfig+0x88>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a2f      	ldr	r2, [pc, #188]	; (800e9b8 <TIM_OC1_SetConfig+0x120>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d00f      	beq.n	800e920 <TIM_OC1_SetConfig+0x88>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a2e      	ldr	r2, [pc, #184]	; (800e9bc <TIM_OC1_SetConfig+0x124>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d00b      	beq.n	800e920 <TIM_OC1_SetConfig+0x88>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a2d      	ldr	r2, [pc, #180]	; (800e9c0 <TIM_OC1_SetConfig+0x128>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d007      	beq.n	800e920 <TIM_OC1_SetConfig+0x88>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	4a2c      	ldr	r2, [pc, #176]	; (800e9c4 <TIM_OC1_SetConfig+0x12c>)
 800e914:	4293      	cmp	r3, r2
 800e916:	d003      	beq.n	800e920 <TIM_OC1_SetConfig+0x88>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a2b      	ldr	r2, [pc, #172]	; (800e9c8 <TIM_OC1_SetConfig+0x130>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d10c      	bne.n	800e93a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	f023 0308 	bic.w	r3, r3, #8
 800e926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	4313      	orrs	r3, r2
 800e930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f023 0304 	bic.w	r3, r3, #4
 800e938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a1d      	ldr	r2, [pc, #116]	; (800e9b4 <TIM_OC1_SetConfig+0x11c>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d013      	beq.n	800e96a <TIM_OC1_SetConfig+0xd2>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a1c      	ldr	r2, [pc, #112]	; (800e9b8 <TIM_OC1_SetConfig+0x120>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d00f      	beq.n	800e96a <TIM_OC1_SetConfig+0xd2>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a1b      	ldr	r2, [pc, #108]	; (800e9bc <TIM_OC1_SetConfig+0x124>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d00b      	beq.n	800e96a <TIM_OC1_SetConfig+0xd2>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a1a      	ldr	r2, [pc, #104]	; (800e9c0 <TIM_OC1_SetConfig+0x128>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d007      	beq.n	800e96a <TIM_OC1_SetConfig+0xd2>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a19      	ldr	r2, [pc, #100]	; (800e9c4 <TIM_OC1_SetConfig+0x12c>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d003      	beq.n	800e96a <TIM_OC1_SetConfig+0xd2>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a18      	ldr	r2, [pc, #96]	; (800e9c8 <TIM_OC1_SetConfig+0x130>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d111      	bne.n	800e98e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	695b      	ldr	r3, [r3, #20]
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	4313      	orrs	r3, r2
 800e982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	4313      	orrs	r3, r2
 800e98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	693a      	ldr	r2, [r7, #16]
 800e992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	621a      	str	r2, [r3, #32]
}
 800e9a8:	bf00      	nop
 800e9aa:	371c      	adds	r7, #28
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr
 800e9b4:	40012c00 	.word	0x40012c00
 800e9b8:	40013400 	.word	0x40013400
 800e9bc:	40014000 	.word	0x40014000
 800e9c0:	40014400 	.word	0x40014400
 800e9c4:	40014800 	.word	0x40014800
 800e9c8:	40015000 	.word	0x40015000

0800e9cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b087      	sub	sp, #28
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a1b      	ldr	r3, [r3, #32]
 800e9da:	f023 0210 	bic.w	r2, r3, #16
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6a1b      	ldr	r3, [r3, #32]
 800e9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e9fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	021b      	lsls	r3, r3, #8
 800ea0e:	68fa      	ldr	r2, [r7, #12]
 800ea10:	4313      	orrs	r3, r2
 800ea12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	f023 0320 	bic.w	r3, r3, #32
 800ea1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	689b      	ldr	r3, [r3, #8]
 800ea20:	011b      	lsls	r3, r3, #4
 800ea22:	697a      	ldr	r2, [r7, #20]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	4a2c      	ldr	r2, [pc, #176]	; (800eadc <TIM_OC2_SetConfig+0x110>)
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	d007      	beq.n	800ea40 <TIM_OC2_SetConfig+0x74>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	4a2b      	ldr	r2, [pc, #172]	; (800eae0 <TIM_OC2_SetConfig+0x114>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d003      	beq.n	800ea40 <TIM_OC2_SetConfig+0x74>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	4a2a      	ldr	r2, [pc, #168]	; (800eae4 <TIM_OC2_SetConfig+0x118>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d10d      	bne.n	800ea5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	011b      	lsls	r3, r3, #4
 800ea4e:	697a      	ldr	r2, [r7, #20]
 800ea50:	4313      	orrs	r3, r2
 800ea52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a1f      	ldr	r2, [pc, #124]	; (800eadc <TIM_OC2_SetConfig+0x110>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d013      	beq.n	800ea8c <TIM_OC2_SetConfig+0xc0>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <TIM_OC2_SetConfig+0x114>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d00f      	beq.n	800ea8c <TIM_OC2_SetConfig+0xc0>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a1e      	ldr	r2, [pc, #120]	; (800eae8 <TIM_OC2_SetConfig+0x11c>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d00b      	beq.n	800ea8c <TIM_OC2_SetConfig+0xc0>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	4a1d      	ldr	r2, [pc, #116]	; (800eaec <TIM_OC2_SetConfig+0x120>)
 800ea78:	4293      	cmp	r3, r2
 800ea7a:	d007      	beq.n	800ea8c <TIM_OC2_SetConfig+0xc0>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a1c      	ldr	r2, [pc, #112]	; (800eaf0 <TIM_OC2_SetConfig+0x124>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d003      	beq.n	800ea8c <TIM_OC2_SetConfig+0xc0>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a17      	ldr	r2, [pc, #92]	; (800eae4 <TIM_OC2_SetConfig+0x118>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d113      	bne.n	800eab4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ea8c:	693b      	ldr	r3, [r7, #16]
 800ea8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ea92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ea9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	695b      	ldr	r3, [r3, #20]
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	693a      	ldr	r2, [r7, #16]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	699b      	ldr	r3, [r3, #24]
 800eaac:	009b      	lsls	r3, r3, #2
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	697a      	ldr	r2, [r7, #20]
 800eacc:	621a      	str	r2, [r3, #32]
}
 800eace:	bf00      	nop
 800ead0:	371c      	adds	r7, #28
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	40012c00 	.word	0x40012c00
 800eae0:	40013400 	.word	0x40013400
 800eae4:	40015000 	.word	0x40015000
 800eae8:	40014000 	.word	0x40014000
 800eaec:	40014400 	.word	0x40014400
 800eaf0:	40014800 	.word	0x40014800

0800eaf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1b      	ldr	r3, [r3, #32]
 800eb02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eb22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f023 0303 	bic.w	r3, r3, #3
 800eb2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eb40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	021b      	lsls	r3, r3, #8
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4a2b      	ldr	r2, [pc, #172]	; (800ec00 <TIM_OC3_SetConfig+0x10c>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d007      	beq.n	800eb66 <TIM_OC3_SetConfig+0x72>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	4a2a      	ldr	r2, [pc, #168]	; (800ec04 <TIM_OC3_SetConfig+0x110>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d003      	beq.n	800eb66 <TIM_OC3_SetConfig+0x72>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4a29      	ldr	r2, [pc, #164]	; (800ec08 <TIM_OC3_SetConfig+0x114>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d10d      	bne.n	800eb82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	021b      	lsls	r3, r3, #8
 800eb74:	697a      	ldr	r2, [r7, #20]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800eb80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	4a1e      	ldr	r2, [pc, #120]	; (800ec00 <TIM_OC3_SetConfig+0x10c>)
 800eb86:	4293      	cmp	r3, r2
 800eb88:	d013      	beq.n	800ebb2 <TIM_OC3_SetConfig+0xbe>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a1d      	ldr	r2, [pc, #116]	; (800ec04 <TIM_OC3_SetConfig+0x110>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d00f      	beq.n	800ebb2 <TIM_OC3_SetConfig+0xbe>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a1d      	ldr	r2, [pc, #116]	; (800ec0c <TIM_OC3_SetConfig+0x118>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d00b      	beq.n	800ebb2 <TIM_OC3_SetConfig+0xbe>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a1c      	ldr	r2, [pc, #112]	; (800ec10 <TIM_OC3_SetConfig+0x11c>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d007      	beq.n	800ebb2 <TIM_OC3_SetConfig+0xbe>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a1b      	ldr	r2, [pc, #108]	; (800ec14 <TIM_OC3_SetConfig+0x120>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d003      	beq.n	800ebb2 <TIM_OC3_SetConfig+0xbe>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a16      	ldr	r2, [pc, #88]	; (800ec08 <TIM_OC3_SetConfig+0x114>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d113      	bne.n	800ebda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ebc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	695b      	ldr	r3, [r3, #20]
 800ebc6:	011b      	lsls	r3, r3, #4
 800ebc8:	693a      	ldr	r2, [r7, #16]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	699b      	ldr	r3, [r3, #24]
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	693a      	ldr	r2, [r7, #16]
 800ebde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	68fa      	ldr	r2, [r7, #12]
 800ebe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	685a      	ldr	r2, [r3, #4]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	697a      	ldr	r2, [r7, #20]
 800ebf2:	621a      	str	r2, [r3, #32]
}
 800ebf4:	bf00      	nop
 800ebf6:	371c      	adds	r7, #28
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr
 800ec00:	40012c00 	.word	0x40012c00
 800ec04:	40013400 	.word	0x40013400
 800ec08:	40015000 	.word	0x40015000
 800ec0c:	40014000 	.word	0x40014000
 800ec10:	40014400 	.word	0x40014400
 800ec14:	40014800 	.word	0x40014800

0800ec18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b087      	sub	sp, #28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a1b      	ldr	r3, [r3, #32]
 800ec26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a1b      	ldr	r3, [r3, #32]
 800ec32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	69db      	ldr	r3, [r3, #28]
 800ec3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ec4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	021b      	lsls	r3, r3, #8
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4313      	orrs	r3, r2
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ec66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	031b      	lsls	r3, r3, #12
 800ec6e:	697a      	ldr	r2, [r7, #20]
 800ec70:	4313      	orrs	r3, r2
 800ec72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	4a2c      	ldr	r2, [pc, #176]	; (800ed28 <TIM_OC4_SetConfig+0x110>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d007      	beq.n	800ec8c <TIM_OC4_SetConfig+0x74>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	4a2b      	ldr	r2, [pc, #172]	; (800ed2c <TIM_OC4_SetConfig+0x114>)
 800ec80:	4293      	cmp	r3, r2
 800ec82:	d003      	beq.n	800ec8c <TIM_OC4_SetConfig+0x74>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	4a2a      	ldr	r2, [pc, #168]	; (800ed30 <TIM_OC4_SetConfig+0x118>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	d10d      	bne.n	800eca8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ec92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	031b      	lsls	r3, r3, #12
 800ec9a:	697a      	ldr	r2, [r7, #20]
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a1f      	ldr	r2, [pc, #124]	; (800ed28 <TIM_OC4_SetConfig+0x110>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d013      	beq.n	800ecd8 <TIM_OC4_SetConfig+0xc0>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a1e      	ldr	r2, [pc, #120]	; (800ed2c <TIM_OC4_SetConfig+0x114>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d00f      	beq.n	800ecd8 <TIM_OC4_SetConfig+0xc0>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	4a1e      	ldr	r2, [pc, #120]	; (800ed34 <TIM_OC4_SetConfig+0x11c>)
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	d00b      	beq.n	800ecd8 <TIM_OC4_SetConfig+0xc0>
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4a1d      	ldr	r2, [pc, #116]	; (800ed38 <TIM_OC4_SetConfig+0x120>)
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d007      	beq.n	800ecd8 <TIM_OC4_SetConfig+0xc0>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a1c      	ldr	r2, [pc, #112]	; (800ed3c <TIM_OC4_SetConfig+0x124>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d003      	beq.n	800ecd8 <TIM_OC4_SetConfig+0xc0>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <TIM_OC4_SetConfig+0x118>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d113      	bne.n	800ed00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ecd8:	693b      	ldr	r3, [r7, #16]
 800ecda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ecde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ece6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	695b      	ldr	r3, [r3, #20]
 800ecec:	019b      	lsls	r3, r3, #6
 800ecee:	693a      	ldr	r2, [r7, #16]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	699b      	ldr	r3, [r3, #24]
 800ecf8:	019b      	lsls	r3, r3, #6
 800ecfa:	693a      	ldr	r2, [r7, #16]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	693a      	ldr	r2, [r7, #16]
 800ed04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	685a      	ldr	r2, [r3, #4]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	621a      	str	r2, [r3, #32]
}
 800ed1a:	bf00      	nop
 800ed1c:	371c      	adds	r7, #28
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	40012c00 	.word	0x40012c00
 800ed2c:	40013400 	.word	0x40013400
 800ed30:	40015000 	.word	0x40015000
 800ed34:	40014000 	.word	0x40014000
 800ed38:	40014400 	.word	0x40014400
 800ed3c:	40014800 	.word	0x40014800

0800ed40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b087      	sub	sp, #28
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
 800ed48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a1b      	ldr	r3, [r3, #32]
 800ed4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	685b      	ldr	r3, [r3, #4]
 800ed60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ed6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ed84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	041b      	lsls	r3, r3, #16
 800ed8c:	693a      	ldr	r2, [r7, #16]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a19      	ldr	r2, [pc, #100]	; (800edfc <TIM_OC5_SetConfig+0xbc>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d013      	beq.n	800edc2 <TIM_OC5_SetConfig+0x82>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a18      	ldr	r2, [pc, #96]	; (800ee00 <TIM_OC5_SetConfig+0xc0>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d00f      	beq.n	800edc2 <TIM_OC5_SetConfig+0x82>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a17      	ldr	r2, [pc, #92]	; (800ee04 <TIM_OC5_SetConfig+0xc4>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d00b      	beq.n	800edc2 <TIM_OC5_SetConfig+0x82>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a16      	ldr	r2, [pc, #88]	; (800ee08 <TIM_OC5_SetConfig+0xc8>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d007      	beq.n	800edc2 <TIM_OC5_SetConfig+0x82>
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4a15      	ldr	r2, [pc, #84]	; (800ee0c <TIM_OC5_SetConfig+0xcc>)
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d003      	beq.n	800edc2 <TIM_OC5_SetConfig+0x82>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4a14      	ldr	r2, [pc, #80]	; (800ee10 <TIM_OC5_SetConfig+0xd0>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d109      	bne.n	800edd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800edc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	021b      	lsls	r3, r3, #8
 800edd0:	697a      	ldr	r2, [r7, #20]
 800edd2:	4313      	orrs	r3, r2
 800edd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	697a      	ldr	r2, [r7, #20]
 800edda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	68fa      	ldr	r2, [r7, #12]
 800ede0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	693a      	ldr	r2, [r7, #16]
 800edee:	621a      	str	r2, [r3, #32]
}
 800edf0:	bf00      	nop
 800edf2:	371c      	adds	r7, #28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr
 800edfc:	40012c00 	.word	0x40012c00
 800ee00:	40013400 	.word	0x40013400
 800ee04:	40014000 	.word	0x40014000
 800ee08:	40014400 	.word	0x40014400
 800ee0c:	40014800 	.word	0x40014800
 800ee10:	40015000 	.word	0x40015000

0800ee14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ee42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ee46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	021b      	lsls	r3, r3, #8
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	4313      	orrs	r3, r2
 800ee52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ee5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	051b      	lsls	r3, r3, #20
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a1a      	ldr	r2, [pc, #104]	; (800eed4 <TIM_OC6_SetConfig+0xc0>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d013      	beq.n	800ee98 <TIM_OC6_SetConfig+0x84>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a19      	ldr	r2, [pc, #100]	; (800eed8 <TIM_OC6_SetConfig+0xc4>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d00f      	beq.n	800ee98 <TIM_OC6_SetConfig+0x84>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a18      	ldr	r2, [pc, #96]	; (800eedc <TIM_OC6_SetConfig+0xc8>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d00b      	beq.n	800ee98 <TIM_OC6_SetConfig+0x84>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a17      	ldr	r2, [pc, #92]	; (800eee0 <TIM_OC6_SetConfig+0xcc>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d007      	beq.n	800ee98 <TIM_OC6_SetConfig+0x84>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a16      	ldr	r2, [pc, #88]	; (800eee4 <TIM_OC6_SetConfig+0xd0>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d003      	beq.n	800ee98 <TIM_OC6_SetConfig+0x84>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a15      	ldr	r2, [pc, #84]	; (800eee8 <TIM_OC6_SetConfig+0xd4>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d109      	bne.n	800eeac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ee9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	029b      	lsls	r3, r3, #10
 800eea6:	697a      	ldr	r2, [r7, #20]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	697a      	ldr	r2, [r7, #20]
 800eeb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	621a      	str	r2, [r3, #32]
}
 800eec6:	bf00      	nop
 800eec8:	371c      	adds	r7, #28
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	40012c00 	.word	0x40012c00
 800eed8:	40013400 	.word	0x40013400
 800eedc:	40014000 	.word	0x40014000
 800eee0:	40014400 	.word	0x40014400
 800eee4:	40014800 	.word	0x40014800
 800eee8:	40015000 	.word	0x40015000

0800eeec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	f003 031f 	and.w	r3, r3, #31
 800eefe:	2201      	movs	r2, #1
 800ef00:	fa02 f303 	lsl.w	r3, r2, r3
 800ef04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	6a1a      	ldr	r2, [r3, #32]
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	43db      	mvns	r3, r3
 800ef0e:	401a      	ands	r2, r3
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	6a1a      	ldr	r2, [r3, #32]
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	f003 031f 	and.w	r3, r3, #31
 800ef1e:	6879      	ldr	r1, [r7, #4]
 800ef20:	fa01 f303 	lsl.w	r3, r1, r3
 800ef24:	431a      	orrs	r2, r3
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	621a      	str	r2, [r3, #32]
}
 800ef2a:	bf00      	nop
 800ef2c:	371c      	adds	r7, #28
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef34:	4770      	bx	lr
	...

0800ef38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef48:	2b01      	cmp	r3, #1
 800ef4a:	d101      	bne.n	800ef50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	e074      	b.n	800f03a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2201      	movs	r2, #1
 800ef54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	4a34      	ldr	r2, [pc, #208]	; (800f048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d009      	beq.n	800ef8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4a33      	ldr	r2, [pc, #204]	; (800f04c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d004      	beq.n	800ef8e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	4a31      	ldr	r2, [pc, #196]	; (800f050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d108      	bne.n	800efa0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ef94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800efa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	4313      	orrs	r3, r2
 800efb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68fa      	ldr	r2, [r7, #12]
 800efbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	4a21      	ldr	r2, [pc, #132]	; (800f048 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d022      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efd0:	d01d      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	4a1f      	ldr	r2, [pc, #124]	; (800f054 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d018      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	4a1d      	ldr	r2, [pc, #116]	; (800f058 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d013      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	4a1c      	ldr	r2, [pc, #112]	; (800f05c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d00e      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	4a15      	ldr	r2, [pc, #84]	; (800f04c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d009      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a18      	ldr	r2, [pc, #96]	; (800f060 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d004      	beq.n	800f00e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a11      	ldr	r2, [pc, #68]	; (800f050 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d10c      	bne.n	800f028 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	4313      	orrs	r3, r2
 800f01e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68ba      	ldr	r2, [r7, #8]
 800f026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2200      	movs	r2, #0
 800f034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
 800f046:	bf00      	nop
 800f048:	40012c00 	.word	0x40012c00
 800f04c:	40013400 	.word	0x40013400
 800f050:	40015000 	.word	0x40015000
 800f054:	40000400 	.word	0x40000400
 800f058:	40000800 	.word	0x40000800
 800f05c:	40000c00 	.word	0x40000c00
 800f060:	40014000 	.word	0x40014000

0800f064 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f06c:	bf00      	nop
 800f06e:	370c      	adds	r7, #12
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f078:	b480      	push	{r7}
 800f07a:	b083      	sub	sp, #12
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f080:	bf00      	nop
 800f082:	370c      	adds	r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08a:	4770      	bx	lr

0800f08c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f094:	bf00      	nop
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f0a8:	bf00      	nop
 800f0aa:	370c      	adds	r7, #12
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b2:	4770      	bx	lr

0800f0b4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f0bc:	bf00      	nop
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f0c8:	b480      	push	{r7}
 800f0ca:	b083      	sub	sp, #12
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f0d0:	bf00      	nop
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ee:	4770      	bx	lr

0800f0f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b082      	sub	sp, #8
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d101      	bne.n	800f102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f0fe:	2301      	movs	r3, #1
 800f100:	e042      	b.n	800f188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d106      	bne.n	800f11a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f7f9 f8ad 	bl	8008274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2224      	movs	r2, #36	; 0x24
 800f11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f022 0201 	bic.w	r2, r2, #1
 800f130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fd2e 	bl	800fb94 <UART_SetConfig>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d101      	bne.n	800f142 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f13e:	2301      	movs	r3, #1
 800f140:	e022      	b.n	800f188 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f146:	2b00      	cmp	r3, #0
 800f148:	d002      	beq.n	800f150 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f001 f81e 	bl	801018c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	685a      	ldr	r2, [r3, #4]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f15e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	689a      	ldr	r2, [r3, #8]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f16e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f042 0201 	orr.w	r2, r2, #1
 800f17e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f001 f8a5 	bl	80102d0 <UART_CheckIdleState>
 800f186:	4603      	mov	r3, r0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b08a      	sub	sp, #40	; 0x28
 800f194:	af02      	add	r7, sp, #8
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	603b      	str	r3, [r7, #0]
 800f19c:	4613      	mov	r3, r2
 800f19e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1a6:	2b20      	cmp	r3, #32
 800f1a8:	f040 8083 	bne.w	800f2b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d002      	beq.n	800f1b8 <HAL_UART_Transmit+0x28>
 800f1b2:	88fb      	ldrh	r3, [r7, #6]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d101      	bne.n	800f1bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e07b      	b.n	800f2b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d101      	bne.n	800f1ca <HAL_UART_Transmit+0x3a>
 800f1c6:	2302      	movs	r3, #2
 800f1c8:	e074      	b.n	800f2b4 <HAL_UART_Transmit+0x124>
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2221      	movs	r2, #33	; 0x21
 800f1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f1e2:	f7f9 f95f 	bl	80084a4 <HAL_GetTick>
 800f1e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	88fa      	ldrh	r2, [r7, #6]
 800f1ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	88fa      	ldrh	r2, [r7, #6]
 800f1f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f200:	d108      	bne.n	800f214 <HAL_UART_Transmit+0x84>
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d104      	bne.n	800f214 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800f20a:	2300      	movs	r3, #0
 800f20c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	61bb      	str	r3, [r7, #24]
 800f212:	e003      	b.n	800f21c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f218:	2300      	movs	r3, #0
 800f21a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2200      	movs	r2, #0
 800f220:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800f224:	e02c      	b.n	800f280 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2200      	movs	r2, #0
 800f22e:	2180      	movs	r1, #128	; 0x80
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f001 f898 	bl	8010366 <UART_WaitOnFlagUntilTimeout>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800f23c:	2303      	movs	r3, #3
 800f23e:	e039      	b.n	800f2b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10b      	bne.n	800f25e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	461a      	mov	r2, r3
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f254:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f256:	69bb      	ldr	r3, [r7, #24]
 800f258:	3302      	adds	r3, #2
 800f25a:	61bb      	str	r3, [r7, #24]
 800f25c:	e007      	b.n	800f26e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	781a      	ldrb	r2, [r3, #0]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	3301      	adds	r3, #1
 800f26c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f274:	b29b      	uxth	r3, r3
 800f276:	3b01      	subs	r3, #1
 800f278:	b29a      	uxth	r2, r3
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800f286:	b29b      	uxth	r3, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d1cc      	bne.n	800f226 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	9300      	str	r3, [sp, #0]
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	2200      	movs	r2, #0
 800f294:	2140      	movs	r1, #64	; 0x40
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f001 f865 	bl	8010366 <UART_WaitOnFlagUntilTimeout>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d001      	beq.n	800f2a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	e006      	b.n	800f2b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2220      	movs	r2, #32
 800f2aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	e000      	b.n	800f2b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800f2b2:	2302      	movs	r3, #2
  }
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3720      	adds	r7, #32
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08a      	sub	sp, #40	; 0x28
 800f2c0:	af02      	add	r7, sp, #8
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f2d2:	2b20      	cmp	r3, #32
 800f2d4:	f040 80c0 	bne.w	800f458 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d002      	beq.n	800f2e4 <HAL_UART_Receive+0x28>
 800f2de:	88fb      	ldrh	r3, [r7, #6]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f2e4:	2301      	movs	r3, #1
 800f2e6:	e0b8      	b.n	800f45a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d101      	bne.n	800f2f6 <HAL_UART_Receive+0x3a>
 800f2f2:	2302      	movs	r3, #2
 800f2f4:	e0b1      	b.n	800f45a <HAL_UART_Receive+0x19e>
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	2201      	movs	r2, #1
 800f2fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2200      	movs	r2, #0
 800f302:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2222      	movs	r2, #34	; 0x22
 800f30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2200      	movs	r2, #0
 800f312:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f314:	f7f9 f8c6 	bl	80084a4 <HAL_GetTick>
 800f318:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	88fa      	ldrh	r2, [r7, #6]
 800f31e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	88fa      	ldrh	r2, [r7, #6]
 800f326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f332:	d10e      	bne.n	800f352 <HAL_UART_Receive+0x96>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d105      	bne.n	800f348 <HAL_UART_Receive+0x8c>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f342:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f346:	e02d      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	22ff      	movs	r2, #255	; 0xff
 800f34c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f350:	e028      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d10d      	bne.n	800f376 <HAL_UART_Receive+0xba>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	691b      	ldr	r3, [r3, #16]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d104      	bne.n	800f36c <HAL_UART_Receive+0xb0>
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	22ff      	movs	r2, #255	; 0xff
 800f366:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f36a:	e01b      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	227f      	movs	r2, #127	; 0x7f
 800f370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f374:	e016      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f37e:	d10d      	bne.n	800f39c <HAL_UART_Receive+0xe0>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	691b      	ldr	r3, [r3, #16]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d104      	bne.n	800f392 <HAL_UART_Receive+0xd6>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	227f      	movs	r2, #127	; 0x7f
 800f38c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f390:	e008      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	223f      	movs	r2, #63	; 0x3f
 800f396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f39a:	e003      	b.n	800f3a4 <HAL_UART_Receive+0xe8>
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f3aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	689b      	ldr	r3, [r3, #8]
 800f3b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3b4:	d108      	bne.n	800f3c8 <HAL_UART_Receive+0x10c>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d104      	bne.n	800f3c8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	61bb      	str	r3, [r7, #24]
 800f3c6:	e003      	b.n	800f3d0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f3d8:	e032      	b.n	800f440 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2120      	movs	r1, #32
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 ffbe 	bl	8010366 <UART_WaitOnFlagUntilTimeout>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d001      	beq.n	800f3f4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800f3f0:	2303      	movs	r3, #3
 800f3f2:	e032      	b.n	800f45a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d10c      	bne.n	800f414 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f400:	b29a      	uxth	r2, r3
 800f402:	8a7b      	ldrh	r3, [r7, #18]
 800f404:	4013      	ands	r3, r2
 800f406:	b29a      	uxth	r2, r3
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	3302      	adds	r3, #2
 800f410:	61bb      	str	r3, [r7, #24]
 800f412:	e00c      	b.n	800f42e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	8a7b      	ldrh	r3, [r7, #18]
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	4013      	ands	r3, r2
 800f422:	b2da      	uxtb	r2, r3
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	3301      	adds	r3, #1
 800f42c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f434:	b29b      	uxth	r3, r3
 800f436:	3b01      	subs	r3, #1
 800f438:	b29a      	uxth	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f446:	b29b      	uxth	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1c6      	bne.n	800f3da <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2220      	movs	r2, #32
 800f450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800f454:	2300      	movs	r3, #0
 800f456:	e000      	b.n	800f45a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800f458:	2302      	movs	r3, #2
  }
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
	...

0800f464 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	4613      	mov	r3, r2
 800f470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f478:	2b20      	cmp	r3, #32
 800f47a:	d142      	bne.n	800f502 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d002      	beq.n	800f488 <HAL_UART_Receive_IT+0x24>
 800f482:	88fb      	ldrh	r3, [r7, #6]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d101      	bne.n	800f48c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f488:	2301      	movs	r3, #1
 800f48a:	e03b      	b.n	800f504 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f492:	2b01      	cmp	r3, #1
 800f494:	d101      	bne.n	800f49a <HAL_UART_Receive_IT+0x36>
 800f496:	2302      	movs	r3, #2
 800f498:	e034      	b.n	800f504 <HAL_UART_Receive_IT+0xa0>
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a17      	ldr	r2, [pc, #92]	; (800f50c <HAL_UART_Receive_IT+0xa8>)
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d01f      	beq.n	800f4f2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d018      	beq.n	800f4f2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	e853 3f00 	ldrex	r3, [r3]
 800f4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4de:	623b      	str	r3, [r7, #32]
 800f4e0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e2:	69f9      	ldr	r1, [r7, #28]
 800f4e4:	6a3a      	ldr	r2, [r7, #32]
 800f4e6:	e841 2300 	strex	r3, r2, [r1]
 800f4ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1e6      	bne.n	800f4c0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	68b9      	ldr	r1, [r7, #8]
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f000 fffd 	bl	80104f8 <UART_Start_Receive_IT>
 800f4fe:	4603      	mov	r3, r0
 800f500:	e000      	b.n	800f504 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f502:	2302      	movs	r3, #2
  }
}
 800f504:	4618      	mov	r0, r3
 800f506:	3728      	adds	r7, #40	; 0x28
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	40008000 	.word	0x40008000

0800f510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b0ba      	sub	sp, #232	; 0xe8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	69db      	ldr	r3, [r3, #28]
 800f51e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	689b      	ldr	r3, [r3, #8]
 800f532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f53a:	f640 030f 	movw	r3, #2063	; 0x80f
 800f53e:	4013      	ands	r3, r2
 800f540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d11b      	bne.n	800f584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f54c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f550:	f003 0320 	and.w	r3, r3, #32
 800f554:	2b00      	cmp	r3, #0
 800f556:	d015      	beq.n	800f584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f55c:	f003 0320 	and.w	r3, r3, #32
 800f560:	2b00      	cmp	r3, #0
 800f562:	d105      	bne.n	800f570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f574:	2b00      	cmp	r3, #0
 800f576:	f000 82d6 	beq.w	800fb26 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	4798      	blx	r3
      }
      return;
 800f582:	e2d0      	b.n	800fb26 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f588:	2b00      	cmp	r3, #0
 800f58a:	f000 811f 	beq.w	800f7cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f58e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f592:	4b8b      	ldr	r3, [pc, #556]	; (800f7c0 <HAL_UART_IRQHandler+0x2b0>)
 800f594:	4013      	ands	r3, r2
 800f596:	2b00      	cmp	r3, #0
 800f598:	d106      	bne.n	800f5a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f59a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f59e:	4b89      	ldr	r3, [pc, #548]	; (800f7c4 <HAL_UART_IRQHandler+0x2b4>)
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f000 8112 	beq.w	800f7cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d011      	beq.n	800f5d8 <HAL_UART_IRQHandler+0xc8>
 800f5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ce:	f043 0201 	orr.w	r2, r3, #1
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5dc:	f003 0302 	and.w	r3, r3, #2
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d011      	beq.n	800f608 <HAL_UART_IRQHandler+0xf8>
 800f5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5e8:	f003 0301 	and.w	r3, r3, #1
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00b      	beq.n	800f608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5fe:	f043 0204 	orr.w	r2, r3, #4
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f60c:	f003 0304 	and.w	r3, r3, #4
 800f610:	2b00      	cmp	r3, #0
 800f612:	d011      	beq.n	800f638 <HAL_UART_IRQHandler+0x128>
 800f614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d00b      	beq.n	800f638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2204      	movs	r2, #4
 800f626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f62e:	f043 0202 	orr.w	r2, r3, #2
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f63c:	f003 0308 	and.w	r3, r3, #8
 800f640:	2b00      	cmp	r3, #0
 800f642:	d017      	beq.n	800f674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f648:	f003 0320 	and.w	r3, r3, #32
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d105      	bne.n	800f65c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f654:	4b5a      	ldr	r3, [pc, #360]	; (800f7c0 <HAL_UART_IRQHandler+0x2b0>)
 800f656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d00b      	beq.n	800f674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2208      	movs	r2, #8
 800f662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f66a:	f043 0208 	orr.w	r2, r3, #8
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d012      	beq.n	800f6a6 <HAL_UART_IRQHandler+0x196>
 800f680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00c      	beq.n	800f6a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f69c:	f043 0220 	orr.w	r2, r3, #32
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	f000 823c 	beq.w	800fb2a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f6b6:	f003 0320 	and.w	r3, r3, #32
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d013      	beq.n	800f6e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f6c2:	f003 0320 	and.w	r3, r3, #32
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d105      	bne.n	800f6d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f6ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f6ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d007      	beq.n	800f6e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d003      	beq.n	800f6e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	689b      	ldr	r3, [r3, #8]
 800f6f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6fa:	2b40      	cmp	r3, #64	; 0x40
 800f6fc:	d005      	beq.n	800f70a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f6fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f706:	2b00      	cmp	r3, #0
 800f708:	d04f      	beq.n	800f7aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	f001 f81e 	bl	801074c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f71a:	2b40      	cmp	r3, #64	; 0x40
 800f71c:	d141      	bne.n	800f7a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	3308      	adds	r3, #8
 800f724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f72c:	e853 3f00 	ldrex	r3, [r3]
 800f730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f73c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3308      	adds	r3, #8
 800f746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f74a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f74e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f75a:	e841 2300 	strex	r3, r2, [r1]
 800f75e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d1d9      	bne.n	800f71e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d013      	beq.n	800f79a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f776:	4a14      	ldr	r2, [pc, #80]	; (800f7c8 <HAL_UART_IRQHandler+0x2b8>)
 800f778:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fa fb26 	bl	8009dd0 <HAL_DMA_Abort_IT>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d017      	beq.n	800f7ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f794:	4610      	mov	r0, r2
 800f796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f798:	e00f      	b.n	800f7ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f9e4 	bl	800fb68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a0:	e00b      	b.n	800f7ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 f9e0 	bl	800fb68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7a8:	e007      	b.n	800f7ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f000 f9dc 	bl	800fb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f7b8:	e1b7      	b.n	800fb2a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7ba:	bf00      	nop
    return;
 800f7bc:	e1b5      	b.n	800fb2a <HAL_UART_IRQHandler+0x61a>
 800f7be:	bf00      	nop
 800f7c0:	10000001 	.word	0x10000001
 800f7c4:	04000120 	.word	0x04000120
 800f7c8:	08010819 	.word	0x08010819

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	f040 814a 	bne.w	800fa6a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f7da:	f003 0310 	and.w	r3, r3, #16
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	f000 8143 	beq.w	800fa6a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f7e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f7e8:	f003 0310 	and.w	r3, r3, #16
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 813c 	beq.w	800fa6a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2210      	movs	r2, #16
 800f7f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f804:	2b40      	cmp	r3, #64	; 0x40
 800f806:	f040 80b5 	bne.w	800f974 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f816:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 8187 	beq.w	800fb2e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f82a:	429a      	cmp	r2, r3
 800f82c:	f080 817f 	bcs.w	800fb2e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f836:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f003 0320 	and.w	r3, r3, #32
 800f846:	2b00      	cmp	r3, #0
 800f848:	f040 8086 	bne.w	800f958 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f854:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f860:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f868:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	461a      	mov	r2, r3
 800f872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f876:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f87a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f87e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f882:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f886:	e841 2300 	strex	r3, r2, [r1]
 800f88a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f88e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f892:	2b00      	cmp	r3, #0
 800f894:	d1da      	bne.n	800f84c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	3308      	adds	r3, #8
 800f89c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8a0:	e853 3f00 	ldrex	r3, [r3]
 800f8a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f8a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8a8:	f023 0301 	bic.w	r3, r3, #1
 800f8ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	3308      	adds	r3, #8
 800f8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f8ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f8be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f8c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f8cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e1      	bne.n	800f896 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f8e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	3308      	adds	r3, #8
 800f8f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f8f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f8f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f8fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f8fe:	e841 2300 	strex	r3, r2, [r1]
 800f902:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1e3      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f920:	e853 3f00 	ldrex	r3, [r3]
 800f924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f928:	f023 0310 	bic.w	r3, r3, #16
 800f92c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	461a      	mov	r2, r3
 800f936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f93a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f93c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f942:	e841 2300 	strex	r3, r2, [r1]
 800f946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e4      	bne.n	800f918 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f952:	4618      	mov	r0, r3
 800f954:	f7fa f9e3 	bl	8009d1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f964:	b29b      	uxth	r3, r3
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	b29b      	uxth	r3, r3
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f000 f905 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f972:	e0dc      	b.n	800fb2e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f980:	b29b      	uxth	r3, r3
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f98e:	b29b      	uxth	r3, r3
 800f990:	2b00      	cmp	r3, #0
 800f992:	f000 80ce 	beq.w	800fb32 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800f996:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 80c9 	beq.w	800fb32 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a8:	e853 3f00 	ldrex	r3, [r3]
 800f9ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f9b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	461a      	mov	r2, r3
 800f9be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f9c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f9c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f9c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f9ca:	e841 2300 	strex	r3, r2, [r1]
 800f9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1e4      	bne.n	800f9a0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3308      	adds	r3, #8
 800f9dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	e853 3f00 	ldrex	r3, [r3]
 800f9e4:	623b      	str	r3, [r7, #32]
   return(result);
 800f9e6:	6a3b      	ldr	r3, [r7, #32]
 800f9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f9ec:	f023 0301 	bic.w	r3, r3, #1
 800f9f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	3308      	adds	r3, #8
 800f9fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f9fe:	633a      	str	r2, [r7, #48]	; 0x30
 800fa00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa06:	e841 2300 	strex	r3, r2, [r1]
 800fa0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1e1      	bne.n	800f9d6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2220      	movs	r2, #32
 800fa16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2200      	movs	r2, #0
 800fa24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	e853 3f00 	ldrex	r3, [r3]
 800fa32:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	f023 0310 	bic.w	r3, r3, #16
 800fa3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	461a      	mov	r2, r3
 800fa44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fa48:	61fb      	str	r3, [r7, #28]
 800fa4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa4c:	69b9      	ldr	r1, [r7, #24]
 800fa4e:	69fa      	ldr	r2, [r7, #28]
 800fa50:	e841 2300 	strex	r3, r2, [r1]
 800fa54:	617b      	str	r3, [r7, #20]
   return(result);
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d1e4      	bne.n	800fa26 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fa60:	4619      	mov	r1, r3
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f000 f88a 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fa68:	e063      	b.n	800fb32 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fa6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00e      	beq.n	800fa94 <HAL_UART_IRQHandler+0x584>
 800fa76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d008      	beq.n	800fa94 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fa8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	f001 fb61 	bl	8011154 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fa92:	e051      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fa94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d014      	beq.n	800faca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800faa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d105      	bne.n	800fab8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800faac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d008      	beq.n	800faca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d03a      	beq.n	800fb36 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	4798      	blx	r3
    }
    return;
 800fac8:	e035      	b.n	800fb36 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800faca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800face:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d009      	beq.n	800faea <HAL_UART_IRQHandler+0x5da>
 800fad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d003      	beq.n	800faea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 feae 	bl	8010844 <UART_EndTransmit_IT>
    return;
 800fae8:	e026      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800faea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d009      	beq.n	800fb0a <HAL_UART_IRQHandler+0x5fa>
 800faf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fafa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d003      	beq.n	800fb0a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f001 fb3a 	bl	801117c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb08:	e016      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d010      	beq.n	800fb38 <HAL_UART_IRQHandler+0x628>
 800fb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	da0c      	bge.n	800fb38 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fb1e:	6878      	ldr	r0, [r7, #4]
 800fb20:	f001 fb22 	bl	8011168 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb24:	e008      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
      return;
 800fb26:	bf00      	nop
 800fb28:	e006      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
    return;
 800fb2a:	bf00      	nop
 800fb2c:	e004      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
      return;
 800fb2e:	bf00      	nop
 800fb30:	e002      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
      return;
 800fb32:	bf00      	nop
 800fb34:	e000      	b.n	800fb38 <HAL_UART_IRQHandler+0x628>
    return;
 800fb36:	bf00      	nop
  }
}
 800fb38:	37e8      	adds	r7, #232	; 0xe8
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	bd80      	pop	{r7, pc}
 800fb3e:	bf00      	nop

0800fb40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fb48:	bf00      	nop
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fb70:	bf00      	nop
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	460b      	mov	r3, r1
 800fb86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fb88:	bf00      	nop
 800fb8a:	370c      	adds	r7, #12
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fb94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fb98:	b08c      	sub	sp, #48	; 0x30
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	689a      	ldr	r2, [r3, #8]
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	431a      	orrs	r2, r3
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	695b      	ldr	r3, [r3, #20]
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	69db      	ldr	r3, [r3, #28]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	681a      	ldr	r2, [r3, #0]
 800fbc2:	4baa      	ldr	r3, [pc, #680]	; (800fe6c <UART_SetConfig+0x2d8>)
 800fbc4:	4013      	ands	r3, r2
 800fbc6:	697a      	ldr	r2, [r7, #20]
 800fbc8:	6812      	ldr	r2, [r2, #0]
 800fbca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbcc:	430b      	orrs	r3, r1
 800fbce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	68da      	ldr	r2, [r3, #12]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	430a      	orrs	r2, r1
 800fbe4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	699b      	ldr	r3, [r3, #24]
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a9f      	ldr	r2, [pc, #636]	; (800fe70 <UART_SetConfig+0x2dc>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d004      	beq.n	800fc00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	6a1b      	ldr	r3, [r3, #32]
 800fbfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	689b      	ldr	r3, [r3, #8]
 800fc06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800fc0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800fc0e:	697a      	ldr	r2, [r7, #20]
 800fc10:	6812      	ldr	r2, [r2, #0]
 800fc12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fc14:	430b      	orrs	r3, r1
 800fc16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc1e:	f023 010f 	bic.w	r1, r3, #15
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	430a      	orrs	r2, r1
 800fc2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a90      	ldr	r2, [pc, #576]	; (800fe74 <UART_SetConfig+0x2e0>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d125      	bne.n	800fc84 <UART_SetConfig+0xf0>
 800fc38:	4b8f      	ldr	r3, [pc, #572]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc3e:	f003 0303 	and.w	r3, r3, #3
 800fc42:	2b03      	cmp	r3, #3
 800fc44:	d81a      	bhi.n	800fc7c <UART_SetConfig+0xe8>
 800fc46:	a201      	add	r2, pc, #4	; (adr r2, 800fc4c <UART_SetConfig+0xb8>)
 800fc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc4c:	0800fc5d 	.word	0x0800fc5d
 800fc50:	0800fc6d 	.word	0x0800fc6d
 800fc54:	0800fc65 	.word	0x0800fc65
 800fc58:	0800fc75 	.word	0x0800fc75
 800fc5c:	2301      	movs	r3, #1
 800fc5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc62:	e116      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fc64:	2302      	movs	r3, #2
 800fc66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc6a:	e112      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fc6c:	2304      	movs	r3, #4
 800fc6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc72:	e10e      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fc74:	2308      	movs	r3, #8
 800fc76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc7a:	e10a      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fc7c:	2310      	movs	r3, #16
 800fc7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fc82:	e106      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a7c      	ldr	r2, [pc, #496]	; (800fe7c <UART_SetConfig+0x2e8>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d138      	bne.n	800fd00 <UART_SetConfig+0x16c>
 800fc8e:	4b7a      	ldr	r3, [pc, #488]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fc90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc94:	f003 030c 	and.w	r3, r3, #12
 800fc98:	2b0c      	cmp	r3, #12
 800fc9a:	d82d      	bhi.n	800fcf8 <UART_SetConfig+0x164>
 800fc9c:	a201      	add	r2, pc, #4	; (adr r2, 800fca4 <UART_SetConfig+0x110>)
 800fc9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca2:	bf00      	nop
 800fca4:	0800fcd9 	.word	0x0800fcd9
 800fca8:	0800fcf9 	.word	0x0800fcf9
 800fcac:	0800fcf9 	.word	0x0800fcf9
 800fcb0:	0800fcf9 	.word	0x0800fcf9
 800fcb4:	0800fce9 	.word	0x0800fce9
 800fcb8:	0800fcf9 	.word	0x0800fcf9
 800fcbc:	0800fcf9 	.word	0x0800fcf9
 800fcc0:	0800fcf9 	.word	0x0800fcf9
 800fcc4:	0800fce1 	.word	0x0800fce1
 800fcc8:	0800fcf9 	.word	0x0800fcf9
 800fccc:	0800fcf9 	.word	0x0800fcf9
 800fcd0:	0800fcf9 	.word	0x0800fcf9
 800fcd4:	0800fcf1 	.word	0x0800fcf1
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcde:	e0d8      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fce0:	2302      	movs	r3, #2
 800fce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fce6:	e0d4      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fce8:	2304      	movs	r3, #4
 800fcea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcee:	e0d0      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fcf0:	2308      	movs	r3, #8
 800fcf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcf6:	e0cc      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fcf8:	2310      	movs	r3, #16
 800fcfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fcfe:	e0c8      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	4a5e      	ldr	r2, [pc, #376]	; (800fe80 <UART_SetConfig+0x2ec>)
 800fd06:	4293      	cmp	r3, r2
 800fd08:	d125      	bne.n	800fd56 <UART_SetConfig+0x1c2>
 800fd0a:	4b5b      	ldr	r3, [pc, #364]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fd0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800fd14:	2b30      	cmp	r3, #48	; 0x30
 800fd16:	d016      	beq.n	800fd46 <UART_SetConfig+0x1b2>
 800fd18:	2b30      	cmp	r3, #48	; 0x30
 800fd1a:	d818      	bhi.n	800fd4e <UART_SetConfig+0x1ba>
 800fd1c:	2b20      	cmp	r3, #32
 800fd1e:	d00a      	beq.n	800fd36 <UART_SetConfig+0x1a2>
 800fd20:	2b20      	cmp	r3, #32
 800fd22:	d814      	bhi.n	800fd4e <UART_SetConfig+0x1ba>
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d002      	beq.n	800fd2e <UART_SetConfig+0x19a>
 800fd28:	2b10      	cmp	r3, #16
 800fd2a:	d008      	beq.n	800fd3e <UART_SetConfig+0x1aa>
 800fd2c:	e00f      	b.n	800fd4e <UART_SetConfig+0x1ba>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd34:	e0ad      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd36:	2302      	movs	r3, #2
 800fd38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd3c:	e0a9      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd3e:	2304      	movs	r3, #4
 800fd40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd44:	e0a5      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd46:	2308      	movs	r3, #8
 800fd48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd4c:	e0a1      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd4e:	2310      	movs	r3, #16
 800fd50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd54:	e09d      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a4a      	ldr	r2, [pc, #296]	; (800fe84 <UART_SetConfig+0x2f0>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d125      	bne.n	800fdac <UART_SetConfig+0x218>
 800fd60:	4b45      	ldr	r3, [pc, #276]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fd62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fd6a:	2bc0      	cmp	r3, #192	; 0xc0
 800fd6c:	d016      	beq.n	800fd9c <UART_SetConfig+0x208>
 800fd6e:	2bc0      	cmp	r3, #192	; 0xc0
 800fd70:	d818      	bhi.n	800fda4 <UART_SetConfig+0x210>
 800fd72:	2b80      	cmp	r3, #128	; 0x80
 800fd74:	d00a      	beq.n	800fd8c <UART_SetConfig+0x1f8>
 800fd76:	2b80      	cmp	r3, #128	; 0x80
 800fd78:	d814      	bhi.n	800fda4 <UART_SetConfig+0x210>
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d002      	beq.n	800fd84 <UART_SetConfig+0x1f0>
 800fd7e:	2b40      	cmp	r3, #64	; 0x40
 800fd80:	d008      	beq.n	800fd94 <UART_SetConfig+0x200>
 800fd82:	e00f      	b.n	800fda4 <UART_SetConfig+0x210>
 800fd84:	2300      	movs	r3, #0
 800fd86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd8a:	e082      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd8c:	2302      	movs	r3, #2
 800fd8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd92:	e07e      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd94:	2304      	movs	r3, #4
 800fd96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fd9a:	e07a      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fd9c:	2308      	movs	r3, #8
 800fd9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fda2:	e076      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fda4:	2310      	movs	r3, #16
 800fda6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdaa:	e072      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a35      	ldr	r2, [pc, #212]	; (800fe88 <UART_SetConfig+0x2f4>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d12a      	bne.n	800fe0c <UART_SetConfig+0x278>
 800fdb6:	4b30      	ldr	r3, [pc, #192]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fdbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fdc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdc4:	d01a      	beq.n	800fdfc <UART_SetConfig+0x268>
 800fdc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fdca:	d81b      	bhi.n	800fe04 <UART_SetConfig+0x270>
 800fdcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdd0:	d00c      	beq.n	800fdec <UART_SetConfig+0x258>
 800fdd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdd6:	d815      	bhi.n	800fe04 <UART_SetConfig+0x270>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d003      	beq.n	800fde4 <UART_SetConfig+0x250>
 800fddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fde0:	d008      	beq.n	800fdf4 <UART_SetConfig+0x260>
 800fde2:	e00f      	b.n	800fe04 <UART_SetConfig+0x270>
 800fde4:	2300      	movs	r3, #0
 800fde6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdea:	e052      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fdec:	2302      	movs	r3, #2
 800fdee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdf2:	e04e      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fdf4:	2304      	movs	r3, #4
 800fdf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fdfa:	e04a      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fdfc:	2308      	movs	r3, #8
 800fdfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe02:	e046      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe04:	2310      	movs	r3, #16
 800fe06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe0a:	e042      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	4a17      	ldr	r2, [pc, #92]	; (800fe70 <UART_SetConfig+0x2dc>)
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d13a      	bne.n	800fe8c <UART_SetConfig+0x2f8>
 800fe16:	4b18      	ldr	r3, [pc, #96]	; (800fe78 <UART_SetConfig+0x2e4>)
 800fe18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fe20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fe24:	d01a      	beq.n	800fe5c <UART_SetConfig+0x2c8>
 800fe26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fe2a:	d81b      	bhi.n	800fe64 <UART_SetConfig+0x2d0>
 800fe2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe30:	d00c      	beq.n	800fe4c <UART_SetConfig+0x2b8>
 800fe32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fe36:	d815      	bhi.n	800fe64 <UART_SetConfig+0x2d0>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d003      	beq.n	800fe44 <UART_SetConfig+0x2b0>
 800fe3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe40:	d008      	beq.n	800fe54 <UART_SetConfig+0x2c0>
 800fe42:	e00f      	b.n	800fe64 <UART_SetConfig+0x2d0>
 800fe44:	2300      	movs	r3, #0
 800fe46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe4a:	e022      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe52:	e01e      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe54:	2304      	movs	r3, #4
 800fe56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe5a:	e01a      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe5c:	2308      	movs	r3, #8
 800fe5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe62:	e016      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe64:	2310      	movs	r3, #16
 800fe66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800fe6a:	e012      	b.n	800fe92 <UART_SetConfig+0x2fe>
 800fe6c:	cfff69f3 	.word	0xcfff69f3
 800fe70:	40008000 	.word	0x40008000
 800fe74:	40013800 	.word	0x40013800
 800fe78:	40021000 	.word	0x40021000
 800fe7c:	40004400 	.word	0x40004400
 800fe80:	40004800 	.word	0x40004800
 800fe84:	40004c00 	.word	0x40004c00
 800fe88:	40005000 	.word	0x40005000
 800fe8c:	2310      	movs	r3, #16
 800fe8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4aae      	ldr	r2, [pc, #696]	; (8010150 <UART_SetConfig+0x5bc>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	f040 8097 	bne.w	800ffcc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fea2:	2b08      	cmp	r3, #8
 800fea4:	d823      	bhi.n	800feee <UART_SetConfig+0x35a>
 800fea6:	a201      	add	r2, pc, #4	; (adr r2, 800feac <UART_SetConfig+0x318>)
 800fea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800feac:	0800fed1 	.word	0x0800fed1
 800feb0:	0800feef 	.word	0x0800feef
 800feb4:	0800fed9 	.word	0x0800fed9
 800feb8:	0800feef 	.word	0x0800feef
 800febc:	0800fedf 	.word	0x0800fedf
 800fec0:	0800feef 	.word	0x0800feef
 800fec4:	0800feef 	.word	0x0800feef
 800fec8:	0800feef 	.word	0x0800feef
 800fecc:	0800fee7 	.word	0x0800fee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fed0:	f7fd fb9e 	bl	800d610 <HAL_RCC_GetPCLK1Freq>
 800fed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fed6:	e010      	b.n	800fefa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fed8:	4b9e      	ldr	r3, [pc, #632]	; (8010154 <UART_SetConfig+0x5c0>)
 800feda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800fedc:	e00d      	b.n	800fefa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fede:	f7fd fb29 	bl	800d534 <HAL_RCC_GetSysClockFreq>
 800fee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800fee4:	e009      	b.n	800fefa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800feea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800feec:	e005      	b.n	800fefa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800feee:	2300      	movs	r3, #0
 800fef0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800fef2:	2301      	movs	r3, #1
 800fef4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800fef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 8130 	beq.w	8010162 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff06:	4a94      	ldr	r2, [pc, #592]	; (8010158 <UART_SetConfig+0x5c4>)
 800ff08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	685a      	ldr	r2, [r3, #4]
 800ff1a:	4613      	mov	r3, r2
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	4413      	add	r3, r2
 800ff20:	69ba      	ldr	r2, [r7, #24]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d305      	bcc.n	800ff32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff2c:	69ba      	ldr	r2, [r7, #24]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d903      	bls.n	800ff3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ff32:	2301      	movs	r3, #1
 800ff34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ff38:	e113      	b.n	8010162 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	60bb      	str	r3, [r7, #8]
 800ff40:	60fa      	str	r2, [r7, #12]
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff46:	4a84      	ldr	r2, [pc, #528]	; (8010158 <UART_SetConfig+0x5c4>)
 800ff48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	2200      	movs	r2, #0
 800ff50:	603b      	str	r3, [r7, #0]
 800ff52:	607a      	str	r2, [r7, #4]
 800ff54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff5c:	f7f4 fe2e 	bl	8004bbc <__aeabi_uldivmod>
 800ff60:	4602      	mov	r2, r0
 800ff62:	460b      	mov	r3, r1
 800ff64:	4610      	mov	r0, r2
 800ff66:	4619      	mov	r1, r3
 800ff68:	f04f 0200 	mov.w	r2, #0
 800ff6c:	f04f 0300 	mov.w	r3, #0
 800ff70:	020b      	lsls	r3, r1, #8
 800ff72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ff76:	0202      	lsls	r2, r0, #8
 800ff78:	6979      	ldr	r1, [r7, #20]
 800ff7a:	6849      	ldr	r1, [r1, #4]
 800ff7c:	0849      	lsrs	r1, r1, #1
 800ff7e:	2000      	movs	r0, #0
 800ff80:	460c      	mov	r4, r1
 800ff82:	4605      	mov	r5, r0
 800ff84:	eb12 0804 	adds.w	r8, r2, r4
 800ff88:	eb43 0905 	adc.w	r9, r3, r5
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	2200      	movs	r2, #0
 800ff92:	469a      	mov	sl, r3
 800ff94:	4693      	mov	fp, r2
 800ff96:	4652      	mov	r2, sl
 800ff98:	465b      	mov	r3, fp
 800ff9a:	4640      	mov	r0, r8
 800ff9c:	4649      	mov	r1, r9
 800ff9e:	f7f4 fe0d 	bl	8004bbc <__aeabi_uldivmod>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ffaa:	6a3b      	ldr	r3, [r7, #32]
 800ffac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffb0:	d308      	bcc.n	800ffc4 <UART_SetConfig+0x430>
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ffb8:	d204      	bcs.n	800ffc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	6a3a      	ldr	r2, [r7, #32]
 800ffc0:	60da      	str	r2, [r3, #12]
 800ffc2:	e0ce      	b.n	8010162 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ffca:	e0ca      	b.n	8010162 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	69db      	ldr	r3, [r3, #28]
 800ffd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ffd4:	d166      	bne.n	80100a4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ffd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffda:	2b08      	cmp	r3, #8
 800ffdc:	d827      	bhi.n	801002e <UART_SetConfig+0x49a>
 800ffde:	a201      	add	r2, pc, #4	; (adr r2, 800ffe4 <UART_SetConfig+0x450>)
 800ffe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe4:	08010009 	.word	0x08010009
 800ffe8:	08010011 	.word	0x08010011
 800ffec:	08010019 	.word	0x08010019
 800fff0:	0801002f 	.word	0x0801002f
 800fff4:	0801001f 	.word	0x0801001f
 800fff8:	0801002f 	.word	0x0801002f
 800fffc:	0801002f 	.word	0x0801002f
 8010000:	0801002f 	.word	0x0801002f
 8010004:	08010027 	.word	0x08010027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010008:	f7fd fb02 	bl	800d610 <HAL_RCC_GetPCLK1Freq>
 801000c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801000e:	e014      	b.n	801003a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010010:	f7fd fb14 	bl	800d63c <HAL_RCC_GetPCLK2Freq>
 8010014:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010016:	e010      	b.n	801003a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010018:	4b4e      	ldr	r3, [pc, #312]	; (8010154 <UART_SetConfig+0x5c0>)
 801001a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801001c:	e00d      	b.n	801003a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801001e:	f7fd fa89 	bl	800d534 <HAL_RCC_GetSysClockFreq>
 8010022:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8010024:	e009      	b.n	801003a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801002a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801002c:	e005      	b.n	801003a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801002e:	2300      	movs	r3, #0
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010038:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801003a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801003c:	2b00      	cmp	r3, #0
 801003e:	f000 8090 	beq.w	8010162 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010046:	4a44      	ldr	r2, [pc, #272]	; (8010158 <UART_SetConfig+0x5c4>)
 8010048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801004c:	461a      	mov	r2, r3
 801004e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010050:	fbb3 f3f2 	udiv	r3, r3, r2
 8010054:	005a      	lsls	r2, r3, #1
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	085b      	lsrs	r3, r3, #1
 801005c:	441a      	add	r2, r3
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	fbb2 f3f3 	udiv	r3, r2, r3
 8010066:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	2b0f      	cmp	r3, #15
 801006c:	d916      	bls.n	801009c <UART_SetConfig+0x508>
 801006e:	6a3b      	ldr	r3, [r7, #32]
 8010070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010074:	d212      	bcs.n	801009c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	b29b      	uxth	r3, r3
 801007a:	f023 030f 	bic.w	r3, r3, #15
 801007e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010080:	6a3b      	ldr	r3, [r7, #32]
 8010082:	085b      	lsrs	r3, r3, #1
 8010084:	b29b      	uxth	r3, r3
 8010086:	f003 0307 	and.w	r3, r3, #7
 801008a:	b29a      	uxth	r2, r3
 801008c:	8bfb      	ldrh	r3, [r7, #30]
 801008e:	4313      	orrs	r3, r2
 8010090:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	8bfa      	ldrh	r2, [r7, #30]
 8010098:	60da      	str	r2, [r3, #12]
 801009a:	e062      	b.n	8010162 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801009c:	2301      	movs	r3, #1
 801009e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80100a2:	e05e      	b.n	8010162 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80100a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100a8:	2b08      	cmp	r3, #8
 80100aa:	d828      	bhi.n	80100fe <UART_SetConfig+0x56a>
 80100ac:	a201      	add	r2, pc, #4	; (adr r2, 80100b4 <UART_SetConfig+0x520>)
 80100ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100b2:	bf00      	nop
 80100b4:	080100d9 	.word	0x080100d9
 80100b8:	080100e1 	.word	0x080100e1
 80100bc:	080100e9 	.word	0x080100e9
 80100c0:	080100ff 	.word	0x080100ff
 80100c4:	080100ef 	.word	0x080100ef
 80100c8:	080100ff 	.word	0x080100ff
 80100cc:	080100ff 	.word	0x080100ff
 80100d0:	080100ff 	.word	0x080100ff
 80100d4:	080100f7 	.word	0x080100f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100d8:	f7fd fa9a 	bl	800d610 <HAL_RCC_GetPCLK1Freq>
 80100dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80100de:	e014      	b.n	801010a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100e0:	f7fd faac 	bl	800d63c <HAL_RCC_GetPCLK2Freq>
 80100e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80100e6:	e010      	b.n	801010a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80100e8:	4b1a      	ldr	r3, [pc, #104]	; (8010154 <UART_SetConfig+0x5c0>)
 80100ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80100ec:	e00d      	b.n	801010a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80100ee:	f7fd fa21 	bl	800d534 <HAL_RCC_GetSysClockFreq>
 80100f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80100f4:	e009      	b.n	801010a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80100fc:	e005      	b.n	801010a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80100fe:	2300      	movs	r3, #0
 8010100:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8010102:	2301      	movs	r3, #1
 8010104:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8010108:	bf00      	nop
    }

    if (pclk != 0U)
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	2b00      	cmp	r3, #0
 801010e:	d028      	beq.n	8010162 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010114:	4a10      	ldr	r2, [pc, #64]	; (8010158 <UART_SetConfig+0x5c4>)
 8010116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801011a:	461a      	mov	r2, r3
 801011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801011e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	085b      	lsrs	r3, r3, #1
 8010128:	441a      	add	r2, r3
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010132:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010134:	6a3b      	ldr	r3, [r7, #32]
 8010136:	2b0f      	cmp	r3, #15
 8010138:	d910      	bls.n	801015c <UART_SetConfig+0x5c8>
 801013a:	6a3b      	ldr	r3, [r7, #32]
 801013c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010140:	d20c      	bcs.n	801015c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010142:	6a3b      	ldr	r3, [r7, #32]
 8010144:	b29a      	uxth	r2, r3
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	60da      	str	r2, [r3, #12]
 801014c:	e009      	b.n	8010162 <UART_SetConfig+0x5ce>
 801014e:	bf00      	nop
 8010150:	40008000 	.word	0x40008000
 8010154:	00f42400 	.word	0x00f42400
 8010158:	08019044 	.word	0x08019044
      }
      else
      {
        ret = HAL_ERROR;
 801015c:	2301      	movs	r3, #1
 801015e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	2201      	movs	r2, #1
 8010166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2201      	movs	r2, #1
 801016e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	2200      	movs	r2, #0
 8010176:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8010178:	697b      	ldr	r3, [r7, #20]
 801017a:	2200      	movs	r2, #0
 801017c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801017e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8010182:	4618      	mov	r0, r3
 8010184:	3730      	adds	r7, #48	; 0x30
 8010186:	46bd      	mov	sp, r7
 8010188:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801018c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801018c:	b480      	push	{r7}
 801018e:	b083      	sub	sp, #12
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00a      	beq.n	80101b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	430a      	orrs	r2, r1
 80101b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ba:	f003 0302 	and.w	r3, r3, #2
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00a      	beq.n	80101d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101dc:	f003 0304 	and.w	r3, r3, #4
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d00a      	beq.n	80101fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	430a      	orrs	r2, r1
 80101f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fe:	f003 0308 	and.w	r3, r3, #8
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00a      	beq.n	801021c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	430a      	orrs	r2, r1
 801021a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010220:	f003 0310 	and.w	r3, r3, #16
 8010224:	2b00      	cmp	r3, #0
 8010226:	d00a      	beq.n	801023e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	689b      	ldr	r3, [r3, #8]
 801022e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	430a      	orrs	r2, r1
 801023c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010242:	f003 0320 	and.w	r3, r3, #32
 8010246:	2b00      	cmp	r3, #0
 8010248:	d00a      	beq.n	8010260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	430a      	orrs	r2, r1
 801025e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010268:	2b00      	cmp	r3, #0
 801026a:	d01a      	beq.n	80102a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	430a      	orrs	r2, r1
 8010280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801028a:	d10a      	bne.n	80102a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	430a      	orrs	r2, r1
 80102a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	430a      	orrs	r2, r1
 80102c2:	605a      	str	r2, [r3, #4]
  }
}
 80102c4:	bf00      	nop
 80102c6:	370c      	adds	r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr

080102d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af02      	add	r7, sp, #8
 80102d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80102e0:	f7f8 f8e0 	bl	80084a4 <HAL_GetTick>
 80102e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	f003 0308 	and.w	r3, r3, #8
 80102f0:	2b08      	cmp	r3, #8
 80102f2:	d10e      	bne.n	8010312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	2200      	movs	r2, #0
 80102fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f82f 	bl	8010366 <UART_WaitOnFlagUntilTimeout>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d001      	beq.n	8010312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801030e:	2303      	movs	r3, #3
 8010310:	e025      	b.n	801035e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	f003 0304 	and.w	r3, r3, #4
 801031c:	2b04      	cmp	r3, #4
 801031e:	d10e      	bne.n	801033e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010324:	9300      	str	r3, [sp, #0]
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2200      	movs	r2, #0
 801032a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f000 f819 	bl	8010366 <UART_WaitOnFlagUntilTimeout>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d001      	beq.n	801033e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801033a:	2303      	movs	r3, #3
 801033c:	e00f      	b.n	801035e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2220      	movs	r2, #32
 8010342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	2220      	movs	r2, #32
 801034a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2200      	movs	r2, #0
 8010352:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801035c:	2300      	movs	r3, #0
}
 801035e:	4618      	mov	r0, r3
 8010360:	3710      	adds	r7, #16
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}

08010366 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010366:	b580      	push	{r7, lr}
 8010368:	b09c      	sub	sp, #112	; 0x70
 801036a:	af00      	add	r7, sp, #0
 801036c:	60f8      	str	r0, [r7, #12]
 801036e:	60b9      	str	r1, [r7, #8]
 8010370:	603b      	str	r3, [r7, #0]
 8010372:	4613      	mov	r3, r2
 8010374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010376:	e0a9      	b.n	80104cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801037a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801037e:	f000 80a5 	beq.w	80104cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010382:	f7f8 f88f 	bl	80084a4 <HAL_GetTick>
 8010386:	4602      	mov	r2, r0
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801038e:	429a      	cmp	r2, r3
 8010390:	d302      	bcc.n	8010398 <UART_WaitOnFlagUntilTimeout+0x32>
 8010392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010394:	2b00      	cmp	r3, #0
 8010396:	d140      	bne.n	801041a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801039e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a0:	e853 3f00 	ldrex	r3, [r3]
 80103a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80103a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80103ac:	667b      	str	r3, [r7, #100]	; 0x64
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80103b8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103be:	e841 2300 	strex	r3, r2, [r1]
 80103c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80103c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d1e6      	bne.n	8010398 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	3308      	adds	r3, #8
 80103d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103d4:	e853 3f00 	ldrex	r3, [r3]
 80103d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103dc:	f023 0301 	bic.w	r3, r3, #1
 80103e0:	663b      	str	r3, [r7, #96]	; 0x60
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3308      	adds	r3, #8
 80103e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80103ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80103f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80103f2:	e841 2300 	strex	r3, r2, [r1]
 80103f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80103f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d1e5      	bne.n	80103ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2220      	movs	r2, #32
 8010402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2220      	movs	r2, #32
 801040a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010416:	2303      	movs	r3, #3
 8010418:	e069      	b.n	80104ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f003 0304 	and.w	r3, r3, #4
 8010424:	2b00      	cmp	r3, #0
 8010426:	d051      	beq.n	80104cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	69db      	ldr	r3, [r3, #28]
 801042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010436:	d149      	bne.n	80104cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010440:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044a:	e853 3f00 	ldrex	r3, [r3]
 801044e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	461a      	mov	r2, r3
 801045e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010460:	637b      	str	r3, [r7, #52]	; 0x34
 8010462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010468:	e841 2300 	strex	r3, r2, [r1]
 801046c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010470:	2b00      	cmp	r3, #0
 8010472:	d1e6      	bne.n	8010442 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	3308      	adds	r3, #8
 801047a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	e853 3f00 	ldrex	r3, [r3]
 8010482:	613b      	str	r3, [r7, #16]
   return(result);
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	f023 0301 	bic.w	r3, r3, #1
 801048a:	66bb      	str	r3, [r7, #104]	; 0x68
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	3308      	adds	r3, #8
 8010492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010494:	623a      	str	r2, [r7, #32]
 8010496:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010498:	69f9      	ldr	r1, [r7, #28]
 801049a:	6a3a      	ldr	r2, [r7, #32]
 801049c:	e841 2300 	strex	r3, r2, [r1]
 80104a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80104a2:	69bb      	ldr	r3, [r7, #24]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d1e5      	bne.n	8010474 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2220      	movs	r2, #32
 80104ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2220      	movs	r2, #32
 80104b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2220      	movs	r2, #32
 80104bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2200      	movs	r2, #0
 80104c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	e010      	b.n	80104ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	69da      	ldr	r2, [r3, #28]
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	4013      	ands	r3, r2
 80104d6:	68ba      	ldr	r2, [r7, #8]
 80104d8:	429a      	cmp	r2, r3
 80104da:	bf0c      	ite	eq
 80104dc:	2301      	moveq	r3, #1
 80104de:	2300      	movne	r3, #0
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	461a      	mov	r2, r3
 80104e4:	79fb      	ldrb	r3, [r7, #7]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	f43f af46 	beq.w	8010378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3770      	adds	r7, #112	; 0x70
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
	...

080104f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b0a3      	sub	sp, #140	; 0x8c
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	4613      	mov	r3, r2
 8010504:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	68ba      	ldr	r2, [r7, #8]
 801050a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	88fa      	ldrh	r2, [r7, #6]
 8010510:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	88fa      	ldrh	r2, [r7, #6]
 8010518:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	2200      	movs	r2, #0
 8010520:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801052a:	d10e      	bne.n	801054a <UART_Start_Receive_IT+0x52>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d105      	bne.n	8010540 <UART_Start_Receive_IT+0x48>
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	f240 12ff 	movw	r2, #511	; 0x1ff
 801053a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801053e:	e02d      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	22ff      	movs	r2, #255	; 0xff
 8010544:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010548:	e028      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	689b      	ldr	r3, [r3, #8]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10d      	bne.n	801056e <UART_Start_Receive_IT+0x76>
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d104      	bne.n	8010564 <UART_Start_Receive_IT+0x6c>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	22ff      	movs	r2, #255	; 0xff
 801055e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010562:	e01b      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	227f      	movs	r2, #127	; 0x7f
 8010568:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801056c:	e016      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010576:	d10d      	bne.n	8010594 <UART_Start_Receive_IT+0x9c>
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d104      	bne.n	801058a <UART_Start_Receive_IT+0x92>
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	227f      	movs	r2, #127	; 0x7f
 8010584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010588:	e008      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	223f      	movs	r2, #63	; 0x3f
 801058e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010592:	e003      	b.n	801059c <UART_Start_Receive_IT+0xa4>
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2200      	movs	r2, #0
 80105a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2222      	movs	r2, #34	; 0x22
 80105a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	3308      	adds	r3, #8
 80105b2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80105bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80105be:	f043 0301 	orr.w	r3, r3, #1
 80105c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	3308      	adds	r3, #8
 80105cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80105d0:	673a      	str	r2, [r7, #112]	; 0x70
 80105d2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80105d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80105d8:	e841 2300 	strex	r3, r2, [r1]
 80105dc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80105de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e3      	bne.n	80105ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80105e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80105ec:	d153      	bne.n	8010696 <UART_Start_Receive_IT+0x19e>
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105f4:	88fa      	ldrh	r2, [r7, #6]
 80105f6:	429a      	cmp	r2, r3
 80105f8:	d34d      	bcc.n	8010696 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	689b      	ldr	r3, [r3, #8]
 80105fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010602:	d107      	bne.n	8010614 <UART_Start_Receive_IT+0x11c>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d103      	bne.n	8010614 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	4a4b      	ldr	r2, [pc, #300]	; (801073c <UART_Start_Receive_IT+0x244>)
 8010610:	671a      	str	r2, [r3, #112]	; 0x70
 8010612:	e002      	b.n	801061a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	4a4a      	ldr	r2, [pc, #296]	; (8010740 <UART_Start_Receive_IT+0x248>)
 8010618:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d01a      	beq.n	8010660 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010632:	e853 3f00 	ldrex	r3, [r3]
 8010636:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801063a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801063e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	461a      	mov	r2, r3
 8010648:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801064c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801064e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801065a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e4      	bne.n	801062a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	3308      	adds	r3, #8
 8010666:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066a:	e853 3f00 	ldrex	r3, [r3]
 801066e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	3308      	adds	r3, #8
 801067e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010680:	64ba      	str	r2, [r7, #72]	; 0x48
 8010682:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010684:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010688:	e841 2300 	strex	r3, r2, [r1]
 801068c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801068e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1e5      	bne.n	8010660 <UART_Start_Receive_IT+0x168>
 8010694:	e04a      	b.n	801072c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	689b      	ldr	r3, [r3, #8]
 801069a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801069e:	d107      	bne.n	80106b0 <UART_Start_Receive_IT+0x1b8>
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d103      	bne.n	80106b0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	4a26      	ldr	r2, [pc, #152]	; (8010744 <UART_Start_Receive_IT+0x24c>)
 80106ac:	671a      	str	r2, [r3, #112]	; 0x70
 80106ae:	e002      	b.n	80106b6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	4a25      	ldr	r2, [pc, #148]	; (8010748 <UART_Start_Receive_IT+0x250>)
 80106b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2200      	movs	r2, #0
 80106ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d019      	beq.n	80106fa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	e853 3f00 	ldrex	r3, [r3]
 80106d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80106da:	677b      	str	r3, [r7, #116]	; 0x74
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	461a      	mov	r2, r3
 80106e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80106e4:	637b      	str	r3, [r7, #52]	; 0x34
 80106e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106ec:	e841 2300 	strex	r3, r2, [r1]
 80106f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1e6      	bne.n	80106c6 <UART_Start_Receive_IT+0x1ce>
 80106f8:	e018      	b.n	801072c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	e853 3f00 	ldrex	r3, [r3]
 8010706:	613b      	str	r3, [r7, #16]
   return(result);
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	f043 0320 	orr.w	r3, r3, #32
 801070e:	67bb      	str	r3, [r7, #120]	; 0x78
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	461a      	mov	r2, r3
 8010716:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010718:	623b      	str	r3, [r7, #32]
 801071a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801071c:	69f9      	ldr	r1, [r7, #28]
 801071e:	6a3a      	ldr	r2, [r7, #32]
 8010720:	e841 2300 	strex	r3, r2, [r1]
 8010724:	61bb      	str	r3, [r7, #24]
   return(result);
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d1e6      	bne.n	80106fa <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 801072c:	2300      	movs	r3, #0
}
 801072e:	4618      	mov	r0, r3
 8010730:	378c      	adds	r7, #140	; 0x8c
 8010732:	46bd      	mov	sp, r7
 8010734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop
 801073c:	08010e55 	.word	0x08010e55
 8010740:	08010b5d 	.word	0x08010b5d
 8010744:	080109fb 	.word	0x080109fb
 8010748:	0801089b 	.word	0x0801089b

0801074c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801074c:	b480      	push	{r7}
 801074e:	b095      	sub	sp, #84	; 0x54
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801075a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801075c:	e853 3f00 	ldrex	r3, [r3]
 8010760:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010764:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010768:	64fb      	str	r3, [r7, #76]	; 0x4c
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	461a      	mov	r2, r3
 8010770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010772:	643b      	str	r3, [r7, #64]	; 0x40
 8010774:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010776:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801077a:	e841 2300 	strex	r3, r2, [r1]
 801077e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1e6      	bne.n	8010754 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3308      	adds	r3, #8
 801078c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078e:	6a3b      	ldr	r3, [r7, #32]
 8010790:	e853 3f00 	ldrex	r3, [r3]
 8010794:	61fb      	str	r3, [r7, #28]
   return(result);
 8010796:	69fb      	ldr	r3, [r7, #28]
 8010798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801079c:	f023 0301 	bic.w	r3, r3, #1
 80107a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3308      	adds	r3, #8
 80107a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80107ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b2:	e841 2300 	strex	r3, r2, [r1]
 80107b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d1e3      	bne.n	8010786 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d118      	bne.n	80107f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	e853 3f00 	ldrex	r3, [r3]
 80107d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	f023 0310 	bic.w	r3, r3, #16
 80107da:	647b      	str	r3, [r7, #68]	; 0x44
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	461a      	mov	r2, r3
 80107e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e4:	61bb      	str	r3, [r7, #24]
 80107e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107e8:	6979      	ldr	r1, [r7, #20]
 80107ea:	69ba      	ldr	r2, [r7, #24]
 80107ec:	e841 2300 	strex	r3, r2, [r1]
 80107f0:	613b      	str	r3, [r7, #16]
   return(result);
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d1e6      	bne.n	80107c6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2220      	movs	r2, #32
 80107fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2200      	movs	r2, #0
 8010804:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801080c:	bf00      	nop
 801080e:	3754      	adds	r7, #84	; 0x54
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010824:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	2200      	movs	r2, #0
 801082a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	2200      	movs	r2, #0
 8010832:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff f996 	bl	800fb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801083c:	bf00      	nop
 801083e:	3710      	adds	r7, #16
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b088      	sub	sp, #32
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	e853 3f00 	ldrex	r3, [r3]
 8010858:	60bb      	str	r3, [r7, #8]
   return(result);
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010860:	61fb      	str	r3, [r7, #28]
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	461a      	mov	r2, r3
 8010868:	69fb      	ldr	r3, [r7, #28]
 801086a:	61bb      	str	r3, [r7, #24]
 801086c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801086e:	6979      	ldr	r1, [r7, #20]
 8010870:	69ba      	ldr	r2, [r7, #24]
 8010872:	e841 2300 	strex	r3, r2, [r1]
 8010876:	613b      	str	r3, [r7, #16]
   return(result);
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d1e6      	bne.n	801084c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	2220      	movs	r2, #32
 8010882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2200      	movs	r2, #0
 801088a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801088c:	6878      	ldr	r0, [r7, #4]
 801088e:	f7ff f957 	bl	800fb40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010892:	bf00      	nop
 8010894:	3720      	adds	r7, #32
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}

0801089a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801089a:	b580      	push	{r7, lr}
 801089c:	b096      	sub	sp, #88	; 0x58
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108b2:	2b22      	cmp	r3, #34	; 0x22
 80108b4:	f040 8095 	bne.w	80109e2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108be:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80108c6:	b2d9      	uxtb	r1, r3
 80108c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80108cc:	b2da      	uxtb	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d2:	400a      	ands	r2, r1
 80108d4:	b2d2      	uxtb	r2, r2
 80108d6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	3b01      	subs	r3, #1
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d178      	bne.n	80109f2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010908:	e853 3f00 	ldrex	r3, [r3]
 801090c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801090e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010914:	653b      	str	r3, [r7, #80]	; 0x50
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	461a      	mov	r2, r3
 801091c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801091e:	647b      	str	r3, [r7, #68]	; 0x44
 8010920:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010926:	e841 2300 	strex	r3, r2, [r1]
 801092a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801092c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1e6      	bne.n	8010900 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	3308      	adds	r3, #8
 8010938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093c:	e853 3f00 	ldrex	r3, [r3]
 8010940:	623b      	str	r3, [r7, #32]
   return(result);
 8010942:	6a3b      	ldr	r3, [r7, #32]
 8010944:	f023 0301 	bic.w	r3, r3, #1
 8010948:	64fb      	str	r3, [r7, #76]	; 0x4c
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	3308      	adds	r3, #8
 8010950:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010952:	633a      	str	r2, [r7, #48]	; 0x30
 8010954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801095a:	e841 2300 	strex	r3, r2, [r1]
 801095e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1e5      	bne.n	8010932 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	2220      	movs	r2, #32
 801096a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2200      	movs	r2, #0
 8010972:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010978:	2b01      	cmp	r3, #1
 801097a:	d12e      	bne.n	80109da <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	e853 3f00 	ldrex	r3, [r3]
 801098e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f023 0310 	bic.w	r3, r3, #16
 8010996:	64bb      	str	r3, [r7, #72]	; 0x48
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	461a      	mov	r2, r3
 801099e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80109a0:	61fb      	str	r3, [r7, #28]
 80109a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109a4:	69b9      	ldr	r1, [r7, #24]
 80109a6:	69fa      	ldr	r2, [r7, #28]
 80109a8:	e841 2300 	strex	r3, r2, [r1]
 80109ac:	617b      	str	r3, [r7, #20]
   return(result);
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d1e6      	bne.n	8010982 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	69db      	ldr	r3, [r3, #28]
 80109ba:	f003 0310 	and.w	r3, r3, #16
 80109be:	2b10      	cmp	r3, #16
 80109c0:	d103      	bne.n	80109ca <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2210      	movs	r2, #16
 80109c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80109d0:	4619      	mov	r1, r3
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7ff f8d2 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80109d8:	e00b      	b.n	80109f2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff f8ba 	bl	800fb54 <HAL_UART_RxCpltCallback>
}
 80109e0:	e007      	b.n	80109f2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	699a      	ldr	r2, [r3, #24]
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	f042 0208 	orr.w	r2, r2, #8
 80109f0:	619a      	str	r2, [r3, #24]
}
 80109f2:	bf00      	nop
 80109f4:	3758      	adds	r7, #88	; 0x58
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b096      	sub	sp, #88	; 0x58
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a12:	2b22      	cmp	r3, #34	; 0x22
 8010a14:	f040 8095 	bne.w	8010b42 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a1e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a26:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010a28:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010a2c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010a30:	4013      	ands	r3, r2
 8010a32:	b29a      	uxth	r2, r3
 8010a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a36:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a3c:	1c9a      	adds	r2, r3, #2
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a5a:	b29b      	uxth	r3, r3
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d178      	bne.n	8010b52 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a68:	e853 3f00 	ldrex	r3, [r3]
 8010a6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8010a80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a86:	e841 2300 	strex	r3, r2, [r1]
 8010a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1e6      	bne.n	8010a60 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	3308      	adds	r3, #8
 8010a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a9a:	6a3b      	ldr	r3, [r7, #32]
 8010a9c:	e853 3f00 	ldrex	r3, [r3]
 8010aa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	f023 0301 	bic.w	r3, r3, #1
 8010aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	3308      	adds	r3, #8
 8010ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010ab4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aba:	e841 2300 	strex	r3, r2, [r1]
 8010abe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d1e5      	bne.n	8010a92 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2220      	movs	r2, #32
 8010aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d12e      	bne.n	8010b3a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	e853 3f00 	ldrex	r3, [r3]
 8010aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8010af0:	68bb      	ldr	r3, [r7, #8]
 8010af2:	f023 0310 	bic.w	r3, r3, #16
 8010af6:	647b      	str	r3, [r7, #68]	; 0x44
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	461a      	mov	r2, r3
 8010afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b00:	61bb      	str	r3, [r7, #24]
 8010b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b04:	6979      	ldr	r1, [r7, #20]
 8010b06:	69ba      	ldr	r2, [r7, #24]
 8010b08:	e841 2300 	strex	r3, r2, [r1]
 8010b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1e6      	bne.n	8010ae2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	69db      	ldr	r3, [r3, #28]
 8010b1a:	f003 0310 	and.w	r3, r3, #16
 8010b1e:	2b10      	cmp	r3, #16
 8010b20:	d103      	bne.n	8010b2a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2210      	movs	r2, #16
 8010b28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff f822 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b38:	e00b      	b.n	8010b52 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7ff f80a 	bl	800fb54 <HAL_UART_RxCpltCallback>
}
 8010b40:	e007      	b.n	8010b52 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	699a      	ldr	r2, [r3, #24]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f042 0208 	orr.w	r2, r2, #8
 8010b50:	619a      	str	r2, [r3, #24]
}
 8010b52:	bf00      	nop
 8010b54:	3758      	adds	r7, #88	; 0x58
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
	...

08010b5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b0a6      	sub	sp, #152	; 0x98
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b6a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	69db      	ldr	r3, [r3, #28]
 8010b74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689b      	ldr	r3, [r3, #8]
 8010b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b92:	2b22      	cmp	r3, #34	; 0x22
 8010b94:	f040 814f 	bne.w	8010e36 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b9e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ba2:	e0f6      	b.n	8010d92 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010baa:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010bae:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010bb2:	b2d9      	uxtb	r1, r3
 8010bb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bbe:	400a      	ands	r2, r1
 8010bc0:	b2d2      	uxtb	r2, r2
 8010bc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	69db      	ldr	r3, [r3, #28]
 8010be6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010bea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d053      	beq.n	8010c9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010bf6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bfa:	f003 0301 	and.w	r3, r3, #1
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d011      	beq.n	8010c26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010c02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00b      	beq.n	8010c26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	2201      	movs	r2, #1
 8010c14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c1c:	f043 0201 	orr.w	r2, r3, #1
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d011      	beq.n	8010c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c36:	f003 0301 	and.w	r3, r3, #1
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00b      	beq.n	8010c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	2202      	movs	r2, #2
 8010c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c4c:	f043 0204 	orr.w	r2, r3, #4
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c5a:	f003 0304 	and.w	r3, r3, #4
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d011      	beq.n	8010c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c66:	f003 0301 	and.w	r3, r3, #1
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00b      	beq.n	8010c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2204      	movs	r2, #4
 8010c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c7c:	f043 0202 	orr.w	r2, r3, #2
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d006      	beq.n	8010c9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7fe ff69 	bl	800fb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d173      	bne.n	8010d92 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010cb2:	e853 3f00 	ldrex	r3, [r3]
 8010cb6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	461a      	mov	r2, r3
 8010cc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cce:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cd0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010cd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cd4:	e841 2300 	strex	r3, r2, [r1]
 8010cd8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1e4      	bne.n	8010caa <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3308      	adds	r3, #8
 8010ce6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cea:	e853 3f00 	ldrex	r3, [r3]
 8010cee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010cf6:	f023 0301 	bic.w	r3, r3, #1
 8010cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	3308      	adds	r3, #8
 8010d02:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010d04:	657a      	str	r2, [r7, #84]	; 0x54
 8010d06:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010d0c:	e841 2300 	strex	r3, r2, [r1]
 8010d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d1e3      	bne.n	8010ce0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2220      	movs	r2, #32
 8010d1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2200      	movs	r2, #0
 8010d24:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d2a:	2b01      	cmp	r3, #1
 8010d2c:	d12e      	bne.n	8010d8c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2200      	movs	r2, #0
 8010d32:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d3c:	e853 3f00 	ldrex	r3, [r3]
 8010d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d44:	f023 0310 	bic.w	r3, r3, #16
 8010d48:	67bb      	str	r3, [r7, #120]	; 0x78
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d52:	643b      	str	r3, [r7, #64]	; 0x40
 8010d54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d5a:	e841 2300 	strex	r3, r2, [r1]
 8010d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d1e6      	bne.n	8010d34 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	69db      	ldr	r3, [r3, #28]
 8010d6c:	f003 0310 	and.w	r3, r3, #16
 8010d70:	2b10      	cmp	r3, #16
 8010d72:	d103      	bne.n	8010d7c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2210      	movs	r2, #16
 8010d7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f7fe fef9 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
 8010d8a:	e002      	b.n	8010d92 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f7fe fee1 	bl	800fb54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d92:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d006      	beq.n	8010da8 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8010d9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d9e:	f003 0320 	and.w	r3, r3, #32
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f47f aefe 	bne.w	8010ba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010dae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010db2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d045      	beq.n	8010e46 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d23e      	bcs.n	8010e46 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd0:	6a3b      	ldr	r3, [r7, #32]
 8010dd2:	e853 3f00 	ldrex	r3, [r3]
 8010dd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010dde:	673b      	str	r3, [r7, #112]	; 0x70
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	3308      	adds	r3, #8
 8010de6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010de8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010df0:	e841 2300 	strex	r3, r2, [r1]
 8010df4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1e5      	bne.n	8010dc8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a14      	ldr	r2, [pc, #80]	; (8010e50 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010e00:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	e853 3f00 	ldrex	r3, [r3]
 8010e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	f043 0320 	orr.w	r3, r3, #32
 8010e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e20:	61bb      	str	r3, [r7, #24]
 8010e22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e24:	6979      	ldr	r1, [r7, #20]
 8010e26:	69ba      	ldr	r2, [r7, #24]
 8010e28:	e841 2300 	strex	r3, r2, [r1]
 8010e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8010e2e:	693b      	ldr	r3, [r7, #16]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1e6      	bne.n	8010e02 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e34:	e007      	b.n	8010e46 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	699a      	ldr	r2, [r3, #24]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	f042 0208 	orr.w	r2, r2, #8
 8010e44:	619a      	str	r2, [r3, #24]
}
 8010e46:	bf00      	nop
 8010e48:	3798      	adds	r7, #152	; 0x98
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	0801089b 	.word	0x0801089b

08010e54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b0a8      	sub	sp, #160	; 0xa0
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e62:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	69db      	ldr	r3, [r3, #28]
 8010e6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	689b      	ldr	r3, [r3, #8]
 8010e80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e8a:	2b22      	cmp	r3, #34	; 0x22
 8010e8c:	f040 8153 	bne.w	8011136 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e96:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010e9a:	e0fa      	b.n	8011092 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ea2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eaa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010eae:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010eb2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010eb6:	4013      	ands	r3, r2
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010ebe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ec4:	1c9a      	adds	r2, r3, #2
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	69db      	ldr	r3, [r3, #28]
 8010ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010eea:	f003 0307 	and.w	r3, r3, #7
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d053      	beq.n	8010f9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ef6:	f003 0301 	and.w	r3, r3, #1
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d011      	beq.n	8010f22 <UART_RxISR_16BIT_FIFOEN+0xce>
 8010efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00b      	beq.n	8010f22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	2201      	movs	r2, #1
 8010f10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f18:	f043 0201 	orr.w	r2, r3, #1
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f26:	f003 0302 	and.w	r3, r3, #2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d011      	beq.n	8010f52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f32:	f003 0301 	and.w	r3, r3, #1
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00b      	beq.n	8010f52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2202      	movs	r2, #2
 8010f40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f48:	f043 0204 	orr.w	r2, r3, #4
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f56:	f003 0304 	and.w	r3, r3, #4
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d011      	beq.n	8010f82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010f5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00b      	beq.n	8010f82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	2204      	movs	r2, #4
 8010f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f78:	f043 0202 	orr.w	r2, r3, #2
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d006      	beq.n	8010f9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f7fe fdeb 	bl	800fb68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2200      	movs	r2, #0
 8010f96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d175      	bne.n	8011092 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010fae:	e853 3f00 	ldrex	r3, [r3]
 8010fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010fca:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010fce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010fd0:	e841 2300 	strex	r3, r2, [r1]
 8010fd4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1e4      	bne.n	8010fa6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	3308      	adds	r3, #8
 8010fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fe6:	e853 3f00 	ldrex	r3, [r3]
 8010fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ff2:	f023 0301 	bic.w	r3, r3, #1
 8010ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	3308      	adds	r3, #8
 8011000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011004:	65ba      	str	r2, [r7, #88]	; 0x58
 8011006:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011008:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801100a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801100c:	e841 2300 	strex	r3, r2, [r1]
 8011010:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011014:	2b00      	cmp	r3, #0
 8011016:	d1e1      	bne.n	8010fdc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2220      	movs	r2, #32
 801101c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2200      	movs	r2, #0
 8011024:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801102a:	2b01      	cmp	r3, #1
 801102c:	d12e      	bne.n	801108c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2200      	movs	r2, #0
 8011032:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801103a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801103c:	e853 3f00 	ldrex	r3, [r3]
 8011040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011044:	f023 0310 	bic.w	r3, r3, #16
 8011048:	67fb      	str	r3, [r7, #124]	; 0x7c
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	461a      	mov	r2, r3
 8011050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011052:	647b      	str	r3, [r7, #68]	; 0x44
 8011054:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011056:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011058:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801105a:	e841 2300 	strex	r3, r2, [r1]
 801105e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1e6      	bne.n	8011034 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	69db      	ldr	r3, [r3, #28]
 801106c:	f003 0310 	and.w	r3, r3, #16
 8011070:	2b10      	cmp	r3, #16
 8011072:	d103      	bne.n	801107c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2210      	movs	r2, #16
 801107a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7fe fd79 	bl	800fb7c <HAL_UARTEx_RxEventCallback>
 801108a:	e002      	b.n	8011092 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801108c:	6878      	ldr	r0, [r7, #4]
 801108e:	f7fe fd61 	bl	800fb54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011092:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8011096:	2b00      	cmp	r3, #0
 8011098:	d006      	beq.n	80110a8 <UART_RxISR_16BIT_FIFOEN+0x254>
 801109a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801109e:	f003 0320 	and.w	r3, r3, #32
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	f47f aefa 	bne.w	8010e9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80110ae:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80110b2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d045      	beq.n	8011146 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80110c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d23e      	bcs.n	8011146 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3308      	adds	r3, #8
 80110ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	e853 3f00 	ldrex	r3, [r3]
 80110d6:	623b      	str	r3, [r7, #32]
   return(result);
 80110d8:	6a3b      	ldr	r3, [r7, #32]
 80110da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80110de:	677b      	str	r3, [r7, #116]	; 0x74
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	3308      	adds	r3, #8
 80110e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80110e8:	633a      	str	r2, [r7, #48]	; 0x30
 80110ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110f0:	e841 2300 	strex	r3, r2, [r1]
 80110f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d1e5      	bne.n	80110c8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a14      	ldr	r2, [pc, #80]	; (8011150 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011100:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	e853 3f00 	ldrex	r3, [r3]
 801110e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	f043 0320 	orr.w	r3, r3, #32
 8011116:	673b      	str	r3, [r7, #112]	; 0x70
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	461a      	mov	r2, r3
 801111e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011120:	61fb      	str	r3, [r7, #28]
 8011122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011124:	69b9      	ldr	r1, [r7, #24]
 8011126:	69fa      	ldr	r2, [r7, #28]
 8011128:	e841 2300 	strex	r3, r2, [r1]
 801112c:	617b      	str	r3, [r7, #20]
   return(result);
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1e6      	bne.n	8011102 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011134:	e007      	b.n	8011146 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	699a      	ldr	r2, [r3, #24]
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f042 0208 	orr.w	r2, r2, #8
 8011144:	619a      	str	r2, [r3, #24]
}
 8011146:	bf00      	nop
 8011148:	37a0      	adds	r7, #160	; 0xa0
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	080109fb 	.word	0x080109fb

08011154 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011170:	bf00      	nop
 8011172:	370c      	adds	r7, #12
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011184:	bf00      	nop
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011190:	b480      	push	{r7}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d101      	bne.n	80111a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80111a2:	2302      	movs	r3, #2
 80111a4:	e027      	b.n	80111f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2224      	movs	r2, #36	; 0x24
 80111b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 0201 	bic.w	r2, r2, #1
 80111cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80111d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2220      	movs	r2, #32
 80111e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3714      	adds	r7, #20
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr

08011202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b084      	sub	sp, #16
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011212:	2b01      	cmp	r3, #1
 8011214:	d101      	bne.n	801121a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011216:	2302      	movs	r3, #2
 8011218:	e02d      	b.n	8011276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	2201      	movs	r2, #1
 801121e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2224      	movs	r2, #36	; 0x24
 8011226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f022 0201 	bic.w	r2, r2, #1
 8011240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	689b      	ldr	r3, [r3, #8]
 8011248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	683a      	ldr	r2, [r7, #0]
 8011252:	430a      	orrs	r2, r1
 8011254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 f850 	bl	80112fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2220      	movs	r2, #32
 8011268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2200      	movs	r2, #0
 8011270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011274:	2300      	movs	r3, #0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3710      	adds	r7, #16
 801127a:	46bd      	mov	sp, r7
 801127c:	bd80      	pop	{r7, pc}

0801127e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801127e:	b580      	push	{r7, lr}
 8011280:	b084      	sub	sp, #16
 8011282:	af00      	add	r7, sp, #0
 8011284:	6078      	str	r0, [r7, #4]
 8011286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801128e:	2b01      	cmp	r3, #1
 8011290:	d101      	bne.n	8011296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011292:	2302      	movs	r3, #2
 8011294:	e02d      	b.n	80112f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	2201      	movs	r2, #1
 801129a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	2224      	movs	r2, #36	; 0x24
 80112a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f022 0201 	bic.w	r2, r2, #1
 80112bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	430a      	orrs	r2, r1
 80112d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 f812 	bl	80112fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	68fa      	ldr	r2, [r7, #12]
 80112de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2220      	movs	r2, #32
 80112e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2200      	movs	r2, #0
 80112ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011308:	2b00      	cmp	r3, #0
 801130a:	d108      	bne.n	801131e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2201      	movs	r2, #1
 8011310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2201      	movs	r2, #1
 8011318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801131c:	e031      	b.n	8011382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801131e:	2308      	movs	r3, #8
 8011320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011322:	2308      	movs	r3, #8
 8011324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	689b      	ldr	r3, [r3, #8]
 801132c:	0e5b      	lsrs	r3, r3, #25
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f003 0307 	and.w	r3, r3, #7
 8011334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	689b      	ldr	r3, [r3, #8]
 801133c:	0f5b      	lsrs	r3, r3, #29
 801133e:	b2db      	uxtb	r3, r3
 8011340:	f003 0307 	and.w	r3, r3, #7
 8011344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011346:	7bbb      	ldrb	r3, [r7, #14]
 8011348:	7b3a      	ldrb	r2, [r7, #12]
 801134a:	4911      	ldr	r1, [pc, #68]	; (8011390 <UARTEx_SetNbDataToProcess+0x94>)
 801134c:	5c8a      	ldrb	r2, [r1, r2]
 801134e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011352:	7b3a      	ldrb	r2, [r7, #12]
 8011354:	490f      	ldr	r1, [pc, #60]	; (8011394 <UARTEx_SetNbDataToProcess+0x98>)
 8011356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011358:	fb93 f3f2 	sdiv	r3, r3, r2
 801135c:	b29a      	uxth	r2, r3
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011364:	7bfb      	ldrb	r3, [r7, #15]
 8011366:	7b7a      	ldrb	r2, [r7, #13]
 8011368:	4909      	ldr	r1, [pc, #36]	; (8011390 <UARTEx_SetNbDataToProcess+0x94>)
 801136a:	5c8a      	ldrb	r2, [r1, r2]
 801136c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011370:	7b7a      	ldrb	r2, [r7, #13]
 8011372:	4908      	ldr	r1, [pc, #32]	; (8011394 <UARTEx_SetNbDataToProcess+0x98>)
 8011374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011376:	fb93 f3f2 	sdiv	r3, r3, r2
 801137a:	b29a      	uxth	r2, r3
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011382:	bf00      	nop
 8011384:	3714      	adds	r7, #20
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr
 801138e:	bf00      	nop
 8011390:	0801905c 	.word	0x0801905c
 8011394:	08019064 	.word	0x08019064

08011398 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011398:	b480      	push	{r7}
 801139a:	b085      	sub	sp, #20
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2200      	movs	r2, #0
 80113a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80113a8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80113ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	b29a      	uxth	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3714      	adds	r7, #20
 80113be:	46bd      	mov	sp, r7
 80113c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c4:	4770      	bx	lr

080113c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80113c6:	b480      	push	{r7}
 80113c8:	b085      	sub	sp, #20
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80113ce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80113d2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80113da:	b29a      	uxth	r2, r3
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	43db      	mvns	r3, r3
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	4013      	ands	r3, r2
 80113e6:	b29a      	uxth	r2, r3
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80113fc:	b084      	sub	sp, #16
 80113fe:	b480      	push	{r7}
 8011400:	b083      	sub	sp, #12
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	f107 0014 	add.w	r0, r7, #20
 801140a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2201      	movs	r2, #1
 8011412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2200      	movs	r2, #0
 801141a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2200      	movs	r2, #0
 801142a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	b004      	add	sp, #16
 801143c:	4770      	bx	lr
	...

08011440 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011440:	b480      	push	{r7}
 8011442:	b09d      	sub	sp, #116	; 0x74
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801144a:	2300      	movs	r3, #0
 801144c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	4413      	add	r3, r2
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	b29b      	uxth	r3, r3
 801145e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8011462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011466:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	78db      	ldrb	r3, [r3, #3]
 801146e:	2b03      	cmp	r3, #3
 8011470:	d81f      	bhi.n	80114b2 <USB_ActivateEndpoint+0x72>
 8011472:	a201      	add	r2, pc, #4	; (adr r2, 8011478 <USB_ActivateEndpoint+0x38>)
 8011474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011478:	08011489 	.word	0x08011489
 801147c:	080114a5 	.word	0x080114a5
 8011480:	080114bb 	.word	0x080114bb
 8011484:	08011497 	.word	0x08011497
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011488:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801148c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011490:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8011494:	e012      	b.n	80114bc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011496:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801149a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 801149e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80114a2:	e00b      	b.n	80114bc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80114a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80114a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80114ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80114b0:	e004      	b.n	80114bc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80114b2:	2301      	movs	r3, #1
 80114b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80114b8:	e000      	b.n	80114bc <USB_ActivateEndpoint+0x7c>
      break;
 80114ba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80114bc:	687a      	ldr	r2, [r7, #4]
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	009b      	lsls	r3, r3, #2
 80114c4:	441a      	add	r2, r3
 80114c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80114ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80114ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80114d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80114d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114da:	b29b      	uxth	r3, r3
 80114dc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	009b      	lsls	r3, r3, #2
 80114e6:	4413      	add	r3, r2
 80114e8:	881b      	ldrh	r3, [r3, #0]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	b21b      	sxth	r3, r3
 80114ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80114f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80114f6:	b21a      	sxth	r2, r3
 80114f8:	683b      	ldr	r3, [r7, #0]
 80114fa:	781b      	ldrb	r3, [r3, #0]
 80114fc:	b21b      	sxth	r3, r3
 80114fe:	4313      	orrs	r3, r2
 8011500:	b21b      	sxth	r3, r3
 8011502:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8011506:	687a      	ldr	r2, [r7, #4]
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	441a      	add	r2, r3
 8011510:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8011514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801151c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011524:	b29b      	uxth	r3, r3
 8011526:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	7b1b      	ldrb	r3, [r3, #12]
 801152c:	2b00      	cmp	r3, #0
 801152e:	f040 8149 	bne.w	80117c4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	785b      	ldrb	r3, [r3, #1]
 8011536:	2b00      	cmp	r3, #0
 8011538:	f000 8084 	beq.w	8011644 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	61bb      	str	r3, [r7, #24]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011546:	b29b      	uxth	r3, r3
 8011548:	461a      	mov	r2, r3
 801154a:	69bb      	ldr	r3, [r7, #24]
 801154c:	4413      	add	r3, r2
 801154e:	61bb      	str	r3, [r7, #24]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	00da      	lsls	r2, r3, #3
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	4413      	add	r3, r2
 801155a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801155e:	617b      	str	r3, [r7, #20]
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	88db      	ldrh	r3, [r3, #6]
 8011564:	085b      	lsrs	r3, r3, #1
 8011566:	b29b      	uxth	r3, r3
 8011568:	005b      	lsls	r3, r3, #1
 801156a:	b29a      	uxth	r2, r3
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	009b      	lsls	r3, r3, #2
 8011578:	4413      	add	r3, r2
 801157a:	881b      	ldrh	r3, [r3, #0]
 801157c:	827b      	strh	r3, [r7, #18]
 801157e:	8a7b      	ldrh	r3, [r7, #18]
 8011580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011584:	2b00      	cmp	r3, #0
 8011586:	d01b      	beq.n	80115c0 <USB_ActivateEndpoint+0x180>
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	4413      	add	r3, r2
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	b29b      	uxth	r3, r3
 8011596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801159a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801159e:	823b      	strh	r3, [r7, #16]
 80115a0:	687a      	ldr	r2, [r7, #4]
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	009b      	lsls	r3, r3, #2
 80115a8:	441a      	add	r2, r3
 80115aa:	8a3b      	ldrh	r3, [r7, #16]
 80115ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80115bc:	b29b      	uxth	r3, r3
 80115be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	78db      	ldrb	r3, [r3, #3]
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d020      	beq.n	801160a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80115c8:	687a      	ldr	r2, [r7, #4]
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	781b      	ldrb	r3, [r3, #0]
 80115ce:	009b      	lsls	r3, r3, #2
 80115d0:	4413      	add	r3, r2
 80115d2:	881b      	ldrh	r3, [r3, #0]
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80115da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80115de:	81bb      	strh	r3, [r7, #12]
 80115e0:	89bb      	ldrh	r3, [r7, #12]
 80115e2:	f083 0320 	eor.w	r3, r3, #32
 80115e6:	81bb      	strh	r3, [r7, #12]
 80115e8:	687a      	ldr	r2, [r7, #4]
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	441a      	add	r2, r3
 80115f2:	89bb      	ldrh	r3, [r7, #12]
 80115f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80115f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80115fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011604:	b29b      	uxth	r3, r3
 8011606:	8013      	strh	r3, [r2, #0]
 8011608:	e2a6      	b.n	8011b58 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801160a:	687a      	ldr	r2, [r7, #4]
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4413      	add	r3, r2
 8011614:	881b      	ldrh	r3, [r3, #0]
 8011616:	b29b      	uxth	r3, r3
 8011618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801161c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011620:	81fb      	strh	r3, [r7, #14]
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	441a      	add	r2, r3
 801162c:	89fb      	ldrh	r3, [r7, #14]
 801162e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801163a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801163e:	b29b      	uxth	r3, r3
 8011640:	8013      	strh	r3, [r2, #0]
 8011642:	e289      	b.n	8011b58 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	633b      	str	r3, [r7, #48]	; 0x30
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801164e:	b29b      	uxth	r3, r3
 8011650:	461a      	mov	r2, r3
 8011652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011654:	4413      	add	r3, r2
 8011656:	633b      	str	r3, [r7, #48]	; 0x30
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	00da      	lsls	r2, r3, #3
 801165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011660:	4413      	add	r3, r2
 8011662:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	88db      	ldrh	r3, [r3, #6]
 801166c:	085b      	lsrs	r3, r3, #1
 801166e:	b29b      	uxth	r3, r3
 8011670:	005b      	lsls	r3, r3, #1
 8011672:	b29a      	uxth	r2, r3
 8011674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011676:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	62bb      	str	r3, [r7, #40]	; 0x28
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011682:	b29b      	uxth	r3, r3
 8011684:	461a      	mov	r2, r3
 8011686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011688:	4413      	add	r3, r2
 801168a:	62bb      	str	r3, [r7, #40]	; 0x28
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	00da      	lsls	r2, r3, #3
 8011692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011694:	4413      	add	r3, r2
 8011696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801169a:	627b      	str	r3, [r7, #36]	; 0x24
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	691b      	ldr	r3, [r3, #16]
 80116a0:	2b3e      	cmp	r3, #62	; 0x3e
 80116a2:	d918      	bls.n	80116d6 <USB_ActivateEndpoint+0x296>
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	691b      	ldr	r3, [r3, #16]
 80116a8:	095b      	lsrs	r3, r3, #5
 80116aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	691b      	ldr	r3, [r3, #16]
 80116b0:	f003 031f 	and.w	r3, r3, #31
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d102      	bne.n	80116be <USB_ActivateEndpoint+0x27e>
 80116b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116ba:	3b01      	subs	r3, #1
 80116bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80116be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	029b      	lsls	r3, r3, #10
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	801a      	strh	r2, [r3, #0]
 80116d4:	e029      	b.n	801172a <USB_ActivateEndpoint+0x2ea>
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	691b      	ldr	r3, [r3, #16]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d112      	bne.n	8011704 <USB_ActivateEndpoint+0x2c4>
 80116de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ec:	801a      	strh	r2, [r3, #0]
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	881b      	ldrh	r3, [r3, #0]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011700:	801a      	strh	r2, [r3, #0]
 8011702:	e012      	b.n	801172a <USB_ActivateEndpoint+0x2ea>
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	085b      	lsrs	r3, r3, #1
 801170a:	66bb      	str	r3, [r7, #104]	; 0x68
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	691b      	ldr	r3, [r3, #16]
 8011710:	f003 0301 	and.w	r3, r3, #1
 8011714:	2b00      	cmp	r3, #0
 8011716:	d002      	beq.n	801171e <USB_ActivateEndpoint+0x2de>
 8011718:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801171a:	3301      	adds	r3, #1
 801171c:	66bb      	str	r3, [r7, #104]	; 0x68
 801171e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011720:	b29b      	uxth	r3, r3
 8011722:	029b      	lsls	r3, r3, #10
 8011724:	b29a      	uxth	r2, r3
 8011726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011728:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	847b      	strh	r3, [r7, #34]	; 0x22
 8011738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801173a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801173e:	2b00      	cmp	r3, #0
 8011740:	d01b      	beq.n	801177a <USB_ActivateEndpoint+0x33a>
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	4413      	add	r3, r2
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	b29b      	uxth	r3, r3
 8011750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011758:	843b      	strh	r3, [r7, #32]
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	441a      	add	r2, r3
 8011764:	8c3b      	ldrh	r3, [r7, #32]
 8011766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801176a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801176e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011776:	b29b      	uxth	r3, r3
 8011778:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	4413      	add	r3, r2
 8011784:	881b      	ldrh	r3, [r3, #0]
 8011786:	b29b      	uxth	r3, r3
 8011788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801178c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011790:	83fb      	strh	r3, [r7, #30]
 8011792:	8bfb      	ldrh	r3, [r7, #30]
 8011794:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011798:	83fb      	strh	r3, [r7, #30]
 801179a:	8bfb      	ldrh	r3, [r7, #30]
 801179c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80117a0:	83fb      	strh	r3, [r7, #30]
 80117a2:	687a      	ldr	r2, [r7, #4]
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	009b      	lsls	r3, r3, #2
 80117aa:	441a      	add	r2, r3
 80117ac:	8bfb      	ldrh	r3, [r7, #30]
 80117ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117be:	b29b      	uxth	r3, r3
 80117c0:	8013      	strh	r3, [r2, #0]
 80117c2:	e1c9      	b.n	8011b58 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	78db      	ldrb	r3, [r3, #3]
 80117c8:	2b02      	cmp	r3, #2
 80117ca:	d11e      	bne.n	801180a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	009b      	lsls	r3, r3, #2
 80117d4:	4413      	add	r3, r2
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117e2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80117e6:	687a      	ldr	r2, [r7, #4]
 80117e8:	683b      	ldr	r3, [r7, #0]
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	441a      	add	r2, r3
 80117f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80117f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011804:	b29b      	uxth	r3, r3
 8011806:	8013      	strh	r3, [r2, #0]
 8011808:	e01d      	b.n	8011846 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801180a:	687a      	ldr	r2, [r7, #4]
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	4413      	add	r3, r2
 8011814:	881b      	ldrh	r3, [r3, #0]
 8011816:	b29b      	uxth	r3, r3
 8011818:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801181c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011820:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	441a      	add	r2, r3
 801182e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8011832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801183a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801183e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011842:	b29b      	uxth	r3, r3
 8011844:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	65fb      	str	r3, [r7, #92]	; 0x5c
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011850:	b29b      	uxth	r3, r3
 8011852:	461a      	mov	r2, r3
 8011854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011856:	4413      	add	r3, r2
 8011858:	65fb      	str	r3, [r7, #92]	; 0x5c
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	00da      	lsls	r2, r3, #3
 8011860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011862:	4413      	add	r3, r2
 8011864:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011868:	65bb      	str	r3, [r7, #88]	; 0x58
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	891b      	ldrh	r3, [r3, #8]
 801186e:	085b      	lsrs	r3, r3, #1
 8011870:	b29b      	uxth	r3, r3
 8011872:	005b      	lsls	r3, r3, #1
 8011874:	b29a      	uxth	r2, r3
 8011876:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011878:	801a      	strh	r2, [r3, #0]
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	657b      	str	r3, [r7, #84]	; 0x54
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011884:	b29b      	uxth	r3, r3
 8011886:	461a      	mov	r2, r3
 8011888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801188a:	4413      	add	r3, r2
 801188c:	657b      	str	r3, [r7, #84]	; 0x54
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	781b      	ldrb	r3, [r3, #0]
 8011892:	00da      	lsls	r2, r3, #3
 8011894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011896:	4413      	add	r3, r2
 8011898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801189c:	653b      	str	r3, [r7, #80]	; 0x50
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	895b      	ldrh	r3, [r3, #10]
 80118a2:	085b      	lsrs	r3, r3, #1
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	005b      	lsls	r3, r3, #1
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	785b      	ldrb	r3, [r3, #1]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f040 8093 	bne.w	80119de <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80118b8:	687a      	ldr	r2, [r7, #4]
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	4413      	add	r3, r2
 80118c2:	881b      	ldrh	r3, [r3, #0]
 80118c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80118c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80118cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d01b      	beq.n	801190c <USB_ActivateEndpoint+0x4cc>
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	781b      	ldrb	r3, [r3, #0]
 80118da:	009b      	lsls	r3, r3, #2
 80118dc:	4413      	add	r3, r2
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	b29b      	uxth	r3, r3
 80118e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80118e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	781b      	ldrb	r3, [r3, #0]
 80118f2:	009b      	lsls	r3, r3, #2
 80118f4:	441a      	add	r2, r3
 80118f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80118f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011908:	b29b      	uxth	r3, r3
 801190a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4413      	add	r3, r2
 8011916:	881b      	ldrh	r3, [r3, #0]
 8011918:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801191a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801191c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01b      	beq.n	801195c <USB_ActivateEndpoint+0x51c>
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	781b      	ldrb	r3, [r3, #0]
 801192a:	009b      	lsls	r3, r3, #2
 801192c:	4413      	add	r3, r2
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	b29b      	uxth	r3, r3
 8011932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801193a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	441a      	add	r2, r3
 8011946:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801194c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011958:	b29b      	uxth	r3, r3
 801195a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	4413      	add	r3, r2
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	b29b      	uxth	r3, r3
 801196a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801196e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011972:	873b      	strh	r3, [r7, #56]	; 0x38
 8011974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011976:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801197a:	873b      	strh	r3, [r7, #56]	; 0x38
 801197c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801197e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011982:	873b      	strh	r3, [r7, #56]	; 0x38
 8011984:	687a      	ldr	r2, [r7, #4]
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	441a      	add	r2, r3
 801198e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80119a4:	687a      	ldr	r2, [r7, #4]
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	781b      	ldrb	r3, [r3, #0]
 80119aa:	009b      	lsls	r3, r3, #2
 80119ac:	4413      	add	r3, r2
 80119ae:	881b      	ldrh	r3, [r3, #0]
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80119ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	441a      	add	r2, r3
 80119c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80119c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80119d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119d8:	b29b      	uxth	r3, r3
 80119da:	8013      	strh	r3, [r2, #0]
 80119dc:	e0bc      	b.n	8011b58 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4413      	add	r3, r2
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80119ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80119f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d01d      	beq.n	8011a36 <USB_ActivateEndpoint+0x5f6>
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	009b      	lsls	r3, r3, #2
 8011a02:	4413      	add	r3, r2
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	b29b      	uxth	r3, r3
 8011a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a10:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	441a      	add	r2, r3
 8011a1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8011a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a36:	687a      	ldr	r2, [r7, #4]
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	4413      	add	r3, r2
 8011a40:	881b      	ldrh	r3, [r3, #0]
 8011a42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011a46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d01d      	beq.n	8011a8e <USB_ActivateEndpoint+0x64e>
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4413      	add	r3, r2
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	b29b      	uxth	r3, r3
 8011a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	441a      	add	r2, r3
 8011a76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	78db      	ldrb	r3, [r3, #3]
 8011a92:	2b01      	cmp	r3, #1
 8011a94:	d024      	beq.n	8011ae0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	4413      	add	r3, r2
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011aac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011ab4:	f083 0320 	eor.w	r3, r3, #32
 8011ab8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	441a      	add	r2, r3
 8011ac6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	8013      	strh	r3, [r2, #0]
 8011ade:	e01d      	b.n	8011b1c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011af2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011af6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	441a      	add	r2, r3
 8011b04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011b1c:	687a      	ldr	r2, [r7, #4]
 8011b1e:	683b      	ldr	r3, [r7, #0]
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	4413      	add	r3, r2
 8011b26:	881b      	ldrh	r3, [r3, #0]
 8011b28:	b29b      	uxth	r3, r3
 8011b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b32:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	441a      	add	r2, r3
 8011b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011b58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	3774      	adds	r7, #116	; 0x74
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr

08011b68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011b68:	b480      	push	{r7}
 8011b6a:	b08d      	sub	sp, #52	; 0x34
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	7b1b      	ldrb	r3, [r3, #12]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	f040 808e 	bne.w	8011c98 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	785b      	ldrb	r3, [r3, #1]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d044      	beq.n	8011c0e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4413      	add	r3, r2
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	81bb      	strh	r3, [r7, #12]
 8011b92:	89bb      	ldrh	r3, [r7, #12]
 8011b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d01b      	beq.n	8011bd4 <USB_DeactivateEndpoint+0x6c>
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	781b      	ldrb	r3, [r3, #0]
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	4413      	add	r3, r2
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	b29b      	uxth	r3, r3
 8011baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011bb2:	817b      	strh	r3, [r7, #10]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	781b      	ldrb	r3, [r3, #0]
 8011bba:	009b      	lsls	r3, r3, #2
 8011bbc:	441a      	add	r2, r3
 8011bbe:	897b      	ldrh	r3, [r7, #10]
 8011bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011bd4:	687a      	ldr	r2, [r7, #4]
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	4413      	add	r3, r2
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011bea:	813b      	strh	r3, [r7, #8]
 8011bec:	687a      	ldr	r2, [r7, #4]
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	441a      	add	r2, r3
 8011bf6:	893b      	ldrh	r3, [r7, #8]
 8011bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	8013      	strh	r3, [r2, #0]
 8011c0c:	e192      	b.n	8011f34 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4413      	add	r3, r2
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	827b      	strh	r3, [r7, #18]
 8011c1c:	8a7b      	ldrh	r3, [r7, #18]
 8011c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d01b      	beq.n	8011c5e <USB_DeactivateEndpoint+0xf6>
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	4413      	add	r3, r2
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	b29b      	uxth	r3, r3
 8011c34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c3c:	823b      	strh	r3, [r7, #16]
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	441a      	add	r2, r3
 8011c48:	8a3b      	ldrh	r3, [r7, #16]
 8011c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5a:	b29b      	uxth	r3, r3
 8011c5c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011c5e:	687a      	ldr	r2, [r7, #4]
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	4413      	add	r3, r2
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	b29b      	uxth	r3, r3
 8011c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c74:	81fb      	strh	r3, [r7, #14]
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	441a      	add	r2, r3
 8011c80:	89fb      	ldrh	r3, [r7, #14]
 8011c82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	8013      	strh	r3, [r2, #0]
 8011c96:	e14d      	b.n	8011f34 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	785b      	ldrb	r3, [r3, #1]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f040 80a5 	bne.w	8011dec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	843b      	strh	r3, [r7, #32]
 8011cb0:	8c3b      	ldrh	r3, [r7, #32]
 8011cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d01b      	beq.n	8011cf2 <USB_DeactivateEndpoint+0x18a>
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	b29b      	uxth	r3, r3
 8011cc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011cd0:	83fb      	strh	r3, [r7, #30]
 8011cd2:	687a      	ldr	r2, [r7, #4]
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	441a      	add	r2, r3
 8011cdc:	8bfb      	ldrh	r3, [r7, #30]
 8011cde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	83bb      	strh	r3, [r7, #28]
 8011d00:	8bbb      	ldrh	r3, [r7, #28]
 8011d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d01b      	beq.n	8011d42 <USB_DeactivateEndpoint+0x1da>
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d20:	837b      	strh	r3, [r7, #26]
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	683b      	ldr	r3, [r7, #0]
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	441a      	add	r2, r3
 8011d2c:	8b7b      	ldrh	r3, [r7, #26]
 8011d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	4413      	add	r3, r2
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	b29b      	uxth	r3, r3
 8011d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d58:	833b      	strh	r3, [r7, #24]
 8011d5a:	687a      	ldr	r2, [r7, #4]
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	781b      	ldrb	r3, [r3, #0]
 8011d60:	009b      	lsls	r3, r3, #2
 8011d62:	441a      	add	r2, r3
 8011d64:	8b3b      	ldrh	r3, [r7, #24]
 8011d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	881b      	ldrh	r3, [r3, #0]
 8011d86:	b29b      	uxth	r3, r3
 8011d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d90:	82fb      	strh	r3, [r7, #22]
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	781b      	ldrb	r3, [r3, #0]
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	441a      	add	r2, r3
 8011d9c:	8afb      	ldrh	r3, [r7, #22]
 8011d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dae:	b29b      	uxth	r3, r3
 8011db0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	4413      	add	r3, r2
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dc8:	82bb      	strh	r3, [r7, #20]
 8011dca:	687a      	ldr	r2, [r7, #4]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	009b      	lsls	r3, r3, #2
 8011dd2:	441a      	add	r2, r3
 8011dd4:	8abb      	ldrh	r3, [r7, #20]
 8011dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011de6:	b29b      	uxth	r3, r3
 8011de8:	8013      	strh	r3, [r2, #0]
 8011dea:	e0a3      	b.n	8011f34 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d01b      	beq.n	8011e3c <USB_DeactivateEndpoint+0x2d4>
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	4413      	add	r3, r2
 8011e0e:	881b      	ldrh	r3, [r3, #0]
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	781b      	ldrb	r3, [r3, #0]
 8011e22:	009b      	lsls	r3, r3, #2
 8011e24:	441a      	add	r2, r3
 8011e26:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	4413      	add	r3, r2
 8011e46:	881b      	ldrh	r3, [r3, #0]
 8011e48:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011e4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d01b      	beq.n	8011e8c <USB_DeactivateEndpoint+0x324>
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4413      	add	r3, r2
 8011e5e:	881b      	ldrh	r3, [r3, #0]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	683b      	ldr	r3, [r7, #0]
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	009b      	lsls	r3, r3, #2
 8011e74:	441a      	add	r2, r3
 8011e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	4413      	add	r3, r2
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	b29b      	uxth	r3, r3
 8011e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ea2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	441a      	add	r2, r3
 8011eae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	4413      	add	r3, r2
 8011ece:	881b      	ldrh	r3, [r3, #0]
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ed6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011eda:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	441a      	add	r2, r3
 8011ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	4413      	add	r3, r2
 8011f06:	881b      	ldrh	r3, [r3, #0]
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f12:	847b      	strh	r3, [r7, #34]	; 0x22
 8011f14:	687a      	ldr	r2, [r7, #4]
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	009b      	lsls	r3, r3, #2
 8011f1c:	441a      	add	r2, r3
 8011f1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011f34:	2300      	movs	r3, #0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3734      	adds	r7, #52	; 0x34
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b0c2      	sub	sp, #264	; 0x108
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011f50:	6018      	str	r0, [r3, #0]
 8011f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f5a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	785b      	ldrb	r3, [r3, #1]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	f040 867b 	bne.w	8012c64 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8011f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	699a      	ldr	r2, [r3, #24]
 8011f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	691b      	ldr	r3, [r3, #16]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d908      	bls.n	8011f9c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8011f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	691b      	ldr	r3, [r3, #16]
 8011f96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011f9a:	e007      	b.n	8011fac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8011f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	699b      	ldr	r3, [r3, #24]
 8011fa8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	7b1b      	ldrb	r3, [r3, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d13a      	bne.n	8012032 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	6959      	ldr	r1, [r3, #20]
 8011fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	88da      	ldrh	r2, [r3, #6]
 8011fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011fde:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011fe2:	6800      	ldr	r0, [r0, #0]
 8011fe4:	f001 fc1d 	bl	8013822 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	613b      	str	r3, [r7, #16]
 8011ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ff8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012002:	b29b      	uxth	r3, r3
 8012004:	461a      	mov	r2, r3
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	4413      	add	r3, r2
 801200a:	613b      	str	r3, [r7, #16]
 801200c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012010:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	00da      	lsls	r2, r3, #3
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	4413      	add	r3, r2
 801201e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012022:	60fb      	str	r3, [r7, #12]
 8012024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012028:	b29a      	uxth	r2, r3
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	801a      	strh	r2, [r3, #0]
 801202e:	f000 bde3 	b.w	8012bf8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	78db      	ldrb	r3, [r3, #3]
 801203e:	2b02      	cmp	r3, #2
 8012040:	f040 843a 	bne.w	80128b8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	6a1a      	ldr	r2, [r3, #32]
 8012050:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012054:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	691b      	ldr	r3, [r3, #16]
 801205c:	429a      	cmp	r2, r3
 801205e:	f240 83b7 	bls.w	80127d0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801206a:	681a      	ldr	r2, [r3, #0]
 801206c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	881b      	ldrh	r3, [r3, #0]
 801207e:	b29b      	uxth	r3, r3
 8012080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012088:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801208c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801209a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	441a      	add	r2, r3
 80120a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80120aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80120b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80120be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	6a1a      	ldr	r2, [r3, #32]
 80120ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120ce:	1ad2      	subs	r2, r2, r3
 80120d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80120dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f000 81b3 	beq.w	801246a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	633b      	str	r3, [r7, #48]	; 0x30
 8012110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	785b      	ldrb	r3, [r3, #1]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d16d      	bne.n	80121fc <USB_EPStartXfer+0x2ba>
 8012120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	62bb      	str	r3, [r7, #40]	; 0x28
 801212c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012130:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801213a:	b29b      	uxth	r3, r3
 801213c:	461a      	mov	r2, r3
 801213e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012140:	4413      	add	r3, r2
 8012142:	62bb      	str	r3, [r7, #40]	; 0x28
 8012144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	00da      	lsls	r2, r3, #3
 8012152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012154:	4413      	add	r3, r2
 8012156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801215a:	627b      	str	r3, [r7, #36]	; 0x24
 801215c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012160:	2b3e      	cmp	r3, #62	; 0x3e
 8012162:	d91c      	bls.n	801219e <USB_EPStartXfer+0x25c>
 8012164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012168:	095b      	lsrs	r3, r3, #5
 801216a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801216e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012172:	f003 031f 	and.w	r3, r3, #31
 8012176:	2b00      	cmp	r3, #0
 8012178:	d104      	bne.n	8012184 <USB_EPStartXfer+0x242>
 801217a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801217e:	3b01      	subs	r3, #1
 8012180:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8012184:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8012188:	b29b      	uxth	r3, r3
 801218a:	029b      	lsls	r3, r3, #10
 801218c:	b29b      	uxth	r3, r3
 801218e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012196:	b29a      	uxth	r2, r3
 8012198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801219a:	801a      	strh	r2, [r3, #0]
 801219c:	e053      	b.n	8012246 <USB_EPStartXfer+0x304>
 801219e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d112      	bne.n	80121cc <USB_EPStartXfer+0x28a>
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	881b      	ldrh	r3, [r3, #0]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b4:	801a      	strh	r2, [r3, #0]
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	881b      	ldrh	r3, [r3, #0]
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c8:	801a      	strh	r2, [r3, #0]
 80121ca:	e03c      	b.n	8012246 <USB_EPStartXfer+0x304>
 80121cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121d0:	085b      	lsrs	r3, r3, #1
 80121d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80121d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121da:	f003 0301 	and.w	r3, r3, #1
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d004      	beq.n	80121ec <USB_EPStartXfer+0x2aa>
 80121e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80121e6:	3301      	adds	r3, #1
 80121e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80121ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	029b      	lsls	r3, r3, #10
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f8:	801a      	strh	r2, [r3, #0]
 80121fa:	e024      	b.n	8012246 <USB_EPStartXfer+0x304>
 80121fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	785b      	ldrb	r3, [r3, #1]
 8012208:	2b01      	cmp	r3, #1
 801220a:	d11c      	bne.n	8012246 <USB_EPStartXfer+0x304>
 801220c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012210:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801221a:	b29b      	uxth	r3, r3
 801221c:	461a      	mov	r2, r3
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	4413      	add	r3, r2
 8012222:	633b      	str	r3, [r7, #48]	; 0x30
 8012224:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012228:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	781b      	ldrb	r3, [r3, #0]
 8012230:	00da      	lsls	r2, r3, #3
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	4413      	add	r3, r2
 8012236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801223a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801223c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012240:	b29a      	uxth	r2, r3
 8012242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012244:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801224a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	895b      	ldrh	r3, [r3, #10]
 8012252:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801225a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	6959      	ldr	r1, [r3, #20]
 8012262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012266:	b29b      	uxth	r3, r3
 8012268:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801226c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012270:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012274:	6800      	ldr	r0, [r0, #0]
 8012276:	f001 fad4 	bl	8013822 <USB_WritePMA>
            ep->xfer_buff += len;
 801227a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801227e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	695a      	ldr	r2, [r3, #20]
 8012286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801228a:	441a      	add	r2, r3
 801228c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801229c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	6a1a      	ldr	r2, [r3, #32]
 80122a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	691b      	ldr	r3, [r3, #16]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d90f      	bls.n	80122d4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80122b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	6a1a      	ldr	r2, [r3, #32]
 80122c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122c4:	1ad2      	subs	r2, r2, r3
 80122c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	621a      	str	r2, [r3, #32]
 80122d2:	e00e      	b.n	80122f2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80122d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	6a1b      	ldr	r3, [r3, #32]
 80122e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80122e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	2200      	movs	r2, #0
 80122f0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80122f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	785b      	ldrb	r3, [r3, #1]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d16d      	bne.n	80123de <USB_EPStartXfer+0x49c>
 8012302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	61bb      	str	r3, [r7, #24]
 801230e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801231c:	b29b      	uxth	r3, r3
 801231e:	461a      	mov	r2, r3
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	4413      	add	r3, r2
 8012324:	61bb      	str	r3, [r7, #24]
 8012326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	00da      	lsls	r2, r3, #3
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	4413      	add	r3, r2
 8012338:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801233c:	617b      	str	r3, [r7, #20]
 801233e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012342:	2b3e      	cmp	r3, #62	; 0x3e
 8012344:	d91c      	bls.n	8012380 <USB_EPStartXfer+0x43e>
 8012346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801234a:	095b      	lsrs	r3, r3, #5
 801234c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012354:	f003 031f 	and.w	r3, r3, #31
 8012358:	2b00      	cmp	r3, #0
 801235a:	d104      	bne.n	8012366 <USB_EPStartXfer+0x424>
 801235c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012360:	3b01      	subs	r3, #1
 8012362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8012366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801236a:	b29b      	uxth	r3, r3
 801236c:	029b      	lsls	r3, r3, #10
 801236e:	b29b      	uxth	r3, r3
 8012370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012378:	b29a      	uxth	r2, r3
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	801a      	strh	r2, [r3, #0]
 801237e:	e059      	b.n	8012434 <USB_EPStartXfer+0x4f2>
 8012380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012384:	2b00      	cmp	r3, #0
 8012386:	d112      	bne.n	80123ae <USB_EPStartXfer+0x46c>
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	b29b      	uxth	r3, r3
 801238e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012392:	b29a      	uxth	r2, r3
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	801a      	strh	r2, [r3, #0]
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	881b      	ldrh	r3, [r3, #0]
 801239c:	b29b      	uxth	r3, r3
 801239e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123a6:	b29a      	uxth	r2, r3
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	801a      	strh	r2, [r3, #0]
 80123ac:	e042      	b.n	8012434 <USB_EPStartXfer+0x4f2>
 80123ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123b2:	085b      	lsrs	r3, r3, #1
 80123b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80123b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123bc:	f003 0301 	and.w	r3, r3, #1
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d004      	beq.n	80123ce <USB_EPStartXfer+0x48c>
 80123c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80123c8:	3301      	adds	r3, #1
 80123ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80123ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	029b      	lsls	r3, r3, #10
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	697b      	ldr	r3, [r7, #20]
 80123da:	801a      	strh	r2, [r3, #0]
 80123dc:	e02a      	b.n	8012434 <USB_EPStartXfer+0x4f2>
 80123de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	785b      	ldrb	r3, [r3, #1]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d122      	bne.n	8012434 <USB_EPStartXfer+0x4f2>
 80123ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	623b      	str	r3, [r7, #32]
 80123fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80123fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012408:	b29b      	uxth	r3, r3
 801240a:	461a      	mov	r2, r3
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	4413      	add	r3, r2
 8012410:	623b      	str	r3, [r7, #32]
 8012412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	00da      	lsls	r2, r3, #3
 8012420:	6a3b      	ldr	r3, [r7, #32]
 8012422:	4413      	add	r3, r2
 8012424:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012428:	61fb      	str	r3, [r7, #28]
 801242a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801242e:	b29a      	uxth	r2, r3
 8012430:	69fb      	ldr	r3, [r7, #28]
 8012432:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	891b      	ldrh	r3, [r3, #8]
 8012440:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	6959      	ldr	r1, [r3, #20]
 8012450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012454:	b29b      	uxth	r3, r3
 8012456:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801245a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 801245e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012462:	6800      	ldr	r0, [r0, #0]
 8012464:	f001 f9dd 	bl	8013822 <USB_WritePMA>
 8012468:	e3c6      	b.n	8012bf8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801246a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801246e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	785b      	ldrb	r3, [r3, #1]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d16d      	bne.n	8012556 <USB_EPStartXfer+0x614>
 801247a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801247e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	64bb      	str	r3, [r7, #72]	; 0x48
 8012486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801248a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012494:	b29b      	uxth	r3, r3
 8012496:	461a      	mov	r2, r3
 8012498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801249a:	4413      	add	r3, r2
 801249c:	64bb      	str	r3, [r7, #72]	; 0x48
 801249e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	00da      	lsls	r2, r3, #3
 80124ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124ae:	4413      	add	r3, r2
 80124b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80124b4:	647b      	str	r3, [r7, #68]	; 0x44
 80124b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124ba:	2b3e      	cmp	r3, #62	; 0x3e
 80124bc:	d91c      	bls.n	80124f8 <USB_EPStartXfer+0x5b6>
 80124be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124c2:	095b      	lsrs	r3, r3, #5
 80124c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80124c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124cc:	f003 031f 	and.w	r3, r3, #31
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d104      	bne.n	80124de <USB_EPStartXfer+0x59c>
 80124d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80124d8:	3b01      	subs	r3, #1
 80124da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80124de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	029b      	lsls	r3, r3, #10
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124f4:	801a      	strh	r2, [r3, #0]
 80124f6:	e059      	b.n	80125ac <USB_EPStartXfer+0x66a>
 80124f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d112      	bne.n	8012526 <USB_EPStartXfer+0x5e4>
 8012500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	b29b      	uxth	r3, r3
 8012506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801250a:	b29a      	uxth	r2, r3
 801250c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801250e:	801a      	strh	r2, [r3, #0]
 8012510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	b29b      	uxth	r3, r3
 8012516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801251a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801251e:	b29a      	uxth	r2, r3
 8012520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012522:	801a      	strh	r2, [r3, #0]
 8012524:	e042      	b.n	80125ac <USB_EPStartXfer+0x66a>
 8012526:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801252a:	085b      	lsrs	r3, r3, #1
 801252c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012534:	f003 0301 	and.w	r3, r3, #1
 8012538:	2b00      	cmp	r3, #0
 801253a:	d004      	beq.n	8012546 <USB_EPStartXfer+0x604>
 801253c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012540:	3301      	adds	r3, #1
 8012542:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8012546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801254a:	b29b      	uxth	r3, r3
 801254c:	029b      	lsls	r3, r3, #10
 801254e:	b29a      	uxth	r2, r3
 8012550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012552:	801a      	strh	r2, [r3, #0]
 8012554:	e02a      	b.n	80125ac <USB_EPStartXfer+0x66a>
 8012556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801255a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	785b      	ldrb	r3, [r3, #1]
 8012562:	2b01      	cmp	r3, #1
 8012564:	d122      	bne.n	80125ac <USB_EPStartXfer+0x66a>
 8012566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801256a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	653b      	str	r3, [r7, #80]	; 0x50
 8012572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012580:	b29b      	uxth	r3, r3
 8012582:	461a      	mov	r2, r3
 8012584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012586:	4413      	add	r3, r2
 8012588:	653b      	str	r3, [r7, #80]	; 0x50
 801258a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801258e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	00da      	lsls	r2, r3, #3
 8012598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801259a:	4413      	add	r3, r2
 801259c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80125a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80125a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80125ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	891b      	ldrh	r3, [r3, #8]
 80125b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80125bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	6959      	ldr	r1, [r3, #20]
 80125c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80125d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80125d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80125da:	6800      	ldr	r0, [r0, #0]
 80125dc:	f001 f921 	bl	8013822 <USB_WritePMA>
            ep->xfer_buff += len;
 80125e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	695a      	ldr	r2, [r3, #20]
 80125ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125f0:	441a      	add	r2, r3
 80125f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80125f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80125fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	6a1a      	ldr	r2, [r3, #32]
 801260a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801260e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	429a      	cmp	r2, r3
 8012618:	d90f      	bls.n	801263a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 801261a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801261e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	6a1a      	ldr	r2, [r3, #32]
 8012626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801262a:	1ad2      	subs	r2, r2, r3
 801262c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	621a      	str	r2, [r3, #32]
 8012638:	e00e      	b.n	8012658 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 801263a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801263e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	6a1b      	ldr	r3, [r3, #32]
 8012646:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801264a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801264e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	2200      	movs	r2, #0
 8012656:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	643b      	str	r3, [r7, #64]	; 0x40
 8012664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	785b      	ldrb	r3, [r3, #1]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d16d      	bne.n	8012750 <USB_EPStartXfer+0x80e>
 8012674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801268e:	b29b      	uxth	r3, r3
 8012690:	461a      	mov	r2, r3
 8012692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012694:	4413      	add	r3, r2
 8012696:	63bb      	str	r3, [r7, #56]	; 0x38
 8012698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801269c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	00da      	lsls	r2, r3, #3
 80126a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a8:	4413      	add	r3, r2
 80126aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80126ae:	637b      	str	r3, [r7, #52]	; 0x34
 80126b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126b4:	2b3e      	cmp	r3, #62	; 0x3e
 80126b6:	d91c      	bls.n	80126f2 <USB_EPStartXfer+0x7b0>
 80126b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126bc:	095b      	lsrs	r3, r3, #5
 80126be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80126c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126c6:	f003 031f 	and.w	r3, r3, #31
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d104      	bne.n	80126d8 <USB_EPStartXfer+0x796>
 80126ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80126d2:	3b01      	subs	r3, #1
 80126d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80126d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80126dc:	b29b      	uxth	r3, r3
 80126de:	029b      	lsls	r3, r3, #10
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126ea:	b29a      	uxth	r2, r3
 80126ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126ee:	801a      	strh	r2, [r3, #0]
 80126f0:	e053      	b.n	801279a <USB_EPStartXfer+0x858>
 80126f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d112      	bne.n	8012720 <USB_EPStartXfer+0x7de>
 80126fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	b29b      	uxth	r3, r3
 8012700:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012704:	b29a      	uxth	r2, r3
 8012706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012708:	801a      	strh	r2, [r3, #0]
 801270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	b29b      	uxth	r3, r3
 8012710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012718:	b29a      	uxth	r2, r3
 801271a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801271c:	801a      	strh	r2, [r3, #0]
 801271e:	e03c      	b.n	801279a <USB_EPStartXfer+0x858>
 8012720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012724:	085b      	lsrs	r3, r3, #1
 8012726:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801272a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801272e:	f003 0301 	and.w	r3, r3, #1
 8012732:	2b00      	cmp	r3, #0
 8012734:	d004      	beq.n	8012740 <USB_EPStartXfer+0x7fe>
 8012736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801273a:	3301      	adds	r3, #1
 801273c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8012740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012744:	b29b      	uxth	r3, r3
 8012746:	029b      	lsls	r3, r3, #10
 8012748:	b29a      	uxth	r2, r3
 801274a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801274c:	801a      	strh	r2, [r3, #0]
 801274e:	e024      	b.n	801279a <USB_EPStartXfer+0x858>
 8012750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	785b      	ldrb	r3, [r3, #1]
 801275c:	2b01      	cmp	r3, #1
 801275e:	d11c      	bne.n	801279a <USB_EPStartXfer+0x858>
 8012760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801276e:	b29b      	uxth	r3, r3
 8012770:	461a      	mov	r2, r3
 8012772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012774:	4413      	add	r3, r2
 8012776:	643b      	str	r3, [r7, #64]	; 0x40
 8012778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801277c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	00da      	lsls	r2, r3, #3
 8012786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012788:	4413      	add	r3, r2
 801278a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801278e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012794:	b29a      	uxth	r2, r3
 8012796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012798:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801279a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801279e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	895b      	ldrh	r3, [r3, #10]
 80127a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	6959      	ldr	r1, [r3, #20]
 80127b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80127c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80127c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80127c8:	6800      	ldr	r0, [r0, #0]
 80127ca:	f001 f82a 	bl	8013822 <USB_WritePMA>
 80127ce:	e213      	b.n	8012bf8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80127d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	6a1b      	ldr	r3, [r3, #32]
 80127dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80127e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80127ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	781b      	ldrb	r3, [r3, #0]
 80127f6:	009b      	lsls	r3, r3, #2
 80127f8:	4413      	add	r3, r2
 80127fa:	881b      	ldrh	r3, [r3, #0]
 80127fc:	b29b      	uxth	r3, r3
 80127fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8012802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012806:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801280a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801280e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012812:	681a      	ldr	r2, [r3, #0]
 8012814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012818:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	441a      	add	r2, r3
 8012824:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8012828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801282c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012838:	b29b      	uxth	r3, r3
 801283a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801283c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801284c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012856:	b29b      	uxth	r3, r3
 8012858:	461a      	mov	r2, r3
 801285a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801285c:	4413      	add	r3, r2
 801285e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	00da      	lsls	r2, r3, #3
 801286e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012870:	4413      	add	r3, r2
 8012872:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012876:	65bb      	str	r3, [r7, #88]	; 0x58
 8012878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801287c:	b29a      	uxth	r2, r3
 801287e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012880:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	891b      	ldrh	r3, [r3, #8]
 801288e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	6959      	ldr	r1, [r3, #20]
 801289e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80128a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80128ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80128b0:	6800      	ldr	r0, [r0, #0]
 80128b2:	f000 ffb6 	bl	8013822 <USB_WritePMA>
 80128b6:	e19f      	b.n	8012bf8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80128b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	6a1a      	ldr	r2, [r3, #32]
 80128c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128c8:	1ad2      	subs	r2, r2, r3
 80128ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80128d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80128e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	009b      	lsls	r3, r3, #2
 80128ee:	4413      	add	r3, r2
 80128f0:	881b      	ldrh	r3, [r3, #0]
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f000 80bc 	beq.w	8012a76 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80128fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	673b      	str	r3, [r7, #112]	; 0x70
 801290a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801290e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	785b      	ldrb	r3, [r3, #1]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d16d      	bne.n	80129f6 <USB_EPStartXfer+0xab4>
 801291a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801291e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	66bb      	str	r3, [r7, #104]	; 0x68
 8012926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801292a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012934:	b29b      	uxth	r3, r3
 8012936:	461a      	mov	r2, r3
 8012938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801293a:	4413      	add	r3, r2
 801293c:	66bb      	str	r3, [r7, #104]	; 0x68
 801293e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	781b      	ldrb	r3, [r3, #0]
 801294a:	00da      	lsls	r2, r3, #3
 801294c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801294e:	4413      	add	r3, r2
 8012950:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012954:	667b      	str	r3, [r7, #100]	; 0x64
 8012956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801295a:	2b3e      	cmp	r3, #62	; 0x3e
 801295c:	d91c      	bls.n	8012998 <USB_EPStartXfer+0xa56>
 801295e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012962:	095b      	lsrs	r3, r3, #5
 8012964:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8012968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801296c:	f003 031f 	and.w	r3, r3, #31
 8012970:	2b00      	cmp	r3, #0
 8012972:	d104      	bne.n	801297e <USB_EPStartXfer+0xa3c>
 8012974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012978:	3b01      	subs	r3, #1
 801297a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801297e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012982:	b29b      	uxth	r3, r3
 8012984:	029b      	lsls	r3, r3, #10
 8012986:	b29b      	uxth	r3, r3
 8012988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801298c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012990:	b29a      	uxth	r2, r3
 8012992:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012994:	801a      	strh	r2, [r3, #0]
 8012996:	e053      	b.n	8012a40 <USB_EPStartXfer+0xafe>
 8012998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801299c:	2b00      	cmp	r3, #0
 801299e:	d112      	bne.n	80129c6 <USB_EPStartXfer+0xa84>
 80129a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129a2:	881b      	ldrh	r3, [r3, #0]
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129ae:	801a      	strh	r2, [r3, #0]
 80129b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80129ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80129be:	b29a      	uxth	r2, r3
 80129c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129c2:	801a      	strh	r2, [r3, #0]
 80129c4:	e03c      	b.n	8012a40 <USB_EPStartXfer+0xafe>
 80129c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129ca:	085b      	lsrs	r3, r3, #1
 80129cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80129d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129d4:	f003 0301 	and.w	r3, r3, #1
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d004      	beq.n	80129e6 <USB_EPStartXfer+0xaa4>
 80129dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80129e0:	3301      	adds	r3, #1
 80129e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80129e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	029b      	lsls	r3, r3, #10
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129f2:	801a      	strh	r2, [r3, #0]
 80129f4:	e024      	b.n	8012a40 <USB_EPStartXfer+0xafe>
 80129f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80129fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	785b      	ldrb	r3, [r3, #1]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d11c      	bne.n	8012a40 <USB_EPStartXfer+0xafe>
 8012a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	461a      	mov	r2, r3
 8012a18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a1a:	4413      	add	r3, r2
 8012a1c:	673b      	str	r3, [r7, #112]	; 0x70
 8012a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	00da      	lsls	r2, r3, #3
 8012a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a2e:	4413      	add	r3, r2
 8012a30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012a34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012a3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	895b      	ldrh	r3, [r3, #10]
 8012a4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	6959      	ldr	r1, [r3, #20]
 8012a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012a66:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012a6a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012a6e:	6800      	ldr	r0, [r0, #0]
 8012a70:	f000 fed7 	bl	8013822 <USB_WritePMA>
 8012a74:	e0c0      	b.n	8012bf8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	785b      	ldrb	r3, [r3, #1]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d16d      	bne.n	8012b62 <USB_EPStartXfer+0xc20>
 8012a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012aa6:	4413      	add	r3, r2
 8012aa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	00da      	lsls	r2, r3, #3
 8012ab8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012aba:	4413      	add	r3, r2
 8012abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8012ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8012ac8:	d91c      	bls.n	8012b04 <USB_EPStartXfer+0xbc2>
 8012aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ace:	095b      	lsrs	r3, r3, #5
 8012ad0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ad8:	f003 031f 	and.w	r3, r3, #31
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d104      	bne.n	8012aea <USB_EPStartXfer+0xba8>
 8012ae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012ae4:	3b01      	subs	r3, #1
 8012ae6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	029b      	lsls	r3, r3, #10
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012af8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012afc:	b29a      	uxth	r2, r3
 8012afe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b00:	801a      	strh	r2, [r3, #0]
 8012b02:	e05f      	b.n	8012bc4 <USB_EPStartXfer+0xc82>
 8012b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d112      	bne.n	8012b32 <USB_EPStartXfer+0xbf0>
 8012b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b0e:	881b      	ldrh	r3, [r3, #0]
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b1a:	801a      	strh	r2, [r3, #0]
 8012b1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b1e:	881b      	ldrh	r3, [r3, #0]
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b2e:	801a      	strh	r2, [r3, #0]
 8012b30:	e048      	b.n	8012bc4 <USB_EPStartXfer+0xc82>
 8012b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b36:	085b      	lsrs	r3, r3, #1
 8012b38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b40:	f003 0301 	and.w	r3, r3, #1
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d004      	beq.n	8012b52 <USB_EPStartXfer+0xc10>
 8012b48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8012b52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8012b56:	b29b      	uxth	r3, r3
 8012b58:	029b      	lsls	r3, r3, #10
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b5e:	801a      	strh	r2, [r3, #0]
 8012b60:	e030      	b.n	8012bc4 <USB_EPStartXfer+0xc82>
 8012b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	785b      	ldrb	r3, [r3, #1]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d128      	bne.n	8012bc4 <USB_EPStartXfer+0xc82>
 8012b72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	461a      	mov	r2, r3
 8012b92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012b96:	4413      	add	r3, r2
 8012b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	781b      	ldrb	r3, [r3, #0]
 8012ba8:	00da      	lsls	r2, r3, #3
 8012baa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012bae:	4413      	add	r3, r2
 8012bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012bb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bbc:	b29a      	uxth	r2, r3
 8012bbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012bc2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	891b      	ldrh	r3, [r3, #8]
 8012bd0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	6959      	ldr	r1, [r3, #20]
 8012be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8012bea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8012bee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8012bf2:	6800      	ldr	r0, [r0, #0]
 8012bf4:	f000 fe15 	bl	8013822 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012bf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012bfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	009b      	lsls	r3, r3, #2
 8012c10:	4413      	add	r3, r2
 8012c12:	881b      	ldrh	r3, [r3, #0]
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012c1e:	817b      	strh	r3, [r7, #10]
 8012c20:	897b      	ldrh	r3, [r7, #10]
 8012c22:	f083 0310 	eor.w	r3, r3, #16
 8012c26:	817b      	strh	r3, [r7, #10]
 8012c28:	897b      	ldrh	r3, [r7, #10]
 8012c2a:	f083 0320 	eor.w	r3, r3, #32
 8012c2e:	817b      	strh	r3, [r7, #10]
 8012c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012c38:	681a      	ldr	r2, [r3, #0]
 8012c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	441a      	add	r2, r3
 8012c4a:	897b      	ldrh	r3, [r7, #10]
 8012c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	8013      	strh	r3, [r2, #0]
 8012c60:	f000 bc9f 	b.w	80135a2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	7b1b      	ldrb	r3, [r3, #12]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	f040 80ae 	bne.w	8012dd2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	699a      	ldr	r2, [r3, #24]
 8012c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	429a      	cmp	r2, r3
 8012c90:	d917      	bls.n	8012cc2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 8012c92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012c96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8012ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	699a      	ldr	r2, [r3, #24]
 8012cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cb2:	1ad2      	subs	r2, r2, r3
 8012cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	619a      	str	r2, [r3, #24]
 8012cc0:	e00e      	b.n	8012ce0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 8012cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	699b      	ldr	r3, [r3, #24]
 8012cce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8012cd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	2200      	movs	r2, #0
 8012cde:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012ce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ce4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	461a      	mov	r2, r3
 8012d00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012d04:	4413      	add	r3, r2
 8012d06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	00da      	lsls	r2, r3, #3
 8012d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012d22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d2a:	2b3e      	cmp	r3, #62	; 0x3e
 8012d2c:	d91d      	bls.n	8012d6a <USB_EPStartXfer+0xe28>
 8012d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d32:	095b      	lsrs	r3, r3, #5
 8012d34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d3c:	f003 031f 	and.w	r3, r3, #31
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d104      	bne.n	8012d4e <USB_EPStartXfer+0xe0c>
 8012d44:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012d48:	3b01      	subs	r3, #1
 8012d4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012d4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012d52:	b29b      	uxth	r3, r3
 8012d54:	029b      	lsls	r3, r3, #10
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d60:	b29a      	uxth	r2, r3
 8012d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d66:	801a      	strh	r2, [r3, #0]
 8012d68:	e3e1      	b.n	801352e <USB_EPStartXfer+0x15ec>
 8012d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d116      	bne.n	8012da0 <USB_EPStartXfer+0xe5e>
 8012d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d76:	881b      	ldrh	r3, [r3, #0]
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012d7e:	b29a      	uxth	r2, r3
 8012d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d84:	801a      	strh	r2, [r3, #0]
 8012d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d8a:	881b      	ldrh	r3, [r3, #0]
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d96:	b29a      	uxth	r2, r3
 8012d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d9c:	801a      	strh	r2, [r3, #0]
 8012d9e:	e3c6      	b.n	801352e <USB_EPStartXfer+0x15ec>
 8012da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012da4:	085b      	lsrs	r3, r3, #1
 8012da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012dae:	f003 0301 	and.w	r3, r3, #1
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d004      	beq.n	8012dc0 <USB_EPStartXfer+0xe7e>
 8012db6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012dba:	3301      	adds	r3, #1
 8012dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	029b      	lsls	r3, r3, #10
 8012dc8:	b29a      	uxth	r2, r3
 8012dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012dce:	801a      	strh	r2, [r3, #0]
 8012dd0:	e3ad      	b.n	801352e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	78db      	ldrb	r3, [r3, #3]
 8012dde:	2b02      	cmp	r3, #2
 8012de0:	f040 8200 	bne.w	80131e4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	785b      	ldrb	r3, [r3, #1]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	f040 8091 	bne.w	8012f18 <USB_EPStartXfer+0xfd6>
 8012df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	461a      	mov	r2, r3
 8012e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	00da      	lsls	r2, r3, #3
 8012e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e32:	4413      	add	r3, r2
 8012e34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	691b      	ldr	r3, [r3, #16]
 8012e48:	2b3e      	cmp	r3, #62	; 0x3e
 8012e4a:	d925      	bls.n	8012e98 <USB_EPStartXfer+0xf56>
 8012e4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	691b      	ldr	r3, [r3, #16]
 8012e58:	095b      	lsrs	r3, r3, #5
 8012e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	691b      	ldr	r3, [r3, #16]
 8012e6a:	f003 031f 	and.w	r3, r3, #31
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d104      	bne.n	8012e7c <USB_EPStartXfer+0xf3a>
 8012e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e76:	3b01      	subs	r3, #1
 8012e78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	029b      	lsls	r3, r3, #10
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e8e:	b29a      	uxth	r2, r3
 8012e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012e94:	801a      	strh	r2, [r3, #0]
 8012e96:	e074      	b.n	8012f82 <USB_EPStartXfer+0x1040>
 8012e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	691b      	ldr	r3, [r3, #16]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d116      	bne.n	8012ed6 <USB_EPStartXfer+0xf94>
 8012ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012eac:	881b      	ldrh	r3, [r3, #0]
 8012eae:	b29b      	uxth	r3, r3
 8012eb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012eba:	801a      	strh	r2, [r3, #0]
 8012ebc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012ec0:	881b      	ldrh	r3, [r3, #0]
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012ed2:	801a      	strh	r2, [r3, #0]
 8012ed4:	e055      	b.n	8012f82 <USB_EPStartXfer+0x1040>
 8012ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	691b      	ldr	r3, [r3, #16]
 8012ee2:	085b      	lsrs	r3, r3, #1
 8012ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	691b      	ldr	r3, [r3, #16]
 8012ef4:	f003 0301 	and.w	r3, r3, #1
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d004      	beq.n	8012f06 <USB_EPStartXfer+0xfc4>
 8012efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f00:	3301      	adds	r3, #1
 8012f02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	029b      	lsls	r3, r3, #10
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8012f14:	801a      	strh	r2, [r3, #0]
 8012f16:	e034      	b.n	8012f82 <USB_EPStartXfer+0x1040>
 8012f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	785b      	ldrb	r3, [r3, #1]
 8012f24:	2b01      	cmp	r3, #1
 8012f26:	d12c      	bne.n	8012f82 <USB_EPStartXfer+0x1040>
 8012f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	461a      	mov	r2, r3
 8012f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012f4c:	4413      	add	r3, r2
 8012f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	00da      	lsls	r2, r3, #3
 8012f60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012f64:	4413      	add	r3, r2
 8012f66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	691b      	ldr	r3, [r3, #16]
 8012f7a:	b29a      	uxth	r2, r3
 8012f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012f80:	801a      	strh	r2, [r3, #0]
 8012f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	785b      	ldrb	r3, [r3, #1]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f040 8091 	bne.w	80130c4 <USB_EPStartXfer+0x1182>
 8012fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fa6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	781b      	ldrb	r3, [r3, #0]
 8012fd8:	00da      	lsls	r2, r3, #3
 8012fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012fde:	4413      	add	r3, r2
 8012fe0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012fe4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	691b      	ldr	r3, [r3, #16]
 8012ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8012ff6:	d925      	bls.n	8013044 <USB_EPStartXfer+0x1102>
 8012ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	691b      	ldr	r3, [r3, #16]
 8013004:	095b      	lsrs	r3, r3, #5
 8013006:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801300a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801300e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	691b      	ldr	r3, [r3, #16]
 8013016:	f003 031f 	and.w	r3, r3, #31
 801301a:	2b00      	cmp	r3, #0
 801301c:	d104      	bne.n	8013028 <USB_EPStartXfer+0x10e6>
 801301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013022:	3b01      	subs	r3, #1
 8013024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801302c:	b29b      	uxth	r3, r3
 801302e:	029b      	lsls	r3, r3, #10
 8013030:	b29b      	uxth	r3, r3
 8013032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801303a:	b29a      	uxth	r2, r3
 801303c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013040:	801a      	strh	r2, [r3, #0]
 8013042:	e06d      	b.n	8013120 <USB_EPStartXfer+0x11de>
 8013044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	691b      	ldr	r3, [r3, #16]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d116      	bne.n	8013082 <USB_EPStartXfer+0x1140>
 8013054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013058:	881b      	ldrh	r3, [r3, #0]
 801305a:	b29b      	uxth	r3, r3
 801305c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013060:	b29a      	uxth	r2, r3
 8013062:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013066:	801a      	strh	r2, [r3, #0]
 8013068:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801306c:	881b      	ldrh	r3, [r3, #0]
 801306e:	b29b      	uxth	r3, r3
 8013070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013078:	b29a      	uxth	r2, r3
 801307a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801307e:	801a      	strh	r2, [r3, #0]
 8013080:	e04e      	b.n	8013120 <USB_EPStartXfer+0x11de>
 8013082:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013086:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	691b      	ldr	r3, [r3, #16]
 801308e:	085b      	lsrs	r3, r3, #1
 8013090:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	691b      	ldr	r3, [r3, #16]
 80130a0:	f003 0301 	and.w	r3, r3, #1
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d004      	beq.n	80130b2 <USB_EPStartXfer+0x1170>
 80130a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130ac:	3301      	adds	r3, #1
 80130ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80130b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130b6:	b29b      	uxth	r3, r3
 80130b8:	029b      	lsls	r3, r3, #10
 80130ba:	b29a      	uxth	r2, r3
 80130bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80130c0:	801a      	strh	r2, [r3, #0]
 80130c2:	e02d      	b.n	8013120 <USB_EPStartXfer+0x11de>
 80130c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	785b      	ldrb	r3, [r3, #1]
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d125      	bne.n	8013120 <USB_EPStartXfer+0x11de>
 80130d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	461a      	mov	r2, r3
 80130e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80130ea:	4413      	add	r3, r2
 80130ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80130f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80130f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	781b      	ldrb	r3, [r3, #0]
 80130fc:	00da      	lsls	r2, r3, #3
 80130fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013102:	4413      	add	r3, r2
 8013104:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801310c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	691b      	ldr	r3, [r3, #16]
 8013118:	b29a      	uxth	r2, r3
 801311a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801311e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	69db      	ldr	r3, [r3, #28]
 801312c:	2b00      	cmp	r3, #0
 801312e:	f000 81fe 	beq.w	801352e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013136:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	781b      	ldrb	r3, [r3, #0]
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	4413      	add	r3, r2
 801314c:	881b      	ldrh	r3, [r3, #0]
 801314e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013152:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801315a:	2b00      	cmp	r3, #0
 801315c:	d005      	beq.n	801316a <USB_EPStartXfer+0x1228>
 801315e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8013162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013166:	2b00      	cmp	r3, #0
 8013168:	d10d      	bne.n	8013186 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801316a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801316e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013172:	2b00      	cmp	r3, #0
 8013174:	f040 81db 	bne.w	801352e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013178:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013180:	2b00      	cmp	r3, #0
 8013182:	f040 81d4 	bne.w	801352e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801318a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	4413      	add	r3, r2
 80131a0:	881b      	ldrh	r3, [r3, #0]
 80131a2:	b29b      	uxth	r3, r3
 80131a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131ac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80131b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80131b8:	681a      	ldr	r2, [r3, #0]
 80131ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	009b      	lsls	r3, r3, #2
 80131c8:	441a      	add	r2, r3
 80131ca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80131ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80131de:	b29b      	uxth	r3, r3
 80131e0:	8013      	strh	r3, [r2, #0]
 80131e2:	e1a4      	b.n	801352e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80131e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	78db      	ldrb	r3, [r3, #3]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	f040 819a 	bne.w	801352a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80131f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80131fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	699a      	ldr	r2, [r3, #24]
 8013202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	429a      	cmp	r2, r3
 8013210:	d917      	bls.n	8013242 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 8013212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	691b      	ldr	r3, [r3, #16]
 801321e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8013222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	699a      	ldr	r2, [r3, #24]
 801322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013232:	1ad2      	subs	r2, r2, r3
 8013234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	619a      	str	r2, [r3, #24]
 8013240:	e00e      	b.n	8013260 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 8013242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	699b      	ldr	r3, [r3, #24]
 801324e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8013252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	2200      	movs	r2, #0
 801325e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8013260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	785b      	ldrb	r3, [r3, #1]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d178      	bne.n	8013362 <USB_EPStartXfer+0x1420>
 8013270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013274:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801327e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801328c:	b29b      	uxth	r3, r3
 801328e:	461a      	mov	r2, r3
 8013290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8013294:	4413      	add	r3, r2
 8013296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801329a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801329e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	781b      	ldrb	r3, [r3, #0]
 80132a6:	00da      	lsls	r2, r3, #3
 80132a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80132ac:	4413      	add	r3, r2
 80132ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80132b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80132b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132ba:	2b3e      	cmp	r3, #62	; 0x3e
 80132bc:	d91d      	bls.n	80132fa <USB_EPStartXfer+0x13b8>
 80132be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132c2:	095b      	lsrs	r3, r3, #5
 80132c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80132c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132cc:	f003 031f 	and.w	r3, r3, #31
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d104      	bne.n	80132de <USB_EPStartXfer+0x139c>
 80132d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132d8:	3b01      	subs	r3, #1
 80132da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80132de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	029b      	lsls	r3, r3, #10
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80132f0:	b29a      	uxth	r2, r3
 80132f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80132f6:	801a      	strh	r2, [r3, #0]
 80132f8:	e064      	b.n	80133c4 <USB_EPStartXfer+0x1482>
 80132fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d116      	bne.n	8013330 <USB_EPStartXfer+0x13ee>
 8013302:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013306:	881b      	ldrh	r3, [r3, #0]
 8013308:	b29b      	uxth	r3, r3
 801330a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801330e:	b29a      	uxth	r2, r3
 8013310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801331a:	881b      	ldrh	r3, [r3, #0]
 801331c:	b29b      	uxth	r3, r3
 801331e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013326:	b29a      	uxth	r2, r3
 8013328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801332c:	801a      	strh	r2, [r3, #0]
 801332e:	e049      	b.n	80133c4 <USB_EPStartXfer+0x1482>
 8013330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013334:	085b      	lsrs	r3, r3, #1
 8013336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801333a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801333e:	f003 0301 	and.w	r3, r3, #1
 8013342:	2b00      	cmp	r3, #0
 8013344:	d004      	beq.n	8013350 <USB_EPStartXfer+0x140e>
 8013346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801334a:	3301      	adds	r3, #1
 801334c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8013350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013354:	b29b      	uxth	r3, r3
 8013356:	029b      	lsls	r3, r3, #10
 8013358:	b29a      	uxth	r2, r3
 801335a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801335e:	801a      	strh	r2, [r3, #0]
 8013360:	e030      	b.n	80133c4 <USB_EPStartXfer+0x1482>
 8013362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	785b      	ldrb	r3, [r3, #1]
 801336e:	2b01      	cmp	r3, #1
 8013370:	d128      	bne.n	80133c4 <USB_EPStartXfer+0x1482>
 8013372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801338e:	b29b      	uxth	r3, r3
 8013390:	461a      	mov	r2, r3
 8013392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013396:	4413      	add	r3, r2
 8013398:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801339c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	00da      	lsls	r2, r3, #3
 80133aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80133ae:	4413      	add	r3, r2
 80133b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80133b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80133b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80133bc:	b29a      	uxth	r2, r3
 80133be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80133c2:	801a      	strh	r2, [r3, #0]
 80133c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80133d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	785b      	ldrb	r3, [r3, #1]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d178      	bne.n	80134d4 <USB_EPStartXfer+0x1592>
 80133e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80133f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80133f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80133fe:	b29b      	uxth	r3, r3
 8013400:	461a      	mov	r2, r3
 8013402:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013406:	4413      	add	r3, r2
 8013408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801340c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	00da      	lsls	r2, r3, #3
 801341a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801341e:	4413      	add	r3, r2
 8013420:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801342c:	2b3e      	cmp	r3, #62	; 0x3e
 801342e:	d91d      	bls.n	801346c <USB_EPStartXfer+0x152a>
 8013430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013434:	095b      	lsrs	r3, r3, #5
 8013436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801343a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801343e:	f003 031f 	and.w	r3, r3, #31
 8013442:	2b00      	cmp	r3, #0
 8013444:	d104      	bne.n	8013450 <USB_EPStartXfer+0x150e>
 8013446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801344a:	3b01      	subs	r3, #1
 801344c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013450:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013454:	b29b      	uxth	r3, r3
 8013456:	029b      	lsls	r3, r3, #10
 8013458:	b29b      	uxth	r3, r3
 801345a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801345e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013462:	b29a      	uxth	r2, r3
 8013464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013468:	801a      	strh	r2, [r3, #0]
 801346a:	e060      	b.n	801352e <USB_EPStartXfer+0x15ec>
 801346c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013470:	2b00      	cmp	r3, #0
 8013472:	d116      	bne.n	80134a2 <USB_EPStartXfer+0x1560>
 8013474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013478:	881b      	ldrh	r3, [r3, #0]
 801347a:	b29b      	uxth	r3, r3
 801347c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013480:	b29a      	uxth	r2, r3
 8013482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013486:	801a      	strh	r2, [r3, #0]
 8013488:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801348c:	881b      	ldrh	r3, [r3, #0]
 801348e:	b29b      	uxth	r3, r3
 8013490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013498:	b29a      	uxth	r2, r3
 801349a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801349e:	801a      	strh	r2, [r3, #0]
 80134a0:	e045      	b.n	801352e <USB_EPStartXfer+0x15ec>
 80134a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134a6:	085b      	lsrs	r3, r3, #1
 80134a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80134ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80134b0:	f003 0301 	and.w	r3, r3, #1
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d004      	beq.n	80134c2 <USB_EPStartXfer+0x1580>
 80134b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80134bc:	3301      	adds	r3, #1
 80134be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80134c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	029b      	lsls	r3, r3, #10
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80134d0:	801a      	strh	r2, [r3, #0]
 80134d2:	e02c      	b.n	801352e <USB_EPStartXfer+0x15ec>
 80134d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	785b      	ldrb	r3, [r3, #1]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d124      	bne.n	801352e <USB_EPStartXfer+0x15ec>
 80134e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80134e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	461a      	mov	r2, r3
 80134f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80134fa:	4413      	add	r3, r2
 80134fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	00da      	lsls	r2, r3, #3
 801350e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013512:	4413      	add	r3, r2
 8013514:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013520:	b29a      	uxth	r2, r3
 8013522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013526:	801a      	strh	r2, [r3, #0]
 8013528:	e001      	b.n	801352e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	e03a      	b.n	80135a4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801352e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013532:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013536:	681a      	ldr	r2, [r3, #0]
 8013538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801353c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	009b      	lsls	r3, r3, #2
 8013546:	4413      	add	r3, r2
 8013548:	881b      	ldrh	r3, [r3, #0]
 801354a:	b29b      	uxth	r3, r3
 801354c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013554:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013558:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801355c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013560:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013564:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8013568:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801356c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8013570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8013574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801357e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	441a      	add	r2, r3
 801358a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801358e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013592:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801359a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801359e:	b29b      	uxth	r3, r3
 80135a0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80135a2:	2300      	movs	r3, #0
}
 80135a4:	4618      	mov	r0, r3
 80135a6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}

080135ae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80135ae:	b480      	push	{r7}
 80135b0:	b085      	sub	sp, #20
 80135b2:	af00      	add	r7, sp, #0
 80135b4:	6078      	str	r0, [r7, #4]
 80135b6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	785b      	ldrb	r3, [r3, #1]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d020      	beq.n	8013602 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80135c0:	687a      	ldr	r2, [r7, #4]
 80135c2:	683b      	ldr	r3, [r7, #0]
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	4413      	add	r3, r2
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135d6:	81bb      	strh	r3, [r7, #12]
 80135d8:	89bb      	ldrh	r3, [r7, #12]
 80135da:	f083 0310 	eor.w	r3, r3, #16
 80135de:	81bb      	strh	r3, [r7, #12]
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	781b      	ldrb	r3, [r3, #0]
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	441a      	add	r2, r3
 80135ea:	89bb      	ldrh	r3, [r7, #12]
 80135ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135fc:	b29b      	uxth	r3, r3
 80135fe:	8013      	strh	r3, [r2, #0]
 8013600:	e01f      	b.n	8013642 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013602:	687a      	ldr	r2, [r7, #4]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	009b      	lsls	r3, r3, #2
 801360a:	4413      	add	r3, r2
 801360c:	881b      	ldrh	r3, [r3, #0]
 801360e:	b29b      	uxth	r3, r3
 8013610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013618:	81fb      	strh	r3, [r7, #14]
 801361a:	89fb      	ldrh	r3, [r7, #14]
 801361c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013620:	81fb      	strh	r3, [r7, #14]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	781b      	ldrb	r3, [r3, #0]
 8013628:	009b      	lsls	r3, r3, #2
 801362a:	441a      	add	r2, r3
 801362c:	89fb      	ldrh	r3, [r7, #14]
 801362e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801363a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801363e:	b29b      	uxth	r3, r3
 8013640:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8013642:	2300      	movs	r3, #0
}
 8013644:	4618      	mov	r0, r3
 8013646:	3714      	adds	r7, #20
 8013648:	46bd      	mov	sp, r7
 801364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364e:	4770      	bx	lr

08013650 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013650:	b480      	push	{r7}
 8013652:	b087      	sub	sp, #28
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
 8013658:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	7b1b      	ldrb	r3, [r3, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	f040 809d 	bne.w	801379e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8013664:	683b      	ldr	r3, [r7, #0]
 8013666:	785b      	ldrb	r3, [r3, #1]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d04c      	beq.n	8013706 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	4413      	add	r3, r2
 8013676:	881b      	ldrh	r3, [r3, #0]
 8013678:	823b      	strh	r3, [r7, #16]
 801367a:	8a3b      	ldrh	r3, [r7, #16]
 801367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013680:	2b00      	cmp	r3, #0
 8013682:	d01b      	beq.n	80136bc <USB_EPClearStall+0x6c>
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	683b      	ldr	r3, [r7, #0]
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	4413      	add	r3, r2
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	b29b      	uxth	r3, r3
 8013692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801369a:	81fb      	strh	r3, [r7, #14]
 801369c:	687a      	ldr	r2, [r7, #4]
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	781b      	ldrb	r3, [r3, #0]
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	441a      	add	r2, r3
 80136a6:	89fb      	ldrh	r3, [r7, #14]
 80136a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80136ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80136b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80136b8:	b29b      	uxth	r3, r3
 80136ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	78db      	ldrb	r3, [r3, #3]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d06c      	beq.n	801379e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	683b      	ldr	r3, [r7, #0]
 80136c8:	781b      	ldrb	r3, [r3, #0]
 80136ca:	009b      	lsls	r3, r3, #2
 80136cc:	4413      	add	r3, r2
 80136ce:	881b      	ldrh	r3, [r3, #0]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80136d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80136da:	81bb      	strh	r3, [r7, #12]
 80136dc:	89bb      	ldrh	r3, [r7, #12]
 80136de:	f083 0320 	eor.w	r3, r3, #32
 80136e2:	81bb      	strh	r3, [r7, #12]
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	683b      	ldr	r3, [r7, #0]
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	009b      	lsls	r3, r3, #2
 80136ec:	441a      	add	r2, r3
 80136ee:	89bb      	ldrh	r3, [r7, #12]
 80136f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80136f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80136f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013700:	b29b      	uxth	r3, r3
 8013702:	8013      	strh	r3, [r2, #0]
 8013704:	e04b      	b.n	801379e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	4413      	add	r3, r2
 8013710:	881b      	ldrh	r3, [r3, #0]
 8013712:	82fb      	strh	r3, [r7, #22]
 8013714:	8afb      	ldrh	r3, [r7, #22]
 8013716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801371a:	2b00      	cmp	r3, #0
 801371c:	d01b      	beq.n	8013756 <USB_EPClearStall+0x106>
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	009b      	lsls	r3, r3, #2
 8013726:	4413      	add	r3, r2
 8013728:	881b      	ldrh	r3, [r3, #0]
 801372a:	b29b      	uxth	r3, r3
 801372c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013734:	82bb      	strh	r3, [r7, #20]
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	683b      	ldr	r3, [r7, #0]
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	441a      	add	r2, r3
 8013740:	8abb      	ldrh	r3, [r7, #20]
 8013742:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013746:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801374a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801374e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013752:	b29b      	uxth	r3, r3
 8013754:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8013756:	687a      	ldr	r2, [r7, #4]
 8013758:	683b      	ldr	r3, [r7, #0]
 801375a:	781b      	ldrb	r3, [r3, #0]
 801375c:	009b      	lsls	r3, r3, #2
 801375e:	4413      	add	r3, r2
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	b29b      	uxth	r3, r3
 8013764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801376c:	827b      	strh	r3, [r7, #18]
 801376e:	8a7b      	ldrh	r3, [r7, #18]
 8013770:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013774:	827b      	strh	r3, [r7, #18]
 8013776:	8a7b      	ldrh	r3, [r7, #18]
 8013778:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801377c:	827b      	strh	r3, [r7, #18]
 801377e:	687a      	ldr	r2, [r7, #4]
 8013780:	683b      	ldr	r3, [r7, #0]
 8013782:	781b      	ldrb	r3, [r3, #0]
 8013784:	009b      	lsls	r3, r3, #2
 8013786:	441a      	add	r2, r3
 8013788:	8a7b      	ldrh	r3, [r7, #18]
 801378a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801378e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801379a:	b29b      	uxth	r3, r3
 801379c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801379e:	2300      	movs	r3, #0
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	371c      	adds	r7, #28
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	460b      	mov	r3, r1
 80137b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80137b8:	78fb      	ldrb	r3, [r7, #3]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d103      	bne.n	80137c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2280      	movs	r2, #128	; 0x80
 80137c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80137c6:	2300      	movs	r3, #0
}
 80137c8:	4618      	mov	r0, r3
 80137ca:	370c      	adds	r7, #12
 80137cc:	46bd      	mov	sp, r7
 80137ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d2:	4770      	bx	lr

080137d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80137d4:	b480      	push	{r7}
 80137d6:	b083      	sub	sp, #12
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80137e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013800:	4770      	bx	lr

08013802 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013802:	b480      	push	{r7}
 8013804:	b085      	sub	sp, #20
 8013806:	af00      	add	r7, sp, #0
 8013808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8013810:	b29b      	uxth	r3, r3
 8013812:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013814:	68fb      	ldr	r3, [r7, #12]
}
 8013816:	4618      	mov	r0, r3
 8013818:	3714      	adds	r7, #20
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr

08013822 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013822:	b480      	push	{r7}
 8013824:	b08d      	sub	sp, #52	; 0x34
 8013826:	af00      	add	r7, sp, #0
 8013828:	60f8      	str	r0, [r7, #12]
 801382a:	60b9      	str	r1, [r7, #8]
 801382c:	4611      	mov	r1, r2
 801382e:	461a      	mov	r2, r3
 8013830:	460b      	mov	r3, r1
 8013832:	80fb      	strh	r3, [r7, #6]
 8013834:	4613      	mov	r3, r2
 8013836:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8013838:	88bb      	ldrh	r3, [r7, #4]
 801383a:	3301      	adds	r3, #1
 801383c:	085b      	lsrs	r3, r3, #1
 801383e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013848:	88fa      	ldrh	r2, [r7, #6]
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	4413      	add	r3, r2
 801384e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013852:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8013854:	6a3b      	ldr	r3, [r7, #32]
 8013856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013858:	e01b      	b.n	8013892 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 801385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	3301      	adds	r3, #1
 8013864:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8013866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	b29b      	uxth	r3, r3
 801386c:	021b      	lsls	r3, r3, #8
 801386e:	b29b      	uxth	r3, r3
 8013870:	461a      	mov	r2, r3
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	4313      	orrs	r3, r2
 8013876:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	b29a      	uxth	r2, r3
 801387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	3302      	adds	r3, #2
 8013884:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013888:	3301      	adds	r3, #1
 801388a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	3b01      	subs	r3, #1
 8013890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013894:	2b00      	cmp	r3, #0
 8013896:	d1e0      	bne.n	801385a <USB_WritePMA+0x38>
  }
}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	3734      	adds	r7, #52	; 0x34
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr

080138a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80138a6:	b480      	push	{r7}
 80138a8:	b08b      	sub	sp, #44	; 0x2c
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	60f8      	str	r0, [r7, #12]
 80138ae:	60b9      	str	r1, [r7, #8]
 80138b0:	4611      	mov	r1, r2
 80138b2:	461a      	mov	r2, r3
 80138b4:	460b      	mov	r3, r1
 80138b6:	80fb      	strh	r3, [r7, #6]
 80138b8:	4613      	mov	r3, r2
 80138ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80138bc:	88bb      	ldrh	r3, [r7, #4]
 80138be:	085b      	lsrs	r3, r3, #1
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80138cc:	88fa      	ldrh	r2, [r7, #6]
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	4413      	add	r3, r2
 80138d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80138d6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	627b      	str	r3, [r7, #36]	; 0x24
 80138dc:	e018      	b.n	8013910 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80138de:	6a3b      	ldr	r3, [r7, #32]
 80138e0:	881b      	ldrh	r3, [r3, #0]
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80138e6:	6a3b      	ldr	r3, [r7, #32]
 80138e8:	3302      	adds	r3, #2
 80138ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	b2da      	uxtb	r2, r3
 80138f0:	69fb      	ldr	r3, [r7, #28]
 80138f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	3301      	adds	r3, #1
 80138f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	0a1b      	lsrs	r3, r3, #8
 80138fe:	b2da      	uxtb	r2, r3
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	3301      	adds	r3, #1
 8013908:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 801390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390c:	3b01      	subs	r3, #1
 801390e:	627b      	str	r3, [r7, #36]	; 0x24
 8013910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013912:	2b00      	cmp	r3, #0
 8013914:	d1e3      	bne.n	80138de <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8013916:	88bb      	ldrh	r3, [r7, #4]
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	b29b      	uxth	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	d007      	beq.n	8013932 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8013922:	6a3b      	ldr	r3, [r7, #32]
 8013924:	881b      	ldrh	r3, [r3, #0]
 8013926:	b29b      	uxth	r3, r3
 8013928:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	b2da      	uxtb	r2, r3
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	701a      	strb	r2, [r3, #0]
  }
}
 8013932:	bf00      	nop
 8013934:	372c      	adds	r7, #44	; 0x2c
 8013936:	46bd      	mov	sp, r7
 8013938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393c:	4770      	bx	lr

0801393e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801393e:	b580      	push	{r7, lr}
 8013940:	b084      	sub	sp, #16
 8013942:	af00      	add	r7, sp, #0
 8013944:	6078      	str	r0, [r7, #4]
 8013946:	460b      	mov	r3, r1
 8013948:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801394a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801394e:	f004 f9c1 	bl	8017cd4 <USBD_static_malloc>
 8013952:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d105      	bne.n	8013966 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2200      	movs	r2, #0
 801395e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013962:	2302      	movs	r3, #2
 8013964:	e066      	b.n	8013a34 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	68fa      	ldr	r2, [r7, #12]
 801396a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	7c1b      	ldrb	r3, [r3, #16]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d119      	bne.n	80139aa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013976:	f44f 7300 	mov.w	r3, #512	; 0x200
 801397a:	2202      	movs	r2, #2
 801397c:	2181      	movs	r1, #129	; 0x81
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f004 f84d 	bl	8017a1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	2201      	movs	r2, #1
 8013988:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801398a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801398e:	2202      	movs	r2, #2
 8013990:	2101      	movs	r1, #1
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f004 f843 	bl	8017a1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2201      	movs	r2, #1
 801399c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	2210      	movs	r2, #16
 80139a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80139a8:	e016      	b.n	80139d8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80139aa:	2340      	movs	r3, #64	; 0x40
 80139ac:	2202      	movs	r2, #2
 80139ae:	2181      	movs	r1, #129	; 0x81
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f004 f834 	bl	8017a1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2201      	movs	r2, #1
 80139ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80139bc:	2340      	movs	r3, #64	; 0x40
 80139be:	2202      	movs	r2, #2
 80139c0:	2101      	movs	r1, #1
 80139c2:	6878      	ldr	r0, [r7, #4]
 80139c4:	f004 f82b 	bl	8017a1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2201      	movs	r2, #1
 80139cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2210      	movs	r2, #16
 80139d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80139d8:	2308      	movs	r3, #8
 80139da:	2203      	movs	r2, #3
 80139dc:	2182      	movs	r1, #130	; 0x82
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f004 f81d 	bl	8017a1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2201      	movs	r2, #1
 80139e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2200      	movs	r2, #0
 80139fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2200      	movs	r2, #0
 8013a02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	7c1b      	ldrb	r3, [r3, #16]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d109      	bne.n	8013a22 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013a18:	2101      	movs	r1, #1
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f004 f8ef 	bl	8017bfe <USBD_LL_PrepareReceive>
 8013a20:	e007      	b.n	8013a32 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013a28:	2340      	movs	r3, #64	; 0x40
 8013a2a:	2101      	movs	r1, #1
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f004 f8e6 	bl	8017bfe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b082      	sub	sp, #8
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	6078      	str	r0, [r7, #4]
 8013a44:	460b      	mov	r3, r1
 8013a46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013a48:	2181      	movs	r1, #129	; 0x81
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f004 f80d 	bl	8017a6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2200      	movs	r2, #0
 8013a54:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013a56:	2101      	movs	r1, #1
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f004 f806 	bl	8017a6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2200      	movs	r2, #0
 8013a62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013a66:	2182      	movs	r1, #130	; 0x82
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f003 fffe 	bl	8017a6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2200      	movs	r2, #0
 8013a72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d00e      	beq.n	8013aa6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a8e:	685b      	ldr	r3, [r3, #4]
 8013a90:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f004 f929 	bl	8017cf0 <USBD_static_free>
    pdev->pClassData = NULL;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013aa6:	2300      	movs	r3, #0
}
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	3708      	adds	r7, #8
 8013aac:	46bd      	mov	sp, r7
 8013aae:	bd80      	pop	{r7, pc}

08013ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b086      	sub	sp, #24
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ac0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d101      	bne.n	8013ad8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013ad4:	2303      	movs	r3, #3
 8013ad6:	e0af      	b.n	8013c38 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	781b      	ldrb	r3, [r3, #0]
 8013adc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d03f      	beq.n	8013b64 <USBD_CDC_Setup+0xb4>
 8013ae4:	2b20      	cmp	r3, #32
 8013ae6:	f040 809f 	bne.w	8013c28 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013aea:	683b      	ldr	r3, [r7, #0]
 8013aec:	88db      	ldrh	r3, [r3, #6]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d02e      	beq.n	8013b50 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	781b      	ldrb	r3, [r3, #0]
 8013af6:	b25b      	sxtb	r3, r3
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	da16      	bge.n	8013b2a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013b02:	689b      	ldr	r3, [r3, #8]
 8013b04:	683a      	ldr	r2, [r7, #0]
 8013b06:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013b08:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013b0a:	683a      	ldr	r2, [r7, #0]
 8013b0c:	88d2      	ldrh	r2, [r2, #6]
 8013b0e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	88db      	ldrh	r3, [r3, #6]
 8013b14:	2b07      	cmp	r3, #7
 8013b16:	bf28      	it	cs
 8013b18:	2307      	movcs	r3, #7
 8013b1a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	89fa      	ldrh	r2, [r7, #14]
 8013b20:	4619      	mov	r1, r3
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	f001 fa9f 	bl	8015066 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013b28:	e085      	b.n	8013c36 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	785a      	ldrb	r2, [r3, #1]
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	88db      	ldrh	r3, [r3, #6]
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013b40:	6939      	ldr	r1, [r7, #16]
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	88db      	ldrh	r3, [r3, #6]
 8013b46:	461a      	mov	r2, r3
 8013b48:	6878      	ldr	r0, [r7, #4]
 8013b4a:	f001 fab8 	bl	80150be <USBD_CtlPrepareRx>
      break;
 8013b4e:	e072      	b.n	8013c36 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013b56:	689b      	ldr	r3, [r3, #8]
 8013b58:	683a      	ldr	r2, [r7, #0]
 8013b5a:	7850      	ldrb	r0, [r2, #1]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	6839      	ldr	r1, [r7, #0]
 8013b60:	4798      	blx	r3
      break;
 8013b62:	e068      	b.n	8013c36 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	785b      	ldrb	r3, [r3, #1]
 8013b68:	2b0b      	cmp	r3, #11
 8013b6a:	d852      	bhi.n	8013c12 <USBD_CDC_Setup+0x162>
 8013b6c:	a201      	add	r2, pc, #4	; (adr r2, 8013b74 <USBD_CDC_Setup+0xc4>)
 8013b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b72:	bf00      	nop
 8013b74:	08013ba5 	.word	0x08013ba5
 8013b78:	08013c21 	.word	0x08013c21
 8013b7c:	08013c13 	.word	0x08013c13
 8013b80:	08013c13 	.word	0x08013c13
 8013b84:	08013c13 	.word	0x08013c13
 8013b88:	08013c13 	.word	0x08013c13
 8013b8c:	08013c13 	.word	0x08013c13
 8013b90:	08013c13 	.word	0x08013c13
 8013b94:	08013c13 	.word	0x08013c13
 8013b98:	08013c13 	.word	0x08013c13
 8013b9c:	08013bcf 	.word	0x08013bcf
 8013ba0:	08013bf9 	.word	0x08013bf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d107      	bne.n	8013bc0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013bb0:	f107 030a 	add.w	r3, r7, #10
 8013bb4:	2202      	movs	r2, #2
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	6878      	ldr	r0, [r7, #4]
 8013bba:	f001 fa54 	bl	8015066 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013bbe:	e032      	b.n	8013c26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013bc0:	6839      	ldr	r1, [r7, #0]
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f001 f9de 	bl	8014f84 <USBD_CtlError>
            ret = USBD_FAIL;
 8013bc8:	2303      	movs	r3, #3
 8013bca:	75fb      	strb	r3, [r7, #23]
          break;
 8013bcc:	e02b      	b.n	8013c26 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	2b03      	cmp	r3, #3
 8013bd8:	d107      	bne.n	8013bea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013bda:	f107 030d 	add.w	r3, r7, #13
 8013bde:	2201      	movs	r2, #1
 8013be0:	4619      	mov	r1, r3
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f001 fa3f 	bl	8015066 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013be8:	e01d      	b.n	8013c26 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013bea:	6839      	ldr	r1, [r7, #0]
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f001 f9c9 	bl	8014f84 <USBD_CtlError>
            ret = USBD_FAIL;
 8013bf2:	2303      	movs	r3, #3
 8013bf4:	75fb      	strb	r3, [r7, #23]
          break;
 8013bf6:	e016      	b.n	8013c26 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b03      	cmp	r3, #3
 8013c02:	d00f      	beq.n	8013c24 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8013c04:	6839      	ldr	r1, [r7, #0]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f001 f9bc 	bl	8014f84 <USBD_CtlError>
            ret = USBD_FAIL;
 8013c0c:	2303      	movs	r3, #3
 8013c0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013c10:	e008      	b.n	8013c24 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013c12:	6839      	ldr	r1, [r7, #0]
 8013c14:	6878      	ldr	r0, [r7, #4]
 8013c16:	f001 f9b5 	bl	8014f84 <USBD_CtlError>
          ret = USBD_FAIL;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8013c1e:	e002      	b.n	8013c26 <USBD_CDC_Setup+0x176>
          break;
 8013c20:	bf00      	nop
 8013c22:	e008      	b.n	8013c36 <USBD_CDC_Setup+0x186>
          break;
 8013c24:	bf00      	nop
      }
      break;
 8013c26:	e006      	b.n	8013c36 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8013c28:	6839      	ldr	r1, [r7, #0]
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f001 f9aa 	bl	8014f84 <USBD_CtlError>
      ret = USBD_FAIL;
 8013c30:	2303      	movs	r3, #3
 8013c32:	75fb      	strb	r3, [r7, #23]
      break;
 8013c34:	bf00      	nop
  }

  return (uint8_t)ret;
 8013c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	3718      	adds	r7, #24
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b084      	sub	sp, #16
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	460b      	mov	r3, r1
 8013c4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013c52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d101      	bne.n	8013c62 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013c5e:	2303      	movs	r3, #3
 8013c60:	e04f      	b.n	8013d02 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013c6a:	78fa      	ldrb	r2, [r7, #3]
 8013c6c:	6879      	ldr	r1, [r7, #4]
 8013c6e:	4613      	mov	r3, r2
 8013c70:	009b      	lsls	r3, r3, #2
 8013c72:	4413      	add	r3, r2
 8013c74:	009b      	lsls	r3, r3, #2
 8013c76:	440b      	add	r3, r1
 8013c78:	3318      	adds	r3, #24
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d029      	beq.n	8013cd4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013c80:	78fa      	ldrb	r2, [r7, #3]
 8013c82:	6879      	ldr	r1, [r7, #4]
 8013c84:	4613      	mov	r3, r2
 8013c86:	009b      	lsls	r3, r3, #2
 8013c88:	4413      	add	r3, r2
 8013c8a:	009b      	lsls	r3, r3, #2
 8013c8c:	440b      	add	r3, r1
 8013c8e:	3318      	adds	r3, #24
 8013c90:	681a      	ldr	r2, [r3, #0]
 8013c92:	78f9      	ldrb	r1, [r7, #3]
 8013c94:	68f8      	ldr	r0, [r7, #12]
 8013c96:	460b      	mov	r3, r1
 8013c98:	009b      	lsls	r3, r3, #2
 8013c9a:	440b      	add	r3, r1
 8013c9c:	00db      	lsls	r3, r3, #3
 8013c9e:	4403      	add	r3, r0
 8013ca0:	3338      	adds	r3, #56	; 0x38
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	fbb2 f1f3 	udiv	r1, r2, r3
 8013ca8:	fb01 f303 	mul.w	r3, r1, r3
 8013cac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d110      	bne.n	8013cd4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8013cb2:	78fa      	ldrb	r2, [r7, #3]
 8013cb4:	6879      	ldr	r1, [r7, #4]
 8013cb6:	4613      	mov	r3, r2
 8013cb8:	009b      	lsls	r3, r3, #2
 8013cba:	4413      	add	r3, r2
 8013cbc:	009b      	lsls	r3, r3, #2
 8013cbe:	440b      	add	r3, r1
 8013cc0:	3318      	adds	r3, #24
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013cc6:	78f9      	ldrb	r1, [r7, #3]
 8013cc8:	2300      	movs	r3, #0
 8013cca:	2200      	movs	r2, #0
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f003 ff75 	bl	8017bbc <USBD_LL_Transmit>
 8013cd2:	e015      	b.n	8013d00 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d00b      	beq.n	8013d00 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013cee:	691b      	ldr	r3, [r3, #16]
 8013cf0:	68ba      	ldr	r2, [r7, #8]
 8013cf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013cf6:	68ba      	ldr	r2, [r7, #8]
 8013cf8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013cfc:	78fa      	ldrb	r2, [r7, #3]
 8013cfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013d00:	2300      	movs	r3, #0
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3710      	adds	r7, #16
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}

08013d0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013d0a:	b580      	push	{r7, lr}
 8013d0c:	b084      	sub	sp, #16
 8013d0e:	af00      	add	r7, sp, #0
 8013d10:	6078      	str	r0, [r7, #4]
 8013d12:	460b      	mov	r3, r1
 8013d14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013d28:	2303      	movs	r3, #3
 8013d2a:	e015      	b.n	8013d58 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013d2c:	78fb      	ldrb	r3, [r7, #3]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	6878      	ldr	r0, [r7, #4]
 8013d32:	f003 ff85 	bl	8017c40 <USBD_LL_GetRxDataSize>
 8013d36:	4602      	mov	r2, r0
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d44:	68db      	ldr	r3, [r3, #12]
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013d52:	4611      	mov	r1, r2
 8013d54:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013d56:	2300      	movs	r3, #0
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3710      	adds	r7, #16
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}

08013d60 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d6e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d101      	bne.n	8013d7a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8013d76:	2303      	movs	r3, #3
 8013d78:	e01b      	b.n	8013db2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d015      	beq.n	8013db0 <USBD_CDC_EP0_RxReady+0x50>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013d8a:	2bff      	cmp	r3, #255	; 0xff
 8013d8c:	d010      	beq.n	8013db0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013d94:	689b      	ldr	r3, [r3, #8]
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8013d9c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013d9e:	68fa      	ldr	r2, [r7, #12]
 8013da0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013da4:	b292      	uxth	r2, r2
 8013da6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	22ff      	movs	r2, #255	; 0xff
 8013dac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013db0:	2300      	movs	r3, #0
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3710      	adds	r7, #16
 8013db6:	46bd      	mov	sp, r7
 8013db8:	bd80      	pop	{r7, pc}
	...

08013dbc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b083      	sub	sp, #12
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2243      	movs	r2, #67	; 0x43
 8013dc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8013dca:	4b03      	ldr	r3, [pc, #12]	; (8013dd8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	370c      	adds	r7, #12
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd6:	4770      	bx	lr
 8013dd8:	20000098 	.word	0x20000098

08013ddc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013ddc:	b480      	push	{r7}
 8013dde:	b083      	sub	sp, #12
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2243      	movs	r2, #67	; 0x43
 8013de8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8013dea:	4b03      	ldr	r3, [pc, #12]	; (8013df8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	370c      	adds	r7, #12
 8013df0:	46bd      	mov	sp, r7
 8013df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df6:	4770      	bx	lr
 8013df8:	20000054 	.word	0x20000054

08013dfc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2243      	movs	r2, #67	; 0x43
 8013e08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8013e0a:	4b03      	ldr	r3, [pc, #12]	; (8013e18 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	370c      	adds	r7, #12
 8013e10:	46bd      	mov	sp, r7
 8013e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e16:	4770      	bx	lr
 8013e18:	200000dc 	.word	0x200000dc

08013e1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b083      	sub	sp, #12
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	220a      	movs	r2, #10
 8013e28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013e2a:	4b03      	ldr	r3, [pc, #12]	; (8013e38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	370c      	adds	r7, #12
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr
 8013e38:	20000010 	.word	0x20000010

08013e3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013e3c:	b480      	push	{r7}
 8013e3e:	b083      	sub	sp, #12
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d101      	bne.n	8013e50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013e4c:	2303      	movs	r3, #3
 8013e4e:	e004      	b.n	8013e5a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	683a      	ldr	r2, [r7, #0]
 8013e54:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013e58:	2300      	movs	r3, #0
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013e66:	b480      	push	{r7}
 8013e68:	b087      	sub	sp, #28
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	60f8      	str	r0, [r7, #12]
 8013e6e:	60b9      	str	r1, [r7, #8]
 8013e70:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e78:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013e80:	2303      	movs	r3, #3
 8013e82:	e008      	b.n	8013e96 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8013e84:	697b      	ldr	r3, [r7, #20]
 8013e86:	68ba      	ldr	r2, [r7, #8]
 8013e88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013e8c:	697b      	ldr	r3, [r7, #20]
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	371c      	adds	r7, #28
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr

08013ea2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013ea2:	b480      	push	{r7}
 8013ea4:	b085      	sub	sp, #20
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
 8013eaa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d101      	bne.n	8013ebe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8013eba:	2303      	movs	r3, #3
 8013ebc:	e004      	b.n	8013ec8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	683a      	ldr	r2, [r7, #0]
 8013ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3714      	adds	r7, #20
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed2:	4770      	bx	lr

08013ed4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d101      	bne.n	8013ef2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8013eee:	2303      	movs	r3, #3
 8013ef0:	e016      	b.n	8013f20 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	7c1b      	ldrb	r3, [r3, #16]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d109      	bne.n	8013f0e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f04:	2101      	movs	r1, #1
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	f003 fe79 	bl	8017bfe <USBD_LL_PrepareReceive>
 8013f0c:	e007      	b.n	8013f1e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f14:	2340      	movs	r3, #64	; 0x40
 8013f16:	2101      	movs	r1, #1
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f003 fe70 	bl	8017bfe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013f1e:	2300      	movs	r3, #0
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b086      	sub	sp, #24
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	4613      	mov	r3, r2
 8013f34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d101      	bne.n	8013f40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	e01f      	b.n	8013f80 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	2200      	movs	r2, #0
 8013f44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	2200      	movs	r2, #0
 8013f54:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d003      	beq.n	8013f66 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	68ba      	ldr	r2, [r7, #8]
 8013f62:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2201      	movs	r2, #1
 8013f6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	79fa      	ldrb	r2, [r7, #7]
 8013f72:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f003 fcd7 	bl	8017928 <USBD_LL_Init>
 8013f7a:	4603      	mov	r3, r0
 8013f7c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f80:	4618      	mov	r0, r3
 8013f82:	3718      	adds	r7, #24
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013f92:	2300      	movs	r3, #0
 8013f94:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d101      	bne.n	8013fa0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8013f9c:	2303      	movs	r3, #3
 8013f9e:	e016      	b.n	8013fce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	683a      	ldr	r2, [r7, #0]
 8013fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d00b      	beq.n	8013fcc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbc:	f107 020e 	add.w	r2, r7, #14
 8013fc0:	4610      	mov	r0, r2
 8013fc2:	4798      	blx	r3
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3710      	adds	r7, #16
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b082      	sub	sp, #8
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f003 fd02 	bl	80179e8 <USBD_LL_Start>
 8013fe4:	4603      	mov	r3, r0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3708      	adds	r7, #8
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}

08013fee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013fee:	b480      	push	{r7}
 8013ff0:	b083      	sub	sp, #12
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013ff6:	2300      	movs	r3, #0
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	370c      	adds	r7, #12
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014002:	4770      	bx	lr

08014004 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b084      	sub	sp, #16
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	460b      	mov	r3, r1
 801400e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014010:	2303      	movs	r3, #3
 8014012:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801401a:	2b00      	cmp	r3, #0
 801401c:	d009      	beq.n	8014032 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	78fa      	ldrb	r2, [r7, #3]
 8014028:	4611      	mov	r1, r2
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	4798      	blx	r3
 801402e:	4603      	mov	r3, r0
 8014030:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014032:	7bfb      	ldrb	r3, [r7, #15]
}
 8014034:	4618      	mov	r0, r3
 8014036:	3710      	adds	r7, #16
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b082      	sub	sp, #8
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	460b      	mov	r3, r1
 8014046:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801404e:	2b00      	cmp	r3, #0
 8014050:	d007      	beq.n	8014062 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	78fa      	ldrb	r2, [r7, #3]
 801405c:	4611      	mov	r1, r2
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	4798      	blx	r3
  }

  return USBD_OK;
 8014062:	2300      	movs	r3, #0
}
 8014064:	4618      	mov	r0, r3
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}

0801406c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801407c:	6839      	ldr	r1, [r7, #0]
 801407e:	4618      	mov	r0, r3
 8014080:	f000 ff46 	bl	8014f10 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2201      	movs	r2, #1
 8014088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014092:	461a      	mov	r2, r3
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80140a0:	f003 031f 	and.w	r3, r3, #31
 80140a4:	2b02      	cmp	r3, #2
 80140a6:	d01a      	beq.n	80140de <USBD_LL_SetupStage+0x72>
 80140a8:	2b02      	cmp	r3, #2
 80140aa:	d822      	bhi.n	80140f2 <USBD_LL_SetupStage+0x86>
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <USBD_LL_SetupStage+0x4a>
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d00a      	beq.n	80140ca <USBD_LL_SetupStage+0x5e>
 80140b4:	e01d      	b.n	80140f2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80140bc:	4619      	mov	r1, r3
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f000 f9ee 	bl	80144a0 <USBD_StdDevReq>
 80140c4:	4603      	mov	r3, r0
 80140c6:	73fb      	strb	r3, [r7, #15]
      break;
 80140c8:	e020      	b.n	801410c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80140d0:	4619      	mov	r1, r3
 80140d2:	6878      	ldr	r0, [r7, #4]
 80140d4:	f000 fa52 	bl	801457c <USBD_StdItfReq>
 80140d8:	4603      	mov	r3, r0
 80140da:	73fb      	strb	r3, [r7, #15]
      break;
 80140dc:	e016      	b.n	801410c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80140e4:	4619      	mov	r1, r3
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f000 fa91 	bl	801460e <USBD_StdEPReq>
 80140ec:	4603      	mov	r3, r0
 80140ee:	73fb      	strb	r3, [r7, #15]
      break;
 80140f0:	e00c      	b.n	801410c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80140f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80140fc:	b2db      	uxtb	r3, r3
 80140fe:	4619      	mov	r1, r3
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f003 fcd1 	bl	8017aa8 <USBD_LL_StallEP>
 8014106:	4603      	mov	r3, r0
 8014108:	73fb      	strb	r3, [r7, #15]
      break;
 801410a:	bf00      	nop
  }

  return ret;
 801410c:	7bfb      	ldrb	r3, [r7, #15]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3710      	adds	r7, #16
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b086      	sub	sp, #24
 801411a:	af00      	add	r7, sp, #0
 801411c:	60f8      	str	r0, [r7, #12]
 801411e:	460b      	mov	r3, r1
 8014120:	607a      	str	r2, [r7, #4]
 8014122:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014124:	7afb      	ldrb	r3, [r7, #11]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d138      	bne.n	801419c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014130:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014138:	2b03      	cmp	r3, #3
 801413a:	d14a      	bne.n	80141d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	689a      	ldr	r2, [r3, #8]
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	68db      	ldr	r3, [r3, #12]
 8014144:	429a      	cmp	r2, r3
 8014146:	d913      	bls.n	8014170 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	689a      	ldr	r2, [r3, #8]
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	68db      	ldr	r3, [r3, #12]
 8014150:	1ad2      	subs	r2, r2, r3
 8014152:	693b      	ldr	r3, [r7, #16]
 8014154:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	68da      	ldr	r2, [r3, #12]
 801415a:	693b      	ldr	r3, [r7, #16]
 801415c:	689b      	ldr	r3, [r3, #8]
 801415e:	4293      	cmp	r3, r2
 8014160:	bf28      	it	cs
 8014162:	4613      	movcs	r3, r2
 8014164:	461a      	mov	r2, r3
 8014166:	6879      	ldr	r1, [r7, #4]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f000 ffc5 	bl	80150f8 <USBD_CtlContinueRx>
 801416e:	e030      	b.n	80141d2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b03      	cmp	r3, #3
 801417a:	d10b      	bne.n	8014194 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d005      	beq.n	8014194 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	f000 ffc0 	bl	801511a <USBD_CtlSendStatus>
 801419a:	e01a      	b.n	80141d2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d114      	bne.n	80141d2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ae:	699b      	ldr	r3, [r3, #24]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00e      	beq.n	80141d2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ba:	699b      	ldr	r3, [r3, #24]
 80141bc:	7afa      	ldrb	r2, [r7, #11]
 80141be:	4611      	mov	r1, r2
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	4798      	blx	r3
 80141c4:	4603      	mov	r3, r0
 80141c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80141c8:	7dfb      	ldrb	r3, [r7, #23]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d001      	beq.n	80141d2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80141ce:	7dfb      	ldrb	r3, [r7, #23]
 80141d0:	e000      	b.n	80141d4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80141d2:	2300      	movs	r3, #0
}
 80141d4:	4618      	mov	r0, r3
 80141d6:	3718      	adds	r7, #24
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b086      	sub	sp, #24
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	460b      	mov	r3, r1
 80141e6:	607a      	str	r2, [r7, #4]
 80141e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80141ea:	7afb      	ldrb	r3, [r7, #11]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d16b      	bne.n	80142c8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	3314      	adds	r3, #20
 80141f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80141fc:	2b02      	cmp	r3, #2
 80141fe:	d156      	bne.n	80142ae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	689a      	ldr	r2, [r3, #8]
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	429a      	cmp	r2, r3
 801420a:	d914      	bls.n	8014236 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801420c:	693b      	ldr	r3, [r7, #16]
 801420e:	689a      	ldr	r2, [r3, #8]
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	68db      	ldr	r3, [r3, #12]
 8014214:	1ad2      	subs	r2, r2, r3
 8014216:	693b      	ldr	r3, [r7, #16]
 8014218:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	689b      	ldr	r3, [r3, #8]
 801421e:	461a      	mov	r2, r3
 8014220:	6879      	ldr	r1, [r7, #4]
 8014222:	68f8      	ldr	r0, [r7, #12]
 8014224:	f000 ff3a 	bl	801509c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014228:	2300      	movs	r3, #0
 801422a:	2200      	movs	r2, #0
 801422c:	2100      	movs	r1, #0
 801422e:	68f8      	ldr	r0, [r7, #12]
 8014230:	f003 fce5 	bl	8017bfe <USBD_LL_PrepareReceive>
 8014234:	e03b      	b.n	80142ae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	68da      	ldr	r2, [r3, #12]
 801423a:	693b      	ldr	r3, [r7, #16]
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	429a      	cmp	r2, r3
 8014240:	d11c      	bne.n	801427c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	685a      	ldr	r2, [r3, #4]
 8014246:	693b      	ldr	r3, [r7, #16]
 8014248:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801424a:	429a      	cmp	r2, r3
 801424c:	d316      	bcc.n	801427c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	685a      	ldr	r2, [r3, #4]
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014258:	429a      	cmp	r2, r3
 801425a:	d20f      	bcs.n	801427c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801425c:	2200      	movs	r2, #0
 801425e:	2100      	movs	r1, #0
 8014260:	68f8      	ldr	r0, [r7, #12]
 8014262:	f000 ff1b 	bl	801509c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801426e:	2300      	movs	r3, #0
 8014270:	2200      	movs	r2, #0
 8014272:	2100      	movs	r1, #0
 8014274:	68f8      	ldr	r0, [r7, #12]
 8014276:	f003 fcc2 	bl	8017bfe <USBD_LL_PrepareReceive>
 801427a:	e018      	b.n	80142ae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014282:	b2db      	uxtb	r3, r3
 8014284:	2b03      	cmp	r3, #3
 8014286:	d10b      	bne.n	80142a0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801428e:	68db      	ldr	r3, [r3, #12]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d005      	beq.n	80142a0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801429a:	68db      	ldr	r3, [r3, #12]
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80142a0:	2180      	movs	r1, #128	; 0x80
 80142a2:	68f8      	ldr	r0, [r7, #12]
 80142a4:	f003 fc00 	bl	8017aa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f000 ff49 	bl	8015140 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d122      	bne.n	80142fe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f7ff fe98 	bl	8013fee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	2200      	movs	r2, #0
 80142c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80142c6:	e01a      	b.n	80142fe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	2b03      	cmp	r3, #3
 80142d2:	d114      	bne.n	80142fe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142da:	695b      	ldr	r3, [r3, #20]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d00e      	beq.n	80142fe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142e6:	695b      	ldr	r3, [r3, #20]
 80142e8:	7afa      	ldrb	r2, [r7, #11]
 80142ea:	4611      	mov	r1, r2
 80142ec:	68f8      	ldr	r0, [r7, #12]
 80142ee:	4798      	blx	r3
 80142f0:	4603      	mov	r3, r0
 80142f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80142f4:	7dfb      	ldrb	r3, [r7, #23]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d001      	beq.n	80142fe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80142fa:	7dfb      	ldrb	r3, [r7, #23]
 80142fc:	e000      	b.n	8014300 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80142fe:	2300      	movs	r3, #0
}
 8014300:	4618      	mov	r0, r3
 8014302:	3718      	adds	r7, #24
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}

08014308 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2201      	movs	r2, #1
 8014314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2200      	movs	r2, #0
 8014324:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	2200      	movs	r2, #0
 801432a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014334:	2b00      	cmp	r3, #0
 8014336:	d101      	bne.n	801433c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014338:	2303      	movs	r3, #3
 801433a:	e02f      	b.n	801439c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00f      	beq.n	8014366 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801434c:	685b      	ldr	r3, [r3, #4]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d009      	beq.n	8014366 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014358:	685b      	ldr	r3, [r3, #4]
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	6852      	ldr	r2, [r2, #4]
 801435e:	b2d2      	uxtb	r2, r2
 8014360:	4611      	mov	r1, r2
 8014362:	6878      	ldr	r0, [r7, #4]
 8014364:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014366:	2340      	movs	r3, #64	; 0x40
 8014368:	2200      	movs	r2, #0
 801436a:	2100      	movs	r1, #0
 801436c:	6878      	ldr	r0, [r7, #4]
 801436e:	f003 fb56 	bl	8017a1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2201      	movs	r2, #1
 8014376:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2240      	movs	r2, #64	; 0x40
 801437e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014382:	2340      	movs	r3, #64	; 0x40
 8014384:	2200      	movs	r2, #0
 8014386:	2180      	movs	r1, #128	; 0x80
 8014388:	6878      	ldr	r0, [r7, #4]
 801438a:	f003 fb48 	bl	8017a1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	2201      	movs	r2, #1
 8014392:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2240      	movs	r2, #64	; 0x40
 8014398:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801439a:	2300      	movs	r3, #0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3708      	adds	r7, #8
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b083      	sub	sp, #12
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
 80143ac:	460b      	mov	r3, r1
 80143ae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	78fa      	ldrb	r2, [r7, #3]
 80143b4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80143b6:	2300      	movs	r3, #0
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	370c      	adds	r7, #12
 80143bc:	46bd      	mov	sp, r7
 80143be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c2:	4770      	bx	lr

080143c4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80143c4:	b480      	push	{r7}
 80143c6:	b083      	sub	sp, #12
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2204      	movs	r2, #4
 80143de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	370c      	adds	r7, #12
 80143e8:	46bd      	mov	sp, r7
 80143ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ee:	4770      	bx	lr

080143f0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80143f0:	b480      	push	{r7}
 80143f2:	b083      	sub	sp, #12
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143fe:	b2db      	uxtb	r3, r3
 8014400:	2b04      	cmp	r3, #4
 8014402:	d106      	bne.n	8014412 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801440a:	b2da      	uxtb	r2, r3
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	370c      	adds	r7, #12
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801442e:	2b00      	cmp	r3, #0
 8014430:	d101      	bne.n	8014436 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014432:	2303      	movs	r3, #3
 8014434:	e012      	b.n	801445c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801443c:	b2db      	uxtb	r3, r3
 801443e:	2b03      	cmp	r3, #3
 8014440:	d10b      	bne.n	801445a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014448:	69db      	ldr	r3, [r3, #28]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d005      	beq.n	801445a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014454:	69db      	ldr	r3, [r3, #28]
 8014456:	6878      	ldr	r0, [r7, #4]
 8014458:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801445a:	2300      	movs	r3, #0
}
 801445c:	4618      	mov	r0, r3
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014464:	b480      	push	{r7}
 8014466:	b087      	sub	sp, #28
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	3301      	adds	r3, #1
 801447a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	781b      	ldrb	r3, [r3, #0]
 8014480:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014482:	8a3b      	ldrh	r3, [r7, #16]
 8014484:	021b      	lsls	r3, r3, #8
 8014486:	b21a      	sxth	r2, r3
 8014488:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801448c:	4313      	orrs	r3, r2
 801448e:	b21b      	sxth	r3, r3
 8014490:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014492:	89fb      	ldrh	r3, [r7, #14]
}
 8014494:	4618      	mov	r0, r3
 8014496:	371c      	adds	r7, #28
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80144aa:	2300      	movs	r3, #0
 80144ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80144b6:	2b40      	cmp	r3, #64	; 0x40
 80144b8:	d005      	beq.n	80144c6 <USBD_StdDevReq+0x26>
 80144ba:	2b40      	cmp	r3, #64	; 0x40
 80144bc:	d853      	bhi.n	8014566 <USBD_StdDevReq+0xc6>
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00b      	beq.n	80144da <USBD_StdDevReq+0x3a>
 80144c2:	2b20      	cmp	r3, #32
 80144c4:	d14f      	bne.n	8014566 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144cc:	689b      	ldr	r3, [r3, #8]
 80144ce:	6839      	ldr	r1, [r7, #0]
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	4798      	blx	r3
 80144d4:	4603      	mov	r3, r0
 80144d6:	73fb      	strb	r3, [r7, #15]
      break;
 80144d8:	e04a      	b.n	8014570 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	785b      	ldrb	r3, [r3, #1]
 80144de:	2b09      	cmp	r3, #9
 80144e0:	d83b      	bhi.n	801455a <USBD_StdDevReq+0xba>
 80144e2:	a201      	add	r2, pc, #4	; (adr r2, 80144e8 <USBD_StdDevReq+0x48>)
 80144e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144e8:	0801453d 	.word	0x0801453d
 80144ec:	08014551 	.word	0x08014551
 80144f0:	0801455b 	.word	0x0801455b
 80144f4:	08014547 	.word	0x08014547
 80144f8:	0801455b 	.word	0x0801455b
 80144fc:	0801451b 	.word	0x0801451b
 8014500:	08014511 	.word	0x08014511
 8014504:	0801455b 	.word	0x0801455b
 8014508:	08014533 	.word	0x08014533
 801450c:	08014525 	.word	0x08014525
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014510:	6839      	ldr	r1, [r7, #0]
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f000 f9de 	bl	80148d4 <USBD_GetDescriptor>
          break;
 8014518:	e024      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801451a:	6839      	ldr	r1, [r7, #0]
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f000 fb6d 	bl	8014bfc <USBD_SetAddress>
          break;
 8014522:	e01f      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014524:	6839      	ldr	r1, [r7, #0]
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 fbac 	bl	8014c84 <USBD_SetConfig>
 801452c:	4603      	mov	r3, r0
 801452e:	73fb      	strb	r3, [r7, #15]
          break;
 8014530:	e018      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014532:	6839      	ldr	r1, [r7, #0]
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f000 fc4b 	bl	8014dd0 <USBD_GetConfig>
          break;
 801453a:	e013      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f000 fc7c 	bl	8014e3c <USBD_GetStatus>
          break;
 8014544:	e00e      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014546:	6839      	ldr	r1, [r7, #0]
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f000 fcab 	bl	8014ea4 <USBD_SetFeature>
          break;
 801454e:	e009      	b.n	8014564 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 fcba 	bl	8014ecc <USBD_ClrFeature>
          break;
 8014558:	e004      	b.n	8014564 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801455a:	6839      	ldr	r1, [r7, #0]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	f000 fd11 	bl	8014f84 <USBD_CtlError>
          break;
 8014562:	bf00      	nop
      }
      break;
 8014564:	e004      	b.n	8014570 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014566:	6839      	ldr	r1, [r7, #0]
 8014568:	6878      	ldr	r0, [r7, #4]
 801456a:	f000 fd0b 	bl	8014f84 <USBD_CtlError>
      break;
 801456e:	bf00      	nop
  }

  return ret;
 8014570:	7bfb      	ldrb	r3, [r7, #15]
}
 8014572:	4618      	mov	r0, r3
 8014574:	3710      	adds	r7, #16
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop

0801457c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014586:	2300      	movs	r3, #0
 8014588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801458a:	683b      	ldr	r3, [r7, #0]
 801458c:	781b      	ldrb	r3, [r3, #0]
 801458e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014592:	2b40      	cmp	r3, #64	; 0x40
 8014594:	d005      	beq.n	80145a2 <USBD_StdItfReq+0x26>
 8014596:	2b40      	cmp	r3, #64	; 0x40
 8014598:	d82f      	bhi.n	80145fa <USBD_StdItfReq+0x7e>
 801459a:	2b00      	cmp	r3, #0
 801459c:	d001      	beq.n	80145a2 <USBD_StdItfReq+0x26>
 801459e:	2b20      	cmp	r3, #32
 80145a0:	d12b      	bne.n	80145fa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	3b01      	subs	r3, #1
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d81d      	bhi.n	80145ec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	889b      	ldrh	r3, [r3, #4]
 80145b4:	b2db      	uxtb	r3, r3
 80145b6:	2b01      	cmp	r3, #1
 80145b8:	d813      	bhi.n	80145e2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145c0:	689b      	ldr	r3, [r3, #8]
 80145c2:	6839      	ldr	r1, [r7, #0]
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	4798      	blx	r3
 80145c8:	4603      	mov	r3, r0
 80145ca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80145cc:	683b      	ldr	r3, [r7, #0]
 80145ce:	88db      	ldrh	r3, [r3, #6]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d110      	bne.n	80145f6 <USBD_StdItfReq+0x7a>
 80145d4:	7bfb      	ldrb	r3, [r7, #15]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d10d      	bne.n	80145f6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fd9d 	bl	801511a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80145e0:	e009      	b.n	80145f6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80145e2:	6839      	ldr	r1, [r7, #0]
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f000 fccd 	bl	8014f84 <USBD_CtlError>
          break;
 80145ea:	e004      	b.n	80145f6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80145ec:	6839      	ldr	r1, [r7, #0]
 80145ee:	6878      	ldr	r0, [r7, #4]
 80145f0:	f000 fcc8 	bl	8014f84 <USBD_CtlError>
          break;
 80145f4:	e000      	b.n	80145f8 <USBD_StdItfReq+0x7c>
          break;
 80145f6:	bf00      	nop
      }
      break;
 80145f8:	e004      	b.n	8014604 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80145fa:	6839      	ldr	r1, [r7, #0]
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 fcc1 	bl	8014f84 <USBD_CtlError>
      break;
 8014602:	bf00      	nop
  }

  return ret;
 8014604:	7bfb      	ldrb	r3, [r7, #15]
}
 8014606:	4618      	mov	r0, r3
 8014608:	3710      	adds	r7, #16
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}

0801460e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801460e:	b580      	push	{r7, lr}
 8014610:	b084      	sub	sp, #16
 8014612:	af00      	add	r7, sp, #0
 8014614:	6078      	str	r0, [r7, #4]
 8014616:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014618:	2300      	movs	r3, #0
 801461a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	889b      	ldrh	r3, [r3, #4]
 8014620:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	781b      	ldrb	r3, [r3, #0]
 8014626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801462a:	2b40      	cmp	r3, #64	; 0x40
 801462c:	d007      	beq.n	801463e <USBD_StdEPReq+0x30>
 801462e:	2b40      	cmp	r3, #64	; 0x40
 8014630:	f200 8145 	bhi.w	80148be <USBD_StdEPReq+0x2b0>
 8014634:	2b00      	cmp	r3, #0
 8014636:	d00c      	beq.n	8014652 <USBD_StdEPReq+0x44>
 8014638:	2b20      	cmp	r3, #32
 801463a:	f040 8140 	bne.w	80148be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014644:	689b      	ldr	r3, [r3, #8]
 8014646:	6839      	ldr	r1, [r7, #0]
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	4798      	blx	r3
 801464c:	4603      	mov	r3, r0
 801464e:	73fb      	strb	r3, [r7, #15]
      break;
 8014650:	e13a      	b.n	80148c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	785b      	ldrb	r3, [r3, #1]
 8014656:	2b03      	cmp	r3, #3
 8014658:	d007      	beq.n	801466a <USBD_StdEPReq+0x5c>
 801465a:	2b03      	cmp	r3, #3
 801465c:	f300 8129 	bgt.w	80148b2 <USBD_StdEPReq+0x2a4>
 8014660:	2b00      	cmp	r3, #0
 8014662:	d07f      	beq.n	8014764 <USBD_StdEPReq+0x156>
 8014664:	2b01      	cmp	r3, #1
 8014666:	d03c      	beq.n	80146e2 <USBD_StdEPReq+0xd4>
 8014668:	e123      	b.n	80148b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014670:	b2db      	uxtb	r3, r3
 8014672:	2b02      	cmp	r3, #2
 8014674:	d002      	beq.n	801467c <USBD_StdEPReq+0x6e>
 8014676:	2b03      	cmp	r3, #3
 8014678:	d016      	beq.n	80146a8 <USBD_StdEPReq+0x9a>
 801467a:	e02c      	b.n	80146d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801467c:	7bbb      	ldrb	r3, [r7, #14]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d00d      	beq.n	801469e <USBD_StdEPReq+0x90>
 8014682:	7bbb      	ldrb	r3, [r7, #14]
 8014684:	2b80      	cmp	r3, #128	; 0x80
 8014686:	d00a      	beq.n	801469e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014688:	7bbb      	ldrb	r3, [r7, #14]
 801468a:	4619      	mov	r1, r3
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f003 fa0b 	bl	8017aa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014692:	2180      	movs	r1, #128	; 0x80
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f003 fa07 	bl	8017aa8 <USBD_LL_StallEP>
 801469a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801469c:	e020      	b.n	80146e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801469e:	6839      	ldr	r1, [r7, #0]
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f000 fc6f 	bl	8014f84 <USBD_CtlError>
              break;
 80146a6:	e01b      	b.n	80146e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	885b      	ldrh	r3, [r3, #2]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d10e      	bne.n	80146ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80146b0:	7bbb      	ldrb	r3, [r7, #14]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d00b      	beq.n	80146ce <USBD_StdEPReq+0xc0>
 80146b6:	7bbb      	ldrb	r3, [r7, #14]
 80146b8:	2b80      	cmp	r3, #128	; 0x80
 80146ba:	d008      	beq.n	80146ce <USBD_StdEPReq+0xc0>
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	88db      	ldrh	r3, [r3, #6]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d104      	bne.n	80146ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80146c4:	7bbb      	ldrb	r3, [r7, #14]
 80146c6:	4619      	mov	r1, r3
 80146c8:	6878      	ldr	r0, [r7, #4]
 80146ca:	f003 f9ed 	bl	8017aa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 fd23 	bl	801511a <USBD_CtlSendStatus>

              break;
 80146d4:	e004      	b.n	80146e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80146d6:	6839      	ldr	r1, [r7, #0]
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f000 fc53 	bl	8014f84 <USBD_CtlError>
              break;
 80146de:	bf00      	nop
          }
          break;
 80146e0:	e0ec      	b.n	80148bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146e8:	b2db      	uxtb	r3, r3
 80146ea:	2b02      	cmp	r3, #2
 80146ec:	d002      	beq.n	80146f4 <USBD_StdEPReq+0xe6>
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	d016      	beq.n	8014720 <USBD_StdEPReq+0x112>
 80146f2:	e030      	b.n	8014756 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146f4:	7bbb      	ldrb	r3, [r7, #14]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d00d      	beq.n	8014716 <USBD_StdEPReq+0x108>
 80146fa:	7bbb      	ldrb	r3, [r7, #14]
 80146fc:	2b80      	cmp	r3, #128	; 0x80
 80146fe:	d00a      	beq.n	8014716 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014700:	7bbb      	ldrb	r3, [r7, #14]
 8014702:	4619      	mov	r1, r3
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f003 f9cf 	bl	8017aa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801470a:	2180      	movs	r1, #128	; 0x80
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f003 f9cb 	bl	8017aa8 <USBD_LL_StallEP>
 8014712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014714:	e025      	b.n	8014762 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014716:	6839      	ldr	r1, [r7, #0]
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f000 fc33 	bl	8014f84 <USBD_CtlError>
              break;
 801471e:	e020      	b.n	8014762 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014720:	683b      	ldr	r3, [r7, #0]
 8014722:	885b      	ldrh	r3, [r3, #2]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d11b      	bne.n	8014760 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014728:	7bbb      	ldrb	r3, [r7, #14]
 801472a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801472e:	2b00      	cmp	r3, #0
 8014730:	d004      	beq.n	801473c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014732:	7bbb      	ldrb	r3, [r7, #14]
 8014734:	4619      	mov	r1, r3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f003 f9d5 	bl	8017ae6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f000 fcec 	bl	801511a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014748:	689b      	ldr	r3, [r3, #8]
 801474a:	6839      	ldr	r1, [r7, #0]
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	4798      	blx	r3
 8014750:	4603      	mov	r3, r0
 8014752:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014754:	e004      	b.n	8014760 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014756:	6839      	ldr	r1, [r7, #0]
 8014758:	6878      	ldr	r0, [r7, #4]
 801475a:	f000 fc13 	bl	8014f84 <USBD_CtlError>
              break;
 801475e:	e000      	b.n	8014762 <USBD_StdEPReq+0x154>
              break;
 8014760:	bf00      	nop
          }
          break;
 8014762:	e0ab      	b.n	80148bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801476a:	b2db      	uxtb	r3, r3
 801476c:	2b02      	cmp	r3, #2
 801476e:	d002      	beq.n	8014776 <USBD_StdEPReq+0x168>
 8014770:	2b03      	cmp	r3, #3
 8014772:	d032      	beq.n	80147da <USBD_StdEPReq+0x1cc>
 8014774:	e097      	b.n	80148a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014776:	7bbb      	ldrb	r3, [r7, #14]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d007      	beq.n	801478c <USBD_StdEPReq+0x17e>
 801477c:	7bbb      	ldrb	r3, [r7, #14]
 801477e:	2b80      	cmp	r3, #128	; 0x80
 8014780:	d004      	beq.n	801478c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014782:	6839      	ldr	r1, [r7, #0]
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f000 fbfd 	bl	8014f84 <USBD_CtlError>
                break;
 801478a:	e091      	b.n	80148b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801478c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014790:	2b00      	cmp	r3, #0
 8014792:	da0b      	bge.n	80147ac <USBD_StdEPReq+0x19e>
 8014794:	7bbb      	ldrb	r3, [r7, #14]
 8014796:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801479a:	4613      	mov	r3, r2
 801479c:	009b      	lsls	r3, r3, #2
 801479e:	4413      	add	r3, r2
 80147a0:	009b      	lsls	r3, r3, #2
 80147a2:	3310      	adds	r3, #16
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	4413      	add	r3, r2
 80147a8:	3304      	adds	r3, #4
 80147aa:	e00b      	b.n	80147c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80147ac:	7bbb      	ldrb	r3, [r7, #14]
 80147ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147b2:	4613      	mov	r3, r2
 80147b4:	009b      	lsls	r3, r3, #2
 80147b6:	4413      	add	r3, r2
 80147b8:	009b      	lsls	r3, r3, #2
 80147ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	4413      	add	r3, r2
 80147c2:	3304      	adds	r3, #4
 80147c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80147c6:	68bb      	ldr	r3, [r7, #8]
 80147c8:	2200      	movs	r2, #0
 80147ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	2202      	movs	r2, #2
 80147d0:	4619      	mov	r1, r3
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f000 fc47 	bl	8015066 <USBD_CtlSendData>
              break;
 80147d8:	e06a      	b.n	80148b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80147da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	da11      	bge.n	8014806 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80147e2:	7bbb      	ldrb	r3, [r7, #14]
 80147e4:	f003 020f 	and.w	r2, r3, #15
 80147e8:	6879      	ldr	r1, [r7, #4]
 80147ea:	4613      	mov	r3, r2
 80147ec:	009b      	lsls	r3, r3, #2
 80147ee:	4413      	add	r3, r2
 80147f0:	009b      	lsls	r3, r3, #2
 80147f2:	440b      	add	r3, r1
 80147f4:	3324      	adds	r3, #36	; 0x24
 80147f6:	881b      	ldrh	r3, [r3, #0]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d117      	bne.n	801482c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80147fc:	6839      	ldr	r1, [r7, #0]
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 fbc0 	bl	8014f84 <USBD_CtlError>
                  break;
 8014804:	e054      	b.n	80148b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014806:	7bbb      	ldrb	r3, [r7, #14]
 8014808:	f003 020f 	and.w	r2, r3, #15
 801480c:	6879      	ldr	r1, [r7, #4]
 801480e:	4613      	mov	r3, r2
 8014810:	009b      	lsls	r3, r3, #2
 8014812:	4413      	add	r3, r2
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	440b      	add	r3, r1
 8014818:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801481c:	881b      	ldrh	r3, [r3, #0]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d104      	bne.n	801482c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014822:	6839      	ldr	r1, [r7, #0]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 fbad 	bl	8014f84 <USBD_CtlError>
                  break;
 801482a:	e041      	b.n	80148b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801482c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014830:	2b00      	cmp	r3, #0
 8014832:	da0b      	bge.n	801484c <USBD_StdEPReq+0x23e>
 8014834:	7bbb      	ldrb	r3, [r7, #14]
 8014836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801483a:	4613      	mov	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	3310      	adds	r3, #16
 8014844:	687a      	ldr	r2, [r7, #4]
 8014846:	4413      	add	r3, r2
 8014848:	3304      	adds	r3, #4
 801484a:	e00b      	b.n	8014864 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801484c:	7bbb      	ldrb	r3, [r7, #14]
 801484e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014852:	4613      	mov	r3, r2
 8014854:	009b      	lsls	r3, r3, #2
 8014856:	4413      	add	r3, r2
 8014858:	009b      	lsls	r3, r3, #2
 801485a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801485e:	687a      	ldr	r2, [r7, #4]
 8014860:	4413      	add	r3, r2
 8014862:	3304      	adds	r3, #4
 8014864:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014866:	7bbb      	ldrb	r3, [r7, #14]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d002      	beq.n	8014872 <USBD_StdEPReq+0x264>
 801486c:	7bbb      	ldrb	r3, [r7, #14]
 801486e:	2b80      	cmp	r3, #128	; 0x80
 8014870:	d103      	bne.n	801487a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	2200      	movs	r2, #0
 8014876:	601a      	str	r2, [r3, #0]
 8014878:	e00e      	b.n	8014898 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801487a:	7bbb      	ldrb	r3, [r7, #14]
 801487c:	4619      	mov	r1, r3
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f003 f950 	bl	8017b24 <USBD_LL_IsStallEP>
 8014884:	4603      	mov	r3, r0
 8014886:	2b00      	cmp	r3, #0
 8014888:	d003      	beq.n	8014892 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	2201      	movs	r2, #1
 801488e:	601a      	str	r2, [r3, #0]
 8014890:	e002      	b.n	8014898 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	2200      	movs	r2, #0
 8014896:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	2202      	movs	r2, #2
 801489c:	4619      	mov	r1, r3
 801489e:	6878      	ldr	r0, [r7, #4]
 80148a0:	f000 fbe1 	bl	8015066 <USBD_CtlSendData>
              break;
 80148a4:	e004      	b.n	80148b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80148a6:	6839      	ldr	r1, [r7, #0]
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 fb6b 	bl	8014f84 <USBD_CtlError>
              break;
 80148ae:	bf00      	nop
          }
          break;
 80148b0:	e004      	b.n	80148bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80148b2:	6839      	ldr	r1, [r7, #0]
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f000 fb65 	bl	8014f84 <USBD_CtlError>
          break;
 80148ba:	bf00      	nop
      }
      break;
 80148bc:	e004      	b.n	80148c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80148be:	6839      	ldr	r1, [r7, #0]
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f000 fb5f 	bl	8014f84 <USBD_CtlError>
      break;
 80148c6:	bf00      	nop
  }

  return ret;
 80148c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3710      	adds	r7, #16
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
	...

080148d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b084      	sub	sp, #16
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80148de:	2300      	movs	r3, #0
 80148e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80148e2:	2300      	movs	r3, #0
 80148e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80148e6:	2300      	movs	r3, #0
 80148e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	885b      	ldrh	r3, [r3, #2]
 80148ee:	0a1b      	lsrs	r3, r3, #8
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	3b01      	subs	r3, #1
 80148f4:	2b0e      	cmp	r3, #14
 80148f6:	f200 8152 	bhi.w	8014b9e <USBD_GetDescriptor+0x2ca>
 80148fa:	a201      	add	r2, pc, #4	; (adr r2, 8014900 <USBD_GetDescriptor+0x2c>)
 80148fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014900:	08014971 	.word	0x08014971
 8014904:	08014989 	.word	0x08014989
 8014908:	080149c9 	.word	0x080149c9
 801490c:	08014b9f 	.word	0x08014b9f
 8014910:	08014b9f 	.word	0x08014b9f
 8014914:	08014b3f 	.word	0x08014b3f
 8014918:	08014b6b 	.word	0x08014b6b
 801491c:	08014b9f 	.word	0x08014b9f
 8014920:	08014b9f 	.word	0x08014b9f
 8014924:	08014b9f 	.word	0x08014b9f
 8014928:	08014b9f 	.word	0x08014b9f
 801492c:	08014b9f 	.word	0x08014b9f
 8014930:	08014b9f 	.word	0x08014b9f
 8014934:	08014b9f 	.word	0x08014b9f
 8014938:	0801493d 	.word	0x0801493d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014942:	69db      	ldr	r3, [r3, #28]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d00b      	beq.n	8014960 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801494e:	69db      	ldr	r3, [r3, #28]
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	7c12      	ldrb	r2, [r2, #16]
 8014954:	f107 0108 	add.w	r1, r7, #8
 8014958:	4610      	mov	r0, r2
 801495a:	4798      	blx	r3
 801495c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801495e:	e126      	b.n	8014bae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014960:	6839      	ldr	r1, [r7, #0]
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 fb0e 	bl	8014f84 <USBD_CtlError>
        err++;
 8014968:	7afb      	ldrb	r3, [r7, #11]
 801496a:	3301      	adds	r3, #1
 801496c:	72fb      	strb	r3, [r7, #11]
      break;
 801496e:	e11e      	b.n	8014bae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	7c12      	ldrb	r2, [r2, #16]
 801497c:	f107 0108 	add.w	r1, r7, #8
 8014980:	4610      	mov	r0, r2
 8014982:	4798      	blx	r3
 8014984:	60f8      	str	r0, [r7, #12]
      break;
 8014986:	e112      	b.n	8014bae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	7c1b      	ldrb	r3, [r3, #16]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d10d      	bne.n	80149ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014998:	f107 0208 	add.w	r2, r7, #8
 801499c:	4610      	mov	r0, r2
 801499e:	4798      	blx	r3
 80149a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3301      	adds	r3, #1
 80149a6:	2202      	movs	r2, #2
 80149a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80149aa:	e100      	b.n	8014bae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b4:	f107 0208 	add.w	r2, r7, #8
 80149b8:	4610      	mov	r0, r2
 80149ba:	4798      	blx	r3
 80149bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	3301      	adds	r3, #1
 80149c2:	2202      	movs	r2, #2
 80149c4:	701a      	strb	r2, [r3, #0]
      break;
 80149c6:	e0f2      	b.n	8014bae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80149c8:	683b      	ldr	r3, [r7, #0]
 80149ca:	885b      	ldrh	r3, [r3, #2]
 80149cc:	b2db      	uxtb	r3, r3
 80149ce:	2b05      	cmp	r3, #5
 80149d0:	f200 80ac 	bhi.w	8014b2c <USBD_GetDescriptor+0x258>
 80149d4:	a201      	add	r2, pc, #4	; (adr r2, 80149dc <USBD_GetDescriptor+0x108>)
 80149d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149da:	bf00      	nop
 80149dc:	080149f5 	.word	0x080149f5
 80149e0:	08014a29 	.word	0x08014a29
 80149e4:	08014a5d 	.word	0x08014a5d
 80149e8:	08014a91 	.word	0x08014a91
 80149ec:	08014ac5 	.word	0x08014ac5
 80149f0:	08014af9 	.word	0x08014af9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a06:	685b      	ldr	r3, [r3, #4]
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	7c12      	ldrb	r2, [r2, #16]
 8014a0c:	f107 0108 	add.w	r1, r7, #8
 8014a10:	4610      	mov	r0, r2
 8014a12:	4798      	blx	r3
 8014a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a16:	e091      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f000 fab2 	bl	8014f84 <USBD_CtlError>
            err++;
 8014a20:	7afb      	ldrb	r3, [r7, #11]
 8014a22:	3301      	adds	r3, #1
 8014a24:	72fb      	strb	r3, [r7, #11]
          break;
 8014a26:	e089      	b.n	8014b3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d00b      	beq.n	8014a4c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	7c12      	ldrb	r2, [r2, #16]
 8014a40:	f107 0108 	add.w	r1, r7, #8
 8014a44:	4610      	mov	r0, r2
 8014a46:	4798      	blx	r3
 8014a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a4a:	e077      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 fa98 	bl	8014f84 <USBD_CtlError>
            err++;
 8014a54:	7afb      	ldrb	r3, [r7, #11]
 8014a56:	3301      	adds	r3, #1
 8014a58:	72fb      	strb	r3, [r7, #11]
          break;
 8014a5a:	e06f      	b.n	8014b3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00b      	beq.n	8014a80 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	7c12      	ldrb	r2, [r2, #16]
 8014a74:	f107 0108 	add.w	r1, r7, #8
 8014a78:	4610      	mov	r0, r2
 8014a7a:	4798      	blx	r3
 8014a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a7e:	e05d      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a80:	6839      	ldr	r1, [r7, #0]
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fa7e 	bl	8014f84 <USBD_CtlError>
            err++;
 8014a88:	7afb      	ldrb	r3, [r7, #11]
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a8e:	e055      	b.n	8014b3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a96:	691b      	ldr	r3, [r3, #16]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00b      	beq.n	8014ab4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014aa2:	691b      	ldr	r3, [r3, #16]
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	7c12      	ldrb	r2, [r2, #16]
 8014aa8:	f107 0108 	add.w	r1, r7, #8
 8014aac:	4610      	mov	r0, r2
 8014aae:	4798      	blx	r3
 8014ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ab2:	e043      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ab4:	6839      	ldr	r1, [r7, #0]
 8014ab6:	6878      	ldr	r0, [r7, #4]
 8014ab8:	f000 fa64 	bl	8014f84 <USBD_CtlError>
            err++;
 8014abc:	7afb      	ldrb	r3, [r7, #11]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8014ac2:	e03b      	b.n	8014b3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014aca:	695b      	ldr	r3, [r3, #20]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00b      	beq.n	8014ae8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ad6:	695b      	ldr	r3, [r3, #20]
 8014ad8:	687a      	ldr	r2, [r7, #4]
 8014ada:	7c12      	ldrb	r2, [r2, #16]
 8014adc:	f107 0108 	add.w	r1, r7, #8
 8014ae0:	4610      	mov	r0, r2
 8014ae2:	4798      	blx	r3
 8014ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ae6:	e029      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ae8:	6839      	ldr	r1, [r7, #0]
 8014aea:	6878      	ldr	r0, [r7, #4]
 8014aec:	f000 fa4a 	bl	8014f84 <USBD_CtlError>
            err++;
 8014af0:	7afb      	ldrb	r3, [r7, #11]
 8014af2:	3301      	adds	r3, #1
 8014af4:	72fb      	strb	r3, [r7, #11]
          break;
 8014af6:	e021      	b.n	8014b3c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014afe:	699b      	ldr	r3, [r3, #24]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00b      	beq.n	8014b1c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b0a:	699b      	ldr	r3, [r3, #24]
 8014b0c:	687a      	ldr	r2, [r7, #4]
 8014b0e:	7c12      	ldrb	r2, [r2, #16]
 8014b10:	f107 0108 	add.w	r1, r7, #8
 8014b14:	4610      	mov	r0, r2
 8014b16:	4798      	blx	r3
 8014b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b1a:	e00f      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b1c:	6839      	ldr	r1, [r7, #0]
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f000 fa30 	bl	8014f84 <USBD_CtlError>
            err++;
 8014b24:	7afb      	ldrb	r3, [r7, #11]
 8014b26:	3301      	adds	r3, #1
 8014b28:	72fb      	strb	r3, [r7, #11]
          break;
 8014b2a:	e007      	b.n	8014b3c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014b2c:	6839      	ldr	r1, [r7, #0]
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f000 fa28 	bl	8014f84 <USBD_CtlError>
          err++;
 8014b34:	7afb      	ldrb	r3, [r7, #11]
 8014b36:	3301      	adds	r3, #1
 8014b38:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014b3a:	bf00      	nop
      }
      break;
 8014b3c:	e037      	b.n	8014bae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	7c1b      	ldrb	r3, [r3, #16]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d109      	bne.n	8014b5a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b4e:	f107 0208 	add.w	r2, r7, #8
 8014b52:	4610      	mov	r0, r2
 8014b54:	4798      	blx	r3
 8014b56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b58:	e029      	b.n	8014bae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014b5a:	6839      	ldr	r1, [r7, #0]
 8014b5c:	6878      	ldr	r0, [r7, #4]
 8014b5e:	f000 fa11 	bl	8014f84 <USBD_CtlError>
        err++;
 8014b62:	7afb      	ldrb	r3, [r7, #11]
 8014b64:	3301      	adds	r3, #1
 8014b66:	72fb      	strb	r3, [r7, #11]
      break;
 8014b68:	e021      	b.n	8014bae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	7c1b      	ldrb	r3, [r3, #16]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d10d      	bne.n	8014b8e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b7a:	f107 0208 	add.w	r2, r7, #8
 8014b7e:	4610      	mov	r0, r2
 8014b80:	4798      	blx	r3
 8014b82:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	3301      	adds	r3, #1
 8014b88:	2207      	movs	r2, #7
 8014b8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b8c:	e00f      	b.n	8014bae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014b8e:	6839      	ldr	r1, [r7, #0]
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f000 f9f7 	bl	8014f84 <USBD_CtlError>
        err++;
 8014b96:	7afb      	ldrb	r3, [r7, #11]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	72fb      	strb	r3, [r7, #11]
      break;
 8014b9c:	e007      	b.n	8014bae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014b9e:	6839      	ldr	r1, [r7, #0]
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f000 f9ef 	bl	8014f84 <USBD_CtlError>
      err++;
 8014ba6:	7afb      	ldrb	r3, [r7, #11]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	72fb      	strb	r3, [r7, #11]
      break;
 8014bac:	bf00      	nop
  }

  if (err != 0U)
 8014bae:	7afb      	ldrb	r3, [r7, #11]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d11e      	bne.n	8014bf2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014bb4:	683b      	ldr	r3, [r7, #0]
 8014bb6:	88db      	ldrh	r3, [r3, #6]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d016      	beq.n	8014bea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014bbc:	893b      	ldrh	r3, [r7, #8]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d00e      	beq.n	8014be0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	88da      	ldrh	r2, [r3, #6]
 8014bc6:	893b      	ldrh	r3, [r7, #8]
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	bf28      	it	cs
 8014bcc:	4613      	movcs	r3, r2
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014bd2:	893b      	ldrh	r3, [r7, #8]
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	68f9      	ldr	r1, [r7, #12]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fa44 	bl	8015066 <USBD_CtlSendData>
 8014bde:	e009      	b.n	8014bf4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014be0:	6839      	ldr	r1, [r7, #0]
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 f9ce 	bl	8014f84 <USBD_CtlError>
 8014be8:	e004      	b.n	8014bf4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f000 fa95 	bl	801511a <USBD_CtlSendStatus>
 8014bf0:	e000      	b.n	8014bf4 <USBD_GetDescriptor+0x320>
    return;
 8014bf2:	bf00      	nop
  }
}
 8014bf4:	3710      	adds	r7, #16
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop

08014bfc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014c06:	683b      	ldr	r3, [r7, #0]
 8014c08:	889b      	ldrh	r3, [r3, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d131      	bne.n	8014c72 <USBD_SetAddress+0x76>
 8014c0e:	683b      	ldr	r3, [r7, #0]
 8014c10:	88db      	ldrh	r3, [r3, #6]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d12d      	bne.n	8014c72 <USBD_SetAddress+0x76>
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	885b      	ldrh	r3, [r3, #2]
 8014c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8014c1c:	d829      	bhi.n	8014c72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	885b      	ldrh	r3, [r3, #2]
 8014c22:	b2db      	uxtb	r3, r3
 8014c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c30:	b2db      	uxtb	r3, r3
 8014c32:	2b03      	cmp	r3, #3
 8014c34:	d104      	bne.n	8014c40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014c36:	6839      	ldr	r1, [r7, #0]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f000 f9a3 	bl	8014f84 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c3e:	e01d      	b.n	8014c7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	7bfa      	ldrb	r2, [r7, #15]
 8014c44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c48:	7bfb      	ldrb	r3, [r7, #15]
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f002 ff96 	bl	8017b7e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f000 fa61 	bl	801511a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014c58:	7bfb      	ldrb	r3, [r7, #15]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d004      	beq.n	8014c68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2202      	movs	r2, #2
 8014c62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c66:	e009      	b.n	8014c7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c70:	e004      	b.n	8014c7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014c72:	6839      	ldr	r1, [r7, #0]
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 f985 	bl	8014f84 <USBD_CtlError>
  }
}
 8014c7a:	bf00      	nop
 8014c7c:	bf00      	nop
 8014c7e:	3710      	adds	r7, #16
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}

08014c84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c8e:	2300      	movs	r3, #0
 8014c90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	885b      	ldrh	r3, [r3, #2]
 8014c96:	b2da      	uxtb	r2, r3
 8014c98:	4b4c      	ldr	r3, [pc, #304]	; (8014dcc <USBD_SetConfig+0x148>)
 8014c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014c9c:	4b4b      	ldr	r3, [pc, #300]	; (8014dcc <USBD_SetConfig+0x148>)
 8014c9e:	781b      	ldrb	r3, [r3, #0]
 8014ca0:	2b01      	cmp	r3, #1
 8014ca2:	d905      	bls.n	8014cb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f000 f96c 	bl	8014f84 <USBD_CtlError>
    return USBD_FAIL;
 8014cac:	2303      	movs	r3, #3
 8014cae:	e088      	b.n	8014dc2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	2b02      	cmp	r3, #2
 8014cba:	d002      	beq.n	8014cc2 <USBD_SetConfig+0x3e>
 8014cbc:	2b03      	cmp	r3, #3
 8014cbe:	d025      	beq.n	8014d0c <USBD_SetConfig+0x88>
 8014cc0:	e071      	b.n	8014da6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014cc2:	4b42      	ldr	r3, [pc, #264]	; (8014dcc <USBD_SetConfig+0x148>)
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d01c      	beq.n	8014d04 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8014cca:	4b40      	ldr	r3, [pc, #256]	; (8014dcc <USBD_SetConfig+0x148>)
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	461a      	mov	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014cd4:	4b3d      	ldr	r3, [pc, #244]	; (8014dcc <USBD_SetConfig+0x148>)
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	4619      	mov	r1, r3
 8014cda:	6878      	ldr	r0, [r7, #4]
 8014cdc:	f7ff f992 	bl	8014004 <USBD_SetClassConfig>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014ce4:	7bfb      	ldrb	r3, [r7, #15]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d004      	beq.n	8014cf4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8014cea:	6839      	ldr	r1, [r7, #0]
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f000 f949 	bl	8014f84 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014cf2:	e065      	b.n	8014dc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	f000 fa10 	bl	801511a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	2203      	movs	r2, #3
 8014cfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014d02:	e05d      	b.n	8014dc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f000 fa08 	bl	801511a <USBD_CtlSendStatus>
      break;
 8014d0a:	e059      	b.n	8014dc0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014d0c:	4b2f      	ldr	r3, [pc, #188]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d112      	bne.n	8014d3a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2202      	movs	r2, #2
 8014d18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014d1c:	4b2b      	ldr	r3, [pc, #172]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	461a      	mov	r2, r3
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d26:	4b29      	ldr	r3, [pc, #164]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	4619      	mov	r1, r3
 8014d2c:	6878      	ldr	r0, [r7, #4]
 8014d2e:	f7ff f985 	bl	801403c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014d32:	6878      	ldr	r0, [r7, #4]
 8014d34:	f000 f9f1 	bl	801511a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d38:	e042      	b.n	8014dc0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8014d3a:	4b24      	ldr	r3, [pc, #144]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d3c:	781b      	ldrb	r3, [r3, #0]
 8014d3e:	461a      	mov	r2, r3
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	429a      	cmp	r2, r3
 8014d46:	d02a      	beq.n	8014d9e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	685b      	ldr	r3, [r3, #4]
 8014d4c:	b2db      	uxtb	r3, r3
 8014d4e:	4619      	mov	r1, r3
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f7ff f973 	bl	801403c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014d56:	4b1d      	ldr	r3, [pc, #116]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d58:	781b      	ldrb	r3, [r3, #0]
 8014d5a:	461a      	mov	r2, r3
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014d60:	4b1a      	ldr	r3, [pc, #104]	; (8014dcc <USBD_SetConfig+0x148>)
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	4619      	mov	r1, r3
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f7ff f94c 	bl	8014004 <USBD_SetClassConfig>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014d70:	7bfb      	ldrb	r3, [r7, #15]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d00f      	beq.n	8014d96 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8014d76:	6839      	ldr	r1, [r7, #0]
 8014d78:	6878      	ldr	r0, [r7, #4]
 8014d7a:	f000 f903 	bl	8014f84 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	685b      	ldr	r3, [r3, #4]
 8014d82:	b2db      	uxtb	r3, r3
 8014d84:	4619      	mov	r1, r3
 8014d86:	6878      	ldr	r0, [r7, #4]
 8014d88:	f7ff f958 	bl	801403c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2202      	movs	r2, #2
 8014d90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014d94:	e014      	b.n	8014dc0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f000 f9bf 	bl	801511a <USBD_CtlSendStatus>
      break;
 8014d9c:	e010      	b.n	8014dc0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f000 f9bb 	bl	801511a <USBD_CtlSendStatus>
      break;
 8014da4:	e00c      	b.n	8014dc0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8014da6:	6839      	ldr	r1, [r7, #0]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f000 f8eb 	bl	8014f84 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014dae:	4b07      	ldr	r3, [pc, #28]	; (8014dcc <USBD_SetConfig+0x148>)
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	4619      	mov	r1, r3
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f7ff f941 	bl	801403c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014dba:	2303      	movs	r3, #3
 8014dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8014dbe:	bf00      	nop
  }

  return ret;
 8014dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3710      	adds	r7, #16
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	20000b98 	.word	0x20000b98

08014dd0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	88db      	ldrh	r3, [r3, #6]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d004      	beq.n	8014dec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014de2:	6839      	ldr	r1, [r7, #0]
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f000 f8cd 	bl	8014f84 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014dea:	e023      	b.n	8014e34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	dc02      	bgt.n	8014dfe <USBD_GetConfig+0x2e>
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	dc03      	bgt.n	8014e04 <USBD_GetConfig+0x34>
 8014dfc:	e015      	b.n	8014e2a <USBD_GetConfig+0x5a>
 8014dfe:	2b03      	cmp	r3, #3
 8014e00:	d00b      	beq.n	8014e1a <USBD_GetConfig+0x4a>
 8014e02:	e012      	b.n	8014e2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2200      	movs	r2, #0
 8014e08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	3308      	adds	r3, #8
 8014e0e:	2201      	movs	r2, #1
 8014e10:	4619      	mov	r1, r3
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f000 f927 	bl	8015066 <USBD_CtlSendData>
        break;
 8014e18:	e00c      	b.n	8014e34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	3304      	adds	r3, #4
 8014e1e:	2201      	movs	r2, #1
 8014e20:	4619      	mov	r1, r3
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f000 f91f 	bl	8015066 <USBD_CtlSendData>
        break;
 8014e28:	e004      	b.n	8014e34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014e2a:	6839      	ldr	r1, [r7, #0]
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f000 f8a9 	bl	8014f84 <USBD_CtlError>
        break;
 8014e32:	bf00      	nop
}
 8014e34:	bf00      	nop
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}

08014e3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
 8014e44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	2b02      	cmp	r3, #2
 8014e52:	d81e      	bhi.n	8014e92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014e54:	683b      	ldr	r3, [r7, #0]
 8014e56:	88db      	ldrh	r3, [r3, #6]
 8014e58:	2b02      	cmp	r3, #2
 8014e5a:	d004      	beq.n	8014e66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014e5c:	6839      	ldr	r1, [r7, #0]
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f000 f890 	bl	8014f84 <USBD_CtlError>
        break;
 8014e64:	e01a      	b.n	8014e9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2201      	movs	r2, #1
 8014e6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d005      	beq.n	8014e82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	68db      	ldr	r3, [r3, #12]
 8014e7a:	f043 0202 	orr.w	r2, r3, #2
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	330c      	adds	r3, #12
 8014e86:	2202      	movs	r2, #2
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 f8eb 	bl	8015066 <USBD_CtlSendData>
      break;
 8014e90:	e004      	b.n	8014e9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 f875 	bl	8014f84 <USBD_CtlError>
      break;
 8014e9a:	bf00      	nop
  }
}
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014eae:	683b      	ldr	r3, [r7, #0]
 8014eb0:	885b      	ldrh	r3, [r3, #2]
 8014eb2:	2b01      	cmp	r3, #1
 8014eb4:	d106      	bne.n	8014ec4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f000 f92b 	bl	801511a <USBD_CtlSendStatus>
  }
}
 8014ec4:	bf00      	nop
 8014ec6:	3708      	adds	r7, #8
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}

08014ecc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	3b01      	subs	r3, #1
 8014ee0:	2b02      	cmp	r3, #2
 8014ee2:	d80b      	bhi.n	8014efc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	885b      	ldrh	r3, [r3, #2]
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d10c      	bne.n	8014f06 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2200      	movs	r2, #0
 8014ef0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014ef4:	6878      	ldr	r0, [r7, #4]
 8014ef6:	f000 f910 	bl	801511a <USBD_CtlSendStatus>
      }
      break;
 8014efa:	e004      	b.n	8014f06 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 f840 	bl	8014f84 <USBD_CtlError>
      break;
 8014f04:	e000      	b.n	8014f08 <USBD_ClrFeature+0x3c>
      break;
 8014f06:	bf00      	nop
  }
}
 8014f08:	bf00      	nop
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	781a      	ldrb	r2, [r3, #0]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	781a      	ldrb	r2, [r3, #0]
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	3301      	adds	r3, #1
 8014f38:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f7ff fa92 	bl	8014464 <SWAPBYTE>
 8014f40:	4603      	mov	r3, r0
 8014f42:	461a      	mov	r2, r3
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	3301      	adds	r3, #1
 8014f4c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3301      	adds	r3, #1
 8014f52:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014f54:	68f8      	ldr	r0, [r7, #12]
 8014f56:	f7ff fa85 	bl	8014464 <SWAPBYTE>
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	461a      	mov	r2, r3
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	3301      	adds	r3, #1
 8014f66:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	3301      	adds	r3, #1
 8014f6c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014f6e:	68f8      	ldr	r0, [r7, #12]
 8014f70:	f7ff fa78 	bl	8014464 <SWAPBYTE>
 8014f74:	4603      	mov	r3, r0
 8014f76:	461a      	mov	r2, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	80da      	strh	r2, [r3, #6]
}
 8014f7c:	bf00      	nop
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}

08014f84 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b082      	sub	sp, #8
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f8e:	2180      	movs	r1, #128	; 0x80
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f002 fd89 	bl	8017aa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f96:	2100      	movs	r1, #0
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f002 fd85 	bl	8017aa8 <USBD_LL_StallEP>
}
 8014f9e:	bf00      	nop
 8014fa0:	3708      	adds	r7, #8
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	b086      	sub	sp, #24
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	60f8      	str	r0, [r7, #12]
 8014fae:	60b9      	str	r1, [r7, #8]
 8014fb0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d036      	beq.n	801502a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014fc0:	6938      	ldr	r0, [r7, #16]
 8014fc2:	f000 f836 	bl	8015032 <USBD_GetLen>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	3301      	adds	r3, #1
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	b29a      	uxth	r2, r3
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014fd4:	7dfb      	ldrb	r3, [r7, #23]
 8014fd6:	68ba      	ldr	r2, [r7, #8]
 8014fd8:	4413      	add	r3, r2
 8014fda:	687a      	ldr	r2, [r7, #4]
 8014fdc:	7812      	ldrb	r2, [r2, #0]
 8014fde:	701a      	strb	r2, [r3, #0]
  idx++;
 8014fe0:	7dfb      	ldrb	r3, [r7, #23]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014fe6:	7dfb      	ldrb	r3, [r7, #23]
 8014fe8:	68ba      	ldr	r2, [r7, #8]
 8014fea:	4413      	add	r3, r2
 8014fec:	2203      	movs	r2, #3
 8014fee:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ff0:	7dfb      	ldrb	r3, [r7, #23]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014ff6:	e013      	b.n	8015020 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014ff8:	7dfb      	ldrb	r3, [r7, #23]
 8014ffa:	68ba      	ldr	r2, [r7, #8]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	693a      	ldr	r2, [r7, #16]
 8015000:	7812      	ldrb	r2, [r2, #0]
 8015002:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015004:	693b      	ldr	r3, [r7, #16]
 8015006:	3301      	adds	r3, #1
 8015008:	613b      	str	r3, [r7, #16]
    idx++;
 801500a:	7dfb      	ldrb	r3, [r7, #23]
 801500c:	3301      	adds	r3, #1
 801500e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015010:	7dfb      	ldrb	r3, [r7, #23]
 8015012:	68ba      	ldr	r2, [r7, #8]
 8015014:	4413      	add	r3, r2
 8015016:	2200      	movs	r2, #0
 8015018:	701a      	strb	r2, [r3, #0]
    idx++;
 801501a:	7dfb      	ldrb	r3, [r7, #23]
 801501c:	3301      	adds	r3, #1
 801501e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	d1e7      	bne.n	8014ff8 <USBD_GetString+0x52>
 8015028:	e000      	b.n	801502c <USBD_GetString+0x86>
    return;
 801502a:	bf00      	nop
  }
}
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015032:	b480      	push	{r7}
 8015034:	b085      	sub	sp, #20
 8015036:	af00      	add	r7, sp, #0
 8015038:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801503a:	2300      	movs	r3, #0
 801503c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015042:	e005      	b.n	8015050 <USBD_GetLen+0x1e>
  {
    len++;
 8015044:	7bfb      	ldrb	r3, [r7, #15]
 8015046:	3301      	adds	r3, #1
 8015048:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	3301      	adds	r3, #1
 801504e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015050:	68bb      	ldr	r3, [r7, #8]
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d1f5      	bne.n	8015044 <USBD_GetLen+0x12>
  }

  return len;
 8015058:	7bfb      	ldrb	r3, [r7, #15]
}
 801505a:	4618      	mov	r0, r3
 801505c:	3714      	adds	r7, #20
 801505e:	46bd      	mov	sp, r7
 8015060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015064:	4770      	bx	lr

08015066 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015066:	b580      	push	{r7, lr}
 8015068:	b084      	sub	sp, #16
 801506a:	af00      	add	r7, sp, #0
 801506c:	60f8      	str	r0, [r7, #12]
 801506e:	60b9      	str	r1, [r7, #8]
 8015070:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2202      	movs	r2, #2
 8015076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	687a      	ldr	r2, [r7, #4]
 801507e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	687a      	ldr	r2, [r7, #4]
 8015084:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	68ba      	ldr	r2, [r7, #8]
 801508a:	2100      	movs	r1, #0
 801508c:	68f8      	ldr	r0, [r7, #12]
 801508e:	f002 fd95 	bl	8017bbc <USBD_LL_Transmit>

  return USBD_OK;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3710      	adds	r7, #16
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	68ba      	ldr	r2, [r7, #8]
 80150ac:	2100      	movs	r1, #0
 80150ae:	68f8      	ldr	r0, [r7, #12]
 80150b0:	f002 fd84 	bl	8017bbc <USBD_LL_Transmit>

  return USBD_OK;
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80150be:	b580      	push	{r7, lr}
 80150c0:	b084      	sub	sp, #16
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	60f8      	str	r0, [r7, #12]
 80150c6:	60b9      	str	r1, [r7, #8]
 80150c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	2203      	movs	r2, #3
 80150ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	687a      	ldr	r2, [r7, #4]
 80150d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	2100      	movs	r1, #0
 80150e8:	68f8      	ldr	r0, [r7, #12]
 80150ea:	f002 fd88 	bl	8017bfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 80150ee:	2300      	movs	r3, #0
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3710      	adds	r7, #16
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}

080150f8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b084      	sub	sp, #16
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	2100      	movs	r1, #0
 801510a:	68f8      	ldr	r0, [r7, #12]
 801510c:	f002 fd77 	bl	8017bfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015110:	2300      	movs	r3, #0
}
 8015112:	4618      	mov	r0, r3
 8015114:	3710      	adds	r7, #16
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b082      	sub	sp, #8
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	2204      	movs	r2, #4
 8015126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801512a:	2300      	movs	r3, #0
 801512c:	2200      	movs	r2, #0
 801512e:	2100      	movs	r1, #0
 8015130:	6878      	ldr	r0, [r7, #4]
 8015132:	f002 fd43 	bl	8017bbc <USBD_LL_Transmit>

  return USBD_OK;
 8015136:	2300      	movs	r3, #0
}
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}

08015140 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b082      	sub	sp, #8
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	2205      	movs	r2, #5
 801514c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015150:	2300      	movs	r3, #0
 8015152:	2200      	movs	r2, #0
 8015154:	2100      	movs	r1, #0
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f002 fd51 	bl	8017bfe <USBD_LL_PrepareReceive>

  return USBD_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8015166:	b480      	push	{r7}
 8015168:	b085      	sub	sp, #20
 801516a:	af00      	add	r7, sp, #0
 801516c:	4603      	mov	r3, r0
 801516e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8015170:	2300      	movs	r3, #0
 8015172:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8015174:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015178:	2b84      	cmp	r3, #132	; 0x84
 801517a:	d005      	beq.n	8015188 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801517c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	4413      	add	r3, r2
 8015184:	3303      	adds	r3, #3
 8015186:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8015188:	68fb      	ldr	r3, [r7, #12]
}
 801518a:	4618      	mov	r0, r3
 801518c:	3714      	adds	r7, #20
 801518e:	46bd      	mov	sp, r7
 8015190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015194:	4770      	bx	lr

08015196 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801519a:	f000 fee9 	bl	8015f70 <vTaskStartScheduler>
  
  return osOK;
 801519e:	2300      	movs	r3, #0
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80151a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a6:	b087      	sub	sp, #28
 80151a8:	af02      	add	r7, sp, #8
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	685c      	ldr	r4, [r3, #4]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80151ba:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7ff ffcf 	bl	8015166 <makeFreeRtosPriority>
 80151c8:	4602      	mov	r2, r0
 80151ca:	f107 030c 	add.w	r3, r7, #12
 80151ce:	9301      	str	r3, [sp, #4]
 80151d0:	9200      	str	r2, [sp, #0]
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	4632      	mov	r2, r6
 80151d6:	4629      	mov	r1, r5
 80151d8:	4620      	mov	r0, r4
 80151da:	f000 fd55 	bl	8015c88 <xTaskCreate>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d001      	beq.n	80151e8 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80151e4:	2300      	movs	r3, #0
 80151e6:	e000      	b.n	80151ea <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80151e8:	68fb      	ldr	r3, [r7, #12]
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3714      	adds	r7, #20
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080151f2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b084      	sub	sp, #16
 80151f6:	af00      	add	r7, sp, #0
 80151f8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d001      	beq.n	8015208 <osDelay+0x16>
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	e000      	b.n	801520a <osDelay+0x18>
 8015208:	2301      	movs	r3, #1
 801520a:	4618      	mov	r0, r3
 801520c:	f000 fe7c 	bl	8015f08 <vTaskDelay>
  
  return osOK;
 8015210:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015212:	4618      	mov	r0, r3
 8015214:	3710      	adds	r7, #16
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}

0801521a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801521a:	b580      	push	{r7, lr}
 801521c:	b082      	sub	sp, #8
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8015222:	2001      	movs	r0, #1
 8015224:	f000 f9a1 	bl	801556a <xQueueCreateMutex>
 8015228:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 801522a:	4618      	mov	r0, r3
 801522c:	3708      	adds	r7, #8
 801522e:	46bd      	mov	sp, r7
 8015230:	bd80      	pop	{r7, pc}

08015232 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8015232:	b580      	push	{r7, lr}
 8015234:	b084      	sub	sp, #16
 8015236:	af00      	add	r7, sp, #0
 8015238:	6078      	str	r0, [r7, #4]
 801523a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	2b01      	cmp	r3, #1
 8015240:	d110      	bne.n	8015264 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8015242:	2203      	movs	r2, #3
 8015244:	2100      	movs	r1, #0
 8015246:	2001      	movs	r0, #1
 8015248:	f000 f920 	bl	801548c <xQueueGenericCreate>
 801524c:	60f8      	str	r0, [r7, #12]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d005      	beq.n	8015260 <osSemaphoreCreate+0x2e>
 8015254:	2300      	movs	r3, #0
 8015256:	2200      	movs	r2, #0
 8015258:	2100      	movs	r1, #0
 801525a:	68f8      	ldr	r0, [r7, #12]
 801525c:	f000 f99e 	bl	801559c <xQueueGenericSend>
    return sema;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	e000      	b.n	8015266 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 8015264:	2300      	movs	r3, #0
#endif
  }
#endif
}
 8015266:	4618      	mov	r0, r3
 8015268:	3710      	adds	r7, #16
 801526a:	46bd      	mov	sp, r7
 801526c:	bd80      	pop	{r7, pc}

0801526e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801526e:	b480      	push	{r7}
 8015270:	b083      	sub	sp, #12
 8015272:	af00      	add	r7, sp, #0
 8015274:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f103 0208 	add.w	r2, r3, #8
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f04f 32ff 	mov.w	r2, #4294967295
 8015286:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	f103 0208 	add.w	r2, r3, #8
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f103 0208 	add.w	r2, r3, #8
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2200      	movs	r2, #0
 80152a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80152a2:	bf00      	nop
 80152a4:	370c      	adds	r7, #12
 80152a6:	46bd      	mov	sp, r7
 80152a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ac:	4770      	bx	lr

080152ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80152ae:	b480      	push	{r7}
 80152b0:	b083      	sub	sp, #12
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	2200      	movs	r2, #0
 80152ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80152bc:	bf00      	nop
 80152be:	370c      	adds	r7, #12
 80152c0:	46bd      	mov	sp, r7
 80152c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c6:	4770      	bx	lr

080152c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80152c8:	b480      	push	{r7}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
 80152d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80152d8:	683b      	ldr	r3, [r7, #0]
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	689a      	ldr	r2, [r3, #8]
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	689b      	ldr	r3, [r3, #8]
 80152ea:	683a      	ldr	r2, [r7, #0]
 80152ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	683a      	ldr	r2, [r7, #0]
 80152f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	1c5a      	adds	r2, r3, #1
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	601a      	str	r2, [r3, #0]
}
 8015304:	bf00      	nop
 8015306:	3714      	adds	r7, #20
 8015308:	46bd      	mov	sp, r7
 801530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801530e:	4770      	bx	lr

08015310 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015310:	b480      	push	{r7}
 8015312:	b085      	sub	sp, #20
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015320:	68bb      	ldr	r3, [r7, #8]
 8015322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015326:	d103      	bne.n	8015330 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	691b      	ldr	r3, [r3, #16]
 801532c:	60fb      	str	r3, [r7, #12]
 801532e:	e00c      	b.n	801534a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	3308      	adds	r3, #8
 8015334:	60fb      	str	r3, [r7, #12]
 8015336:	e002      	b.n	801533e <vListInsert+0x2e>
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	60fb      	str	r3, [r7, #12]
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	685b      	ldr	r3, [r3, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	68ba      	ldr	r2, [r7, #8]
 8015346:	429a      	cmp	r2, r3
 8015348:	d2f6      	bcs.n	8015338 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	685a      	ldr	r2, [r3, #4]
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015352:	683b      	ldr	r3, [r7, #0]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	683a      	ldr	r2, [r7, #0]
 8015358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801535a:	683b      	ldr	r3, [r7, #0]
 801535c:	68fa      	ldr	r2, [r7, #12]
 801535e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	683a      	ldr	r2, [r7, #0]
 8015364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	1c5a      	adds	r2, r3, #1
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	601a      	str	r2, [r3, #0]
}
 8015376:	bf00      	nop
 8015378:	3714      	adds	r7, #20
 801537a:	46bd      	mov	sp, r7
 801537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015380:	4770      	bx	lr

08015382 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015382:	b480      	push	{r7}
 8015384:	b085      	sub	sp, #20
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	691b      	ldr	r3, [r3, #16]
 801538e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	685b      	ldr	r3, [r3, #4]
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	6892      	ldr	r2, [r2, #8]
 8015398:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	689b      	ldr	r3, [r3, #8]
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	6852      	ldr	r2, [r2, #4]
 80153a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	685b      	ldr	r3, [r3, #4]
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d103      	bne.n	80153b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	689a      	ldr	r2, [r3, #8]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2200      	movs	r2, #0
 80153ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	1e5a      	subs	r2, r3, #1
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	3714      	adds	r7, #20
 80153ce:	46bd      	mov	sp, r7
 80153d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d4:	4770      	bx	lr

080153d6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b084      	sub	sp, #16
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
 80153de:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d10a      	bne.n	8015400 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80153ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80153fc:	bf00      	nop
 80153fe:	e7fe      	b.n	80153fe <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015400:	f001 fcc0 	bl	8016d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681a      	ldr	r2, [r3, #0]
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801540c:	68f9      	ldr	r1, [r7, #12]
 801540e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015410:	fb01 f303 	mul.w	r3, r1, r3
 8015414:	441a      	add	r2, r3
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	2200      	movs	r2, #0
 801541e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015430:	3b01      	subs	r3, #1
 8015432:	68f9      	ldr	r1, [r7, #12]
 8015434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015436:	fb01 f303 	mul.w	r3, r1, r3
 801543a:	441a      	add	r2, r3
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	22ff      	movs	r2, #255	; 0xff
 8015444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	22ff      	movs	r2, #255	; 0xff
 801544c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d109      	bne.n	801546a <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	691b      	ldr	r3, [r3, #16]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d00f      	beq.n	801547e <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	3310      	adds	r3, #16
 8015462:	4618      	mov	r0, r3
 8015464:	f000 ff8c 	bl	8016380 <xTaskRemoveFromEventList>
 8015468:	e009      	b.n	801547e <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	3310      	adds	r3, #16
 801546e:	4618      	mov	r0, r3
 8015470:	f7ff fefd 	bl	801526e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	3324      	adds	r3, #36	; 0x24
 8015478:	4618      	mov	r0, r3
 801547a:	f7ff fef8 	bl	801526e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801547e:	f001 fcb1 	bl	8016de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015482:	2301      	movs	r3, #1
}
 8015484:	4618      	mov	r0, r3
 8015486:	3710      	adds	r7, #16
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}

0801548c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801548c:	b580      	push	{r7, lr}
 801548e:	b08a      	sub	sp, #40	; 0x28
 8015490:	af02      	add	r7, sp, #8
 8015492:	60f8      	str	r0, [r7, #12]
 8015494:	60b9      	str	r1, [r7, #8]
 8015496:	4613      	mov	r3, r2
 8015498:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d10a      	bne.n	80154b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80154a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a4:	f383 8811 	msr	BASEPRI, r3
 80154a8:	f3bf 8f6f 	isb	sy
 80154ac:	f3bf 8f4f 	dsb	sy
 80154b0:	613b      	str	r3, [r7, #16]
}
 80154b2:	bf00      	nop
 80154b4:	e7fe      	b.n	80154b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	68ba      	ldr	r2, [r7, #8]
 80154ba:	fb02 f303 	mul.w	r3, r2, r3
 80154be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	3348      	adds	r3, #72	; 0x48
 80154c4:	4618      	mov	r0, r3
 80154c6:	f001 fd7f 	bl	8016fc8 <pvPortMalloc>
 80154ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d00d      	beq.n	80154ee <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	3348      	adds	r3, #72	; 0x48
 80154da:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80154dc:	79fa      	ldrb	r2, [r7, #7]
 80154de:	69bb      	ldr	r3, [r7, #24]
 80154e0:	9300      	str	r3, [sp, #0]
 80154e2:	4613      	mov	r3, r2
 80154e4:	697a      	ldr	r2, [r7, #20]
 80154e6:	68b9      	ldr	r1, [r7, #8]
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f000 f805 	bl	80154f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80154ee:	69bb      	ldr	r3, [r7, #24]
	}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3720      	adds	r7, #32
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}

080154f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b084      	sub	sp, #16
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	60f8      	str	r0, [r7, #12]
 8015500:	60b9      	str	r1, [r7, #8]
 8015502:	607a      	str	r2, [r7, #4]
 8015504:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d103      	bne.n	8015514 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801550c:	69bb      	ldr	r3, [r7, #24]
 801550e:	69ba      	ldr	r2, [r7, #24]
 8015510:	601a      	str	r2, [r3, #0]
 8015512:	e002      	b.n	801551a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015514:	69bb      	ldr	r3, [r7, #24]
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801551a:	69bb      	ldr	r3, [r7, #24]
 801551c:	68fa      	ldr	r2, [r7, #12]
 801551e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015520:	69bb      	ldr	r3, [r7, #24]
 8015522:	68ba      	ldr	r2, [r7, #8]
 8015524:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015526:	2101      	movs	r1, #1
 8015528:	69b8      	ldr	r0, [r7, #24]
 801552a:	f7ff ff54 	bl	80153d6 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801552e:	bf00      	nop
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}

08015536 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015536:	b580      	push	{r7, lr}
 8015538:	b082      	sub	sp, #8
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d00e      	beq.n	8015562 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2200      	movs	r2, #0
 8015548:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2200      	movs	r2, #0
 801554e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2200      	movs	r2, #0
 8015554:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015556:	2300      	movs	r3, #0
 8015558:	2200      	movs	r2, #0
 801555a:	2100      	movs	r1, #0
 801555c:	6878      	ldr	r0, [r7, #4]
 801555e:	f000 f81d 	bl	801559c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015562:	bf00      	nop
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bd80      	pop	{r7, pc}

0801556a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801556a:	b580      	push	{r7, lr}
 801556c:	b086      	sub	sp, #24
 801556e:	af00      	add	r7, sp, #0
 8015570:	4603      	mov	r3, r0
 8015572:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015574:	2301      	movs	r3, #1
 8015576:	617b      	str	r3, [r7, #20]
 8015578:	2300      	movs	r3, #0
 801557a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801557c:	79fb      	ldrb	r3, [r7, #7]
 801557e:	461a      	mov	r2, r3
 8015580:	6939      	ldr	r1, [r7, #16]
 8015582:	6978      	ldr	r0, [r7, #20]
 8015584:	f7ff ff82 	bl	801548c <xQueueGenericCreate>
 8015588:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f7ff ffd3 	bl	8015536 <prvInitialiseMutex>

		return xNewQueue;
 8015590:	68fb      	ldr	r3, [r7, #12]
	}
 8015592:	4618      	mov	r0, r3
 8015594:	3718      	adds	r7, #24
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
	...

0801559c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b08e      	sub	sp, #56	; 0x38
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	60f8      	str	r0, [r7, #12]
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80155aa:	2300      	movs	r3, #0
 80155ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80155b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d10a      	bne.n	80155ce <xQueueGenericSend+0x32>
	__asm volatile
 80155b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155bc:	f383 8811 	msr	BASEPRI, r3
 80155c0:	f3bf 8f6f 	isb	sy
 80155c4:	f3bf 8f4f 	dsb	sy
 80155c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80155ca:	bf00      	nop
 80155cc:	e7fe      	b.n	80155cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d103      	bne.n	80155dc <xQueueGenericSend+0x40>
 80155d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d101      	bne.n	80155e0 <xQueueGenericSend+0x44>
 80155dc:	2301      	movs	r3, #1
 80155de:	e000      	b.n	80155e2 <xQueueGenericSend+0x46>
 80155e0:	2300      	movs	r3, #0
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d10a      	bne.n	80155fc <xQueueGenericSend+0x60>
	__asm volatile
 80155e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ea:	f383 8811 	msr	BASEPRI, r3
 80155ee:	f3bf 8f6f 	isb	sy
 80155f2:	f3bf 8f4f 	dsb	sy
 80155f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80155f8:	bf00      	nop
 80155fa:	e7fe      	b.n	80155fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	2b02      	cmp	r3, #2
 8015600:	d103      	bne.n	801560a <xQueueGenericSend+0x6e>
 8015602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015606:	2b01      	cmp	r3, #1
 8015608:	d101      	bne.n	801560e <xQueueGenericSend+0x72>
 801560a:	2301      	movs	r3, #1
 801560c:	e000      	b.n	8015610 <xQueueGenericSend+0x74>
 801560e:	2300      	movs	r3, #0
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10a      	bne.n	801562a <xQueueGenericSend+0x8e>
	__asm volatile
 8015614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015618:	f383 8811 	msr	BASEPRI, r3
 801561c:	f3bf 8f6f 	isb	sy
 8015620:	f3bf 8f4f 	dsb	sy
 8015624:	623b      	str	r3, [r7, #32]
}
 8015626:	bf00      	nop
 8015628:	e7fe      	b.n	8015628 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801562a:	f001 f855 	bl	80166d8 <xTaskGetSchedulerState>
 801562e:	4603      	mov	r3, r0
 8015630:	2b00      	cmp	r3, #0
 8015632:	d102      	bne.n	801563a <xQueueGenericSend+0x9e>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d101      	bne.n	801563e <xQueueGenericSend+0xa2>
 801563a:	2301      	movs	r3, #1
 801563c:	e000      	b.n	8015640 <xQueueGenericSend+0xa4>
 801563e:	2300      	movs	r3, #0
 8015640:	2b00      	cmp	r3, #0
 8015642:	d10a      	bne.n	801565a <xQueueGenericSend+0xbe>
	__asm volatile
 8015644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015648:	f383 8811 	msr	BASEPRI, r3
 801564c:	f3bf 8f6f 	isb	sy
 8015650:	f3bf 8f4f 	dsb	sy
 8015654:	61fb      	str	r3, [r7, #28]
}
 8015656:	bf00      	nop
 8015658:	e7fe      	b.n	8015658 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801565a:	f001 fb93 	bl	8016d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015666:	429a      	cmp	r2, r3
 8015668:	d302      	bcc.n	8015670 <xQueueGenericSend+0xd4>
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	2b02      	cmp	r3, #2
 801566e:	d112      	bne.n	8015696 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015670:	683a      	ldr	r2, [r7, #0]
 8015672:	68b9      	ldr	r1, [r7, #8]
 8015674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015676:	f000 fa1d 	bl	8015ab4 <prvCopyDataToQueue>
 801567a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015680:	2b00      	cmp	r3, #0
 8015682:	d004      	beq.n	801568e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015686:	3324      	adds	r3, #36	; 0x24
 8015688:	4618      	mov	r0, r3
 801568a:	f000 fe79 	bl	8016380 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801568e:	f001 fba9 	bl	8016de4 <vPortExitCritical>
				return pdPASS;
 8015692:	2301      	movs	r3, #1
 8015694:	e062      	b.n	801575c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d103      	bne.n	80156a4 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801569c:	f001 fba2 	bl	8016de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80156a0:	2300      	movs	r3, #0
 80156a2:	e05b      	b.n	801575c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80156a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d106      	bne.n	80156b8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80156aa:	f107 0314 	add.w	r3, r7, #20
 80156ae:	4618      	mov	r0, r3
 80156b0:	f000 fec8 	bl	8016444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80156b4:	2301      	movs	r3, #1
 80156b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80156b8:	f001 fb94 	bl	8016de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80156bc:	f000 fca8 	bl	8016010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80156c0:	f001 fb60 	bl	8016d84 <vPortEnterCritical>
 80156c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80156ca:	b25b      	sxtb	r3, r3
 80156cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156d0:	d103      	bne.n	80156da <xQueueGenericSend+0x13e>
 80156d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156d4:	2200      	movs	r2, #0
 80156d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80156da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80156e0:	b25b      	sxtb	r3, r3
 80156e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156e6:	d103      	bne.n	80156f0 <xQueueGenericSend+0x154>
 80156e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156ea:	2200      	movs	r2, #0
 80156ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80156f0:	f001 fb78 	bl	8016de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80156f4:	1d3a      	adds	r2, r7, #4
 80156f6:	f107 0314 	add.w	r3, r7, #20
 80156fa:	4611      	mov	r1, r2
 80156fc:	4618      	mov	r0, r3
 80156fe:	f000 feb7 	bl	8016470 <xTaskCheckForTimeOut>
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d123      	bne.n	8015750 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801570a:	f000 faa5 	bl	8015c58 <prvIsQueueFull>
 801570e:	4603      	mov	r3, r0
 8015710:	2b00      	cmp	r3, #0
 8015712:	d017      	beq.n	8015744 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015716:	3310      	adds	r3, #16
 8015718:	687a      	ldr	r2, [r7, #4]
 801571a:	4611      	mov	r1, r2
 801571c:	4618      	mov	r0, r3
 801571e:	f000 fe0b 	bl	8016338 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015722:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015724:	f000 fa30 	bl	8015b88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015728:	f000 fc80 	bl	801602c <xTaskResumeAll>
 801572c:	4603      	mov	r3, r0
 801572e:	2b00      	cmp	r3, #0
 8015730:	d193      	bne.n	801565a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015732:	4b0c      	ldr	r3, [pc, #48]	; (8015764 <xQueueGenericSend+0x1c8>)
 8015734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015738:	601a      	str	r2, [r3, #0]
 801573a:	f3bf 8f4f 	dsb	sy
 801573e:	f3bf 8f6f 	isb	sy
 8015742:	e78a      	b.n	801565a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015746:	f000 fa1f 	bl	8015b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801574a:	f000 fc6f 	bl	801602c <xTaskResumeAll>
 801574e:	e784      	b.n	801565a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015752:	f000 fa19 	bl	8015b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015756:	f000 fc69 	bl	801602c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801575a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801575c:	4618      	mov	r0, r3
 801575e:	3738      	adds	r7, #56	; 0x38
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}
 8015764:	e000ed04 	.word	0xe000ed04

08015768 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b08e      	sub	sp, #56	; 0x38
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8015776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015778:	2b00      	cmp	r3, #0
 801577a:	d10a      	bne.n	8015792 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801577c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015780:	f383 8811 	msr	BASEPRI, r3
 8015784:	f3bf 8f6f 	isb	sy
 8015788:	f3bf 8f4f 	dsb	sy
 801578c:	623b      	str	r3, [r7, #32]
}
 801578e:	bf00      	nop
 8015790:	e7fe      	b.n	8015790 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015796:	2b00      	cmp	r3, #0
 8015798:	d00a      	beq.n	80157b0 <xQueueGiveFromISR+0x48>
	__asm volatile
 801579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801579e:	f383 8811 	msr	BASEPRI, r3
 80157a2:	f3bf 8f6f 	isb	sy
 80157a6:	f3bf 8f4f 	dsb	sy
 80157aa:	61fb      	str	r3, [r7, #28]
}
 80157ac:	bf00      	nop
 80157ae:	e7fe      	b.n	80157ae <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80157b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d103      	bne.n	80157c0 <xQueueGiveFromISR+0x58>
 80157b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157ba:	689b      	ldr	r3, [r3, #8]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d101      	bne.n	80157c4 <xQueueGiveFromISR+0x5c>
 80157c0:	2301      	movs	r3, #1
 80157c2:	e000      	b.n	80157c6 <xQueueGiveFromISR+0x5e>
 80157c4:	2300      	movs	r3, #0
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d10a      	bne.n	80157e0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80157ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ce:	f383 8811 	msr	BASEPRI, r3
 80157d2:	f3bf 8f6f 	isb	sy
 80157d6:	f3bf 8f4f 	dsb	sy
 80157da:	61bb      	str	r3, [r7, #24]
}
 80157dc:	bf00      	nop
 80157de:	e7fe      	b.n	80157de <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157e0:	f001 fbb2 	bl	8016f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80157e4:	f3ef 8211 	mrs	r2, BASEPRI
 80157e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157ec:	f383 8811 	msr	BASEPRI, r3
 80157f0:	f3bf 8f6f 	isb	sy
 80157f4:	f3bf 8f4f 	dsb	sy
 80157f8:	617a      	str	r2, [r7, #20]
 80157fa:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80157fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80157fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015804:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801580a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801580c:	429a      	cmp	r2, r3
 801580e:	d22b      	bcs.n	8015868 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581c:	1c5a      	adds	r2, r3, #1
 801581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015820:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015822:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801582a:	d112      	bne.n	8015852 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015830:	2b00      	cmp	r3, #0
 8015832:	d016      	beq.n	8015862 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015836:	3324      	adds	r3, #36	; 0x24
 8015838:	4618      	mov	r0, r3
 801583a:	f000 fda1 	bl	8016380 <xTaskRemoveFromEventList>
 801583e:	4603      	mov	r3, r0
 8015840:	2b00      	cmp	r3, #0
 8015842:	d00e      	beq.n	8015862 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00b      	beq.n	8015862 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	2201      	movs	r2, #1
 801584e:	601a      	str	r2, [r3, #0]
 8015850:	e007      	b.n	8015862 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015856:	3301      	adds	r3, #1
 8015858:	b2db      	uxtb	r3, r3
 801585a:	b25a      	sxtb	r2, r3
 801585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801585e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015862:	2301      	movs	r3, #1
 8015864:	637b      	str	r3, [r7, #52]	; 0x34
 8015866:	e001      	b.n	801586c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8015868:	2300      	movs	r3, #0
 801586a:	637b      	str	r3, [r7, #52]	; 0x34
 801586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801586e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8015876:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801587a:	4618      	mov	r0, r3
 801587c:	3738      	adds	r7, #56	; 0x38
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}
	...

08015884 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b08e      	sub	sp, #56	; 0x38
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
 801588c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801588e:	2300      	movs	r3, #0
 8015890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015896:	2300      	movs	r3, #0
 8015898:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589c:	2b00      	cmp	r3, #0
 801589e:	d10a      	bne.n	80158b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80158a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158a4:	f383 8811 	msr	BASEPRI, r3
 80158a8:	f3bf 8f6f 	isb	sy
 80158ac:	f3bf 8f4f 	dsb	sy
 80158b0:	623b      	str	r3, [r7, #32]
}
 80158b2:	bf00      	nop
 80158b4:	e7fe      	b.n	80158b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80158b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d00a      	beq.n	80158d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80158be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158c2:	f383 8811 	msr	BASEPRI, r3
 80158c6:	f3bf 8f6f 	isb	sy
 80158ca:	f3bf 8f4f 	dsb	sy
 80158ce:	61fb      	str	r3, [r7, #28]
}
 80158d0:	bf00      	nop
 80158d2:	e7fe      	b.n	80158d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80158d4:	f000 ff00 	bl	80166d8 <xTaskGetSchedulerState>
 80158d8:	4603      	mov	r3, r0
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d102      	bne.n	80158e4 <xQueueSemaphoreTake+0x60>
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d101      	bne.n	80158e8 <xQueueSemaphoreTake+0x64>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e000      	b.n	80158ea <xQueueSemaphoreTake+0x66>
 80158e8:	2300      	movs	r3, #0
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d10a      	bne.n	8015904 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80158ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f2:	f383 8811 	msr	BASEPRI, r3
 80158f6:	f3bf 8f6f 	isb	sy
 80158fa:	f3bf 8f4f 	dsb	sy
 80158fe:	61bb      	str	r3, [r7, #24]
}
 8015900:	bf00      	nop
 8015902:	e7fe      	b.n	8015902 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015904:	f001 fa3e 	bl	8016d84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801590c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015910:	2b00      	cmp	r3, #0
 8015912:	d019      	beq.n	8015948 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015916:	1e5a      	subs	r2, r3, #1
 8015918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d104      	bne.n	801592e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015924:	f001 f880 	bl	8016a28 <pvTaskIncrementMutexHeldCount>
 8015928:	4602      	mov	r2, r0
 801592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015930:	691b      	ldr	r3, [r3, #16]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d004      	beq.n	8015940 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015938:	3310      	adds	r3, #16
 801593a:	4618      	mov	r0, r3
 801593c:	f000 fd20 	bl	8016380 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015940:	f001 fa50 	bl	8016de4 <vPortExitCritical>
				return pdPASS;
 8015944:	2301      	movs	r3, #1
 8015946:	e097      	b.n	8015a78 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d111      	bne.n	8015972 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015950:	2b00      	cmp	r3, #0
 8015952:	d00a      	beq.n	801596a <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8015954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015958:	f383 8811 	msr	BASEPRI, r3
 801595c:	f3bf 8f6f 	isb	sy
 8015960:	f3bf 8f4f 	dsb	sy
 8015964:	617b      	str	r3, [r7, #20]
}
 8015966:	bf00      	nop
 8015968:	e7fe      	b.n	8015968 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801596a:	f001 fa3b 	bl	8016de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801596e:	2300      	movs	r3, #0
 8015970:	e082      	b.n	8015a78 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015974:	2b00      	cmp	r3, #0
 8015976:	d106      	bne.n	8015986 <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015978:	f107 030c 	add.w	r3, r7, #12
 801597c:	4618      	mov	r0, r3
 801597e:	f000 fd61 	bl	8016444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015982:	2301      	movs	r3, #1
 8015984:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015986:	f001 fa2d 	bl	8016de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801598a:	f000 fb41 	bl	8016010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801598e:	f001 f9f9 	bl	8016d84 <vPortEnterCritical>
 8015992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015994:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015998:	b25b      	sxtb	r3, r3
 801599a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801599e:	d103      	bne.n	80159a8 <xQueueSemaphoreTake+0x124>
 80159a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a2:	2200      	movs	r2, #0
 80159a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80159a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80159ae:	b25b      	sxtb	r3, r3
 80159b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159b4:	d103      	bne.n	80159be <xQueueSemaphoreTake+0x13a>
 80159b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b8:	2200      	movs	r2, #0
 80159ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80159be:	f001 fa11 	bl	8016de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80159c2:	463a      	mov	r2, r7
 80159c4:	f107 030c 	add.w	r3, r7, #12
 80159c8:	4611      	mov	r1, r2
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 fd50 	bl	8016470 <xTaskCheckForTimeOut>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d132      	bne.n	8015a3c <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80159d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159d8:	f000 f928 	bl	8015c2c <prvIsQueueEmpty>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d026      	beq.n	8015a30 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80159e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d109      	bne.n	80159fe <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80159ea:	f001 f9cb 	bl	8016d84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80159ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f0:	689b      	ldr	r3, [r3, #8]
 80159f2:	4618      	mov	r0, r3
 80159f4:	f000 fe8e 	bl	8016714 <xTaskPriorityInherit>
 80159f8:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80159fa:	f001 f9f3 	bl	8016de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	3324      	adds	r3, #36	; 0x24
 8015a02:	683a      	ldr	r2, [r7, #0]
 8015a04:	4611      	mov	r1, r2
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 fc96 	bl	8016338 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a0e:	f000 f8bb 	bl	8015b88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a12:	f000 fb0b 	bl	801602c <xTaskResumeAll>
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	f47f af73 	bne.w	8015904 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015a1e:	4b18      	ldr	r3, [pc, #96]	; (8015a80 <xQueueSemaphoreTake+0x1fc>)
 8015a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a24:	601a      	str	r2, [r3, #0]
 8015a26:	f3bf 8f4f 	dsb	sy
 8015a2a:	f3bf 8f6f 	isb	sy
 8015a2e:	e769      	b.n	8015904 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015a30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a32:	f000 f8a9 	bl	8015b88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015a36:	f000 faf9 	bl	801602c <xTaskResumeAll>
 8015a3a:	e763      	b.n	8015904 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a3e:	f000 f8a3 	bl	8015b88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a42:	f000 faf3 	bl	801602c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a48:	f000 f8f0 	bl	8015c2c <prvIsQueueEmpty>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	f43f af58 	beq.w	8015904 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8015a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00d      	beq.n	8015a76 <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 8015a5a:	f001 f993 	bl	8016d84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a60:	f000 f810 	bl	8015a84 <prvGetDisinheritPriorityAfterTimeout>
 8015a64:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a68:	689b      	ldr	r3, [r3, #8]
 8015a6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f000 ff4d 	bl	801690c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015a72:	f001 f9b7 	bl	8016de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015a76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015a78:	4618      	mov	r0, r3
 8015a7a:	3738      	adds	r7, #56	; 0x38
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}
 8015a80:	e000ed04 	.word	0xe000ed04

08015a84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8015a84:	b480      	push	{r7}
 8015a86:	b085      	sub	sp, #20
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d006      	beq.n	8015aa2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	f1c3 0307 	rsb	r3, r3, #7
 8015a9e:	60fb      	str	r3, [r7, #12]
 8015aa0:	e001      	b.n	8015aa6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
	}
 8015aa8:	4618      	mov	r0, r3
 8015aaa:	3714      	adds	r7, #20
 8015aac:	46bd      	mov	sp, r7
 8015aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab2:	4770      	bx	lr

08015ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b086      	sub	sp, #24
 8015ab8:	af00      	add	r7, sp, #0
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d10d      	bne.n	8015aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d14d      	bne.n	8015b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015ada:	68fb      	ldr	r3, [r7, #12]
 8015adc:	689b      	ldr	r3, [r3, #8]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 fe8e 	bl	8016800 <xTaskPriorityDisinherit>
 8015ae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	2200      	movs	r2, #0
 8015aea:	609a      	str	r2, [r3, #8]
 8015aec:	e043      	b.n	8015b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d119      	bne.n	8015b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	6858      	ldr	r0, [r3, #4]
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015afc:	461a      	mov	r2, r3
 8015afe:	68b9      	ldr	r1, [r7, #8]
 8015b00:	f002 f9da 	bl	8017eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	685a      	ldr	r2, [r3, #4]
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b0c:	441a      	add	r2, r3
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	685a      	ldr	r2, [r3, #4]
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d32b      	bcc.n	8015b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	605a      	str	r2, [r3, #4]
 8015b26:	e026      	b.n	8015b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	68d8      	ldr	r0, [r3, #12]
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b30:	461a      	mov	r2, r3
 8015b32:	68b9      	ldr	r1, [r7, #8]
 8015b34:	f002 f9c0 	bl	8017eb8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	68da      	ldr	r2, [r3, #12]
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b40:	425b      	negs	r3, r3
 8015b42:	441a      	add	r2, r3
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	68da      	ldr	r2, [r3, #12]
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	429a      	cmp	r2, r3
 8015b52:	d207      	bcs.n	8015b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	689a      	ldr	r2, [r3, #8]
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b5c:	425b      	negs	r3, r3
 8015b5e:	441a      	add	r2, r3
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	d105      	bne.n	8015b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d002      	beq.n	8015b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015b70:	693b      	ldr	r3, [r7, #16]
 8015b72:	3b01      	subs	r3, #1
 8015b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	1c5a      	adds	r2, r3, #1
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8015b7e:	697b      	ldr	r3, [r7, #20]
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3718      	adds	r7, #24
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}

08015b88 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b084      	sub	sp, #16
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015b90:	f001 f8f8 	bl	8016d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015b9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015b9c:	e011      	b.n	8015bc2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d012      	beq.n	8015bcc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	3324      	adds	r3, #36	; 0x24
 8015baa:	4618      	mov	r0, r3
 8015bac:	f000 fbe8 	bl	8016380 <xTaskRemoveFromEventList>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d001      	beq.n	8015bba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015bb6:	f000 fccd 	bl	8016554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015bba:	7bfb      	ldrb	r3, [r7, #15]
 8015bbc:	3b01      	subs	r3, #1
 8015bbe:	b2db      	uxtb	r3, r3
 8015bc0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	dce9      	bgt.n	8015b9e <prvUnlockQueue+0x16>
 8015bca:	e000      	b.n	8015bce <prvUnlockQueue+0x46>
					break;
 8015bcc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	22ff      	movs	r2, #255	; 0xff
 8015bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015bd6:	f001 f905 	bl	8016de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015bda:	f001 f8d3 	bl	8016d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015be4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015be6:	e011      	b.n	8015c0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	691b      	ldr	r3, [r3, #16]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d012      	beq.n	8015c16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	3310      	adds	r3, #16
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f000 fbc3 	bl	8016380 <xTaskRemoveFromEventList>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d001      	beq.n	8015c04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015c00:	f000 fca8 	bl	8016554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015c04:	7bbb      	ldrb	r3, [r7, #14]
 8015c06:	3b01      	subs	r3, #1
 8015c08:	b2db      	uxtb	r3, r3
 8015c0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	dce9      	bgt.n	8015be8 <prvUnlockQueue+0x60>
 8015c14:	e000      	b.n	8015c18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015c16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	22ff      	movs	r2, #255	; 0xff
 8015c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8015c20:	f001 f8e0 	bl	8016de4 <vPortExitCritical>
}
 8015c24:	bf00      	nop
 8015c26:	3710      	adds	r7, #16
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	b084      	sub	sp, #16
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015c34:	f001 f8a6 	bl	8016d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d102      	bne.n	8015c46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015c40:	2301      	movs	r3, #1
 8015c42:	60fb      	str	r3, [r7, #12]
 8015c44:	e001      	b.n	8015c4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015c46:	2300      	movs	r3, #0
 8015c48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015c4a:	f001 f8cb 	bl	8016de4 <vPortExitCritical>

	return xReturn;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015c60:	f001 f890 	bl	8016d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d102      	bne.n	8015c76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015c70:	2301      	movs	r3, #1
 8015c72:	60fb      	str	r3, [r7, #12]
 8015c74:	e001      	b.n	8015c7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015c76:	2300      	movs	r3, #0
 8015c78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015c7a:	f001 f8b3 	bl	8016de4 <vPortExitCritical>

	return xReturn;
 8015c7e:	68fb      	ldr	r3, [r7, #12]
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3710      	adds	r7, #16
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b08c      	sub	sp, #48	; 0x30
 8015c8c:	af04      	add	r7, sp, #16
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	603b      	str	r3, [r7, #0]
 8015c94:	4613      	mov	r3, r2
 8015c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015c98:	88fb      	ldrh	r3, [r7, #6]
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f001 f993 	bl	8016fc8 <pvPortMalloc>
 8015ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00e      	beq.n	8015cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015caa:	20a0      	movs	r0, #160	; 0xa0
 8015cac:	f001 f98c 	bl	8016fc8 <pvPortMalloc>
 8015cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d003      	beq.n	8015cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	697a      	ldr	r2, [r7, #20]
 8015cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8015cbe:	e005      	b.n	8015ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015cc0:	6978      	ldr	r0, [r7, #20]
 8015cc2:	f001 fa4d 	bl	8017160 <vPortFree>
 8015cc6:	e001      	b.n	8015ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015ccc:	69fb      	ldr	r3, [r7, #28]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d013      	beq.n	8015cfa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015cd2:	88fa      	ldrh	r2, [r7, #6]
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	9303      	str	r3, [sp, #12]
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	9302      	str	r3, [sp, #8]
 8015cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cde:	9301      	str	r3, [sp, #4]
 8015ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ce2:	9300      	str	r3, [sp, #0]
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	68b9      	ldr	r1, [r7, #8]
 8015ce8:	68f8      	ldr	r0, [r7, #12]
 8015cea:	f000 f80f 	bl	8015d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015cee:	69f8      	ldr	r0, [r7, #28]
 8015cf0:	f000 f8ae 	bl	8015e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	61bb      	str	r3, [r7, #24]
 8015cf8:	e002      	b.n	8015d00 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8015cfe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015d00:	69bb      	ldr	r3, [r7, #24]
	}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3720      	adds	r7, #32
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
	...

08015d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b088      	sub	sp, #32
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
 8015d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015d24:	3b01      	subs	r3, #1
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	4413      	add	r3, r2
 8015d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015d2c:	69bb      	ldr	r3, [r7, #24]
 8015d2e:	f023 0307 	bic.w	r3, r3, #7
 8015d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015d34:	69bb      	ldr	r3, [r7, #24]
 8015d36:	f003 0307 	and.w	r3, r3, #7
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d00a      	beq.n	8015d54 <prvInitialiseNewTask+0x48>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	617b      	str	r3, [r7, #20]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015d54:	68bb      	ldr	r3, [r7, #8]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d01f      	beq.n	8015d9a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	61fb      	str	r3, [r7, #28]
 8015d5e:	e012      	b.n	8015d86 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	4413      	add	r3, r2
 8015d66:	7819      	ldrb	r1, [r3, #0]
 8015d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	3334      	adds	r3, #52	; 0x34
 8015d70:	460a      	mov	r2, r1
 8015d72:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015d74:	68ba      	ldr	r2, [r7, #8]
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	4413      	add	r3, r2
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d006      	beq.n	8015d8e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	3301      	adds	r3, #1
 8015d84:	61fb      	str	r3, [r7, #28]
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	2b0f      	cmp	r3, #15
 8015d8a:	d9e9      	bls.n	8015d60 <prvInitialiseNewTask+0x54>
 8015d8c:	e000      	b.n	8015d90 <prvInitialiseNewTask+0x84>
			{
				break;
 8015d8e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d92:	2200      	movs	r2, #0
 8015d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015d98:	e003      	b.n	8015da2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015da4:	2b06      	cmp	r3, #6
 8015da6:	d901      	bls.n	8015dac <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015da8:	2306      	movs	r3, #6
 8015daa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	2200      	movs	r2, #0
 8015dbc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc0:	3304      	adds	r3, #4
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7ff fa73 	bl	80152ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dca:	3318      	adds	r3, #24
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff fa6e 	bl	80152ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015dd6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dda:	f1c3 0207 	rsb	r2, r3, #7
 8015dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015de6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dea:	2200      	movs	r2, #0
 8015dec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dfa:	334c      	adds	r3, #76	; 0x4c
 8015dfc:	224c      	movs	r2, #76	; 0x4c
 8015dfe:	2100      	movs	r1, #0
 8015e00:	4618      	mov	r0, r3
 8015e02:	f001 ffcf 	bl	8017da4 <memset>
 8015e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e08:	4a0e      	ldr	r2, [pc, #56]	; (8015e44 <prvInitialiseNewTask+0x138>)
 8015e0a:	651a      	str	r2, [r3, #80]	; 0x50
 8015e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0e:	4a0e      	ldr	r2, [pc, #56]	; (8015e48 <prvInitialiseNewTask+0x13c>)
 8015e10:	655a      	str	r2, [r3, #84]	; 0x54
 8015e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e14:	4a0d      	ldr	r2, [pc, #52]	; (8015e4c <prvInitialiseNewTask+0x140>)
 8015e16:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8015e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015e20:	683a      	ldr	r2, [r7, #0]
 8015e22:	68f9      	ldr	r1, [r7, #12]
 8015e24:	69b8      	ldr	r0, [r7, #24]
 8015e26:	f000 fe7d 	bl	8016b24 <pxPortInitialiseStack>
 8015e2a:	4602      	mov	r2, r0
 8015e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d002      	beq.n	8015e3c <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015e3c:	bf00      	nop
 8015e3e:	3720      	adds	r7, #32
 8015e40:	46bd      	mov	sp, r7
 8015e42:	bd80      	pop	{r7, pc}
 8015e44:	200056d4 	.word	0x200056d4
 8015e48:	2000573c 	.word	0x2000573c
 8015e4c:	200057a4 	.word	0x200057a4

08015e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b082      	sub	sp, #8
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015e58:	f000 ff94 	bl	8016d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015e5c:	4b24      	ldr	r3, [pc, #144]	; (8015ef0 <prvAddNewTaskToReadyList+0xa0>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	3301      	adds	r3, #1
 8015e62:	4a23      	ldr	r2, [pc, #140]	; (8015ef0 <prvAddNewTaskToReadyList+0xa0>)
 8015e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015e66:	4b23      	ldr	r3, [pc, #140]	; (8015ef4 <prvAddNewTaskToReadyList+0xa4>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d109      	bne.n	8015e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015e6e:	4a21      	ldr	r2, [pc, #132]	; (8015ef4 <prvAddNewTaskToReadyList+0xa4>)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015e74:	4b1e      	ldr	r3, [pc, #120]	; (8015ef0 <prvAddNewTaskToReadyList+0xa0>)
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2b01      	cmp	r3, #1
 8015e7a:	d110      	bne.n	8015e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015e7c:	f000 fb88 	bl	8016590 <prvInitialiseTaskLists>
 8015e80:	e00d      	b.n	8015e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015e82:	4b1d      	ldr	r3, [pc, #116]	; (8015ef8 <prvAddNewTaskToReadyList+0xa8>)
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d109      	bne.n	8015e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015e8a:	4b1a      	ldr	r3, [pc, #104]	; (8015ef4 <prvAddNewTaskToReadyList+0xa4>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e94:	429a      	cmp	r2, r3
 8015e96:	d802      	bhi.n	8015e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015e98:	4a16      	ldr	r2, [pc, #88]	; (8015ef4 <prvAddNewTaskToReadyList+0xa4>)
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015e9e:	4b17      	ldr	r3, [pc, #92]	; (8015efc <prvAddNewTaskToReadyList+0xac>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	4a15      	ldr	r2, [pc, #84]	; (8015efc <prvAddNewTaskToReadyList+0xac>)
 8015ea6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015eac:	2201      	movs	r2, #1
 8015eae:	409a      	lsls	r2, r3
 8015eb0:	4b13      	ldr	r3, [pc, #76]	; (8015f00 <prvAddNewTaskToReadyList+0xb0>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	4313      	orrs	r3, r2
 8015eb6:	4a12      	ldr	r2, [pc, #72]	; (8015f00 <prvAddNewTaskToReadyList+0xb0>)
 8015eb8:	6013      	str	r3, [r2, #0]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ebe:	4613      	mov	r3, r2
 8015ec0:	009b      	lsls	r3, r3, #2
 8015ec2:	4413      	add	r3, r2
 8015ec4:	009b      	lsls	r3, r3, #2
 8015ec6:	4a0f      	ldr	r2, [pc, #60]	; (8015f04 <prvAddNewTaskToReadyList+0xb4>)
 8015ec8:	441a      	add	r2, r3
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	3304      	adds	r3, #4
 8015ece:	4619      	mov	r1, r3
 8015ed0:	4610      	mov	r0, r2
 8015ed2:	f7ff f9f9 	bl	80152c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015ed6:	f000 ff85 	bl	8016de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015eda:	4b07      	ldr	r3, [pc, #28]	; (8015ef8 <prvAddNewTaskToReadyList+0xa8>)
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d001      	beq.n	8015ee6 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015ee2:	4b04      	ldr	r3, [pc, #16]	; (8015ef4 <prvAddNewTaskToReadyList+0xa4>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015ee6:	bf00      	nop
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	20000c9c 	.word	0x20000c9c
 8015ef4:	20000b9c 	.word	0x20000b9c
 8015ef8:	20000ca8 	.word	0x20000ca8
 8015efc:	20000cb8 	.word	0x20000cb8
 8015f00:	20000ca4 	.word	0x20000ca4
 8015f04:	20000ba0 	.word	0x20000ba0

08015f08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b084      	sub	sp, #16
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015f10:	2300      	movs	r3, #0
 8015f12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d017      	beq.n	8015f4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015f1a:	4b13      	ldr	r3, [pc, #76]	; (8015f68 <vTaskDelay+0x60>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d00a      	beq.n	8015f38 <vTaskDelay+0x30>
	__asm volatile
 8015f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f26:	f383 8811 	msr	BASEPRI, r3
 8015f2a:	f3bf 8f6f 	isb	sy
 8015f2e:	f3bf 8f4f 	dsb	sy
 8015f32:	60bb      	str	r3, [r7, #8]
}
 8015f34:	bf00      	nop
 8015f36:	e7fe      	b.n	8015f36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015f38:	f000 f86a 	bl	8016010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015f3c:	2100      	movs	r1, #0
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f000 fd86 	bl	8016a50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015f44:	f000 f872 	bl	801602c <xTaskResumeAll>
 8015f48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d107      	bne.n	8015f60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015f50:	4b06      	ldr	r3, [pc, #24]	; (8015f6c <vTaskDelay+0x64>)
 8015f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f56:	601a      	str	r2, [r3, #0]
 8015f58:	f3bf 8f4f 	dsb	sy
 8015f5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015f60:	bf00      	nop
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	20000cc4 	.word	0x20000cc4
 8015f6c:	e000ed04 	.word	0xe000ed04

08015f70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b086      	sub	sp, #24
 8015f74:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8015f76:	4b1e      	ldr	r3, [pc, #120]	; (8015ff0 <vTaskStartScheduler+0x80>)
 8015f78:	9301      	str	r3, [sp, #4]
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	2300      	movs	r3, #0
 8015f80:	2280      	movs	r2, #128	; 0x80
 8015f82:	491c      	ldr	r1, [pc, #112]	; (8015ff4 <vTaskStartScheduler+0x84>)
 8015f84:	481c      	ldr	r0, [pc, #112]	; (8015ff8 <vTaskStartScheduler+0x88>)
 8015f86:	f7ff fe7f 	bl	8015c88 <xTaskCreate>
 8015f8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2b01      	cmp	r3, #1
 8015f90:	d11b      	bne.n	8015fca <vTaskStartScheduler+0x5a>
	__asm volatile
 8015f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f96:	f383 8811 	msr	BASEPRI, r3
 8015f9a:	f3bf 8f6f 	isb	sy
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	60bb      	str	r3, [r7, #8]
}
 8015fa4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015fa6:	4b15      	ldr	r3, [pc, #84]	; (8015ffc <vTaskStartScheduler+0x8c>)
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	334c      	adds	r3, #76	; 0x4c
 8015fac:	4a14      	ldr	r2, [pc, #80]	; (8016000 <vTaskStartScheduler+0x90>)
 8015fae:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015fb0:	4b14      	ldr	r3, [pc, #80]	; (8016004 <vTaskStartScheduler+0x94>)
 8015fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8015fb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015fb8:	4b13      	ldr	r3, [pc, #76]	; (8016008 <vTaskStartScheduler+0x98>)
 8015fba:	2201      	movs	r2, #1
 8015fbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015fbe:	4b13      	ldr	r3, [pc, #76]	; (801600c <vTaskStartScheduler+0x9c>)
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015fc4:	f000 fe3c 	bl	8016c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015fc8:	e00e      	b.n	8015fe8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fd0:	d10a      	bne.n	8015fe8 <vTaskStartScheduler+0x78>
	__asm volatile
 8015fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fd6:	f383 8811 	msr	BASEPRI, r3
 8015fda:	f3bf 8f6f 	isb	sy
 8015fde:	f3bf 8f4f 	dsb	sy
 8015fe2:	607b      	str	r3, [r7, #4]
}
 8015fe4:	bf00      	nop
 8015fe6:	e7fe      	b.n	8015fe6 <vTaskStartScheduler+0x76>
}
 8015fe8:	bf00      	nop
 8015fea:	3710      	adds	r7, #16
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	20000cc0 	.word	0x20000cc0
 8015ff4:	08018fdc 	.word	0x08018fdc
 8015ff8:	0801656d 	.word	0x0801656d
 8015ffc:	20000b9c 	.word	0x20000b9c
 8016000:	200001d8 	.word	0x200001d8
 8016004:	20000cbc 	.word	0x20000cbc
 8016008:	20000ca8 	.word	0x20000ca8
 801600c:	20000ca0 	.word	0x20000ca0

08016010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016010:	b480      	push	{r7}
 8016012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8016014:	4b04      	ldr	r3, [pc, #16]	; (8016028 <vTaskSuspendAll+0x18>)
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	3301      	adds	r3, #1
 801601a:	4a03      	ldr	r2, [pc, #12]	; (8016028 <vTaskSuspendAll+0x18>)
 801601c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801601e:	bf00      	nop
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	20000cc4 	.word	0x20000cc4

0801602c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016032:	2300      	movs	r3, #0
 8016034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8016036:	2300      	movs	r3, #0
 8016038:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801603a:	4b3b      	ldr	r3, [pc, #236]	; (8016128 <xTaskResumeAll+0xfc>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10a      	bne.n	8016058 <xTaskResumeAll+0x2c>
	__asm volatile
 8016042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016046:	f383 8811 	msr	BASEPRI, r3
 801604a:	f3bf 8f6f 	isb	sy
 801604e:	f3bf 8f4f 	dsb	sy
 8016052:	603b      	str	r3, [r7, #0]
}
 8016054:	bf00      	nop
 8016056:	e7fe      	b.n	8016056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016058:	f000 fe94 	bl	8016d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801605c:	4b32      	ldr	r3, [pc, #200]	; (8016128 <xTaskResumeAll+0xfc>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	3b01      	subs	r3, #1
 8016062:	4a31      	ldr	r2, [pc, #196]	; (8016128 <xTaskResumeAll+0xfc>)
 8016064:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016066:	4b30      	ldr	r3, [pc, #192]	; (8016128 <xTaskResumeAll+0xfc>)
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d155      	bne.n	801611a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801606e:	4b2f      	ldr	r3, [pc, #188]	; (801612c <xTaskResumeAll+0x100>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d051      	beq.n	801611a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016076:	e02e      	b.n	80160d6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016078:	4b2d      	ldr	r3, [pc, #180]	; (8016130 <xTaskResumeAll+0x104>)
 801607a:	68db      	ldr	r3, [r3, #12]
 801607c:	68db      	ldr	r3, [r3, #12]
 801607e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	3318      	adds	r3, #24
 8016084:	4618      	mov	r0, r3
 8016086:	f7ff f97c 	bl	8015382 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	3304      	adds	r3, #4
 801608e:	4618      	mov	r0, r3
 8016090:	f7ff f977 	bl	8015382 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016098:	2201      	movs	r2, #1
 801609a:	409a      	lsls	r2, r3
 801609c:	4b25      	ldr	r3, [pc, #148]	; (8016134 <xTaskResumeAll+0x108>)
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4313      	orrs	r3, r2
 80160a2:	4a24      	ldr	r2, [pc, #144]	; (8016134 <xTaskResumeAll+0x108>)
 80160a4:	6013      	str	r3, [r2, #0]
 80160a6:	68fb      	ldr	r3, [r7, #12]
 80160a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160aa:	4613      	mov	r3, r2
 80160ac:	009b      	lsls	r3, r3, #2
 80160ae:	4413      	add	r3, r2
 80160b0:	009b      	lsls	r3, r3, #2
 80160b2:	4a21      	ldr	r2, [pc, #132]	; (8016138 <xTaskResumeAll+0x10c>)
 80160b4:	441a      	add	r2, r3
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	3304      	adds	r3, #4
 80160ba:	4619      	mov	r1, r3
 80160bc:	4610      	mov	r0, r2
 80160be:	f7ff f903 	bl	80152c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160c6:	4b1d      	ldr	r3, [pc, #116]	; (801613c <xTaskResumeAll+0x110>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160cc:	429a      	cmp	r2, r3
 80160ce:	d302      	bcc.n	80160d6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80160d0:	4b1b      	ldr	r3, [pc, #108]	; (8016140 <xTaskResumeAll+0x114>)
 80160d2:	2201      	movs	r2, #1
 80160d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80160d6:	4b16      	ldr	r3, [pc, #88]	; (8016130 <xTaskResumeAll+0x104>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d1cc      	bne.n	8016078 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d001      	beq.n	80160e8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80160e4:	f000 fad8 	bl	8016698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80160e8:	4b16      	ldr	r3, [pc, #88]	; (8016144 <xTaskResumeAll+0x118>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d010      	beq.n	8016116 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80160f4:	f000 f828 	bl	8016148 <xTaskIncrementTick>
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d002      	beq.n	8016104 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80160fe:	4b10      	ldr	r3, [pc, #64]	; (8016140 <xTaskResumeAll+0x114>)
 8016100:	2201      	movs	r2, #1
 8016102:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	3b01      	subs	r3, #1
 8016108:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801610a:	68bb      	ldr	r3, [r7, #8]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d1f1      	bne.n	80160f4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8016110:	4b0c      	ldr	r3, [pc, #48]	; (8016144 <xTaskResumeAll+0x118>)
 8016112:	2200      	movs	r2, #0
 8016114:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016116:	4b0a      	ldr	r3, [pc, #40]	; (8016140 <xTaskResumeAll+0x114>)
 8016118:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801611a:	f000 fe63 	bl	8016de4 <vPortExitCritical>

	return xAlreadyYielded;
 801611e:	687b      	ldr	r3, [r7, #4]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3710      	adds	r7, #16
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}
 8016128:	20000cc4 	.word	0x20000cc4
 801612c:	20000c9c 	.word	0x20000c9c
 8016130:	20000c5c 	.word	0x20000c5c
 8016134:	20000ca4 	.word	0x20000ca4
 8016138:	20000ba0 	.word	0x20000ba0
 801613c:	20000b9c 	.word	0x20000b9c
 8016140:	20000cb0 	.word	0x20000cb0
 8016144:	20000cac 	.word	0x20000cac

08016148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b086      	sub	sp, #24
 801614c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801614e:	2300      	movs	r3, #0
 8016150:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016152:	4b3f      	ldr	r3, [pc, #252]	; (8016250 <xTaskIncrementTick+0x108>)
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d16f      	bne.n	801623a <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801615a:	4b3e      	ldr	r3, [pc, #248]	; (8016254 <xTaskIncrementTick+0x10c>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	3301      	adds	r3, #1
 8016160:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8016162:	4a3c      	ldr	r2, [pc, #240]	; (8016254 <xTaskIncrementTick+0x10c>)
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d120      	bne.n	80161b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801616e:	4b3a      	ldr	r3, [pc, #232]	; (8016258 <xTaskIncrementTick+0x110>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00a      	beq.n	801618e <xTaskIncrementTick+0x46>
	__asm volatile
 8016178:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617c:	f383 8811 	msr	BASEPRI, r3
 8016180:	f3bf 8f6f 	isb	sy
 8016184:	f3bf 8f4f 	dsb	sy
 8016188:	603b      	str	r3, [r7, #0]
}
 801618a:	bf00      	nop
 801618c:	e7fe      	b.n	801618c <xTaskIncrementTick+0x44>
 801618e:	4b32      	ldr	r3, [pc, #200]	; (8016258 <xTaskIncrementTick+0x110>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	60fb      	str	r3, [r7, #12]
 8016194:	4b31      	ldr	r3, [pc, #196]	; (801625c <xTaskIncrementTick+0x114>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	4a2f      	ldr	r2, [pc, #188]	; (8016258 <xTaskIncrementTick+0x110>)
 801619a:	6013      	str	r3, [r2, #0]
 801619c:	4a2f      	ldr	r2, [pc, #188]	; (801625c <xTaskIncrementTick+0x114>)
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	6013      	str	r3, [r2, #0]
 80161a2:	4b2f      	ldr	r3, [pc, #188]	; (8016260 <xTaskIncrementTick+0x118>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	3301      	adds	r3, #1
 80161a8:	4a2d      	ldr	r2, [pc, #180]	; (8016260 <xTaskIncrementTick+0x118>)
 80161aa:	6013      	str	r3, [r2, #0]
 80161ac:	f000 fa74 	bl	8016698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80161b0:	4b2c      	ldr	r3, [pc, #176]	; (8016264 <xTaskIncrementTick+0x11c>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	693a      	ldr	r2, [r7, #16]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d344      	bcc.n	8016244 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161ba:	4b27      	ldr	r3, [pc, #156]	; (8016258 <xTaskIncrementTick+0x110>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d104      	bne.n	80161ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161c4:	4b27      	ldr	r3, [pc, #156]	; (8016264 <xTaskIncrementTick+0x11c>)
 80161c6:	f04f 32ff 	mov.w	r2, #4294967295
 80161ca:	601a      	str	r2, [r3, #0]
					break;
 80161cc:	e03a      	b.n	8016244 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161ce:	4b22      	ldr	r3, [pc, #136]	; (8016258 <xTaskIncrementTick+0x110>)
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	68db      	ldr	r3, [r3, #12]
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	685b      	ldr	r3, [r3, #4]
 80161dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80161de:	693a      	ldr	r2, [r7, #16]
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d203      	bcs.n	80161ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80161e6:	4a1f      	ldr	r2, [pc, #124]	; (8016264 <xTaskIncrementTick+0x11c>)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80161ec:	e02a      	b.n	8016244 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	3304      	adds	r3, #4
 80161f2:	4618      	mov	r0, r3
 80161f4:	f7ff f8c5 	bl	8015382 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80161f8:	68bb      	ldr	r3, [r7, #8]
 80161fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d004      	beq.n	801620a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	3318      	adds	r3, #24
 8016204:	4618      	mov	r0, r3
 8016206:	f7ff f8bc 	bl	8015382 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801620e:	2201      	movs	r2, #1
 8016210:	409a      	lsls	r2, r3
 8016212:	4b15      	ldr	r3, [pc, #84]	; (8016268 <xTaskIncrementTick+0x120>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	4313      	orrs	r3, r2
 8016218:	4a13      	ldr	r2, [pc, #76]	; (8016268 <xTaskIncrementTick+0x120>)
 801621a:	6013      	str	r3, [r2, #0]
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016220:	4613      	mov	r3, r2
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	4413      	add	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	4a10      	ldr	r2, [pc, #64]	; (801626c <xTaskIncrementTick+0x124>)
 801622a:	441a      	add	r2, r3
 801622c:	68bb      	ldr	r3, [r7, #8]
 801622e:	3304      	adds	r3, #4
 8016230:	4619      	mov	r1, r3
 8016232:	4610      	mov	r0, r2
 8016234:	f7ff f848 	bl	80152c8 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016238:	e7bf      	b.n	80161ba <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801623a:	4b0d      	ldr	r3, [pc, #52]	; (8016270 <xTaskIncrementTick+0x128>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	3301      	adds	r3, #1
 8016240:	4a0b      	ldr	r2, [pc, #44]	; (8016270 <xTaskIncrementTick+0x128>)
 8016242:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8016244:	697b      	ldr	r3, [r7, #20]
}
 8016246:	4618      	mov	r0, r3
 8016248:	3718      	adds	r7, #24
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	20000cc4 	.word	0x20000cc4
 8016254:	20000ca0 	.word	0x20000ca0
 8016258:	20000c54 	.word	0x20000c54
 801625c:	20000c58 	.word	0x20000c58
 8016260:	20000cb4 	.word	0x20000cb4
 8016264:	20000cbc 	.word	0x20000cbc
 8016268:	20000ca4 	.word	0x20000ca4
 801626c:	20000ba0 	.word	0x20000ba0
 8016270:	20000cac 	.word	0x20000cac

08016274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016274:	b480      	push	{r7}
 8016276:	b087      	sub	sp, #28
 8016278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801627a:	4b29      	ldr	r3, [pc, #164]	; (8016320 <vTaskSwitchContext+0xac>)
 801627c:	681b      	ldr	r3, [r3, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d003      	beq.n	801628a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016282:	4b28      	ldr	r3, [pc, #160]	; (8016324 <vTaskSwitchContext+0xb0>)
 8016284:	2201      	movs	r2, #1
 8016286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016288:	e044      	b.n	8016314 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801628a:	4b26      	ldr	r3, [pc, #152]	; (8016324 <vTaskSwitchContext+0xb0>)
 801628c:	2200      	movs	r2, #0
 801628e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016290:	4b25      	ldr	r3, [pc, #148]	; (8016328 <vTaskSwitchContext+0xb4>)
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	fab3 f383 	clz	r3, r3
 801629c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801629e:	7afb      	ldrb	r3, [r7, #11]
 80162a0:	f1c3 031f 	rsb	r3, r3, #31
 80162a4:	617b      	str	r3, [r7, #20]
 80162a6:	4921      	ldr	r1, [pc, #132]	; (801632c <vTaskSwitchContext+0xb8>)
 80162a8:	697a      	ldr	r2, [r7, #20]
 80162aa:	4613      	mov	r3, r2
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	4413      	add	r3, r2
 80162b0:	009b      	lsls	r3, r3, #2
 80162b2:	440b      	add	r3, r1
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d10a      	bne.n	80162d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80162ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80162be:	f383 8811 	msr	BASEPRI, r3
 80162c2:	f3bf 8f6f 	isb	sy
 80162c6:	f3bf 8f4f 	dsb	sy
 80162ca:	607b      	str	r3, [r7, #4]
}
 80162cc:	bf00      	nop
 80162ce:	e7fe      	b.n	80162ce <vTaskSwitchContext+0x5a>
 80162d0:	697a      	ldr	r2, [r7, #20]
 80162d2:	4613      	mov	r3, r2
 80162d4:	009b      	lsls	r3, r3, #2
 80162d6:	4413      	add	r3, r2
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	4a14      	ldr	r2, [pc, #80]	; (801632c <vTaskSwitchContext+0xb8>)
 80162dc:	4413      	add	r3, r2
 80162de:	613b      	str	r3, [r7, #16]
 80162e0:	693b      	ldr	r3, [r7, #16]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	685a      	ldr	r2, [r3, #4]
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	605a      	str	r2, [r3, #4]
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	685a      	ldr	r2, [r3, #4]
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	3308      	adds	r3, #8
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d104      	bne.n	8016300 <vTaskSwitchContext+0x8c>
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	685b      	ldr	r3, [r3, #4]
 80162fa:	685a      	ldr	r2, [r3, #4]
 80162fc:	693b      	ldr	r3, [r7, #16]
 80162fe:	605a      	str	r2, [r3, #4]
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	68db      	ldr	r3, [r3, #12]
 8016306:	4a0a      	ldr	r2, [pc, #40]	; (8016330 <vTaskSwitchContext+0xbc>)
 8016308:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801630a:	4b09      	ldr	r3, [pc, #36]	; (8016330 <vTaskSwitchContext+0xbc>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	334c      	adds	r3, #76	; 0x4c
 8016310:	4a08      	ldr	r2, [pc, #32]	; (8016334 <vTaskSwitchContext+0xc0>)
 8016312:	6013      	str	r3, [r2, #0]
}
 8016314:	bf00      	nop
 8016316:	371c      	adds	r7, #28
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr
 8016320:	20000cc4 	.word	0x20000cc4
 8016324:	20000cb0 	.word	0x20000cb0
 8016328:	20000ca4 	.word	0x20000ca4
 801632c:	20000ba0 	.word	0x20000ba0
 8016330:	20000b9c 	.word	0x20000b9c
 8016334:	200001d8 	.word	0x200001d8

08016338 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d10a      	bne.n	801635e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8016348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801634c:	f383 8811 	msr	BASEPRI, r3
 8016350:	f3bf 8f6f 	isb	sy
 8016354:	f3bf 8f4f 	dsb	sy
 8016358:	60fb      	str	r3, [r7, #12]
}
 801635a:	bf00      	nop
 801635c:	e7fe      	b.n	801635c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801635e:	4b07      	ldr	r3, [pc, #28]	; (801637c <vTaskPlaceOnEventList+0x44>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	3318      	adds	r3, #24
 8016364:	4619      	mov	r1, r3
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f7fe ffd2 	bl	8015310 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801636c:	2101      	movs	r1, #1
 801636e:	6838      	ldr	r0, [r7, #0]
 8016370:	f000 fb6e 	bl	8016a50 <prvAddCurrentTaskToDelayedList>
}
 8016374:	bf00      	nop
 8016376:	3710      	adds	r7, #16
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	20000b9c 	.word	0x20000b9c

08016380 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d10a      	bne.n	80163ac <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8016396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801639a:	f383 8811 	msr	BASEPRI, r3
 801639e:	f3bf 8f6f 	isb	sy
 80163a2:	f3bf 8f4f 	dsb	sy
 80163a6:	60fb      	str	r3, [r7, #12]
}
 80163a8:	bf00      	nop
 80163aa:	e7fe      	b.n	80163aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	3318      	adds	r3, #24
 80163b0:	4618      	mov	r0, r3
 80163b2:	f7fe ffe6 	bl	8015382 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80163b6:	4b1d      	ldr	r3, [pc, #116]	; (801642c <xTaskRemoveFromEventList+0xac>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d11c      	bne.n	80163f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	3304      	adds	r3, #4
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7fe ffdd 	bl	8015382 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80163c8:	693b      	ldr	r3, [r7, #16]
 80163ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163cc:	2201      	movs	r2, #1
 80163ce:	409a      	lsls	r2, r3
 80163d0:	4b17      	ldr	r3, [pc, #92]	; (8016430 <xTaskRemoveFromEventList+0xb0>)
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	4313      	orrs	r3, r2
 80163d6:	4a16      	ldr	r2, [pc, #88]	; (8016430 <xTaskRemoveFromEventList+0xb0>)
 80163d8:	6013      	str	r3, [r2, #0]
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80163de:	4613      	mov	r3, r2
 80163e0:	009b      	lsls	r3, r3, #2
 80163e2:	4413      	add	r3, r2
 80163e4:	009b      	lsls	r3, r3, #2
 80163e6:	4a13      	ldr	r2, [pc, #76]	; (8016434 <xTaskRemoveFromEventList+0xb4>)
 80163e8:	441a      	add	r2, r3
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	3304      	adds	r3, #4
 80163ee:	4619      	mov	r1, r3
 80163f0:	4610      	mov	r0, r2
 80163f2:	f7fe ff69 	bl	80152c8 <vListInsertEnd>
 80163f6:	e005      	b.n	8016404 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	3318      	adds	r3, #24
 80163fc:	4619      	mov	r1, r3
 80163fe:	480e      	ldr	r0, [pc, #56]	; (8016438 <xTaskRemoveFromEventList+0xb8>)
 8016400:	f7fe ff62 	bl	80152c8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016404:	693b      	ldr	r3, [r7, #16]
 8016406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016408:	4b0c      	ldr	r3, [pc, #48]	; (801643c <xTaskRemoveFromEventList+0xbc>)
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801640e:	429a      	cmp	r2, r3
 8016410:	d905      	bls.n	801641e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016412:	2301      	movs	r3, #1
 8016414:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016416:	4b0a      	ldr	r3, [pc, #40]	; (8016440 <xTaskRemoveFromEventList+0xc0>)
 8016418:	2201      	movs	r2, #1
 801641a:	601a      	str	r2, [r3, #0]
 801641c:	e001      	b.n	8016422 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801641e:	2300      	movs	r3, #0
 8016420:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016422:	697b      	ldr	r3, [r7, #20]
}
 8016424:	4618      	mov	r0, r3
 8016426:	3718      	adds	r7, #24
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}
 801642c:	20000cc4 	.word	0x20000cc4
 8016430:	20000ca4 	.word	0x20000ca4
 8016434:	20000ba0 	.word	0x20000ba0
 8016438:	20000c5c 	.word	0x20000c5c
 801643c:	20000b9c 	.word	0x20000b9c
 8016440:	20000cb0 	.word	0x20000cb0

08016444 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016444:	b480      	push	{r7}
 8016446:	b083      	sub	sp, #12
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801644c:	4b06      	ldr	r3, [pc, #24]	; (8016468 <vTaskInternalSetTimeOutState+0x24>)
 801644e:	681a      	ldr	r2, [r3, #0]
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016454:	4b05      	ldr	r3, [pc, #20]	; (801646c <vTaskInternalSetTimeOutState+0x28>)
 8016456:	681a      	ldr	r2, [r3, #0]
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	605a      	str	r2, [r3, #4]
}
 801645c:	bf00      	nop
 801645e:	370c      	adds	r7, #12
 8016460:	46bd      	mov	sp, r7
 8016462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016466:	4770      	bx	lr
 8016468:	20000cb4 	.word	0x20000cb4
 801646c:	20000ca0 	.word	0x20000ca0

08016470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b088      	sub	sp, #32
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d10a      	bne.n	8016496 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8016480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016484:	f383 8811 	msr	BASEPRI, r3
 8016488:	f3bf 8f6f 	isb	sy
 801648c:	f3bf 8f4f 	dsb	sy
 8016490:	613b      	str	r3, [r7, #16]
}
 8016492:	bf00      	nop
 8016494:	e7fe      	b.n	8016494 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016496:	683b      	ldr	r3, [r7, #0]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d10a      	bne.n	80164b2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164a0:	f383 8811 	msr	BASEPRI, r3
 80164a4:	f3bf 8f6f 	isb	sy
 80164a8:	f3bf 8f4f 	dsb	sy
 80164ac:	60fb      	str	r3, [r7, #12]
}
 80164ae:	bf00      	nop
 80164b0:	e7fe      	b.n	80164b0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80164b2:	f000 fc67 	bl	8016d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80164b6:	4b24      	ldr	r3, [pc, #144]	; (8016548 <xTaskCheckForTimeOut+0xd8>)
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	69ba      	ldr	r2, [r7, #24]
 80164c2:	1ad3      	subs	r3, r2, r3
 80164c4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80164c6:	4b21      	ldr	r3, [pc, #132]	; (801654c <xTaskCheckForTimeOut+0xdc>)
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d007      	beq.n	80164e2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80164d2:	4b1e      	ldr	r3, [pc, #120]	; (801654c <xTaskCheckForTimeOut+0xdc>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2200      	movs	r2, #0
 80164d8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 80164dc:	2301      	movs	r3, #1
 80164de:	61fb      	str	r3, [r7, #28]
 80164e0:	e02b      	b.n	801653a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164ea:	d102      	bne.n	80164f2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80164ec:	2300      	movs	r3, #0
 80164ee:	61fb      	str	r3, [r7, #28]
 80164f0:	e023      	b.n	801653a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681a      	ldr	r2, [r3, #0]
 80164f6:	4b16      	ldr	r3, [pc, #88]	; (8016550 <xTaskCheckForTimeOut+0xe0>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d007      	beq.n	801650e <xTaskCheckForTimeOut+0x9e>
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	69ba      	ldr	r2, [r7, #24]
 8016504:	429a      	cmp	r2, r3
 8016506:	d302      	bcc.n	801650e <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016508:	2301      	movs	r3, #1
 801650a:	61fb      	str	r3, [r7, #28]
 801650c:	e015      	b.n	801653a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	697a      	ldr	r2, [r7, #20]
 8016514:	429a      	cmp	r2, r3
 8016516:	d20b      	bcs.n	8016530 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	681a      	ldr	r2, [r3, #0]
 801651c:	697b      	ldr	r3, [r7, #20]
 801651e:	1ad2      	subs	r2, r2, r3
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f7ff ff8d 	bl	8016444 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801652a:	2300      	movs	r3, #0
 801652c:	61fb      	str	r3, [r7, #28]
 801652e:	e004      	b.n	801653a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8016530:	683b      	ldr	r3, [r7, #0]
 8016532:	2200      	movs	r2, #0
 8016534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016536:	2301      	movs	r3, #1
 8016538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801653a:	f000 fc53 	bl	8016de4 <vPortExitCritical>

	return xReturn;
 801653e:	69fb      	ldr	r3, [r7, #28]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3720      	adds	r7, #32
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	20000ca0 	.word	0x20000ca0
 801654c:	20000b9c 	.word	0x20000b9c
 8016550:	20000cb4 	.word	0x20000cb4

08016554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016554:	b480      	push	{r7}
 8016556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016558:	4b03      	ldr	r3, [pc, #12]	; (8016568 <vTaskMissedYield+0x14>)
 801655a:	2201      	movs	r2, #1
 801655c:	601a      	str	r2, [r3, #0]
}
 801655e:	bf00      	nop
 8016560:	46bd      	mov	sp, r7
 8016562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016566:	4770      	bx	lr
 8016568:	20000cb0 	.word	0x20000cb0

0801656c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b082      	sub	sp, #8
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016574:	f000 f84c 	bl	8016610 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8016578:	4b04      	ldr	r3, [pc, #16]	; (801658c <prvIdleTask+0x20>)
 801657a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801657e:	601a      	str	r2, [r3, #0]
 8016580:	f3bf 8f4f 	dsb	sy
 8016584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8016588:	e7f4      	b.n	8016574 <prvIdleTask+0x8>
 801658a:	bf00      	nop
 801658c:	e000ed04 	.word	0xe000ed04

08016590 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016596:	2300      	movs	r3, #0
 8016598:	607b      	str	r3, [r7, #4]
 801659a:	e00c      	b.n	80165b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	4613      	mov	r3, r2
 80165a0:	009b      	lsls	r3, r3, #2
 80165a2:	4413      	add	r3, r2
 80165a4:	009b      	lsls	r3, r3, #2
 80165a6:	4a12      	ldr	r2, [pc, #72]	; (80165f0 <prvInitialiseTaskLists+0x60>)
 80165a8:	4413      	add	r3, r2
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7fe fe5f 	bl	801526e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	3301      	adds	r3, #1
 80165b4:	607b      	str	r3, [r7, #4]
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2b06      	cmp	r3, #6
 80165ba:	d9ef      	bls.n	801659c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80165bc:	480d      	ldr	r0, [pc, #52]	; (80165f4 <prvInitialiseTaskLists+0x64>)
 80165be:	f7fe fe56 	bl	801526e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80165c2:	480d      	ldr	r0, [pc, #52]	; (80165f8 <prvInitialiseTaskLists+0x68>)
 80165c4:	f7fe fe53 	bl	801526e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80165c8:	480c      	ldr	r0, [pc, #48]	; (80165fc <prvInitialiseTaskLists+0x6c>)
 80165ca:	f7fe fe50 	bl	801526e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80165ce:	480c      	ldr	r0, [pc, #48]	; (8016600 <prvInitialiseTaskLists+0x70>)
 80165d0:	f7fe fe4d 	bl	801526e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80165d4:	480b      	ldr	r0, [pc, #44]	; (8016604 <prvInitialiseTaskLists+0x74>)
 80165d6:	f7fe fe4a 	bl	801526e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80165da:	4b0b      	ldr	r3, [pc, #44]	; (8016608 <prvInitialiseTaskLists+0x78>)
 80165dc:	4a05      	ldr	r2, [pc, #20]	; (80165f4 <prvInitialiseTaskLists+0x64>)
 80165de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80165e0:	4b0a      	ldr	r3, [pc, #40]	; (801660c <prvInitialiseTaskLists+0x7c>)
 80165e2:	4a05      	ldr	r2, [pc, #20]	; (80165f8 <prvInitialiseTaskLists+0x68>)
 80165e4:	601a      	str	r2, [r3, #0]
}
 80165e6:	bf00      	nop
 80165e8:	3708      	adds	r7, #8
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	20000ba0 	.word	0x20000ba0
 80165f4:	20000c2c 	.word	0x20000c2c
 80165f8:	20000c40 	.word	0x20000c40
 80165fc:	20000c5c 	.word	0x20000c5c
 8016600:	20000c70 	.word	0x20000c70
 8016604:	20000c88 	.word	0x20000c88
 8016608:	20000c54 	.word	0x20000c54
 801660c:	20000c58 	.word	0x20000c58

08016610 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016616:	e019      	b.n	801664c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016618:	f000 fbb4 	bl	8016d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801661c:	4b10      	ldr	r3, [pc, #64]	; (8016660 <prvCheckTasksWaitingTermination+0x50>)
 801661e:	68db      	ldr	r3, [r3, #12]
 8016620:	68db      	ldr	r3, [r3, #12]
 8016622:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	3304      	adds	r3, #4
 8016628:	4618      	mov	r0, r3
 801662a:	f7fe feaa 	bl	8015382 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801662e:	4b0d      	ldr	r3, [pc, #52]	; (8016664 <prvCheckTasksWaitingTermination+0x54>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	3b01      	subs	r3, #1
 8016634:	4a0b      	ldr	r2, [pc, #44]	; (8016664 <prvCheckTasksWaitingTermination+0x54>)
 8016636:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016638:	4b0b      	ldr	r3, [pc, #44]	; (8016668 <prvCheckTasksWaitingTermination+0x58>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	3b01      	subs	r3, #1
 801663e:	4a0a      	ldr	r2, [pc, #40]	; (8016668 <prvCheckTasksWaitingTermination+0x58>)
 8016640:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016642:	f000 fbcf 	bl	8016de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 f810 	bl	801666c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801664c:	4b06      	ldr	r3, [pc, #24]	; (8016668 <prvCheckTasksWaitingTermination+0x58>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d1e1      	bne.n	8016618 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016654:	bf00      	nop
 8016656:	bf00      	nop
 8016658:	3708      	adds	r7, #8
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}
 801665e:	bf00      	nop
 8016660:	20000c70 	.word	0x20000c70
 8016664:	20000c9c 	.word	0x20000c9c
 8016668:	20000c84 	.word	0x20000c84

0801666c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	334c      	adds	r3, #76	; 0x4c
 8016678:	4618      	mov	r0, r3
 801667a:	f001 fb9b 	bl	8017db4 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016682:	4618      	mov	r0, r3
 8016684:	f000 fd6c 	bl	8017160 <vPortFree>
			vPortFree( pxTCB );
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f000 fd69 	bl	8017160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801668e:	bf00      	nop
 8016690:	3708      	adds	r7, #8
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
	...

08016698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016698:	b480      	push	{r7}
 801669a:	b083      	sub	sp, #12
 801669c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801669e:	4b0c      	ldr	r3, [pc, #48]	; (80166d0 <prvResetNextTaskUnblockTime+0x38>)
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d104      	bne.n	80166b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80166a8:	4b0a      	ldr	r3, [pc, #40]	; (80166d4 <prvResetNextTaskUnblockTime+0x3c>)
 80166aa:	f04f 32ff 	mov.w	r2, #4294967295
 80166ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80166b0:	e008      	b.n	80166c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166b2:	4b07      	ldr	r3, [pc, #28]	; (80166d0 <prvResetNextTaskUnblockTime+0x38>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	68db      	ldr	r3, [r3, #12]
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	685b      	ldr	r3, [r3, #4]
 80166c0:	4a04      	ldr	r2, [pc, #16]	; (80166d4 <prvResetNextTaskUnblockTime+0x3c>)
 80166c2:	6013      	str	r3, [r2, #0]
}
 80166c4:	bf00      	nop
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr
 80166d0:	20000c54 	.word	0x20000c54
 80166d4:	20000cbc 	.word	0x20000cbc

080166d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80166de:	4b0b      	ldr	r3, [pc, #44]	; (801670c <xTaskGetSchedulerState+0x34>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d102      	bne.n	80166ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80166e6:	2301      	movs	r3, #1
 80166e8:	607b      	str	r3, [r7, #4]
 80166ea:	e008      	b.n	80166fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80166ec:	4b08      	ldr	r3, [pc, #32]	; (8016710 <xTaskGetSchedulerState+0x38>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80166f4:	2302      	movs	r3, #2
 80166f6:	607b      	str	r3, [r7, #4]
 80166f8:	e001      	b.n	80166fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80166fa:	2300      	movs	r3, #0
 80166fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80166fe:	687b      	ldr	r3, [r7, #4]
	}
 8016700:	4618      	mov	r0, r3
 8016702:	370c      	adds	r7, #12
 8016704:	46bd      	mov	sp, r7
 8016706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670a:	4770      	bx	lr
 801670c:	20000ca8 	.word	0x20000ca8
 8016710:	20000cc4 	.word	0x20000cc4

08016714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016720:	2300      	movs	r3, #0
 8016722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d05e      	beq.n	80167e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801672a:	68bb      	ldr	r3, [r7, #8]
 801672c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801672e:	4b31      	ldr	r3, [pc, #196]	; (80167f4 <xTaskPriorityInherit+0xe0>)
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016734:	429a      	cmp	r2, r3
 8016736:	d24e      	bcs.n	80167d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	699b      	ldr	r3, [r3, #24]
 801673c:	2b00      	cmp	r3, #0
 801673e:	db06      	blt.n	801674e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016740:	4b2c      	ldr	r3, [pc, #176]	; (80167f4 <xTaskPriorityInherit+0xe0>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016746:	f1c3 0207 	rsb	r2, r3, #7
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801674e:	68bb      	ldr	r3, [r7, #8]
 8016750:	6959      	ldr	r1, [r3, #20]
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016756:	4613      	mov	r3, r2
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	4413      	add	r3, r2
 801675c:	009b      	lsls	r3, r3, #2
 801675e:	4a26      	ldr	r2, [pc, #152]	; (80167f8 <xTaskPriorityInherit+0xe4>)
 8016760:	4413      	add	r3, r2
 8016762:	4299      	cmp	r1, r3
 8016764:	d12f      	bne.n	80167c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	3304      	adds	r3, #4
 801676a:	4618      	mov	r0, r3
 801676c:	f7fe fe09 	bl	8015382 <uxListRemove>
 8016770:	4603      	mov	r3, r0
 8016772:	2b00      	cmp	r3, #0
 8016774:	d10a      	bne.n	801678c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801677a:	2201      	movs	r2, #1
 801677c:	fa02 f303 	lsl.w	r3, r2, r3
 8016780:	43da      	mvns	r2, r3
 8016782:	4b1e      	ldr	r3, [pc, #120]	; (80167fc <xTaskPriorityInherit+0xe8>)
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	4013      	ands	r3, r2
 8016788:	4a1c      	ldr	r2, [pc, #112]	; (80167fc <xTaskPriorityInherit+0xe8>)
 801678a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801678c:	4b19      	ldr	r3, [pc, #100]	; (80167f4 <xTaskPriorityInherit+0xe0>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801679a:	2201      	movs	r2, #1
 801679c:	409a      	lsls	r2, r3
 801679e:	4b17      	ldr	r3, [pc, #92]	; (80167fc <xTaskPriorityInherit+0xe8>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4313      	orrs	r3, r2
 80167a4:	4a15      	ldr	r2, [pc, #84]	; (80167fc <xTaskPriorityInherit+0xe8>)
 80167a6:	6013      	str	r3, [r2, #0]
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167ac:	4613      	mov	r3, r2
 80167ae:	009b      	lsls	r3, r3, #2
 80167b0:	4413      	add	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	4a10      	ldr	r2, [pc, #64]	; (80167f8 <xTaskPriorityInherit+0xe4>)
 80167b6:	441a      	add	r2, r3
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	3304      	adds	r3, #4
 80167bc:	4619      	mov	r1, r3
 80167be:	4610      	mov	r0, r2
 80167c0:	f7fe fd82 	bl	80152c8 <vListInsertEnd>
 80167c4:	e004      	b.n	80167d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80167c6:	4b0b      	ldr	r3, [pc, #44]	; (80167f4 <xTaskPriorityInherit+0xe0>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80167d0:	2301      	movs	r3, #1
 80167d2:	60fb      	str	r3, [r7, #12]
 80167d4:	e008      	b.n	80167e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80167d6:	68bb      	ldr	r3, [r7, #8]
 80167d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80167da:	4b06      	ldr	r3, [pc, #24]	; (80167f4 <xTaskPriorityInherit+0xe0>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d201      	bcs.n	80167e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80167e4:	2301      	movs	r3, #1
 80167e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80167e8:	68fb      	ldr	r3, [r7, #12]
	}
 80167ea:	4618      	mov	r0, r3
 80167ec:	3710      	adds	r7, #16
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
 80167f2:	bf00      	nop
 80167f4:	20000b9c 	.word	0x20000b9c
 80167f8:	20000ba0 	.word	0x20000ba0
 80167fc:	20000ca4 	.word	0x20000ca4

08016800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016800:	b580      	push	{r7, lr}
 8016802:	b086      	sub	sp, #24
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801680c:	2300      	movs	r3, #0
 801680e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d06e      	beq.n	80168f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016816:	4b3a      	ldr	r3, [pc, #232]	; (8016900 <xTaskPriorityDisinherit+0x100>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	693a      	ldr	r2, [r7, #16]
 801681c:	429a      	cmp	r2, r3
 801681e:	d00a      	beq.n	8016836 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016824:	f383 8811 	msr	BASEPRI, r3
 8016828:	f3bf 8f6f 	isb	sy
 801682c:	f3bf 8f4f 	dsb	sy
 8016830:	60fb      	str	r3, [r7, #12]
}
 8016832:	bf00      	nop
 8016834:	e7fe      	b.n	8016834 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016836:	693b      	ldr	r3, [r7, #16]
 8016838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801683a:	2b00      	cmp	r3, #0
 801683c:	d10a      	bne.n	8016854 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016842:	f383 8811 	msr	BASEPRI, r3
 8016846:	f3bf 8f6f 	isb	sy
 801684a:	f3bf 8f4f 	dsb	sy
 801684e:	60bb      	str	r3, [r7, #8]
}
 8016850:	bf00      	nop
 8016852:	e7fe      	b.n	8016852 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016858:	1e5a      	subs	r2, r3, #1
 801685a:	693b      	ldr	r3, [r7, #16]
 801685c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801685e:	693b      	ldr	r3, [r7, #16]
 8016860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016866:	429a      	cmp	r2, r3
 8016868:	d044      	beq.n	80168f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801686a:	693b      	ldr	r3, [r7, #16]
 801686c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801686e:	2b00      	cmp	r3, #0
 8016870:	d140      	bne.n	80168f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	3304      	adds	r3, #4
 8016876:	4618      	mov	r0, r3
 8016878:	f7fe fd83 	bl	8015382 <uxListRemove>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d115      	bne.n	80168ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016886:	491f      	ldr	r1, [pc, #124]	; (8016904 <xTaskPriorityDisinherit+0x104>)
 8016888:	4613      	mov	r3, r2
 801688a:	009b      	lsls	r3, r3, #2
 801688c:	4413      	add	r3, r2
 801688e:	009b      	lsls	r3, r3, #2
 8016890:	440b      	add	r3, r1
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	2b00      	cmp	r3, #0
 8016896:	d10a      	bne.n	80168ae <xTaskPriorityDisinherit+0xae>
 8016898:	693b      	ldr	r3, [r7, #16]
 801689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801689c:	2201      	movs	r2, #1
 801689e:	fa02 f303 	lsl.w	r3, r2, r3
 80168a2:	43da      	mvns	r2, r3
 80168a4:	4b18      	ldr	r3, [pc, #96]	; (8016908 <xTaskPriorityDisinherit+0x108>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	4013      	ands	r3, r2
 80168aa:	4a17      	ldr	r2, [pc, #92]	; (8016908 <xTaskPriorityDisinherit+0x108>)
 80168ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80168b2:	693b      	ldr	r3, [r7, #16]
 80168b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168ba:	f1c3 0207 	rsb	r2, r3, #7
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c6:	2201      	movs	r2, #1
 80168c8:	409a      	lsls	r2, r3
 80168ca:	4b0f      	ldr	r3, [pc, #60]	; (8016908 <xTaskPriorityDisinherit+0x108>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	4313      	orrs	r3, r2
 80168d0:	4a0d      	ldr	r2, [pc, #52]	; (8016908 <xTaskPriorityDisinherit+0x108>)
 80168d2:	6013      	str	r3, [r2, #0]
 80168d4:	693b      	ldr	r3, [r7, #16]
 80168d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168d8:	4613      	mov	r3, r2
 80168da:	009b      	lsls	r3, r3, #2
 80168dc:	4413      	add	r3, r2
 80168de:	009b      	lsls	r3, r3, #2
 80168e0:	4a08      	ldr	r2, [pc, #32]	; (8016904 <xTaskPriorityDisinherit+0x104>)
 80168e2:	441a      	add	r2, r3
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	3304      	adds	r3, #4
 80168e8:	4619      	mov	r1, r3
 80168ea:	4610      	mov	r0, r2
 80168ec:	f7fe fcec 	bl	80152c8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80168f0:	2301      	movs	r3, #1
 80168f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80168f4:	697b      	ldr	r3, [r7, #20]
	}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3718      	adds	r7, #24
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	20000b9c 	.word	0x20000b9c
 8016904:	20000ba0 	.word	0x20000ba0
 8016908:	20000ca4 	.word	0x20000ca4

0801690c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801690c:	b580      	push	{r7, lr}
 801690e:	b088      	sub	sp, #32
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801691a:	2301      	movs	r3, #1
 801691c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d077      	beq.n	8016a14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016924:	69bb      	ldr	r3, [r7, #24]
 8016926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016928:	2b00      	cmp	r3, #0
 801692a:	d10a      	bne.n	8016942 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016930:	f383 8811 	msr	BASEPRI, r3
 8016934:	f3bf 8f6f 	isb	sy
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	60fb      	str	r3, [r7, #12]
}
 801693e:	bf00      	nop
 8016940:	e7fe      	b.n	8016940 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016942:	69bb      	ldr	r3, [r7, #24]
 8016944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016946:	683a      	ldr	r2, [r7, #0]
 8016948:	429a      	cmp	r2, r3
 801694a:	d902      	bls.n	8016952 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	61fb      	str	r3, [r7, #28]
 8016950:	e002      	b.n	8016958 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016956:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695c:	69fa      	ldr	r2, [r7, #28]
 801695e:	429a      	cmp	r2, r3
 8016960:	d058      	beq.n	8016a14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016966:	697a      	ldr	r2, [r7, #20]
 8016968:	429a      	cmp	r2, r3
 801696a:	d153      	bne.n	8016a14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801696c:	4b2b      	ldr	r3, [pc, #172]	; (8016a1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	69ba      	ldr	r2, [r7, #24]
 8016972:	429a      	cmp	r2, r3
 8016974:	d10a      	bne.n	801698c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801697a:	f383 8811 	msr	BASEPRI, r3
 801697e:	f3bf 8f6f 	isb	sy
 8016982:	f3bf 8f4f 	dsb	sy
 8016986:	60bb      	str	r3, [r7, #8]
}
 8016988:	bf00      	nop
 801698a:	e7fe      	b.n	801698a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801698c:	69bb      	ldr	r3, [r7, #24]
 801698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016990:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	69fa      	ldr	r2, [r7, #28]
 8016996:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016998:	69bb      	ldr	r3, [r7, #24]
 801699a:	699b      	ldr	r3, [r3, #24]
 801699c:	2b00      	cmp	r3, #0
 801699e:	db04      	blt.n	80169aa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169a0:	69fb      	ldr	r3, [r7, #28]
 80169a2:	f1c3 0207 	rsb	r2, r3, #7
 80169a6:	69bb      	ldr	r3, [r7, #24]
 80169a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80169aa:	69bb      	ldr	r3, [r7, #24]
 80169ac:	6959      	ldr	r1, [r3, #20]
 80169ae:	693a      	ldr	r2, [r7, #16]
 80169b0:	4613      	mov	r3, r2
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	4413      	add	r3, r2
 80169b6:	009b      	lsls	r3, r3, #2
 80169b8:	4a19      	ldr	r2, [pc, #100]	; (8016a20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80169ba:	4413      	add	r3, r2
 80169bc:	4299      	cmp	r1, r3
 80169be:	d129      	bne.n	8016a14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80169c0:	69bb      	ldr	r3, [r7, #24]
 80169c2:	3304      	adds	r3, #4
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7fe fcdc 	bl	8015382 <uxListRemove>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d10a      	bne.n	80169e6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169d4:	2201      	movs	r2, #1
 80169d6:	fa02 f303 	lsl.w	r3, r2, r3
 80169da:	43da      	mvns	r2, r3
 80169dc:	4b11      	ldr	r3, [pc, #68]	; (8016a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	4013      	ands	r3, r2
 80169e2:	4a10      	ldr	r2, [pc, #64]	; (8016a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80169e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80169e6:	69bb      	ldr	r3, [r7, #24]
 80169e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ea:	2201      	movs	r2, #1
 80169ec:	409a      	lsls	r2, r3
 80169ee:	4b0d      	ldr	r3, [pc, #52]	; (8016a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	4313      	orrs	r3, r2
 80169f4:	4a0b      	ldr	r2, [pc, #44]	; (8016a24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80169f6:	6013      	str	r3, [r2, #0]
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169fc:	4613      	mov	r3, r2
 80169fe:	009b      	lsls	r3, r3, #2
 8016a00:	4413      	add	r3, r2
 8016a02:	009b      	lsls	r3, r3, #2
 8016a04:	4a06      	ldr	r2, [pc, #24]	; (8016a20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8016a06:	441a      	add	r2, r3
 8016a08:	69bb      	ldr	r3, [r7, #24]
 8016a0a:	3304      	adds	r3, #4
 8016a0c:	4619      	mov	r1, r3
 8016a0e:	4610      	mov	r0, r2
 8016a10:	f7fe fc5a 	bl	80152c8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016a14:	bf00      	nop
 8016a16:	3720      	adds	r7, #32
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd80      	pop	{r7, pc}
 8016a1c:	20000b9c 	.word	0x20000b9c
 8016a20:	20000ba0 	.word	0x20000ba0
 8016a24:	20000ca4 	.word	0x20000ca4

08016a28 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016a28:	b480      	push	{r7}
 8016a2a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016a2c:	4b07      	ldr	r3, [pc, #28]	; (8016a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d004      	beq.n	8016a3e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016a34:	4b05      	ldr	r3, [pc, #20]	; (8016a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016a3a:	3201      	adds	r2, #1
 8016a3c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8016a3e:	4b03      	ldr	r3, [pc, #12]	; (8016a4c <pvTaskIncrementMutexHeldCount+0x24>)
 8016a40:	681b      	ldr	r3, [r3, #0]
	}
 8016a42:	4618      	mov	r0, r3
 8016a44:	46bd      	mov	sp, r7
 8016a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4a:	4770      	bx	lr
 8016a4c:	20000b9c 	.word	0x20000b9c

08016a50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b084      	sub	sp, #16
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016a5a:	4b2b      	ldr	r3, [pc, #172]	; (8016b08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8016a60:	4b2a      	ldr	r3, [pc, #168]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2200      	movs	r2, #0
 8016a66:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a6a:	4b28      	ldr	r3, [pc, #160]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	3304      	adds	r3, #4
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7fe fc86 	bl	8015382 <uxListRemove>
 8016a76:	4603      	mov	r3, r0
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d10b      	bne.n	8016a94 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016a7c:	4b23      	ldr	r3, [pc, #140]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a82:	2201      	movs	r2, #1
 8016a84:	fa02 f303 	lsl.w	r3, r2, r3
 8016a88:	43da      	mvns	r2, r3
 8016a8a:	4b21      	ldr	r3, [pc, #132]	; (8016b10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	4013      	ands	r3, r2
 8016a90:	4a1f      	ldr	r2, [pc, #124]	; (8016b10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8016a92:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a9a:	d10a      	bne.n	8016ab2 <prvAddCurrentTaskToDelayedList+0x62>
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d007      	beq.n	8016ab2 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016aa2:	4b1a      	ldr	r3, [pc, #104]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	3304      	adds	r3, #4
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	481a      	ldr	r0, [pc, #104]	; (8016b14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016aac:	f7fe fc0c 	bl	80152c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016ab0:	e026      	b.n	8016b00 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016ab2:	68fa      	ldr	r2, [r7, #12]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016aba:	4b14      	ldr	r3, [pc, #80]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	68ba      	ldr	r2, [r7, #8]
 8016ac0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016ac2:	68ba      	ldr	r2, [r7, #8]
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d209      	bcs.n	8016ade <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016aca:	4b13      	ldr	r3, [pc, #76]	; (8016b18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016acc:	681a      	ldr	r2, [r3, #0]
 8016ace:	4b0f      	ldr	r3, [pc, #60]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	3304      	adds	r3, #4
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	4610      	mov	r0, r2
 8016ad8:	f7fe fc1a 	bl	8015310 <vListInsert>
}
 8016adc:	e010      	b.n	8016b00 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ade:	4b0f      	ldr	r3, [pc, #60]	; (8016b1c <prvAddCurrentTaskToDelayedList+0xcc>)
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	4b0a      	ldr	r3, [pc, #40]	; (8016b0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	3304      	adds	r3, #4
 8016ae8:	4619      	mov	r1, r3
 8016aea:	4610      	mov	r0, r2
 8016aec:	f7fe fc10 	bl	8015310 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016af0:	4b0b      	ldr	r3, [pc, #44]	; (8016b20 <prvAddCurrentTaskToDelayedList+0xd0>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	68ba      	ldr	r2, [r7, #8]
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d202      	bcs.n	8016b00 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8016afa:	4a09      	ldr	r2, [pc, #36]	; (8016b20 <prvAddCurrentTaskToDelayedList+0xd0>)
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	6013      	str	r3, [r2, #0]
}
 8016b00:	bf00      	nop
 8016b02:	3710      	adds	r7, #16
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bd80      	pop	{r7, pc}
 8016b08:	20000ca0 	.word	0x20000ca0
 8016b0c:	20000b9c 	.word	0x20000b9c
 8016b10:	20000ca4 	.word	0x20000ca4
 8016b14:	20000c88 	.word	0x20000c88
 8016b18:	20000c58 	.word	0x20000c58
 8016b1c:	20000c54 	.word	0x20000c54
 8016b20:	20000cbc 	.word	0x20000cbc

08016b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016b24:	b480      	push	{r7}
 8016b26:	b085      	sub	sp, #20
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	60b9      	str	r1, [r7, #8]
 8016b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	3b04      	subs	r3, #4
 8016b34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	3b04      	subs	r3, #4
 8016b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016b44:	68bb      	ldr	r3, [r7, #8]
 8016b46:	f023 0201 	bic.w	r2, r3, #1
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	3b04      	subs	r3, #4
 8016b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016b54:	4a0c      	ldr	r2, [pc, #48]	; (8016b88 <pxPortInitialiseStack+0x64>)
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	3b14      	subs	r3, #20
 8016b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016b60:	687a      	ldr	r2, [r7, #4]
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	3b04      	subs	r3, #4
 8016b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	f06f 0202 	mvn.w	r2, #2
 8016b72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	3b20      	subs	r3, #32
 8016b78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016b7a:	68fb      	ldr	r3, [r7, #12]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3714      	adds	r7, #20
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr
 8016b88:	08016b8d 	.word	0x08016b8d

08016b8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016b8c:	b480      	push	{r7}
 8016b8e:	b085      	sub	sp, #20
 8016b90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016b92:	2300      	movs	r3, #0
 8016b94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016b96:	4b12      	ldr	r3, [pc, #72]	; (8016be0 <prvTaskExitError+0x54>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b9e:	d00a      	beq.n	8016bb6 <prvTaskExitError+0x2a>
	__asm volatile
 8016ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ba4:	f383 8811 	msr	BASEPRI, r3
 8016ba8:	f3bf 8f6f 	isb	sy
 8016bac:	f3bf 8f4f 	dsb	sy
 8016bb0:	60fb      	str	r3, [r7, #12]
}
 8016bb2:	bf00      	nop
 8016bb4:	e7fe      	b.n	8016bb4 <prvTaskExitError+0x28>
	__asm volatile
 8016bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	60bb      	str	r3, [r7, #8]
}
 8016bc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016bca:	bf00      	nop
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d0fc      	beq.n	8016bcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016bd2:	bf00      	nop
 8016bd4:	bf00      	nop
 8016bd6:	3714      	adds	r7, #20
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bde:	4770      	bx	lr
 8016be0:	20000120 	.word	0x20000120
	...

08016bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016bf0:	4b07      	ldr	r3, [pc, #28]	; (8016c10 <pxCurrentTCBConst2>)
 8016bf2:	6819      	ldr	r1, [r3, #0]
 8016bf4:	6808      	ldr	r0, [r1, #0]
 8016bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bfa:	f380 8809 	msr	PSP, r0
 8016bfe:	f3bf 8f6f 	isb	sy
 8016c02:	f04f 0000 	mov.w	r0, #0
 8016c06:	f380 8811 	msr	BASEPRI, r0
 8016c0a:	4770      	bx	lr
 8016c0c:	f3af 8000 	nop.w

08016c10 <pxCurrentTCBConst2>:
 8016c10:	20000b9c 	.word	0x20000b9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016c14:	bf00      	nop
 8016c16:	bf00      	nop

08016c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016c18:	4808      	ldr	r0, [pc, #32]	; (8016c3c <prvPortStartFirstTask+0x24>)
 8016c1a:	6800      	ldr	r0, [r0, #0]
 8016c1c:	6800      	ldr	r0, [r0, #0]
 8016c1e:	f380 8808 	msr	MSP, r0
 8016c22:	f04f 0000 	mov.w	r0, #0
 8016c26:	f380 8814 	msr	CONTROL, r0
 8016c2a:	b662      	cpsie	i
 8016c2c:	b661      	cpsie	f
 8016c2e:	f3bf 8f4f 	dsb	sy
 8016c32:	f3bf 8f6f 	isb	sy
 8016c36:	df00      	svc	0
 8016c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016c3a:	bf00      	nop
 8016c3c:	e000ed08 	.word	0xe000ed08

08016c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b086      	sub	sp, #24
 8016c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016c46:	4b46      	ldr	r3, [pc, #280]	; (8016d60 <xPortStartScheduler+0x120>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4a46      	ldr	r2, [pc, #280]	; (8016d64 <xPortStartScheduler+0x124>)
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	d10a      	bne.n	8016c66 <xPortStartScheduler+0x26>
	__asm volatile
 8016c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	613b      	str	r3, [r7, #16]
}
 8016c62:	bf00      	nop
 8016c64:	e7fe      	b.n	8016c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016c66:	4b3e      	ldr	r3, [pc, #248]	; (8016d60 <xPortStartScheduler+0x120>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	4a3f      	ldr	r2, [pc, #252]	; (8016d68 <xPortStartScheduler+0x128>)
 8016c6c:	4293      	cmp	r3, r2
 8016c6e:	d10a      	bne.n	8016c86 <xPortStartScheduler+0x46>
	__asm volatile
 8016c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c74:	f383 8811 	msr	BASEPRI, r3
 8016c78:	f3bf 8f6f 	isb	sy
 8016c7c:	f3bf 8f4f 	dsb	sy
 8016c80:	60fb      	str	r3, [r7, #12]
}
 8016c82:	bf00      	nop
 8016c84:	e7fe      	b.n	8016c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016c86:	4b39      	ldr	r3, [pc, #228]	; (8016d6c <xPortStartScheduler+0x12c>)
 8016c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016c8a:	697b      	ldr	r3, [r7, #20]
 8016c8c:	781b      	ldrb	r3, [r3, #0]
 8016c8e:	b2db      	uxtb	r3, r3
 8016c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016c92:	697b      	ldr	r3, [r7, #20]
 8016c94:	22ff      	movs	r2, #255	; 0xff
 8016c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016c98:	697b      	ldr	r3, [r7, #20]
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	b2db      	uxtb	r3, r3
 8016c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016ca0:	78fb      	ldrb	r3, [r7, #3]
 8016ca2:	b2db      	uxtb	r3, r3
 8016ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016ca8:	b2da      	uxtb	r2, r3
 8016caa:	4b31      	ldr	r3, [pc, #196]	; (8016d70 <xPortStartScheduler+0x130>)
 8016cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016cae:	4b31      	ldr	r3, [pc, #196]	; (8016d74 <xPortStartScheduler+0x134>)
 8016cb0:	2207      	movs	r2, #7
 8016cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016cb4:	e009      	b.n	8016cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016cb6:	4b2f      	ldr	r3, [pc, #188]	; (8016d74 <xPortStartScheduler+0x134>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	3b01      	subs	r3, #1
 8016cbc:	4a2d      	ldr	r2, [pc, #180]	; (8016d74 <xPortStartScheduler+0x134>)
 8016cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016cc0:	78fb      	ldrb	r3, [r7, #3]
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	b2db      	uxtb	r3, r3
 8016cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016cca:	78fb      	ldrb	r3, [r7, #3]
 8016ccc:	b2db      	uxtb	r3, r3
 8016cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016cd2:	2b80      	cmp	r3, #128	; 0x80
 8016cd4:	d0ef      	beq.n	8016cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016cd6:	4b27      	ldr	r3, [pc, #156]	; (8016d74 <xPortStartScheduler+0x134>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	f1c3 0307 	rsb	r3, r3, #7
 8016cde:	2b04      	cmp	r3, #4
 8016ce0:	d00a      	beq.n	8016cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8016ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce6:	f383 8811 	msr	BASEPRI, r3
 8016cea:	f3bf 8f6f 	isb	sy
 8016cee:	f3bf 8f4f 	dsb	sy
 8016cf2:	60bb      	str	r3, [r7, #8]
}
 8016cf4:	bf00      	nop
 8016cf6:	e7fe      	b.n	8016cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016cf8:	4b1e      	ldr	r3, [pc, #120]	; (8016d74 <xPortStartScheduler+0x134>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	021b      	lsls	r3, r3, #8
 8016cfe:	4a1d      	ldr	r2, [pc, #116]	; (8016d74 <xPortStartScheduler+0x134>)
 8016d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016d02:	4b1c      	ldr	r3, [pc, #112]	; (8016d74 <xPortStartScheduler+0x134>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016d0a:	4a1a      	ldr	r2, [pc, #104]	; (8016d74 <xPortStartScheduler+0x134>)
 8016d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	b2da      	uxtb	r2, r3
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016d16:	4b18      	ldr	r3, [pc, #96]	; (8016d78 <xPortStartScheduler+0x138>)
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	4a17      	ldr	r2, [pc, #92]	; (8016d78 <xPortStartScheduler+0x138>)
 8016d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016d22:	4b15      	ldr	r3, [pc, #84]	; (8016d78 <xPortStartScheduler+0x138>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	4a14      	ldr	r2, [pc, #80]	; (8016d78 <xPortStartScheduler+0x138>)
 8016d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016d2e:	f000 f8dd 	bl	8016eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016d32:	4b12      	ldr	r3, [pc, #72]	; (8016d7c <xPortStartScheduler+0x13c>)
 8016d34:	2200      	movs	r2, #0
 8016d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016d38:	f000 f8fc 	bl	8016f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016d3c:	4b10      	ldr	r3, [pc, #64]	; (8016d80 <xPortStartScheduler+0x140>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	4a0f      	ldr	r2, [pc, #60]	; (8016d80 <xPortStartScheduler+0x140>)
 8016d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016d48:	f7ff ff66 	bl	8016c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016d4c:	f7ff fa92 	bl	8016274 <vTaskSwitchContext>
	prvTaskExitError();
 8016d50:	f7ff ff1c 	bl	8016b8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016d54:	2300      	movs	r3, #0
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3718      	adds	r7, #24
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	e000ed00 	.word	0xe000ed00
 8016d64:	410fc271 	.word	0x410fc271
 8016d68:	410fc270 	.word	0x410fc270
 8016d6c:	e000e400 	.word	0xe000e400
 8016d70:	20000cc8 	.word	0x20000cc8
 8016d74:	20000ccc 	.word	0x20000ccc
 8016d78:	e000ed20 	.word	0xe000ed20
 8016d7c:	20000120 	.word	0x20000120
 8016d80:	e000ef34 	.word	0xe000ef34

08016d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016d84:	b480      	push	{r7}
 8016d86:	b083      	sub	sp, #12
 8016d88:	af00      	add	r7, sp, #0
	__asm volatile
 8016d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d8e:	f383 8811 	msr	BASEPRI, r3
 8016d92:	f3bf 8f6f 	isb	sy
 8016d96:	f3bf 8f4f 	dsb	sy
 8016d9a:	607b      	str	r3, [r7, #4]
}
 8016d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016d9e:	4b0f      	ldr	r3, [pc, #60]	; (8016ddc <vPortEnterCritical+0x58>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	3301      	adds	r3, #1
 8016da4:	4a0d      	ldr	r2, [pc, #52]	; (8016ddc <vPortEnterCritical+0x58>)
 8016da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016da8:	4b0c      	ldr	r3, [pc, #48]	; (8016ddc <vPortEnterCritical+0x58>)
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	2b01      	cmp	r3, #1
 8016dae:	d10f      	bne.n	8016dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016db0:	4b0b      	ldr	r3, [pc, #44]	; (8016de0 <vPortEnterCritical+0x5c>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	b2db      	uxtb	r3, r3
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d00a      	beq.n	8016dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8016dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dbe:	f383 8811 	msr	BASEPRI, r3
 8016dc2:	f3bf 8f6f 	isb	sy
 8016dc6:	f3bf 8f4f 	dsb	sy
 8016dca:	603b      	str	r3, [r7, #0]
}
 8016dcc:	bf00      	nop
 8016dce:	e7fe      	b.n	8016dce <vPortEnterCritical+0x4a>
	}
}
 8016dd0:	bf00      	nop
 8016dd2:	370c      	adds	r7, #12
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dda:	4770      	bx	lr
 8016ddc:	20000120 	.word	0x20000120
 8016de0:	e000ed04 	.word	0xe000ed04

08016de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016de4:	b480      	push	{r7}
 8016de6:	b083      	sub	sp, #12
 8016de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016dea:	4b12      	ldr	r3, [pc, #72]	; (8016e34 <vPortExitCritical+0x50>)
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d10a      	bne.n	8016e08 <vPortExitCritical+0x24>
	__asm volatile
 8016df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016df6:	f383 8811 	msr	BASEPRI, r3
 8016dfa:	f3bf 8f6f 	isb	sy
 8016dfe:	f3bf 8f4f 	dsb	sy
 8016e02:	607b      	str	r3, [r7, #4]
}
 8016e04:	bf00      	nop
 8016e06:	e7fe      	b.n	8016e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016e08:	4b0a      	ldr	r3, [pc, #40]	; (8016e34 <vPortExitCritical+0x50>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	3b01      	subs	r3, #1
 8016e0e:	4a09      	ldr	r2, [pc, #36]	; (8016e34 <vPortExitCritical+0x50>)
 8016e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016e12:	4b08      	ldr	r3, [pc, #32]	; (8016e34 <vPortExitCritical+0x50>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d105      	bne.n	8016e26 <vPortExitCritical+0x42>
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	f383 8811 	msr	BASEPRI, r3
}
 8016e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016e26:	bf00      	nop
 8016e28:	370c      	adds	r7, #12
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e30:	4770      	bx	lr
 8016e32:	bf00      	nop
 8016e34:	20000120 	.word	0x20000120
	...

08016e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016e40:	f3ef 8009 	mrs	r0, PSP
 8016e44:	f3bf 8f6f 	isb	sy
 8016e48:	4b15      	ldr	r3, [pc, #84]	; (8016ea0 <pxCurrentTCBConst>)
 8016e4a:	681a      	ldr	r2, [r3, #0]
 8016e4c:	f01e 0f10 	tst.w	lr, #16
 8016e50:	bf08      	it	eq
 8016e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e5a:	6010      	str	r0, [r2, #0]
 8016e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016e64:	f380 8811 	msr	BASEPRI, r0
 8016e68:	f3bf 8f4f 	dsb	sy
 8016e6c:	f3bf 8f6f 	isb	sy
 8016e70:	f7ff fa00 	bl	8016274 <vTaskSwitchContext>
 8016e74:	f04f 0000 	mov.w	r0, #0
 8016e78:	f380 8811 	msr	BASEPRI, r0
 8016e7c:	bc09      	pop	{r0, r3}
 8016e7e:	6819      	ldr	r1, [r3, #0]
 8016e80:	6808      	ldr	r0, [r1, #0]
 8016e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e86:	f01e 0f10 	tst.w	lr, #16
 8016e8a:	bf08      	it	eq
 8016e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016e90:	f380 8809 	msr	PSP, r0
 8016e94:	f3bf 8f6f 	isb	sy
 8016e98:	4770      	bx	lr
 8016e9a:	bf00      	nop
 8016e9c:	f3af 8000 	nop.w

08016ea0 <pxCurrentTCBConst>:
 8016ea0:	20000b9c 	.word	0x20000b9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016ea4:	bf00      	nop
 8016ea6:	bf00      	nop

08016ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
	__asm volatile
 8016eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb2:	f383 8811 	msr	BASEPRI, r3
 8016eb6:	f3bf 8f6f 	isb	sy
 8016eba:	f3bf 8f4f 	dsb	sy
 8016ebe:	607b      	str	r3, [r7, #4]
}
 8016ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ec2:	f7ff f941 	bl	8016148 <xTaskIncrementTick>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d003      	beq.n	8016ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016ecc:	4b06      	ldr	r3, [pc, #24]	; (8016ee8 <SysTick_Handler+0x40>)
 8016ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ed2:	601a      	str	r2, [r3, #0]
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	f383 8811 	msr	BASEPRI, r3
}
 8016ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016ee0:	bf00      	nop
 8016ee2:	3708      	adds	r7, #8
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	bd80      	pop	{r7, pc}
 8016ee8:	e000ed04 	.word	0xe000ed04

08016eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016eec:	b480      	push	{r7}
 8016eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016ef0:	4b0b      	ldr	r3, [pc, #44]	; (8016f20 <vPortSetupTimerInterrupt+0x34>)
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016ef6:	4b0b      	ldr	r3, [pc, #44]	; (8016f24 <vPortSetupTimerInterrupt+0x38>)
 8016ef8:	2200      	movs	r2, #0
 8016efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016efc:	4b0a      	ldr	r3, [pc, #40]	; (8016f28 <vPortSetupTimerInterrupt+0x3c>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	4a0a      	ldr	r2, [pc, #40]	; (8016f2c <vPortSetupTimerInterrupt+0x40>)
 8016f02:	fba2 2303 	umull	r2, r3, r2, r3
 8016f06:	099b      	lsrs	r3, r3, #6
 8016f08:	4a09      	ldr	r2, [pc, #36]	; (8016f30 <vPortSetupTimerInterrupt+0x44>)
 8016f0a:	3b01      	subs	r3, #1
 8016f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016f0e:	4b04      	ldr	r3, [pc, #16]	; (8016f20 <vPortSetupTimerInterrupt+0x34>)
 8016f10:	2207      	movs	r2, #7
 8016f12:	601a      	str	r2, [r3, #0]
}
 8016f14:	bf00      	nop
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr
 8016f1e:	bf00      	nop
 8016f20:	e000e010 	.word	0xe000e010
 8016f24:	e000e018 	.word	0xe000e018
 8016f28:	20000004 	.word	0x20000004
 8016f2c:	10624dd3 	.word	0x10624dd3
 8016f30:	e000e014 	.word	0xe000e014

08016f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016f44 <vPortEnableVFP+0x10>
 8016f38:	6801      	ldr	r1, [r0, #0]
 8016f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016f3e:	6001      	str	r1, [r0, #0]
 8016f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016f42:	bf00      	nop
 8016f44:	e000ed88 	.word	0xe000ed88

08016f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016f48:	b480      	push	{r7}
 8016f4a:	b085      	sub	sp, #20
 8016f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016f4e:	f3ef 8305 	mrs	r3, IPSR
 8016f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	2b0f      	cmp	r3, #15
 8016f58:	d914      	bls.n	8016f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016f5a:	4a17      	ldr	r2, [pc, #92]	; (8016fb8 <vPortValidateInterruptPriority+0x70>)
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	4413      	add	r3, r2
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016f64:	4b15      	ldr	r3, [pc, #84]	; (8016fbc <vPortValidateInterruptPriority+0x74>)
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	7afa      	ldrb	r2, [r7, #11]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d20a      	bcs.n	8016f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f72:	f383 8811 	msr	BASEPRI, r3
 8016f76:	f3bf 8f6f 	isb	sy
 8016f7a:	f3bf 8f4f 	dsb	sy
 8016f7e:	607b      	str	r3, [r7, #4]
}
 8016f80:	bf00      	nop
 8016f82:	e7fe      	b.n	8016f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016f84:	4b0e      	ldr	r3, [pc, #56]	; (8016fc0 <vPortValidateInterruptPriority+0x78>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016f8c:	4b0d      	ldr	r3, [pc, #52]	; (8016fc4 <vPortValidateInterruptPriority+0x7c>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	429a      	cmp	r2, r3
 8016f92:	d90a      	bls.n	8016faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f98:	f383 8811 	msr	BASEPRI, r3
 8016f9c:	f3bf 8f6f 	isb	sy
 8016fa0:	f3bf 8f4f 	dsb	sy
 8016fa4:	603b      	str	r3, [r7, #0]
}
 8016fa6:	bf00      	nop
 8016fa8:	e7fe      	b.n	8016fa8 <vPortValidateInterruptPriority+0x60>
	}
 8016faa:	bf00      	nop
 8016fac:	3714      	adds	r7, #20
 8016fae:	46bd      	mov	sp, r7
 8016fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb4:	4770      	bx	lr
 8016fb6:	bf00      	nop
 8016fb8:	e000e3f0 	.word	0xe000e3f0
 8016fbc:	20000cc8 	.word	0x20000cc8
 8016fc0:	e000ed0c 	.word	0xe000ed0c
 8016fc4:	20000ccc 	.word	0x20000ccc

08016fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b08a      	sub	sp, #40	; 0x28
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016fd4:	f7ff f81c 	bl	8016010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016fd8:	4b5b      	ldr	r3, [pc, #364]	; (8017148 <pvPortMalloc+0x180>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d101      	bne.n	8016fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016fe0:	f000 f920 	bl	8017224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016fe4:	4b59      	ldr	r3, [pc, #356]	; (801714c <pvPortMalloc+0x184>)
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	4013      	ands	r3, r2
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	f040 8093 	bne.w	8017118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d01d      	beq.n	8017034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016ff8:	2208      	movs	r2, #8
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	4413      	add	r3, r2
 8016ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f003 0307 	and.w	r3, r3, #7
 8017006:	2b00      	cmp	r3, #0
 8017008:	d014      	beq.n	8017034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f023 0307 	bic.w	r3, r3, #7
 8017010:	3308      	adds	r3, #8
 8017012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	f003 0307 	and.w	r3, r3, #7
 801701a:	2b00      	cmp	r3, #0
 801701c:	d00a      	beq.n	8017034 <pvPortMalloc+0x6c>
	__asm volatile
 801701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017022:	f383 8811 	msr	BASEPRI, r3
 8017026:	f3bf 8f6f 	isb	sy
 801702a:	f3bf 8f4f 	dsb	sy
 801702e:	617b      	str	r3, [r7, #20]
}
 8017030:	bf00      	nop
 8017032:	e7fe      	b.n	8017032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d06e      	beq.n	8017118 <pvPortMalloc+0x150>
 801703a:	4b45      	ldr	r3, [pc, #276]	; (8017150 <pvPortMalloc+0x188>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	429a      	cmp	r2, r3
 8017042:	d869      	bhi.n	8017118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017044:	4b43      	ldr	r3, [pc, #268]	; (8017154 <pvPortMalloc+0x18c>)
 8017046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017048:	4b42      	ldr	r3, [pc, #264]	; (8017154 <pvPortMalloc+0x18c>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801704e:	e004      	b.n	801705a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	429a      	cmp	r2, r3
 8017062:	d903      	bls.n	801706c <pvPortMalloc+0xa4>
 8017064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d1f1      	bne.n	8017050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801706c:	4b36      	ldr	r3, [pc, #216]	; (8017148 <pvPortMalloc+0x180>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017072:	429a      	cmp	r2, r3
 8017074:	d050      	beq.n	8017118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017076:	6a3b      	ldr	r3, [r7, #32]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2208      	movs	r2, #8
 801707c:	4413      	add	r3, r2
 801707e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017082:	681a      	ldr	r2, [r3, #0]
 8017084:	6a3b      	ldr	r3, [r7, #32]
 8017086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801708a:	685a      	ldr	r2, [r3, #4]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	1ad2      	subs	r2, r2, r3
 8017090:	2308      	movs	r3, #8
 8017092:	005b      	lsls	r3, r3, #1
 8017094:	429a      	cmp	r2, r3
 8017096:	d91f      	bls.n	80170d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	4413      	add	r3, r2
 801709e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80170a0:	69bb      	ldr	r3, [r7, #24]
 80170a2:	f003 0307 	and.w	r3, r3, #7
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d00a      	beq.n	80170c0 <pvPortMalloc+0xf8>
	__asm volatile
 80170aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	613b      	str	r3, [r7, #16]
}
 80170bc:	bf00      	nop
 80170be:	e7fe      	b.n	80170be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80170c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170c2:	685a      	ldr	r2, [r3, #4]
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	1ad2      	subs	r2, r2, r3
 80170c8:	69bb      	ldr	r3, [r7, #24]
 80170ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80170cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80170d2:	69b8      	ldr	r0, [r7, #24]
 80170d4:	f000 f908 	bl	80172e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80170d8:	4b1d      	ldr	r3, [pc, #116]	; (8017150 <pvPortMalloc+0x188>)
 80170da:	681a      	ldr	r2, [r3, #0]
 80170dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	1ad3      	subs	r3, r2, r3
 80170e2:	4a1b      	ldr	r2, [pc, #108]	; (8017150 <pvPortMalloc+0x188>)
 80170e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80170e6:	4b1a      	ldr	r3, [pc, #104]	; (8017150 <pvPortMalloc+0x188>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	4b1b      	ldr	r3, [pc, #108]	; (8017158 <pvPortMalloc+0x190>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d203      	bcs.n	80170fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80170f2:	4b17      	ldr	r3, [pc, #92]	; (8017150 <pvPortMalloc+0x188>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	4a18      	ldr	r2, [pc, #96]	; (8017158 <pvPortMalloc+0x190>)
 80170f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80170fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fc:	685a      	ldr	r2, [r3, #4]
 80170fe:	4b13      	ldr	r3, [pc, #76]	; (801714c <pvPortMalloc+0x184>)
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	431a      	orrs	r2, r3
 8017104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710a:	2200      	movs	r2, #0
 801710c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801710e:	4b13      	ldr	r3, [pc, #76]	; (801715c <pvPortMalloc+0x194>)
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	3301      	adds	r3, #1
 8017114:	4a11      	ldr	r2, [pc, #68]	; (801715c <pvPortMalloc+0x194>)
 8017116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017118:	f7fe ff88 	bl	801602c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	f003 0307 	and.w	r3, r3, #7
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00a      	beq.n	801713c <pvPortMalloc+0x174>
	__asm volatile
 8017126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801712a:	f383 8811 	msr	BASEPRI, r3
 801712e:	f3bf 8f6f 	isb	sy
 8017132:	f3bf 8f4f 	dsb	sy
 8017136:	60fb      	str	r3, [r7, #12]
}
 8017138:	bf00      	nop
 801713a:	e7fe      	b.n	801713a <pvPortMalloc+0x172>
	return pvReturn;
 801713c:	69fb      	ldr	r3, [r7, #28]
}
 801713e:	4618      	mov	r0, r3
 8017140:	3728      	adds	r7, #40	; 0x28
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	20003cd8 	.word	0x20003cd8
 801714c:	20003cec 	.word	0x20003cec
 8017150:	20003cdc 	.word	0x20003cdc
 8017154:	20003cd0 	.word	0x20003cd0
 8017158:	20003ce0 	.word	0x20003ce0
 801715c:	20003ce4 	.word	0x20003ce4

08017160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b086      	sub	sp, #24
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d04d      	beq.n	801720e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017172:	2308      	movs	r3, #8
 8017174:	425b      	negs	r3, r3
 8017176:	697a      	ldr	r2, [r7, #20]
 8017178:	4413      	add	r3, r2
 801717a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801717c:	697b      	ldr	r3, [r7, #20]
 801717e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	685a      	ldr	r2, [r3, #4]
 8017184:	4b24      	ldr	r3, [pc, #144]	; (8017218 <vPortFree+0xb8>)
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	4013      	ands	r3, r2
 801718a:	2b00      	cmp	r3, #0
 801718c:	d10a      	bne.n	80171a4 <vPortFree+0x44>
	__asm volatile
 801718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017192:	f383 8811 	msr	BASEPRI, r3
 8017196:	f3bf 8f6f 	isb	sy
 801719a:	f3bf 8f4f 	dsb	sy
 801719e:	60fb      	str	r3, [r7, #12]
}
 80171a0:	bf00      	nop
 80171a2:	e7fe      	b.n	80171a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d00a      	beq.n	80171c2 <vPortFree+0x62>
	__asm volatile
 80171ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b0:	f383 8811 	msr	BASEPRI, r3
 80171b4:	f3bf 8f6f 	isb	sy
 80171b8:	f3bf 8f4f 	dsb	sy
 80171bc:	60bb      	str	r3, [r7, #8]
}
 80171be:	bf00      	nop
 80171c0:	e7fe      	b.n	80171c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80171c2:	693b      	ldr	r3, [r7, #16]
 80171c4:	685a      	ldr	r2, [r3, #4]
 80171c6:	4b14      	ldr	r3, [pc, #80]	; (8017218 <vPortFree+0xb8>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	4013      	ands	r3, r2
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d01e      	beq.n	801720e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d11a      	bne.n	801720e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80171d8:	693b      	ldr	r3, [r7, #16]
 80171da:	685a      	ldr	r2, [r3, #4]
 80171dc:	4b0e      	ldr	r3, [pc, #56]	; (8017218 <vPortFree+0xb8>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	43db      	mvns	r3, r3
 80171e2:	401a      	ands	r2, r3
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80171e8:	f7fe ff12 	bl	8016010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80171ec:	693b      	ldr	r3, [r7, #16]
 80171ee:	685a      	ldr	r2, [r3, #4]
 80171f0:	4b0a      	ldr	r3, [pc, #40]	; (801721c <vPortFree+0xbc>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	4413      	add	r3, r2
 80171f6:	4a09      	ldr	r2, [pc, #36]	; (801721c <vPortFree+0xbc>)
 80171f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80171fa:	6938      	ldr	r0, [r7, #16]
 80171fc:	f000 f874 	bl	80172e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017200:	4b07      	ldr	r3, [pc, #28]	; (8017220 <vPortFree+0xc0>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	3301      	adds	r3, #1
 8017206:	4a06      	ldr	r2, [pc, #24]	; (8017220 <vPortFree+0xc0>)
 8017208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801720a:	f7fe ff0f 	bl	801602c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801720e:	bf00      	nop
 8017210:	3718      	adds	r7, #24
 8017212:	46bd      	mov	sp, r7
 8017214:	bd80      	pop	{r7, pc}
 8017216:	bf00      	nop
 8017218:	20003cec 	.word	0x20003cec
 801721c:	20003cdc 	.word	0x20003cdc
 8017220:	20003ce8 	.word	0x20003ce8

08017224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017224:	b480      	push	{r7}
 8017226:	b085      	sub	sp, #20
 8017228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801722a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 801722e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017230:	4b27      	ldr	r3, [pc, #156]	; (80172d0 <prvHeapInit+0xac>)
 8017232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	f003 0307 	and.w	r3, r3, #7
 801723a:	2b00      	cmp	r3, #0
 801723c:	d00c      	beq.n	8017258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	3307      	adds	r3, #7
 8017242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f023 0307 	bic.w	r3, r3, #7
 801724a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801724c:	68ba      	ldr	r2, [r7, #8]
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	1ad3      	subs	r3, r2, r3
 8017252:	4a1f      	ldr	r2, [pc, #124]	; (80172d0 <prvHeapInit+0xac>)
 8017254:	4413      	add	r3, r2
 8017256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801725c:	4a1d      	ldr	r2, [pc, #116]	; (80172d4 <prvHeapInit+0xb0>)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017262:	4b1c      	ldr	r3, [pc, #112]	; (80172d4 <prvHeapInit+0xb0>)
 8017264:	2200      	movs	r2, #0
 8017266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	68ba      	ldr	r2, [r7, #8]
 801726c:	4413      	add	r3, r2
 801726e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017270:	2208      	movs	r2, #8
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	1a9b      	subs	r3, r3, r2
 8017276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	f023 0307 	bic.w	r3, r3, #7
 801727e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	4a15      	ldr	r2, [pc, #84]	; (80172d8 <prvHeapInit+0xb4>)
 8017284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017286:	4b14      	ldr	r3, [pc, #80]	; (80172d8 <prvHeapInit+0xb4>)
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	2200      	movs	r2, #0
 801728c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801728e:	4b12      	ldr	r3, [pc, #72]	; (80172d8 <prvHeapInit+0xb4>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2200      	movs	r2, #0
 8017294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801729a:	683b      	ldr	r3, [r7, #0]
 801729c:	68fa      	ldr	r2, [r7, #12]
 801729e:	1ad2      	subs	r2, r2, r3
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80172a4:	4b0c      	ldr	r3, [pc, #48]	; (80172d8 <prvHeapInit+0xb4>)
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	4a0a      	ldr	r2, [pc, #40]	; (80172dc <prvHeapInit+0xb8>)
 80172b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	4a09      	ldr	r2, [pc, #36]	; (80172e0 <prvHeapInit+0xbc>)
 80172ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80172bc:	4b09      	ldr	r3, [pc, #36]	; (80172e4 <prvHeapInit+0xc0>)
 80172be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80172c2:	601a      	str	r2, [r3, #0]
}
 80172c4:	bf00      	nop
 80172c6:	3714      	adds	r7, #20
 80172c8:	46bd      	mov	sp, r7
 80172ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ce:	4770      	bx	lr
 80172d0:	20000cd0 	.word	0x20000cd0
 80172d4:	20003cd0 	.word	0x20003cd0
 80172d8:	20003cd8 	.word	0x20003cd8
 80172dc:	20003ce0 	.word	0x20003ce0
 80172e0:	20003cdc 	.word	0x20003cdc
 80172e4:	20003cec 	.word	0x20003cec

080172e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80172e8:	b480      	push	{r7}
 80172ea:	b085      	sub	sp, #20
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80172f0:	4b28      	ldr	r3, [pc, #160]	; (8017394 <prvInsertBlockIntoFreeList+0xac>)
 80172f2:	60fb      	str	r3, [r7, #12]
 80172f4:	e002      	b.n	80172fc <prvInsertBlockIntoFreeList+0x14>
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	60fb      	str	r3, [r7, #12]
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	429a      	cmp	r2, r3
 8017304:	d8f7      	bhi.n	80172f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	68ba      	ldr	r2, [r7, #8]
 8017310:	4413      	add	r3, r2
 8017312:	687a      	ldr	r2, [r7, #4]
 8017314:	429a      	cmp	r2, r3
 8017316:	d108      	bne.n	801732a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	685a      	ldr	r2, [r3, #4]
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	441a      	add	r2, r3
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	68ba      	ldr	r2, [r7, #8]
 8017334:	441a      	add	r2, r3
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	429a      	cmp	r2, r3
 801733c:	d118      	bne.n	8017370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	4b15      	ldr	r3, [pc, #84]	; (8017398 <prvInsertBlockIntoFreeList+0xb0>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	429a      	cmp	r2, r3
 8017348:	d00d      	beq.n	8017366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	685a      	ldr	r2, [r3, #4]
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	441a      	add	r2, r3
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	601a      	str	r2, [r3, #0]
 8017364:	e008      	b.n	8017378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017366:	4b0c      	ldr	r3, [pc, #48]	; (8017398 <prvInsertBlockIntoFreeList+0xb0>)
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	601a      	str	r2, [r3, #0]
 801736e:	e003      	b.n	8017378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	681a      	ldr	r2, [r3, #0]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017378:	68fa      	ldr	r2, [r7, #12]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	429a      	cmp	r2, r3
 801737e:	d002      	beq.n	8017386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017386:	bf00      	nop
 8017388:	3714      	adds	r7, #20
 801738a:	46bd      	mov	sp, r7
 801738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017390:	4770      	bx	lr
 8017392:	bf00      	nop
 8017394:	20003cd0 	.word	0x20003cd0
 8017398:	20003cd8 	.word	0x20003cd8

0801739c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80173a0:	2200      	movs	r2, #0
 80173a2:	4912      	ldr	r1, [pc, #72]	; (80173ec <MX_USB_Device_Init+0x50>)
 80173a4:	4812      	ldr	r0, [pc, #72]	; (80173f0 <MX_USB_Device_Init+0x54>)
 80173a6:	f7fc fdbf 	bl	8013f28 <USBD_Init>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80173b0:	f7f0 f8a0 	bl	80074f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80173b4:	490f      	ldr	r1, [pc, #60]	; (80173f4 <MX_USB_Device_Init+0x58>)
 80173b6:	480e      	ldr	r0, [pc, #56]	; (80173f0 <MX_USB_Device_Init+0x54>)
 80173b8:	f7fc fde6 	bl	8013f88 <USBD_RegisterClass>
 80173bc:	4603      	mov	r3, r0
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d001      	beq.n	80173c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80173c2:	f7f0 f897 	bl	80074f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80173c6:	490c      	ldr	r1, [pc, #48]	; (80173f8 <MX_USB_Device_Init+0x5c>)
 80173c8:	4809      	ldr	r0, [pc, #36]	; (80173f0 <MX_USB_Device_Init+0x54>)
 80173ca:	f7fc fd37 	bl	8013e3c <USBD_CDC_RegisterInterface>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d001      	beq.n	80173d8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80173d4:	f7f0 f88e 	bl	80074f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80173d8:	4805      	ldr	r0, [pc, #20]	; (80173f0 <MX_USB_Device_Init+0x54>)
 80173da:	f7fc fdfc 	bl	8013fd6 <USBD_Start>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d001      	beq.n	80173e8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80173e4:	f7f0 f886 	bl	80074f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80173e8:	bf00      	nop
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	20000138 	.word	0x20000138
 80173f0:	20003cf0 	.word	0x20003cf0
 80173f4:	2000001c 	.word	0x2000001c
 80173f8:	20000124 	.word	0x20000124

080173fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017400:	2200      	movs	r2, #0
 8017402:	4905      	ldr	r1, [pc, #20]	; (8017418 <CDC_Init_FS+0x1c>)
 8017404:	4805      	ldr	r0, [pc, #20]	; (801741c <CDC_Init_FS+0x20>)
 8017406:	f7fc fd2e 	bl	8013e66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801740a:	4905      	ldr	r1, [pc, #20]	; (8017420 <CDC_Init_FS+0x24>)
 801740c:	4803      	ldr	r0, [pc, #12]	; (801741c <CDC_Init_FS+0x20>)
 801740e:	f7fc fd48 	bl	8013ea2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017414:	4618      	mov	r0, r3
 8017416:	bd80      	pop	{r7, pc}
 8017418:	200047c0 	.word	0x200047c0
 801741c:	20003cf0 	.word	0x20003cf0
 8017420:	20003fc0 	.word	0x20003fc0

08017424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017424:	b480      	push	{r7}
 8017426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801742a:	4618      	mov	r0, r3
 801742c:	46bd      	mov	sp, r7
 801742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017432:	4770      	bx	lr

08017434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017434:	b480      	push	{r7}
 8017436:	b083      	sub	sp, #12
 8017438:	af00      	add	r7, sp, #0
 801743a:	4603      	mov	r3, r0
 801743c:	6039      	str	r1, [r7, #0]
 801743e:	71fb      	strb	r3, [r7, #7]
 8017440:	4613      	mov	r3, r2
 8017442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017444:	79fb      	ldrb	r3, [r7, #7]
 8017446:	2b23      	cmp	r3, #35	; 0x23
 8017448:	d84a      	bhi.n	80174e0 <CDC_Control_FS+0xac>
 801744a:	a201      	add	r2, pc, #4	; (adr r2, 8017450 <CDC_Control_FS+0x1c>)
 801744c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017450:	080174e1 	.word	0x080174e1
 8017454:	080174e1 	.word	0x080174e1
 8017458:	080174e1 	.word	0x080174e1
 801745c:	080174e1 	.word	0x080174e1
 8017460:	080174e1 	.word	0x080174e1
 8017464:	080174e1 	.word	0x080174e1
 8017468:	080174e1 	.word	0x080174e1
 801746c:	080174e1 	.word	0x080174e1
 8017470:	080174e1 	.word	0x080174e1
 8017474:	080174e1 	.word	0x080174e1
 8017478:	080174e1 	.word	0x080174e1
 801747c:	080174e1 	.word	0x080174e1
 8017480:	080174e1 	.word	0x080174e1
 8017484:	080174e1 	.word	0x080174e1
 8017488:	080174e1 	.word	0x080174e1
 801748c:	080174e1 	.word	0x080174e1
 8017490:	080174e1 	.word	0x080174e1
 8017494:	080174e1 	.word	0x080174e1
 8017498:	080174e1 	.word	0x080174e1
 801749c:	080174e1 	.word	0x080174e1
 80174a0:	080174e1 	.word	0x080174e1
 80174a4:	080174e1 	.word	0x080174e1
 80174a8:	080174e1 	.word	0x080174e1
 80174ac:	080174e1 	.word	0x080174e1
 80174b0:	080174e1 	.word	0x080174e1
 80174b4:	080174e1 	.word	0x080174e1
 80174b8:	080174e1 	.word	0x080174e1
 80174bc:	080174e1 	.word	0x080174e1
 80174c0:	080174e1 	.word	0x080174e1
 80174c4:	080174e1 	.word	0x080174e1
 80174c8:	080174e1 	.word	0x080174e1
 80174cc:	080174e1 	.word	0x080174e1
 80174d0:	080174e1 	.word	0x080174e1
 80174d4:	080174e1 	.word	0x080174e1
 80174d8:	080174e1 	.word	0x080174e1
 80174dc:	080174e1 	.word	0x080174e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80174e0:	bf00      	nop
  }

  return (USBD_OK);
 80174e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	370c      	adds	r7, #12
 80174e8:	46bd      	mov	sp, r7
 80174ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ee:	4770      	bx	lr

080174f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
 80174f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	4805      	ldr	r0, [pc, #20]	; (8017514 <CDC_Receive_FS+0x24>)
 80174fe:	f7fc fcd0 	bl	8013ea2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017502:	4804      	ldr	r0, [pc, #16]	; (8017514 <CDC_Receive_FS+0x24>)
 8017504:	f7fc fce6 	bl	8013ed4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017508:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801750a:	4618      	mov	r0, r3
 801750c:	3708      	adds	r7, #8
 801750e:	46bd      	mov	sp, r7
 8017510:	bd80      	pop	{r7, pc}
 8017512:	bf00      	nop
 8017514:	20003cf0 	.word	0x20003cf0

08017518 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017518:	b480      	push	{r7}
 801751a:	b087      	sub	sp, #28
 801751c:	af00      	add	r7, sp, #0
 801751e:	60f8      	str	r0, [r7, #12]
 8017520:	60b9      	str	r1, [r7, #8]
 8017522:	4613      	mov	r3, r2
 8017524:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017526:	2300      	movs	r3, #0
 8017528:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801752a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801752e:	4618      	mov	r0, r3
 8017530:	371c      	adds	r7, #28
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr
	...

0801753c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801753c:	b480      	push	{r7}
 801753e:	b083      	sub	sp, #12
 8017540:	af00      	add	r7, sp, #0
 8017542:	4603      	mov	r3, r0
 8017544:	6039      	str	r1, [r7, #0]
 8017546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017548:	683b      	ldr	r3, [r7, #0]
 801754a:	2212      	movs	r2, #18
 801754c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801754e:	4b03      	ldr	r3, [pc, #12]	; (801755c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017550:	4618      	mov	r0, r3
 8017552:	370c      	adds	r7, #12
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr
 801755c:	20000158 	.word	0x20000158

08017560 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017560:	b480      	push	{r7}
 8017562:	b083      	sub	sp, #12
 8017564:	af00      	add	r7, sp, #0
 8017566:	4603      	mov	r3, r0
 8017568:	6039      	str	r1, [r7, #0]
 801756a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	2204      	movs	r2, #4
 8017570:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017572:	4b03      	ldr	r3, [pc, #12]	; (8017580 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017574:	4618      	mov	r0, r3
 8017576:	370c      	adds	r7, #12
 8017578:	46bd      	mov	sp, r7
 801757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757e:	4770      	bx	lr
 8017580:	2000016c 	.word	0x2000016c

08017584 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b082      	sub	sp, #8
 8017588:	af00      	add	r7, sp, #0
 801758a:	4603      	mov	r3, r0
 801758c:	6039      	str	r1, [r7, #0]
 801758e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017590:	79fb      	ldrb	r3, [r7, #7]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d105      	bne.n	80175a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017596:	683a      	ldr	r2, [r7, #0]
 8017598:	4907      	ldr	r1, [pc, #28]	; (80175b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 801759a:	4808      	ldr	r0, [pc, #32]	; (80175bc <USBD_CDC_ProductStrDescriptor+0x38>)
 801759c:	f7fd fd03 	bl	8014fa6 <USBD_GetString>
 80175a0:	e004      	b.n	80175ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80175a2:	683a      	ldr	r2, [r7, #0]
 80175a4:	4904      	ldr	r1, [pc, #16]	; (80175b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80175a6:	4805      	ldr	r0, [pc, #20]	; (80175bc <USBD_CDC_ProductStrDescriptor+0x38>)
 80175a8:	f7fd fcfd 	bl	8014fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80175ac:	4b02      	ldr	r3, [pc, #8]	; (80175b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	3708      	adds	r7, #8
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}
 80175b6:	bf00      	nop
 80175b8:	20004fc0 	.word	0x20004fc0
 80175bc:	08018fe4 	.word	0x08018fe4

080175c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	4603      	mov	r3, r0
 80175c8:	6039      	str	r1, [r7, #0]
 80175ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80175cc:	683a      	ldr	r2, [r7, #0]
 80175ce:	4904      	ldr	r1, [pc, #16]	; (80175e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80175d0:	4804      	ldr	r0, [pc, #16]	; (80175e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80175d2:	f7fd fce8 	bl	8014fa6 <USBD_GetString>
  return USBD_StrDesc;
 80175d6:	4b02      	ldr	r3, [pc, #8]	; (80175e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80175d8:	4618      	mov	r0, r3
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}
 80175e0:	20004fc0 	.word	0x20004fc0
 80175e4:	08018ffc 	.word	0x08018ffc

080175e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	4603      	mov	r3, r0
 80175f0:	6039      	str	r1, [r7, #0]
 80175f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	221a      	movs	r2, #26
 80175f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80175fa:	f000 f843 	bl	8017684 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80175fe:	4b02      	ldr	r3, [pc, #8]	; (8017608 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017600:	4618      	mov	r0, r3
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	20000170 	.word	0x20000170

0801760c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b082      	sub	sp, #8
 8017610:	af00      	add	r7, sp, #0
 8017612:	4603      	mov	r3, r0
 8017614:	6039      	str	r1, [r7, #0]
 8017616:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017618:	79fb      	ldrb	r3, [r7, #7]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d105      	bne.n	801762a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801761e:	683a      	ldr	r2, [r7, #0]
 8017620:	4907      	ldr	r1, [pc, #28]	; (8017640 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017622:	4808      	ldr	r0, [pc, #32]	; (8017644 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017624:	f7fd fcbf 	bl	8014fa6 <USBD_GetString>
 8017628:	e004      	b.n	8017634 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801762a:	683a      	ldr	r2, [r7, #0]
 801762c:	4904      	ldr	r1, [pc, #16]	; (8017640 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801762e:	4805      	ldr	r0, [pc, #20]	; (8017644 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017630:	f7fd fcb9 	bl	8014fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017634:	4b02      	ldr	r3, [pc, #8]	; (8017640 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017636:	4618      	mov	r0, r3
 8017638:	3708      	adds	r7, #8
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
 801763e:	bf00      	nop
 8017640:	20004fc0 	.word	0x20004fc0
 8017644:	08019010 	.word	0x08019010

08017648 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017648:	b580      	push	{r7, lr}
 801764a:	b082      	sub	sp, #8
 801764c:	af00      	add	r7, sp, #0
 801764e:	4603      	mov	r3, r0
 8017650:	6039      	str	r1, [r7, #0]
 8017652:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017654:	79fb      	ldrb	r3, [r7, #7]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d105      	bne.n	8017666 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801765a:	683a      	ldr	r2, [r7, #0]
 801765c:	4907      	ldr	r1, [pc, #28]	; (801767c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801765e:	4808      	ldr	r0, [pc, #32]	; (8017680 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017660:	f7fd fca1 	bl	8014fa6 <USBD_GetString>
 8017664:	e004      	b.n	8017670 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017666:	683a      	ldr	r2, [r7, #0]
 8017668:	4904      	ldr	r1, [pc, #16]	; (801767c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801766a:	4805      	ldr	r0, [pc, #20]	; (8017680 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801766c:	f7fd fc9b 	bl	8014fa6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017670:	4b02      	ldr	r3, [pc, #8]	; (801767c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8017672:	4618      	mov	r0, r3
 8017674:	3708      	adds	r7, #8
 8017676:	46bd      	mov	sp, r7
 8017678:	bd80      	pop	{r7, pc}
 801767a:	bf00      	nop
 801767c:	20004fc0 	.word	0x20004fc0
 8017680:	0801901c 	.word	0x0801901c

08017684 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801768a:	4b0f      	ldr	r3, [pc, #60]	; (80176c8 <Get_SerialNum+0x44>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017690:	4b0e      	ldr	r3, [pc, #56]	; (80176cc <Get_SerialNum+0x48>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017696:	4b0e      	ldr	r3, [pc, #56]	; (80176d0 <Get_SerialNum+0x4c>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801769c:	68fa      	ldr	r2, [r7, #12]
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	4413      	add	r3, r2
 80176a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d009      	beq.n	80176be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80176aa:	2208      	movs	r2, #8
 80176ac:	4909      	ldr	r1, [pc, #36]	; (80176d4 <Get_SerialNum+0x50>)
 80176ae:	68f8      	ldr	r0, [r7, #12]
 80176b0:	f000 f814 	bl	80176dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80176b4:	2204      	movs	r2, #4
 80176b6:	4908      	ldr	r1, [pc, #32]	; (80176d8 <Get_SerialNum+0x54>)
 80176b8:	68b8      	ldr	r0, [r7, #8]
 80176ba:	f000 f80f 	bl	80176dc <IntToUnicode>
  }
}
 80176be:	bf00      	nop
 80176c0:	3710      	adds	r7, #16
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	1fff7590 	.word	0x1fff7590
 80176cc:	1fff7594 	.word	0x1fff7594
 80176d0:	1fff7598 	.word	0x1fff7598
 80176d4:	20000172 	.word	0x20000172
 80176d8:	20000182 	.word	0x20000182

080176dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80176dc:	b480      	push	{r7}
 80176de:	b087      	sub	sp, #28
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	60f8      	str	r0, [r7, #12]
 80176e4:	60b9      	str	r1, [r7, #8]
 80176e6:	4613      	mov	r3, r2
 80176e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80176ea:	2300      	movs	r3, #0
 80176ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80176ee:	2300      	movs	r3, #0
 80176f0:	75fb      	strb	r3, [r7, #23]
 80176f2:	e027      	b.n	8017744 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	0f1b      	lsrs	r3, r3, #28
 80176f8:	2b09      	cmp	r3, #9
 80176fa:	d80b      	bhi.n	8017714 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	0f1b      	lsrs	r3, r3, #28
 8017700:	b2da      	uxtb	r2, r3
 8017702:	7dfb      	ldrb	r3, [r7, #23]
 8017704:	005b      	lsls	r3, r3, #1
 8017706:	4619      	mov	r1, r3
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	440b      	add	r3, r1
 801770c:	3230      	adds	r2, #48	; 0x30
 801770e:	b2d2      	uxtb	r2, r2
 8017710:	701a      	strb	r2, [r3, #0]
 8017712:	e00a      	b.n	801772a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	0f1b      	lsrs	r3, r3, #28
 8017718:	b2da      	uxtb	r2, r3
 801771a:	7dfb      	ldrb	r3, [r7, #23]
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	4619      	mov	r1, r3
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	440b      	add	r3, r1
 8017724:	3237      	adds	r2, #55	; 0x37
 8017726:	b2d2      	uxtb	r2, r2
 8017728:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	011b      	lsls	r3, r3, #4
 801772e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017730:	7dfb      	ldrb	r3, [r7, #23]
 8017732:	005b      	lsls	r3, r3, #1
 8017734:	3301      	adds	r3, #1
 8017736:	68ba      	ldr	r2, [r7, #8]
 8017738:	4413      	add	r3, r2
 801773a:	2200      	movs	r2, #0
 801773c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801773e:	7dfb      	ldrb	r3, [r7, #23]
 8017740:	3301      	adds	r3, #1
 8017742:	75fb      	strb	r3, [r7, #23]
 8017744:	7dfa      	ldrb	r2, [r7, #23]
 8017746:	79fb      	ldrb	r3, [r7, #7]
 8017748:	429a      	cmp	r2, r3
 801774a:	d3d3      	bcc.n	80176f4 <IntToUnicode+0x18>
  }
}
 801774c:	bf00      	nop
 801774e:	bf00      	nop
 8017750:	371c      	adds	r7, #28
 8017752:	46bd      	mov	sp, r7
 8017754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017758:	4770      	bx	lr
	...

0801775c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801775c:	b580      	push	{r7, lr}
 801775e:	b098      	sub	sp, #96	; 0x60
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017764:	f107 030c 	add.w	r3, r7, #12
 8017768:	2254      	movs	r2, #84	; 0x54
 801776a:	2100      	movs	r1, #0
 801776c:	4618      	mov	r0, r3
 801776e:	f000 fb19 	bl	8017da4 <memset>
  if(pcdHandle->Instance==USB)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4a15      	ldr	r2, [pc, #84]	; (80177cc <HAL_PCD_MspInit+0x70>)
 8017778:	4293      	cmp	r3, r2
 801777a:	d122      	bne.n	80177c2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801777c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017780:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017782:	2300      	movs	r3, #0
 8017784:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017786:	f107 030c 	add.w	r3, r7, #12
 801778a:	4618      	mov	r0, r3
 801778c:	f7f5 ffe4 	bl	800d758 <HAL_RCCEx_PeriphCLKConfig>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	d001      	beq.n	801779a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8017796:	f7ef fead 	bl	80074f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801779a:	4b0d      	ldr	r3, [pc, #52]	; (80177d0 <HAL_PCD_MspInit+0x74>)
 801779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801779e:	4a0c      	ldr	r2, [pc, #48]	; (80177d0 <HAL_PCD_MspInit+0x74>)
 80177a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80177a4:	6593      	str	r3, [r2, #88]	; 0x58
 80177a6:	4b0a      	ldr	r3, [pc, #40]	; (80177d0 <HAL_PCD_MspInit+0x74>)
 80177a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80177aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80177ae:	60bb      	str	r3, [r7, #8]
 80177b0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 80177b2:	2200      	movs	r2, #0
 80177b4:	2105      	movs	r1, #5
 80177b6:	2014      	movs	r0, #20
 80177b8:	f7f2 f966 	bl	8009a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80177bc:	2014      	movs	r0, #20
 80177be:	f7f2 f97d 	bl	8009abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80177c2:	bf00      	nop
 80177c4:	3760      	adds	r7, #96	; 0x60
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}
 80177ca:	bf00      	nop
 80177cc:	40005c00 	.word	0x40005c00
 80177d0:	40021000 	.word	0x40021000

080177d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80177e8:	4619      	mov	r1, r3
 80177ea:	4610      	mov	r0, r2
 80177ec:	f7fc fc3e 	bl	801406c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80177f0:	bf00      	nop
 80177f2:	3708      	adds	r7, #8
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}

080177f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177f8:	b580      	push	{r7, lr}
 80177fa:	b082      	sub	sp, #8
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
 8017800:	460b      	mov	r3, r1
 8017802:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801780a:	78fa      	ldrb	r2, [r7, #3]
 801780c:	6879      	ldr	r1, [r7, #4]
 801780e:	4613      	mov	r3, r2
 8017810:	009b      	lsls	r3, r3, #2
 8017812:	4413      	add	r3, r2
 8017814:	00db      	lsls	r3, r3, #3
 8017816:	440b      	add	r3, r1
 8017818:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	78fb      	ldrb	r3, [r7, #3]
 8017820:	4619      	mov	r1, r3
 8017822:	f7fc fc78 	bl	8014116 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8017826:	bf00      	nop
 8017828:	3708      	adds	r7, #8
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}

0801782e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801782e:	b580      	push	{r7, lr}
 8017830:	b082      	sub	sp, #8
 8017832:	af00      	add	r7, sp, #0
 8017834:	6078      	str	r0, [r7, #4]
 8017836:	460b      	mov	r3, r1
 8017838:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017840:	78fa      	ldrb	r2, [r7, #3]
 8017842:	6879      	ldr	r1, [r7, #4]
 8017844:	4613      	mov	r3, r2
 8017846:	009b      	lsls	r3, r3, #2
 8017848:	4413      	add	r3, r2
 801784a:	00db      	lsls	r3, r3, #3
 801784c:	440b      	add	r3, r1
 801784e:	333c      	adds	r3, #60	; 0x3c
 8017850:	681a      	ldr	r2, [r3, #0]
 8017852:	78fb      	ldrb	r3, [r7, #3]
 8017854:	4619      	mov	r1, r3
 8017856:	f7fc fcc1 	bl	80141dc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801785a:	bf00      	nop
 801785c:	3708      	adds	r7, #8
 801785e:	46bd      	mov	sp, r7
 8017860:	bd80      	pop	{r7, pc}

08017862 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017862:	b580      	push	{r7, lr}
 8017864:	b082      	sub	sp, #8
 8017866:	af00      	add	r7, sp, #0
 8017868:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017870:	4618      	mov	r0, r3
 8017872:	f7fc fdd5 	bl	8014420 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8017876:	bf00      	nop
 8017878:	3708      	adds	r7, #8
 801787a:	46bd      	mov	sp, r7
 801787c:	bd80      	pop	{r7, pc}

0801787e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801787e:	b580      	push	{r7, lr}
 8017880:	b084      	sub	sp, #16
 8017882:	af00      	add	r7, sp, #0
 8017884:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017886:	2301      	movs	r3, #1
 8017888:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	689b      	ldr	r3, [r3, #8]
 801788e:	2b02      	cmp	r3, #2
 8017890:	d001      	beq.n	8017896 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8017892:	f7ef fe2f 	bl	80074f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801789c:	7bfa      	ldrb	r2, [r7, #15]
 801789e:	4611      	mov	r1, r2
 80178a0:	4618      	mov	r0, r3
 80178a2:	f7fc fd7f 	bl	80143a4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80178ac:	4618      	mov	r0, r3
 80178ae:	f7fc fd2b 	bl	8014308 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80178b2:	bf00      	nop
 80178b4:	3710      	adds	r7, #16
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
	...

080178bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
 80178c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7fc fd7a 	bl	80143c4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	699b      	ldr	r3, [r3, #24]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d005      	beq.n	80178e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80178d8:	4b04      	ldr	r3, [pc, #16]	; (80178ec <HAL_PCD_SuspendCallback+0x30>)
 80178da:	691b      	ldr	r3, [r3, #16]
 80178dc:	4a03      	ldr	r2, [pc, #12]	; (80178ec <HAL_PCD_SuspendCallback+0x30>)
 80178de:	f043 0306 	orr.w	r3, r3, #6
 80178e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80178e4:	bf00      	nop
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}
 80178ec:	e000ed00 	.word	0xe000ed00

080178f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178f0:	b580      	push	{r7, lr}
 80178f2:	b082      	sub	sp, #8
 80178f4:	af00      	add	r7, sp, #0
 80178f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	699b      	ldr	r3, [r3, #24]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d007      	beq.n	8017910 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017900:	4b08      	ldr	r3, [pc, #32]	; (8017924 <HAL_PCD_ResumeCallback+0x34>)
 8017902:	691b      	ldr	r3, [r3, #16]
 8017904:	4a07      	ldr	r2, [pc, #28]	; (8017924 <HAL_PCD_ResumeCallback+0x34>)
 8017906:	f023 0306 	bic.w	r3, r3, #6
 801790a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801790c:	f000 f9fa 	bl	8017d04 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017916:	4618      	mov	r0, r3
 8017918:	f7fc fd6a 	bl	80143f0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801791c:	bf00      	nop
 801791e:	3708      	adds	r7, #8
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}
 8017924:	e000ed00 	.word	0xe000ed00

08017928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8017930:	4a2b      	ldr	r2, [pc, #172]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	4a29      	ldr	r2, [pc, #164]	; (80179e0 <USBD_LL_Init+0xb8>)
 801793c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8017940:	4b27      	ldr	r3, [pc, #156]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017942:	4a28      	ldr	r2, [pc, #160]	; (80179e4 <USBD_LL_Init+0xbc>)
 8017944:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017946:	4b26      	ldr	r3, [pc, #152]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017948:	2208      	movs	r2, #8
 801794a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801794c:	4b24      	ldr	r3, [pc, #144]	; (80179e0 <USBD_LL_Init+0xb8>)
 801794e:	2202      	movs	r2, #2
 8017950:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017952:	4b23      	ldr	r3, [pc, #140]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017954:	2202      	movs	r2, #2
 8017956:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017958:	4b21      	ldr	r3, [pc, #132]	; (80179e0 <USBD_LL_Init+0xb8>)
 801795a:	2200      	movs	r2, #0
 801795c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801795e:	4b20      	ldr	r3, [pc, #128]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017960:	2200      	movs	r2, #0
 8017962:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017964:	4b1e      	ldr	r3, [pc, #120]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017966:	2200      	movs	r2, #0
 8017968:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801796a:	4b1d      	ldr	r3, [pc, #116]	; (80179e0 <USBD_LL_Init+0xb8>)
 801796c:	2200      	movs	r2, #0
 801796e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017970:	481b      	ldr	r0, [pc, #108]	; (80179e0 <USBD_LL_Init+0xb8>)
 8017972:	f7f3 fbb4 	bl	800b0de <HAL_PCD_Init>
 8017976:	4603      	mov	r3, r0
 8017978:	2b00      	cmp	r3, #0
 801797a:	d001      	beq.n	8017980 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801797c:	f7ef fdba 	bl	80074f4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017986:	2318      	movs	r3, #24
 8017988:	2200      	movs	r2, #0
 801798a:	2100      	movs	r1, #0
 801798c:	f7f5 f86d 	bl	800ca6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017996:	2358      	movs	r3, #88	; 0x58
 8017998:	2200      	movs	r2, #0
 801799a:	2180      	movs	r1, #128	; 0x80
 801799c:	f7f5 f865 	bl	800ca6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179a6:	23c0      	movs	r3, #192	; 0xc0
 80179a8:	2200      	movs	r2, #0
 80179aa:	2181      	movs	r1, #129	; 0x81
 80179ac:	f7f5 f85d 	bl	800ca6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80179ba:	2200      	movs	r2, #0
 80179bc:	2101      	movs	r1, #1
 80179be:	f7f5 f854 	bl	800ca6a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80179cc:	2200      	movs	r2, #0
 80179ce:	2182      	movs	r1, #130	; 0x82
 80179d0:	f7f5 f84b 	bl	800ca6a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80179d4:	2300      	movs	r3, #0
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	3708      	adds	r7, #8
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd80      	pop	{r7, pc}
 80179de:	bf00      	nop
 80179e0:	200051c0 	.word	0x200051c0
 80179e4:	40005c00 	.word	0x40005c00

080179e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b084      	sub	sp, #16
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179f0:	2300      	movs	r3, #0
 80179f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179f4:	2300      	movs	r3, #0
 80179f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179fe:	4618      	mov	r0, r3
 8017a00:	f7f3 fc52 	bl	800b2a8 <HAL_PCD_Start>
 8017a04:	4603      	mov	r3, r0
 8017a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a08:	7bfb      	ldrb	r3, [r7, #15]
 8017a0a:	4618      	mov	r0, r3
 8017a0c:	f000 f980 	bl	8017d10 <USBD_Get_USB_Status>
 8017a10:	4603      	mov	r3, r0
 8017a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a16:	4618      	mov	r0, r3
 8017a18:	3710      	adds	r7, #16
 8017a1a:	46bd      	mov	sp, r7
 8017a1c:	bd80      	pop	{r7, pc}

08017a1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017a1e:	b580      	push	{r7, lr}
 8017a20:	b084      	sub	sp, #16
 8017a22:	af00      	add	r7, sp, #0
 8017a24:	6078      	str	r0, [r7, #4]
 8017a26:	4608      	mov	r0, r1
 8017a28:	4611      	mov	r1, r2
 8017a2a:	461a      	mov	r2, r3
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	70fb      	strb	r3, [r7, #3]
 8017a30:	460b      	mov	r3, r1
 8017a32:	70bb      	strb	r3, [r7, #2]
 8017a34:	4613      	mov	r3, r2
 8017a36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a38:	2300      	movs	r3, #0
 8017a3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a3c:	2300      	movs	r3, #0
 8017a3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a46:	78bb      	ldrb	r3, [r7, #2]
 8017a48:	883a      	ldrh	r2, [r7, #0]
 8017a4a:	78f9      	ldrb	r1, [r7, #3]
 8017a4c:	f7f3 fd9a 	bl	800b584 <HAL_PCD_EP_Open>
 8017a50:	4603      	mov	r3, r0
 8017a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a54:	7bfb      	ldrb	r3, [r7, #15]
 8017a56:	4618      	mov	r0, r3
 8017a58:	f000 f95a 	bl	8017d10 <USBD_Get_USB_Status>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a62:	4618      	mov	r0, r3
 8017a64:	3710      	adds	r7, #16
 8017a66:	46bd      	mov	sp, r7
 8017a68:	bd80      	pop	{r7, pc}

08017a6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a6a:	b580      	push	{r7, lr}
 8017a6c:	b084      	sub	sp, #16
 8017a6e:	af00      	add	r7, sp, #0
 8017a70:	6078      	str	r0, [r7, #4]
 8017a72:	460b      	mov	r3, r1
 8017a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a76:	2300      	movs	r3, #0
 8017a78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a84:	78fa      	ldrb	r2, [r7, #3]
 8017a86:	4611      	mov	r1, r2
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f3 fde1 	bl	800b650 <HAL_PCD_EP_Close>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a92:	7bfb      	ldrb	r3, [r7, #15]
 8017a94:	4618      	mov	r0, r3
 8017a96:	f000 f93b 	bl	8017d10 <USBD_Get_USB_Status>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3710      	adds	r7, #16
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	bd80      	pop	{r7, pc}

08017aa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
 8017ab0:	460b      	mov	r3, r1
 8017ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ac2:	78fa      	ldrb	r2, [r7, #3]
 8017ac4:	4611      	mov	r1, r2
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7f3 fea2 	bl	800b810 <HAL_PCD_EP_SetStall>
 8017acc:	4603      	mov	r3, r0
 8017ace:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ad0:	7bfb      	ldrb	r3, [r7, #15]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f000 f91c 	bl	8017d10 <USBD_Get_USB_Status>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017adc:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3710      	adds	r7, #16
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}

08017ae6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ae6:	b580      	push	{r7, lr}
 8017ae8:	b084      	sub	sp, #16
 8017aea:	af00      	add	r7, sp, #0
 8017aec:	6078      	str	r0, [r7, #4]
 8017aee:	460b      	mov	r3, r1
 8017af0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017af2:	2300      	movs	r3, #0
 8017af4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017af6:	2300      	movs	r3, #0
 8017af8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b00:	78fa      	ldrb	r2, [r7, #3]
 8017b02:	4611      	mov	r1, r2
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7f3 fed5 	bl	800b8b4 <HAL_PCD_EP_ClrStall>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b0e:	7bfb      	ldrb	r3, [r7, #15]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f000 f8fd 	bl	8017d10 <USBD_Get_USB_Status>
 8017b16:	4603      	mov	r3, r0
 8017b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3710      	adds	r7, #16
 8017b20:	46bd      	mov	sp, r7
 8017b22:	bd80      	pop	{r7, pc}

08017b24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017b24:	b480      	push	{r7}
 8017b26:	b085      	sub	sp, #20
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	da0c      	bge.n	8017b5a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017b40:	78fb      	ldrb	r3, [r7, #3]
 8017b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b46:	68f9      	ldr	r1, [r7, #12]
 8017b48:	1c5a      	adds	r2, r3, #1
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	009b      	lsls	r3, r3, #2
 8017b4e:	4413      	add	r3, r2
 8017b50:	00db      	lsls	r3, r3, #3
 8017b52:	440b      	add	r3, r1
 8017b54:	3302      	adds	r3, #2
 8017b56:	781b      	ldrb	r3, [r3, #0]
 8017b58:	e00b      	b.n	8017b72 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017b5a:	78fb      	ldrb	r3, [r7, #3]
 8017b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b60:	68f9      	ldr	r1, [r7, #12]
 8017b62:	4613      	mov	r3, r2
 8017b64:	009b      	lsls	r3, r3, #2
 8017b66:	4413      	add	r3, r2
 8017b68:	00db      	lsls	r3, r3, #3
 8017b6a:	440b      	add	r3, r1
 8017b6c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8017b70:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	3714      	adds	r7, #20
 8017b76:	46bd      	mov	sp, r7
 8017b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7c:	4770      	bx	lr

08017b7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017b7e:	b580      	push	{r7, lr}
 8017b80:	b084      	sub	sp, #16
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	6078      	str	r0, [r7, #4]
 8017b86:	460b      	mov	r3, r1
 8017b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b98:	78fa      	ldrb	r2, [r7, #3]
 8017b9a:	4611      	mov	r1, r2
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7f3 fccc 	bl	800b53a <HAL_PCD_SetAddress>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ba6:	7bfb      	ldrb	r3, [r7, #15]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f000 f8b1 	bl	8017d10 <USBD_Get_USB_Status>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	3710      	adds	r7, #16
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b086      	sub	sp, #24
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	60f8      	str	r0, [r7, #12]
 8017bc4:	607a      	str	r2, [r7, #4]
 8017bc6:	603b      	str	r3, [r7, #0]
 8017bc8:	460b      	mov	r3, r1
 8017bca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bda:	7af9      	ldrb	r1, [r7, #11]
 8017bdc:	683b      	ldr	r3, [r7, #0]
 8017bde:	687a      	ldr	r2, [r7, #4]
 8017be0:	f7f3 fdd3 	bl	800b78a <HAL_PCD_EP_Transmit>
 8017be4:	4603      	mov	r3, r0
 8017be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017be8:	7dfb      	ldrb	r3, [r7, #23]
 8017bea:	4618      	mov	r0, r3
 8017bec:	f000 f890 	bl	8017d10 <USBD_Get_USB_Status>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	3718      	adds	r7, #24
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}

08017bfe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017bfe:	b580      	push	{r7, lr}
 8017c00:	b086      	sub	sp, #24
 8017c02:	af00      	add	r7, sp, #0
 8017c04:	60f8      	str	r0, [r7, #12]
 8017c06:	607a      	str	r2, [r7, #4]
 8017c08:	603b      	str	r3, [r7, #0]
 8017c0a:	460b      	mov	r3, r1
 8017c0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c12:	2300      	movs	r3, #0
 8017c14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017c16:	68fb      	ldr	r3, [r7, #12]
 8017c18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c1c:	7af9      	ldrb	r1, [r7, #11]
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	f7f3 fd5d 	bl	800b6e0 <HAL_PCD_EP_Receive>
 8017c26:	4603      	mov	r3, r0
 8017c28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017c2a:	7dfb      	ldrb	r3, [r7, #23]
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f000 f86f 	bl	8017d10 <USBD_Get_USB_Status>
 8017c32:	4603      	mov	r3, r0
 8017c34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017c36:	7dbb      	ldrb	r3, [r7, #22]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3718      	adds	r7, #24
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}

08017c40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	460b      	mov	r3, r1
 8017c4a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c52:	78fa      	ldrb	r2, [r7, #3]
 8017c54:	4611      	mov	r1, r2
 8017c56:	4618      	mov	r0, r3
 8017c58:	f7f3 fd7f 	bl	800b75a <HAL_PCD_EP_GetRxCount>
 8017c5c:	4603      	mov	r3, r0
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3708      	adds	r7, #8
 8017c62:	46bd      	mov	sp, r7
 8017c64:	bd80      	pop	{r7, pc}
	...

08017c68 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	460b      	mov	r3, r1
 8017c72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8017c74:	78fb      	ldrb	r3, [r7, #3]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d002      	beq.n	8017c80 <HAL_PCDEx_LPM_Callback+0x18>
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d013      	beq.n	8017ca6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8017c7e:	e023      	b.n	8017cc8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	699b      	ldr	r3, [r3, #24]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d007      	beq.n	8017c98 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017c88:	f000 f83c 	bl	8017d04 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c8c:	4b10      	ldr	r3, [pc, #64]	; (8017cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017c8e:	691b      	ldr	r3, [r3, #16]
 8017c90:	4a0f      	ldr	r2, [pc, #60]	; (8017cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017c92:	f023 0306 	bic.w	r3, r3, #6
 8017c96:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7fc fba6 	bl	80143f0 <USBD_LL_Resume>
    break;
 8017ca4:	e010      	b.n	8017cc8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7fc fb89 	bl	80143c4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	699b      	ldr	r3, [r3, #24]
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	d005      	beq.n	8017cc6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017cba:	4b05      	ldr	r3, [pc, #20]	; (8017cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017cbc:	691b      	ldr	r3, [r3, #16]
 8017cbe:	4a04      	ldr	r2, [pc, #16]	; (8017cd0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017cc0:	f043 0306 	orr.w	r3, r3, #6
 8017cc4:	6113      	str	r3, [r2, #16]
    break;
 8017cc6:	bf00      	nop
}
 8017cc8:	bf00      	nop
 8017cca:	3708      	adds	r7, #8
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}
 8017cd0:	e000ed00 	.word	0xe000ed00

08017cd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017cdc:	4b03      	ldr	r3, [pc, #12]	; (8017cec <USBD_static_malloc+0x18>)
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	370c      	adds	r7, #12
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce8:	4770      	bx	lr
 8017cea:	bf00      	nop
 8017cec:	200054b4 	.word	0x200054b4

08017cf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017cf0:	b480      	push	{r7}
 8017cf2:	b083      	sub	sp, #12
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]

}
 8017cf8:	bf00      	nop
 8017cfa:	370c      	adds	r7, #12
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr

08017d04 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017d08:	f7ef fb94 	bl	8007434 <SystemClock_Config>
}
 8017d0c:	bf00      	nop
 8017d0e:	bd80      	pop	{r7, pc}

08017d10 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017d10:	b480      	push	{r7}
 8017d12:	b085      	sub	sp, #20
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	4603      	mov	r3, r0
 8017d18:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017d1e:	79fb      	ldrb	r3, [r7, #7]
 8017d20:	2b03      	cmp	r3, #3
 8017d22:	d817      	bhi.n	8017d54 <USBD_Get_USB_Status+0x44>
 8017d24:	a201      	add	r2, pc, #4	; (adr r2, 8017d2c <USBD_Get_USB_Status+0x1c>)
 8017d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d2a:	bf00      	nop
 8017d2c:	08017d3d 	.word	0x08017d3d
 8017d30:	08017d43 	.word	0x08017d43
 8017d34:	08017d49 	.word	0x08017d49
 8017d38:	08017d4f 	.word	0x08017d4f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017d40:	e00b      	b.n	8017d5a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017d42:	2303      	movs	r3, #3
 8017d44:	73fb      	strb	r3, [r7, #15]
    break;
 8017d46:	e008      	b.n	8017d5a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017d48:	2301      	movs	r3, #1
 8017d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8017d4c:	e005      	b.n	8017d5a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017d4e:	2303      	movs	r3, #3
 8017d50:	73fb      	strb	r3, [r7, #15]
    break;
 8017d52:	e002      	b.n	8017d5a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017d54:	2303      	movs	r3, #3
 8017d56:	73fb      	strb	r3, [r7, #15]
    break;
 8017d58:	bf00      	nop
  }
  return usb_status;
 8017d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3714      	adds	r7, #20
 8017d60:	46bd      	mov	sp, r7
 8017d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d66:	4770      	bx	lr

08017d68 <arm_pid_init_f32>:
 8017d68:	edd0 6a08 	vldr	s13, [r0, #32]
 8017d6c:	edd0 7a06 	vldr	s15, [r0, #24]
 8017d70:	ed90 7a07 	vldr	s14, [r0, #28]
 8017d74:	edc0 6a02 	vstr	s13, [r0, #8]
 8017d78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017d7c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8017d80:	eef1 7a67 	vneg.f32	s15, s15
 8017d84:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017d88:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8017d8c:	ed80 7a00 	vstr	s14, [r0]
 8017d90:	edc0 7a01 	vstr	s15, [r0, #4]
 8017d94:	b901      	cbnz	r1, 8017d98 <arm_pid_init_f32+0x30>
 8017d96:	4770      	bx	lr
 8017d98:	2300      	movs	r3, #0
 8017d9a:	60c3      	str	r3, [r0, #12]
 8017d9c:	6103      	str	r3, [r0, #16]
 8017d9e:	6143      	str	r3, [r0, #20]
 8017da0:	4770      	bx	lr
 8017da2:	bf00      	nop

08017da4 <memset>:
 8017da4:	4402      	add	r2, r0
 8017da6:	4603      	mov	r3, r0
 8017da8:	4293      	cmp	r3, r2
 8017daa:	d100      	bne.n	8017dae <memset+0xa>
 8017dac:	4770      	bx	lr
 8017dae:	f803 1b01 	strb.w	r1, [r3], #1
 8017db2:	e7f9      	b.n	8017da8 <memset+0x4>

08017db4 <_reclaim_reent>:
 8017db4:	4b29      	ldr	r3, [pc, #164]	; (8017e5c <_reclaim_reent+0xa8>)
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	4283      	cmp	r3, r0
 8017dba:	b570      	push	{r4, r5, r6, lr}
 8017dbc:	4604      	mov	r4, r0
 8017dbe:	d04b      	beq.n	8017e58 <_reclaim_reent+0xa4>
 8017dc0:	69c3      	ldr	r3, [r0, #28]
 8017dc2:	b143      	cbz	r3, 8017dd6 <_reclaim_reent+0x22>
 8017dc4:	68db      	ldr	r3, [r3, #12]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d144      	bne.n	8017e54 <_reclaim_reent+0xa0>
 8017dca:	69e3      	ldr	r3, [r4, #28]
 8017dcc:	6819      	ldr	r1, [r3, #0]
 8017dce:	b111      	cbz	r1, 8017dd6 <_reclaim_reent+0x22>
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f000 f87f 	bl	8017ed4 <_free_r>
 8017dd6:	6961      	ldr	r1, [r4, #20]
 8017dd8:	b111      	cbz	r1, 8017de0 <_reclaim_reent+0x2c>
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 f87a 	bl	8017ed4 <_free_r>
 8017de0:	69e1      	ldr	r1, [r4, #28]
 8017de2:	b111      	cbz	r1, 8017dea <_reclaim_reent+0x36>
 8017de4:	4620      	mov	r0, r4
 8017de6:	f000 f875 	bl	8017ed4 <_free_r>
 8017dea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017dec:	b111      	cbz	r1, 8017df4 <_reclaim_reent+0x40>
 8017dee:	4620      	mov	r0, r4
 8017df0:	f000 f870 	bl	8017ed4 <_free_r>
 8017df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017df6:	b111      	cbz	r1, 8017dfe <_reclaim_reent+0x4a>
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f000 f86b 	bl	8017ed4 <_free_r>
 8017dfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e00:	b111      	cbz	r1, 8017e08 <_reclaim_reent+0x54>
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 f866 	bl	8017ed4 <_free_r>
 8017e08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e0a:	b111      	cbz	r1, 8017e12 <_reclaim_reent+0x5e>
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	f000 f861 	bl	8017ed4 <_free_r>
 8017e12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017e14:	b111      	cbz	r1, 8017e1c <_reclaim_reent+0x68>
 8017e16:	4620      	mov	r0, r4
 8017e18:	f000 f85c 	bl	8017ed4 <_free_r>
 8017e1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017e1e:	b111      	cbz	r1, 8017e26 <_reclaim_reent+0x72>
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 f857 	bl	8017ed4 <_free_r>
 8017e26:	6a23      	ldr	r3, [r4, #32]
 8017e28:	b1b3      	cbz	r3, 8017e58 <_reclaim_reent+0xa4>
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e30:	4718      	bx	r3
 8017e32:	5949      	ldr	r1, [r1, r5]
 8017e34:	b941      	cbnz	r1, 8017e48 <_reclaim_reent+0x94>
 8017e36:	3504      	adds	r5, #4
 8017e38:	69e3      	ldr	r3, [r4, #28]
 8017e3a:	2d80      	cmp	r5, #128	; 0x80
 8017e3c:	68d9      	ldr	r1, [r3, #12]
 8017e3e:	d1f8      	bne.n	8017e32 <_reclaim_reent+0x7e>
 8017e40:	4620      	mov	r0, r4
 8017e42:	f000 f847 	bl	8017ed4 <_free_r>
 8017e46:	e7c0      	b.n	8017dca <_reclaim_reent+0x16>
 8017e48:	680e      	ldr	r6, [r1, #0]
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	f000 f842 	bl	8017ed4 <_free_r>
 8017e50:	4631      	mov	r1, r6
 8017e52:	e7ef      	b.n	8017e34 <_reclaim_reent+0x80>
 8017e54:	2500      	movs	r5, #0
 8017e56:	e7ef      	b.n	8017e38 <_reclaim_reent+0x84>
 8017e58:	bd70      	pop	{r4, r5, r6, pc}
 8017e5a:	bf00      	nop
 8017e5c:	200001d8 	.word	0x200001d8

08017e60 <__errno>:
 8017e60:	4b01      	ldr	r3, [pc, #4]	; (8017e68 <__errno+0x8>)
 8017e62:	6818      	ldr	r0, [r3, #0]
 8017e64:	4770      	bx	lr
 8017e66:	bf00      	nop
 8017e68:	200001d8 	.word	0x200001d8

08017e6c <__libc_init_array>:
 8017e6c:	b570      	push	{r4, r5, r6, lr}
 8017e6e:	4d0d      	ldr	r5, [pc, #52]	; (8017ea4 <__libc_init_array+0x38>)
 8017e70:	4c0d      	ldr	r4, [pc, #52]	; (8017ea8 <__libc_init_array+0x3c>)
 8017e72:	1b64      	subs	r4, r4, r5
 8017e74:	10a4      	asrs	r4, r4, #2
 8017e76:	2600      	movs	r6, #0
 8017e78:	42a6      	cmp	r6, r4
 8017e7a:	d109      	bne.n	8017e90 <__libc_init_array+0x24>
 8017e7c:	4d0b      	ldr	r5, [pc, #44]	; (8017eac <__libc_init_array+0x40>)
 8017e7e:	4c0c      	ldr	r4, [pc, #48]	; (8017eb0 <__libc_init_array+0x44>)
 8017e80:	f000 ffba 	bl	8018df8 <_init>
 8017e84:	1b64      	subs	r4, r4, r5
 8017e86:	10a4      	asrs	r4, r4, #2
 8017e88:	2600      	movs	r6, #0
 8017e8a:	42a6      	cmp	r6, r4
 8017e8c:	d105      	bne.n	8017e9a <__libc_init_array+0x2e>
 8017e8e:	bd70      	pop	{r4, r5, r6, pc}
 8017e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e94:	4798      	blx	r3
 8017e96:	3601      	adds	r6, #1
 8017e98:	e7ee      	b.n	8017e78 <__libc_init_array+0xc>
 8017e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e9e:	4798      	blx	r3
 8017ea0:	3601      	adds	r6, #1
 8017ea2:	e7f2      	b.n	8017e8a <__libc_init_array+0x1e>
 8017ea4:	080190a8 	.word	0x080190a8
 8017ea8:	080190a8 	.word	0x080190a8
 8017eac:	080190a8 	.word	0x080190a8
 8017eb0:	080190ac 	.word	0x080190ac

08017eb4 <__retarget_lock_acquire_recursive>:
 8017eb4:	4770      	bx	lr

08017eb6 <__retarget_lock_release_recursive>:
 8017eb6:	4770      	bx	lr

08017eb8 <memcpy>:
 8017eb8:	440a      	add	r2, r1
 8017eba:	4291      	cmp	r1, r2
 8017ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8017ec0:	d100      	bne.n	8017ec4 <memcpy+0xc>
 8017ec2:	4770      	bx	lr
 8017ec4:	b510      	push	{r4, lr}
 8017ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ece:	4291      	cmp	r1, r2
 8017ed0:	d1f9      	bne.n	8017ec6 <memcpy+0xe>
 8017ed2:	bd10      	pop	{r4, pc}

08017ed4 <_free_r>:
 8017ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017ed6:	2900      	cmp	r1, #0
 8017ed8:	d044      	beq.n	8017f64 <_free_r+0x90>
 8017eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ede:	9001      	str	r0, [sp, #4]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	f1a1 0404 	sub.w	r4, r1, #4
 8017ee6:	bfb8      	it	lt
 8017ee8:	18e4      	addlt	r4, r4, r3
 8017eea:	f000 f83f 	bl	8017f6c <__malloc_lock>
 8017eee:	4a1e      	ldr	r2, [pc, #120]	; (8017f68 <_free_r+0x94>)
 8017ef0:	9801      	ldr	r0, [sp, #4]
 8017ef2:	6813      	ldr	r3, [r2, #0]
 8017ef4:	b933      	cbnz	r3, 8017f04 <_free_r+0x30>
 8017ef6:	6063      	str	r3, [r4, #4]
 8017ef8:	6014      	str	r4, [r2, #0]
 8017efa:	b003      	add	sp, #12
 8017efc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f00:	f000 b83a 	b.w	8017f78 <__malloc_unlock>
 8017f04:	42a3      	cmp	r3, r4
 8017f06:	d908      	bls.n	8017f1a <_free_r+0x46>
 8017f08:	6825      	ldr	r5, [r4, #0]
 8017f0a:	1961      	adds	r1, r4, r5
 8017f0c:	428b      	cmp	r3, r1
 8017f0e:	bf01      	itttt	eq
 8017f10:	6819      	ldreq	r1, [r3, #0]
 8017f12:	685b      	ldreq	r3, [r3, #4]
 8017f14:	1949      	addeq	r1, r1, r5
 8017f16:	6021      	streq	r1, [r4, #0]
 8017f18:	e7ed      	b.n	8017ef6 <_free_r+0x22>
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	685b      	ldr	r3, [r3, #4]
 8017f1e:	b10b      	cbz	r3, 8017f24 <_free_r+0x50>
 8017f20:	42a3      	cmp	r3, r4
 8017f22:	d9fa      	bls.n	8017f1a <_free_r+0x46>
 8017f24:	6811      	ldr	r1, [r2, #0]
 8017f26:	1855      	adds	r5, r2, r1
 8017f28:	42a5      	cmp	r5, r4
 8017f2a:	d10b      	bne.n	8017f44 <_free_r+0x70>
 8017f2c:	6824      	ldr	r4, [r4, #0]
 8017f2e:	4421      	add	r1, r4
 8017f30:	1854      	adds	r4, r2, r1
 8017f32:	42a3      	cmp	r3, r4
 8017f34:	6011      	str	r1, [r2, #0]
 8017f36:	d1e0      	bne.n	8017efa <_free_r+0x26>
 8017f38:	681c      	ldr	r4, [r3, #0]
 8017f3a:	685b      	ldr	r3, [r3, #4]
 8017f3c:	6053      	str	r3, [r2, #4]
 8017f3e:	440c      	add	r4, r1
 8017f40:	6014      	str	r4, [r2, #0]
 8017f42:	e7da      	b.n	8017efa <_free_r+0x26>
 8017f44:	d902      	bls.n	8017f4c <_free_r+0x78>
 8017f46:	230c      	movs	r3, #12
 8017f48:	6003      	str	r3, [r0, #0]
 8017f4a:	e7d6      	b.n	8017efa <_free_r+0x26>
 8017f4c:	6825      	ldr	r5, [r4, #0]
 8017f4e:	1961      	adds	r1, r4, r5
 8017f50:	428b      	cmp	r3, r1
 8017f52:	bf04      	itt	eq
 8017f54:	6819      	ldreq	r1, [r3, #0]
 8017f56:	685b      	ldreq	r3, [r3, #4]
 8017f58:	6063      	str	r3, [r4, #4]
 8017f5a:	bf04      	itt	eq
 8017f5c:	1949      	addeq	r1, r1, r5
 8017f5e:	6021      	streq	r1, [r4, #0]
 8017f60:	6054      	str	r4, [r2, #4]
 8017f62:	e7ca      	b.n	8017efa <_free_r+0x26>
 8017f64:	b003      	add	sp, #12
 8017f66:	bd30      	pop	{r4, r5, pc}
 8017f68:	20005810 	.word	0x20005810

08017f6c <__malloc_lock>:
 8017f6c:	4801      	ldr	r0, [pc, #4]	; (8017f74 <__malloc_lock+0x8>)
 8017f6e:	f7ff bfa1 	b.w	8017eb4 <__retarget_lock_acquire_recursive>
 8017f72:	bf00      	nop
 8017f74:	2000580c 	.word	0x2000580c

08017f78 <__malloc_unlock>:
 8017f78:	4801      	ldr	r0, [pc, #4]	; (8017f80 <__malloc_unlock+0x8>)
 8017f7a:	f7ff bf9c 	b.w	8017eb6 <__retarget_lock_release_recursive>
 8017f7e:	bf00      	nop
 8017f80:	2000580c 	.word	0x2000580c

08017f84 <pow>:
 8017f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f86:	ed2d 8b02 	vpush	{d8}
 8017f8a:	eeb0 8a40 	vmov.f32	s16, s0
 8017f8e:	eef0 8a60 	vmov.f32	s17, s1
 8017f92:	ec55 4b11 	vmov	r4, r5, d1
 8017f96:	f000 f873 	bl	8018080 <__ieee754_pow>
 8017f9a:	4622      	mov	r2, r4
 8017f9c:	462b      	mov	r3, r5
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	4629      	mov	r1, r5
 8017fa2:	ec57 6b10 	vmov	r6, r7, d0
 8017fa6:	f7ec fda3 	bl	8004af0 <__aeabi_dcmpun>
 8017faa:	2800      	cmp	r0, #0
 8017fac:	d13b      	bne.n	8018026 <pow+0xa2>
 8017fae:	ec51 0b18 	vmov	r0, r1, d8
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	f7ec fd69 	bl	8004a8c <__aeabi_dcmpeq>
 8017fba:	b1b8      	cbz	r0, 8017fec <pow+0x68>
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	4629      	mov	r1, r5
 8017fc4:	f7ec fd62 	bl	8004a8c <__aeabi_dcmpeq>
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	d146      	bne.n	801805a <pow+0xd6>
 8017fcc:	ec45 4b10 	vmov	d0, r4, r5
 8017fd0:	f000 f848 	bl	8018064 <finite>
 8017fd4:	b338      	cbz	r0, 8018026 <pow+0xa2>
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	2300      	movs	r3, #0
 8017fda:	4620      	mov	r0, r4
 8017fdc:	4629      	mov	r1, r5
 8017fde:	f7ec fd5f 	bl	8004aa0 <__aeabi_dcmplt>
 8017fe2:	b300      	cbz	r0, 8018026 <pow+0xa2>
 8017fe4:	f7ff ff3c 	bl	8017e60 <__errno>
 8017fe8:	2322      	movs	r3, #34	; 0x22
 8017fea:	e01b      	b.n	8018024 <pow+0xa0>
 8017fec:	ec47 6b10 	vmov	d0, r6, r7
 8017ff0:	f000 f838 	bl	8018064 <finite>
 8017ff4:	b9e0      	cbnz	r0, 8018030 <pow+0xac>
 8017ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8017ffa:	eef0 0a68 	vmov.f32	s1, s17
 8017ffe:	f000 f831 	bl	8018064 <finite>
 8018002:	b1a8      	cbz	r0, 8018030 <pow+0xac>
 8018004:	ec45 4b10 	vmov	d0, r4, r5
 8018008:	f000 f82c 	bl	8018064 <finite>
 801800c:	b180      	cbz	r0, 8018030 <pow+0xac>
 801800e:	4632      	mov	r2, r6
 8018010:	463b      	mov	r3, r7
 8018012:	4630      	mov	r0, r6
 8018014:	4639      	mov	r1, r7
 8018016:	f7ec fd6b 	bl	8004af0 <__aeabi_dcmpun>
 801801a:	2800      	cmp	r0, #0
 801801c:	d0e2      	beq.n	8017fe4 <pow+0x60>
 801801e:	f7ff ff1f 	bl	8017e60 <__errno>
 8018022:	2321      	movs	r3, #33	; 0x21
 8018024:	6003      	str	r3, [r0, #0]
 8018026:	ecbd 8b02 	vpop	{d8}
 801802a:	ec47 6b10 	vmov	d0, r6, r7
 801802e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018030:	2200      	movs	r2, #0
 8018032:	2300      	movs	r3, #0
 8018034:	4630      	mov	r0, r6
 8018036:	4639      	mov	r1, r7
 8018038:	f7ec fd28 	bl	8004a8c <__aeabi_dcmpeq>
 801803c:	2800      	cmp	r0, #0
 801803e:	d0f2      	beq.n	8018026 <pow+0xa2>
 8018040:	eeb0 0a48 	vmov.f32	s0, s16
 8018044:	eef0 0a68 	vmov.f32	s1, s17
 8018048:	f000 f80c 	bl	8018064 <finite>
 801804c:	2800      	cmp	r0, #0
 801804e:	d0ea      	beq.n	8018026 <pow+0xa2>
 8018050:	ec45 4b10 	vmov	d0, r4, r5
 8018054:	f000 f806 	bl	8018064 <finite>
 8018058:	e7c3      	b.n	8017fe2 <pow+0x5e>
 801805a:	4f01      	ldr	r7, [pc, #4]	; (8018060 <pow+0xdc>)
 801805c:	2600      	movs	r6, #0
 801805e:	e7e2      	b.n	8018026 <pow+0xa2>
 8018060:	3ff00000 	.word	0x3ff00000

08018064 <finite>:
 8018064:	b082      	sub	sp, #8
 8018066:	ed8d 0b00 	vstr	d0, [sp]
 801806a:	9801      	ldr	r0, [sp, #4]
 801806c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8018070:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018074:	0fc0      	lsrs	r0, r0, #31
 8018076:	b002      	add	sp, #8
 8018078:	4770      	bx	lr
 801807a:	0000      	movs	r0, r0
 801807c:	0000      	movs	r0, r0
	...

08018080 <__ieee754_pow>:
 8018080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018084:	ed2d 8b06 	vpush	{d8-d10}
 8018088:	b089      	sub	sp, #36	; 0x24
 801808a:	ed8d 1b00 	vstr	d1, [sp]
 801808e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018092:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018096:	ea58 0102 	orrs.w	r1, r8, r2
 801809a:	ec57 6b10 	vmov	r6, r7, d0
 801809e:	d115      	bne.n	80180cc <__ieee754_pow+0x4c>
 80180a0:	19b3      	adds	r3, r6, r6
 80180a2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80180a6:	4152      	adcs	r2, r2
 80180a8:	4299      	cmp	r1, r3
 80180aa:	4b89      	ldr	r3, [pc, #548]	; (80182d0 <__ieee754_pow+0x250>)
 80180ac:	4193      	sbcs	r3, r2
 80180ae:	f080 84d1 	bcs.w	8018a54 <__ieee754_pow+0x9d4>
 80180b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180b6:	4630      	mov	r0, r6
 80180b8:	4639      	mov	r1, r7
 80180ba:	f7ec f8c9 	bl	8004250 <__adddf3>
 80180be:	ec41 0b10 	vmov	d0, r0, r1
 80180c2:	b009      	add	sp, #36	; 0x24
 80180c4:	ecbd 8b06 	vpop	{d8-d10}
 80180c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180cc:	4b81      	ldr	r3, [pc, #516]	; (80182d4 <__ieee754_pow+0x254>)
 80180ce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80180d2:	429c      	cmp	r4, r3
 80180d4:	ee10 aa10 	vmov	sl, s0
 80180d8:	463d      	mov	r5, r7
 80180da:	dc06      	bgt.n	80180ea <__ieee754_pow+0x6a>
 80180dc:	d101      	bne.n	80180e2 <__ieee754_pow+0x62>
 80180de:	2e00      	cmp	r6, #0
 80180e0:	d1e7      	bne.n	80180b2 <__ieee754_pow+0x32>
 80180e2:	4598      	cmp	r8, r3
 80180e4:	dc01      	bgt.n	80180ea <__ieee754_pow+0x6a>
 80180e6:	d10f      	bne.n	8018108 <__ieee754_pow+0x88>
 80180e8:	b172      	cbz	r2, 8018108 <__ieee754_pow+0x88>
 80180ea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80180ee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80180f2:	ea55 050a 	orrs.w	r5, r5, sl
 80180f6:	d1dc      	bne.n	80180b2 <__ieee754_pow+0x32>
 80180f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80180fc:	18db      	adds	r3, r3, r3
 80180fe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8018102:	4152      	adcs	r2, r2
 8018104:	429d      	cmp	r5, r3
 8018106:	e7d0      	b.n	80180aa <__ieee754_pow+0x2a>
 8018108:	2d00      	cmp	r5, #0
 801810a:	da3b      	bge.n	8018184 <__ieee754_pow+0x104>
 801810c:	4b72      	ldr	r3, [pc, #456]	; (80182d8 <__ieee754_pow+0x258>)
 801810e:	4598      	cmp	r8, r3
 8018110:	dc51      	bgt.n	80181b6 <__ieee754_pow+0x136>
 8018112:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018116:	4598      	cmp	r8, r3
 8018118:	f340 84ab 	ble.w	8018a72 <__ieee754_pow+0x9f2>
 801811c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018120:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018124:	2b14      	cmp	r3, #20
 8018126:	dd0f      	ble.n	8018148 <__ieee754_pow+0xc8>
 8018128:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801812c:	fa22 f103 	lsr.w	r1, r2, r3
 8018130:	fa01 f303 	lsl.w	r3, r1, r3
 8018134:	4293      	cmp	r3, r2
 8018136:	f040 849c 	bne.w	8018a72 <__ieee754_pow+0x9f2>
 801813a:	f001 0101 	and.w	r1, r1, #1
 801813e:	f1c1 0302 	rsb	r3, r1, #2
 8018142:	9304      	str	r3, [sp, #16]
 8018144:	b182      	cbz	r2, 8018168 <__ieee754_pow+0xe8>
 8018146:	e05f      	b.n	8018208 <__ieee754_pow+0x188>
 8018148:	2a00      	cmp	r2, #0
 801814a:	d15b      	bne.n	8018204 <__ieee754_pow+0x184>
 801814c:	f1c3 0314 	rsb	r3, r3, #20
 8018150:	fa48 f103 	asr.w	r1, r8, r3
 8018154:	fa01 f303 	lsl.w	r3, r1, r3
 8018158:	4543      	cmp	r3, r8
 801815a:	f040 8487 	bne.w	8018a6c <__ieee754_pow+0x9ec>
 801815e:	f001 0101 	and.w	r1, r1, #1
 8018162:	f1c1 0302 	rsb	r3, r1, #2
 8018166:	9304      	str	r3, [sp, #16]
 8018168:	4b5c      	ldr	r3, [pc, #368]	; (80182dc <__ieee754_pow+0x25c>)
 801816a:	4598      	cmp	r8, r3
 801816c:	d132      	bne.n	80181d4 <__ieee754_pow+0x154>
 801816e:	f1b9 0f00 	cmp.w	r9, #0
 8018172:	f280 8477 	bge.w	8018a64 <__ieee754_pow+0x9e4>
 8018176:	4959      	ldr	r1, [pc, #356]	; (80182dc <__ieee754_pow+0x25c>)
 8018178:	4632      	mov	r2, r6
 801817a:	463b      	mov	r3, r7
 801817c:	2000      	movs	r0, #0
 801817e:	f7ec fb47 	bl	8004810 <__aeabi_ddiv>
 8018182:	e79c      	b.n	80180be <__ieee754_pow+0x3e>
 8018184:	2300      	movs	r3, #0
 8018186:	9304      	str	r3, [sp, #16]
 8018188:	2a00      	cmp	r2, #0
 801818a:	d13d      	bne.n	8018208 <__ieee754_pow+0x188>
 801818c:	4b51      	ldr	r3, [pc, #324]	; (80182d4 <__ieee754_pow+0x254>)
 801818e:	4598      	cmp	r8, r3
 8018190:	d1ea      	bne.n	8018168 <__ieee754_pow+0xe8>
 8018192:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018196:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801819a:	ea53 030a 	orrs.w	r3, r3, sl
 801819e:	f000 8459 	beq.w	8018a54 <__ieee754_pow+0x9d4>
 80181a2:	4b4f      	ldr	r3, [pc, #316]	; (80182e0 <__ieee754_pow+0x260>)
 80181a4:	429c      	cmp	r4, r3
 80181a6:	dd08      	ble.n	80181ba <__ieee754_pow+0x13a>
 80181a8:	f1b9 0f00 	cmp.w	r9, #0
 80181ac:	f2c0 8456 	blt.w	8018a5c <__ieee754_pow+0x9dc>
 80181b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181b4:	e783      	b.n	80180be <__ieee754_pow+0x3e>
 80181b6:	2302      	movs	r3, #2
 80181b8:	e7e5      	b.n	8018186 <__ieee754_pow+0x106>
 80181ba:	f1b9 0f00 	cmp.w	r9, #0
 80181be:	f04f 0000 	mov.w	r0, #0
 80181c2:	f04f 0100 	mov.w	r1, #0
 80181c6:	f6bf af7a 	bge.w	80180be <__ieee754_pow+0x3e>
 80181ca:	e9dd 0300 	ldrd	r0, r3, [sp]
 80181ce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80181d2:	e774      	b.n	80180be <__ieee754_pow+0x3e>
 80181d4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80181d8:	d106      	bne.n	80181e8 <__ieee754_pow+0x168>
 80181da:	4632      	mov	r2, r6
 80181dc:	463b      	mov	r3, r7
 80181de:	4630      	mov	r0, r6
 80181e0:	4639      	mov	r1, r7
 80181e2:	f7ec f9eb 	bl	80045bc <__aeabi_dmul>
 80181e6:	e76a      	b.n	80180be <__ieee754_pow+0x3e>
 80181e8:	4b3e      	ldr	r3, [pc, #248]	; (80182e4 <__ieee754_pow+0x264>)
 80181ea:	4599      	cmp	r9, r3
 80181ec:	d10c      	bne.n	8018208 <__ieee754_pow+0x188>
 80181ee:	2d00      	cmp	r5, #0
 80181f0:	db0a      	blt.n	8018208 <__ieee754_pow+0x188>
 80181f2:	ec47 6b10 	vmov	d0, r6, r7
 80181f6:	b009      	add	sp, #36	; 0x24
 80181f8:	ecbd 8b06 	vpop	{d8-d10}
 80181fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018200:	f000 bd20 	b.w	8018c44 <__ieee754_sqrt>
 8018204:	2300      	movs	r3, #0
 8018206:	9304      	str	r3, [sp, #16]
 8018208:	ec47 6b10 	vmov	d0, r6, r7
 801820c:	f000 fc62 	bl	8018ad4 <fabs>
 8018210:	ec51 0b10 	vmov	r0, r1, d0
 8018214:	f1ba 0f00 	cmp.w	sl, #0
 8018218:	d129      	bne.n	801826e <__ieee754_pow+0x1ee>
 801821a:	b124      	cbz	r4, 8018226 <__ieee754_pow+0x1a6>
 801821c:	4b2f      	ldr	r3, [pc, #188]	; (80182dc <__ieee754_pow+0x25c>)
 801821e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018222:	429a      	cmp	r2, r3
 8018224:	d123      	bne.n	801826e <__ieee754_pow+0x1ee>
 8018226:	f1b9 0f00 	cmp.w	r9, #0
 801822a:	da05      	bge.n	8018238 <__ieee754_pow+0x1b8>
 801822c:	4602      	mov	r2, r0
 801822e:	460b      	mov	r3, r1
 8018230:	2000      	movs	r0, #0
 8018232:	492a      	ldr	r1, [pc, #168]	; (80182dc <__ieee754_pow+0x25c>)
 8018234:	f7ec faec 	bl	8004810 <__aeabi_ddiv>
 8018238:	2d00      	cmp	r5, #0
 801823a:	f6bf af40 	bge.w	80180be <__ieee754_pow+0x3e>
 801823e:	9b04      	ldr	r3, [sp, #16]
 8018240:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018244:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018248:	431c      	orrs	r4, r3
 801824a:	d108      	bne.n	801825e <__ieee754_pow+0x1de>
 801824c:	4602      	mov	r2, r0
 801824e:	460b      	mov	r3, r1
 8018250:	4610      	mov	r0, r2
 8018252:	4619      	mov	r1, r3
 8018254:	f7eb fffa 	bl	800424c <__aeabi_dsub>
 8018258:	4602      	mov	r2, r0
 801825a:	460b      	mov	r3, r1
 801825c:	e78f      	b.n	801817e <__ieee754_pow+0xfe>
 801825e:	9b04      	ldr	r3, [sp, #16]
 8018260:	2b01      	cmp	r3, #1
 8018262:	f47f af2c 	bne.w	80180be <__ieee754_pow+0x3e>
 8018266:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801826a:	4619      	mov	r1, r3
 801826c:	e727      	b.n	80180be <__ieee754_pow+0x3e>
 801826e:	0feb      	lsrs	r3, r5, #31
 8018270:	3b01      	subs	r3, #1
 8018272:	9306      	str	r3, [sp, #24]
 8018274:	9a06      	ldr	r2, [sp, #24]
 8018276:	9b04      	ldr	r3, [sp, #16]
 8018278:	4313      	orrs	r3, r2
 801827a:	d102      	bne.n	8018282 <__ieee754_pow+0x202>
 801827c:	4632      	mov	r2, r6
 801827e:	463b      	mov	r3, r7
 8018280:	e7e6      	b.n	8018250 <__ieee754_pow+0x1d0>
 8018282:	4b19      	ldr	r3, [pc, #100]	; (80182e8 <__ieee754_pow+0x268>)
 8018284:	4598      	cmp	r8, r3
 8018286:	f340 80fb 	ble.w	8018480 <__ieee754_pow+0x400>
 801828a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801828e:	4598      	cmp	r8, r3
 8018290:	4b13      	ldr	r3, [pc, #76]	; (80182e0 <__ieee754_pow+0x260>)
 8018292:	dd0c      	ble.n	80182ae <__ieee754_pow+0x22e>
 8018294:	429c      	cmp	r4, r3
 8018296:	dc0f      	bgt.n	80182b8 <__ieee754_pow+0x238>
 8018298:	f1b9 0f00 	cmp.w	r9, #0
 801829c:	da0f      	bge.n	80182be <__ieee754_pow+0x23e>
 801829e:	2000      	movs	r0, #0
 80182a0:	b009      	add	sp, #36	; 0x24
 80182a2:	ecbd 8b06 	vpop	{d8-d10}
 80182a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182aa:	f000 bcc2 	b.w	8018c32 <__math_oflow>
 80182ae:	429c      	cmp	r4, r3
 80182b0:	dbf2      	blt.n	8018298 <__ieee754_pow+0x218>
 80182b2:	4b0a      	ldr	r3, [pc, #40]	; (80182dc <__ieee754_pow+0x25c>)
 80182b4:	429c      	cmp	r4, r3
 80182b6:	dd19      	ble.n	80182ec <__ieee754_pow+0x26c>
 80182b8:	f1b9 0f00 	cmp.w	r9, #0
 80182bc:	dcef      	bgt.n	801829e <__ieee754_pow+0x21e>
 80182be:	2000      	movs	r0, #0
 80182c0:	b009      	add	sp, #36	; 0x24
 80182c2:	ecbd 8b06 	vpop	{d8-d10}
 80182c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182ca:	f000 bca9 	b.w	8018c20 <__math_uflow>
 80182ce:	bf00      	nop
 80182d0:	fff00000 	.word	0xfff00000
 80182d4:	7ff00000 	.word	0x7ff00000
 80182d8:	433fffff 	.word	0x433fffff
 80182dc:	3ff00000 	.word	0x3ff00000
 80182e0:	3fefffff 	.word	0x3fefffff
 80182e4:	3fe00000 	.word	0x3fe00000
 80182e8:	41e00000 	.word	0x41e00000
 80182ec:	4b60      	ldr	r3, [pc, #384]	; (8018470 <__ieee754_pow+0x3f0>)
 80182ee:	2200      	movs	r2, #0
 80182f0:	f7eb ffac 	bl	800424c <__aeabi_dsub>
 80182f4:	a354      	add	r3, pc, #336	; (adr r3, 8018448 <__ieee754_pow+0x3c8>)
 80182f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182fa:	4604      	mov	r4, r0
 80182fc:	460d      	mov	r5, r1
 80182fe:	f7ec f95d 	bl	80045bc <__aeabi_dmul>
 8018302:	a353      	add	r3, pc, #332	; (adr r3, 8018450 <__ieee754_pow+0x3d0>)
 8018304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018308:	4606      	mov	r6, r0
 801830a:	460f      	mov	r7, r1
 801830c:	4620      	mov	r0, r4
 801830e:	4629      	mov	r1, r5
 8018310:	f7ec f954 	bl	80045bc <__aeabi_dmul>
 8018314:	4b57      	ldr	r3, [pc, #348]	; (8018474 <__ieee754_pow+0x3f4>)
 8018316:	4682      	mov	sl, r0
 8018318:	468b      	mov	fp, r1
 801831a:	2200      	movs	r2, #0
 801831c:	4620      	mov	r0, r4
 801831e:	4629      	mov	r1, r5
 8018320:	f7ec f94c 	bl	80045bc <__aeabi_dmul>
 8018324:	4602      	mov	r2, r0
 8018326:	460b      	mov	r3, r1
 8018328:	a14b      	add	r1, pc, #300	; (adr r1, 8018458 <__ieee754_pow+0x3d8>)
 801832a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801832e:	f7eb ff8d 	bl	800424c <__aeabi_dsub>
 8018332:	4622      	mov	r2, r4
 8018334:	462b      	mov	r3, r5
 8018336:	f7ec f941 	bl	80045bc <__aeabi_dmul>
 801833a:	4602      	mov	r2, r0
 801833c:	460b      	mov	r3, r1
 801833e:	2000      	movs	r0, #0
 8018340:	494d      	ldr	r1, [pc, #308]	; (8018478 <__ieee754_pow+0x3f8>)
 8018342:	f7eb ff83 	bl	800424c <__aeabi_dsub>
 8018346:	4622      	mov	r2, r4
 8018348:	4680      	mov	r8, r0
 801834a:	4689      	mov	r9, r1
 801834c:	462b      	mov	r3, r5
 801834e:	4620      	mov	r0, r4
 8018350:	4629      	mov	r1, r5
 8018352:	f7ec f933 	bl	80045bc <__aeabi_dmul>
 8018356:	4602      	mov	r2, r0
 8018358:	460b      	mov	r3, r1
 801835a:	4640      	mov	r0, r8
 801835c:	4649      	mov	r1, r9
 801835e:	f7ec f92d 	bl	80045bc <__aeabi_dmul>
 8018362:	a33f      	add	r3, pc, #252	; (adr r3, 8018460 <__ieee754_pow+0x3e0>)
 8018364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018368:	f7ec f928 	bl	80045bc <__aeabi_dmul>
 801836c:	4602      	mov	r2, r0
 801836e:	460b      	mov	r3, r1
 8018370:	4650      	mov	r0, sl
 8018372:	4659      	mov	r1, fp
 8018374:	f7eb ff6a 	bl	800424c <__aeabi_dsub>
 8018378:	4602      	mov	r2, r0
 801837a:	460b      	mov	r3, r1
 801837c:	4680      	mov	r8, r0
 801837e:	4689      	mov	r9, r1
 8018380:	4630      	mov	r0, r6
 8018382:	4639      	mov	r1, r7
 8018384:	f7eb ff64 	bl	8004250 <__adddf3>
 8018388:	2000      	movs	r0, #0
 801838a:	4632      	mov	r2, r6
 801838c:	463b      	mov	r3, r7
 801838e:	4604      	mov	r4, r0
 8018390:	460d      	mov	r5, r1
 8018392:	f7eb ff5b 	bl	800424c <__aeabi_dsub>
 8018396:	4602      	mov	r2, r0
 8018398:	460b      	mov	r3, r1
 801839a:	4640      	mov	r0, r8
 801839c:	4649      	mov	r1, r9
 801839e:	f7eb ff55 	bl	800424c <__aeabi_dsub>
 80183a2:	9b04      	ldr	r3, [sp, #16]
 80183a4:	9a06      	ldr	r2, [sp, #24]
 80183a6:	3b01      	subs	r3, #1
 80183a8:	4313      	orrs	r3, r2
 80183aa:	4682      	mov	sl, r0
 80183ac:	468b      	mov	fp, r1
 80183ae:	f040 81e7 	bne.w	8018780 <__ieee754_pow+0x700>
 80183b2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8018468 <__ieee754_pow+0x3e8>
 80183b6:	eeb0 8a47 	vmov.f32	s16, s14
 80183ba:	eef0 8a67 	vmov.f32	s17, s15
 80183be:	e9dd 6700 	ldrd	r6, r7, [sp]
 80183c2:	2600      	movs	r6, #0
 80183c4:	4632      	mov	r2, r6
 80183c6:	463b      	mov	r3, r7
 80183c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80183cc:	f7eb ff3e 	bl	800424c <__aeabi_dsub>
 80183d0:	4622      	mov	r2, r4
 80183d2:	462b      	mov	r3, r5
 80183d4:	f7ec f8f2 	bl	80045bc <__aeabi_dmul>
 80183d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80183dc:	4680      	mov	r8, r0
 80183de:	4689      	mov	r9, r1
 80183e0:	4650      	mov	r0, sl
 80183e2:	4659      	mov	r1, fp
 80183e4:	f7ec f8ea 	bl	80045bc <__aeabi_dmul>
 80183e8:	4602      	mov	r2, r0
 80183ea:	460b      	mov	r3, r1
 80183ec:	4640      	mov	r0, r8
 80183ee:	4649      	mov	r1, r9
 80183f0:	f7eb ff2e 	bl	8004250 <__adddf3>
 80183f4:	4632      	mov	r2, r6
 80183f6:	463b      	mov	r3, r7
 80183f8:	4680      	mov	r8, r0
 80183fa:	4689      	mov	r9, r1
 80183fc:	4620      	mov	r0, r4
 80183fe:	4629      	mov	r1, r5
 8018400:	f7ec f8dc 	bl	80045bc <__aeabi_dmul>
 8018404:	460b      	mov	r3, r1
 8018406:	4604      	mov	r4, r0
 8018408:	460d      	mov	r5, r1
 801840a:	4602      	mov	r2, r0
 801840c:	4649      	mov	r1, r9
 801840e:	4640      	mov	r0, r8
 8018410:	f7eb ff1e 	bl	8004250 <__adddf3>
 8018414:	4b19      	ldr	r3, [pc, #100]	; (801847c <__ieee754_pow+0x3fc>)
 8018416:	4299      	cmp	r1, r3
 8018418:	ec45 4b19 	vmov	d9, r4, r5
 801841c:	4606      	mov	r6, r0
 801841e:	460f      	mov	r7, r1
 8018420:	468b      	mov	fp, r1
 8018422:	f340 82f0 	ble.w	8018a06 <__ieee754_pow+0x986>
 8018426:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801842a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801842e:	4303      	orrs	r3, r0
 8018430:	f000 81e4 	beq.w	80187fc <__ieee754_pow+0x77c>
 8018434:	ec51 0b18 	vmov	r0, r1, d8
 8018438:	2200      	movs	r2, #0
 801843a:	2300      	movs	r3, #0
 801843c:	f7ec fb30 	bl	8004aa0 <__aeabi_dcmplt>
 8018440:	3800      	subs	r0, #0
 8018442:	bf18      	it	ne
 8018444:	2001      	movne	r0, #1
 8018446:	e72b      	b.n	80182a0 <__ieee754_pow+0x220>
 8018448:	60000000 	.word	0x60000000
 801844c:	3ff71547 	.word	0x3ff71547
 8018450:	f85ddf44 	.word	0xf85ddf44
 8018454:	3e54ae0b 	.word	0x3e54ae0b
 8018458:	55555555 	.word	0x55555555
 801845c:	3fd55555 	.word	0x3fd55555
 8018460:	652b82fe 	.word	0x652b82fe
 8018464:	3ff71547 	.word	0x3ff71547
 8018468:	00000000 	.word	0x00000000
 801846c:	bff00000 	.word	0xbff00000
 8018470:	3ff00000 	.word	0x3ff00000
 8018474:	3fd00000 	.word	0x3fd00000
 8018478:	3fe00000 	.word	0x3fe00000
 801847c:	408fffff 	.word	0x408fffff
 8018480:	4bd5      	ldr	r3, [pc, #852]	; (80187d8 <__ieee754_pow+0x758>)
 8018482:	402b      	ands	r3, r5
 8018484:	2200      	movs	r2, #0
 8018486:	b92b      	cbnz	r3, 8018494 <__ieee754_pow+0x414>
 8018488:	4bd4      	ldr	r3, [pc, #848]	; (80187dc <__ieee754_pow+0x75c>)
 801848a:	f7ec f897 	bl	80045bc <__aeabi_dmul>
 801848e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018492:	460c      	mov	r4, r1
 8018494:	1523      	asrs	r3, r4, #20
 8018496:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801849a:	4413      	add	r3, r2
 801849c:	9305      	str	r3, [sp, #20]
 801849e:	4bd0      	ldr	r3, [pc, #832]	; (80187e0 <__ieee754_pow+0x760>)
 80184a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80184a4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80184a8:	429c      	cmp	r4, r3
 80184aa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80184ae:	dd08      	ble.n	80184c2 <__ieee754_pow+0x442>
 80184b0:	4bcc      	ldr	r3, [pc, #816]	; (80187e4 <__ieee754_pow+0x764>)
 80184b2:	429c      	cmp	r4, r3
 80184b4:	f340 8162 	ble.w	801877c <__ieee754_pow+0x6fc>
 80184b8:	9b05      	ldr	r3, [sp, #20]
 80184ba:	3301      	adds	r3, #1
 80184bc:	9305      	str	r3, [sp, #20]
 80184be:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80184c2:	2400      	movs	r4, #0
 80184c4:	00e3      	lsls	r3, r4, #3
 80184c6:	9307      	str	r3, [sp, #28]
 80184c8:	4bc7      	ldr	r3, [pc, #796]	; (80187e8 <__ieee754_pow+0x768>)
 80184ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80184ce:	ed93 7b00 	vldr	d7, [r3]
 80184d2:	4629      	mov	r1, r5
 80184d4:	ec53 2b17 	vmov	r2, r3, d7
 80184d8:	eeb0 9a47 	vmov.f32	s18, s14
 80184dc:	eef0 9a67 	vmov.f32	s19, s15
 80184e0:	4682      	mov	sl, r0
 80184e2:	f7eb feb3 	bl	800424c <__aeabi_dsub>
 80184e6:	4652      	mov	r2, sl
 80184e8:	4606      	mov	r6, r0
 80184ea:	460f      	mov	r7, r1
 80184ec:	462b      	mov	r3, r5
 80184ee:	ec51 0b19 	vmov	r0, r1, d9
 80184f2:	f7eb fead 	bl	8004250 <__adddf3>
 80184f6:	4602      	mov	r2, r0
 80184f8:	460b      	mov	r3, r1
 80184fa:	2000      	movs	r0, #0
 80184fc:	49bb      	ldr	r1, [pc, #748]	; (80187ec <__ieee754_pow+0x76c>)
 80184fe:	f7ec f987 	bl	8004810 <__aeabi_ddiv>
 8018502:	ec41 0b1a 	vmov	d10, r0, r1
 8018506:	4602      	mov	r2, r0
 8018508:	460b      	mov	r3, r1
 801850a:	4630      	mov	r0, r6
 801850c:	4639      	mov	r1, r7
 801850e:	f7ec f855 	bl	80045bc <__aeabi_dmul>
 8018512:	2300      	movs	r3, #0
 8018514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018518:	9302      	str	r3, [sp, #8]
 801851a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801851e:	46ab      	mov	fp, r5
 8018520:	106d      	asrs	r5, r5, #1
 8018522:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018526:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801852a:	ec41 0b18 	vmov	d8, r0, r1
 801852e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018532:	2200      	movs	r2, #0
 8018534:	4640      	mov	r0, r8
 8018536:	4649      	mov	r1, r9
 8018538:	4614      	mov	r4, r2
 801853a:	461d      	mov	r5, r3
 801853c:	f7ec f83e 	bl	80045bc <__aeabi_dmul>
 8018540:	4602      	mov	r2, r0
 8018542:	460b      	mov	r3, r1
 8018544:	4630      	mov	r0, r6
 8018546:	4639      	mov	r1, r7
 8018548:	f7eb fe80 	bl	800424c <__aeabi_dsub>
 801854c:	ec53 2b19 	vmov	r2, r3, d9
 8018550:	4606      	mov	r6, r0
 8018552:	460f      	mov	r7, r1
 8018554:	4620      	mov	r0, r4
 8018556:	4629      	mov	r1, r5
 8018558:	f7eb fe78 	bl	800424c <__aeabi_dsub>
 801855c:	4602      	mov	r2, r0
 801855e:	460b      	mov	r3, r1
 8018560:	4650      	mov	r0, sl
 8018562:	4659      	mov	r1, fp
 8018564:	f7eb fe72 	bl	800424c <__aeabi_dsub>
 8018568:	4642      	mov	r2, r8
 801856a:	464b      	mov	r3, r9
 801856c:	f7ec f826 	bl	80045bc <__aeabi_dmul>
 8018570:	4602      	mov	r2, r0
 8018572:	460b      	mov	r3, r1
 8018574:	4630      	mov	r0, r6
 8018576:	4639      	mov	r1, r7
 8018578:	f7eb fe68 	bl	800424c <__aeabi_dsub>
 801857c:	ec53 2b1a 	vmov	r2, r3, d10
 8018580:	f7ec f81c 	bl	80045bc <__aeabi_dmul>
 8018584:	ec53 2b18 	vmov	r2, r3, d8
 8018588:	ec41 0b19 	vmov	d9, r0, r1
 801858c:	ec51 0b18 	vmov	r0, r1, d8
 8018590:	f7ec f814 	bl	80045bc <__aeabi_dmul>
 8018594:	a37c      	add	r3, pc, #496	; (adr r3, 8018788 <__ieee754_pow+0x708>)
 8018596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801859a:	4604      	mov	r4, r0
 801859c:	460d      	mov	r5, r1
 801859e:	f7ec f80d 	bl	80045bc <__aeabi_dmul>
 80185a2:	a37b      	add	r3, pc, #492	; (adr r3, 8018790 <__ieee754_pow+0x710>)
 80185a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185a8:	f7eb fe52 	bl	8004250 <__adddf3>
 80185ac:	4622      	mov	r2, r4
 80185ae:	462b      	mov	r3, r5
 80185b0:	f7ec f804 	bl	80045bc <__aeabi_dmul>
 80185b4:	a378      	add	r3, pc, #480	; (adr r3, 8018798 <__ieee754_pow+0x718>)
 80185b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185ba:	f7eb fe49 	bl	8004250 <__adddf3>
 80185be:	4622      	mov	r2, r4
 80185c0:	462b      	mov	r3, r5
 80185c2:	f7eb fffb 	bl	80045bc <__aeabi_dmul>
 80185c6:	a376      	add	r3, pc, #472	; (adr r3, 80187a0 <__ieee754_pow+0x720>)
 80185c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185cc:	f7eb fe40 	bl	8004250 <__adddf3>
 80185d0:	4622      	mov	r2, r4
 80185d2:	462b      	mov	r3, r5
 80185d4:	f7eb fff2 	bl	80045bc <__aeabi_dmul>
 80185d8:	a373      	add	r3, pc, #460	; (adr r3, 80187a8 <__ieee754_pow+0x728>)
 80185da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185de:	f7eb fe37 	bl	8004250 <__adddf3>
 80185e2:	4622      	mov	r2, r4
 80185e4:	462b      	mov	r3, r5
 80185e6:	f7eb ffe9 	bl	80045bc <__aeabi_dmul>
 80185ea:	a371      	add	r3, pc, #452	; (adr r3, 80187b0 <__ieee754_pow+0x730>)
 80185ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185f0:	f7eb fe2e 	bl	8004250 <__adddf3>
 80185f4:	4622      	mov	r2, r4
 80185f6:	4606      	mov	r6, r0
 80185f8:	460f      	mov	r7, r1
 80185fa:	462b      	mov	r3, r5
 80185fc:	4620      	mov	r0, r4
 80185fe:	4629      	mov	r1, r5
 8018600:	f7eb ffdc 	bl	80045bc <__aeabi_dmul>
 8018604:	4602      	mov	r2, r0
 8018606:	460b      	mov	r3, r1
 8018608:	4630      	mov	r0, r6
 801860a:	4639      	mov	r1, r7
 801860c:	f7eb ffd6 	bl	80045bc <__aeabi_dmul>
 8018610:	4642      	mov	r2, r8
 8018612:	4604      	mov	r4, r0
 8018614:	460d      	mov	r5, r1
 8018616:	464b      	mov	r3, r9
 8018618:	ec51 0b18 	vmov	r0, r1, d8
 801861c:	f7eb fe18 	bl	8004250 <__adddf3>
 8018620:	ec53 2b19 	vmov	r2, r3, d9
 8018624:	f7eb ffca 	bl	80045bc <__aeabi_dmul>
 8018628:	4622      	mov	r2, r4
 801862a:	462b      	mov	r3, r5
 801862c:	f7eb fe10 	bl	8004250 <__adddf3>
 8018630:	4642      	mov	r2, r8
 8018632:	4682      	mov	sl, r0
 8018634:	468b      	mov	fp, r1
 8018636:	464b      	mov	r3, r9
 8018638:	4640      	mov	r0, r8
 801863a:	4649      	mov	r1, r9
 801863c:	f7eb ffbe 	bl	80045bc <__aeabi_dmul>
 8018640:	4b6b      	ldr	r3, [pc, #428]	; (80187f0 <__ieee754_pow+0x770>)
 8018642:	2200      	movs	r2, #0
 8018644:	4606      	mov	r6, r0
 8018646:	460f      	mov	r7, r1
 8018648:	f7eb fe02 	bl	8004250 <__adddf3>
 801864c:	4652      	mov	r2, sl
 801864e:	465b      	mov	r3, fp
 8018650:	f7eb fdfe 	bl	8004250 <__adddf3>
 8018654:	2000      	movs	r0, #0
 8018656:	4604      	mov	r4, r0
 8018658:	460d      	mov	r5, r1
 801865a:	4602      	mov	r2, r0
 801865c:	460b      	mov	r3, r1
 801865e:	4640      	mov	r0, r8
 8018660:	4649      	mov	r1, r9
 8018662:	f7eb ffab 	bl	80045bc <__aeabi_dmul>
 8018666:	4b62      	ldr	r3, [pc, #392]	; (80187f0 <__ieee754_pow+0x770>)
 8018668:	4680      	mov	r8, r0
 801866a:	4689      	mov	r9, r1
 801866c:	2200      	movs	r2, #0
 801866e:	4620      	mov	r0, r4
 8018670:	4629      	mov	r1, r5
 8018672:	f7eb fdeb 	bl	800424c <__aeabi_dsub>
 8018676:	4632      	mov	r2, r6
 8018678:	463b      	mov	r3, r7
 801867a:	f7eb fde7 	bl	800424c <__aeabi_dsub>
 801867e:	4602      	mov	r2, r0
 8018680:	460b      	mov	r3, r1
 8018682:	4650      	mov	r0, sl
 8018684:	4659      	mov	r1, fp
 8018686:	f7eb fde1 	bl	800424c <__aeabi_dsub>
 801868a:	ec53 2b18 	vmov	r2, r3, d8
 801868e:	f7eb ff95 	bl	80045bc <__aeabi_dmul>
 8018692:	4622      	mov	r2, r4
 8018694:	4606      	mov	r6, r0
 8018696:	460f      	mov	r7, r1
 8018698:	462b      	mov	r3, r5
 801869a:	ec51 0b19 	vmov	r0, r1, d9
 801869e:	f7eb ff8d 	bl	80045bc <__aeabi_dmul>
 80186a2:	4602      	mov	r2, r0
 80186a4:	460b      	mov	r3, r1
 80186a6:	4630      	mov	r0, r6
 80186a8:	4639      	mov	r1, r7
 80186aa:	f7eb fdd1 	bl	8004250 <__adddf3>
 80186ae:	4606      	mov	r6, r0
 80186b0:	460f      	mov	r7, r1
 80186b2:	4602      	mov	r2, r0
 80186b4:	460b      	mov	r3, r1
 80186b6:	4640      	mov	r0, r8
 80186b8:	4649      	mov	r1, r9
 80186ba:	f7eb fdc9 	bl	8004250 <__adddf3>
 80186be:	a33e      	add	r3, pc, #248	; (adr r3, 80187b8 <__ieee754_pow+0x738>)
 80186c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186c4:	2000      	movs	r0, #0
 80186c6:	4604      	mov	r4, r0
 80186c8:	460d      	mov	r5, r1
 80186ca:	f7eb ff77 	bl	80045bc <__aeabi_dmul>
 80186ce:	4642      	mov	r2, r8
 80186d0:	ec41 0b18 	vmov	d8, r0, r1
 80186d4:	464b      	mov	r3, r9
 80186d6:	4620      	mov	r0, r4
 80186d8:	4629      	mov	r1, r5
 80186da:	f7eb fdb7 	bl	800424c <__aeabi_dsub>
 80186de:	4602      	mov	r2, r0
 80186e0:	460b      	mov	r3, r1
 80186e2:	4630      	mov	r0, r6
 80186e4:	4639      	mov	r1, r7
 80186e6:	f7eb fdb1 	bl	800424c <__aeabi_dsub>
 80186ea:	a335      	add	r3, pc, #212	; (adr r3, 80187c0 <__ieee754_pow+0x740>)
 80186ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186f0:	f7eb ff64 	bl	80045bc <__aeabi_dmul>
 80186f4:	a334      	add	r3, pc, #208	; (adr r3, 80187c8 <__ieee754_pow+0x748>)
 80186f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fa:	4606      	mov	r6, r0
 80186fc:	460f      	mov	r7, r1
 80186fe:	4620      	mov	r0, r4
 8018700:	4629      	mov	r1, r5
 8018702:	f7eb ff5b 	bl	80045bc <__aeabi_dmul>
 8018706:	4602      	mov	r2, r0
 8018708:	460b      	mov	r3, r1
 801870a:	4630      	mov	r0, r6
 801870c:	4639      	mov	r1, r7
 801870e:	f7eb fd9f 	bl	8004250 <__adddf3>
 8018712:	9a07      	ldr	r2, [sp, #28]
 8018714:	4b37      	ldr	r3, [pc, #220]	; (80187f4 <__ieee754_pow+0x774>)
 8018716:	4413      	add	r3, r2
 8018718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801871c:	f7eb fd98 	bl	8004250 <__adddf3>
 8018720:	4682      	mov	sl, r0
 8018722:	9805      	ldr	r0, [sp, #20]
 8018724:	468b      	mov	fp, r1
 8018726:	f7eb fedf 	bl	80044e8 <__aeabi_i2d>
 801872a:	9a07      	ldr	r2, [sp, #28]
 801872c:	4b32      	ldr	r3, [pc, #200]	; (80187f8 <__ieee754_pow+0x778>)
 801872e:	4413      	add	r3, r2
 8018730:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018734:	4606      	mov	r6, r0
 8018736:	460f      	mov	r7, r1
 8018738:	4652      	mov	r2, sl
 801873a:	465b      	mov	r3, fp
 801873c:	ec51 0b18 	vmov	r0, r1, d8
 8018740:	f7eb fd86 	bl	8004250 <__adddf3>
 8018744:	4642      	mov	r2, r8
 8018746:	464b      	mov	r3, r9
 8018748:	f7eb fd82 	bl	8004250 <__adddf3>
 801874c:	4632      	mov	r2, r6
 801874e:	463b      	mov	r3, r7
 8018750:	f7eb fd7e 	bl	8004250 <__adddf3>
 8018754:	2000      	movs	r0, #0
 8018756:	4632      	mov	r2, r6
 8018758:	463b      	mov	r3, r7
 801875a:	4604      	mov	r4, r0
 801875c:	460d      	mov	r5, r1
 801875e:	f7eb fd75 	bl	800424c <__aeabi_dsub>
 8018762:	4642      	mov	r2, r8
 8018764:	464b      	mov	r3, r9
 8018766:	f7eb fd71 	bl	800424c <__aeabi_dsub>
 801876a:	ec53 2b18 	vmov	r2, r3, d8
 801876e:	f7eb fd6d 	bl	800424c <__aeabi_dsub>
 8018772:	4602      	mov	r2, r0
 8018774:	460b      	mov	r3, r1
 8018776:	4650      	mov	r0, sl
 8018778:	4659      	mov	r1, fp
 801877a:	e610      	b.n	801839e <__ieee754_pow+0x31e>
 801877c:	2401      	movs	r4, #1
 801877e:	e6a1      	b.n	80184c4 <__ieee754_pow+0x444>
 8018780:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80187d0 <__ieee754_pow+0x750>
 8018784:	e617      	b.n	80183b6 <__ieee754_pow+0x336>
 8018786:	bf00      	nop
 8018788:	4a454eef 	.word	0x4a454eef
 801878c:	3fca7e28 	.word	0x3fca7e28
 8018790:	93c9db65 	.word	0x93c9db65
 8018794:	3fcd864a 	.word	0x3fcd864a
 8018798:	a91d4101 	.word	0xa91d4101
 801879c:	3fd17460 	.word	0x3fd17460
 80187a0:	518f264d 	.word	0x518f264d
 80187a4:	3fd55555 	.word	0x3fd55555
 80187a8:	db6fabff 	.word	0xdb6fabff
 80187ac:	3fdb6db6 	.word	0x3fdb6db6
 80187b0:	33333303 	.word	0x33333303
 80187b4:	3fe33333 	.word	0x3fe33333
 80187b8:	e0000000 	.word	0xe0000000
 80187bc:	3feec709 	.word	0x3feec709
 80187c0:	dc3a03fd 	.word	0xdc3a03fd
 80187c4:	3feec709 	.word	0x3feec709
 80187c8:	145b01f5 	.word	0x145b01f5
 80187cc:	be3e2fe0 	.word	0xbe3e2fe0
 80187d0:	00000000 	.word	0x00000000
 80187d4:	3ff00000 	.word	0x3ff00000
 80187d8:	7ff00000 	.word	0x7ff00000
 80187dc:	43400000 	.word	0x43400000
 80187e0:	0003988e 	.word	0x0003988e
 80187e4:	000bb679 	.word	0x000bb679
 80187e8:	08019070 	.word	0x08019070
 80187ec:	3ff00000 	.word	0x3ff00000
 80187f0:	40080000 	.word	0x40080000
 80187f4:	08019090 	.word	0x08019090
 80187f8:	08019080 	.word	0x08019080
 80187fc:	a3b3      	add	r3, pc, #716	; (adr r3, 8018acc <__ieee754_pow+0xa4c>)
 80187fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018802:	4640      	mov	r0, r8
 8018804:	4649      	mov	r1, r9
 8018806:	f7eb fd23 	bl	8004250 <__adddf3>
 801880a:	4622      	mov	r2, r4
 801880c:	ec41 0b1a 	vmov	d10, r0, r1
 8018810:	462b      	mov	r3, r5
 8018812:	4630      	mov	r0, r6
 8018814:	4639      	mov	r1, r7
 8018816:	f7eb fd19 	bl	800424c <__aeabi_dsub>
 801881a:	4602      	mov	r2, r0
 801881c:	460b      	mov	r3, r1
 801881e:	ec51 0b1a 	vmov	r0, r1, d10
 8018822:	f7ec f95b 	bl	8004adc <__aeabi_dcmpgt>
 8018826:	2800      	cmp	r0, #0
 8018828:	f47f ae04 	bne.w	8018434 <__ieee754_pow+0x3b4>
 801882c:	4aa2      	ldr	r2, [pc, #648]	; (8018ab8 <__ieee754_pow+0xa38>)
 801882e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8018832:	4293      	cmp	r3, r2
 8018834:	f340 8107 	ble.w	8018a46 <__ieee754_pow+0x9c6>
 8018838:	151b      	asrs	r3, r3, #20
 801883a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801883e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8018842:	fa4a fa03 	asr.w	sl, sl, r3
 8018846:	44da      	add	sl, fp
 8018848:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801884c:	489b      	ldr	r0, [pc, #620]	; (8018abc <__ieee754_pow+0xa3c>)
 801884e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018852:	4108      	asrs	r0, r1
 8018854:	ea00 030a 	and.w	r3, r0, sl
 8018858:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801885c:	f1c1 0114 	rsb	r1, r1, #20
 8018860:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8018864:	fa4a fa01 	asr.w	sl, sl, r1
 8018868:	f1bb 0f00 	cmp.w	fp, #0
 801886c:	f04f 0200 	mov.w	r2, #0
 8018870:	4620      	mov	r0, r4
 8018872:	4629      	mov	r1, r5
 8018874:	bfb8      	it	lt
 8018876:	f1ca 0a00 	rsblt	sl, sl, #0
 801887a:	f7eb fce7 	bl	800424c <__aeabi_dsub>
 801887e:	ec41 0b19 	vmov	d9, r0, r1
 8018882:	4642      	mov	r2, r8
 8018884:	464b      	mov	r3, r9
 8018886:	ec51 0b19 	vmov	r0, r1, d9
 801888a:	f7eb fce1 	bl	8004250 <__adddf3>
 801888e:	a37a      	add	r3, pc, #488	; (adr r3, 8018a78 <__ieee754_pow+0x9f8>)
 8018890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018894:	2000      	movs	r0, #0
 8018896:	4604      	mov	r4, r0
 8018898:	460d      	mov	r5, r1
 801889a:	f7eb fe8f 	bl	80045bc <__aeabi_dmul>
 801889e:	ec53 2b19 	vmov	r2, r3, d9
 80188a2:	4606      	mov	r6, r0
 80188a4:	460f      	mov	r7, r1
 80188a6:	4620      	mov	r0, r4
 80188a8:	4629      	mov	r1, r5
 80188aa:	f7eb fccf 	bl	800424c <__aeabi_dsub>
 80188ae:	4602      	mov	r2, r0
 80188b0:	460b      	mov	r3, r1
 80188b2:	4640      	mov	r0, r8
 80188b4:	4649      	mov	r1, r9
 80188b6:	f7eb fcc9 	bl	800424c <__aeabi_dsub>
 80188ba:	a371      	add	r3, pc, #452	; (adr r3, 8018a80 <__ieee754_pow+0xa00>)
 80188bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188c0:	f7eb fe7c 	bl	80045bc <__aeabi_dmul>
 80188c4:	a370      	add	r3, pc, #448	; (adr r3, 8018a88 <__ieee754_pow+0xa08>)
 80188c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ca:	4680      	mov	r8, r0
 80188cc:	4689      	mov	r9, r1
 80188ce:	4620      	mov	r0, r4
 80188d0:	4629      	mov	r1, r5
 80188d2:	f7eb fe73 	bl	80045bc <__aeabi_dmul>
 80188d6:	4602      	mov	r2, r0
 80188d8:	460b      	mov	r3, r1
 80188da:	4640      	mov	r0, r8
 80188dc:	4649      	mov	r1, r9
 80188de:	f7eb fcb7 	bl	8004250 <__adddf3>
 80188e2:	4604      	mov	r4, r0
 80188e4:	460d      	mov	r5, r1
 80188e6:	4602      	mov	r2, r0
 80188e8:	460b      	mov	r3, r1
 80188ea:	4630      	mov	r0, r6
 80188ec:	4639      	mov	r1, r7
 80188ee:	f7eb fcaf 	bl	8004250 <__adddf3>
 80188f2:	4632      	mov	r2, r6
 80188f4:	463b      	mov	r3, r7
 80188f6:	4680      	mov	r8, r0
 80188f8:	4689      	mov	r9, r1
 80188fa:	f7eb fca7 	bl	800424c <__aeabi_dsub>
 80188fe:	4602      	mov	r2, r0
 8018900:	460b      	mov	r3, r1
 8018902:	4620      	mov	r0, r4
 8018904:	4629      	mov	r1, r5
 8018906:	f7eb fca1 	bl	800424c <__aeabi_dsub>
 801890a:	4642      	mov	r2, r8
 801890c:	4606      	mov	r6, r0
 801890e:	460f      	mov	r7, r1
 8018910:	464b      	mov	r3, r9
 8018912:	4640      	mov	r0, r8
 8018914:	4649      	mov	r1, r9
 8018916:	f7eb fe51 	bl	80045bc <__aeabi_dmul>
 801891a:	a35d      	add	r3, pc, #372	; (adr r3, 8018a90 <__ieee754_pow+0xa10>)
 801891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018920:	4604      	mov	r4, r0
 8018922:	460d      	mov	r5, r1
 8018924:	f7eb fe4a 	bl	80045bc <__aeabi_dmul>
 8018928:	a35b      	add	r3, pc, #364	; (adr r3, 8018a98 <__ieee754_pow+0xa18>)
 801892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801892e:	f7eb fc8d 	bl	800424c <__aeabi_dsub>
 8018932:	4622      	mov	r2, r4
 8018934:	462b      	mov	r3, r5
 8018936:	f7eb fe41 	bl	80045bc <__aeabi_dmul>
 801893a:	a359      	add	r3, pc, #356	; (adr r3, 8018aa0 <__ieee754_pow+0xa20>)
 801893c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018940:	f7eb fc86 	bl	8004250 <__adddf3>
 8018944:	4622      	mov	r2, r4
 8018946:	462b      	mov	r3, r5
 8018948:	f7eb fe38 	bl	80045bc <__aeabi_dmul>
 801894c:	a356      	add	r3, pc, #344	; (adr r3, 8018aa8 <__ieee754_pow+0xa28>)
 801894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018952:	f7eb fc7b 	bl	800424c <__aeabi_dsub>
 8018956:	4622      	mov	r2, r4
 8018958:	462b      	mov	r3, r5
 801895a:	f7eb fe2f 	bl	80045bc <__aeabi_dmul>
 801895e:	a354      	add	r3, pc, #336	; (adr r3, 8018ab0 <__ieee754_pow+0xa30>)
 8018960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018964:	f7eb fc74 	bl	8004250 <__adddf3>
 8018968:	4622      	mov	r2, r4
 801896a:	462b      	mov	r3, r5
 801896c:	f7eb fe26 	bl	80045bc <__aeabi_dmul>
 8018970:	4602      	mov	r2, r0
 8018972:	460b      	mov	r3, r1
 8018974:	4640      	mov	r0, r8
 8018976:	4649      	mov	r1, r9
 8018978:	f7eb fc68 	bl	800424c <__aeabi_dsub>
 801897c:	4604      	mov	r4, r0
 801897e:	460d      	mov	r5, r1
 8018980:	4602      	mov	r2, r0
 8018982:	460b      	mov	r3, r1
 8018984:	4640      	mov	r0, r8
 8018986:	4649      	mov	r1, r9
 8018988:	f7eb fe18 	bl	80045bc <__aeabi_dmul>
 801898c:	2200      	movs	r2, #0
 801898e:	ec41 0b19 	vmov	d9, r0, r1
 8018992:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018996:	4620      	mov	r0, r4
 8018998:	4629      	mov	r1, r5
 801899a:	f7eb fc57 	bl	800424c <__aeabi_dsub>
 801899e:	4602      	mov	r2, r0
 80189a0:	460b      	mov	r3, r1
 80189a2:	ec51 0b19 	vmov	r0, r1, d9
 80189a6:	f7eb ff33 	bl	8004810 <__aeabi_ddiv>
 80189aa:	4632      	mov	r2, r6
 80189ac:	4604      	mov	r4, r0
 80189ae:	460d      	mov	r5, r1
 80189b0:	463b      	mov	r3, r7
 80189b2:	4640      	mov	r0, r8
 80189b4:	4649      	mov	r1, r9
 80189b6:	f7eb fe01 	bl	80045bc <__aeabi_dmul>
 80189ba:	4632      	mov	r2, r6
 80189bc:	463b      	mov	r3, r7
 80189be:	f7eb fc47 	bl	8004250 <__adddf3>
 80189c2:	4602      	mov	r2, r0
 80189c4:	460b      	mov	r3, r1
 80189c6:	4620      	mov	r0, r4
 80189c8:	4629      	mov	r1, r5
 80189ca:	f7eb fc3f 	bl	800424c <__aeabi_dsub>
 80189ce:	4642      	mov	r2, r8
 80189d0:	464b      	mov	r3, r9
 80189d2:	f7eb fc3b 	bl	800424c <__aeabi_dsub>
 80189d6:	460b      	mov	r3, r1
 80189d8:	4602      	mov	r2, r0
 80189da:	4939      	ldr	r1, [pc, #228]	; (8018ac0 <__ieee754_pow+0xa40>)
 80189dc:	2000      	movs	r0, #0
 80189de:	f7eb fc35 	bl	800424c <__aeabi_dsub>
 80189e2:	ec41 0b10 	vmov	d0, r0, r1
 80189e6:	ee10 3a90 	vmov	r3, s1
 80189ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80189ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80189f2:	da2b      	bge.n	8018a4c <__ieee754_pow+0x9cc>
 80189f4:	4650      	mov	r0, sl
 80189f6:	f000 f877 	bl	8018ae8 <scalbn>
 80189fa:	ec51 0b10 	vmov	r0, r1, d0
 80189fe:	ec53 2b18 	vmov	r2, r3, d8
 8018a02:	f7ff bbee 	b.w	80181e2 <__ieee754_pow+0x162>
 8018a06:	4b2f      	ldr	r3, [pc, #188]	; (8018ac4 <__ieee754_pow+0xa44>)
 8018a08:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8018a0c:	429e      	cmp	r6, r3
 8018a0e:	f77f af0d 	ble.w	801882c <__ieee754_pow+0x7ac>
 8018a12:	4b2d      	ldr	r3, [pc, #180]	; (8018ac8 <__ieee754_pow+0xa48>)
 8018a14:	440b      	add	r3, r1
 8018a16:	4303      	orrs	r3, r0
 8018a18:	d009      	beq.n	8018a2e <__ieee754_pow+0x9ae>
 8018a1a:	ec51 0b18 	vmov	r0, r1, d8
 8018a1e:	2200      	movs	r2, #0
 8018a20:	2300      	movs	r3, #0
 8018a22:	f7ec f83d 	bl	8004aa0 <__aeabi_dcmplt>
 8018a26:	3800      	subs	r0, #0
 8018a28:	bf18      	it	ne
 8018a2a:	2001      	movne	r0, #1
 8018a2c:	e448      	b.n	80182c0 <__ieee754_pow+0x240>
 8018a2e:	4622      	mov	r2, r4
 8018a30:	462b      	mov	r3, r5
 8018a32:	f7eb fc0b 	bl	800424c <__aeabi_dsub>
 8018a36:	4642      	mov	r2, r8
 8018a38:	464b      	mov	r3, r9
 8018a3a:	f7ec f845 	bl	8004ac8 <__aeabi_dcmpge>
 8018a3e:	2800      	cmp	r0, #0
 8018a40:	f43f aef4 	beq.w	801882c <__ieee754_pow+0x7ac>
 8018a44:	e7e9      	b.n	8018a1a <__ieee754_pow+0x99a>
 8018a46:	f04f 0a00 	mov.w	sl, #0
 8018a4a:	e71a      	b.n	8018882 <__ieee754_pow+0x802>
 8018a4c:	ec51 0b10 	vmov	r0, r1, d0
 8018a50:	4619      	mov	r1, r3
 8018a52:	e7d4      	b.n	80189fe <__ieee754_pow+0x97e>
 8018a54:	491a      	ldr	r1, [pc, #104]	; (8018ac0 <__ieee754_pow+0xa40>)
 8018a56:	2000      	movs	r0, #0
 8018a58:	f7ff bb31 	b.w	80180be <__ieee754_pow+0x3e>
 8018a5c:	2000      	movs	r0, #0
 8018a5e:	2100      	movs	r1, #0
 8018a60:	f7ff bb2d 	b.w	80180be <__ieee754_pow+0x3e>
 8018a64:	4630      	mov	r0, r6
 8018a66:	4639      	mov	r1, r7
 8018a68:	f7ff bb29 	b.w	80180be <__ieee754_pow+0x3e>
 8018a6c:	9204      	str	r2, [sp, #16]
 8018a6e:	f7ff bb7b 	b.w	8018168 <__ieee754_pow+0xe8>
 8018a72:	2300      	movs	r3, #0
 8018a74:	f7ff bb65 	b.w	8018142 <__ieee754_pow+0xc2>
 8018a78:	00000000 	.word	0x00000000
 8018a7c:	3fe62e43 	.word	0x3fe62e43
 8018a80:	fefa39ef 	.word	0xfefa39ef
 8018a84:	3fe62e42 	.word	0x3fe62e42
 8018a88:	0ca86c39 	.word	0x0ca86c39
 8018a8c:	be205c61 	.word	0xbe205c61
 8018a90:	72bea4d0 	.word	0x72bea4d0
 8018a94:	3e663769 	.word	0x3e663769
 8018a98:	c5d26bf1 	.word	0xc5d26bf1
 8018a9c:	3ebbbd41 	.word	0x3ebbbd41
 8018aa0:	af25de2c 	.word	0xaf25de2c
 8018aa4:	3f11566a 	.word	0x3f11566a
 8018aa8:	16bebd93 	.word	0x16bebd93
 8018aac:	3f66c16c 	.word	0x3f66c16c
 8018ab0:	5555553e 	.word	0x5555553e
 8018ab4:	3fc55555 	.word	0x3fc55555
 8018ab8:	3fe00000 	.word	0x3fe00000
 8018abc:	fff00000 	.word	0xfff00000
 8018ac0:	3ff00000 	.word	0x3ff00000
 8018ac4:	4090cbff 	.word	0x4090cbff
 8018ac8:	3f6f3400 	.word	0x3f6f3400
 8018acc:	652b82fe 	.word	0x652b82fe
 8018ad0:	3c971547 	.word	0x3c971547

08018ad4 <fabs>:
 8018ad4:	ec51 0b10 	vmov	r0, r1, d0
 8018ad8:	ee10 2a10 	vmov	r2, s0
 8018adc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018ae0:	ec43 2b10 	vmov	d0, r2, r3
 8018ae4:	4770      	bx	lr
	...

08018ae8 <scalbn>:
 8018ae8:	b570      	push	{r4, r5, r6, lr}
 8018aea:	ec55 4b10 	vmov	r4, r5, d0
 8018aee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018af2:	4606      	mov	r6, r0
 8018af4:	462b      	mov	r3, r5
 8018af6:	b999      	cbnz	r1, 8018b20 <scalbn+0x38>
 8018af8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018afc:	4323      	orrs	r3, r4
 8018afe:	d03f      	beq.n	8018b80 <scalbn+0x98>
 8018b00:	4b35      	ldr	r3, [pc, #212]	; (8018bd8 <scalbn+0xf0>)
 8018b02:	4629      	mov	r1, r5
 8018b04:	ee10 0a10 	vmov	r0, s0
 8018b08:	2200      	movs	r2, #0
 8018b0a:	f7eb fd57 	bl	80045bc <__aeabi_dmul>
 8018b0e:	4b33      	ldr	r3, [pc, #204]	; (8018bdc <scalbn+0xf4>)
 8018b10:	429e      	cmp	r6, r3
 8018b12:	4604      	mov	r4, r0
 8018b14:	460d      	mov	r5, r1
 8018b16:	da10      	bge.n	8018b3a <scalbn+0x52>
 8018b18:	a327      	add	r3, pc, #156	; (adr r3, 8018bb8 <scalbn+0xd0>)
 8018b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b1e:	e01f      	b.n	8018b60 <scalbn+0x78>
 8018b20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018b24:	4291      	cmp	r1, r2
 8018b26:	d10c      	bne.n	8018b42 <scalbn+0x5a>
 8018b28:	ee10 2a10 	vmov	r2, s0
 8018b2c:	4620      	mov	r0, r4
 8018b2e:	4629      	mov	r1, r5
 8018b30:	f7eb fb8e 	bl	8004250 <__adddf3>
 8018b34:	4604      	mov	r4, r0
 8018b36:	460d      	mov	r5, r1
 8018b38:	e022      	b.n	8018b80 <scalbn+0x98>
 8018b3a:	460b      	mov	r3, r1
 8018b3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8018b40:	3936      	subs	r1, #54	; 0x36
 8018b42:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018b46:	4296      	cmp	r6, r2
 8018b48:	dd0d      	ble.n	8018b66 <scalbn+0x7e>
 8018b4a:	2d00      	cmp	r5, #0
 8018b4c:	a11c      	add	r1, pc, #112	; (adr r1, 8018bc0 <scalbn+0xd8>)
 8018b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b52:	da02      	bge.n	8018b5a <scalbn+0x72>
 8018b54:	a11c      	add	r1, pc, #112	; (adr r1, 8018bc8 <scalbn+0xe0>)
 8018b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b5a:	a319      	add	r3, pc, #100	; (adr r3, 8018bc0 <scalbn+0xd8>)
 8018b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b60:	f7eb fd2c 	bl	80045bc <__aeabi_dmul>
 8018b64:	e7e6      	b.n	8018b34 <scalbn+0x4c>
 8018b66:	1872      	adds	r2, r6, r1
 8018b68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018b6c:	428a      	cmp	r2, r1
 8018b6e:	dcec      	bgt.n	8018b4a <scalbn+0x62>
 8018b70:	2a00      	cmp	r2, #0
 8018b72:	dd08      	ble.n	8018b86 <scalbn+0x9e>
 8018b74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018b78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018b7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8018b80:	ec45 4b10 	vmov	d0, r4, r5
 8018b84:	bd70      	pop	{r4, r5, r6, pc}
 8018b86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018b8a:	da08      	bge.n	8018b9e <scalbn+0xb6>
 8018b8c:	2d00      	cmp	r5, #0
 8018b8e:	a10a      	add	r1, pc, #40	; (adr r1, 8018bb8 <scalbn+0xd0>)
 8018b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b94:	dac0      	bge.n	8018b18 <scalbn+0x30>
 8018b96:	a10e      	add	r1, pc, #56	; (adr r1, 8018bd0 <scalbn+0xe8>)
 8018b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b9c:	e7bc      	b.n	8018b18 <scalbn+0x30>
 8018b9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018ba2:	3236      	adds	r2, #54	; 0x36
 8018ba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018ba8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018bac:	4620      	mov	r0, r4
 8018bae:	4b0c      	ldr	r3, [pc, #48]	; (8018be0 <scalbn+0xf8>)
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	e7d5      	b.n	8018b60 <scalbn+0x78>
 8018bb4:	f3af 8000 	nop.w
 8018bb8:	c2f8f359 	.word	0xc2f8f359
 8018bbc:	01a56e1f 	.word	0x01a56e1f
 8018bc0:	8800759c 	.word	0x8800759c
 8018bc4:	7e37e43c 	.word	0x7e37e43c
 8018bc8:	8800759c 	.word	0x8800759c
 8018bcc:	fe37e43c 	.word	0xfe37e43c
 8018bd0:	c2f8f359 	.word	0xc2f8f359
 8018bd4:	81a56e1f 	.word	0x81a56e1f
 8018bd8:	43500000 	.word	0x43500000
 8018bdc:	ffff3cb0 	.word	0xffff3cb0
 8018be0:	3c900000 	.word	0x3c900000

08018be4 <with_errno>:
 8018be4:	b570      	push	{r4, r5, r6, lr}
 8018be6:	4604      	mov	r4, r0
 8018be8:	460d      	mov	r5, r1
 8018bea:	4616      	mov	r6, r2
 8018bec:	f7ff f938 	bl	8017e60 <__errno>
 8018bf0:	4629      	mov	r1, r5
 8018bf2:	6006      	str	r6, [r0, #0]
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	bd70      	pop	{r4, r5, r6, pc}

08018bf8 <xflow>:
 8018bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bfa:	4614      	mov	r4, r2
 8018bfc:	461d      	mov	r5, r3
 8018bfe:	b108      	cbz	r0, 8018c04 <xflow+0xc>
 8018c00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018c04:	e9cd 2300 	strd	r2, r3, [sp]
 8018c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	4629      	mov	r1, r5
 8018c10:	f7eb fcd4 	bl	80045bc <__aeabi_dmul>
 8018c14:	2222      	movs	r2, #34	; 0x22
 8018c16:	b003      	add	sp, #12
 8018c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c1c:	f7ff bfe2 	b.w	8018be4 <with_errno>

08018c20 <__math_uflow>:
 8018c20:	b508      	push	{r3, lr}
 8018c22:	2200      	movs	r2, #0
 8018c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8018c28:	f7ff ffe6 	bl	8018bf8 <xflow>
 8018c2c:	ec41 0b10 	vmov	d0, r0, r1
 8018c30:	bd08      	pop	{r3, pc}

08018c32 <__math_oflow>:
 8018c32:	b508      	push	{r3, lr}
 8018c34:	2200      	movs	r2, #0
 8018c36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8018c3a:	f7ff ffdd 	bl	8018bf8 <xflow>
 8018c3e:	ec41 0b10 	vmov	d0, r0, r1
 8018c42:	bd08      	pop	{r3, pc}

08018c44 <__ieee754_sqrt>:
 8018c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c48:	ec55 4b10 	vmov	r4, r5, d0
 8018c4c:	4e67      	ldr	r6, [pc, #412]	; (8018dec <__ieee754_sqrt+0x1a8>)
 8018c4e:	43ae      	bics	r6, r5
 8018c50:	ee10 0a10 	vmov	r0, s0
 8018c54:	ee10 2a10 	vmov	r2, s0
 8018c58:	4629      	mov	r1, r5
 8018c5a:	462b      	mov	r3, r5
 8018c5c:	d10d      	bne.n	8018c7a <__ieee754_sqrt+0x36>
 8018c5e:	f7eb fcad 	bl	80045bc <__aeabi_dmul>
 8018c62:	4602      	mov	r2, r0
 8018c64:	460b      	mov	r3, r1
 8018c66:	4620      	mov	r0, r4
 8018c68:	4629      	mov	r1, r5
 8018c6a:	f7eb faf1 	bl	8004250 <__adddf3>
 8018c6e:	4604      	mov	r4, r0
 8018c70:	460d      	mov	r5, r1
 8018c72:	ec45 4b10 	vmov	d0, r4, r5
 8018c76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c7a:	2d00      	cmp	r5, #0
 8018c7c:	dc0b      	bgt.n	8018c96 <__ieee754_sqrt+0x52>
 8018c7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8018c82:	4326      	orrs	r6, r4
 8018c84:	d0f5      	beq.n	8018c72 <__ieee754_sqrt+0x2e>
 8018c86:	b135      	cbz	r5, 8018c96 <__ieee754_sqrt+0x52>
 8018c88:	f7eb fae0 	bl	800424c <__aeabi_dsub>
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	460b      	mov	r3, r1
 8018c90:	f7eb fdbe 	bl	8004810 <__aeabi_ddiv>
 8018c94:	e7eb      	b.n	8018c6e <__ieee754_sqrt+0x2a>
 8018c96:	1509      	asrs	r1, r1, #20
 8018c98:	f000 808d 	beq.w	8018db6 <__ieee754_sqrt+0x172>
 8018c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ca0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8018ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018ca8:	07c9      	lsls	r1, r1, #31
 8018caa:	bf5c      	itt	pl
 8018cac:	005b      	lslpl	r3, r3, #1
 8018cae:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8018cb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018cb6:	bf58      	it	pl
 8018cb8:	0052      	lslpl	r2, r2, #1
 8018cba:	2500      	movs	r5, #0
 8018cbc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8018cc0:	1076      	asrs	r6, r6, #1
 8018cc2:	0052      	lsls	r2, r2, #1
 8018cc4:	f04f 0e16 	mov.w	lr, #22
 8018cc8:	46ac      	mov	ip, r5
 8018cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8018cce:	eb0c 0001 	add.w	r0, ip, r1
 8018cd2:	4298      	cmp	r0, r3
 8018cd4:	bfde      	ittt	le
 8018cd6:	1a1b      	suble	r3, r3, r0
 8018cd8:	eb00 0c01 	addle.w	ip, r0, r1
 8018cdc:	186d      	addle	r5, r5, r1
 8018cde:	005b      	lsls	r3, r3, #1
 8018ce0:	f1be 0e01 	subs.w	lr, lr, #1
 8018ce4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8018ce8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018cec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018cf0:	d1ed      	bne.n	8018cce <__ieee754_sqrt+0x8a>
 8018cf2:	4674      	mov	r4, lr
 8018cf4:	2720      	movs	r7, #32
 8018cf6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018cfa:	4563      	cmp	r3, ip
 8018cfc:	eb01 000e 	add.w	r0, r1, lr
 8018d00:	dc02      	bgt.n	8018d08 <__ieee754_sqrt+0xc4>
 8018d02:	d113      	bne.n	8018d2c <__ieee754_sqrt+0xe8>
 8018d04:	4290      	cmp	r0, r2
 8018d06:	d811      	bhi.n	8018d2c <__ieee754_sqrt+0xe8>
 8018d08:	2800      	cmp	r0, #0
 8018d0a:	eb00 0e01 	add.w	lr, r0, r1
 8018d0e:	da57      	bge.n	8018dc0 <__ieee754_sqrt+0x17c>
 8018d10:	f1be 0f00 	cmp.w	lr, #0
 8018d14:	db54      	blt.n	8018dc0 <__ieee754_sqrt+0x17c>
 8018d16:	f10c 0801 	add.w	r8, ip, #1
 8018d1a:	eba3 030c 	sub.w	r3, r3, ip
 8018d1e:	4290      	cmp	r0, r2
 8018d20:	bf88      	it	hi
 8018d22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8018d26:	1a12      	subs	r2, r2, r0
 8018d28:	440c      	add	r4, r1
 8018d2a:	46c4      	mov	ip, r8
 8018d2c:	005b      	lsls	r3, r3, #1
 8018d2e:	3f01      	subs	r7, #1
 8018d30:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8018d34:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8018d38:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8018d3c:	d1dd      	bne.n	8018cfa <__ieee754_sqrt+0xb6>
 8018d3e:	4313      	orrs	r3, r2
 8018d40:	d01b      	beq.n	8018d7a <__ieee754_sqrt+0x136>
 8018d42:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8018df0 <__ieee754_sqrt+0x1ac>
 8018d46:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8018df4 <__ieee754_sqrt+0x1b0>
 8018d4a:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d4e:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d52:	f7eb fa7b 	bl	800424c <__aeabi_dsub>
 8018d56:	e9da 8900 	ldrd	r8, r9, [sl]
 8018d5a:	4602      	mov	r2, r0
 8018d5c:	460b      	mov	r3, r1
 8018d5e:	4640      	mov	r0, r8
 8018d60:	4649      	mov	r1, r9
 8018d62:	f7eb fea7 	bl	8004ab4 <__aeabi_dcmple>
 8018d66:	b140      	cbz	r0, 8018d7a <__ieee754_sqrt+0x136>
 8018d68:	f1b4 3fff 	cmp.w	r4, #4294967295
 8018d6c:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d70:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d74:	d126      	bne.n	8018dc4 <__ieee754_sqrt+0x180>
 8018d76:	3501      	adds	r5, #1
 8018d78:	463c      	mov	r4, r7
 8018d7a:	106a      	asrs	r2, r5, #1
 8018d7c:	0863      	lsrs	r3, r4, #1
 8018d7e:	07e9      	lsls	r1, r5, #31
 8018d80:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018d84:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018d88:	bf48      	it	mi
 8018d8a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8018d8e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8018d92:	461c      	mov	r4, r3
 8018d94:	e76d      	b.n	8018c72 <__ieee754_sqrt+0x2e>
 8018d96:	0ad3      	lsrs	r3, r2, #11
 8018d98:	3815      	subs	r0, #21
 8018d9a:	0552      	lsls	r2, r2, #21
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d0fa      	beq.n	8018d96 <__ieee754_sqrt+0x152>
 8018da0:	02dc      	lsls	r4, r3, #11
 8018da2:	d50a      	bpl.n	8018dba <__ieee754_sqrt+0x176>
 8018da4:	f1c1 0420 	rsb	r4, r1, #32
 8018da8:	fa22 f404 	lsr.w	r4, r2, r4
 8018dac:	1e4d      	subs	r5, r1, #1
 8018dae:	408a      	lsls	r2, r1
 8018db0:	4323      	orrs	r3, r4
 8018db2:	1b41      	subs	r1, r0, r5
 8018db4:	e772      	b.n	8018c9c <__ieee754_sqrt+0x58>
 8018db6:	4608      	mov	r0, r1
 8018db8:	e7f0      	b.n	8018d9c <__ieee754_sqrt+0x158>
 8018dba:	005b      	lsls	r3, r3, #1
 8018dbc:	3101      	adds	r1, #1
 8018dbe:	e7ef      	b.n	8018da0 <__ieee754_sqrt+0x15c>
 8018dc0:	46e0      	mov	r8, ip
 8018dc2:	e7aa      	b.n	8018d1a <__ieee754_sqrt+0xd6>
 8018dc4:	f7eb fa44 	bl	8004250 <__adddf3>
 8018dc8:	e9da 8900 	ldrd	r8, r9, [sl]
 8018dcc:	4602      	mov	r2, r0
 8018dce:	460b      	mov	r3, r1
 8018dd0:	4640      	mov	r0, r8
 8018dd2:	4649      	mov	r1, r9
 8018dd4:	f7eb fe64 	bl	8004aa0 <__aeabi_dcmplt>
 8018dd8:	b120      	cbz	r0, 8018de4 <__ieee754_sqrt+0x1a0>
 8018dda:	1ca0      	adds	r0, r4, #2
 8018ddc:	bf08      	it	eq
 8018dde:	3501      	addeq	r5, #1
 8018de0:	3402      	adds	r4, #2
 8018de2:	e7ca      	b.n	8018d7a <__ieee754_sqrt+0x136>
 8018de4:	3401      	adds	r4, #1
 8018de6:	f024 0401 	bic.w	r4, r4, #1
 8018dea:	e7c6      	b.n	8018d7a <__ieee754_sqrt+0x136>
 8018dec:	7ff00000 	.word	0x7ff00000
 8018df0:	200001e0 	.word	0x200001e0
 8018df4:	200001e8 	.word	0x200001e8

08018df8 <_init>:
 8018df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dfa:	bf00      	nop
 8018dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018dfe:	bc08      	pop	{r3}
 8018e00:	469e      	mov	lr, r3
 8018e02:	4770      	bx	lr

08018e04 <_fini>:
 8018e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e06:	bf00      	nop
 8018e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e0a:	bc08      	pop	{r3}
 8018e0c:	469e      	mov	lr, r3
 8018e0e:	4770      	bx	lr
