
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edec  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08012fd0  08012fd0  00012fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132b8  080132b8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080132b8  080132b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132c0  080132c0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132c0  080132c0  000132c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080132c4  080132c4  000132c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080132c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b10  20000078  08013340  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003b88  08013340  00023b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002df3a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005baf  00000000  00000000  0004dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021e8  00000000  00000000  00053b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f60  00000000  00000000  00055d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fb21  00000000  00000000  00057ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d843  00000000  00000000  00087801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00123155  00000000  00000000  000b5044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001d8199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009620  00000000  00000000  001d8260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	08012fb4 	.word	0x08012fb4

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	08012fb4 	.word	0x08012fb4

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <strlen>:
 8004234:	4603      	mov	r3, r0
 8004236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800423a:	2a00      	cmp	r2, #0
 800423c:	d1fb      	bne.n	8004236 <strlen+0x2>
 800423e:	1a18      	subs	r0, r3, r0
 8004240:	3801      	subs	r0, #1
 8004242:	4770      	bx	lr

08004244 <__aeabi_drsub>:
 8004244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004248:	e002      	b.n	8004250 <__adddf3>
 800424a:	bf00      	nop

0800424c <__aeabi_dsub>:
 800424c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004250 <__adddf3>:
 8004250:	b530      	push	{r4, r5, lr}
 8004252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800425a:	ea94 0f05 	teq	r4, r5
 800425e:	bf08      	it	eq
 8004260:	ea90 0f02 	teqeq	r0, r2
 8004264:	bf1f      	itttt	ne
 8004266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800426a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800426e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004276:	f000 80e2 	beq.w	800443e <__adddf3+0x1ee>
 800427a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800427e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004282:	bfb8      	it	lt
 8004284:	426d      	neglt	r5, r5
 8004286:	dd0c      	ble.n	80042a2 <__adddf3+0x52>
 8004288:	442c      	add	r4, r5
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	ea82 0000 	eor.w	r0, r2, r0
 8004296:	ea83 0101 	eor.w	r1, r3, r1
 800429a:	ea80 0202 	eor.w	r2, r0, r2
 800429e:	ea81 0303 	eor.w	r3, r1, r3
 80042a2:	2d36      	cmp	r5, #54	; 0x36
 80042a4:	bf88      	it	hi
 80042a6:	bd30      	pophi	{r4, r5, pc}
 80042a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042b8:	d002      	beq.n	80042c0 <__adddf3+0x70>
 80042ba:	4240      	negs	r0, r0
 80042bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042cc:	d002      	beq.n	80042d4 <__adddf3+0x84>
 80042ce:	4252      	negs	r2, r2
 80042d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042d4:	ea94 0f05 	teq	r4, r5
 80042d8:	f000 80a7 	beq.w	800442a <__adddf3+0x1da>
 80042dc:	f1a4 0401 	sub.w	r4, r4, #1
 80042e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042e4:	db0d      	blt.n	8004302 <__adddf3+0xb2>
 80042e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042ea:	fa22 f205 	lsr.w	r2, r2, r5
 80042ee:	1880      	adds	r0, r0, r2
 80042f0:	f141 0100 	adc.w	r1, r1, #0
 80042f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042f8:	1880      	adds	r0, r0, r2
 80042fa:	fa43 f305 	asr.w	r3, r3, r5
 80042fe:	4159      	adcs	r1, r3
 8004300:	e00e      	b.n	8004320 <__adddf3+0xd0>
 8004302:	f1a5 0520 	sub.w	r5, r5, #32
 8004306:	f10e 0e20 	add.w	lr, lr, #32
 800430a:	2a01      	cmp	r2, #1
 800430c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004310:	bf28      	it	cs
 8004312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004316:	fa43 f305 	asr.w	r3, r3, r5
 800431a:	18c0      	adds	r0, r0, r3
 800431c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004324:	d507      	bpl.n	8004336 <__adddf3+0xe6>
 8004326:	f04f 0e00 	mov.w	lr, #0
 800432a:	f1dc 0c00 	rsbs	ip, ip, #0
 800432e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004332:	eb6e 0101 	sbc.w	r1, lr, r1
 8004336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800433a:	d31b      	bcc.n	8004374 <__adddf3+0x124>
 800433c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004340:	d30c      	bcc.n	800435c <__adddf3+0x10c>
 8004342:	0849      	lsrs	r1, r1, #1
 8004344:	ea5f 0030 	movs.w	r0, r0, rrx
 8004348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800434c:	f104 0401 	add.w	r4, r4, #1
 8004350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004358:	f080 809a 	bcs.w	8004490 <__adddf3+0x240>
 800435c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004360:	bf08      	it	eq
 8004362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004366:	f150 0000 	adcs.w	r0, r0, #0
 800436a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800436e:	ea41 0105 	orr.w	r1, r1, r5
 8004372:	bd30      	pop	{r4, r5, pc}
 8004374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004378:	4140      	adcs	r0, r0
 800437a:	eb41 0101 	adc.w	r1, r1, r1
 800437e:	3c01      	subs	r4, #1
 8004380:	bf28      	it	cs
 8004382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004386:	d2e9      	bcs.n	800435c <__adddf3+0x10c>
 8004388:	f091 0f00 	teq	r1, #0
 800438c:	bf04      	itt	eq
 800438e:	4601      	moveq	r1, r0
 8004390:	2000      	moveq	r0, #0
 8004392:	fab1 f381 	clz	r3, r1
 8004396:	bf08      	it	eq
 8004398:	3320      	addeq	r3, #32
 800439a:	f1a3 030b 	sub.w	r3, r3, #11
 800439e:	f1b3 0220 	subs.w	r2, r3, #32
 80043a2:	da0c      	bge.n	80043be <__adddf3+0x16e>
 80043a4:	320c      	adds	r2, #12
 80043a6:	dd08      	ble.n	80043ba <__adddf3+0x16a>
 80043a8:	f102 0c14 	add.w	ip, r2, #20
 80043ac:	f1c2 020c 	rsb	r2, r2, #12
 80043b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043b4:	fa21 f102 	lsr.w	r1, r1, r2
 80043b8:	e00c      	b.n	80043d4 <__adddf3+0x184>
 80043ba:	f102 0214 	add.w	r2, r2, #20
 80043be:	bfd8      	it	le
 80043c0:	f1c2 0c20 	rsble	ip, r2, #32
 80043c4:	fa01 f102 	lsl.w	r1, r1, r2
 80043c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043cc:	bfdc      	itt	le
 80043ce:	ea41 010c 	orrle.w	r1, r1, ip
 80043d2:	4090      	lslle	r0, r2
 80043d4:	1ae4      	subs	r4, r4, r3
 80043d6:	bfa2      	ittt	ge
 80043d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043dc:	4329      	orrge	r1, r5
 80043de:	bd30      	popge	{r4, r5, pc}
 80043e0:	ea6f 0404 	mvn.w	r4, r4
 80043e4:	3c1f      	subs	r4, #31
 80043e6:	da1c      	bge.n	8004422 <__adddf3+0x1d2>
 80043e8:	340c      	adds	r4, #12
 80043ea:	dc0e      	bgt.n	800440a <__adddf3+0x1ba>
 80043ec:	f104 0414 	add.w	r4, r4, #20
 80043f0:	f1c4 0220 	rsb	r2, r4, #32
 80043f4:	fa20 f004 	lsr.w	r0, r0, r4
 80043f8:	fa01 f302 	lsl.w	r3, r1, r2
 80043fc:	ea40 0003 	orr.w	r0, r0, r3
 8004400:	fa21 f304 	lsr.w	r3, r1, r4
 8004404:	ea45 0103 	orr.w	r1, r5, r3
 8004408:	bd30      	pop	{r4, r5, pc}
 800440a:	f1c4 040c 	rsb	r4, r4, #12
 800440e:	f1c4 0220 	rsb	r2, r4, #32
 8004412:	fa20 f002 	lsr.w	r0, r0, r2
 8004416:	fa01 f304 	lsl.w	r3, r1, r4
 800441a:	ea40 0003 	orr.w	r0, r0, r3
 800441e:	4629      	mov	r1, r5
 8004420:	bd30      	pop	{r4, r5, pc}
 8004422:	fa21 f004 	lsr.w	r0, r1, r4
 8004426:	4629      	mov	r1, r5
 8004428:	bd30      	pop	{r4, r5, pc}
 800442a:	f094 0f00 	teq	r4, #0
 800442e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004432:	bf06      	itte	eq
 8004434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004438:	3401      	addeq	r4, #1
 800443a:	3d01      	subne	r5, #1
 800443c:	e74e      	b.n	80042dc <__adddf3+0x8c>
 800443e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004442:	bf18      	it	ne
 8004444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004448:	d029      	beq.n	800449e <__adddf3+0x24e>
 800444a:	ea94 0f05 	teq	r4, r5
 800444e:	bf08      	it	eq
 8004450:	ea90 0f02 	teqeq	r0, r2
 8004454:	d005      	beq.n	8004462 <__adddf3+0x212>
 8004456:	ea54 0c00 	orrs.w	ip, r4, r0
 800445a:	bf04      	itt	eq
 800445c:	4619      	moveq	r1, r3
 800445e:	4610      	moveq	r0, r2
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	ea91 0f03 	teq	r1, r3
 8004466:	bf1e      	ittt	ne
 8004468:	2100      	movne	r1, #0
 800446a:	2000      	movne	r0, #0
 800446c:	bd30      	popne	{r4, r5, pc}
 800446e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004472:	d105      	bne.n	8004480 <__adddf3+0x230>
 8004474:	0040      	lsls	r0, r0, #1
 8004476:	4149      	adcs	r1, r1
 8004478:	bf28      	it	cs
 800447a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004484:	bf3c      	itt	cc
 8004486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800448a:	bd30      	popcc	{r4, r5, pc}
 800448c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004498:	f04f 0000 	mov.w	r0, #0
 800449c:	bd30      	pop	{r4, r5, pc}
 800449e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044a2:	bf1a      	itte	ne
 80044a4:	4619      	movne	r1, r3
 80044a6:	4610      	movne	r0, r2
 80044a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044ac:	bf1c      	itt	ne
 80044ae:	460b      	movne	r3, r1
 80044b0:	4602      	movne	r2, r0
 80044b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044b6:	bf06      	itte	eq
 80044b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044bc:	ea91 0f03 	teqeq	r1, r3
 80044c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044c4:	bd30      	pop	{r4, r5, pc}
 80044c6:	bf00      	nop

080044c8 <__aeabi_ui2d>:
 80044c8:	f090 0f00 	teq	r0, #0
 80044cc:	bf04      	itt	eq
 80044ce:	2100      	moveq	r1, #0
 80044d0:	4770      	bxeq	lr
 80044d2:	b530      	push	{r4, r5, lr}
 80044d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044dc:	f04f 0500 	mov.w	r5, #0
 80044e0:	f04f 0100 	mov.w	r1, #0
 80044e4:	e750      	b.n	8004388 <__adddf3+0x138>
 80044e6:	bf00      	nop

080044e8 <__aeabi_i2d>:
 80044e8:	f090 0f00 	teq	r0, #0
 80044ec:	bf04      	itt	eq
 80044ee:	2100      	moveq	r1, #0
 80044f0:	4770      	bxeq	lr
 80044f2:	b530      	push	{r4, r5, lr}
 80044f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8004500:	bf48      	it	mi
 8004502:	4240      	negmi	r0, r0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	e73e      	b.n	8004388 <__adddf3+0x138>
 800450a:	bf00      	nop

0800450c <__aeabi_f2d>:
 800450c:	0042      	lsls	r2, r0, #1
 800450e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004512:	ea4f 0131 	mov.w	r1, r1, rrx
 8004516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800451a:	bf1f      	itttt	ne
 800451c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004528:	4770      	bxne	lr
 800452a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800452e:	bf08      	it	eq
 8004530:	4770      	bxeq	lr
 8004532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004536:	bf04      	itt	eq
 8004538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800453c:	4770      	bxeq	lr
 800453e:	b530      	push	{r4, r5, lr}
 8004540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800454c:	e71c      	b.n	8004388 <__adddf3+0x138>
 800454e:	bf00      	nop

08004550 <__aeabi_ul2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f04f 0500 	mov.w	r5, #0
 800455e:	e00a      	b.n	8004576 <__aeabi_l2d+0x16>

08004560 <__aeabi_l2d>:
 8004560:	ea50 0201 	orrs.w	r2, r0, r1
 8004564:	bf08      	it	eq
 8004566:	4770      	bxeq	lr
 8004568:	b530      	push	{r4, r5, lr}
 800456a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800456e:	d502      	bpl.n	8004576 <__aeabi_l2d+0x16>
 8004570:	4240      	negs	r0, r0
 8004572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800457a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800457e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004582:	f43f aed8 	beq.w	8004336 <__adddf3+0xe6>
 8004586:	f04f 0203 	mov.w	r2, #3
 800458a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800458e:	bf18      	it	ne
 8004590:	3203      	addne	r2, #3
 8004592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004596:	bf18      	it	ne
 8004598:	3203      	addne	r2, #3
 800459a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800459e:	f1c2 0320 	rsb	r3, r2, #32
 80045a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80045a6:	fa20 f002 	lsr.w	r0, r0, r2
 80045aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80045ae:	ea40 000e 	orr.w	r0, r0, lr
 80045b2:	fa21 f102 	lsr.w	r1, r1, r2
 80045b6:	4414      	add	r4, r2
 80045b8:	e6bd      	b.n	8004336 <__adddf3+0xe6>
 80045ba:	bf00      	nop

080045bc <__aeabi_dmul>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ca:	bf1d      	ittte	ne
 80045cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045d0:	ea94 0f0c 	teqne	r4, ip
 80045d4:	ea95 0f0c 	teqne	r5, ip
 80045d8:	f000 f8de 	bleq	8004798 <__aeabi_dmul+0x1dc>
 80045dc:	442c      	add	r4, r5
 80045de:	ea81 0603 	eor.w	r6, r1, r3
 80045e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045ee:	bf18      	it	ne
 80045f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fc:	d038      	beq.n	8004670 <__aeabi_dmul+0xb4>
 80045fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8004602:	f04f 0500 	mov.w	r5, #0
 8004606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800460a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800460e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004612:	f04f 0600 	mov.w	r6, #0
 8004616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800461a:	f09c 0f00 	teq	ip, #0
 800461e:	bf18      	it	ne
 8004620:	f04e 0e01 	orrne.w	lr, lr, #1
 8004624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800462c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004630:	d204      	bcs.n	800463c <__aeabi_dmul+0x80>
 8004632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004636:	416d      	adcs	r5, r5
 8004638:	eb46 0606 	adc.w	r6, r6, r6
 800463c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800464c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004654:	bf88      	it	hi
 8004656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800465a:	d81e      	bhi.n	800469a <__aeabi_dmul+0xde>
 800465c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004660:	bf08      	it	eq
 8004662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004666:	f150 0000 	adcs.w	r0, r0, #0
 800466a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800466e:	bd70      	pop	{r4, r5, r6, pc}
 8004670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004674:	ea46 0101 	orr.w	r1, r6, r1
 8004678:	ea40 0002 	orr.w	r0, r0, r2
 800467c:	ea81 0103 	eor.w	r1, r1, r3
 8004680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004684:	bfc2      	ittt	gt
 8004686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800468a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800468e:	bd70      	popgt	{r4, r5, r6, pc}
 8004690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004694:	f04f 0e00 	mov.w	lr, #0
 8004698:	3c01      	subs	r4, #1
 800469a:	f300 80ab 	bgt.w	80047f4 <__aeabi_dmul+0x238>
 800469e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80046a2:	bfde      	ittt	le
 80046a4:	2000      	movle	r0, #0
 80046a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80046aa:	bd70      	pople	{r4, r5, r6, pc}
 80046ac:	f1c4 0400 	rsb	r4, r4, #0
 80046b0:	3c20      	subs	r4, #32
 80046b2:	da35      	bge.n	8004720 <__aeabi_dmul+0x164>
 80046b4:	340c      	adds	r4, #12
 80046b6:	dc1b      	bgt.n	80046f0 <__aeabi_dmul+0x134>
 80046b8:	f104 0414 	add.w	r4, r4, #20
 80046bc:	f1c4 0520 	rsb	r5, r4, #32
 80046c0:	fa00 f305 	lsl.w	r3, r0, r5
 80046c4:	fa20 f004 	lsr.w	r0, r0, r4
 80046c8:	fa01 f205 	lsl.w	r2, r1, r5
 80046cc:	ea40 0002 	orr.w	r0, r0, r2
 80046d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046dc:	fa21 f604 	lsr.w	r6, r1, r4
 80046e0:	eb42 0106 	adc.w	r1, r2, r6
 80046e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046e8:	bf08      	it	eq
 80046ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	f1c4 040c 	rsb	r4, r4, #12
 80046f4:	f1c4 0520 	rsb	r5, r4, #32
 80046f8:	fa00 f304 	lsl.w	r3, r0, r4
 80046fc:	fa20 f005 	lsr.w	r0, r0, r5
 8004700:	fa01 f204 	lsl.w	r2, r1, r4
 8004704:	ea40 0002 	orr.w	r0, r0, r2
 8004708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800470c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004710:	f141 0100 	adc.w	r1, r1, #0
 8004714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004718:	bf08      	it	eq
 800471a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	f1c4 0520 	rsb	r5, r4, #32
 8004724:	fa00 f205 	lsl.w	r2, r0, r5
 8004728:	ea4e 0e02 	orr.w	lr, lr, r2
 800472c:	fa20 f304 	lsr.w	r3, r0, r4
 8004730:	fa01 f205 	lsl.w	r2, r1, r5
 8004734:	ea43 0302 	orr.w	r3, r3, r2
 8004738:	fa21 f004 	lsr.w	r0, r1, r4
 800473c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004740:	fa21 f204 	lsr.w	r2, r1, r4
 8004744:	ea20 0002 	bic.w	r0, r0, r2
 8004748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800474c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004750:	bf08      	it	eq
 8004752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	f094 0f00 	teq	r4, #0
 800475c:	d10f      	bne.n	800477e <__aeabi_dmul+0x1c2>
 800475e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004762:	0040      	lsls	r0, r0, #1
 8004764:	eb41 0101 	adc.w	r1, r1, r1
 8004768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800476c:	bf08      	it	eq
 800476e:	3c01      	subeq	r4, #1
 8004770:	d0f7      	beq.n	8004762 <__aeabi_dmul+0x1a6>
 8004772:	ea41 0106 	orr.w	r1, r1, r6
 8004776:	f095 0f00 	teq	r5, #0
 800477a:	bf18      	it	ne
 800477c:	4770      	bxne	lr
 800477e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004782:	0052      	lsls	r2, r2, #1
 8004784:	eb43 0303 	adc.w	r3, r3, r3
 8004788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800478c:	bf08      	it	eq
 800478e:	3d01      	subeq	r5, #1
 8004790:	d0f7      	beq.n	8004782 <__aeabi_dmul+0x1c6>
 8004792:	ea43 0306 	orr.w	r3, r3, r6
 8004796:	4770      	bx	lr
 8004798:	ea94 0f0c 	teq	r4, ip
 800479c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80047a0:	bf18      	it	ne
 80047a2:	ea95 0f0c 	teqne	r5, ip
 80047a6:	d00c      	beq.n	80047c2 <__aeabi_dmul+0x206>
 80047a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047ac:	bf18      	it	ne
 80047ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047b2:	d1d1      	bne.n	8004758 <__aeabi_dmul+0x19c>
 80047b4:	ea81 0103 	eor.w	r1, r1, r3
 80047b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047bc:	f04f 0000 	mov.w	r0, #0
 80047c0:	bd70      	pop	{r4, r5, r6, pc}
 80047c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047c6:	bf06      	itte	eq
 80047c8:	4610      	moveq	r0, r2
 80047ca:	4619      	moveq	r1, r3
 80047cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047d0:	d019      	beq.n	8004806 <__aeabi_dmul+0x24a>
 80047d2:	ea94 0f0c 	teq	r4, ip
 80047d6:	d102      	bne.n	80047de <__aeabi_dmul+0x222>
 80047d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047dc:	d113      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047de:	ea95 0f0c 	teq	r5, ip
 80047e2:	d105      	bne.n	80047f0 <__aeabi_dmul+0x234>
 80047e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047e8:	bf1c      	itt	ne
 80047ea:	4610      	movne	r0, r2
 80047ec:	4619      	movne	r1, r3
 80047ee:	d10a      	bne.n	8004806 <__aeabi_dmul+0x24a>
 80047f0:	ea81 0103 	eor.w	r1, r1, r3
 80047f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004800:	f04f 0000 	mov.w	r0, #0
 8004804:	bd70      	pop	{r4, r5, r6, pc}
 8004806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800480a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800480e:	bd70      	pop	{r4, r5, r6, pc}

08004810 <__aeabi_ddiv>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800481a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800481e:	bf1d      	ittte	ne
 8004820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004824:	ea94 0f0c 	teqne	r4, ip
 8004828:	ea95 0f0c 	teqne	r5, ip
 800482c:	f000 f8a7 	bleq	800497e <__aeabi_ddiv+0x16e>
 8004830:	eba4 0405 	sub.w	r4, r4, r5
 8004834:	ea81 0e03 	eor.w	lr, r1, r3
 8004838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800483c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004840:	f000 8088 	beq.w	8004954 <__aeabi_ddiv+0x144>
 8004844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800484c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800485c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004868:	429d      	cmp	r5, r3
 800486a:	bf08      	it	eq
 800486c:	4296      	cmpeq	r6, r2
 800486e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004876:	d202      	bcs.n	800487e <__aeabi_ddiv+0x6e>
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	ea4f 0232 	mov.w	r2, r2, rrx
 800487e:	1ab6      	subs	r6, r6, r2
 8004880:	eb65 0503 	sbc.w	r5, r5, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	ea4f 0232 	mov.w	r2, r2, rrx
 800488a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800488e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004892:	ebb6 0e02 	subs.w	lr, r6, r2
 8004896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800489a:	bf22      	ittt	cs
 800489c:	1ab6      	subcs	r6, r6, r2
 800489e:	4675      	movcs	r5, lr
 80048a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048b2:	bf22      	ittt	cs
 80048b4:	1ab6      	subcs	r6, r6, r2
 80048b6:	4675      	movcs	r5, lr
 80048b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	ea4f 0232 	mov.w	r2, r2, rrx
 80048c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ca:	bf22      	ittt	cs
 80048cc:	1ab6      	subcs	r6, r6, r2
 80048ce:	4675      	movcs	r5, lr
 80048d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048da:	ebb6 0e02 	subs.w	lr, r6, r2
 80048de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048e2:	bf22      	ittt	cs
 80048e4:	1ab6      	subcs	r6, r6, r2
 80048e6:	4675      	movcs	r5, lr
 80048e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80048f0:	d018      	beq.n	8004924 <__aeabi_ddiv+0x114>
 80048f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800490a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800490e:	d1c0      	bne.n	8004892 <__aeabi_ddiv+0x82>
 8004910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004914:	d10b      	bne.n	800492e <__aeabi_ddiv+0x11e>
 8004916:	ea41 0100 	orr.w	r1, r1, r0
 800491a:	f04f 0000 	mov.w	r0, #0
 800491e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004922:	e7b6      	b.n	8004892 <__aeabi_ddiv+0x82>
 8004924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004928:	bf04      	itt	eq
 800492a:	4301      	orreq	r1, r0
 800492c:	2000      	moveq	r0, #0
 800492e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004932:	bf88      	it	hi
 8004934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004938:	f63f aeaf 	bhi.w	800469a <__aeabi_dmul+0xde>
 800493c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004940:	bf04      	itt	eq
 8004942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800494a:	f150 0000 	adcs.w	r0, r0, #0
 800494e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800495c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004960:	bfc2      	ittt	gt
 8004962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800496a:	bd70      	popgt	{r4, r5, r6, pc}
 800496c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004970:	f04f 0e00 	mov.w	lr, #0
 8004974:	3c01      	subs	r4, #1
 8004976:	e690      	b.n	800469a <__aeabi_dmul+0xde>
 8004978:	ea45 0e06 	orr.w	lr, r5, r6
 800497c:	e68d      	b.n	800469a <__aeabi_dmul+0xde>
 800497e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004982:	ea94 0f0c 	teq	r4, ip
 8004986:	bf08      	it	eq
 8004988:	ea95 0f0c 	teqeq	r5, ip
 800498c:	f43f af3b 	beq.w	8004806 <__aeabi_dmul+0x24a>
 8004990:	ea94 0f0c 	teq	r4, ip
 8004994:	d10a      	bne.n	80049ac <__aeabi_ddiv+0x19c>
 8004996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800499a:	f47f af34 	bne.w	8004806 <__aeabi_dmul+0x24a>
 800499e:	ea95 0f0c 	teq	r5, ip
 80049a2:	f47f af25 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	e72c      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049ac:	ea95 0f0c 	teq	r5, ip
 80049b0:	d106      	bne.n	80049c0 <__aeabi_ddiv+0x1b0>
 80049b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049b6:	f43f aefd 	beq.w	80047b4 <__aeabi_dmul+0x1f8>
 80049ba:	4610      	mov	r0, r2
 80049bc:	4619      	mov	r1, r3
 80049be:	e722      	b.n	8004806 <__aeabi_dmul+0x24a>
 80049c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049c4:	bf18      	it	ne
 80049c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ca:	f47f aec5 	bne.w	8004758 <__aeabi_dmul+0x19c>
 80049ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049d2:	f47f af0d 	bne.w	80047f0 <__aeabi_dmul+0x234>
 80049d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049da:	f47f aeeb 	bne.w	80047b4 <__aeabi_dmul+0x1f8>
 80049de:	e712      	b.n	8004806 <__aeabi_dmul+0x24a>

080049e0 <__gedf2>:
 80049e0:	f04f 3cff 	mov.w	ip, #4294967295
 80049e4:	e006      	b.n	80049f4 <__cmpdf2+0x4>
 80049e6:	bf00      	nop

080049e8 <__ledf2>:
 80049e8:	f04f 0c01 	mov.w	ip, #1
 80049ec:	e002      	b.n	80049f4 <__cmpdf2+0x4>
 80049ee:	bf00      	nop

080049f0 <__cmpdf2>:
 80049f0:	f04f 0c01 	mov.w	ip, #1
 80049f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a04:	bf18      	it	ne
 8004a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004a0a:	d01b      	beq.n	8004a44 <__cmpdf2+0x54>
 8004a0c:	b001      	add	sp, #4
 8004a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a12:	bf0c      	ite	eq
 8004a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a18:	ea91 0f03 	teqne	r1, r3
 8004a1c:	bf02      	ittt	eq
 8004a1e:	ea90 0f02 	teqeq	r0, r2
 8004a22:	2000      	moveq	r0, #0
 8004a24:	4770      	bxeq	lr
 8004a26:	f110 0f00 	cmn.w	r0, #0
 8004a2a:	ea91 0f03 	teq	r1, r3
 8004a2e:	bf58      	it	pl
 8004a30:	4299      	cmppl	r1, r3
 8004a32:	bf08      	it	eq
 8004a34:	4290      	cmpeq	r0, r2
 8004a36:	bf2c      	ite	cs
 8004a38:	17d8      	asrcs	r0, r3, #31
 8004a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a3e:	f040 0001 	orr.w	r0, r0, #1
 8004a42:	4770      	bx	lr
 8004a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d102      	bne.n	8004a54 <__cmpdf2+0x64>
 8004a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a52:	d107      	bne.n	8004a64 <__cmpdf2+0x74>
 8004a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a5c:	d1d6      	bne.n	8004a0c <__cmpdf2+0x1c>
 8004a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a62:	d0d3      	beq.n	8004a0c <__cmpdf2+0x1c>
 8004a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdrcmple>:
 8004a6c:	4684      	mov	ip, r0
 8004a6e:	4610      	mov	r0, r2
 8004a70:	4662      	mov	r2, ip
 8004a72:	468c      	mov	ip, r1
 8004a74:	4619      	mov	r1, r3
 8004a76:	4663      	mov	r3, ip
 8004a78:	e000      	b.n	8004a7c <__aeabi_cdcmpeq>
 8004a7a:	bf00      	nop

08004a7c <__aeabi_cdcmpeq>:
 8004a7c:	b501      	push	{r0, lr}
 8004a7e:	f7ff ffb7 	bl	80049f0 <__cmpdf2>
 8004a82:	2800      	cmp	r0, #0
 8004a84:	bf48      	it	mi
 8004a86:	f110 0f00 	cmnmi.w	r0, #0
 8004a8a:	bd01      	pop	{r0, pc}

08004a8c <__aeabi_dcmpeq>:
 8004a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a90:	f7ff fff4 	bl	8004a7c <__aeabi_cdcmpeq>
 8004a94:	bf0c      	ite	eq
 8004a96:	2001      	moveq	r0, #1
 8004a98:	2000      	movne	r0, #0
 8004a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a9e:	bf00      	nop

08004aa0 <__aeabi_dcmplt>:
 8004aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa4:	f7ff ffea 	bl	8004a7c <__aeabi_cdcmpeq>
 8004aa8:	bf34      	ite	cc
 8004aaa:	2001      	movcc	r0, #1
 8004aac:	2000      	movcs	r0, #0
 8004aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab2:	bf00      	nop

08004ab4 <__aeabi_dcmple>:
 8004ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ab8:	f7ff ffe0 	bl	8004a7c <__aeabi_cdcmpeq>
 8004abc:	bf94      	ite	ls
 8004abe:	2001      	movls	r0, #1
 8004ac0:	2000      	movhi	r0, #0
 8004ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ac6:	bf00      	nop

08004ac8 <__aeabi_dcmpge>:
 8004ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004acc:	f7ff ffce 	bl	8004a6c <__aeabi_cdrcmple>
 8004ad0:	bf94      	ite	ls
 8004ad2:	2001      	movls	r0, #1
 8004ad4:	2000      	movhi	r0, #0
 8004ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ada:	bf00      	nop

08004adc <__aeabi_dcmpgt>:
 8004adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ae0:	f7ff ffc4 	bl	8004a6c <__aeabi_cdrcmple>
 8004ae4:	bf34      	ite	cc
 8004ae6:	2001      	movcc	r0, #1
 8004ae8:	2000      	movcs	r0, #0
 8004aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aee:	bf00      	nop

08004af0 <__aeabi_dcmpun>:
 8004af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x10>
 8004afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004afe:	d10a      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004b08:	d102      	bne.n	8004b10 <__aeabi_dcmpun+0x20>
 8004b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004b0e:	d102      	bne.n	8004b16 <__aeabi_dcmpun+0x26>
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	4770      	bx	lr
 8004b16:	f04f 0001 	mov.w	r0, #1
 8004b1a:	4770      	bx	lr

08004b1c <__aeabi_d2f>:
 8004b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b24:	bf24      	itt	cs
 8004b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b2e:	d90d      	bls.n	8004b4c <__aeabi_d2f+0x30>
 8004b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b44:	bf08      	it	eq
 8004b46:	f020 0001 	biceq.w	r0, r0, #1
 8004b4a:	4770      	bx	lr
 8004b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b50:	d121      	bne.n	8004b96 <__aeabi_d2f+0x7a>
 8004b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b56:	bfbc      	itt	lt
 8004b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b5c:	4770      	bxlt	lr
 8004b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b66:	f1c2 0218 	rsb	r2, r2, #24
 8004b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b72:	fa20 f002 	lsr.w	r0, r0, r2
 8004b76:	bf18      	it	ne
 8004b78:	f040 0001 	orrne.w	r0, r0, #1
 8004b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b88:	ea40 000c 	orr.w	r0, r0, ip
 8004b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b94:	e7cc      	b.n	8004b30 <__aeabi_d2f+0x14>
 8004b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b9a:	d107      	bne.n	8004bac <__aeabi_d2f+0x90>
 8004b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004ba0:	bf1e      	ittt	ne
 8004ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004baa:	4770      	bxne	lr
 8004bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <__aeabi_uldivmod>:
 8004bbc:	b953      	cbnz	r3, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bbe:	b94a      	cbnz	r2, 8004bd4 <__aeabi_uldivmod+0x18>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	bf08      	it	eq
 8004bc4:	2800      	cmpeq	r0, #0
 8004bc6:	bf1c      	itt	ne
 8004bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bd0:	f000 b974 	b.w	8004ebc <__aeabi_idiv0>
 8004bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bdc:	f000 f806 	bl	8004bec <__udivmoddi4>
 8004be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr

08004bec <__udivmoddi4>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	9d08      	ldr	r5, [sp, #32]
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	468e      	mov	lr, r1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d14d      	bne.n	8004c96 <__udivmoddi4+0xaa>
 8004bfa:	428a      	cmp	r2, r1
 8004bfc:	4694      	mov	ip, r2
 8004bfe:	d969      	bls.n	8004cd4 <__udivmoddi4+0xe8>
 8004c00:	fab2 f282 	clz	r2, r2
 8004c04:	b152      	cbz	r2, 8004c1c <__udivmoddi4+0x30>
 8004c06:	fa01 f302 	lsl.w	r3, r1, r2
 8004c0a:	f1c2 0120 	rsb	r1, r2, #32
 8004c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8004c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8004c16:	ea41 0e03 	orr.w	lr, r1, r3
 8004c1a:	4094      	lsls	r4, r2
 8004c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004c20:	0c21      	lsrs	r1, r4, #16
 8004c22:	fbbe f6f8 	udiv	r6, lr, r8
 8004c26:	fa1f f78c 	uxth.w	r7, ip
 8004c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8004c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c32:	fb06 f107 	mul.w	r1, r6, r7
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d90a      	bls.n	8004c50 <__udivmoddi4+0x64>
 8004c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004c3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8004c42:	f080 811f 	bcs.w	8004e84 <__udivmoddi4+0x298>
 8004c46:	4299      	cmp	r1, r3
 8004c48:	f240 811c 	bls.w	8004e84 <__udivmoddi4+0x298>
 8004c4c:	3e02      	subs	r6, #2
 8004c4e:	4463      	add	r3, ip
 8004c50:	1a5b      	subs	r3, r3, r1
 8004c52:	b2a4      	uxth	r4, r4
 8004c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8004c58:	fb08 3310 	mls	r3, r8, r0, r3
 8004c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004c60:	fb00 f707 	mul.w	r7, r0, r7
 8004c64:	42a7      	cmp	r7, r4
 8004c66:	d90a      	bls.n	8004c7e <__udivmoddi4+0x92>
 8004c68:	eb1c 0404 	adds.w	r4, ip, r4
 8004c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c70:	f080 810a 	bcs.w	8004e88 <__udivmoddi4+0x29c>
 8004c74:	42a7      	cmp	r7, r4
 8004c76:	f240 8107 	bls.w	8004e88 <__udivmoddi4+0x29c>
 8004c7a:	4464      	add	r4, ip
 8004c7c:	3802      	subs	r0, #2
 8004c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004c82:	1be4      	subs	r4, r4, r7
 8004c84:	2600      	movs	r6, #0
 8004c86:	b11d      	cbz	r5, 8004c90 <__udivmoddi4+0xa4>
 8004c88:	40d4      	lsrs	r4, r2
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8004c90:	4631      	mov	r1, r6
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	428b      	cmp	r3, r1
 8004c98:	d909      	bls.n	8004cae <__udivmoddi4+0xc2>
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	f000 80ef 	beq.w	8004e7e <__udivmoddi4+0x292>
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	fab3 f683 	clz	r6, r3
 8004cb2:	2e00      	cmp	r6, #0
 8004cb4:	d14a      	bne.n	8004d4c <__udivmoddi4+0x160>
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d302      	bcc.n	8004cc0 <__udivmoddi4+0xd4>
 8004cba:	4282      	cmp	r2, r0
 8004cbc:	f200 80f9 	bhi.w	8004eb2 <__udivmoddi4+0x2c6>
 8004cc0:	1a84      	subs	r4, r0, r2
 8004cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	469e      	mov	lr, r3
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	d0e0      	beq.n	8004c90 <__udivmoddi4+0xa4>
 8004cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8004cd2:	e7dd      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004cd4:	b902      	cbnz	r2, 8004cd8 <__udivmoddi4+0xec>
 8004cd6:	deff      	udf	#255	; 0xff
 8004cd8:	fab2 f282 	clz	r2, r2
 8004cdc:	2a00      	cmp	r2, #0
 8004cde:	f040 8092 	bne.w	8004e06 <__udivmoddi4+0x21a>
 8004ce2:	eba1 010c 	sub.w	r1, r1, ip
 8004ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cea:	fa1f fe8c 	uxth.w	lr, ip
 8004cee:	2601      	movs	r6, #1
 8004cf0:	0c20      	lsrs	r0, r4, #16
 8004cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8004cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8004cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004cfe:	fb0e f003 	mul.w	r0, lr, r3
 8004d02:	4288      	cmp	r0, r1
 8004d04:	d908      	bls.n	8004d18 <__udivmoddi4+0x12c>
 8004d06:	eb1c 0101 	adds.w	r1, ip, r1
 8004d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8004d0e:	d202      	bcs.n	8004d16 <__udivmoddi4+0x12a>
 8004d10:	4288      	cmp	r0, r1
 8004d12:	f200 80cb 	bhi.w	8004eac <__udivmoddi4+0x2c0>
 8004d16:	4643      	mov	r3, r8
 8004d18:	1a09      	subs	r1, r1, r0
 8004d1a:	b2a4      	uxth	r4, r4
 8004d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8004d20:	fb07 1110 	mls	r1, r7, r0, r1
 8004d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8004d28:	fb0e fe00 	mul.w	lr, lr, r0
 8004d2c:	45a6      	cmp	lr, r4
 8004d2e:	d908      	bls.n	8004d42 <__udivmoddi4+0x156>
 8004d30:	eb1c 0404 	adds.w	r4, ip, r4
 8004d34:	f100 31ff 	add.w	r1, r0, #4294967295
 8004d38:	d202      	bcs.n	8004d40 <__udivmoddi4+0x154>
 8004d3a:	45a6      	cmp	lr, r4
 8004d3c:	f200 80bb 	bhi.w	8004eb6 <__udivmoddi4+0x2ca>
 8004d40:	4608      	mov	r0, r1
 8004d42:	eba4 040e 	sub.w	r4, r4, lr
 8004d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8004d4a:	e79c      	b.n	8004c86 <__udivmoddi4+0x9a>
 8004d4c:	f1c6 0720 	rsb	r7, r6, #32
 8004d50:	40b3      	lsls	r3, r6
 8004d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8004d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8004d62:	431c      	orrs	r4, r3
 8004d64:	40f9      	lsrs	r1, r7
 8004d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8004d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8004d72:	0c20      	lsrs	r0, r4, #16
 8004d74:	fa1f fe8c 	uxth.w	lr, ip
 8004d78:	fb09 1118 	mls	r1, r9, r8, r1
 8004d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8004d80:	fb08 f00e 	mul.w	r0, r8, lr
 8004d84:	4288      	cmp	r0, r1
 8004d86:	fa02 f206 	lsl.w	r2, r2, r6
 8004d8a:	d90b      	bls.n	8004da4 <__udivmoddi4+0x1b8>
 8004d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8004d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d94:	f080 8088 	bcs.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d98:	4288      	cmp	r0, r1
 8004d9a:	f240 8085 	bls.w	8004ea8 <__udivmoddi4+0x2bc>
 8004d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8004da2:	4461      	add	r1, ip
 8004da4:	1a09      	subs	r1, r1, r0
 8004da6:	b2a4      	uxth	r4, r4
 8004da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8004dac:	fb09 1110 	mls	r1, r9, r0, r1
 8004db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8004db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8004db8:	458e      	cmp	lr, r1
 8004dba:	d908      	bls.n	8004dce <__udivmoddi4+0x1e2>
 8004dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8004dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8004dc4:	d26c      	bcs.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dc6:	458e      	cmp	lr, r1
 8004dc8:	d96a      	bls.n	8004ea0 <__udivmoddi4+0x2b4>
 8004dca:	3802      	subs	r0, #2
 8004dcc:	4461      	add	r1, ip
 8004dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8004dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8004dd6:	eba1 010e 	sub.w	r1, r1, lr
 8004dda:	42a1      	cmp	r1, r4
 8004ddc:	46c8      	mov	r8, r9
 8004dde:	46a6      	mov	lr, r4
 8004de0:	d356      	bcc.n	8004e90 <__udivmoddi4+0x2a4>
 8004de2:	d053      	beq.n	8004e8c <__udivmoddi4+0x2a0>
 8004de4:	b15d      	cbz	r5, 8004dfe <__udivmoddi4+0x212>
 8004de6:	ebb3 0208 	subs.w	r2, r3, r8
 8004dea:	eb61 010e 	sbc.w	r1, r1, lr
 8004dee:	fa01 f707 	lsl.w	r7, r1, r7
 8004df2:	fa22 f306 	lsr.w	r3, r2, r6
 8004df6:	40f1      	lsrs	r1, r6
 8004df8:	431f      	orrs	r7, r3
 8004dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8004dfe:	2600      	movs	r6, #0
 8004e00:	4631      	mov	r1, r6
 8004e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e06:	f1c2 0320 	rsb	r3, r2, #32
 8004e0a:	40d8      	lsrs	r0, r3
 8004e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e10:	fa21 f303 	lsr.w	r3, r1, r3
 8004e14:	4091      	lsls	r1, r2
 8004e16:	4301      	orrs	r1, r0
 8004e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e1c:	fa1f fe8c 	uxth.w	lr, ip
 8004e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8004e24:	fb07 3610 	mls	r6, r7, r0, r3
 8004e28:	0c0b      	lsrs	r3, r1, #16
 8004e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8004e32:	429e      	cmp	r6, r3
 8004e34:	fa04 f402 	lsl.w	r4, r4, r2
 8004e38:	d908      	bls.n	8004e4c <__udivmoddi4+0x260>
 8004e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8004e3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e42:	d22f      	bcs.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e44:	429e      	cmp	r6, r3
 8004e46:	d92d      	bls.n	8004ea4 <__udivmoddi4+0x2b8>
 8004e48:	3802      	subs	r0, #2
 8004e4a:	4463      	add	r3, ip
 8004e4c:	1b9b      	subs	r3, r3, r6
 8004e4e:	b289      	uxth	r1, r1
 8004e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8004e54:	fb07 3316 	mls	r3, r7, r6, r3
 8004e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8004e60:	428b      	cmp	r3, r1
 8004e62:	d908      	bls.n	8004e76 <__udivmoddi4+0x28a>
 8004e64:	eb1c 0101 	adds.w	r1, ip, r1
 8004e68:	f106 38ff 	add.w	r8, r6, #4294967295
 8004e6c:	d216      	bcs.n	8004e9c <__udivmoddi4+0x2b0>
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d914      	bls.n	8004e9c <__udivmoddi4+0x2b0>
 8004e72:	3e02      	subs	r6, #2
 8004e74:	4461      	add	r1, ip
 8004e76:	1ac9      	subs	r1, r1, r3
 8004e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8004e7c:	e738      	b.n	8004cf0 <__udivmoddi4+0x104>
 8004e7e:	462e      	mov	r6, r5
 8004e80:	4628      	mov	r0, r5
 8004e82:	e705      	b.n	8004c90 <__udivmoddi4+0xa4>
 8004e84:	4606      	mov	r6, r0
 8004e86:	e6e3      	b.n	8004c50 <__udivmoddi4+0x64>
 8004e88:	4618      	mov	r0, r3
 8004e8a:	e6f8      	b.n	8004c7e <__udivmoddi4+0x92>
 8004e8c:	454b      	cmp	r3, r9
 8004e8e:	d2a9      	bcs.n	8004de4 <__udivmoddi4+0x1f8>
 8004e90:	ebb9 0802 	subs.w	r8, r9, r2
 8004e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8004e98:	3801      	subs	r0, #1
 8004e9a:	e7a3      	b.n	8004de4 <__udivmoddi4+0x1f8>
 8004e9c:	4646      	mov	r6, r8
 8004e9e:	e7ea      	b.n	8004e76 <__udivmoddi4+0x28a>
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	e794      	b.n	8004dce <__udivmoddi4+0x1e2>
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	e7d1      	b.n	8004e4c <__udivmoddi4+0x260>
 8004ea8:	46d0      	mov	r8, sl
 8004eaa:	e77b      	b.n	8004da4 <__udivmoddi4+0x1b8>
 8004eac:	3b02      	subs	r3, #2
 8004eae:	4461      	add	r1, ip
 8004eb0:	e732      	b.n	8004d18 <__udivmoddi4+0x12c>
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	e709      	b.n	8004cca <__udivmoddi4+0xde>
 8004eb6:	4464      	add	r4, ip
 8004eb8:	3802      	subs	r0, #2
 8004eba:	e742      	b.n	8004d42 <__udivmoddi4+0x156>

08004ebc <__aeabi_idiv0>:
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ec6:	463b      	mov	r3, r7
 8004ec8:	2220      	movs	r2, #32
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f00c ffc5 	bl	8011e5c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004ed2:	4b3a      	ldr	r3, [pc, #232]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <MX_ADC2_Init+0x100>)
 8004ed6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ed8:	4b38      	ldr	r3, [pc, #224]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eda:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ede:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ee0:	4b36      	ldr	r3, [pc, #216]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ee6:	4b35      	ldr	r3, [pc, #212]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004eec:	4b33      	ldr	r3, [pc, #204]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ef2:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ef8:	4b30      	ldr	r3, [pc, #192]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004efa:	2204      	movs	r2, #4
 8004efc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004f04:	4b2d      	ldr	r3, [pc, #180]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f06:	2201      	movs	r2, #1
 8004f08:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004f0a:	4b2c      	ldr	r3, [pc, #176]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004f10:	4b2a      	ldr	r3, [pc, #168]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f1e:	4b27      	ldr	r3, [pc, #156]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f2c:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f32:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f3c:	481f      	ldr	r0, [pc, #124]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f3e:	f003 fe13 	bl	8008b68 <HAL_ADC_Init>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f48:	f002 fbba 	bl	80076c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <MX_ADC2_Init+0x104>)
 8004f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f50:	2306      	movs	r3, #6
 8004f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f54:	2304      	movs	r3, #4
 8004f56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <MX_ADC2_Init+0x108>)
 8004f5a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f5c:	2304      	movs	r3, #4
 8004f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f64:	463b      	mov	r3, r7
 8004f66:	4619      	mov	r1, r3
 8004f68:	4814      	ldr	r0, [pc, #80]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f6a:	f004 f8b1 	bl	80090d0 <HAL_ADC_ConfigChannel>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f74:	f002 fba4 	bl	80076c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <MX_ADC2_Init+0x10c>)
 8004f7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f7c:	230c      	movs	r3, #12
 8004f7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f80:	463b      	mov	r3, r7
 8004f82:	4619      	mov	r1, r3
 8004f84:	480d      	ldr	r0, [pc, #52]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004f86:	f004 f8a3 	bl	80090d0 <HAL_ADC_ConfigChannel>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f90:	f002 fb96 	bl	80076c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f94:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <MX_ADC2_Init+0x110>)
 8004f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f98:	2312      	movs	r3, #18
 8004f9a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f9c:	237f      	movs	r3, #127	; 0x7f
 8004f9e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004fa0:	463b      	mov	r3, r7
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4805      	ldr	r0, [pc, #20]	; (8004fbc <MX_ADC2_Init+0xfc>)
 8004fa6:	f004 f893 	bl	80090d0 <HAL_ADC_ConfigChannel>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d001      	beq.n	8004fb4 <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004fb0:	f002 fb86 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004fb4:	bf00      	nop
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	20000094 	.word	0x20000094
 8004fc0:	50000100 	.word	0x50000100
 8004fc4:	04300002 	.word	0x04300002
 8004fc8:	407f0000 	.word	0x407f0000
 8004fcc:	19200040 	.word	0x19200040
 8004fd0:	2a000400 	.word	0x2a000400

08004fd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b0a0      	sub	sp, #128	; 0x80
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fdc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fec:	f107 0318 	add.w	r3, r7, #24
 8004ff0:	2254      	movs	r2, #84	; 0x54
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f00c ff31 	bl	8011e5c <memset>
  if(adcHandle->Instance==ADC2)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a4c      	ldr	r2, [pc, #304]	; (8005130 <HAL_ADC_MspInit+0x15c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	f040 8090 	bne.w	8005126 <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800500a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800500c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005010:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005012:	f107 0318 	add.w	r3, r7, #24
 8005016:	4618      	mov	r0, r3
 8005018:	f006 ff7e 	bl	800bf18 <HAL_RCCEx_PeriphCLKConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8005022:	f002 fb4d 	bl	80076c0 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005026:	4b43      	ldr	r3, [pc, #268]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a42      	ldr	r2, [pc, #264]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800502c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b40      	ldr	r3, [pc, #256]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800503e:	4b3d      	ldr	r3, [pc, #244]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a3c      	ldr	r2, [pc, #240]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	613b      	str	r3, [r7, #16]
 8005054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005056:	4b37      	ldr	r3, [pc, #220]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a36      	ldr	r2, [pc, #216]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b34      	ldr	r3, [pc, #208]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005072:	4a30      	ldr	r2, [pc, #192]	; (8005134 <HAL_ADC_MspInit+0x160>)
 8005074:	f043 0301 	orr.w	r3, r3, #1
 8005078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <HAL_ADC_MspInit+0x160>)
 800507c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005086:	2302      	movs	r3, #2
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4827      	ldr	r0, [pc, #156]	; (8005138 <HAL_ADC_MspInit+0x164>)
 800509a:	f005 f961 	bl	800a360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	4822      	ldr	r0, [pc, #136]	; (800513c <HAL_ADC_MspInit+0x168>)
 80050b2:	f005 f955 	bl	800a360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80050b6:	2303      	movs	r3, #3
 80050b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ba:	2303      	movs	r3, #3
 80050bc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050cc:	f005 f948 	bl	800a360 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_ADC_MspInit+0x170>)
 80050d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050d8:	2224      	movs	r2, #36	; 0x24
 80050da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e2:	4b17      	ldr	r3, [pc, #92]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050ea:	2280      	movs	r2, #128	; 0x80
 80050ec:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050f6:	4b12      	ldr	r3, [pc, #72]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050fe:	4b10      	ldr	r3, [pc, #64]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005100:	2220      	movs	r2, #32
 8005102:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005104:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005106:	2200      	movs	r2, #0
 8005108:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800510a:	480d      	ldr	r0, [pc, #52]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800510c:	f004 fdf6 	bl	8009cfc <HAL_DMA_Init>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8005116:	f002 fad3 	bl	80076c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 800511e:	655a      	str	r2, [r3, #84]	; 0x54
 8005120:	4a07      	ldr	r2, [pc, #28]	; (8005140 <HAL_ADC_MspInit+0x16c>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8005126:	bf00      	nop
 8005128:	3780      	adds	r7, #128	; 0x80
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	50000100 	.word	0x50000100
 8005134:	40021000 	.word	0x40021000
 8005138:	48001400 	.word	0x48001400
 800513c:	48000800 	.word	0x48000800
 8005140:	20000100 	.word	0x20000100
 8005144:	40020008 	.word	0x40020008

08005148 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	3304      	adds	r3, #4
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f7ff f9c5 	bl	80044e8 <__aeabi_i2d>
 800515e:	a30f      	add	r3, pc, #60	; (adr r3, 800519c <Battery_ReadBatteryVoltage+0x54>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7ff fa2a 	bl	80045bc <__aeabi_dmul>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4610      	mov	r0, r2
 800516e:	4619      	mov	r1, r3
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	4b08      	ldr	r3, [pc, #32]	; (8005198 <Battery_ReadBatteryVoltage+0x50>)
 8005176:	f7ff fb4b 	bl	8004810 <__aeabi_ddiv>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	4610      	mov	r0, r2
 8005180:	4619      	mov	r1, r3
 8005182:	f7ff fccb 	bl	8004b1c <__aeabi_d2f>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	f3af 8000 	nop.w
 8005198:	40b00000 	.word	0x40b00000
 800519c:	66666666 	.word	0x66666666
 80051a0:	400a6666 	.word	0x400a6666
 80051a4:	00000000 	.word	0x00000000

080051a8 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	3302      	adds	r3, #2
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f995 	bl	80044e8 <__aeabi_i2d>
 80051be:	a319      	add	r3, pc, #100	; (adr r3, 8005224 <Battery_ReadCurrent3V3+0x7c>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7ff f9fa 	bl	80045bc <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <Battery_ReadCurrent3V3+0x78>)
 80051d6:	f7ff fb1b 	bl	8004810 <__aeabi_ddiv>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	f7ff fc9b 	bl	8004b1c <__aeabi_d2f>
 80051e6:	4603      	mov	r3, r0
 80051e8:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff f98e 	bl	800450c <__aeabi_f2d>
 80051f0:	a309      	add	r3, pc, #36	; (adr r3, 8005218 <Battery_ReadCurrent3V3+0x70>)
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f7ff fb0b 	bl	8004810 <__aeabi_ddiv>
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4610      	mov	r0, r2
 8005200:	4619      	mov	r1, r3
 8005202:	f7ff fc8b 	bl	8004b1c <__aeabi_d2f>
 8005206:	4602      	mov	r2, r0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	605a      	str	r2, [r3, #4]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	f3af 8000 	nop.w
 8005218:	d2f1a9fc 	.word	0xd2f1a9fc
 800521c:	3f60624d 	.word	0x3f60624d
 8005220:	40b00000 	.word	0x40b00000
 8005224:	66666666 	.word	0x66666666
 8005228:	400a6666 	.word	0x400a6666
 800522c:	00000000 	.word	0x00000000

08005230 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff f952 	bl	80044e8 <__aeabi_i2d>
 8005244:	a319      	add	r3, pc, #100	; (adr r3, 80052ac <Battery_ReadCurrent5V+0x7c>)
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f7ff f9b7 	bl	80045bc <__aeabi_dmul>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4610      	mov	r0, r2
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <Battery_ReadCurrent5V+0x78>)
 800525c:	f7ff fad8 	bl	8004810 <__aeabi_ddiv>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4610      	mov	r0, r2
 8005266:	4619      	mov	r1, r3
 8005268:	f7ff fc58 	bl	8004b1c <__aeabi_d2f>
 800526c:	4603      	mov	r3, r0
 800526e:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff f94b 	bl	800450c <__aeabi_f2d>
 8005276:	a30a      	add	r3, pc, #40	; (adr r3, 80052a0 <Battery_ReadCurrent5V+0x70>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f7ff fac8 	bl	8004810 <__aeabi_ddiv>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7ff fc48 	bl	8004b1c <__aeabi_d2f>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	609a      	str	r2, [r3, #8]
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
 80052a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80052a4:	3f60624d 	.word	0x3f60624d
 80052a8:	40b00000 	.word	0x40b00000
 80052ac:	66666666 	.word	0x66666666
 80052b0:	400a6666 	.word	0x400a6666
 80052b4:	00000000 	.word	0x00000000

080052b8 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80052cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052d0:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff f919 	bl	800450c <__aeabi_f2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	a10f      	add	r1, pc, #60	; (adr r1, 800531c <Battery_RemaningTime+0x64>)
 80052e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e4:	f7ff fa94 	bl	8004810 <__aeabi_ddiv>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	f7ff fc14 	bl	8004b1c <__aeabi_d2f>
 80052f4:	4603      	mov	r3, r0
 80052f6:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80052fc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005318 <Battery_RemaningTime+0x60>
 8005300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 2a90 	vmov	r2, s15
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	4a5bba00 	.word	0x4a5bba00
 800531c:	9999999a 	.word	0x9999999a
 8005320:	40019999 	.word	0x40019999

08005324 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8005324:	b5b0      	push	{r4, r5, r7, lr}
 8005326:	b0b8      	sub	sp, #224	; 0xe0
 8005328:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 800532a:	4b6b      	ldr	r3, [pc, #428]	; (80054d8 <MX_FREERTOS_Init+0x1b4>)
 800532c:	9306      	str	r3, [sp, #24]
 800532e:	2302      	movs	r3, #2
 8005330:	9305      	str	r3, [sp, #20]
 8005332:	2301      	movs	r3, #1
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	2304      	movs	r3, #4
 8005338:	9303      	str	r3, [sp, #12]
 800533a:	4b68      	ldr	r3, [pc, #416]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800533c:	9302      	str	r3, [sp, #8]
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	4b66      	ldr	r3, [pc, #408]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2340      	movs	r3, #64	; 0x40
 8005348:	4a64      	ldr	r2, [pc, #400]	; (80054dc <MX_FREERTOS_Init+0x1b8>)
 800534a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800534e:	4864      	ldr	r0, [pc, #400]	; (80054e0 <MX_FREERTOS_Init+0x1bc>)
 8005350:	f002 fc2c 	bl	8007bac <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 8005354:	4963      	ldr	r1, [pc, #396]	; (80054e4 <MX_FREERTOS_Init+0x1c0>)
 8005356:	4864      	ldr	r0, [pc, #400]	; (80054e8 <MX_FREERTOS_Init+0x1c4>)
 8005358:	f000 fe2d 	bl	8005fb6 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 8005362:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005366:	4618      	mov	r0, r3
 8005368:	f00a fc50 	bl	800fc0c <osMutexCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a5f      	ldr	r2, [pc, #380]	; (80054ec <MX_FREERTOS_Init+0x1c8>)
 8005370:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005378:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f00a fc50 	bl	800fc24 <osSemaphoreCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	4a5a      	ldr	r2, [pc, #360]	; (80054f0 <MX_FREERTOS_Init+0x1cc>)
 8005388:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 800538a:	2300      	movs	r3, #0
 800538c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005390:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005394:	2101      	movs	r1, #1
 8005396:	4618      	mov	r0, r3
 8005398:	f00a fc44 	bl	800fc24 <osSemaphoreCreate>
 800539c:	4603      	mov	r3, r0
 800539e:	4a55      	ldr	r2, [pc, #340]	; (80054f4 <MX_FREERTOS_Init+0x1d0>)
 80053a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 80053a2:	4b55      	ldr	r3, [pc, #340]	; (80054f8 <MX_FREERTOS_Init+0x1d4>)
 80053a4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80053a8:	461d      	mov	r5, r3
 80053aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 80053b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f00a fbec 	bl	800fb96 <osThreadCreate>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a4e      	ldr	r2, [pc, #312]	; (80054fc <MX_FREERTOS_Init+0x1d8>)
 80053c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053c4:	4b4e      	ldr	r3, [pc, #312]	; (8005500 <MX_FREERTOS_Init+0x1dc>)
 80053c6:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80053ca:	461d      	mov	r5, r3
 80053cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80053d8:	2100      	movs	r1, #0
 80053da:	4618      	mov	r0, r3
 80053dc:	f00a fbdb 	bl	800fb96 <osThreadCreate>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a48      	ldr	r2, [pc, #288]	; (8005504 <MX_FREERTOS_Init+0x1e0>)
 80053e4:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053e6:	4b48      	ldr	r3, [pc, #288]	; (8005508 <MX_FREERTOS_Init+0x1e4>)
 80053e8:	f107 0478 	add.w	r4, r7, #120	; 0x78
 80053ec:	461d      	mov	r5, r3
 80053ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053f2:	682b      	ldr	r3, [r5, #0]
 80053f4:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053f6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80053fa:	2100      	movs	r1, #0
 80053fc:	4618      	mov	r0, r3
 80053fe:	f00a fbca 	bl	800fb96 <osThreadCreate>
 8005402:	4603      	mov	r3, r0
 8005404:	4a41      	ldr	r2, [pc, #260]	; (800550c <MX_FREERTOS_Init+0x1e8>)
 8005406:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 8005408:	4b41      	ldr	r3, [pc, #260]	; (8005510 <MX_FREERTOS_Init+0x1ec>)
 800540a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800540e:	461d      	mov	r5, r3
 8005410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005414:	682b      	ldr	r3, [r5, #0]
 8005416:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005418:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800541c:	2100      	movs	r1, #0
 800541e:	4618      	mov	r0, r3
 8005420:	f00a fbb9 	bl	800fb96 <osThreadCreate>
 8005424:	4603      	mov	r3, r0
 8005426:	4a3b      	ldr	r2, [pc, #236]	; (8005514 <MX_FREERTOS_Init+0x1f0>)
 8005428:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 800542a:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <MX_FREERTOS_Init+0x1f4>)
 800542c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8005430:	461d      	mov	r5, r3
 8005432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005436:	682b      	ldr	r3, [r5, #0]
 8005438:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 800543a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800543e:	2100      	movs	r1, #0
 8005440:	4618      	mov	r0, r3
 8005442:	f00a fba8 	bl	800fb96 <osThreadCreate>
 8005446:	4603      	mov	r3, r0
 8005448:	4a34      	ldr	r2, [pc, #208]	; (800551c <MX_FREERTOS_Init+0x1f8>)
 800544a:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 800544c:	4b34      	ldr	r3, [pc, #208]	; (8005520 <MX_FREERTOS_Init+0x1fc>)
 800544e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005452:	461d      	mov	r5, r3
 8005454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800545c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f00a fb97 	bl	800fb96 <osThreadCreate>
 8005468:	4603      	mov	r3, r0
 800546a:	4a2e      	ldr	r2, [pc, #184]	; (8005524 <MX_FREERTOS_Init+0x200>)
 800546c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 800546e:	4b2e      	ldr	r3, [pc, #184]	; (8005528 <MX_FREERTOS_Init+0x204>)
 8005470:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005474:	461d      	mov	r5, r3
 8005476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800547e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005482:	2100      	movs	r1, #0
 8005484:	4618      	mov	r0, r3
 8005486:	f00a fb86 	bl	800fb96 <osThreadCreate>
 800548a:	4603      	mov	r3, r0
 800548c:	4a27      	ldr	r2, [pc, #156]	; (800552c <MX_FREERTOS_Init+0x208>)
 800548e:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005490:	4b27      	ldr	r3, [pc, #156]	; (8005530 <MX_FREERTOS_Init+0x20c>)
 8005492:	f107 0414 	add.w	r4, r7, #20
 8005496:	461d      	mov	r5, r3
 8005498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800549c:	682b      	ldr	r3, [r5, #0]
 800549e:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 80054a0:	f107 0314 	add.w	r3, r7, #20
 80054a4:	2100      	movs	r1, #0
 80054a6:	4618      	mov	r0, r3
 80054a8:	f00a fb75 	bl	800fb96 <osThreadCreate>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <MX_FREERTOS_Init+0x210>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Telemetry */
  osThreadDef(Telemetry, StartTelemetry, osPriorityIdle, 0, 256);
 80054b2:	4b21      	ldr	r3, [pc, #132]	; (8005538 <MX_FREERTOS_Init+0x214>)
 80054b4:	463c      	mov	r4, r7
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]
  TelemetryHandle = osThreadCreate(osThread(Telemetry), NULL);
 80054c0:	463b      	mov	r3, r7
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f00a fb66 	bl	800fb96 <osThreadCreate>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a1b      	ldr	r2, [pc, #108]	; (800553c <MX_FREERTOS_Init+0x218>)
 80054ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80054d0:	bf00      	nop
 80054d2:	37c0      	adds	r7, #192	; 0xc0
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bdb0      	pop	{r4, r5, r7, pc}
 80054d8:	200008b4 	.word	0x200008b4
 80054dc:	48000400 	.word	0x48000400
 80054e0:	20000304 	.word	0x20000304
 80054e4:	20000248 	.word	0x20000248
 80054e8:	200001fc 	.word	0x200001fc
 80054ec:	200001f0 	.word	0x200001f0
 80054f0:	200001f4 	.word	0x200001f4
 80054f4:	200001f8 	.word	0x200001f8
 80054f8:	08013034 	.word	0x08013034
 80054fc:	200001cc 	.word	0x200001cc
 8005500:	08013048 	.word	0x08013048
 8005504:	200001d0 	.word	0x200001d0
 8005508:	0801305c 	.word	0x0801305c
 800550c:	200001d4 	.word	0x200001d4
 8005510:	08013070 	.word	0x08013070
 8005514:	200001d8 	.word	0x200001d8
 8005518:	08013084 	.word	0x08013084
 800551c:	200001dc 	.word	0x200001dc
 8005520:	08013098 	.word	0x08013098
 8005524:	200001e0 	.word	0x200001e0
 8005528:	080130ac 	.word	0x080130ac
 800552c:	200001e4 	.word	0x200001e4
 8005530:	080130c0 	.word	0x080130c0
 8005534:	200001e8 	.word	0x200001e8
 8005538:	080130d4 	.word	0x080130d4
 800553c:	200001ec 	.word	0x200001ec

08005540 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800554c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005550:	f005 f8a0 	bl	800a694 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005554:	f241 3088 	movw	r0, #5000	; 0x1388
 8005558:	f00b f9ce 	bl	80108f8 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800555c:	e7f4      	b.n	8005548 <StartLedTask+0x8>
	...

08005560 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005568:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80055b0 <StartRoll_PID+0x50>
 800556c:	eddf 0a11 	vldr	s1, [pc, #68]	; 80055b4 <StartRoll_PID+0x54>
 8005570:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80055b8 <StartRoll_PID+0x58>
 8005574:	4811      	ldr	r0, [pc, #68]	; (80055bc <StartRoll_PID+0x5c>)
 8005576:	f002 f8f3 	bl	8007760 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800557a:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <StartRoll_PID+0x60>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2119      	movs	r1, #25
 8005580:	4618      	mov	r0, r3
 8005582:	f00a fe77 	bl	8010274 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005586:	490f      	ldr	r1, [pc, #60]	; (80055c4 <StartRoll_PID+0x64>)
 8005588:	480f      	ldr	r0, [pc, #60]	; (80055c8 <StartRoll_PID+0x68>)
 800558a:	f000 fe8f 	bl	80062ac <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800558e:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <StartRoll_PID+0x60>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	2300      	movs	r3, #0
 8005594:	2200      	movs	r2, #0
 8005596:	2100      	movs	r1, #0
 8005598:	f00a fcf8 	bl	800ff8c <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <StartRoll_PID+0x6c>)
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <StartRoll_PID+0x64>)
 80055a0:	490b      	ldr	r1, [pc, #44]	; (80055d0 <StartRoll_PID+0x70>)
 80055a2:	4806      	ldr	r0, [pc, #24]	; (80055bc <StartRoll_PID+0x5c>)
 80055a4:	f002 f93a 	bl	800781c <Pid_CompensateRoll>
		vTaskDelay(150);
 80055a8:	2096      	movs	r0, #150	; 0x96
 80055aa:	f00b f9a5 	bl	80108f8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ae:	e7e4      	b.n	800557a <StartRoll_PID+0x1a>
 80055b0:	bdb15662 	.word	0xbdb15662
 80055b4:	bce59984 	.word	0xbce59984
 80055b8:	be07bf5a 	.word	0xbe07bf5a
 80055bc:	200001a8 	.word	0x200001a8
 80055c0:	200001f0 	.word	0x200001f0
 80055c4:	20000248 	.word	0x20000248
 80055c8:	200001fc 	.word	0x200001fc
 80055cc:	20000304 	.word	0x20000304
 80055d0:	200002f0 	.word	0x200002f0

080055d4 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 80055dc:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055e0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005624 <StartPitch_PID+0x50>
 80055e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005628 <StartPitch_PID+0x54>
 80055e8:	4810      	ldr	r0, [pc, #64]	; (800562c <StartPitch_PID+0x58>)
 80055ea:	f002 f8b9 	bl	8007760 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <StartPitch_PID+0x5c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2119      	movs	r1, #25
 80055f4:	4618      	mov	r0, r3
 80055f6:	f00a fe3d 	bl	8010274 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055fa:	490e      	ldr	r1, [pc, #56]	; (8005634 <StartPitch_PID+0x60>)
 80055fc:	480e      	ldr	r0, [pc, #56]	; (8005638 <StartPitch_PID+0x64>)
 80055fe:	f000 fea7 	bl	8006350 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <StartPitch_PID+0x5c>)
 8005604:	6818      	ldr	r0, [r3, #0]
 8005606:	2300      	movs	r3, #0
 8005608:	2200      	movs	r2, #0
 800560a:	2100      	movs	r1, #0
 800560c:	f00a fcbe 	bl	800ff8c <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <StartPitch_PID+0x68>)
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <StartPitch_PID+0x60>)
 8005614:	490a      	ldr	r1, [pc, #40]	; (8005640 <StartPitch_PID+0x6c>)
 8005616:	4805      	ldr	r0, [pc, #20]	; (800562c <StartPitch_PID+0x58>)
 8005618:	f002 f9c6 	bl	80079a8 <Pid_CompensatePitch>
		vTaskDelay(150);
 800561c:	2096      	movs	r0, #150	; 0x96
 800561e:	f00b f96b 	bl	80108f8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005622:	e7e4      	b.n	80055ee <StartPitch_PID+0x1a>
 8005624:	3ccccccd 	.word	0x3ccccccd
 8005628:	42c80000 	.word	0x42c80000
 800562c:	20000160 	.word	0x20000160
 8005630:	200001f0 	.word	0x200001f0
 8005634:	20000248 	.word	0x20000248
 8005638:	200001fc 	.word	0x200001fc
 800563c:	20000304 	.word	0x20000304
 8005640:	200002f0 	.word	0x200002f0

08005644 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800564c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005650:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005694 <StartYaw_PID+0x50>
 8005654:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005698 <StartYaw_PID+0x54>
 8005658:	4810      	ldr	r0, [pc, #64]	; (800569c <StartYaw_PID+0x58>)
 800565a:	f002 f881 	bl	8007760 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800565e:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <StartYaw_PID+0x5c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2119      	movs	r1, #25
 8005664:	4618      	mov	r0, r3
 8005666:	f00a fe05 	bl	8010274 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800566a:	490e      	ldr	r1, [pc, #56]	; (80056a4 <StartYaw_PID+0x60>)
 800566c:	480e      	ldr	r0, [pc, #56]	; (80056a8 <StartYaw_PID+0x64>)
 800566e:	f000 fec1 	bl	80063f4 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005672:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <StartYaw_PID+0x5c>)
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	2200      	movs	r2, #0
 800567a:	2100      	movs	r1, #0
 800567c:	f00a fc86 	bl	800ff8c <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <StartYaw_PID+0x68>)
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <StartYaw_PID+0x60>)
 8005684:	490a      	ldr	r1, [pc, #40]	; (80056b0 <StartYaw_PID+0x6c>)
 8005686:	4805      	ldr	r0, [pc, #20]	; (800569c <StartYaw_PID+0x58>)
 8005688:	f002 f885 	bl	8007796 <Pid_CompensateYaw>
		vTaskDelay(150);
 800568c:	2096      	movs	r0, #150	; 0x96
 800568e:	f00b f933 	bl	80108f8 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005692:	e7e4      	b.n	800565e <StartYaw_PID+0x1a>
 8005694:	3ccccccd 	.word	0x3ccccccd
 8005698:	42c80000 	.word	0x42c80000
 800569c:	20000184 	.word	0x20000184
 80056a0:	200001f0 	.word	0x200001f0
 80056a4:	20000248 	.word	0x20000248
 80056a8:	200001fc 	.word	0x200001fc
 80056ac:	20000304 	.word	0x20000304
 80056b0:	200002f0 	.word	0x200002f0

080056b4 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 80056bc:	480f      	ldr	r0, [pc, #60]	; (80056fc <StartPressureMonitor+0x48>)
 80056be:	f000 f9ed 	bl	8005a9c <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056c2:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <StartPressureMonitor+0x4c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	461a      	mov	r2, r3
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <StartPressureMonitor+0x50>)
 80056ca:	480c      	ldr	r0, [pc, #48]	; (80056fc <StartPressureMonitor+0x48>)
 80056cc:	f000 fa30 	bl	8005b30 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <StartPressureMonitor+0x4c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	490b      	ldr	r1, [pc, #44]	; (8005704 <StartPressureMonitor+0x50>)
 80056d8:	4808      	ldr	r0, [pc, #32]	; (80056fc <StartPressureMonitor+0x48>)
 80056da:	f000 f979 	bl	80059d0 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <StartPressureMonitor+0x4c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	4907      	ldr	r1, [pc, #28]	; (8005704 <StartPressureMonitor+0x50>)
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <StartPressureMonitor+0x48>)
 80056e8:	f000 f91c 	bl	8005924 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056ec:	4805      	ldr	r0, [pc, #20]	; (8005704 <StartPressureMonitor+0x50>)
 80056ee:	f000 fa4b 	bl	8005b88 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
	  vTaskDelay(500);
 80056f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056f6:	f00b f8ff 	bl	80108f8 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056fa:	e7e9      	b.n	80056d0 <StartPressureMonitor+0x1c>
 80056fc:	200001fc 	.word	0x200001fc
 8005700:	200001f0 	.word	0x200001f0
 8005704:	20000334 	.word	0x20000334

08005708 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005714:	4909      	ldr	r1, [pc, #36]	; (800573c <StartGPS+0x34>)
 8005716:	480a      	ldr	r0, [pc, #40]	; (8005740 <StartGPS+0x38>)
 8005718:	f008 fa84 	bl	800dc24 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <StartGPS+0x3c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4909      	ldr	r1, [pc, #36]	; (8005748 <StartGPS+0x40>)
 8005722:	4618      	mov	r0, r3
 8005724:	f00a fda6 	bl	8010274 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 8005728:	4908      	ldr	r1, [pc, #32]	; (800574c <StartGPS+0x44>)
 800572a:	4804      	ldr	r0, [pc, #16]	; (800573c <StartGPS+0x34>)
 800572c:	f001 f82a 	bl	8006784 <gps_ReadNMEA>
	  vTaskDelay(1000);
 8005730:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005734:	f00b f8e0 	bl	80108f8 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 8005738:	e7ea      	b.n	8005710 <StartGPS+0x8>
 800573a:	bf00      	nop
 800573c:	20000378 	.word	0x20000378
 8005740:	20000900 	.word	0x20000900
 8005744:	200001f4 	.word	0x200001f4
 8005748:	000186a0 	.word	0x000186a0
 800574c:	20000348 	.word	0x20000348

08005750 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09c      	sub	sp, #112	; 0x70
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMainTask */
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005758:	4b19      	ldr	r3, [pc, #100]	; (80057c0 <StartMainTask+0x70>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4919      	ldr	r1, [pc, #100]	; (80057c4 <StartMainTask+0x74>)
 800575e:	4618      	mov	r0, r3
 8005760:	f00a fd88 	bl	8010274 <xQueueSemaphoreTake>
	  xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <StartMainTask+0x70>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4916      	ldr	r1, [pc, #88]	; (80057c4 <StartMainTask+0x74>)
 800576a:	4618      	mov	r0, r3
 800576c:	f00a fd82 	bl	8010274 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005770:	2300      	movs	r3, #0
 8005772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005774:	e011      	b.n	800579a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <StartMainTask+0x78>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800577e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005780:	2064      	movs	r0, #100	; 0x64
 8005782:	f00b f8b9 	bl	80108f8 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8005786:	4b10      	ldr	r3, [pc, #64]	; (80057c8 <StartMainTask+0x78>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800578e:	2064      	movs	r0, #100	; 0x64
 8005790:	f00b f8b2 	bl	80108f8 <vTaskDelay>
	for(int i=0;i<5;i++){
 8005794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005796:	3301      	adds	r3, #1
 8005798:	66fb      	str	r3, [r7, #108]	; 0x6c
 800579a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800579c:	2b04      	cmp	r3, #4
 800579e:	ddea      	ble.n	8005776 <StartMainTask+0x26>
  /* Infinite loop */
  for(;;)
  {

//	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057a0:	4b0a      	ldr	r3, [pc, #40]	; (80057cc <StartMainTask+0x7c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	490a      	ldr	r1, [pc, #40]	; (80057d0 <StartMainTask+0x80>)
 80057a8:	480a      	ldr	r0, [pc, #40]	; (80057d4 <StartMainTask+0x84>)
 80057aa:	f000 fc61 	bl	8006070 <BNO055_ReadAccel>
	  BNO055_ComputeSpeed(&hi2c2, &IMU_BNO055_struct);
 80057ae:	4908      	ldr	r1, [pc, #32]	; (80057d0 <StartMainTask+0x80>)
 80057b0:	4808      	ldr	r0, [pc, #32]	; (80057d4 <StartMainTask+0x84>)
 80057b2:	f000 fe59 	bl	8006468 <BNO055_ComputeSpeed>


	  vTaskDelay(500);
 80057b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80057ba:	f00b f89d 	bl	80108f8 <vTaskDelay>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 80057be:	e7ef      	b.n	80057a0 <StartMainTask+0x50>
 80057c0:	200001f8 	.word	0x200001f8
 80057c4:	6fc0ffff 	.word	0x6fc0ffff
 80057c8:	20000868 	.word	0x20000868
 80057cc:	200001f0 	.word	0x200001f0
 80057d0:	20000248 	.word	0x20000248
 80057d4:	200001fc 	.word	0x200001fc

080057d8 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057e0:	4909      	ldr	r1, [pc, #36]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057e2:	480a      	ldr	r0, [pc, #40]	; (800580c <StartBatteryMonitoring+0x34>)
 80057e4:	f7ff fcb0 	bl	8005148 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80057e8:	4907      	ldr	r1, [pc, #28]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057ea:	4808      	ldr	r0, [pc, #32]	; (800580c <StartBatteryMonitoring+0x34>)
 80057ec:	f7ff fd20 	bl	8005230 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80057f0:	4905      	ldr	r1, [pc, #20]	; (8005808 <StartBatteryMonitoring+0x30>)
 80057f2:	4806      	ldr	r0, [pc, #24]	; (800580c <StartBatteryMonitoring+0x34>)
 80057f4:	f7ff fcd8 	bl	80051a8 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80057f8:	4804      	ldr	r0, [pc, #16]	; (800580c <StartBatteryMonitoring+0x34>)
 80057fa:	f7ff fd5d 	bl	80052b8 <Battery_RemaningTime>
    vTaskDelay(5000);
 80057fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8005802:	f00b f879 	bl	80108f8 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005806:	e7eb      	b.n	80057e0 <StartBatteryMonitoring+0x8>
 8005808:	20000760 	.word	0x20000760
 800580c:	20000368 	.word	0x20000368

08005810 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void const * argument)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
	WIOE5_Init(&huart5);
 8005818:	4803      	ldr	r0, [pc, #12]	; (8005828 <StartTelemetry+0x18>)
 800581a:	f001 fb71 	bl	8006f00 <WIOE5_Init>
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 800581e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005822:	f00b f869 	bl	80108f8 <vTaskDelay>
 8005826:	e7fa      	b.n	800581e <StartTelemetry+0xe>
 8005828:	20000990 	.word	0x20000990

0800582c <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af04      	add	r7, sp, #16
 8005832:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005834:	230a      	movs	r3, #10
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2301      	movs	r3, #1
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f107 030f 	add.w	r3, r7, #15
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	221b      	movs	r2, #27
 8005846:	21ec      	movs	r1, #236	; 0xec
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f005 f903 	bl	800aa54 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 800584e:	7bfb      	ldrb	r3, [r7, #15]
 8005850:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8005854:	b2db      	uxtb	r3, r3
 8005856:	3301      	adds	r3, #1
 8005858:	b2db      	uxtb	r3, r3
 800585a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800585c:	230a      	movs	r3, #10
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	2301      	movs	r3, #1
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	f107 030e 	add.w	r3, r7, #14
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2301      	movs	r3, #1
 800586c:	221b      	movs	r2, #27
 800586e:	21ec      	movs	r1, #236	; 0xec
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f004 ffdb 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005876:	bf00      	nop
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800587e:	b580      	push	{r7, lr}
 8005880:	b088      	sub	sp, #32
 8005882:	af04      	add	r7, sp, #16
 8005884:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005886:	230a      	movs	r3, #10
 8005888:	9302      	str	r3, [sp, #8]
 800588a:	2301      	movs	r3, #1
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	f107 030f 	add.w	r3, r7, #15
 8005892:	9300      	str	r3, [sp, #0]
 8005894:	2301      	movs	r3, #1
 8005896:	221b      	movs	r2, #27
 8005898:	21ec      	movs	r1, #236	; 0xec
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f005 f8da 	bl	800aa54 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	f003 0331 	and.w	r3, r3, #49	; 0x31
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3301      	adds	r3, #1
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058ae:	230a      	movs	r3, #10
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	2301      	movs	r3, #1
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f107 030e 	add.w	r3, r7, #14
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2301      	movs	r3, #1
 80058be:	221b      	movs	r2, #27
 80058c0:	21ec      	movs	r1, #236	; 0xec
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f004 ffb2 	bl	800a82c <HAL_I2C_Mem_Write>
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af04      	add	r7, sp, #16
 80058d6:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80058d8:	230a      	movs	r3, #10
 80058da:	9302      	str	r3, [sp, #8]
 80058dc:	2301      	movs	r3, #1
 80058de:	9301      	str	r3, [sp, #4]
 80058e0:	f107 030f 	add.w	r3, r7, #15
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	2301      	movs	r3, #1
 80058e8:	221b      	movs	r2, #27
 80058ea:	21ec      	movs	r1, #236	; 0xec
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f005 f8b1 	bl	800aa54 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	3330      	adds	r3, #48	; 0x30
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005900:	230a      	movs	r3, #10
 8005902:	9302      	str	r3, [sp, #8]
 8005904:	2301      	movs	r3, #1
 8005906:	9301      	str	r3, [sp, #4]
 8005908:	f107 030e 	add.w	r3, r7, #14
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	2301      	movs	r3, #1
 8005910:	221b      	movs	r2, #27
 8005912:	21ec      	movs	r1, #236	; 0xec
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f004 ff89 	bl	800a82c <HAL_I2C_Mem_Write>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af04      	add	r7, sp, #16
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005930:	2123      	movs	r1, #35	; 0x23
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f00a fc9e 	bl	8010274 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 8005938:	230a      	movs	r3, #10
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	2301      	movs	r3, #1
 800593e:	9301      	str	r3, [sp, #4]
 8005940:	f107 0313 	add.w	r3, r7, #19
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	2301      	movs	r3, #1
 8005948:	2207      	movs	r2, #7
 800594a:	21ec      	movs	r1, #236	; 0xec
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f005 f881 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 8005952:	230a      	movs	r3, #10
 8005954:	9302      	str	r3, [sp, #8]
 8005956:	2301      	movs	r3, #1
 8005958:	9301      	str	r3, [sp, #4]
 800595a:	f107 0312 	add.w	r3, r7, #18
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2301      	movs	r3, #1
 8005962:	2208      	movs	r2, #8
 8005964:	21ec      	movs	r1, #236	; 0xec
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f005 f874 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 800596c:	230a      	movs	r3, #10
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2301      	movs	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 0311 	add.w	r3, r7, #17
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	2209      	movs	r2, #9
 800597e:	21ec      	movs	r1, #236	; 0xec
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f005 f867 	bl	800aa54 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005986:	2300      	movs	r3, #0
 8005988:	2200      	movs	r2, #0
 800598a:	2100      	movs	r1, #0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f00a fafd 	bl	800ff8c <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 8005992:	7cfb      	ldrb	r3, [r7, #19]
 8005994:	461a      	mov	r2, r3
 8005996:	7cbb      	ldrb	r3, [r7, #18]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	441a      	add	r2, r3
 800599c:	7c7b      	ldrb	r3, [r7, #17]
 800599e:	041b      	lsls	r3, r3, #16
 80059a0:	4413      	add	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4b09      	ldr	r3, [pc, #36]	; (80059cc <BMP390_ReadTemp+0xa8>)
 80059a8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	0852      	lsrs	r2, r2, #1
 80059b0:	4413      	add	r3, r2
 80059b2:	0c5b      	lsrs	r3, r3, #17
 80059b4:	ee07 3a90 	vmov	s15, r3
 80059b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	04000105 	.word	0x04000105

080059d0 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 80059dc:	2123      	movs	r1, #35	; 0x23
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f00a fc48 	bl	8010274 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 80059e4:	230a      	movs	r3, #10
 80059e6:	9302      	str	r3, [sp, #8]
 80059e8:	2301      	movs	r3, #1
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	f107 0313 	add.w	r3, r7, #19
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	2301      	movs	r3, #1
 80059f4:	2204      	movs	r2, #4
 80059f6:	21ec      	movs	r1, #236	; 0xec
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f005 f82b 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80059fe:	230a      	movs	r3, #10
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	2301      	movs	r3, #1
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	f107 0312 	add.w	r3, r7, #18
 8005a0a:	9300      	str	r3, [sp, #0]
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	2205      	movs	r2, #5
 8005a10:	21ec      	movs	r1, #236	; 0xec
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f005 f81e 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 8005a18:	230a      	movs	r3, #10
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9301      	str	r3, [sp, #4]
 8005a20:	f107 0311 	add.w	r3, r7, #17
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	2301      	movs	r3, #1
 8005a28:	2206      	movs	r2, #6
 8005a2a:	21ec      	movs	r1, #236	; 0xec
 8005a2c:	68f8      	ldr	r0, [r7, #12]
 8005a2e:	f005 f811 	bl	800aa54 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005a32:	2300      	movs	r3, #0
 8005a34:	2200      	movs	r2, #0
 8005a36:	2100      	movs	r1, #0
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f00a faa7 	bl	800ff8c <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	461a      	mov	r2, r3
 8005a42:	7cbb      	ldrb	r3, [r7, #18]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	441a      	add	r2, r3
 8005a48:	7c7b      	ldrb	r3, [r7, #17]
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f7fe fd39 	bl	80044c8 <__aeabi_ui2d>
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <BMP390_ReadPress+0xc8>)
 8005a5c:	f7fe fdae 	bl	80045bc <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4610      	mov	r0, r2
 8005a66:	4619      	mov	r1, r3
 8005a68:	a309      	add	r3, pc, #36	; (adr r3, 8005a90 <BMP390_ReadPress+0xc0>)
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	f7fe fbef 	bl	8004250 <__adddf3>
 8005a72:	4602      	mov	r2, r0
 8005a74:	460b      	mov	r3, r1
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f7ff f84f 	bl	8004b1c <__aeabi_d2f>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	601a      	str	r2, [r3, #0]

}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	f3af 8000 	nop.w
 8005a90:	00000000 	.word	0x00000000
 8005a94:	4072c000 	.word	0x4072c000
 8005a98:	3f0db000 	.word	0x3f0db000

08005a9c <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af04      	add	r7, sp, #16
 8005aa2:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005aa8:	230a      	movs	r3, #10
 8005aaa:	9302      	str	r3, [sp, #8]
 8005aac:	2301      	movs	r3, #1
 8005aae:	9301      	str	r3, [sp, #4]
 8005ab0:	f107 030e 	add.w	r3, r7, #14
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	2200      	movs	r2, #0
 8005aba:	21ec      	movs	r1, #236	; 0xec
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f004 ffc9 	bl	800aa54 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005ac2:	7bbb      	ldrb	r3, [r7, #14]
 8005ac4:	2b60      	cmp	r3, #96	; 0x60
 8005ac6:	d001      	beq.n	8005acc <BMP390_Init+0x30>
		res = 1;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005acc:	230a      	movs	r3, #10
 8005ace:	9302      	str	r3, [sp, #8]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9301      	str	r3, [sp, #4]
 8005ad4:	f107 030e 	add.w	r3, r7, #14
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	2301      	movs	r3, #1
 8005adc:	2201      	movs	r2, #1
 8005ade:	21ec      	movs	r1, #236	; 0xec
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f004 ffb7 	bl	800aa54 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d001      	beq.n	8005af0 <BMP390_Init+0x54>
		res = 1;
 8005aec:	2301      	movs	r3, #1
 8005aee:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fec4 	bl	800587e <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7ff fe98 	bl	800582c <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fee7 	bl	80058d0 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005b02:	2005      	movs	r0, #5
 8005b04:	f002 fdec 	bl	80086e0 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005b08:	2342      	movs	r3, #66	; 0x42
 8005b0a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005b0c:	230a      	movs	r3, #10
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	f107 030e 	add.w	r3, r7, #14
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2219      	movs	r2, #25
 8005b1e:	21ec      	movs	r1, #236	; 0xec
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f004 fe83 	bl	800a82c <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e010      	b.n	8005b64 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff ff42 	bl	80059d0 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	edd3 7a00 	vldr	s15, [r3]
 8005b52:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b5a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	3301      	adds	r3, #1
 8005b62:	613b      	str	r3, [r7, #16]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	2b09      	cmp	r3, #9
 8005b68:	ddeb      	ble.n	8005b42 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005b6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b6e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b7c:	bf00      	nop
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	0000      	movs	r0, r0
	...

08005b88 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	ed93 7a00 	vldr	s14, [r3]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005ba0:	ee16 0a90 	vmov	r0, s13
 8005ba4:	f7fe fcb2 	bl	800450c <__aeabi_f2d>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005bf8 <BMP390_GetRelativeAltitude+0x70>
 8005bb0:	ec43 2b10 	vmov	d0, r2, r3
 8005bb4:	f00c fae2 	bl	801217c <pow>
 8005bb8:	ec53 2b10 	vmov	r2, r3, d0
 8005bbc:	f04f 0000 	mov.w	r0, #0
 8005bc0:	4911      	ldr	r1, [pc, #68]	; (8005c08 <BMP390_GetRelativeAltitude+0x80>)
 8005bc2:	f7fe fb43 	bl	800424c <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	a30c      	add	r3, pc, #48	; (adr r3, 8005c00 <BMP390_GetRelativeAltitude+0x78>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fe fcf2 	bl	80045bc <__aeabi_dmul>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4610      	mov	r0, r2
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fe ff9c 	bl	8004b1c <__aeabi_d2f>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	f3af 8000 	nop.w
 8005bf8:	1a36e2eb 	.word	0x1a36e2eb
 8005bfc:	3fc85bc0 	.word	0x3fc85bc0
 8005c00:	00000000 	.word	0x00000000
 8005c04:	40e5a540 	.word	0x40e5a540
 8005c08:	3ff00000 	.word	0x3ff00000

08005c0c <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af04      	add	r7, sp, #16
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005c18:	230a      	movs	r3, #10
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	1cfb      	adds	r3, r7, #3
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	2301      	movs	r3, #1
 8005c26:	2207      	movs	r2, #7
 8005c28:	2150      	movs	r1, #80	; 0x50
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f004 fdfe 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af04      	add	r7, sp, #16
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	460b      	mov	r3, r1
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005c46:	7afa      	ldrb	r2, [r7, #11]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005c4e:	230a      	movs	r3, #10
 8005c50:	9302      	str	r3, [sp, #8]
 8005c52:	2301      	movs	r3, #1
 8005c54:	9301      	str	r3, [sp, #4]
 8005c56:	f107 030b 	add.w	r3, r7, #11
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	223d      	movs	r2, #61	; 0x3d
 8005c60:	2150      	movs	r1, #80	; 0x50
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f004 fde2 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005c68:	bf00      	nop
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af04      	add	r7, sp, #16
 8005c76:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c78:	2364      	movs	r3, #100	; 0x64
 8005c7a:	9302      	str	r3, [sp, #8]
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	f107 030f 	add.w	r3, r7, #15
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2301      	movs	r3, #1
 8005c88:	223f      	movs	r2, #63	; 0x3f
 8005c8a:	2150      	movs	r1, #80	; 0x50
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f004 fee1 	bl	800aa54 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b088      	sub	sp, #32
 8005ca0:	af04      	add	r7, sp, #16
 8005ca2:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005ca4:	2364      	movs	r3, #100	; 0x64
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	f107 030f 	add.w	r3, r7, #15
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2237      	movs	r2, #55	; 0x37
 8005cb6:	2150      	movs	r1, #80	; 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f004 fecb 	bl	800aa54 <HAL_I2C_Mem_Read>
	return system_reg;
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005cd0:	2364      	movs	r3, #100	; 0x64
 8005cd2:	9302      	str	r3, [sp, #8]
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f107 030f 	add.w	r3, r7, #15
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	2301      	movs	r3, #1
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	2150      	movs	r1, #80	; 0x50
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f004 feb5 	bl	800aa54 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	f043 0320 	orr.w	r3, r3, #32
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005cf4:	230a      	movs	r3, #10
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	f107 030f 	add.w	r3, r7, #15
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	2210      	movs	r2, #16
 8005d06:	2150      	movs	r1, #80	; 0x50
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f004 fd8f 	bl	800a82c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005d0e:	2364      	movs	r3, #100	; 0x64
 8005d10:	9302      	str	r3, [sp, #8]
 8005d12:	2301      	movs	r3, #1
 8005d14:	9301      	str	r3, [sp, #4]
 8005d16:	f107 030f 	add.w	r3, r7, #15
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	220f      	movs	r2, #15
 8005d20:	2150      	movs	r1, #80	; 0x50
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f004 fe96 	bl	800aa54 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	f043 0320 	orr.w	r3, r3, #32
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005d32:	230a      	movs	r3, #10
 8005d34:	9302      	str	r3, [sp, #8]
 8005d36:	2301      	movs	r3, #1
 8005d38:	9301      	str	r3, [sp, #4]
 8005d3a:	f107 030f 	add.w	r3, r7, #15
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2301      	movs	r3, #1
 8005d42:	220f      	movs	r2, #15
 8005d44:	2150      	movs	r1, #80	; 0x50
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f004 fd70 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af04      	add	r7, sp, #16
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d60:	2364      	movs	r3, #100	; 0x64
 8005d62:	9302      	str	r3, [sp, #8]
 8005d64:	2301      	movs	r3, #1
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	f107 030f 	add.w	r3, r7, #15
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2301      	movs	r3, #1
 8005d70:	2212      	movs	r2, #18
 8005d72:	2150      	movs	r1, #80	; 0x50
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f004 fe6d 	bl	800aa54 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	2b5a      	cmp	r3, #90	; 0x5a
 8005d7e:	d012      	beq.n	8005da6 <BNO055_EnableHighGAcc+0x52>
 8005d80:	2b5a      	cmp	r3, #90	; 0x5a
 8005d82:	dc16      	bgt.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
 8005d84:	2b58      	cmp	r3, #88	; 0x58
 8005d86:	d002      	beq.n	8005d8e <BNO055_EnableHighGAcc+0x3a>
 8005d88:	2b59      	cmp	r3, #89	; 0x59
 8005d8a:	d006      	beq.n	8005d9a <BNO055_EnableHighGAcc+0x46>
 8005d8c:	e011      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	73fb      	strb	r3, [r7, #15]
			break;
 8005d98:	e00b      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	73fb      	strb	r3, [r7, #15]
			break;
 8005da4:	e005      	b.n	8005db2 <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	73fb      	strb	r3, [r7, #15]
			break;
 8005db0:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005db2:	230a      	movs	r3, #10
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	2301      	movs	r3, #1
 8005db8:	9301      	str	r3, [sp, #4]
 8005dba:	f107 030f 	add.w	r3, r7, #15
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	2212      	movs	r2, #18
 8005dc4:	2150      	movs	r1, #80	; 0x50
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f004 fd30 	bl	800a82c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005dcc:	2364      	movs	r3, #100	; 0x64
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	f107 030f 	add.w	r3, r7, #15
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	2301      	movs	r3, #1
 8005ddc:	2212      	movs	r2, #18
 8005dde:	2150      	movs	r1, #80	; 0x50
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f004 fe37 	bl	800aa54 <HAL_I2C_Mem_Read>
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af04      	add	r7, sp, #16
 8005df4:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005df6:	2364      	movs	r3, #100	; 0x64
 8005df8:	9302      	str	r3, [sp, #8]
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	9301      	str	r3, [sp, #4]
 8005dfe:	f107 030f 	add.w	r3, r7, #15
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	2301      	movs	r3, #1
 8005e06:	223f      	movs	r2, #63	; 0x3f
 8005e08:	2150      	movs	r1, #80	; 0x50
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f004 fe22 	bl	800aa54 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005e1a:	230a      	movs	r3, #10
 8005e1c:	9302      	str	r3, [sp, #8]
 8005e1e:	2301      	movs	r3, #1
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f107 030f 	add.w	r3, r7, #15
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	2301      	movs	r3, #1
 8005e2a:	223f      	movs	r2, #63	; 0x3f
 8005e2c:	2150      	movs	r1, #80	; 0x50
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f004 fcfc 	bl	800a82c <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff ff31 	bl	8005c9c <BNO055_ReadITStatus>
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b088      	sub	sp, #32
 8005e46:	af04      	add	r7, sp, #16
 8005e48:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7ff ff10 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	3b80      	subs	r3, #128	; 0x80
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e62:	230a      	movs	r3, #10
 8005e64:	9302      	str	r3, [sp, #8]
 8005e66:	2301      	movs	r3, #1
 8005e68:	9301      	str	r3, [sp, #4]
 8005e6a:	f107 030e 	add.w	r3, r7, #14
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	2301      	movs	r3, #1
 8005e72:	223f      	movs	r2, #63	; 0x3f
 8005e74:	2150      	movs	r1, #80	; 0x50
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f004 fcd8 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af04      	add	r7, sp, #16
 8005e8a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff feef 	bl	8005c70 <BNO055_ReadSystemReg>
 8005e92:	4603      	mov	r3, r0
 8005e94:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	f023 0301 	bic.w	r3, r3, #1
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005ea4:	230a      	movs	r3, #10
 8005ea6:	9302      	str	r3, [sp, #8]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f107 030e 	add.w	r3, r7, #14
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	223f      	movs	r2, #63	; 0x3f
 8005eb6:	2150      	movs	r1, #80	; 0x50
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f004 fcb7 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b088      	sub	sp, #32
 8005eca:	af04      	add	r7, sp, #16
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005ed4:	230a      	movs	r3, #10
 8005ed6:	9302      	str	r3, [sp, #8]
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9301      	str	r3, [sp, #4]
 8005edc:	f107 030e 	add.w	r3, r7, #14
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	2236      	movs	r2, #54	; 0x36
 8005ee6:	2150      	movs	r1, #80	; 0x50
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f004 fdb3 	bl	800aa54 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	2b0f      	cmp	r3, #15
 8005ef6:	d001      	beq.n	8005efc <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ffc1 	bl	8005e84 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f06:	f009 fe6d 	bl	800fbe4 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	2301      	movs	r3, #1
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	f107 030e 	add.w	r3, r7, #14
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	223a      	movs	r2, #58	; 0x3a
 8005f1c:	2150      	movs	r1, #80	; 0x50
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f004 fd98 	bl	800aa54 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005f2e:	230a      	movs	r3, #10
 8005f30:	9302      	str	r3, [sp, #8]
 8005f32:	2301      	movs	r3, #1
 8005f34:	9301      	str	r3, [sp, #4]
 8005f36:	f107 030e 	add.w	r3, r7, #14
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	2239      	movs	r2, #57	; 0x39
 8005f40:	2150      	movs	r1, #80	; 0x50
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f004 fd86 	bl	800aa54 <HAL_I2C_Mem_Read>

	return res;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af04      	add	r7, sp, #16
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005f5e:	78fb      	ldrb	r3, [r7, #3]
 8005f60:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005f62:	230a      	movs	r3, #10
 8005f64:	9302      	str	r3, [sp, #8]
 8005f66:	2301      	movs	r3, #1
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	f107 030f 	add.w	r3, r7, #15
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2301      	movs	r3, #1
 8005f72:	2214      	movs	r2, #20
 8005f74:	2150      	movs	r1, #80	; 0x50
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f004 fc58 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b088      	sub	sp, #32
 8005f88:	af04      	add	r7, sp, #16
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f94:	230a      	movs	r3, #10
 8005f96:	9302      	str	r3, [sp, #8]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	f107 030f 	add.w	r3, r7, #15
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	2213      	movs	r2, #19
 8005fa6:	2150      	movs	r1, #80	; 0x50
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f004 fc3f 	bl	800a82c <HAL_I2C_Mem_Write>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b088      	sub	sp, #32
 8005fba:	af04      	add	r7, sp, #16
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fe18 	bl	8005c0c <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7ff fe73 	bl	8005cc8 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005fe2:	2158      	movs	r1, #88	; 0x58
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff feb5 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005fea:	2159      	movs	r1, #89	; 0x59
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7ff feb1 	bl	8005d54 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005ff2:	215a      	movs	r1, #90	; 0x5a
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff fead 	bl	8005d54 <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005ffa:	2150      	movs	r1, #80	; 0x50
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ffa8 	bl	8005f52 <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff ffbd 	bl	8005f84 <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 800600a:	2100      	movs	r1, #0
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7ff fdfd 	bl	8005c0c <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ff15 	bl	8005e42 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8006018:	20c8      	movs	r0, #200	; 0xc8
 800601a:	f009 fde3 	bl	800fbe4 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ff50 	bl	8005ec6 <BNO055_CheckSelfTestResult>
 8006026:	4603      	mov	r3, r0
 8006028:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <BNO055_Init+0x7e>
		res = 1;
 8006030:	2301      	movs	r3, #1
 8006032:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	210c      	movs	r1, #12
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fdfd 	bl	8005c38 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 800603e:	230a      	movs	r3, #10
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	2301      	movs	r3, #1
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	f107 030e 	add.w	r3, r7, #14
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2301      	movs	r3, #1
 800604e:	223d      	movs	r2, #61	; 0x3d
 8006050:	2150      	movs	r1, #80	; 0x50
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f004 fcfe 	bl	800aa54 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d001      	beq.n	8006062 <BNO055_Init+0xac>
		res = 1;
 800605e:	2301      	movs	r3, #1
 8006060:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006062:	7bfb      	ldrb	r3, [r7, #15]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	0000      	movs	r0, r0
	...

08006070 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af04      	add	r7, sp, #16
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800607c:	2119      	movs	r1, #25
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f00a f8f8 	bl	8010274 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8006084:	230a      	movs	r3, #10
 8006086:	9302      	str	r3, [sp, #8]
 8006088:	2301      	movs	r3, #1
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f107 0317 	add.w	r3, r7, #23
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	2301      	movs	r3, #1
 8006094:	2208      	movs	r2, #8
 8006096:	2150      	movs	r1, #80	; 0x50
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f004 fcdb 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800609e:	230a      	movs	r3, #10
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	2301      	movs	r3, #1
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	f107 0316 	add.w	r3, r7, #22
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2301      	movs	r3, #1
 80060ae:	2209      	movs	r2, #9
 80060b0:	2150      	movs	r1, #80	; 0x50
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f004 fcce 	bl	800aa54 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f009 ff64 	bl	800ff8c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	461a      	mov	r2, r3
 80060c8:	7dbb      	ldrb	r3, [r7, #22]
 80060ca:	021b      	lsls	r3, r3, #8
 80060cc:	4413      	add	r3, r2
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060d6:	4b74      	ldr	r3, [pc, #464]	; (80062a8 <BNO055_ReadAccel+0x238>)
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fe fa0b 	bl	800450c <__aeabi_f2d>
 80060f6:	a368      	add	r3, pc, #416	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	f7fe fcee 	bl	8004adc <__aeabi_dcmpgt>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d012      	beq.n	800612c <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f9fe 	bl	800450c <__aeabi_f2d>
 8006110:	a363      	add	r3, pc, #396	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006116:	f7fe f899 	bl	800424c <__aeabi_dsub>
 800611a:	4602      	mov	r2, r0
 800611c:	460b      	mov	r3, r1
 800611e:	4610      	mov	r0, r2
 8006120:	4619      	mov	r1, r3
 8006122:	f7fe fcfb 	bl	8004b1c <__aeabi_d2f>
 8006126:	4602      	mov	r2, r0
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 800612c:	2119      	movs	r1, #25
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f00a f8a0 	bl	8010274 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 8006134:	230a      	movs	r3, #10
 8006136:	9302      	str	r3, [sp, #8]
 8006138:	2301      	movs	r3, #1
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f107 0317 	add.w	r3, r7, #23
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2301      	movs	r3, #1
 8006144:	220a      	movs	r2, #10
 8006146:	2150      	movs	r1, #80	; 0x50
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f004 fc83 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800614e:	230a      	movs	r3, #10
 8006150:	9302      	str	r3, [sp, #8]
 8006152:	2301      	movs	r3, #1
 8006154:	9301      	str	r3, [sp, #4]
 8006156:	f107 0316 	add.w	r3, r7, #22
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	2301      	movs	r3, #1
 800615e:	220b      	movs	r2, #11
 8006160:	2150      	movs	r1, #80	; 0x50
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f004 fc76 	bl	800aa54 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006168:	2300      	movs	r3, #0
 800616a:	2200      	movs	r2, #0
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f009 ff0c 	bl	800ff8c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	461a      	mov	r2, r3
 8006178:	7dbb      	ldrb	r3, [r7, #22]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	4413      	add	r3, r2
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006186:	4b48      	ldr	r3, [pc, #288]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fe f9b3 	bl	800450c <__aeabi_f2d>
 80061a6:	a33c      	add	r3, pc, #240	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	f7fe fc96 	bl	8004adc <__aeabi_dcmpgt>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d012      	beq.n	80061dc <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe f9a6 	bl	800450c <__aeabi_f2d>
 80061c0:	a337      	add	r3, pc, #220	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fe f841 	bl	800424c <__aeabi_dsub>
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f7fe fca3 	bl	8004b1c <__aeabi_d2f>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 80061dc:	2119      	movs	r1, #25
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f00a f848 	bl	8010274 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80061e4:	230a      	movs	r3, #10
 80061e6:	9302      	str	r3, [sp, #8]
 80061e8:	2301      	movs	r3, #1
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	f107 0317 	add.w	r3, r7, #23
 80061f0:	9300      	str	r3, [sp, #0]
 80061f2:	2301      	movs	r3, #1
 80061f4:	220c      	movs	r2, #12
 80061f6:	2150      	movs	r1, #80	; 0x50
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f004 fc2b 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80061fe:	230a      	movs	r3, #10
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	2301      	movs	r3, #1
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	f107 0316 	add.w	r3, r7, #22
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	2301      	movs	r3, #1
 800620e:	220d      	movs	r2, #13
 8006210:	2150      	movs	r1, #80	; 0x50
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f004 fc1e 	bl	800aa54 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006218:	2300      	movs	r3, #0
 800621a:	2200      	movs	r2, #0
 800621c:	2100      	movs	r1, #0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f009 feb4 	bl	800ff8c <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	461a      	mov	r2, r3
 8006228:	7dbb      	ldrb	r3, [r7, #22]
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	4413      	add	r3, r2
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006236:	4b1c      	ldr	r3, [pc, #112]	; (80062a8 <BNO055_ReadAccel+0x238>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	4618      	mov	r0, r3
 8006252:	f7fe f95b 	bl	800450c <__aeabi_f2d>
 8006256:	a310      	add	r3, pc, #64	; (adr r3, 8006298 <BNO055_ReadAccel+0x228>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fe fc3e 	bl	8004adc <__aeabi_dcmpgt>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d100      	bne.n	8006268 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 8006266:	e012      	b.n	800628e <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4618      	mov	r0, r3
 800626e:	f7fe f94d 	bl	800450c <__aeabi_f2d>
 8006272:	a30b      	add	r3, pc, #44	; (adr r3, 80062a0 <BNO055_ReadAccel+0x230>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f7fd ffe8 	bl	800424c <__aeabi_dsub>
 800627c:	4602      	mov	r2, r0
 800627e:	460b      	mov	r3, r1
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7fe fc4a 	bl	8004b1c <__aeabi_d2f>
 8006288:	4602      	mov	r2, r0
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	615a      	str	r2, [r3, #20]
}
 800628e:	bf00      	nop
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	47ae147b 	.word	0x47ae147b
 800629c:	40747ae1 	.word	0x40747ae1
 80062a0:	47ae147b 	.word	0x47ae147b
 80062a4:	40847ae1 	.word	0x40847ae1
 80062a8:	20000000 	.word	0x20000000

080062ac <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af04      	add	r7, sp, #16
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80062b6:	230a      	movs	r3, #10
 80062b8:	9302      	str	r3, [sp, #8]
 80062ba:	2301      	movs	r3, #1
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	f107 030f 	add.w	r3, r7, #15
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	2301      	movs	r3, #1
 80062c6:	221c      	movs	r2, #28
 80062c8:	2150      	movs	r1, #80	; 0x50
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f004 fbc2 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80062d0:	230a      	movs	r3, #10
 80062d2:	9302      	str	r3, [sp, #8]
 80062d4:	2301      	movs	r3, #1
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	f107 030e 	add.w	r3, r7, #14
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2301      	movs	r3, #1
 80062e0:	221d      	movs	r2, #29
 80062e2:	2150      	movs	r1, #80	; 0x50
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f004 fbb5 	bl	800aa54 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	7bbb      	ldrb	r3, [r7, #14]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	4413      	add	r3, r2
 80062f4:	ee07 3a90 	vmov	s15, r3
 80062f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <BNO055_ReadEuler_Roll+0x98>)
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006318:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006348 <BNO055_ReadEuler_Roll+0x9c>
 800631c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	dc00      	bgt.n	8006328 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 8006326:	e009      	b.n	800633c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800632e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800634c <BNO055_ReadEuler_Roll+0xa0>
 8006332:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000002 	.word	0x20000002
 8006348:	44fa0000 	.word	0x44fa0000
 800634c:	45800000 	.word	0x45800000

08006350 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af04      	add	r7, sp, #16
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800635a:	230a      	movs	r3, #10
 800635c:	9302      	str	r3, [sp, #8]
 800635e:	2301      	movs	r3, #1
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	f107 030f 	add.w	r3, r7, #15
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	2301      	movs	r3, #1
 800636a:	221e      	movs	r2, #30
 800636c:	2150      	movs	r1, #80	; 0x50
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f004 fb70 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8006374:	230a      	movs	r3, #10
 8006376:	9302      	str	r3, [sp, #8]
 8006378:	2301      	movs	r3, #1
 800637a:	9301      	str	r3, [sp, #4]
 800637c:	f107 030e 	add.w	r3, r7, #14
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	2301      	movs	r3, #1
 8006384:	221f      	movs	r2, #31
 8006386:	2150      	movs	r1, #80	; 0x50
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f004 fb63 	bl	800aa54 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	461a      	mov	r2, r3
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	021b      	lsls	r3, r3, #8
 8006396:	4413      	add	r3, r2
 8006398:	ee07 3a90 	vmov	s15, r3
 800639c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <BNO055_ReadEuler_Pitch+0x98>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063bc:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80063ec <BNO055_ReadEuler_Pitch+0x9c>
 80063c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c8:	dc00      	bgt.n	80063cc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80063ca:	e009      	b.n	80063e0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80063d2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80063f0 <BNO055_ReadEuler_Pitch+0xa0>
 80063d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	20000002 	.word	0x20000002
 80063ec:	44fa0000 	.word	0x44fa0000
 80063f0:	45800000 	.word	0x45800000

080063f4 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80063fe:	230a      	movs	r3, #10
 8006400:	9302      	str	r3, [sp, #8]
 8006402:	2301      	movs	r3, #1
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	f107 030f 	add.w	r3, r7, #15
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	2301      	movs	r3, #1
 800640e:	221a      	movs	r2, #26
 8006410:	2150      	movs	r1, #80	; 0x50
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f004 fb1e 	bl	800aa54 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006418:	230a      	movs	r3, #10
 800641a:	9302      	str	r3, [sp, #8]
 800641c:	2301      	movs	r3, #1
 800641e:	9301      	str	r3, [sp, #4]
 8006420:	f107 030e 	add.w	r3, r7, #14
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	2301      	movs	r3, #1
 8006428:	221b      	movs	r2, #27
 800642a:	2150      	movs	r1, #80	; 0x50
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f004 fb11 	bl	800aa54 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	461a      	mov	r2, r3
 8006436:	7bbb      	ldrb	r3, [r7, #14]
 8006438:	021b      	lsls	r3, r3, #8
 800643a:	4413      	add	r3, r2
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <BNO055_ReadEuler_Yaw+0x70>)
 8006446:	881b      	ldrh	r3, [r3, #0]
 8006448:	ee07 3a90 	vmov	s15, r3
 800644c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000002 	.word	0x20000002

08006468 <BNO055_ComputeSpeed>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struct
 * @INFORMATIONS - Need to be call after a ReadAccel function in order to work correctly
 * Tick should be increment every ms in order to gather correct data
 */
void BNO055_ComputeSpeed(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]

	float speed_vector_x;
	float current_acceleration =BNO055->raw_data.accelerometer.x;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	61fb      	str	r3, [r7, #28]
	uint32_t current_tick = HAL_GetTick();
 8006478:	f002 f926 	bl	80086c8 <HAL_GetTick>
 800647c:	61b8      	str	r0, [r7, #24]
	float delta_acceleration = (current_acceleration - BNO055->reserved_for_operation.previous_acceleration.x);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8006484:	ed97 7a07 	vldr	s14, [r7, #28]
 8006488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800648c:	edc7 7a05 	vstr	s15, [r7, #20]
	uint32_t delta_tick = (current_tick - BNO055->reserved_for_operation.last_call_tick.x);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	613b      	str	r3, [r7, #16]


	speed_vector_x = (float)(delta_tick/1000)*current_acceleration;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <BNO055_ComputeSpeed+0x60>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	099b      	lsrs	r3, r3, #6
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	ed97 7a07 	vldr	s14, [r7, #28]
 80064b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b6:	edc7 7a03 	vstr	s15, [r7, #12]
	BNO055->processed_data.speed_vector.x = speed_vector_x;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064c0:	bf00      	nop
 80064c2:	3720      	adds	r7, #32
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80064d2:	4b12      	ldr	r3, [pc, #72]	; (800651c <MX_DMA_Init+0x50>)
 80064d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <MX_DMA_Init+0x50>)
 80064d8:	f043 0304 	orr.w	r3, r3, #4
 80064dc:	6493      	str	r3, [r2, #72]	; 0x48
 80064de:	4b0f      	ldr	r3, [pc, #60]	; (800651c <MX_DMA_Init+0x50>)
 80064e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80064ea:	4b0c      	ldr	r3, [pc, #48]	; (800651c <MX_DMA_Init+0x50>)
 80064ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ee:	4a0b      	ldr	r2, [pc, #44]	; (800651c <MX_DMA_Init+0x50>)
 80064f0:	f043 0301 	orr.w	r3, r3, #1
 80064f4:	6493      	str	r3, [r2, #72]	; 0x48
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <MX_DMA_Init+0x50>)
 80064f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8006502:	2200      	movs	r2, #0
 8006504:	2105      	movs	r1, #5
 8006506:	200b      	movs	r0, #11
 8006508:	f003 fbd0 	bl	8009cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800650c:	200b      	movs	r0, #11
 800650e:	f003 fbe7 	bl	8009ce0 <HAL_NVIC_EnableIRQ>

}
 8006512:	bf00      	nop
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	40021000 	.word	0x40021000

08006520 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006526:	f107 0314 	add.w	r3, r7, #20
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006536:	4b37      	ldr	r3, [pc, #220]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653a:	4a36      	ldr	r2, [pc, #216]	; (8006614 <MX_GPIO_Init+0xf4>)
 800653c:	f043 0320 	orr.w	r3, r3, #32
 8006540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006542:	4b34      	ldr	r3, [pc, #208]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800654e:	4b31      	ldr	r3, [pc, #196]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	4a30      	ldr	r2, [pc, #192]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006554:	f043 0304 	orr.w	r3, r3, #4
 8006558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800655a:	4b2e      	ldr	r3, [pc, #184]	; (8006614 <MX_GPIO_Init+0xf4>)
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	4a2a      	ldr	r2, [pc, #168]	; (8006614 <MX_GPIO_Init+0xf4>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006572:	4b28      	ldr	r3, [pc, #160]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800657e:	4b25      	ldr	r3, [pc, #148]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006582:	4a24      	ldr	r2, [pc, #144]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006584:	f043 0308 	orr.w	r3, r3, #8
 8006588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800658a:	4b22      	ldr	r3, [pc, #136]	; (8006614 <MX_GPIO_Init+0xf4>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	607b      	str	r3, [r7, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006596:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <MX_GPIO_Init+0xf4>)
 8006598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <MX_GPIO_Init+0xf4>)
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065a2:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <MX_GPIO_Init+0xf4>)
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80065ae:	2200      	movs	r2, #0
 80065b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065b8:	f004 f854 	bl	800a664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80065bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065c2:	2301      	movs	r3, #1
 80065c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ca:	2300      	movs	r3, #0
 80065cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80065ce:	f107 0314 	add.w	r3, r7, #20
 80065d2:	4619      	mov	r1, r3
 80065d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065d8:	f003 fec2 	bl	800a360 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80065dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80065e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	4619      	mov	r1, r3
 80065f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065f6:	f003 feb3 	bl	800a360 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80065fa:	2200      	movs	r2, #0
 80065fc:	2105      	movs	r1, #5
 80065fe:	2028      	movs	r0, #40	; 0x28
 8006600:	f003 fb54 	bl	8009cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006604:	2028      	movs	r0, #40	; 0x28
 8006606:	f003 fb6b 	bl	8009ce0 <HAL_NVIC_EnableIRQ>

}
 800660a:	bf00      	nop
 800660c:	3728      	adds	r7, #40	; 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40021000 	.word	0x40021000

08006618 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <MX_I2C2_Init+0x74>)
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <MX_I2C2_Init+0x78>)
 8006620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <MX_I2C2_Init+0x74>)
 8006624:	4a1b      	ldr	r2, [pc, #108]	; (8006694 <MX_I2C2_Init+0x7c>)
 8006626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006628:	4b18      	ldr	r3, [pc, #96]	; (800668c <MX_I2C2_Init+0x74>)
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800662e:	4b17      	ldr	r3, [pc, #92]	; (800668c <MX_I2C2_Init+0x74>)
 8006630:	2201      	movs	r2, #1
 8006632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006634:	4b15      	ldr	r3, [pc, #84]	; (800668c <MX_I2C2_Init+0x74>)
 8006636:	2200      	movs	r2, #0
 8006638:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <MX_I2C2_Init+0x74>)
 800663c:	2200      	movs	r2, #0
 800663e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006640:	4b12      	ldr	r3, [pc, #72]	; (800668c <MX_I2C2_Init+0x74>)
 8006642:	2200      	movs	r2, #0
 8006644:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006646:	4b11      	ldr	r3, [pc, #68]	; (800668c <MX_I2C2_Init+0x74>)
 8006648:	2200      	movs	r2, #0
 800664a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800664c:	4b0f      	ldr	r3, [pc, #60]	; (800668c <MX_I2C2_Init+0x74>)
 800664e:	2200      	movs	r2, #0
 8006650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006652:	480e      	ldr	r0, [pc, #56]	; (800668c <MX_I2C2_Init+0x74>)
 8006654:	f004 f85b 	bl	800a70e <HAL_I2C_Init>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800665e:	f001 f82f 	bl	80076c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006662:	2100      	movs	r1, #0
 8006664:	4809      	ldr	r0, [pc, #36]	; (800668c <MX_I2C2_Init+0x74>)
 8006666:	f004 fdb5 	bl	800b1d4 <HAL_I2CEx_ConfigAnalogFilter>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006670:	f001 f826 	bl	80076c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006674:	2100      	movs	r1, #0
 8006676:	4805      	ldr	r0, [pc, #20]	; (800668c <MX_I2C2_Init+0x74>)
 8006678:	f004 fdf7 	bl	800b26a <HAL_I2CEx_ConfigDigitalFilter>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006682:	f001 f81d 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	200001fc 	.word	0x200001fc
 8006690:	40005800 	.word	0x40005800
 8006694:	20c0edff 	.word	0x20c0edff

08006698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b0a0      	sub	sp, #128	; 0x80
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	609a      	str	r2, [r3, #8]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80066b0:	f107 0318 	add.w	r3, r7, #24
 80066b4:	2254      	movs	r2, #84	; 0x54
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f00b fbcf 	bl	8011e5c <memset>
  if(i2cHandle->Instance==I2C2)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <HAL_I2C_MspInit+0xdc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d151      	bne.n	800676c <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80066c8:	2380      	movs	r3, #128	; 0x80
 80066ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80066cc:	2300      	movs	r3, #0
 80066ce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80066d0:	f107 0318 	add.w	r3, r7, #24
 80066d4:	4618      	mov	r0, r3
 80066d6:	f005 fc1f 	bl	800bf18 <HAL_RCCEx_PeriphCLKConfig>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80066e0:	f000 ffee 	bl	80076c0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066e8:	4a23      	ldr	r2, [pc, #140]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066ea:	f043 0320 	orr.w	r3, r3, #32
 80066ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 80066fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006708:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800670a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006714:	2301      	movs	r3, #1
 8006716:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006718:	2312      	movs	r3, #18
 800671a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671c:	2300      	movs	r3, #0
 800671e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006720:	2300      	movs	r3, #0
 8006722:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006724:	2304      	movs	r3, #4
 8006726:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006728:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800672c:	4619      	mov	r1, r3
 800672e:	4813      	ldr	r0, [pc, #76]	; (800677c <HAL_I2C_MspInit+0xe4>)
 8006730:	f003 fe16 	bl	800a360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006734:	2310      	movs	r3, #16
 8006736:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006738:	2312      	movs	r3, #18
 800673a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	2300      	movs	r3, #0
 800673e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006740:	2300      	movs	r3, #0
 8006742:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006744:	2304      	movs	r3, #4
 8006746:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006748:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800674c:	4619      	mov	r1, r3
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <HAL_I2C_MspInit+0xe8>)
 8006750:	f003 fe06 	bl	800a360 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006754:	4b08      	ldr	r3, [pc, #32]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	4a07      	ldr	r2, [pc, #28]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 800675a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800675e:	6593      	str	r3, [r2, #88]	; 0x58
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <HAL_I2C_MspInit+0xe0>)
 8006762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800676c:	bf00      	nop
 800676e:	3780      	adds	r7, #128	; 0x80
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	40005800 	.word	0x40005800
 8006778:	40021000 	.word	0x40021000
 800677c:	48001400 	.word	0x48001400
 8006780:	48000800 	.word	0x48000800

08006784 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	; 0x38
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800678e:	4a70      	ldr	r2, [pc, #448]	; (8006950 <gps_ReadNMEA+0x1cc>)
 8006790:	f107 0318 	add.w	r3, r7, #24
 8006794:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006798:	6018      	str	r0, [r3, #0]
 800679a:	3304      	adds	r3, #4
 800679c:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 80067a4:	2300      	movs	r3, #0
 80067a6:	633b      	str	r3, [r7, #48]	; 0x30
 80067a8:	e0c8      	b.n	800693c <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 80067aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b24      	cmp	r3, #36	; 0x24
 80067b4:	f040 80bf 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067bc:	e00f      	b.n	80067de <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80067be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	4413      	add	r3, r2
 80067c4:	3301      	adds	r3, #1
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	7819      	ldrb	r1, [r3, #0]
 80067cc:	f107 0220 	add.w	r2, r7, #32
 80067d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d2:	4413      	add	r3, r2
 80067d4:	460a      	mov	r2, r1
 80067d6:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	3301      	adds	r3, #1
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	ddec      	ble.n	80067be <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80067ea:	f107 0218 	add.w	r2, r7, #24
 80067ee:	f107 0320 	add.w	r3, r7, #32
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fd fd13 	bl	8004220 <strcmp>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 809a 	bne.w	8006936 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	3306      	adds	r3, #6
 8006806:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006808:	2300      	movs	r3, #0
 800680a:	62bb      	str	r3, [r7, #40]	; 0x28
 800680c:	e08e      	b.n	800692c <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3301      	adds	r3, #1
 8006812:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006820:	e013      	b.n	800684a <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	441a      	add	r2, r3
 8006828:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800682c:	7812      	ldrb	r2, [r2, #0]
 800682e:	3338      	adds	r3, #56	; 0x38
 8006830:	443b      	add	r3, r7
 8006832:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3301      	adds	r3, #1
 800683a:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 800683c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683e:	b2da      	uxtb	r2, r3
 8006840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <gps_ReadNMEA+0xde>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	4413      	add	r3, r2
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	2b2c      	cmp	r3, #44	; 0x2c
 8006860:	d1df      	bne.n	8006822 <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 8006862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006866:	3301      	adds	r3, #1
 8006868:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 800686c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006870:	3b01      	subs	r3, #1
 8006872:	2b0a      	cmp	r3, #10
 8006874:	d857      	bhi.n	8006926 <gps_ReadNMEA+0x1a2>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <gps_ReadNMEA+0xf8>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068b7 	.word	0x080068b7
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068d3 	.word	0x080068d3
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068ef 	.word	0x080068ef
 8006894:	080068fd 	.word	0x080068fd
 8006898:	08006927 	.word	0x08006927
 800689c:	0800690b 	.word	0x0800690b
 80068a0:	08006927 	.word	0x08006927
 80068a4:	08006919 	.word	0x08006919
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 80068a8:	f107 030c 	add.w	r3, r7, #12
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 f850 	bl	8006954 <gps_ProcessUTC>
							break;
 80068b4:	e037      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f887 	bl	80069d0 <gps_ProcessLatitude>
							break;
 80068c2:	e030      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80068c4:	f107 030c 	add.w	r3, r7, #12
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f9fa 	bl	8006cc4 <gps_ProcessNorthSouth>
							break;
 80068d0:	e029      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80068d2:	f107 030c 	add.w	r3, r7, #12
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f935 	bl	8006b48 <gps_ProcessLongitude>
							break;
 80068de:	e022      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80068e0:	f107 030c 	add.w	r3, r7, #12
 80068e4:	6839      	ldr	r1, [r7, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fa02 	bl	8006cf0 <gps_ProcessEastWest>
							break;
 80068ec:	e01b      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fa11 	bl	8006d1c <gps_ProcessFix>
							break;
 80068fa:	e014      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fa28 	bl	8006d58 <gps_ProcessSatelliteCount>
							break;
 8006908:	e00d      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f000 fa3d 	bl	8006d90 <gps_ProcessAltitude>
							break;
 8006916:	e006      	b.n	8006926 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006918:	f107 030c 	add.w	r3, r7, #12
 800691c:	6839      	ldr	r1, [r7, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f000 fa92 	bl	8006e48 <gps_ProcessAltitudeCorre>
							break;
 8006924:	bf00      	nop
				for(int k=0;k<12;k++){
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	3301      	adds	r3, #1
 800692a:	62bb      	str	r3, [r7, #40]	; 0x28
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	2b0b      	cmp	r3, #11
 8006930:	f77f af6d 	ble.w	800680e <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006934:	e008      	b.n	8006948 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	3301      	adds	r3, #1
 800693a:	633b      	str	r3, [r7, #48]	; 0x30
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006942:	f6ff af32 	blt.w	80067aa <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8006946:	bf00      	nop
 8006948:	bf00      	nop
 800694a:	3738      	adds	r7, #56	; 0x38
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	080130e8 	.word	0x080130e8

08006954 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	0092      	lsls	r2, r2, #2
 8006966:	4413      	add	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3301      	adds	r3, #1
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	4413      	add	r3, r2
 8006974:	b2db      	uxtb	r3, r3
 8006976:	3b10      	subs	r3, #16
 8006978:	b2da      	uxtb	r2, r3
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3302      	adds	r3, #2
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	4413      	add	r3, r2
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	b2da      	uxtb	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	3303      	adds	r3, #3
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	4413      	add	r3, r2
 8006996:	b2db      	uxtb	r3, r3
 8006998:	3b10      	subs	r3, #16
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	3304      	adds	r3, #4
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	0092      	lsls	r2, r2, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3305      	adds	r3, #5
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	4413      	add	r3, r2
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3b10      	subs	r3, #16
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	769a      	strb	r2, [r3, #26]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	3b30      	subs	r3, #48	; 0x30
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3301      	adds	r3, #1
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	3b30      	subs	r3, #48	; 0x30
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3b30      	subs	r3, #48	; 0x30
 8006a24:	4413      	add	r3, r2
 8006a26:	ee07 3a90 	vmov	s15, r3
 8006a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a2e:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f7fd fd6a 	bl	800450c <__aeabi_f2d>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3305      	adds	r3, #5
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	3b30      	subs	r3, #48	; 0x30
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fd fd4f 	bl	80044e8 <__aeabi_i2d>
 8006a4a:	a336      	add	r3, pc, #216	; (adr r3, 8006b24 <gps_ProcessLatitude+0x154>)
 8006a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a50:	f7fd fdb4 	bl	80045bc <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4690      	mov	r8, r2
 8006a5a:	4699      	mov	r9, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3306      	adds	r3, #6
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	3b30      	subs	r3, #48	; 0x30
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7fd fd3f 	bl	80044e8 <__aeabi_i2d>
 8006a6a:	a330      	add	r3, pc, #192	; (adr r3, 8006b2c <gps_ProcessLatitude+0x15c>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	f7fd fda4 	bl	80045bc <__aeabi_dmul>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4640      	mov	r0, r8
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f7fd fbe8 	bl	8004250 <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4690      	mov	r8, r2
 8006a86:	4699      	mov	r9, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3307      	adds	r3, #7
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	3b30      	subs	r3, #48	; 0x30
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd fd29 	bl	80044e8 <__aeabi_i2d>
 8006a96:	a327      	add	r3, pc, #156	; (adr r3, 8006b34 <gps_ProcessLatitude+0x164>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7fd fd8e 	bl	80045bc <__aeabi_dmul>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4640      	mov	r0, r8
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	f7fd fbd2 	bl	8004250 <__adddf3>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4690      	mov	r8, r2
 8006ab2:	4699      	mov	r9, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3b30      	subs	r3, #48	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7fd fd13 	bl	80044e8 <__aeabi_i2d>
 8006ac2:	a31e      	add	r3, pc, #120	; (adr r3, 8006b3c <gps_ProcessLatitude+0x16c>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7fd fd78 	bl	80045bc <__aeabi_dmul>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	f7fd fbbc 	bl	8004250 <__adddf3>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7fd fbb6 	bl	8004250 <__adddf3>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4610      	mov	r0, r2
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7fe f816 	bl	8004b1c <__aeabi_d2f>
 8006af0:	4603      	mov	r3, r0
 8006af2:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af8:	ee07 3a90 	vmov	s15, r3
 8006afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b00:	edd7 6a02 	vldr	s13, [r7, #8]
 8006b04:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006b20 <gps_ProcessLatitude+0x150>
 8006b08:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	edc3 7a00 	vstr	s15, [r3]
}
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006b20:	42700000 	.word	0x42700000
 8006b24:	9999999a 	.word	0x9999999a
 8006b28:	3fb99999 	.word	0x3fb99999
 8006b2c:	47ae147b 	.word	0x47ae147b
 8006b30:	3f847ae1 	.word	0x3f847ae1
 8006b34:	d2f1a9fc 	.word	0xd2f1a9fc
 8006b38:	3f50624d 	.word	0x3f50624d
 8006b3c:	eb1c432d 	.word	0xeb1c432d
 8006b40:	3f1a36e2 	.word	0x3f1a36e2
 8006b44:	00000000 	.word	0x00000000

08006b48 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3301      	adds	r3, #1
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3b30      	subs	r3, #48	; 0x30
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	0092      	lsls	r2, r2, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3302      	adds	r3, #2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	3b30      	subs	r3, #48	; 0x30
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3303      	adds	r3, #3
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	461a      	mov	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	3b30      	subs	r3, #48	; 0x30
 8006b9e:	4413      	add	r3, r2
 8006ba0:	ee07 3a90 	vmov	s15, r3
 8006ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba8:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006bac:	68b8      	ldr	r0, [r7, #8]
 8006bae:	f7fd fcad 	bl	800450c <__aeabi_f2d>
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3305      	adds	r3, #5
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	3b30      	subs	r3, #48	; 0x30
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fd fc92 	bl	80044e8 <__aeabi_i2d>
 8006bc4:	a337      	add	r3, pc, #220	; (adr r3, 8006ca4 <gps_ProcessLongitude+0x15c>)
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f7fd fcf7 	bl	80045bc <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4690      	mov	r8, r2
 8006bd4:	4699      	mov	r9, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3306      	adds	r3, #6
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	3b30      	subs	r3, #48	; 0x30
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fc82 	bl	80044e8 <__aeabi_i2d>
 8006be4:	a331      	add	r3, pc, #196	; (adr r3, 8006cac <gps_ProcessLongitude+0x164>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7fd fce7 	bl	80045bc <__aeabi_dmul>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4640      	mov	r0, r8
 8006bf4:	4649      	mov	r1, r9
 8006bf6:	f7fd fb2b 	bl	8004250 <__adddf3>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	4690      	mov	r8, r2
 8006c00:	4699      	mov	r9, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3307      	adds	r3, #7
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	3b30      	subs	r3, #48	; 0x30
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fd fc6c 	bl	80044e8 <__aeabi_i2d>
 8006c10:	a328      	add	r3, pc, #160	; (adr r3, 8006cb4 <gps_ProcessLongitude+0x16c>)
 8006c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c16:	f7fd fcd1 	bl	80045bc <__aeabi_dmul>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4640      	mov	r0, r8
 8006c20:	4649      	mov	r1, r9
 8006c22:	f7fd fb15 	bl	8004250 <__adddf3>
 8006c26:	4602      	mov	r2, r0
 8006c28:	460b      	mov	r3, r1
 8006c2a:	4690      	mov	r8, r2
 8006c2c:	4699      	mov	r9, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3308      	adds	r3, #8
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	3b30      	subs	r3, #48	; 0x30
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fd fc56 	bl	80044e8 <__aeabi_i2d>
 8006c3c:	a31f      	add	r3, pc, #124	; (adr r3, 8006cbc <gps_ProcessLongitude+0x174>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7fd fcbb 	bl	80045bc <__aeabi_dmul>
 8006c46:	4602      	mov	r2, r0
 8006c48:	460b      	mov	r3, r1
 8006c4a:	4640      	mov	r0, r8
 8006c4c:	4649      	mov	r1, r9
 8006c4e:	f7fd faff 	bl	8004250 <__adddf3>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4620      	mov	r0, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7fd faf9 	bl	8004250 <__adddf3>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	460b      	mov	r3, r1
 8006c62:	4610      	mov	r0, r2
 8006c64:	4619      	mov	r1, r3
 8006c66:	f7fd ff59 	bl	8004b1c <__aeabi_d2f>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c7a:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c7e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006ca0 <gps_ProcessLongitude+0x158>
 8006c82:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006c90:	bf00      	nop
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	42700000 	.word	0x42700000
 8006ca4:	9999999a 	.word	0x9999999a
 8006ca8:	3fb99999 	.word	0x3fb99999
 8006cac:	47ae147b 	.word	0x47ae147b
 8006cb0:	3f847ae1 	.word	0x3f847ae1
 8006cb4:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cb8:	3f50624d 	.word	0x3f50624d
 8006cbc:	eb1c432d 	.word	0xeb1c432d
 8006cc0:	3f1a36e2 	.word	0x3f1a36e2

08006cc4 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cd4:	d103      	bne.n	8006cde <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8006cdc:	e002      	b.n	8006ce4 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	741a      	strb	r2, [r3, #16]
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b45      	cmp	r3, #69	; 0x45
 8006d00:	d103      	bne.n	8006d0a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2202      	movs	r2, #2
 8006d06:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006d08:	e002      	b.n	8006d10 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2203      	movs	r2, #3
 8006d0e:	745a      	strb	r2, [r3, #17]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b31      	cmp	r3, #49	; 0x31
 8006d2c:	d103      	bne.n	8006d36 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006d34:	e00a      	b.n	8006d4c <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b32      	cmp	r3, #50	; 0x32
 8006d3c:	d103      	bne.n	8006d46 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2202      	movs	r2, #2
 8006d42:	771a      	strb	r2, [r3, #28]
}
 8006d44:	e002      	b.n	8006d4c <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	771a      	strb	r2, [r3, #28]
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	0092      	lsls	r2, r2, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b2da      	uxtb	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3301      	adds	r3, #1
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	4413      	add	r3, r2
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	3b10      	subs	r3, #16
 8006d7c:	b2da      	uxtb	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	76da      	strb	r2, [r3, #27]
}
 8006d82:	bf00      	nop
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
	...

08006d90 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006d9a:	f04f 0300 	mov.w	r3, #0
 8006d9e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006da0:	2300      	movs	r3, #0
 8006da2:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	e03f      	b.n	8006e2a <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b2e      	cmp	r3, #46	; 0x2e
 8006db4:	d104      	bne.n	8006dc0 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006db6:	2301      	movs	r3, #1
 8006db8:	74fb      	strb	r3, [r7, #19]
			i++;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01b      	beq.n	8006dfe <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	3b30      	subs	r3, #48	; 0x30
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fd fb89 	bl	80044e8 <__aeabi_i2d>
 8006dd6:	a31a      	add	r3, pc, #104	; (adr r3, 8006e40 <gps_ProcessAltitude+0xb0>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7fd fbee 	bl	80045bc <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	f7fd fe98 	bl	8004b1c <__aeabi_d2f>
 8006dec:	ee07 0a10 	vmov	s14, r0
 8006df0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006df4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006df8:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006dfc:	e018      	b.n	8006e30 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006e06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	4413      	add	r3, r2
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	3b30      	subs	r3, #48	; 0x30
 8006e14:	ee07 3a90 	vmov	s15, r3
 8006e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e20:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3301      	adds	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d9bc      	bls.n	8006daa <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	609a      	str	r2, [r3, #8]
}
 8006e36:	bf00      	nop
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	9999999a 	.word	0x9999999a
 8006e44:	3fb99999 	.word	0x3fb99999

08006e48 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e03f      	b.n	8006ee2 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e6c:	d104      	bne.n	8006e78 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	74fb      	strb	r3, [r7, #19]
			i++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006e78:	7cfb      	ldrb	r3, [r7, #19]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d01b      	beq.n	8006eb6 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	3b30      	subs	r3, #48	; 0x30
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fb2d 	bl	80044e8 <__aeabi_i2d>
 8006e8e:	a31a      	add	r3, pc, #104	; (adr r3, 8006ef8 <gps_ProcessAltitudeCorre+0xb0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7fd fb92 	bl	80045bc <__aeabi_dmul>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	f7fd fe3c 	bl	8004b1c <__aeabi_d2f>
 8006ea4:	ee07 0a10 	vmov	s14, r0
 8006ea8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006eb4:	e018      	b.n	8006ee8 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006eb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006eba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ebe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	3b30      	subs	r3, #48	; 0x30
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed8:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d9bc      	bls.n	8006e62 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	60da      	str	r2, [r3, #12]
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	9999999a 	.word	0x9999999a
 8006efc:	3fb99999 	.word	0x3fb99999

08006f00 <WIOE5_Init>:
 *    @huart is a pointer on uart handdle
 *
 * OUTPUT:
 * 	  @res is an integer use to count the number of error reported during initialisation
 * */
uint8_t WIOE5_Init(UART_HandleTypeDef *huart){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b0a0      	sub	sp, #128	; 0x80
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t string[100] = {0};
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61bb      	str	r3, [r7, #24]
 8006f12:	f107 031c 	add.w	r3, r7, #28
 8006f16:	2260      	movs	r2, #96	; 0x60
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f00a ff9e 	bl	8011e5c <memset>
	uint8_t firmware_version[10] = {0};
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	f107 0310 	add.w	r3, r7, #16
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	809a      	strh	r2, [r3, #4]

	/* Reset WIOE5 configuration */
	WIOE5_FactoryReset(huart);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa46 	bl	80073c0 <WIOE5_FactoryReset>

	WIOE5_SendString(huart, "ABCDEF", 6);
 8006f34:	2206      	movs	r2, #6
 8006f36:	491e      	ldr	r1, [pc, #120]	; (8006fb0 <WIOE5_Init+0xb0>)
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa83 	bl	8007444 <WIOE5_SendString>


	/*Check for correct wiring*/
	HAL_UART_Transmit(huart, "AT\r\n", 8, 100);
 8006f3e:	2364      	movs	r3, #100	; 0x64
 8006f40:	2208      	movs	r2, #8
 8006f42:	491c      	ldr	r1, [pc, #112]	; (8006fb4 <WIOE5_Init+0xb4>)
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f006 fd03 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8006f4a:	f107 0118 	add.w	r1, r7, #24
 8006f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f52:	2264      	movs	r2, #100	; 0x64
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f006 fd91 	bl	800da7c <HAL_UART_Receive>
	if(strcmp(string,"+AT: OK\r\n") != 0x0){
 8006f5a:	f107 0318 	add.w	r3, r7, #24
 8006f5e:	4916      	ldr	r1, [pc, #88]	; (8006fb8 <WIOE5_Init+0xb8>)
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd f95d 	bl	8004220 <strcmp>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <WIOE5_Init+0x76>
		res++;
 8006f6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f70:	3301      	adds	r3, #1
 8006f72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}

	WIOE5_ReadFirmwareVersion(firmware_version, huart);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	6879      	ldr	r1, [r7, #4]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f000 f879 	bl	8007074 <WIOE5_ReadFirmwareVersion>

	/*Set lora channel*/
	WIOE5_ChannelSwitch(LORA_CHANNEL_INIT,huart);
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	2003      	movs	r0, #3
 8006f86:	f000 f81b 	bl	8006fc0 <WIOE5_ChannelSwitch>
	/*Set data rate*/
	WIOE5_SetDataRate(LORA_868Mhz_FSK_50000BPS,huart);
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	2007      	movs	r0, #7
 8006f8e:	f000 f8b5 	bl	80070fc <WIOE5_SetDataRate>
	/*Set transmit power*/
	WIOE5_SetTxPower(LORA_868Mhz_16dBm, huart);
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	2010      	movs	r0, #16
 8006f96:	f000 f90b 	bl	80071b0 <WIOE5_SetTxPower>

	/*Send 0x1234 5678*/
	WIOE5_SendData(305419896, huart);
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4807      	ldr	r0, [pc, #28]	; (8006fbc <WIOE5_Init+0xbc>)
 8006f9e:	f000 f97b 	bl	8007298 <WIOE5_SendData>

	return res;
 8006fa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3780      	adds	r7, #128	; 0x80
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	080130f0 	.word	0x080130f0
 8006fb4:	080130f8 	.word	0x080130f8
 8006fb8:	08013100 	.word	0x08013100
 8006fbc:	12345678 	.word	0x12345678

08006fc0 <WIOE5_ChannelSwitch>:
 *    @channel is an integer that define the channel number (Should be between 0 and 2 for EU868 Mhz version
 *	  @huart is a pointer on uart handdle
 * OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_ChannelSwitch(uint8_t channel,UART_HandleTypeDef *huart){
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b0a2      	sub	sp, #136	; 0x88
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	6039      	str	r1, [r7, #0]
 8006fca:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+CH=";
 8006fcc:	4a27      	ldr	r2, [pc, #156]	; (800706c <WIOE5_ChannelSwitch+0xac>)
 8006fce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006fd2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006fd6:	6018      	str	r0, [r3, #0]
 8006fd8:	3304      	adds	r3, #4
 8006fda:	8019      	strh	r1, [r3, #0]
 8006fdc:	3302      	adds	r3, #2
 8006fde:	0c0a      	lsrs	r2, r1, #16
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	605a      	str	r2, [r3, #4]
 8006fec:	609a      	str	r2, [r3, #8]
 8006fee:	60da      	str	r2, [r3, #12]
 8006ff0:	821a      	strh	r2, [r3, #16]
	querry[6] =  (channel+'0');
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	3330      	adds	r3, #48	; 0x30
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60bb      	str	r3, [r7, #8]
 8007000:	f107 030c 	add.w	r3, r7, #12
 8007004:	2260      	movs	r2, #96	; 0x60
 8007006:	2100      	movs	r1, #0
 8007008:	4618      	mov	r0, r3
 800700a:	f00a ff27 	bl	8011e5c <memset>
	uint8_t res = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8007014:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007018:	4618      	mov	r0, r3
 800701a:	f7fd f90b 	bl	8004234 <strlen>
 800701e:	4603      	mov	r3, r0
 8007020:	461a      	mov	r2, r3
 8007022:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007026:	4413      	add	r3, r2
 8007028:	4a11      	ldr	r2, [pc, #68]	; (8007070 <WIOE5_ChannelSwitch+0xb0>)
 800702a:	8811      	ldrh	r1, [r2, #0]
 800702c:	7892      	ldrb	r2, [r2, #2]
 800702e:	8019      	strh	r1, [r3, #0]
 8007030:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007032:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007036:	2364      	movs	r3, #100	; 0x64
 8007038:	2219      	movs	r2, #25
 800703a:	6838      	ldr	r0, [r7, #0]
 800703c:	f006 fc88 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007040:	f107 0108 	add.w	r1, r7, #8
 8007044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007048:	2264      	movs	r2, #100	; 0x64
 800704a:	6838      	ldr	r0, [r7, #0]
 800704c:	f006 fd16 	bl	800da7c <HAL_UART_Receive>
	if(string[0]!='+'){
 8007050:	7a3b      	ldrb	r3, [r7, #8]
 8007052:	2b2b      	cmp	r3, #43	; 0x2b
 8007054:	d004      	beq.n	8007060 <WIOE5_ChannelSwitch+0xa0>
		res++;
 8007056:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800705a:	3301      	adds	r3, #1
 800705c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007060:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007064:	4618      	mov	r0, r3
 8007066:	3788      	adds	r7, #136	; 0x88
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	08013110 	.word	0x08013110
 8007070:	0801310c 	.word	0x0801310c

08007074 <WIOE5_ReadFirmwareVersion>:
/* Function use to read WIOE5 firmware version
 * INPUT:
 *    @version_output is an array of
 *	  @huart is a pointer on uart handdle
 * */
void WIOE5_ReadFirmwareVersion(uint8_t version_output[],UART_HandleTypeDef *huart){
 8007074:	b580      	push	{r7, lr}
 8007076:	b09c      	sub	sp, #112	; 0x70
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]

	uint8_t string[100] = {0};
 800707e:	2300      	movs	r3, #0
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	f107 030c 	add.w	r3, r7, #12
 8007086:	2260      	movs	r2, #96	; 0x60
 8007088:	2100      	movs	r1, #0
 800708a:	4618      	mov	r0, r3
 800708c:	f00a fee6 	bl	8011e5c <memset>
	uint8_t index = 6;
 8007090:	2306      	movs	r3, #6
 8007092:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	HAL_UART_Transmit(huart, "AT+VER\r\n", sizeof("AT+VER\r\n"), 100);
 8007096:	2364      	movs	r3, #100	; 0x64
 8007098:	2209      	movs	r2, #9
 800709a:	4917      	ldr	r1, [pc, #92]	; (80070f8 <WIOE5_ReadFirmwareVersion+0x84>)
 800709c:	6838      	ldr	r0, [r7, #0]
 800709e:	f006 fc57 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 80070a2:	f107 0108 	add.w	r1, r7, #8
 80070a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070aa:	2264      	movs	r2, #100	; 0x64
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f006 fce5 	bl	800da7c <HAL_UART_Receive>

	while((string[index] != '\r') || (index > sizeof(string))){
 80070b2:	e010      	b.n	80070d6 <WIOE5_ReadFirmwareVersion+0x62>
		version_output[index-5] = string[index];
 80070b4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80070b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070bc:	3b05      	subs	r3, #5
 80070be:	6879      	ldr	r1, [r7, #4]
 80070c0:	440b      	add	r3, r1
 80070c2:	3270      	adds	r2, #112	; 0x70
 80070c4:	443a      	add	r2, r7
 80070c6:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80070ca:	701a      	strb	r2, [r3, #0]
		index++;
 80070cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070d0:	3301      	adds	r3, #1
 80070d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	while((string[index] != '\r') || (index > sizeof(string))){
 80070d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070da:	3370      	adds	r3, #112	; 0x70
 80070dc:	443b      	add	r3, r7
 80070de:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80070e2:	2b0d      	cmp	r3, #13
 80070e4:	d1e6      	bne.n	80070b4 <WIOE5_ReadFirmwareVersion+0x40>
 80070e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80070ea:	2b64      	cmp	r3, #100	; 0x64
 80070ec:	d8e2      	bhi.n	80070b4 <WIOE5_ReadFirmwareVersion+0x40>
	}
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	3770      	adds	r7, #112	; 0x70
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	0801312c 	.word	0x0801312c

080070fc <WIOE5_SetDataRate>:
 *    @dr is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetDataRate(uint8_t dr,UART_HandleTypeDef *huart){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b0a2      	sub	sp, #136	; 0x88
 8007100:	af00      	add	r7, sp, #0
 8007102:	4603      	mov	r3, r0
 8007104:	6039      	str	r1, [r7, #0]
 8007106:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+DR=";
 8007108:	4a27      	ldr	r2, [pc, #156]	; (80071a8 <WIOE5_SetDataRate+0xac>)
 800710a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800710e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007112:	6018      	str	r0, [r3, #0]
 8007114:	3304      	adds	r3, #4
 8007116:	8019      	strh	r1, [r3, #0]
 8007118:	3302      	adds	r3, #2
 800711a:	0c0a      	lsrs	r2, r1, #16
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8007122:	2200      	movs	r2, #0
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	605a      	str	r2, [r3, #4]
 8007128:	609a      	str	r2, [r3, #8]
 800712a:	60da      	str	r2, [r3, #12]
 800712c:	821a      	strh	r2, [r3, #16]
	querry[6] =  (dr+'0');
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	3330      	adds	r3, #48	; 0x30
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t string[100] = {0};
 8007138:	2300      	movs	r3, #0
 800713a:	60bb      	str	r3, [r7, #8]
 800713c:	f107 030c 	add.w	r3, r7, #12
 8007140:	2260      	movs	r2, #96	; 0x60
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f00a fe89 	bl	8011e5c <memset>
	uint8_t res = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	strcat(querry, "\r\n");
 8007150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007154:	4618      	mov	r0, r3
 8007156:	f7fd f86d 	bl	8004234 <strlen>
 800715a:	4603      	mov	r3, r0
 800715c:	461a      	mov	r2, r3
 800715e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007162:	4413      	add	r3, r2
 8007164:	4a11      	ldr	r2, [pc, #68]	; (80071ac <WIOE5_SetDataRate+0xb0>)
 8007166:	8811      	ldrh	r1, [r2, #0]
 8007168:	7892      	ldrb	r2, [r2, #2]
 800716a:	8019      	strh	r1, [r3, #0]
 800716c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 800716e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007172:	2364      	movs	r3, #100	; 0x64
 8007174:	2219      	movs	r2, #25
 8007176:	6838      	ldr	r0, [r7, #0]
 8007178:	f006 fbea 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007184:	2264      	movs	r2, #100	; 0x64
 8007186:	6838      	ldr	r0, [r7, #0]
 8007188:	f006 fc78 	bl	800da7c <HAL_UART_Receive>
	if(string[0]!='+'){
 800718c:	7a3b      	ldrb	r3, [r7, #8]
 800718e:	2b2b      	cmp	r3, #43	; 0x2b
 8007190:	d004      	beq.n	800719c <WIOE5_SetDataRate+0xa0>
		res++;
 8007192:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8007196:	3301      	adds	r3, #1
 8007198:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 800719c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3788      	adds	r7, #136	; 0x88
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	08013138 	.word	0x08013138
 80071ac:	0801310c 	.word	0x0801310c

080071b0 <WIOE5_SetTxPower>:
 *    @tx_power is an integer use to set data rate
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SetTxPower(uint8_t tx_power,UART_HandleTypeDef *huart){
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b0a2      	sub	sp, #136	; 0x88
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]

	uint8_t querry[25] = "AT+POWER=";
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <WIOE5_SetTxPower+0xdc>)
 80071be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80071c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80071c4:	c303      	stmia	r3!, {r0, r1}
 80071c6:	801a      	strh	r2, [r3, #0]
 80071c8:	f107 0376 	add.w	r3, r7, #118	; 0x76
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	f8c3 200b 	str.w	r2, [r3, #11]
	uint8_t string[100] = {0};
 80071d8:	2300      	movs	r3, #0
 80071da:	60bb      	str	r3, [r7, #8]
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	2260      	movs	r2, #96	; 0x60
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f00a fe39 	bl	8011e5c <memset>
	uint8_t res = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	if(tx_power < 10){	/*Two digit at least*/
 80071f0:	79fb      	ldrb	r3, [r7, #7]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d805      	bhi.n	8007202 <WIOE5_SetTxPower+0x52>
		querry[9] =  (tx_power+'0');
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	3330      	adds	r3, #48	; 0x30
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 8007200:	e018      	b.n	8007234 <WIOE5_SetTxPower+0x84>
	}
	else{
		querry[9] =  ((tx_power/10)+'0');
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	4a22      	ldr	r2, [pc, #136]	; (8007290 <WIOE5_SetTxPower+0xe0>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	08db      	lsrs	r3, r3, #3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	3330      	adds	r3, #48	; 0x30
 8007210:	b2db      	uxtb	r3, r3
 8007212:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		querry[10] =  ((tx_power%10)+'0');
 8007216:	79fa      	ldrb	r2, [r7, #7]
 8007218:	4b1d      	ldr	r3, [pc, #116]	; (8007290 <WIOE5_SetTxPower+0xe0>)
 800721a:	fba3 1302 	umull	r1, r3, r3, r2
 800721e:	08d9      	lsrs	r1, r3, #3
 8007220:	460b      	mov	r3, r1
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3330      	adds	r3, #48	; 0x30
 800722e:	b2db      	uxtb	r3, r3
 8007230:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	strcat(querry, "\r\n");
 8007234:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fffb 	bl	8004234 <strlen>
 800723e:	4603      	mov	r3, r0
 8007240:	461a      	mov	r2, r3
 8007242:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007246:	4413      	add	r3, r2
 8007248:	4a12      	ldr	r2, [pc, #72]	; (8007294 <WIOE5_SetTxPower+0xe4>)
 800724a:	8811      	ldrh	r1, [r2, #0]
 800724c:	7892      	ldrb	r2, [r2, #2]
 800724e:	8019      	strh	r1, [r3, #0]
 8007250:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007252:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8007256:	2364      	movs	r3, #100	; 0x64
 8007258:	2219      	movs	r2, #25
 800725a:	6838      	ldr	r0, [r7, #0]
 800725c:	f006 fb78 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007260:	f107 0108 	add.w	r1, r7, #8
 8007264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007268:	2264      	movs	r2, #100	; 0x64
 800726a:	6838      	ldr	r0, [r7, #0]
 800726c:	f006 fc06 	bl	800da7c <HAL_UART_Receive>
	if(string[0]!='+'){
 8007270:	7a3b      	ldrb	r3, [r7, #8]
 8007272:	2b2b      	cmp	r3, #43	; 0x2b
 8007274:	d004      	beq.n	8007280 <WIOE5_SetTxPower+0xd0>
		res++;
 8007276:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800727a:	3301      	adds	r3, #1
 800727c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
	return res;
 8007280:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007284:	4618      	mov	r0, r3
 8007286:	3788      	adds	r7, #136	; 0x88
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	08013154 	.word	0x08013154
 8007290:	cccccccd 	.word	0xcccccccd
 8007294:	0801310c 	.word	0x0801310c

08007298 <WIOE5_SendData>:
 *    @data is an integer - this is the 4 byte to send
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendData(uint32_t data,UART_HandleTypeDef *huart){
 8007298:	b580      	push	{r7, lr}
 800729a:	b0a6      	sub	sp, #152	; 0x98
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]

	uint8_t querry[30] = "AT+MSGHEX=";
 80072a2:	4a44      	ldr	r2, [pc, #272]	; (80073b4 <WIOE5_SendData+0x11c>)
 80072a4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80072a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80072aa:	c303      	stmia	r3!, {r0, r1}
 80072ac:	801a      	strh	r2, [r3, #0]
 80072ae:	3302      	adds	r3, #2
 80072b0:	0c12      	lsrs	r2, r2, #16
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	f107 037b 	add.w	r3, r7, #123	; 0x7b
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	605a      	str	r2, [r3, #4]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	60da      	str	r2, [r3, #12]
 80072c2:	f8c3 200f 	str.w	r2, [r3, #15]
	querry[10] = '"';
 80072c6:	2322      	movs	r3, #34	; 0x22
 80072c8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	uint8_t hex_char = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t res;
	uint8_t string[100] = {0};
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	f107 0310 	add.w	r3, r7, #16
 80072da:	2260      	movs	r2, #96	; 0x60
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f00a fdbc 	bl	8011e5c <memset>

	/*Split 32 bits into 4 byte*/
	for(int i=0;i<8;i++){
 80072e4:	2300      	movs	r3, #0
 80072e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80072ea:	e02c      	b.n	8007346 <WIOE5_SendData+0xae>
		hex_char = (data&(0xf<<(i*4)))>>(i*4);
 80072ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	220f      	movs	r2, #15
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	461a      	mov	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	401a      	ands	r2, r3
 80072fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		if(hex_char > 10){
 800730c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007310:	2b0a      	cmp	r3, #10
 8007312:	d905      	bls.n	8007320 <WIOE5_SendData+0x88>
			hex_char = hex_char + 55;
 8007314:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007318:	3337      	adds	r3, #55	; 0x37
 800731a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800731e:	e004      	b.n	800732a <WIOE5_SendData+0x92>
		}
		else{
			hex_char = hex_char + 48;
 8007320:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007324:	3330      	adds	r3, #48	; 0x30
 8007326:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		querry[11+i] = hex_char;
 800732a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800732e:	330b      	adds	r3, #11
 8007330:	3398      	adds	r3, #152	; 0x98
 8007332:	443b      	add	r3, r7
 8007334:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8007338:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(int i=0;i<8;i++){
 800733c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007340:	3301      	adds	r3, #1
 8007342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800734a:	2b07      	cmp	r3, #7
 800734c:	ddce      	ble.n	80072ec <WIOE5_SendData+0x54>
	}
	querry[19] = '"';
 800734e:	2322      	movs	r3, #34	; 0x22
 8007350:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	strcat(querry,"\r\n");
 8007354:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007358:	4618      	mov	r0, r3
 800735a:	f7fc ff6b 	bl	8004234 <strlen>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8007366:	4413      	add	r3, r2
 8007368:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <WIOE5_SendData+0x120>)
 800736a:	8811      	ldrh	r1, [r2, #0]
 800736c:	7892      	ldrb	r2, [r2, #2]
 800736e:	8019      	strh	r1, [r3, #0]
 8007370:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 8007372:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8007376:	2364      	movs	r3, #100	; 0x64
 8007378:	221e      	movs	r2, #30
 800737a:	6838      	ldr	r0, [r7, #0]
 800737c:	f006 fae8 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007380:	f107 010c 	add.w	r1, r7, #12
 8007384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007388:	2264      	movs	r2, #100	; 0x64
 800738a:	6838      	ldr	r0, [r7, #0]
 800738c:	f006 fb76 	bl	800da7c <HAL_UART_Receive>

	/*Check if receive a DONE*/
	if(strcmp("+MSGHEX: Start\r\n",string)!=0x00){
 8007390:	f107 030c 	add.w	r3, r7, #12
 8007394:	4619      	mov	r1, r3
 8007396:	4809      	ldr	r0, [pc, #36]	; (80073bc <WIOE5_SendData+0x124>)
 8007398:	f7fc ff42 	bl	8004220 <strcmp>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <WIOE5_SendData+0x110>
		res = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	}
	return res;
 80073a8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3798      	adds	r7, #152	; 0x98
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	08013184 	.word	0x08013184
 80073b8:	0801310c 	.word	0x0801310c
 80073bc:	08013170 	.word	0x08013170

080073c0 <WIOE5_FactoryReset>:
 * INPUT:
 *	  @huart is a pointer on uart handdle
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_FactoryReset(UART_HandleTypeDef *huart){
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b0a5      	sub	sp, #148	; 0x94
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

	uint8_t res = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t string[100] = {0};
 80073ce:	2300      	movs	r3, #0
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80073d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073d6:	2260      	movs	r2, #96	; 0x60
 80073d8:	2100      	movs	r1, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	f00a fd3e 	bl	8011e5c <memset>
	uint8_t querry[30] = "AT+FDEFAULT\r\n";
 80073e0:	4b16      	ldr	r3, [pc, #88]	; (800743c <WIOE5_FactoryReset+0x7c>)
 80073e2:	f107 0408 	add.w	r4, r7, #8
 80073e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80073e8:	c407      	stmia	r4!, {r0, r1, r2}
 80073ea:	8023      	strh	r3, [r4, #0]
 80073ec:	f107 0316 	add.w	r3, r7, #22
 80073f0:	2200      	movs	r2, #0
 80073f2:	601a      	str	r2, [r3, #0]
 80073f4:	605a      	str	r2, [r3, #4]
 80073f6:	609a      	str	r2, [r3, #8]
 80073f8:	60da      	str	r2, [r3, #12]

	HAL_UART_Transmit(huart, querry, sizeof(querry), 100);
 80073fa:	f107 0108 	add.w	r1, r7, #8
 80073fe:	2364      	movs	r3, #100	; 0x64
 8007400:	221e      	movs	r2, #30
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f006 faa4 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, string, 100,1000);
 8007408:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800740c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007410:	2264      	movs	r2, #100	; 0x64
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f006 fb32 	bl	800da7c <HAL_UART_Receive>

	if(strcmp("+FDEFAULT: OK\r\n",string)!=0x00){
 8007418:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800741c:	4619      	mov	r1, r3
 800741e:	4808      	ldr	r0, [pc, #32]	; (8007440 <WIOE5_FactoryReset+0x80>)
 8007420:	f7fc fefe 	bl	8004220 <strcmp>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <WIOE5_FactoryReset+0x70>
		res = 1;
 800742a:	2301      	movs	r3, #1
 800742c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	return res;
 8007430:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8007434:	4618      	mov	r0, r3
 8007436:	3794      	adds	r7, #148	; 0x94
 8007438:	46bd      	mov	sp, r7
 800743a:	bd90      	pop	{r4, r7, pc}
 800743c:	080131b4 	.word	0x080131b4
 8007440:	080131a4 	.word	0x080131a4

08007444 <WIOE5_SendString>:
 *	  @string is the actual message to be send
 *	  @string_size is an integer
 *OUTPUT:
 * 	  @res is an integer use to check error
 * */
uint8_t WIOE5_SendString(UART_HandleTypeDef *huart,uint8_t string[],uint32_t string_size){
 8007444:	b580      	push	{r7, lr}
 8007446:	b0a4      	sub	sp, #144	; 0x90
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]

	uint8_t res = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint8_t received_str[100] = {0};
 8007456:	2300      	movs	r3, #0
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	f107 0320 	add.w	r3, r7, #32
 800745e:	2260      	movs	r2, #96	; 0x60
 8007460:	2100      	movs	r1, #0
 8007462:	4618      	mov	r0, r3
 8007464:	f00a fcfa 	bl	8011e5c <memset>
	uint8_t querry[10] = "AT+MSG=";
 8007468:	4a41      	ldr	r2, [pc, #260]	; (8007570 <WIOE5_SendString+0x12c>)
 800746a:	f107 0310 	add.w	r3, r7, #16
 800746e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007472:	e883 0003 	stmia.w	r3, {r0, r1}
 8007476:	2300      	movs	r3, #0
 8007478:	833b      	strh	r3, [r7, #24]
	/*Init a pointer on char as NULL*/
	char * string_to_send = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Allocate some space for the string to send*/
	string_to_send = (char *) malloc( (string_size+30) * sizeof(char));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	331e      	adds	r3, #30
 8007484:	4618      	mov	r0, r3
 8007486:	f00a fccb 	bl	8011e20 <malloc>
 800748a:	4603      	mov	r3, r0
 800748c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	/*Clear the string*/
	for(int i=0;i<(string_size+30);i++){
 8007490:	2300      	movs	r3, #0
 8007492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007496:	e00b      	b.n	80074b0 <WIOE5_SendString+0x6c>
		string_to_send[i] = 0x0;
 8007498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800749c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074a0:	4413      	add	r3, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<(string_size+30);i++){
 80074a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074aa:	3301      	adds	r3, #1
 80074ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 021e 	add.w	r2, r3, #30
 80074b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d8ec      	bhi.n	8007498 <WIOE5_SendString+0x54>
	}

	strcat(string_to_send,querry);
 80074be:	f107 0310 	add.w	r3, r7, #16
 80074c2:	4619      	mov	r1, r3
 80074c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80074c8:	f00a fe2a 	bl	8012120 <strcat>
	strncat(string_to_send,0x34,1);
 80074cc:	2201      	movs	r2, #1
 80074ce:	2134      	movs	r1, #52	; 0x34
 80074d0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80074d4:	f00a fe33 	bl	801213e <strncat>

	/*Add the string to*/
	for(int i=0;i<string_size;i++){
 80074d8:	2300      	movs	r3, #0
 80074da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80074de:	e011      	b.n	8007504 <WIOE5_SendString+0xc0>
		string_to_send[7+i] = string[i];
 80074e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	441a      	add	r2, r3
 80074e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074ec:	3307      	adds	r3, #7
 80074ee:	4619      	mov	r1, r3
 80074f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80074f4:	440b      	add	r3, r1
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<string_size;i++){
 80074fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074fe:	3301      	adds	r3, #1
 8007500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007504:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	429a      	cmp	r2, r3
 800750c:	d8e8      	bhi.n	80074e0 <WIOE5_SendString+0x9c>
	}

	strncat(string_to_send,0x34,1);
 800750e:	2201      	movs	r2, #1
 8007510:	2134      	movs	r1, #52	; 0x34
 8007512:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8007516:	f00a fe12 	bl	801213e <strncat>
	strcat(string_to_send,"\r\n");
 800751a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800751e:	f7fc fe89 	bl	8004234 <strlen>
 8007522:	4603      	mov	r3, r0
 8007524:	461a      	mov	r2, r3
 8007526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800752a:	4413      	add	r3, r2
 800752c:	4a11      	ldr	r2, [pc, #68]	; (8007574 <WIOE5_SendString+0x130>)
 800752e:	8811      	ldrh	r1, [r2, #0]
 8007530:	7892      	ldrb	r2, [r2, #2]
 8007532:	8019      	strh	r1, [r3, #0]
 8007534:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart, string_to_send, (string_size+30), 100);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	b29b      	uxth	r3, r3
 800753a:	331e      	adds	r3, #30
 800753c:	b29a      	uxth	r2, r3
 800753e:	2364      	movs	r3, #100	; 0x64
 8007540:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f006 fa03 	bl	800d950 <HAL_UART_Transmit>
	HAL_UART_Receive(huart, received_str, 100,1000);
 800754a:	f107 011c 	add.w	r1, r7, #28
 800754e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007552:	2264      	movs	r2, #100	; 0x64
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f006 fa91 	bl	800da7c <HAL_UART_Receive>


	free(string_to_send);
 800755a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800755e:	f00a fc67 	bl	8011e30 <free>
	return res;
 8007562:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007566:	4618      	mov	r0, r3
 8007568:	3790      	adds	r7, #144	; 0x90
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	080131d4 	.word	0x080131d4
 8007574:	0801310c 	.word	0x0801310c

08007578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	SCB->VTOR = 0x08004000;
 800757c:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <main+0x74>)
 800757e:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <main+0x78>)
 8007580:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007582:	b662      	cpsie	i
}
 8007584:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007586:	f001 f874 	bl	8008672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800758a:	f000 f83b 	bl	8007604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800758e:	f7fe ffc7 	bl	8006520 <MX_GPIO_Init>
  MX_DMA_Init();
 8007592:	f7fe ff9b 	bl	80064cc <MX_DMA_Init>
  MX_I2C2_Init();
 8007596:	f7ff f83f 	bl	8006618 <MX_I2C2_Init>
  MX_TIM2_Init();
 800759a:	f000 fd1b 	bl	8007fd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800759e:	f000 fd71 	bl	8008084 <MX_TIM3_Init>
  MX_TIM4_Init();
 80075a2:	f000 fdc9 	bl	8008138 <MX_TIM4_Init>
  MX_UART4_Init();
 80075a6:	f000 fedf 	bl	8008368 <MX_UART4_Init>
  MX_UART5_Init();
 80075aa:	f000 ff29 	bl	8008400 <MX_UART5_Init>
  MX_ADC2_Init();
 80075ae:	f7fd fc87 	bl	8004ec0 <MX_ADC2_Init>
  MX_SPI1_Init();
 80075b2:	f000 fb5d 	bl	8007c70 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80075b6:	2100      	movs	r1, #0
 80075b8:	480e      	ldr	r0, [pc, #56]	; (80075f4 <main+0x7c>)
 80075ba:	f005 f8d7 	bl	800c76c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80075be:	2100      	movs	r1, #0
 80075c0:	480d      	ldr	r0, [pc, #52]	; (80075f8 <main+0x80>)
 80075c2:	f005 f8d3 	bl	800c76c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80075c6:	2104      	movs	r1, #4
 80075c8:	480b      	ldr	r0, [pc, #44]	; (80075f8 <main+0x80>)
 80075ca:	f005 f8cf 	bl	800c76c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80075ce:	210c      	movs	r1, #12
 80075d0:	4809      	ldr	r0, [pc, #36]	; (80075f8 <main+0x80>)
 80075d2:	f005 f8cb 	bl	800c76c <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 80075d6:	2203      	movs	r2, #3
 80075d8:	4908      	ldr	r1, [pc, #32]	; (80075fc <main+0x84>)
 80075da:	4809      	ldr	r0, [pc, #36]	; (8007600 <main+0x88>)
 80075dc:	f001 fc86 	bl	8008eec <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80075e0:	f7fd fea0 	bl	8005324 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80075e4:	f008 fad0 	bl	800fb88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075e8:	e7fe      	b.n	80075e8 <main+0x70>
 80075ea:	bf00      	nop
 80075ec:	e000ed00 	.word	0xe000ed00
 80075f0:	08004000 	.word	0x08004000
 80075f4:	20000868 	.word	0x20000868
 80075f8:	200008b4 	.word	0x200008b4
 80075fc:	20000760 	.word	0x20000760
 8007600:	20000094 	.word	0x20000094

08007604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b094      	sub	sp, #80	; 0x50
 8007608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800760a:	f107 0318 	add.w	r3, r7, #24
 800760e:	2238      	movs	r2, #56	; 0x38
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f00a fc22 	bl	8011e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007618:	1d3b      	adds	r3, r7, #4
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	605a      	str	r2, [r3, #4]
 8007620:	609a      	str	r2, [r3, #8]
 8007622:	60da      	str	r2, [r3, #12]
 8007624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800762a:	f003 fe6b 	bl	800b304 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800762e:	2302      	movs	r3, #2
 8007630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800763c:	2302      	movs	r3, #2
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007640:	2302      	movs	r3, #2
 8007642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007644:	2304      	movs	r3, #4
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8007648:	234b      	movs	r3, #75	; 0x4b
 800764a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800764c:	2302      	movs	r3, #2
 800764e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007650:	2302      	movs	r3, #2
 8007652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007654:	2302      	movs	r3, #2
 8007656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007658:	f107 0318 	add.w	r3, r7, #24
 800765c:	4618      	mov	r0, r3
 800765e:	f003 fef5 	bl	800b44c <HAL_RCC_OscConfig>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8007668:	f000 f82a 	bl	80076c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800766c:	230f      	movs	r3, #15
 800766e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007670:	2303      	movs	r3, #3
 8007672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007674:	2300      	movs	r3, #0
 8007676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007680:	1d3b      	adds	r3, r7, #4
 8007682:	2104      	movs	r1, #4
 8007684:	4618      	mov	r0, r3
 8007686:	f004 f9f9 	bl	800ba7c <HAL_RCC_ClockConfig>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8007690:	f000 f816 	bl	80076c0 <Error_Handler>
  }
}
 8007694:	bf00      	nop
 8007696:	3750      	adds	r7, #80	; 0x50
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a04      	ldr	r2, [pc, #16]	; (80076bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80076ae:	f000 fff9 	bl	80086a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40012c00 	.word	0x40012c00

080076c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80076c4:	b672      	cpsid	i
}
 80076c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80076c8:	e7fe      	b.n	80076c8 <Error_Handler+0x8>

080076ca <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 80076ca:	b480      	push	{r7}
 80076cc:	b085      	sub	sp, #20
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80076e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e4:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	ee07 3a90 	vmov	s15, r3
}
 80076ee:	eeb0 0a67 	vmov.f32	s0, s15
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	edd3 7a03 	vldr	s15, [r3, #12]
 8007712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007716:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	ee07 3a90 	vmov	s15, r3
}
 8007720:	eeb0 0a67 	vmov.f32	s0, s15
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	edd3 7a04 	vldr	s15, [r3, #16]
 8007744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007748:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	ee07 3a90 	vmov	s15, r3
}
 8007752:	eeb0 0a67 	vmov.f32	s0, s15
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	ed87 0a02 	vstr	s0, [r7, #8]
 800776c:	edc7 0a01 	vstr	s1, [r7, #4]
 8007770:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8007786:	2101      	movs	r1, #1
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f00a faff 	bl	8011d8c <arm_pid_init_f32>

}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007796:	b580      	push	{r7, lr}
 8007798:	b08a      	sub	sp, #40	; 0x28
 800779a:	af00      	add	r7, sp, #0
 800779c:	60f8      	str	r0, [r7, #12]
 800779e:	60b9      	str	r1, [r7, #8]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	68b8      	ldr	r0, [r7, #8]
 80077a8:	f7ff ffa8 	bl	80076fc <Pid_CalculateYawError>
 80077ac:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b6:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	ed93 7a00 	vldr	s14, [r3]
 80077be:	edd7 7a06 	vldr	s15, [r7, #24]
 80077c2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80077d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80077d6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80077e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80077f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077f8:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8007810:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007812:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8007814:	bf00      	nop
 8007816:	3728      	adds	r7, #40	; 0x28
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
 8007828:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	68b8      	ldr	r0, [r7, #8]
 800782e:	f7ff ff7e 	bl	800772e <Pid_CalculateRollError>
 8007832:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783c:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	ed93 7a00 	vldr	s14, [r3]
 8007844:	edd7 7a06 	vldr	s15, [r7, #24]
 8007848:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	edd3 7a03 	vldr	s15, [r3, #12]
 8007858:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800785c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	edd3 6a02 	vldr	s13, [r3, #8]
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	edd3 7a04 	vldr	s15, [r3, #16]
 800786c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007870:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800787a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800787e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	615a      	str	r2, [r3, #20]
    return (out);
 8007896:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007898:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80078aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078ae:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80079a0 <Pid_CompensateRoll+0x184>
 80078b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ba:	dd04      	ble.n	80078c6 <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f640 52ac 	movw	r2, #3500	; 0xdac
 80078c2:	625a      	str	r2, [r3, #36]	; 0x24
 80078c4:	e025      	b.n	8007912 <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80078d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078da:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80079a4 <Pid_CompensateRoll+0x188>
 80078de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e6:	d504      	bpl.n	80078f2 <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	f240 5214 	movw	r2, #1300	; 0x514
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24
 80078f0:	e00f      	b.n	8007912 <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8007902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	ee17 2a90 	vmov	r2, s15
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800791e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007926:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80079a0 <Pid_CompensateRoll+0x184>
 800792a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800792e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007932:	dd04      	ble.n	800793e <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	f640 52ac 	movw	r2, #3500	; 0xdac
 800793a:	629a      	str	r2, [r3, #40]	; 0x28
 800793c:	e025      	b.n	800798a <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	ee07 3a90 	vmov	s15, r3
 8007946:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800794a:	edd7 7a08 	vldr	s15, [r7, #32]
 800794e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007952:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079a4 <Pid_CompensateRoll+0x188>
 8007956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800795a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800795e:	d504      	bpl.n	800796a <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	f240 5214 	movw	r2, #1300	; 0x514
 8007966:	629a      	str	r2, [r3, #40]	; 0x28
 8007968:	e00f      	b.n	800798a <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007976:	edd7 7a08 	vldr	s15, [r7, #32]
 800797a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 2a90 	vmov	r2, s15
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800798a:	6838      	ldr	r0, [r7, #0]
 800798c:	f000 f8d2 	bl	8007b34 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007990:	6838      	ldr	r0, [r7, #0]
 8007992:	f000 f8ed 	bl	8007b70 <PropulsionAndControl_UpdateRightFlaps>

}
 8007996:	bf00      	nop
 8007998:	3728      	adds	r7, #40	; 0x28
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	455ac000 	.word	0x455ac000
 80079a4:	44a28000 	.word	0x44a28000

080079a8 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	68b8      	ldr	r0, [r7, #8]
 80079ba:	f7ff fe86 	bl	80076ca <Pid_CalculatePitchError>
 80079be:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	61fb      	str	r3, [r7, #28]
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	ed93 7a00 	vldr	s14, [r3]
 80079d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80079d4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	edd3 6a01 	vldr	s13, [r3, #4]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80079e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80079e8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80079f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80079fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a0a:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	68da      	ldr	r2, [r3, #12]
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	615a      	str	r2, [r3, #20]
    return (out);
 8007a22:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007a24:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a32:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a3a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007b2c <Pid_CompensatePitch+0x184>
 8007a3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	dd04      	ble.n	8007a52 <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8007a50:	e025      	b.n	8007a9e <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a66:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007b30 <Pid_CompensatePitch+0x188>
 8007a6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	d504      	bpl.n	8007a7e <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	f240 5214 	movw	r2, #1300	; 0x514
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7c:	e00f      	b.n	8007a9e <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a96:	ee17 2a90 	vmov	r2, s15
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007aaa:	edd7 7a08 	vldr	s15, [r7, #32]
 8007aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ab2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007b2c <Pid_CompensatePitch+0x184>
 8007ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007abe:	dd04      	ble.n	8007aca <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ac8:	e025      	b.n	8007b16 <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ace:	ee07 3a90 	vmov	s15, r3
 8007ad2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007ad6:	edd7 7a08 	vldr	s15, [r7, #32]
 8007ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007ade:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b30 <Pid_CompensatePitch+0x188>
 8007ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aea:	d504      	bpl.n	8007af6 <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	f240 5214 	movw	r2, #1300	; 0x514
 8007af2:	629a      	str	r2, [r3, #40]	; 0x28
 8007af4:	e00f      	b.n	8007b16 <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afa:	ee07 3a90 	vmov	s15, r3
 8007afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007b02:	edd7 7a08 	vldr	s15, [r7, #32]
 8007b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b0e:	ee17 2a90 	vmov	r2, s15
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007b16:	6838      	ldr	r0, [r7, #0]
 8007b18:	f000 f80c 	bl	8007b34 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007b1c:	6838      	ldr	r0, [r7, #0]
 8007b1e:	f000 f827 	bl	8007b70 <PropulsionAndControl_UpdateRightFlaps>

}
 8007b22:	bf00      	nop
 8007b24:	3728      	adds	r7, #40	; 0x28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	455ac000 	.word	0x455ac000
 8007b30:	44a28000 	.word	0x44a28000

08007b34 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3334      	adds	r3, #52	; 0x34
 8007b44:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	7f5b      	ldrb	r3, [r3, #29]
 8007b4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b5a:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007b64:	bf00      	nop
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3334      	adds	r3, #52	; 0x34
 8007b80:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	7f9b      	ldrb	r3, [r3, #30]
 8007b86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	4413      	add	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007b96:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007ba0:	bf00      	nop
 8007ba2:	3714      	adds	r7, #20
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bfa:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	HAL_Delay(20);
 8007bfc:	2014      	movs	r0, #20
 8007bfe:	f000 fd6f 	bl	80086e0 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f240 5214 	movw	r2, #1300	; 0x514
 8007c08:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff ff92 	bl	8007b34 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007c16:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff ffa9 	bl	8007b70 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	HAL_Delay(1500);
 8007c1e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007c22:	f000 fd5d 	bl	80086e0 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007c2c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f7ff ff80 	bl	8007b34 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f240 5214 	movw	r2, #1300	; 0x514
 8007c3a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7ff ff97 	bl	8007b70 <PropulsionAndControl_UpdateRightFlaps>

	HAL_Delay(1500);
 8007c42:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007c46:	f000 fd4b 	bl	80086e0 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007c50:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff ff6e 	bl	8007b34 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff ff85 	bl	8007b70 <PropulsionAndControl_UpdateRightFlaps>
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007c74:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c76:	4a1c      	ldr	r2, [pc, #112]	; (8007ce8 <MX_SPI1_Init+0x78>)
 8007c78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007c7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007c82:	4b18      	ldr	r3, [pc, #96]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c88:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c90:	4b14      	ldr	r3, [pc, #80]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007c9c:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ca2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007ca6:	2228      	movs	r2, #40	; 0x28
 8007ca8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007caa:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007cb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8007cbc:	4b09      	ldr	r3, [pc, #36]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cbe:	2207      	movs	r2, #7
 8007cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007cc2:	4b08      	ldr	r3, [pc, #32]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8007cc8:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007cce:	4805      	ldr	r0, [pc, #20]	; (8007ce4 <MX_SPI1_Init+0x74>)
 8007cd0:	f004 fb70 	bl	800c3b4 <HAL_SPI_Init>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8007cda:	f7ff fcf1 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007cde:	bf00      	nop
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000768 	.word	0x20000768
 8007ce8:	40013000 	.word	0x40013000

08007cec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08a      	sub	sp, #40	; 0x28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf4:	f107 0314 	add.w	r3, r7, #20
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	605a      	str	r2, [r3, #4]
 8007cfe:	609a      	str	r2, [r3, #8]
 8007d00:	60da      	str	r2, [r3, #12]
 8007d02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a17      	ldr	r2, [pc, #92]	; (8007d68 <HAL_SPI_MspInit+0x7c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d128      	bne.n	8007d60 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007d0e:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d12:	4a16      	ldr	r2, [pc, #88]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d18:	6613      	str	r3, [r2, #96]	; 0x60
 8007d1a:	4b14      	ldr	r3, [pc, #80]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d22:	613b      	str	r3, [r7, #16]
 8007d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d2c:	f043 0301 	orr.w	r3, r3, #1
 8007d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d32:	4b0e      	ldr	r3, [pc, #56]	; (8007d6c <HAL_SPI_MspInit+0x80>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007d3e:	23e0      	movs	r3, #224	; 0xe0
 8007d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d42:	2302      	movs	r3, #2
 8007d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007d4e:	2305      	movs	r3, #5
 8007d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d52:	f107 0314 	add.w	r3, r7, #20
 8007d56:	4619      	mov	r1, r3
 8007d58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d5c:	f002 fb00 	bl	800a360 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8007d60:	bf00      	nop
 8007d62:	3728      	adds	r7, #40	; 0x28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	40013000 	.word	0x40013000
 8007d6c:	40021000 	.word	0x40021000

08007d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d76:	4b11      	ldr	r3, [pc, #68]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7a:	4a10      	ldr	r2, [pc, #64]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d7c:	f043 0301 	orr.w	r3, r3, #1
 8007d80:	6613      	str	r3, [r2, #96]	; 0x60
 8007d82:	4b0e      	ldr	r3, [pc, #56]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	607b      	str	r3, [r7, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d8e:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d92:	4a0a      	ldr	r2, [pc, #40]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d98:	6593      	str	r3, [r2, #88]	; 0x58
 8007d9a:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <HAL_MspInit+0x4c>)
 8007d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da2:	603b      	str	r3, [r7, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007da6:	2200      	movs	r2, #0
 8007da8:	210f      	movs	r1, #15
 8007daa:	f06f 0001 	mvn.w	r0, #1
 8007dae:	f001 ff7d 	bl	8009cac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007db2:	bf00      	nop
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000

08007dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08c      	sub	sp, #48	; 0x30
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007dd0:	4b2c      	ldr	r3, [pc, #176]	; (8007e84 <HAL_InitTick+0xc4>)
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	4a2b      	ldr	r2, [pc, #172]	; (8007e84 <HAL_InitTick+0xc4>)
 8007dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007dda:	6613      	str	r3, [r2, #96]	; 0x60
 8007ddc:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <HAL_InitTick+0xc4>)
 8007dde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007de4:	60bb      	str	r3, [r7, #8]
 8007de6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007de8:	f107 020c 	add.w	r2, r7, #12
 8007dec:	f107 0310 	add.w	r3, r7, #16
 8007df0:	4611      	mov	r1, r2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f004 f818 	bl	800be28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007df8:	f004 f800 	bl	800bdfc <HAL_RCC_GetPCLK2Freq>
 8007dfc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <HAL_InitTick+0xc8>)
 8007e02:	fba2 2303 	umull	r2, r3, r2, r3
 8007e06:	0c9b      	lsrs	r3, r3, #18
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007e0c:	4b1f      	ldr	r3, [pc, #124]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e0e:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <HAL_InitTick+0xd0>)
 8007e10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007e18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007e1a:	4a1c      	ldr	r2, [pc, #112]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007e20:	4b1a      	ldr	r3, [pc, #104]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e26:	4b19      	ldr	r3, [pc, #100]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007e2c:	4817      	ldr	r0, [pc, #92]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e2e:	f004 fb6c 	bl	800c50a <HAL_TIM_Base_Init>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d11b      	bne.n	8007e78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007e40:	4812      	ldr	r0, [pc, #72]	; (8007e8c <HAL_InitTick+0xcc>)
 8007e42:	f004 fbc3 	bl	800c5cc <HAL_TIM_Base_Start_IT>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d111      	bne.n	8007e78 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007e54:	2019      	movs	r0, #25
 8007e56:	f001 ff43 	bl	8009ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b0f      	cmp	r3, #15
 8007e5e:	d808      	bhi.n	8007e72 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007e60:	2200      	movs	r2, #0
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	2019      	movs	r0, #25
 8007e66:	f001 ff21 	bl	8009cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e6a:	4a0a      	ldr	r2, [pc, #40]	; (8007e94 <HAL_InitTick+0xd4>)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e002      	b.n	8007e78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3730      	adds	r7, #48	; 0x30
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40021000 	.word	0x40021000
 8007e88:	431bde83 	.word	0x431bde83
 8007e8c:	200007cc 	.word	0x200007cc
 8007e90:	40012c00 	.word	0x40012c00
 8007e94:	20000008 	.word	0x20000008

08007e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007e9c:	e7fe      	b.n	8007e9c <NMI_Handler+0x4>

08007e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007ea2:	e7fe      	b.n	8007ea2 <HardFault_Handler+0x4>

08007ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ea8:	e7fe      	b.n	8007ea8 <MemManage_Handler+0x4>

08007eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007eae:	e7fe      	b.n	8007eae <BusFault_Handler+0x4>

08007eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007eb4:	e7fe      	b.n	8007eb4 <UsageFault_Handler+0x4>

08007eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007eba:	bf00      	nop
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007ec8:	4802      	ldr	r0, [pc, #8]	; (8007ed4 <DMA1_Channel1_IRQHandler+0x10>)
 8007eca:	f002 f8fa 	bl	800a0c2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007ece:	bf00      	nop
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000100 	.word	0x20000100

08007ed8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007edc:	4802      	ldr	r0, [pc, #8]	; (8007ee8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8007ede:	f004 fd57 	bl	800c990 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007ee2:	bf00      	nop
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200007cc 	.word	0x200007cc

08007eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 8007ef0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007ef4:	f002 fbe8 	bl	800a6c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 8007ef8:	4805      	ldr	r0, [pc, #20]	; (8007f10 <EXTI15_10_IRQHandler+0x24>)
 8007efa:	f7fd ff78 	bl	8005dee <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <EXTI15_10_IRQHandler+0x28>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2101      	movs	r1, #1
 8007f04:	4618      	mov	r0, r3
 8007f06:	f008 f927 	bl	8010158 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f0a:	bf00      	nop
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200001fc 	.word	0x200001fc
 8007f14:	200001f8 	.word	0x200001f8

08007f18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007f1c:	4805      	ldr	r0, [pc, #20]	; (8007f34 <UART4_IRQHandler+0x1c>)
 8007f1e:	f005 fed7 	bl	800dcd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8007f22:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <UART4_IRQHandler+0x20>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f008 f915 	bl	8010158 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007f2e:	bf00      	nop
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20000900 	.word	0x20000900
 8007f38:	200001f4 	.word	0x200001f4

08007f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b086      	sub	sp, #24
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f44:	4a14      	ldr	r2, [pc, #80]	; (8007f98 <_sbrk+0x5c>)
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <_sbrk+0x60>)
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <_sbrk+0x64>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f58:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <_sbrk+0x64>)
 8007f5a:	4a12      	ldr	r2, [pc, #72]	; (8007fa4 <_sbrk+0x68>)
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <_sbrk+0x64>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4413      	add	r3, r2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d207      	bcs.n	8007f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f6c:	f009 ff2c 	bl	8011dc8 <__errno>
 8007f70:	4603      	mov	r3, r0
 8007f72:	220c      	movs	r2, #12
 8007f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7a:	e009      	b.n	8007f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f7c:	4b08      	ldr	r3, [pc, #32]	; (8007fa0 <_sbrk+0x64>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f82:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <_sbrk+0x64>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4413      	add	r3, r2
 8007f8a:	4a05      	ldr	r2, [pc, #20]	; (8007fa0 <_sbrk+0x64>)
 8007f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3718      	adds	r7, #24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	20020000 	.word	0x20020000
 8007f9c:	00000400 	.word	0x00000400
 8007fa0:	20000818 	.word	0x20000818
 8007fa4:	20003b88 	.word	0x20003b88

08007fa8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007fac:	4b08      	ldr	r3, [pc, #32]	; (8007fd0 <SystemInit+0x28>)
 8007fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fb2:	4a07      	ldr	r2, [pc, #28]	; (8007fd0 <SystemInit+0x28>)
 8007fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <SystemInit+0x28>)
 8007fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fc2:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	e000ed00 	.word	0xe000ed00

08007fd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08a      	sub	sp, #40	; 0x28
 8007fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fda:	f107 031c 	add.w	r3, r7, #28
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007fe6:	463b      	mov	r3, r7
 8007fe8:	2200      	movs	r2, #0
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	605a      	str	r2, [r3, #4]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	60da      	str	r2, [r3, #12]
 8007ff2:	611a      	str	r2, [r3, #16]
 8007ff4:	615a      	str	r2, [r3, #20]
 8007ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <MX_TIM2_Init+0xa8>)
 8007ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008000:	4b1e      	ldr	r3, [pc, #120]	; (800807c <MX_TIM2_Init+0xa8>)
 8008002:	2200      	movs	r2, #0
 8008004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008006:	4b1d      	ldr	r3, [pc, #116]	; (800807c <MX_TIM2_Init+0xa8>)
 8008008:	2200      	movs	r2, #0
 800800a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <MX_TIM2_Init+0xa8>)
 800800e:	4a1c      	ldr	r2, [pc, #112]	; (8008080 <MX_TIM2_Init+0xac>)
 8008010:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008012:	4b1a      	ldr	r3, [pc, #104]	; (800807c <MX_TIM2_Init+0xa8>)
 8008014:	2200      	movs	r2, #0
 8008016:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008018:	4b18      	ldr	r3, [pc, #96]	; (800807c <MX_TIM2_Init+0xa8>)
 800801a:	2200      	movs	r2, #0
 800801c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800801e:	4817      	ldr	r0, [pc, #92]	; (800807c <MX_TIM2_Init+0xa8>)
 8008020:	f004 fb4c 	bl	800c6bc <HAL_TIM_PWM_Init>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800802a:	f7ff fb49 	bl	80076c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800802e:	2300      	movs	r3, #0
 8008030:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008036:	f107 031c 	add.w	r3, r7, #28
 800803a:	4619      	mov	r1, r3
 800803c:	480f      	ldr	r0, [pc, #60]	; (800807c <MX_TIM2_Init+0xa8>)
 800803e:	f005 fb5b 	bl	800d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8008048:	f7ff fb3a 	bl	80076c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800804c:	2360      	movs	r3, #96	; 0x60
 800804e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008054:	2300      	movs	r3, #0
 8008056:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008058:	2300      	movs	r3, #0
 800805a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800805c:	463b      	mov	r3, r7
 800805e:	2208      	movs	r2, #8
 8008060:	4619      	mov	r1, r3
 8008062:	4806      	ldr	r0, [pc, #24]	; (800807c <MX_TIM2_Init+0xa8>)
 8008064:	f004 fe14 	bl	800cc90 <HAL_TIM_PWM_ConfigChannel>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800806e:	f7ff fb27 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008072:	bf00      	nop
 8008074:	3728      	adds	r7, #40	; 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	2000081c 	.word	0x2000081c
 8008080:	0015f900 	.word	0x0015f900

08008084 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b08a      	sub	sp, #40	; 0x28
 8008088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808a:	f107 031c 	add.w	r3, r7, #28
 800808e:	2200      	movs	r2, #0
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	605a      	str	r2, [r3, #4]
 8008094:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008096:	463b      	mov	r3, r7
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	611a      	str	r2, [r3, #16]
 80080a4:	615a      	str	r2, [r3, #20]
 80080a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80080a8:	4b21      	ldr	r3, [pc, #132]	; (8008130 <MX_TIM3_Init+0xac>)
 80080aa:	4a22      	ldr	r2, [pc, #136]	; (8008134 <MX_TIM3_Init+0xb0>)
 80080ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <MX_TIM3_Init+0xac>)
 80080b0:	2232      	movs	r2, #50	; 0x32
 80080b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080b4:	4b1e      	ldr	r3, [pc, #120]	; (8008130 <MX_TIM3_Init+0xac>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 80080ba:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <MX_TIM3_Init+0xac>)
 80080bc:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80080c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080c2:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <MX_TIM3_Init+0xac>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080c8:	4b19      	ldr	r3, [pc, #100]	; (8008130 <MX_TIM3_Init+0xac>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80080ce:	4818      	ldr	r0, [pc, #96]	; (8008130 <MX_TIM3_Init+0xac>)
 80080d0:	f004 faf4 	bl	800c6bc <HAL_TIM_PWM_Init>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80080da:	f7ff faf1 	bl	80076c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080de:	2300      	movs	r3, #0
 80080e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080e6:	f107 031c 	add.w	r3, r7, #28
 80080ea:	4619      	mov	r1, r3
 80080ec:	4810      	ldr	r0, [pc, #64]	; (8008130 <MX_TIM3_Init+0xac>)
 80080ee:	f005 fb03 	bl	800d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80080f8:	f7ff fae2 	bl	80076c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80080fc:	2360      	movs	r3, #96	; 0x60
 80080fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008104:	2300      	movs	r3, #0
 8008106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800810c:	463b      	mov	r3, r7
 800810e:	2200      	movs	r2, #0
 8008110:	4619      	mov	r1, r3
 8008112:	4807      	ldr	r0, [pc, #28]	; (8008130 <MX_TIM3_Init+0xac>)
 8008114:	f004 fdbc 	bl	800cc90 <HAL_TIM_PWM_ConfigChannel>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800811e:	f7ff facf 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008122:	4803      	ldr	r0, [pc, #12]	; (8008130 <MX_TIM3_Init+0xac>)
 8008124:	f000 f8c2 	bl	80082ac <HAL_TIM_MspPostInit>

}
 8008128:	bf00      	nop
 800812a:	3728      	adds	r7, #40	; 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000868 	.word	0x20000868
 8008134:	40000400 	.word	0x40000400

08008138 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800813e:	f107 031c 	add.w	r3, r7, #28
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	605a      	str	r2, [r3, #4]
 8008148:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800814a:	463b      	mov	r3, r7
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	609a      	str	r2, [r3, #8]
 8008154:	60da      	str	r2, [r3, #12]
 8008156:	611a      	str	r2, [r3, #16]
 8008158:	615a      	str	r2, [r3, #20]
 800815a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800815c:	4b2e      	ldr	r3, [pc, #184]	; (8008218 <MX_TIM4_Init+0xe0>)
 800815e:	4a2f      	ldr	r2, [pc, #188]	; (800821c <MX_TIM4_Init+0xe4>)
 8008160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8008162:	4b2d      	ldr	r3, [pc, #180]	; (8008218 <MX_TIM4_Init+0xe0>)
 8008164:	2232      	movs	r2, #50	; 0x32
 8008166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008168:	4b2b      	ldr	r3, [pc, #172]	; (8008218 <MX_TIM4_Init+0xe0>)
 800816a:	2200      	movs	r2, #0
 800816c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 800816e:	4b2a      	ldr	r3, [pc, #168]	; (8008218 <MX_TIM4_Init+0xe0>)
 8008170:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008174:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008176:	4b28      	ldr	r3, [pc, #160]	; (8008218 <MX_TIM4_Init+0xe0>)
 8008178:	2200      	movs	r2, #0
 800817a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800817c:	4b26      	ldr	r3, [pc, #152]	; (8008218 <MX_TIM4_Init+0xe0>)
 800817e:	2200      	movs	r2, #0
 8008180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008182:	4825      	ldr	r0, [pc, #148]	; (8008218 <MX_TIM4_Init+0xe0>)
 8008184:	f004 fa9a 	bl	800c6bc <HAL_TIM_PWM_Init>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800818e:	f7ff fa97 	bl	80076c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008196:	2300      	movs	r3, #0
 8008198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800819a:	f107 031c 	add.w	r3, r7, #28
 800819e:	4619      	mov	r1, r3
 80081a0:	481d      	ldr	r0, [pc, #116]	; (8008218 <MX_TIM4_Init+0xe0>)
 80081a2:	f005 faa9 	bl	800d6f8 <HAL_TIMEx_MasterConfigSynchronization>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80081ac:	f7ff fa88 	bl	80076c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80081b0:	2360      	movs	r3, #96	; 0x60
 80081b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 80081b4:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 80081b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80081c2:	463b      	mov	r3, r7
 80081c4:	2200      	movs	r2, #0
 80081c6:	4619      	mov	r1, r3
 80081c8:	4813      	ldr	r0, [pc, #76]	; (8008218 <MX_TIM4_Init+0xe0>)
 80081ca:	f004 fd61 	bl	800cc90 <HAL_TIM_PWM_ConfigChannel>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80081d4:	f7ff fa74 	bl	80076c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80081d8:	463b      	mov	r3, r7
 80081da:	2204      	movs	r2, #4
 80081dc:	4619      	mov	r1, r3
 80081de:	480e      	ldr	r0, [pc, #56]	; (8008218 <MX_TIM4_Init+0xe0>)
 80081e0:	f004 fd56 	bl	800cc90 <HAL_TIM_PWM_ConfigChannel>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80081ea:	f7ff fa69 	bl	80076c0 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 80081ee:	f241 7370 	movw	r3, #6000	; 0x1770
 80081f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80081f4:	463b      	mov	r3, r7
 80081f6:	220c      	movs	r2, #12
 80081f8:	4619      	mov	r1, r3
 80081fa:	4807      	ldr	r0, [pc, #28]	; (8008218 <MX_TIM4_Init+0xe0>)
 80081fc:	f004 fd48 	bl	800cc90 <HAL_TIM_PWM_ConfigChannel>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8008206:	f7ff fa5b 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800820a:	4803      	ldr	r0, [pc, #12]	; (8008218 <MX_TIM4_Init+0xe0>)
 800820c:	f000 f84e 	bl	80082ac <HAL_TIM_MspPostInit>

}
 8008210:	bf00      	nop
 8008212:	3728      	adds	r7, #40	; 0x28
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200008b4 	.word	0x200008b4
 800821c:	40000800 	.word	0x40000800

08008220 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008230:	d10c      	bne.n	800824c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008232:	4b1b      	ldr	r3, [pc, #108]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	4a1a      	ldr	r2, [pc, #104]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	6593      	str	r3, [r2, #88]	; 0x58
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800824a:	e022      	b.n	8008292 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a14      	ldr	r2, [pc, #80]	; (80082a4 <HAL_TIM_PWM_MspInit+0x84>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d10c      	bne.n	8008270 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008256:	4b12      	ldr	r3, [pc, #72]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 800825c:	f043 0302 	orr.w	r3, r3, #2
 8008260:	6593      	str	r3, [r2, #88]	; 0x58
 8008262:	4b0f      	ldr	r3, [pc, #60]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	f003 0302 	and.w	r3, r3, #2
 800826a:	613b      	str	r3, [r7, #16]
 800826c:	693b      	ldr	r3, [r7, #16]
}
 800826e:	e010      	b.n	8008292 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a0c      	ldr	r2, [pc, #48]	; (80082a8 <HAL_TIM_PWM_MspInit+0x88>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d10b      	bne.n	8008292 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800827a:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	4a08      	ldr	r2, [pc, #32]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008280:	f043 0304 	orr.w	r3, r3, #4
 8008284:	6593      	str	r3, [r2, #88]	; 0x58
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_TIM_PWM_MspInit+0x80>)
 8008288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40021000 	.word	0x40021000
 80082a4:	40000400 	.word	0x40000400
 80082a8:	40000800 	.word	0x40000800

080082ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	; 0x28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b4:	f107 0314 	add.w	r3, r7, #20
 80082b8:	2200      	movs	r2, #0
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	609a      	str	r2, [r3, #8]
 80082c0:	60da      	str	r2, [r3, #12]
 80082c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a22      	ldr	r2, [pc, #136]	; (8008354 <HAL_TIM_MspPostInit+0xa8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d11c      	bne.n	8008308 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082ce:	4b22      	ldr	r3, [pc, #136]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 80082d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d2:	4a21      	ldr	r2, [pc, #132]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 80082d4:	f043 0304 	orr.w	r3, r3, #4
 80082d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082da:	4b1f      	ldr	r3, [pc, #124]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	f003 0304 	and.w	r3, r3, #4
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80082e6:	2340      	movs	r3, #64	; 0x40
 80082e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ea:	2302      	movs	r3, #2
 80082ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f2:	2300      	movs	r3, #0
 80082f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80082f6:	2302      	movs	r3, #2
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	4619      	mov	r1, r3
 8008300:	4816      	ldr	r0, [pc, #88]	; (800835c <HAL_TIM_MspPostInit+0xb0>)
 8008302:	f002 f82d 	bl	800a360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008306:	e021      	b.n	800834c <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a14      	ldr	r2, [pc, #80]	; (8008360 <HAL_TIM_MspPostInit+0xb4>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d11c      	bne.n	800834c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008312:	4b11      	ldr	r3, [pc, #68]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 8008314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008316:	4a10      	ldr	r2, [pc, #64]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 8008318:	f043 0302 	orr.w	r3, r3, #2
 800831c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800831e:	4b0e      	ldr	r3, [pc, #56]	; (8008358 <HAL_TIM_MspPostInit+0xac>)
 8008320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800832a:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800832e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008330:	2302      	movs	r3, #2
 8008332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008334:	2300      	movs	r3, #0
 8008336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008338:	2300      	movs	r3, #0
 800833a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800833c:	2302      	movs	r3, #2
 800833e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008340:	f107 0314 	add.w	r3, r7, #20
 8008344:	4619      	mov	r1, r3
 8008346:	4807      	ldr	r0, [pc, #28]	; (8008364 <HAL_TIM_MspPostInit+0xb8>)
 8008348:	f002 f80a 	bl	800a360 <HAL_GPIO_Init>
}
 800834c:	bf00      	nop
 800834e:	3728      	adds	r7, #40	; 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40000400 	.word	0x40000400
 8008358:	40021000 	.word	0x40021000
 800835c:	48000800 	.word	0x48000800
 8008360:	40000800 	.word	0x40000800
 8008364:	48000400 	.word	0x48000400

08008368 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800836c:	4b22      	ldr	r3, [pc, #136]	; (80083f8 <MX_UART4_Init+0x90>)
 800836e:	4a23      	ldr	r2, [pc, #140]	; (80083fc <MX_UART4_Init+0x94>)
 8008370:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8008372:	4b21      	ldr	r3, [pc, #132]	; (80083f8 <MX_UART4_Init+0x90>)
 8008374:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008378:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800837a:	4b1f      	ldr	r3, [pc, #124]	; (80083f8 <MX_UART4_Init+0x90>)
 800837c:	2200      	movs	r2, #0
 800837e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008380:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <MX_UART4_Init+0x90>)
 8008382:	2200      	movs	r2, #0
 8008384:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008386:	4b1c      	ldr	r3, [pc, #112]	; (80083f8 <MX_UART4_Init+0x90>)
 8008388:	2200      	movs	r2, #0
 800838a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800838c:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <MX_UART4_Init+0x90>)
 800838e:	220c      	movs	r2, #12
 8008390:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <MX_UART4_Init+0x90>)
 8008394:	2200      	movs	r2, #0
 8008396:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008398:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <MX_UART4_Init+0x90>)
 800839a:	2200      	movs	r2, #0
 800839c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800839e:	4b16      	ldr	r3, [pc, #88]	; (80083f8 <MX_UART4_Init+0x90>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80083a4:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <MX_UART4_Init+0x90>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80083aa:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <MX_UART4_Init+0x90>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80083b0:	4811      	ldr	r0, [pc, #68]	; (80083f8 <MX_UART4_Init+0x90>)
 80083b2:	f005 fa7d 	bl	800d8b0 <HAL_UART_Init>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80083bc:	f7ff f980 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083c0:	2100      	movs	r1, #0
 80083c2:	480d      	ldr	r0, [pc, #52]	; (80083f8 <MX_UART4_Init+0x90>)
 80083c4:	f007 fafd 	bl	800f9c2 <HAL_UARTEx_SetTxFifoThreshold>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80083ce:	f7ff f977 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80083d2:	2100      	movs	r1, #0
 80083d4:	4808      	ldr	r0, [pc, #32]	; (80083f8 <MX_UART4_Init+0x90>)
 80083d6:	f007 fb32 	bl	800fa3e <HAL_UARTEx_SetRxFifoThreshold>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80083e0:	f7ff f96e 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80083e4:	4804      	ldr	r0, [pc, #16]	; (80083f8 <MX_UART4_Init+0x90>)
 80083e6:	f007 fab3 	bl	800f950 <HAL_UARTEx_DisableFifoMode>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80083f0:	f7ff f966 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80083f4:	bf00      	nop
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000900 	.word	0x20000900
 80083fc:	40004c00 	.word	0x40004c00

08008400 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8008404:	4b22      	ldr	r3, [pc, #136]	; (8008490 <MX_UART5_Init+0x90>)
 8008406:	4a23      	ldr	r2, [pc, #140]	; (8008494 <MX_UART5_Init+0x94>)
 8008408:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800840a:	4b21      	ldr	r3, [pc, #132]	; (8008490 <MX_UART5_Init+0x90>)
 800840c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8008410:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8008412:	4b1f      	ldr	r3, [pc, #124]	; (8008490 <MX_UART5_Init+0x90>)
 8008414:	2200      	movs	r2, #0
 8008416:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8008418:	4b1d      	ldr	r3, [pc, #116]	; (8008490 <MX_UART5_Init+0x90>)
 800841a:	2200      	movs	r2, #0
 800841c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800841e:	4b1c      	ldr	r3, [pc, #112]	; (8008490 <MX_UART5_Init+0x90>)
 8008420:	2200      	movs	r2, #0
 8008422:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8008424:	4b1a      	ldr	r3, [pc, #104]	; (8008490 <MX_UART5_Init+0x90>)
 8008426:	220c      	movs	r2, #12
 8008428:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800842a:	4b19      	ldr	r3, [pc, #100]	; (8008490 <MX_UART5_Init+0x90>)
 800842c:	2200      	movs	r2, #0
 800842e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8008430:	4b17      	ldr	r3, [pc, #92]	; (8008490 <MX_UART5_Init+0x90>)
 8008432:	2200      	movs	r2, #0
 8008434:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008436:	4b16      	ldr	r3, [pc, #88]	; (8008490 <MX_UART5_Init+0x90>)
 8008438:	2200      	movs	r2, #0
 800843a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800843c:	4b14      	ldr	r3, [pc, #80]	; (8008490 <MX_UART5_Init+0x90>)
 800843e:	2200      	movs	r2, #0
 8008440:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008442:	4b13      	ldr	r3, [pc, #76]	; (8008490 <MX_UART5_Init+0x90>)
 8008444:	2200      	movs	r2, #0
 8008446:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8008448:	4811      	ldr	r0, [pc, #68]	; (8008490 <MX_UART5_Init+0x90>)
 800844a:	f005 fa31 	bl	800d8b0 <HAL_UART_Init>
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8008454:	f7ff f934 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008458:	2100      	movs	r1, #0
 800845a:	480d      	ldr	r0, [pc, #52]	; (8008490 <MX_UART5_Init+0x90>)
 800845c:	f007 fab1 	bl	800f9c2 <HAL_UARTEx_SetTxFifoThreshold>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8008466:	f7ff f92b 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800846a:	2100      	movs	r1, #0
 800846c:	4808      	ldr	r0, [pc, #32]	; (8008490 <MX_UART5_Init+0x90>)
 800846e:	f007 fae6 	bl	800fa3e <HAL_UARTEx_SetRxFifoThreshold>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8008478:	f7ff f922 	bl	80076c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800847c:	4804      	ldr	r0, [pc, #16]	; (8008490 <MX_UART5_Init+0x90>)
 800847e:	f007 fa67 	bl	800f950 <HAL_UARTEx_DisableFifoMode>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8008488:	f7ff f91a 	bl	80076c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800848c:	bf00      	nop
 800848e:	bd80      	pop	{r7, pc}
 8008490:	20000990 	.word	0x20000990
 8008494:	40005000 	.word	0x40005000

08008498 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b0a2      	sub	sp, #136	; 0x88
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084a0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
 80084a8:	605a      	str	r2, [r3, #4]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	60da      	str	r2, [r3, #12]
 80084ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80084b0:	f107 0320 	add.w	r3, r7, #32
 80084b4:	2254      	movs	r2, #84	; 0x54
 80084b6:	2100      	movs	r1, #0
 80084b8:	4618      	mov	r0, r3
 80084ba:	f009 fccf 	bl	8011e5c <memset>
  if(uartHandle->Instance==UART4)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a52      	ldr	r2, [pc, #328]	; (800860c <HAL_UART_MspInit+0x174>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d141      	bne.n	800854c <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80084c8:	2308      	movs	r3, #8
 80084ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80084cc:	2300      	movs	r3, #0
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80084d0:	f107 0320 	add.w	r3, r7, #32
 80084d4:	4618      	mov	r0, r3
 80084d6:	f003 fd1f 	bl	800bf18 <HAL_RCCEx_PeriphCLKConfig>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80084e0:	f7ff f8ee 	bl	80076c0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80084e4:	4b4a      	ldr	r3, [pc, #296]	; (8008610 <HAL_UART_MspInit+0x178>)
 80084e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e8:	4a49      	ldr	r2, [pc, #292]	; (8008610 <HAL_UART_MspInit+0x178>)
 80084ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084ee:	6593      	str	r3, [r2, #88]	; 0x58
 80084f0:	4b47      	ldr	r3, [pc, #284]	; (8008610 <HAL_UART_MspInit+0x178>)
 80084f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084f8:	61fb      	str	r3, [r7, #28]
 80084fa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084fc:	4b44      	ldr	r3, [pc, #272]	; (8008610 <HAL_UART_MspInit+0x178>)
 80084fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008500:	4a43      	ldr	r2, [pc, #268]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008502:	f043 0304 	orr.w	r3, r3, #4
 8008506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008508:	4b41      	ldr	r3, [pc, #260]	; (8008610 <HAL_UART_MspInit+0x178>)
 800850a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	61bb      	str	r3, [r7, #24]
 8008512:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008514:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008518:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800851a:	2302      	movs	r3, #2
 800851c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800851e:	2300      	movs	r3, #0
 8008520:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008522:	2300      	movs	r3, #0
 8008524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8008528:	2305      	movs	r3, #5
 800852a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800852e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008532:	4619      	mov	r1, r3
 8008534:	4837      	ldr	r0, [pc, #220]	; (8008614 <HAL_UART_MspInit+0x17c>)
 8008536:	f001 ff13 	bl	800a360 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800853a:	2200      	movs	r2, #0
 800853c:	2105      	movs	r1, #5
 800853e:	2034      	movs	r0, #52	; 0x34
 8008540:	f001 fbb4 	bl	8009cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8008544:	2034      	movs	r0, #52	; 0x34
 8008546:	f001 fbcb 	bl	8009ce0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800854a:	e05b      	b.n	8008604 <HAL_UART_MspInit+0x16c>
  else if(uartHandle->Instance==UART5)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a31      	ldr	r2, [pc, #196]	; (8008618 <HAL_UART_MspInit+0x180>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d156      	bne.n	8008604 <HAL_UART_MspInit+0x16c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8008556:	2310      	movs	r3, #16
 8008558:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800855a:	2300      	movs	r3, #0
 800855c:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800855e:	f107 0320 	add.w	r3, r7, #32
 8008562:	4618      	mov	r0, r3
 8008564:	f003 fcd8 	bl	800bf18 <HAL_RCCEx_PeriphCLKConfig>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_UART_MspInit+0xda>
      Error_Handler();
 800856e:	f7ff f8a7 	bl	80076c0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8008572:	4b27      	ldr	r3, [pc, #156]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008576:	4a26      	ldr	r2, [pc, #152]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800857c:	6593      	str	r3, [r2, #88]	; 0x58
 800857e:	4b24      	ldr	r3, [pc, #144]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800858a:	4b21      	ldr	r3, [pc, #132]	; (8008610 <HAL_UART_MspInit+0x178>)
 800858c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858e:	4a20      	ldr	r2, [pc, #128]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008590:	f043 0304 	orr.w	r3, r3, #4
 8008594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008596:	4b1e      	ldr	r3, [pc, #120]	; (8008610 <HAL_UART_MspInit+0x178>)
 8008598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800859a:	f003 0304 	and.w	r3, r3, #4
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <HAL_UART_MspInit+0x178>)
 80085a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a6:	4a1a      	ldr	r2, [pc, #104]	; (8008610 <HAL_UART_MspInit+0x178>)
 80085a8:	f043 0308 	orr.w	r3, r3, #8
 80085ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085ae:	4b18      	ldr	r3, [pc, #96]	; (8008610 <HAL_UART_MspInit+0x178>)
 80085b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80085ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c0:	2302      	movs	r3, #2
 80085c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c8:	2300      	movs	r3, #0
 80085ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80085ce:	2305      	movs	r3, #5
 80085d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085d4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085d8:	4619      	mov	r1, r3
 80085da:	480e      	ldr	r0, [pc, #56]	; (8008614 <HAL_UART_MspInit+0x17c>)
 80085dc:	f001 fec0 	bl	800a360 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80085e0:	2304      	movs	r3, #4
 80085e2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e4:	2302      	movs	r3, #2
 80085e6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ec:	2300      	movs	r3, #0
 80085ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80085f2:	2305      	movs	r3, #5
 80085f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80085fc:	4619      	mov	r1, r3
 80085fe:	4807      	ldr	r0, [pc, #28]	; (800861c <HAL_UART_MspInit+0x184>)
 8008600:	f001 feae 	bl	800a360 <HAL_GPIO_Init>
}
 8008604:	bf00      	nop
 8008606:	3788      	adds	r7, #136	; 0x88
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	40004c00 	.word	0x40004c00
 8008610:	40021000 	.word	0x40021000
 8008614:	48000800 	.word	0x48000800
 8008618:	40005000 	.word	0x40005000
 800861c:	48000c00 	.word	0x48000c00

08008620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008620:	480d      	ldr	r0, [pc, #52]	; (8008658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008622:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008624:	480d      	ldr	r0, [pc, #52]	; (800865c <LoopForever+0x6>)
  ldr r1, =_edata
 8008626:	490e      	ldr	r1, [pc, #56]	; (8008660 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008628:	4a0e      	ldr	r2, [pc, #56]	; (8008664 <LoopForever+0xe>)
  movs r3, #0
 800862a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800862c:	e002      	b.n	8008634 <LoopCopyDataInit>

0800862e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800862e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008632:	3304      	adds	r3, #4

08008634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008638:	d3f9      	bcc.n	800862e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800863a:	4a0b      	ldr	r2, [pc, #44]	; (8008668 <LoopForever+0x12>)
  ldr r4, =_ebss
 800863c:	4c0b      	ldr	r4, [pc, #44]	; (800866c <LoopForever+0x16>)
  movs r3, #0
 800863e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008640:	e001      	b.n	8008646 <LoopFillZerobss>

08008642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008644:	3204      	adds	r2, #4

08008646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008648:	d3fb      	bcc.n	8008642 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800864a:	f7ff fcad 	bl	8007fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800864e:	f009 fbc1 	bl	8011dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008652:	f7fe ff91 	bl	8007578 <main>

08008656 <LoopForever>:

LoopForever:
    b LoopForever
 8008656:	e7fe      	b.n	8008656 <LoopForever>
  ldr   r0, =_estack
 8008658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800865c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008660:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8008664:	080132c8 	.word	0x080132c8
  ldr r2, =_sbss
 8008668:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800866c:	20003b88 	.word	0x20003b88

08008670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008670:	e7fe      	b.n	8008670 <ADC1_2_IRQHandler>

08008672 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800867c:	2003      	movs	r0, #3
 800867e:	f001 fb0a 	bl	8009c96 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008682:	200f      	movs	r0, #15
 8008684:	f7ff fb9c 	bl	8007dc0 <HAL_InitTick>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	71fb      	strb	r3, [r7, #7]
 8008692:	e001      	b.n	8008698 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008694:	f7ff fb6c 	bl	8007d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008698:	79fb      	ldrb	r3, [r7, #7]

}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086a8:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <HAL_IncTick+0x1c>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <HAL_IncTick+0x20>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4413      	add	r3, r2
 80086b2:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_IncTick+0x1c>)
 80086b4:	6013      	str	r3, [r2, #0]
}
 80086b6:	bf00      	nop
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000a20 	.word	0x20000a20
 80086c4:	2000000c 	.word	0x2000000c

080086c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
  return uwTick;
 80086cc:	4b03      	ldr	r3, [pc, #12]	; (80086dc <HAL_GetTick+0x14>)
 80086ce:	681b      	ldr	r3, [r3, #0]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	20000a20 	.word	0x20000a20

080086e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80086e8:	f7ff ffee 	bl	80086c8 <HAL_GetTick>
 80086ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f8:	d004      	beq.n	8008704 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <HAL_Delay+0x40>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008704:	bf00      	nop
 8008706:	f7ff ffdf 	bl	80086c8 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	429a      	cmp	r2, r3
 8008714:	d8f7      	bhi.n	8008706 <HAL_Delay+0x26>
  {
  }
}
 8008716:	bf00      	nop
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	2000000c 	.word	0x2000000c

08008724 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	431a      	orrs	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	609a      	str	r2, [r3, #8]
}
 800873e:	bf00      	nop
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	431a      	orrs	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	609a      	str	r2, [r3, #8]
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800878c:	b480      	push	{r7}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	3360      	adds	r3, #96	; 0x60
 800879e:	461a      	mov	r2, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <LL_ADC_SetOffset+0x44>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	430a      	orrs	r2, r1
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	03fff000 	.word	0x03fff000

080087d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3360      	adds	r3, #96	; 0x60
 80087e2:	461a      	mov	r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3360      	adds	r3, #96	; 0x60
 8008810:	461a      	mov	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	431a      	orrs	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008836:	b480      	push	{r7}
 8008838:	b087      	sub	sp, #28
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3360      	adds	r3, #96	; 0x60
 8008846:	461a      	mov	r2, r3
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	431a      	orrs	r2, r3
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3360      	adds	r3, #96	; 0x60
 800887c:	461a      	mov	r2, r3
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	431a      	orrs	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	615a      	str	r2, [r3, #20]
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80088dc:	2301      	movs	r3, #1
 80088de:	e000      	b.n	80088e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80088ee:	b480      	push	{r7}
 80088f0:	b087      	sub	sp, #28
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	3330      	adds	r3, #48	; 0x30
 80088fe:	461a      	mov	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	f003 030c 	and.w	r3, r3, #12
 800890a:	4413      	add	r3, r2
 800890c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	211f      	movs	r1, #31
 800891a:	fa01 f303 	lsl.w	r3, r1, r3
 800891e:	43db      	mvns	r3, r3
 8008920:	401a      	ands	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	0e9b      	lsrs	r3, r3, #26
 8008926:	f003 011f 	and.w	r1, r3, #31
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	f003 031f 	and.w	r3, r3, #31
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	431a      	orrs	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008946:	b480      	push	{r7}
 8008948:	b087      	sub	sp, #28
 800894a:	af00      	add	r7, sp, #0
 800894c:	60f8      	str	r0, [r7, #12]
 800894e:	60b9      	str	r1, [r7, #8]
 8008950:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	3314      	adds	r3, #20
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	0e5b      	lsrs	r3, r3, #25
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	4413      	add	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	0d1b      	lsrs	r3, r3, #20
 800896e:	f003 031f 	and.w	r3, r3, #31
 8008972:	2107      	movs	r1, #7
 8008974:	fa01 f303 	lsl.w	r3, r1, r3
 8008978:	43db      	mvns	r3, r3
 800897a:	401a      	ands	r2, r3
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	0d1b      	lsrs	r3, r3, #20
 8008980:	f003 031f 	and.w	r3, r3, #31
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	fa01 f303 	lsl.w	r3, r1, r3
 800898a:	431a      	orrs	r2, r3
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008990:	bf00      	nop
 8008992:	371c      	adds	r7, #28
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d10a      	bne.n	80089c6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089bc:	431a      	orrs	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80089c4:	e00a      	b.n	80089dc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d2:	43db      	mvns	r3, r3
 80089d4:	401a      	ands	r2, r3
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80089dc:	bf00      	nop
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	407f0000 	.word	0x407f0000

080089ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 031f 	and.w	r3, r3, #31
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008a18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	6093      	str	r3, [r2, #8]
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a40:	d101      	bne.n	8008a46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008a42:	2301      	movs	r3, #1
 8008a44:	e000      	b.n	8008a48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	370c      	adds	r7, #12
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b083      	sub	sp, #12
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008a64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008a68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a90:	d101      	bne.n	8008a96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e000      	b.n	8008a98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ab8:	f043 0201 	orr.w	r2, r3, #1
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008ac0:	bf00      	nop
 8008ac2:	370c      	adds	r7, #12
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr

08008acc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0301 	and.w	r3, r3, #1
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <LL_ADC_IsEnabled+0x18>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e000      	b.n	8008ae6 <LL_ADC_IsEnabled+0x1a>
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b02:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b06:	f043 0204 	orr.w	r2, r3, #4
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008b0e:	bf00      	nop
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d101      	bne.n	8008b32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e000      	b.n	8008b34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b08      	cmp	r3, #8
 8008b52:	d101      	bne.n	8008b58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b68:	b590      	push	{r4, r7, lr}
 8008b6a:	b089      	sub	sp, #36	; 0x24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e1af      	b.n	8008ee2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7fc fa1f 	bl	8004fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7ff ff3f 	bl	8008a2c <LL_ADC_IsDeepPowerDownEnabled>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff ff25 	bl	8008a08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ff5a 	bl	8008a7c <LL_ADC_IsInternalRegulatorEnabled>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d115      	bne.n	8008bfa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff ff3e 	bl	8008a54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008bd8:	4b9f      	ldr	r3, [pc, #636]	; (8008e58 <HAL_ADC_Init+0x2f0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	099b      	lsrs	r3, r3, #6
 8008bde:	4a9f      	ldr	r2, [pc, #636]	; (8008e5c <HAL_ADC_Init+0x2f4>)
 8008be0:	fba2 2303 	umull	r2, r3, r2, r3
 8008be4:	099b      	lsrs	r3, r3, #6
 8008be6:	3301      	adds	r3, #1
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008bec:	e002      	b.n	8008bf4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1f9      	bne.n	8008bee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff ff3c 	bl	8008a7c <LL_ADC_IsInternalRegulatorEnabled>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10d      	bne.n	8008c26 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0e:	f043 0210 	orr.w	r2, r3, #16
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c1a:	f043 0201 	orr.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7ff ff75 	bl	8008b1a <LL_ADC_REG_IsConversionOngoing>
 8008c30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 8148 	bne.w	8008ed0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f040 8144 	bne.w	8008ed0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008c50:	f043 0202 	orr.w	r2, r3, #2
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff ff35 	bl	8008acc <LL_ADC_IsEnabled>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d141      	bne.n	8008cec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c70:	d004      	beq.n	8008c7c <HAL_ADC_Init+0x114>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a7a      	ldr	r2, [pc, #488]	; (8008e60 <HAL_ADC_Init+0x2f8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10f      	bne.n	8008c9c <HAL_ADC_Init+0x134>
 8008c7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008c80:	f7ff ff24 	bl	8008acc <LL_ADC_IsEnabled>
 8008c84:	4604      	mov	r4, r0
 8008c86:	4876      	ldr	r0, [pc, #472]	; (8008e60 <HAL_ADC_Init+0x2f8>)
 8008c88:	f7ff ff20 	bl	8008acc <LL_ADC_IsEnabled>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	4323      	orrs	r3, r4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bf0c      	ite	eq
 8008c94:	2301      	moveq	r3, #1
 8008c96:	2300      	movne	r3, #0
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	e012      	b.n	8008cc2 <HAL_ADC_Init+0x15a>
 8008c9c:	4871      	ldr	r0, [pc, #452]	; (8008e64 <HAL_ADC_Init+0x2fc>)
 8008c9e:	f7ff ff15 	bl	8008acc <LL_ADC_IsEnabled>
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	4870      	ldr	r0, [pc, #448]	; (8008e68 <HAL_ADC_Init+0x300>)
 8008ca6:	f7ff ff11 	bl	8008acc <LL_ADC_IsEnabled>
 8008caa:	4603      	mov	r3, r0
 8008cac:	431c      	orrs	r4, r3
 8008cae:	486f      	ldr	r0, [pc, #444]	; (8008e6c <HAL_ADC_Init+0x304>)
 8008cb0:	f7ff ff0c 	bl	8008acc <LL_ADC_IsEnabled>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4323      	orrs	r3, r4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	bf0c      	ite	eq
 8008cbc:	2301      	moveq	r3, #1
 8008cbe:	2300      	movne	r3, #0
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d012      	beq.n	8008cec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cce:	d004      	beq.n	8008cda <HAL_ADC_Init+0x172>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a62      	ldr	r2, [pc, #392]	; (8008e60 <HAL_ADC_Init+0x2f8>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d101      	bne.n	8008cde <HAL_ADC_Init+0x176>
 8008cda:	4a65      	ldr	r2, [pc, #404]	; (8008e70 <HAL_ADC_Init+0x308>)
 8008cdc:	e000      	b.n	8008ce0 <HAL_ADC_Init+0x178>
 8008cde:	4a65      	ldr	r2, [pc, #404]	; (8008e74 <HAL_ADC_Init+0x30c>)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7ff fd1c 	bl	8008724 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	7f5b      	ldrb	r3, [r3, #29]
 8008cf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008cf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008cfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d106      	bne.n	8008d28 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	045b      	lsls	r3, r3, #17
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d009      	beq.n	8008d44 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	4b4b      	ldr	r3, [pc, #300]	; (8008e78 <HAL_ADC_Init+0x310>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	6812      	ldr	r2, [r2, #0]
 8008d52:	69b9      	ldr	r1, [r7, #24]
 8008d54:	430b      	orrs	r3, r1
 8008d56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff fed1 	bl	8008b1a <LL_ADC_REG_IsConversionOngoing>
 8008d78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fede 	bl	8008b40 <LL_ADC_INJ_IsConversionOngoing>
 8008d84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d17f      	bne.n	8008e8c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d17c      	bne.n	8008e8c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008d96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008dae:	f023 0302 	bic.w	r3, r3, #2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	6812      	ldr	r2, [r2, #0]
 8008db6:	69b9      	ldr	r1, [r7, #24]
 8008db8:	430b      	orrs	r3, r1
 8008dba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d017      	beq.n	8008df4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691a      	ldr	r2, [r3, #16]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ddc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008de0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6911      	ldr	r1, [r2, #16]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	6812      	ldr	r2, [r2, #0]
 8008dec:	430b      	orrs	r3, r1
 8008dee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008df2:	e013      	b.n	8008e1c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691a      	ldr	r2, [r3, #16]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d12a      	bne.n	8008e7c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e30:	f023 0304 	bic.w	r3, r3, #4
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e3c:	4311      	orrs	r1, r2
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e42:	4311      	orrs	r1, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e48:	430a      	orrs	r2, r1
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f042 0201 	orr.w	r2, r2, #1
 8008e54:	611a      	str	r2, [r3, #16]
 8008e56:	e019      	b.n	8008e8c <HAL_ADC_Init+0x324>
 8008e58:	20000004 	.word	0x20000004
 8008e5c:	053e2d63 	.word	0x053e2d63
 8008e60:	50000100 	.word	0x50000100
 8008e64:	50000400 	.word	0x50000400
 8008e68:	50000500 	.word	0x50000500
 8008e6c:	50000600 	.word	0x50000600
 8008e70:	50000300 	.word	0x50000300
 8008e74:	50000700 	.word	0x50000700
 8008e78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	691a      	ldr	r2, [r3, #16]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d10c      	bne.n	8008eae <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f023 010f 	bic.w	r1, r3, #15
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	1e5a      	subs	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8008eac:	e007      	b.n	8008ebe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 020f 	bic.w	r2, r2, #15
 8008ebc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ec2:	f023 0303 	bic.w	r3, r3, #3
 8008ec6:	f043 0201 	orr.w	r2, r3, #1
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ece:	e007      	b.n	8008ee0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed4:	f043 0210 	orr.w	r2, r3, #16
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3724      	adds	r7, #36	; 0x24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd90      	pop	{r4, r7, pc}
 8008eea:	bf00      	nop

08008eec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f00:	d004      	beq.n	8008f0c <HAL_ADC_Start_DMA+0x20>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a5a      	ldr	r2, [pc, #360]	; (8009070 <HAL_ADC_Start_DMA+0x184>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d101      	bne.n	8008f10 <HAL_ADC_Start_DMA+0x24>
 8008f0c:	4b59      	ldr	r3, [pc, #356]	; (8009074 <HAL_ADC_Start_DMA+0x188>)
 8008f0e:	e000      	b.n	8008f12 <HAL_ADC_Start_DMA+0x26>
 8008f10:	4b59      	ldr	r3, [pc, #356]	; (8009078 <HAL_ADC_Start_DMA+0x18c>)
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fd6a 	bl	80089ec <LL_ADC_GetMultimode>
 8008f18:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fdfb 	bl	8008b1a <LL_ADC_REG_IsConversionOngoing>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f040 809b 	bne.w	8009062 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <HAL_ADC_Start_DMA+0x4e>
 8008f36:	2302      	movs	r3, #2
 8008f38:	e096      	b.n	8009068 <HAL_ADC_Start_DMA+0x17c>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a4d      	ldr	r2, [pc, #308]	; (800907c <HAL_ADC_Start_DMA+0x190>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d008      	beq.n	8008f5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b05      	cmp	r3, #5
 8008f56:	d002      	beq.n	8008f5e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	2b09      	cmp	r3, #9
 8008f5c:	d17a      	bne.n	8009054 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f000 fcf6 	bl	8009950 <ADC_Enable>
 8008f64:	4603      	mov	r3, r0
 8008f66:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d16d      	bne.n	800904a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4a3a      	ldr	r2, [pc, #232]	; (8009070 <HAL_ADC_Start_DMA+0x184>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d009      	beq.n	8008fa0 <HAL_ADC_Start_DMA+0xb4>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a3b      	ldr	r2, [pc, #236]	; (8009080 <HAL_ADC_Start_DMA+0x194>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d002      	beq.n	8008f9c <HAL_ADC_Start_DMA+0xb0>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	e003      	b.n	8008fa4 <HAL_ADC_Start_DMA+0xb8>
 8008f9c:	4b39      	ldr	r3, [pc, #228]	; (8009084 <HAL_ADC_Start_DMA+0x198>)
 8008f9e:	e001      	b.n	8008fa4 <HAL_ADC_Start_DMA+0xb8>
 8008fa0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d002      	beq.n	8008fb2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d105      	bne.n	8008fbe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d006      	beq.n	8008fd8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	f023 0206 	bic.w	r2, r3, #6
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
 8008fd6:	e002      	b.n	8008fde <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe2:	4a29      	ldr	r2, [pc, #164]	; (8009088 <HAL_ADC_Start_DMA+0x19c>)
 8008fe4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fea:	4a28      	ldr	r2, [pc, #160]	; (800908c <HAL_ADC_Start_DMA+0x1a0>)
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff2:	4a27      	ldr	r2, [pc, #156]	; (8009090 <HAL_ADC_Start_DMA+0x1a4>)
 8008ff4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	221c      	movs	r2, #28
 8008ffc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f042 0210 	orr.w	r2, r2, #16
 8009014:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68da      	ldr	r2, [r3, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0201 	orr.w	r2, r2, #1
 8009024:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	3340      	adds	r3, #64	; 0x40
 8009030:	4619      	mov	r1, r3
 8009032:	68ba      	ldr	r2, [r7, #8]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f000 ff09 	bl	8009e4c <HAL_DMA_Start_IT>
 800903a:	4603      	mov	r3, r0
 800903c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f7ff fd55 	bl	8008af2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8009048:	e00d      	b.n	8009066 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009052:	e008      	b.n	8009066 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009060:	e001      	b.n	8009066 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009062:	2302      	movs	r3, #2
 8009064:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009066:	7dfb      	ldrb	r3, [r7, #23]
}
 8009068:	4618      	mov	r0, r3
 800906a:	3718      	adds	r7, #24
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	50000100 	.word	0x50000100
 8009074:	50000300 	.word	0x50000300
 8009078:	50000700 	.word	0x50000700
 800907c:	50000600 	.word	0x50000600
 8009080:	50000500 	.word	0x50000500
 8009084:	50000400 	.word	0x50000400
 8009088:	08009a15 	.word	0x08009a15
 800908c:	08009aed 	.word	0x08009aed
 8009090:	08009b09 	.word	0x08009b09

08009094 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b0b6      	sub	sp, #216	; 0xd8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d102      	bne.n	80090f4 <HAL_ADC_ConfigChannel+0x24>
 80090ee:	2302      	movs	r3, #2
 80090f0:	f000 bc13 	b.w	800991a <HAL_ADC_ConfigChannel+0x84a>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f7ff fd0a 	bl	8008b1a <LL_ADC_REG_IsConversionOngoing>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	f040 83f3 	bne.w	80098f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7ff fbe7 	bl	80088ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4618      	mov	r0, r3
 8009126:	f7ff fcf8 	bl	8008b1a <LL_ADC_REG_IsConversionOngoing>
 800912a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff fd04 	bl	8008b40 <LL_ADC_INJ_IsConversionOngoing>
 8009138:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800913c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009140:	2b00      	cmp	r3, #0
 8009142:	f040 81d9 	bne.w	80094f8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009146:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 81d4 	bne.w	80094f8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009158:	d10f      	bne.n	800917a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6818      	ldr	r0, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2200      	movs	r2, #0
 8009164:	4619      	mov	r1, r3
 8009166:	f7ff fbee 	bl	8008946 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff fb95 	bl	80088a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8009178:	e00e      	b.n	8009198 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6818      	ldr	r0, [r3, #0]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6819      	ldr	r1, [r3, #0]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	461a      	mov	r2, r3
 8009188:	f7ff fbdd 	bl	8008946 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7ff fb85 	bl	80088a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	695a      	ldr	r2, [r3, #20]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	08db      	lsrs	r3, r3, #3
 80091a4:	f003 0303 	and.w	r3, r3, #3
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d022      	beq.n	8009200 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6818      	ldr	r0, [r3, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6919      	ldr	r1, [r3, #16]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091ca:	f7ff fadf 	bl	800878c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	6919      	ldr	r1, [r3, #16]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	461a      	mov	r2, r3
 80091dc:	f7ff fb2b 	bl	8008836 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	6919      	ldr	r1, [r3, #16]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	7f1b      	ldrb	r3, [r3, #28]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d102      	bne.n	80091f6 <HAL_ADC_ConfigChannel+0x126>
 80091f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091f4:	e000      	b.n	80091f8 <HAL_ADC_ConfigChannel+0x128>
 80091f6:	2300      	movs	r3, #0
 80091f8:	461a      	mov	r2, r3
 80091fa:	f7ff fb37 	bl	800886c <LL_ADC_SetOffsetSaturation>
 80091fe:	e17b      	b.n	80094f8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f7ff fae4 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 800920c:	4603      	mov	r3, r0
 800920e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <HAL_ADC_ConfigChannel+0x15c>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2100      	movs	r1, #0
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff fad9 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 8009222:	4603      	mov	r3, r0
 8009224:	0e9b      	lsrs	r3, r3, #26
 8009226:	f003 021f 	and.w	r2, r3, #31
 800922a:	e01e      	b.n	800926a <HAL_ADC_ConfigChannel+0x19a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f7ff face 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 8009238:	4603      	mov	r3, r0
 800923a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800923e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009242:	fa93 f3a3 	rbit	r3, r3
 8009246:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800924a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800924e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d101      	bne.n	800925e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800925a:	2320      	movs	r3, #32
 800925c:	e004      	b.n	8009268 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800925e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009262:	fab3 f383 	clz	r3, r3
 8009266:	b2db      	uxtb	r3, r3
 8009268:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009272:	2b00      	cmp	r3, #0
 8009274:	d105      	bne.n	8009282 <HAL_ADC_ConfigChannel+0x1b2>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	0e9b      	lsrs	r3, r3, #26
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	e018      	b.n	80092b4 <HAL_ADC_ConfigChannel+0x1e4>
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800928e:	fa93 f3a3 	rbit	r3, r3
 8009292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8009296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800929a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800929e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d101      	bne.n	80092aa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80092a6:	2320      	movs	r3, #32
 80092a8:	e004      	b.n	80092b4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80092aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80092ae:	fab3 f383 	clz	r3, r3
 80092b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d106      	bne.n	80092c6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2200      	movs	r2, #0
 80092be:	2100      	movs	r1, #0
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fa9d 	bl	8008800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2101      	movs	r1, #1
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fa81 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 80092d2:	4603      	mov	r3, r0
 80092d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10a      	bne.n	80092f2 <HAL_ADC_ConfigChannel+0x222>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2101      	movs	r1, #1
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7ff fa76 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 80092e8:	4603      	mov	r3, r0
 80092ea:	0e9b      	lsrs	r3, r3, #26
 80092ec:	f003 021f 	and.w	r2, r3, #31
 80092f0:	e01e      	b.n	8009330 <HAL_ADC_ConfigChannel+0x260>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	2101      	movs	r1, #1
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff fa6b 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 80092fe:	4603      	mov	r3, r0
 8009300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009304:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009308:	fa93 f3a3 	rbit	r3, r3
 800930c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8009310:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8009318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8009320:	2320      	movs	r3, #32
 8009322:	e004      	b.n	800932e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8009324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009328:	fab3 f383 	clz	r3, r3
 800932c:	b2db      	uxtb	r3, r3
 800932e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <HAL_ADC_ConfigChannel+0x278>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	0e9b      	lsrs	r3, r3, #26
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	e018      	b.n	800937a <HAL_ADC_ConfigChannel+0x2aa>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009354:	fa93 f3a3 	rbit	r3, r3
 8009358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800935c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8009364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800936c:	2320      	movs	r3, #32
 800936e:	e004      	b.n	800937a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8009370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009374:	fab3 f383 	clz	r3, r3
 8009378:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800937a:	429a      	cmp	r2, r3
 800937c:	d106      	bne.n	800938c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2200      	movs	r2, #0
 8009384:	2101      	movs	r1, #1
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fa3a 	bl	8008800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2102      	movs	r1, #2
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fa1e 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 8009398:	4603      	mov	r3, r0
 800939a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10a      	bne.n	80093b8 <HAL_ADC_ConfigChannel+0x2e8>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2102      	movs	r1, #2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fa13 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 80093ae:	4603      	mov	r3, r0
 80093b0:	0e9b      	lsrs	r3, r3, #26
 80093b2:	f003 021f 	and.w	r2, r3, #31
 80093b6:	e01e      	b.n	80093f6 <HAL_ADC_ConfigChannel+0x326>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2102      	movs	r1, #2
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff fa08 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ce:	fa93 f3a3 	rbit	r3, r3
 80093d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80093d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80093de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80093e6:	2320      	movs	r3, #32
 80093e8:	e004      	b.n	80093f4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80093ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093ee:	fab3 f383 	clz	r3, r3
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d105      	bne.n	800940e <HAL_ADC_ConfigChannel+0x33e>
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	0e9b      	lsrs	r3, r3, #26
 8009408:	f003 031f 	and.w	r3, r3, #31
 800940c:	e016      	b.n	800943c <HAL_ADC_ConfigChannel+0x36c>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800941a:	fa93 f3a3 	rbit	r3, r3
 800941e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009420:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800942e:	2320      	movs	r3, #32
 8009430:	e004      	b.n	800943c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8009432:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009436:	fab3 f383 	clz	r3, r3
 800943a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800943c:	429a      	cmp	r2, r3
 800943e:	d106      	bne.n	800944e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2200      	movs	r2, #0
 8009446:	2102      	movs	r1, #2
 8009448:	4618      	mov	r0, r3
 800944a:	f7ff f9d9 	bl	8008800 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2103      	movs	r1, #3
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff f9bd 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 800945a:	4603      	mov	r3, r0
 800945c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10a      	bne.n	800947a <HAL_ADC_ConfigChannel+0x3aa>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2103      	movs	r1, #3
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff f9b2 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 8009470:	4603      	mov	r3, r0
 8009472:	0e9b      	lsrs	r3, r3, #26
 8009474:	f003 021f 	and.w	r2, r3, #31
 8009478:	e017      	b.n	80094aa <HAL_ADC_ConfigChannel+0x3da>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2103      	movs	r1, #3
 8009480:	4618      	mov	r0, r3
 8009482:	f7ff f9a7 	bl	80087d4 <LL_ADC_GetOffsetChannel>
 8009486:	4603      	mov	r3, r0
 8009488:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948c:	fa93 f3a3 	rbit	r3, r3
 8009490:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8009492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009494:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8009496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800949c:	2320      	movs	r3, #32
 800949e:	e003      	b.n	80094a8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80094a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d105      	bne.n	80094c2 <HAL_ADC_ConfigChannel+0x3f2>
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	0e9b      	lsrs	r3, r3, #26
 80094bc:	f003 031f 	and.w	r3, r3, #31
 80094c0:	e011      	b.n	80094e6 <HAL_ADC_ConfigChannel+0x416>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ca:	fa93 f3a3 	rbit	r3, r3
 80094ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80094d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80094d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80094da:	2320      	movs	r3, #32
 80094dc:	e003      	b.n	80094e6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80094de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e0:	fab3 f383 	clz	r3, r3
 80094e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d106      	bne.n	80094f8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	2200      	movs	r2, #0
 80094f0:	2103      	movs	r1, #3
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff f984 	bl	8008800 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fae5 	bl	8008acc <LL_ADC_IsEnabled>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	f040 813d 	bne.w	8009784 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	6819      	ldr	r1, [r3, #0]
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	461a      	mov	r2, r3
 8009518:	f7ff fa40 	bl	800899c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	4aa2      	ldr	r2, [pc, #648]	; (80097ac <HAL_ADC_ConfigChannel+0x6dc>)
 8009522:	4293      	cmp	r3, r2
 8009524:	f040 812e 	bne.w	8009784 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <HAL_ADC_ConfigChannel+0x480>
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	0e9b      	lsrs	r3, r3, #26
 800953e:	3301      	adds	r3, #1
 8009540:	f003 031f 	and.w	r3, r3, #31
 8009544:	2b09      	cmp	r3, #9
 8009546:	bf94      	ite	ls
 8009548:	2301      	movls	r3, #1
 800954a:	2300      	movhi	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	e019      	b.n	8009584 <HAL_ADC_ConfigChannel+0x4b4>
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009558:	fa93 f3a3 	rbit	r3, r3
 800955c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800955e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009560:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8009568:	2320      	movs	r3, #32
 800956a:	e003      	b.n	8009574 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800956c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800956e:	fab3 f383 	clz	r3, r3
 8009572:	b2db      	uxtb	r3, r3
 8009574:	3301      	adds	r3, #1
 8009576:	f003 031f 	and.w	r3, r3, #31
 800957a:	2b09      	cmp	r3, #9
 800957c:	bf94      	ite	ls
 800957e:	2301      	movls	r3, #1
 8009580:	2300      	movhi	r3, #0
 8009582:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009584:	2b00      	cmp	r3, #0
 8009586:	d079      	beq.n	800967c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009590:	2b00      	cmp	r3, #0
 8009592:	d107      	bne.n	80095a4 <HAL_ADC_ConfigChannel+0x4d4>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	0e9b      	lsrs	r3, r3, #26
 800959a:	3301      	adds	r3, #1
 800959c:	069b      	lsls	r3, r3, #26
 800959e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80095a2:	e015      	b.n	80095d0 <HAL_ADC_ConfigChannel+0x500>
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095ac:	fa93 f3a3 	rbit	r3, r3
 80095b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80095b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80095b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80095bc:	2320      	movs	r3, #32
 80095be:	e003      	b.n	80095c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80095c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095c2:	fab3 f383 	clz	r3, r3
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	3301      	adds	r3, #1
 80095ca:	069b      	lsls	r3, r3, #26
 80095cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <HAL_ADC_ConfigChannel+0x520>
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	0e9b      	lsrs	r3, r3, #26
 80095e2:	3301      	adds	r3, #1
 80095e4:	f003 031f 	and.w	r3, r3, #31
 80095e8:	2101      	movs	r1, #1
 80095ea:	fa01 f303 	lsl.w	r3, r1, r3
 80095ee:	e017      	b.n	8009620 <HAL_ADC_ConfigChannel+0x550>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095f8:	fa93 f3a3 	rbit	r3, r3
 80095fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80095fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009600:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8009602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8009608:	2320      	movs	r3, #32
 800960a:	e003      	b.n	8009614 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800960c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800960e:	fab3 f383 	clz	r3, r3
 8009612:	b2db      	uxtb	r3, r3
 8009614:	3301      	adds	r3, #1
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	2101      	movs	r1, #1
 800961c:	fa01 f303 	lsl.w	r3, r1, r3
 8009620:	ea42 0103 	orr.w	r1, r2, r3
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <HAL_ADC_ConfigChannel+0x576>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	0e9b      	lsrs	r3, r3, #26
 8009636:	3301      	adds	r3, #1
 8009638:	f003 021f 	and.w	r2, r3, #31
 800963c:	4613      	mov	r3, r2
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	4413      	add	r3, r2
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	e018      	b.n	8009678 <HAL_ADC_ConfigChannel+0x5a8>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964e:	fa93 f3a3 	rbit	r3, r3
 8009652:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009656:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800965e:	2320      	movs	r3, #32
 8009660:	e003      	b.n	800966a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8009662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009664:	fab3 f383 	clz	r3, r3
 8009668:	b2db      	uxtb	r3, r3
 800966a:	3301      	adds	r3, #1
 800966c:	f003 021f 	and.w	r2, r3, #31
 8009670:	4613      	mov	r3, r2
 8009672:	005b      	lsls	r3, r3, #1
 8009674:	4413      	add	r3, r2
 8009676:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009678:	430b      	orrs	r3, r1
 800967a:	e07e      	b.n	800977a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009684:	2b00      	cmp	r3, #0
 8009686:	d107      	bne.n	8009698 <HAL_ADC_ConfigChannel+0x5c8>
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	0e9b      	lsrs	r3, r3, #26
 800968e:	3301      	adds	r3, #1
 8009690:	069b      	lsls	r3, r3, #26
 8009692:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009696:	e015      	b.n	80096c4 <HAL_ADC_ConfigChannel+0x5f4>
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800969e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a0:	fa93 f3a3 	rbit	r3, r3
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d101      	bne.n	80096b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80096b0:	2320      	movs	r3, #32
 80096b2:	e003      	b.n	80096bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80096b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b6:	fab3 f383 	clz	r3, r3
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	3301      	adds	r3, #1
 80096be:	069b      	lsls	r3, r3, #26
 80096c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <HAL_ADC_ConfigChannel+0x614>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	0e9b      	lsrs	r3, r3, #26
 80096d6:	3301      	adds	r3, #1
 80096d8:	f003 031f 	and.w	r3, r3, #31
 80096dc:	2101      	movs	r1, #1
 80096de:	fa01 f303 	lsl.w	r3, r1, r3
 80096e2:	e017      	b.n	8009714 <HAL_ADC_ConfigChannel+0x644>
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	fa93 f3a3 	rbit	r3, r3
 80096f0:	61fb      	str	r3, [r7, #28]
  return result;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80096fc:	2320      	movs	r3, #32
 80096fe:	e003      	b.n	8009708 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8009700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009702:	fab3 f383 	clz	r3, r3
 8009706:	b2db      	uxtb	r3, r3
 8009708:	3301      	adds	r3, #1
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	2101      	movs	r1, #1
 8009710:	fa01 f303 	lsl.w	r3, r1, r3
 8009714:	ea42 0103 	orr.w	r1, r2, r3
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10d      	bne.n	8009740 <HAL_ADC_ConfigChannel+0x670>
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	0e9b      	lsrs	r3, r3, #26
 800972a:	3301      	adds	r3, #1
 800972c:	f003 021f 	and.w	r2, r3, #31
 8009730:	4613      	mov	r3, r2
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	4413      	add	r3, r2
 8009736:	3b1e      	subs	r3, #30
 8009738:	051b      	lsls	r3, r3, #20
 800973a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800973e:	e01b      	b.n	8009778 <HAL_ADC_ConfigChannel+0x6a8>
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	fa93 f3a3 	rbit	r3, r3
 800974c:	613b      	str	r3, [r7, #16]
  return result;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009758:	2320      	movs	r3, #32
 800975a:	e003      	b.n	8009764 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	fab3 f383 	clz	r3, r3
 8009762:	b2db      	uxtb	r3, r3
 8009764:	3301      	adds	r3, #1
 8009766:	f003 021f 	and.w	r2, r3, #31
 800976a:	4613      	mov	r3, r2
 800976c:	005b      	lsls	r3, r3, #1
 800976e:	4413      	add	r3, r2
 8009770:	3b1e      	subs	r3, #30
 8009772:	051b      	lsls	r3, r3, #20
 8009774:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009778:	430b      	orrs	r3, r1
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	6892      	ldr	r2, [r2, #8]
 800977e:	4619      	mov	r1, r3
 8009780:	f7ff f8e1 	bl	8008946 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	4b09      	ldr	r3, [pc, #36]	; (80097b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800978a:	4013      	ands	r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 80be 	beq.w	800990e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800979a:	d004      	beq.n	80097a6 <HAL_ADC_ConfigChannel+0x6d6>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a04      	ldr	r2, [pc, #16]	; (80097b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d10a      	bne.n	80097bc <HAL_ADC_ConfigChannel+0x6ec>
 80097a6:	4b04      	ldr	r3, [pc, #16]	; (80097b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80097a8:	e009      	b.n	80097be <HAL_ADC_ConfigChannel+0x6ee>
 80097aa:	bf00      	nop
 80097ac:	407f0000 	.word	0x407f0000
 80097b0:	80080000 	.word	0x80080000
 80097b4:	50000100 	.word	0x50000100
 80097b8:	50000300 	.word	0x50000300
 80097bc:	4b59      	ldr	r3, [pc, #356]	; (8009924 <HAL_ADC_ConfigChannel+0x854>)
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fe ffd6 	bl	8008770 <LL_ADC_GetCommonPathInternalCh>
 80097c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a56      	ldr	r2, [pc, #344]	; (8009928 <HAL_ADC_ConfigChannel+0x858>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d004      	beq.n	80097dc <HAL_ADC_ConfigChannel+0x70c>
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a55      	ldr	r2, [pc, #340]	; (800992c <HAL_ADC_ConfigChannel+0x85c>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d13a      	bne.n	8009852 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80097dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80097e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d134      	bne.n	8009852 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f0:	d005      	beq.n	80097fe <HAL_ADC_ConfigChannel+0x72e>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a4e      	ldr	r2, [pc, #312]	; (8009930 <HAL_ADC_ConfigChannel+0x860>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	f040 8085 	bne.w	8009908 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009806:	d004      	beq.n	8009812 <HAL_ADC_ConfigChannel+0x742>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a49      	ldr	r2, [pc, #292]	; (8009934 <HAL_ADC_ConfigChannel+0x864>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d101      	bne.n	8009816 <HAL_ADC_ConfigChannel+0x746>
 8009812:	4a49      	ldr	r2, [pc, #292]	; (8009938 <HAL_ADC_ConfigChannel+0x868>)
 8009814:	e000      	b.n	8009818 <HAL_ADC_ConfigChannel+0x748>
 8009816:	4a43      	ldr	r2, [pc, #268]	; (8009924 <HAL_ADC_ConfigChannel+0x854>)
 8009818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800981c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f7fe ff91 	bl	800874a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009828:	4b44      	ldr	r3, [pc, #272]	; (800993c <HAL_ADC_ConfigChannel+0x86c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	099b      	lsrs	r3, r3, #6
 800982e:	4a44      	ldr	r2, [pc, #272]	; (8009940 <HAL_ADC_ConfigChannel+0x870>)
 8009830:	fba2 2303 	umull	r2, r3, r2, r3
 8009834:	099b      	lsrs	r3, r3, #6
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	4613      	mov	r3, r2
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	4413      	add	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009842:	e002      	b.n	800984a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3b01      	subs	r3, #1
 8009848:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1f9      	bne.n	8009844 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009850:	e05a      	b.n	8009908 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4a3b      	ldr	r2, [pc, #236]	; (8009944 <HAL_ADC_ConfigChannel+0x874>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d125      	bne.n	80098a8 <HAL_ADC_ConfigChannel+0x7d8>
 800985c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d11f      	bne.n	80098a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a31      	ldr	r2, [pc, #196]	; (8009934 <HAL_ADC_ConfigChannel+0x864>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d104      	bne.n	800987c <HAL_ADC_ConfigChannel+0x7ac>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a34      	ldr	r2, [pc, #208]	; (8009948 <HAL_ADC_ConfigChannel+0x878>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d047      	beq.n	800990c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009884:	d004      	beq.n	8009890 <HAL_ADC_ConfigChannel+0x7c0>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a2a      	ldr	r2, [pc, #168]	; (8009934 <HAL_ADC_ConfigChannel+0x864>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d101      	bne.n	8009894 <HAL_ADC_ConfigChannel+0x7c4>
 8009890:	4a29      	ldr	r2, [pc, #164]	; (8009938 <HAL_ADC_ConfigChannel+0x868>)
 8009892:	e000      	b.n	8009896 <HAL_ADC_ConfigChannel+0x7c6>
 8009894:	4a23      	ldr	r2, [pc, #140]	; (8009924 <HAL_ADC_ConfigChannel+0x854>)
 8009896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800989a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fe ff52 	bl	800874a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80098a6:	e031      	b.n	800990c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a27      	ldr	r2, [pc, #156]	; (800994c <HAL_ADC_ConfigChannel+0x87c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d12d      	bne.n	800990e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80098b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d127      	bne.n	800990e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a1c      	ldr	r2, [pc, #112]	; (8009934 <HAL_ADC_ConfigChannel+0x864>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d022      	beq.n	800990e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098d0:	d004      	beq.n	80098dc <HAL_ADC_ConfigChannel+0x80c>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <HAL_ADC_ConfigChannel+0x864>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d101      	bne.n	80098e0 <HAL_ADC_ConfigChannel+0x810>
 80098dc:	4a16      	ldr	r2, [pc, #88]	; (8009938 <HAL_ADC_ConfigChannel+0x868>)
 80098de:	e000      	b.n	80098e2 <HAL_ADC_ConfigChannel+0x812>
 80098e0:	4a10      	ldr	r2, [pc, #64]	; (8009924 <HAL_ADC_ConfigChannel+0x854>)
 80098e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80098ea:	4619      	mov	r1, r3
 80098ec:	4610      	mov	r0, r2
 80098ee:	f7fe ff2c 	bl	800874a <LL_ADC_SetCommonPathInternalCh>
 80098f2:	e00c      	b.n	800990e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f8:	f043 0220 	orr.w	r2, r3, #32
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8009906:	e002      	b.n	800990e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009908:	bf00      	nop
 800990a:	e000      	b.n	800990e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800990c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009916:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800991a:	4618      	mov	r0, r3
 800991c:	37d8      	adds	r7, #216	; 0xd8
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	bf00      	nop
 8009924:	50000700 	.word	0x50000700
 8009928:	c3210000 	.word	0xc3210000
 800992c:	90c00010 	.word	0x90c00010
 8009930:	50000600 	.word	0x50000600
 8009934:	50000100 	.word	0x50000100
 8009938:	50000300 	.word	0x50000300
 800993c:	20000004 	.word	0x20000004
 8009940:	053e2d63 	.word	0x053e2d63
 8009944:	c7520000 	.word	0xc7520000
 8009948:	50000500 	.word	0x50000500
 800994c:	cb840000 	.word	0xcb840000

08009950 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff f8b5 	bl	8008acc <LL_ADC_IsEnabled>
 8009962:	4603      	mov	r3, r0
 8009964:	2b00      	cmp	r3, #0
 8009966:	d14d      	bne.n	8009a04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689a      	ldr	r2, [r3, #8]
 800996e:	4b28      	ldr	r3, [pc, #160]	; (8009a10 <ADC_Enable+0xc0>)
 8009970:	4013      	ands	r3, r2
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997a:	f043 0210 	orr.w	r2, r3, #16
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009986:	f043 0201 	orr.w	r2, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e039      	b.n	8009a06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f7ff f884 	bl	8008aa4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800999c:	f7fe fe94 	bl	80086c8 <HAL_GetTick>
 80099a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099a2:	e028      	b.n	80099f6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff f88f 	bl	8008acc <LL_ADC_IsEnabled>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d104      	bne.n	80099be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff f873 	bl	8008aa4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099be:	f7fe fe83 	bl	80086c8 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d914      	bls.n	80099f6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d00d      	beq.n	80099f6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099de:	f043 0210 	orr.w	r2, r3, #16
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099ea:	f043 0201 	orr.w	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e007      	b.n	8009a06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d1cf      	bne.n	80099a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	8000003f 	.word	0x8000003f

08009a14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d14b      	bne.n	8009ac6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d021      	beq.n	8009a8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7fe ff3b 	bl	80088c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d032      	beq.n	8009abe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d12b      	bne.n	8009abe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d11f      	bne.n	8009abe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a82:	f043 0201 	orr.w	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a8a:	e018      	b.n	8009abe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d111      	bne.n	8009abe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d105      	bne.n	8009abe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab6:	f043 0201 	orr.w	r2, r3, #1
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fae8 	bl	8009094 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009ac4:	e00e      	b.n	8009ae4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d003      	beq.n	8009ada <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff faf2 	bl	80090bc <HAL_ADC_ErrorCallback>
}
 8009ad8:	e004      	b.n	8009ae4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	4798      	blx	r3
}
 8009ae4:	bf00      	nop
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f7ff fad4 	bl	80090a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b00:	bf00      	nop
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b26:	f043 0204 	orr.w	r2, r3, #4
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff fac4 	bl	80090bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <__NVIC_SetPriorityGrouping+0x44>)
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b52:	68ba      	ldr	r2, [r7, #8]
 8009b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b6e:	4a04      	ldr	r2, [pc, #16]	; (8009b80 <__NVIC_SetPriorityGrouping+0x44>)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	60d3      	str	r3, [r2, #12]
}
 8009b74:	bf00      	nop
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	e000ed00 	.word	0xe000ed00

08009b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <__NVIC_GetPriorityGrouping+0x18>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	0a1b      	lsrs	r3, r3, #8
 8009b8e:	f003 0307 	and.w	r3, r3, #7
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	e000ed00 	.word	0xe000ed00

08009ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b083      	sub	sp, #12
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	db0b      	blt.n	8009bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bb2:	79fb      	ldrb	r3, [r7, #7]
 8009bb4:	f003 021f 	and.w	r2, r3, #31
 8009bb8:	4907      	ldr	r1, [pc, #28]	; (8009bd8 <__NVIC_EnableIRQ+0x38>)
 8009bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bbe:	095b      	lsrs	r3, r3, #5
 8009bc0:	2001      	movs	r0, #1
 8009bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8009bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009bca:	bf00      	nop
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	e000e100 	.word	0xe000e100

08009bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	4603      	mov	r3, r0
 8009be4:	6039      	str	r1, [r7, #0]
 8009be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	db0a      	blt.n	8009c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	b2da      	uxtb	r2, r3
 8009bf4:	490c      	ldr	r1, [pc, #48]	; (8009c28 <__NVIC_SetPriority+0x4c>)
 8009bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bfa:	0112      	lsls	r2, r2, #4
 8009bfc:	b2d2      	uxtb	r2, r2
 8009bfe:	440b      	add	r3, r1
 8009c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009c04:	e00a      	b.n	8009c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	b2da      	uxtb	r2, r3
 8009c0a:	4908      	ldr	r1, [pc, #32]	; (8009c2c <__NVIC_SetPriority+0x50>)
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	3b04      	subs	r3, #4
 8009c14:	0112      	lsls	r2, r2, #4
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	440b      	add	r3, r1
 8009c1a:	761a      	strb	r2, [r3, #24]
}
 8009c1c:	bf00      	nop
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	e000e100 	.word	0xe000e100
 8009c2c:	e000ed00 	.word	0xe000ed00

08009c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b089      	sub	sp, #36	; 0x24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f003 0307 	and.w	r3, r3, #7
 8009c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	f1c3 0307 	rsb	r3, r3, #7
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	bf28      	it	cs
 8009c4e:	2304      	movcs	r3, #4
 8009c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3304      	adds	r3, #4
 8009c56:	2b06      	cmp	r3, #6
 8009c58:	d902      	bls.n	8009c60 <NVIC_EncodePriority+0x30>
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	3b03      	subs	r3, #3
 8009c5e:	e000      	b.n	8009c62 <NVIC_EncodePriority+0x32>
 8009c60:	2300      	movs	r3, #0
 8009c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6e:	43da      	mvns	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	401a      	ands	r2, r3
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c78:	f04f 31ff 	mov.w	r1, #4294967295
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c82:	43d9      	mvns	r1, r3
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c88:	4313      	orrs	r3, r2
         );
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3724      	adds	r7, #36	; 0x24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c96:	b580      	push	{r7, lr}
 8009c98:	b082      	sub	sp, #8
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff4c 	bl	8009b3c <__NVIC_SetPriorityGrouping>
}
 8009ca4:	bf00      	nop
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	607a      	str	r2, [r7, #4]
 8009cb8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009cba:	f7ff ff63 	bl	8009b84 <__NVIC_GetPriorityGrouping>
 8009cbe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	68b9      	ldr	r1, [r7, #8]
 8009cc4:	6978      	ldr	r0, [r7, #20]
 8009cc6:	f7ff ffb3 	bl	8009c30 <NVIC_EncodePriority>
 8009cca:	4602      	mov	r2, r0
 8009ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff ff82 	bl	8009bdc <__NVIC_SetPriority>
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b082      	sub	sp, #8
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff ff56 	bl	8009ba0 <__NVIC_EnableIRQ>
}
 8009cf4:	bf00      	nop
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d101      	bne.n	8009d0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e08d      	b.n	8009e2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	4b47      	ldr	r3, [pc, #284]	; (8009e34 <HAL_DMA_Init+0x138>)
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d80f      	bhi.n	8009d3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4b45      	ldr	r3, [pc, #276]	; (8009e38 <HAL_DMA_Init+0x13c>)
 8009d22:	4413      	add	r3, r2
 8009d24:	4a45      	ldr	r2, [pc, #276]	; (8009e3c <HAL_DMA_Init+0x140>)
 8009d26:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2a:	091b      	lsrs	r3, r3, #4
 8009d2c:	009a      	lsls	r2, r3, #2
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a42      	ldr	r2, [pc, #264]	; (8009e40 <HAL_DMA_Init+0x144>)
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40
 8009d38:	e00e      	b.n	8009d58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	4b40      	ldr	r3, [pc, #256]	; (8009e44 <HAL_DMA_Init+0x148>)
 8009d42:	4413      	add	r3, r2
 8009d44:	4a3d      	ldr	r2, [pc, #244]	; (8009e3c <HAL_DMA_Init+0x140>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	091b      	lsrs	r3, r3, #4
 8009d4c:	009a      	lsls	r2, r3, #2
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a3c      	ldr	r2, [pc, #240]	; (8009e48 <HAL_DMA_Init+0x14c>)
 8009d56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fa76 	bl	800a29c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db8:	d102      	bne.n	8009dc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dc8:	b2d2      	uxtb	r2, r2
 8009dca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009dd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d010      	beq.n	8009e00 <HAL_DMA_Init+0x104>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d80c      	bhi.n	8009e00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa96 	bl	800a318 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df0:	2200      	movs	r2, #0
 8009df2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009dfc:	605a      	str	r2, [r3, #4]
 8009dfe:	e008      	b.n	8009e12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	40020407 	.word	0x40020407
 8009e38:	bffdfff8 	.word	0xbffdfff8
 8009e3c:	cccccccd 	.word	0xcccccccd
 8009e40:	40020000 	.word	0x40020000
 8009e44:	bffdfbf8 	.word	0xbffdfbf8
 8009e48:	40020400 	.word	0x40020400

08009e4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d101      	bne.n	8009e6c <HAL_DMA_Start_IT+0x20>
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e066      	b.n	8009f3a <HAL_DMA_Start_IT+0xee>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d155      	bne.n	8009f2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f022 0201 	bic.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68b9      	ldr	r1, [r7, #8]
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 f9bb 	bl	800a220 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d008      	beq.n	8009ec4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f042 020e 	orr.w	r2, r2, #14
 8009ec0:	601a      	str	r2, [r3, #0]
 8009ec2:	e00f      	b.n	8009ee4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f022 0204 	bic.w	r2, r2, #4
 8009ed2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 020a 	orr.w	r2, r2, #10
 8009ee2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d007      	beq.n	8009f1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0e:	681a      	ldr	r2, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f042 0201 	orr.w	r2, r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e005      	b.n	8009f38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009f34:	2302      	movs	r3, #2
 8009f36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	d005      	beq.n	8009f66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2204      	movs	r2, #4
 8009f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
 8009f64:	e037      	b.n	8009fd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f022 020e 	bic.w	r2, r2, #14
 8009f74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0201 	bic.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f9a:	f003 021f 	and.w	r2, r3, #31
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8009fa8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009fb2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00c      	beq.n	8009fd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009fd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a006:	b2db      	uxtb	r3, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d00d      	beq.n	800a028 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2204      	movs	r2, #4
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
 800a026:	e047      	b.n	800a0b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 020e 	bic.w	r2, r2, #14
 800a036:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0201 	bic.w	r2, r2, #1
 800a046:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a052:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a056:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a05c:	f003 021f 	and.w	r2, r3, #31
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a064:	2101      	movs	r1, #1
 800a066:	fa01 f202 	lsl.w	r2, r1, r2
 800a06a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a074:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a088:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a08c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a096:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d003      	beq.n	800a0b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	4798      	blx	r3
    }
  }
  return status;
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0de:	f003 031f 	and.w	r3, r3, #31
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d026      	beq.n	800a13c <HAL_DMA_IRQHandler+0x7a>
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	f003 0304 	and.w	r3, r3, #4
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d021      	beq.n	800a13c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0320 	and.w	r3, r3, #32
 800a102:	2b00      	cmp	r3, #0
 800a104:	d107      	bne.n	800a116 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0204 	bic.w	r2, r2, #4
 800a114:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11a:	f003 021f 	and.w	r2, r3, #31
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a122:	2104      	movs	r1, #4
 800a124:	fa01 f202 	lsl.w	r2, r1, r2
 800a128:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d071      	beq.n	800a216 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a13a:	e06c      	b.n	800a216 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	2202      	movs	r2, #2
 800a146:	409a      	lsls	r2, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	4013      	ands	r3, r2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d02e      	beq.n	800a1ae <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f003 0302 	and.w	r3, r3, #2
 800a156:	2b00      	cmp	r3, #0
 800a158:	d029      	beq.n	800a1ae <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0320 	and.w	r3, r3, #32
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10b      	bne.n	800a180 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 020a 	bic.w	r2, r2, #10
 800a176:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a184:	f003 021f 	and.w	r2, r3, #31
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18c:	2102      	movs	r1, #2
 800a18e:	fa01 f202 	lsl.w	r2, r1, r2
 800a192:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d038      	beq.n	800a216 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a1ac:	e033      	b.n	800a216 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b2:	f003 031f 	and.w	r3, r3, #31
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d02a      	beq.n	800a218 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f003 0308 	and.w	r3, r3, #8
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d025      	beq.n	800a218 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 020e 	bic.w	r2, r2, #14
 800a1da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1e0:	f003 021f 	and.w	r2, r3, #31
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	fa01 f202 	lsl.w	r2, r1, r2
 800a1ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a216:	bf00      	nop
 800a218:	bf00      	nop
}
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a236:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d004      	beq.n	800a24a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a248:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24e:	f003 021f 	and.w	r2, r3, #31
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a256:	2101      	movs	r1, #1
 800a258:	fa01 f202 	lsl.w	r2, r1, r2
 800a25c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	2b10      	cmp	r3, #16
 800a26c:	d108      	bne.n	800a280 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a27e:	e007      	b.n	800a290 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	60da      	str	r2, [r3, #12]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4b16      	ldr	r3, [pc, #88]	; (800a304 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d802      	bhi.n	800a2b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a2b0:	4b15      	ldr	r3, [pc, #84]	; (800a308 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	e001      	b.n	800a2ba <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a2b6:	4b15      	ldr	r3, [pc, #84]	; (800a30c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a2b8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	3b08      	subs	r3, #8
 800a2c6:	4a12      	ldr	r2, [pc, #72]	; (800a310 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2cc:	091b      	lsrs	r3, r3, #4
 800a2ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d4:	089b      	lsrs	r3, r3, #2
 800a2d6:	009a      	lsls	r2, r3, #2
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	4413      	add	r3, r2
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a0b      	ldr	r2, [pc, #44]	; (800a314 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a2e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f003 031f 	and.w	r3, r3, #31
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	409a      	lsls	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a2f6:	bf00      	nop
 800a2f8:	371c      	adds	r7, #28
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	40020407 	.word	0x40020407
 800a308:	40020800 	.word	0x40020800
 800a30c:	40020820 	.word	0x40020820
 800a310:	cccccccd 	.word	0xcccccccd
 800a314:	40020880 	.word	0x40020880

0800a318 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a08      	ldr	r2, [pc, #32]	; (800a35c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a33a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	3b01      	subs	r3, #1
 800a340:	f003 031f 	and.w	r3, r3, #31
 800a344:	2201      	movs	r2, #1
 800a346:	409a      	lsls	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a34c:	bf00      	nop
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	1000823f 	.word	0x1000823f
 800a35c:	40020940 	.word	0x40020940

0800a360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a36e:	e15a      	b.n	800a626 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	2101      	movs	r1, #1
 800a376:	697b      	ldr	r3, [r7, #20]
 800a378:	fa01 f303 	lsl.w	r3, r1, r3
 800a37c:	4013      	ands	r3, r2
 800a37e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 814c 	beq.w	800a620 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f003 0303 	and.w	r3, r3, #3
 800a390:	2b01      	cmp	r3, #1
 800a392:	d005      	beq.n	800a3a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a39c:	2b02      	cmp	r3, #2
 800a39e:	d130      	bne.n	800a402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b0:	43db      	mvns	r3, r3
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68da      	ldr	r2, [r3, #12]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c4:	693a      	ldr	r2, [r7, #16]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	693a      	ldr	r2, [r7, #16]
 800a3ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	4013      	ands	r3, r2
 800a3e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	091b      	lsrs	r3, r3, #4
 800a3ec:	f003 0201 	and.w	r2, r3, #1
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d017      	beq.n	800a43e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	2203      	movs	r2, #3
 800a41a:	fa02 f303 	lsl.w	r3, r2, r3
 800a41e:	43db      	mvns	r3, r3
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	4013      	ands	r3, r2
 800a424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	005b      	lsls	r3, r3, #1
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	4313      	orrs	r3, r2
 800a436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f003 0303 	and.w	r3, r3, #3
 800a446:	2b02      	cmp	r3, #2
 800a448:	d123      	bne.n	800a492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	08da      	lsrs	r2, r3, #3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3208      	adds	r2, #8
 800a452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	220f      	movs	r2, #15
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	43db      	mvns	r3, r3
 800a468:	693a      	ldr	r2, [r7, #16]
 800a46a:	4013      	ands	r3, r2
 800a46c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	691a      	ldr	r2, [r3, #16]
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f003 0307 	and.w	r3, r3, #7
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	fa02 f303 	lsl.w	r3, r2, r3
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	4313      	orrs	r3, r2
 800a482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	08da      	lsrs	r2, r3, #3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3208      	adds	r2, #8
 800a48c:	6939      	ldr	r1, [r7, #16]
 800a48e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	005b      	lsls	r3, r3, #1
 800a49c:	2203      	movs	r2, #3
 800a49e:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a2:	43db      	mvns	r3, r3
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4013      	ands	r3, r2
 800a4a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f003 0203 	and.w	r2, r3, #3
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ba:	693a      	ldr	r2, [r7, #16]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f000 80a6 	beq.w	800a620 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4d4:	4b5b      	ldr	r3, [pc, #364]	; (800a644 <HAL_GPIO_Init+0x2e4>)
 800a4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4d8:	4a5a      	ldr	r2, [pc, #360]	; (800a644 <HAL_GPIO_Init+0x2e4>)
 800a4da:	f043 0301 	orr.w	r3, r3, #1
 800a4de:	6613      	str	r3, [r2, #96]	; 0x60
 800a4e0:	4b58      	ldr	r3, [pc, #352]	; (800a644 <HAL_GPIO_Init+0x2e4>)
 800a4e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	60bb      	str	r3, [r7, #8]
 800a4ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a4ec:	4a56      	ldr	r2, [pc, #344]	; (800a648 <HAL_GPIO_Init+0x2e8>)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	089b      	lsrs	r3, r3, #2
 800a4f2:	3302      	adds	r3, #2
 800a4f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	f003 0303 	and.w	r3, r3, #3
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	220f      	movs	r2, #15
 800a504:	fa02 f303 	lsl.w	r3, r2, r3
 800a508:	43db      	mvns	r3, r3
 800a50a:	693a      	ldr	r2, [r7, #16]
 800a50c:	4013      	ands	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a516:	d01f      	beq.n	800a558 <HAL_GPIO_Init+0x1f8>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a4c      	ldr	r2, [pc, #304]	; (800a64c <HAL_GPIO_Init+0x2ec>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d019      	beq.n	800a554 <HAL_GPIO_Init+0x1f4>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a4b      	ldr	r2, [pc, #300]	; (800a650 <HAL_GPIO_Init+0x2f0>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d013      	beq.n	800a550 <HAL_GPIO_Init+0x1f0>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a4a      	ldr	r2, [pc, #296]	; (800a654 <HAL_GPIO_Init+0x2f4>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00d      	beq.n	800a54c <HAL_GPIO_Init+0x1ec>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a49      	ldr	r2, [pc, #292]	; (800a658 <HAL_GPIO_Init+0x2f8>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d007      	beq.n	800a548 <HAL_GPIO_Init+0x1e8>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a48      	ldr	r2, [pc, #288]	; (800a65c <HAL_GPIO_Init+0x2fc>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d101      	bne.n	800a544 <HAL_GPIO_Init+0x1e4>
 800a540:	2305      	movs	r3, #5
 800a542:	e00a      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a544:	2306      	movs	r3, #6
 800a546:	e008      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a548:	2304      	movs	r3, #4
 800a54a:	e006      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a54c:	2303      	movs	r3, #3
 800a54e:	e004      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a550:	2302      	movs	r3, #2
 800a552:	e002      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a554:	2301      	movs	r3, #1
 800a556:	e000      	b.n	800a55a <HAL_GPIO_Init+0x1fa>
 800a558:	2300      	movs	r3, #0
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	f002 0203 	and.w	r2, r2, #3
 800a560:	0092      	lsls	r2, r2, #2
 800a562:	4093      	lsls	r3, r2
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a56a:	4937      	ldr	r1, [pc, #220]	; (800a648 <HAL_GPIO_Init+0x2e8>)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	089b      	lsrs	r3, r3, #2
 800a570:	3302      	adds	r3, #2
 800a572:	693a      	ldr	r2, [r7, #16]
 800a574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a578:	4b39      	ldr	r3, [pc, #228]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	43db      	mvns	r3, r3
 800a582:	693a      	ldr	r2, [r7, #16]
 800a584:	4013      	ands	r3, r2
 800a586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4313      	orrs	r3, r2
 800a59a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a59c:	4a30      	ldr	r2, [pc, #192]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a5a2:	4b2f      	ldr	r3, [pc, #188]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	43db      	mvns	r3, r3
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a5c6:	4a26      	ldr	r2, [pc, #152]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a5cc:	4b24      	ldr	r3, [pc, #144]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a5e8:	693a      	ldr	r2, [r7, #16]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a5f0:	4a1b      	ldr	r2, [pc, #108]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a5f6:	4b1a      	ldr	r3, [pc, #104]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	43db      	mvns	r3, r3
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	4013      	ands	r3, r2
 800a604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a612:	693a      	ldr	r2, [r7, #16]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4313      	orrs	r3, r2
 800a618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a61a:	4a11      	ldr	r2, [pc, #68]	; (800a660 <HAL_GPIO_Init+0x300>)
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	3301      	adds	r3, #1
 800a624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	f47f ae9d 	bne.w	800a370 <HAL_GPIO_Init+0x10>
  }
}
 800a636:	bf00      	nop
 800a638:	bf00      	nop
 800a63a:	371c      	adds	r7, #28
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	40021000 	.word	0x40021000
 800a648:	40010000 	.word	0x40010000
 800a64c:	48000400 	.word	0x48000400
 800a650:	48000800 	.word	0x48000800
 800a654:	48000c00 	.word	0x48000c00
 800a658:	48001000 	.word	0x48001000
 800a65c:	48001400 	.word	0x48001400
 800a660:	40010400 	.word	0x40010400

0800a664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	460b      	mov	r3, r1
 800a66e:	807b      	strh	r3, [r7, #2]
 800a670:	4613      	mov	r3, r2
 800a672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a674:	787b      	ldrb	r3, [r7, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a67a:	887a      	ldrh	r2, [r7, #2]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a680:	e002      	b.n	800a688 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a682:	887a      	ldrh	r2, [r7, #2]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	695b      	ldr	r3, [r3, #20]
 800a6a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6a6:	887a      	ldrh	r2, [r7, #2]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	041a      	lsls	r2, r3, #16
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	43d9      	mvns	r1, r3
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	400b      	ands	r3, r1
 800a6b6:	431a      	orrs	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	619a      	str	r2, [r3, #24]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a6d2:	4b08      	ldr	r3, [pc, #32]	; (800a6f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6d4:	695a      	ldr	r2, [r3, #20]
 800a6d6:	88fb      	ldrh	r3, [r7, #6]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a6de:	4a05      	ldr	r2, [pc, #20]	; (800a6f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a6e0:	88fb      	ldrh	r3, [r7, #6]
 800a6e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a6e4:	88fb      	ldrh	r3, [r7, #6]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 f806 	bl	800a6f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	40010400 	.word	0x40010400

0800a6f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	4603      	mov	r3, r0
 800a700:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a702:	bf00      	nop
 800a704:	370c      	adds	r7, #12
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e081      	b.n	800a824 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d106      	bne.n	800a73a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f7fb ffaf 	bl	8006698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2224      	movs	r2, #36	; 0x24
 800a73e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f022 0201 	bic.w	r2, r2, #1
 800a750:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a75e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a76e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d107      	bne.n	800a788 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a784:	609a      	str	r2, [r3, #8]
 800a786:	e006      	b.n	800a796 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689a      	ldr	r2, [r3, #8]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a794:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d104      	bne.n	800a7a8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	6812      	ldr	r2, [r2, #0]
 800a7b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a7b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7ba:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7ca:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691a      	ldr	r2, [r3, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	699b      	ldr	r3, [r3, #24]
 800a7dc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69d9      	ldr	r1, [r3, #28]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a1a      	ldr	r2, [r3, #32]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f042 0201 	orr.w	r2, r2, #1
 800a804:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b088      	sub	sp, #32
 800a830:	af02      	add	r7, sp, #8
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	461a      	mov	r2, r3
 800a83a:	4603      	mov	r3, r0
 800a83c:	817b      	strh	r3, [r7, #10]
 800a83e:	460b      	mov	r3, r1
 800a840:	813b      	strh	r3, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b20      	cmp	r3, #32
 800a850:	f040 80f9 	bne.w	800aa46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_I2C_Mem_Write+0x34>
 800a85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d105      	bne.n	800a86c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a866:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e0ed      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_I2C_Mem_Write+0x4e>
 800a876:	2302      	movs	r3, #2
 800a878:	e0e6      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a882:	f7fd ff21 	bl	80086c8 <HAL_GetTick>
 800a886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	2319      	movs	r3, #25
 800a88e:	2201      	movs	r2, #1
 800a890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f000 fac3 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d001      	beq.n	800a8a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e0d1      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2221      	movs	r2, #33	; 0x21
 800a8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2240      	movs	r2, #64	; 0x40
 800a8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a3a      	ldr	r2, [r7, #32]
 800a8be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8cc:	88f8      	ldrh	r0, [r7, #6]
 800a8ce:	893a      	ldrh	r2, [r7, #8]
 800a8d0:	8979      	ldrh	r1, [r7, #10]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	9301      	str	r3, [sp, #4]
 800a8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	4603      	mov	r3, r0
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f000 f9d3 	bl	800ac88 <I2C_RequestMemoryWrite>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d005      	beq.n	800a8f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e0a9      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	2bff      	cmp	r3, #255	; 0xff
 800a8fc:	d90e      	bls.n	800a91c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	22ff      	movs	r2, #255	; 0xff
 800a902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	8979      	ldrh	r1, [r7, #10]
 800a90c:	2300      	movs	r3, #0
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 fc2b 	bl	800b170 <I2C_TransferConfig>
 800a91a:	e00f      	b.n	800a93c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a920:	b29a      	uxth	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	8979      	ldrh	r1, [r7, #10]
 800a92e:	2300      	movs	r3, #0
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 fc1a 	bl	800b170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a93c:	697a      	ldr	r2, [r7, #20]
 800a93e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f000 faad 	bl	800aea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	e07b      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a954:	781a      	ldrb	r2, [r3, #0]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	1c5a      	adds	r2, r3, #1
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a978:	3b01      	subs	r3, #1
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a984:	b29b      	uxth	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d034      	beq.n	800a9f4 <HAL_I2C_Mem_Write+0x1c8>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d130      	bne.n	800a9f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	9300      	str	r3, [sp, #0]
 800a996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a998:	2200      	movs	r2, #0
 800a99a:	2180      	movs	r1, #128	; 0x80
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 fa3f 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e04d      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	2bff      	cmp	r3, #255	; 0xff
 800a9b4:	d90e      	bls.n	800a9d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	22ff      	movs	r2, #255	; 0xff
 800a9ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	8979      	ldrh	r1, [r7, #10]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 fbcf 	bl	800b170 <I2C_TransferConfig>
 800a9d2:	e00f      	b.n	800a9f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	8979      	ldrh	r1, [r7, #10]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f000 fbbe 	bl	800b170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d19e      	bne.n	800a93c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9fe:	697a      	ldr	r2, [r7, #20]
 800aa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa02:	68f8      	ldr	r0, [r7, #12]
 800aa04:	f000 fa8c 	bl	800af20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d001      	beq.n	800aa12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e01a      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2220      	movs	r2, #32
 800aa18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	6859      	ldr	r1, [r3, #4]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <HAL_I2C_Mem_Write+0x224>)
 800aa26:	400b      	ands	r3, r1
 800aa28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2220      	movs	r2, #32
 800aa2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800aa42:	2300      	movs	r3, #0
 800aa44:	e000      	b.n	800aa48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aa46:	2302      	movs	r3, #2
  }
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3718      	adds	r7, #24
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	fe00e800 	.word	0xfe00e800

0800aa54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af02      	add	r7, sp, #8
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	4608      	mov	r0, r1
 800aa5e:	4611      	mov	r1, r2
 800aa60:	461a      	mov	r2, r3
 800aa62:	4603      	mov	r3, r0
 800aa64:	817b      	strh	r3, [r7, #10]
 800aa66:	460b      	mov	r3, r1
 800aa68:	813b      	strh	r3, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	2b20      	cmp	r3, #32
 800aa78:	f040 80fd 	bne.w	800ac76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <HAL_I2C_Mem_Read+0x34>
 800aa82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e0f1      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <HAL_I2C_Mem_Read+0x4e>
 800aa9e:	2302      	movs	r3, #2
 800aaa0:	e0ea      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aaaa:	f7fd fe0d 	bl	80086c8 <HAL_GetTick>
 800aaae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	2319      	movs	r3, #25
 800aab6:	2201      	movs	r2, #1
 800aab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f9af 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	e0d5      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2222      	movs	r2, #34	; 0x22
 800aad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2240      	movs	r2, #64	; 0x40
 800aad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a3a      	ldr	r2, [r7, #32]
 800aae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aaec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aaf4:	88f8      	ldrh	r0, [r7, #6]
 800aaf6:	893a      	ldrh	r2, [r7, #8]
 800aaf8:	8979      	ldrh	r1, [r7, #10]
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4603      	mov	r3, r0
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 f913 	bl	800ad30 <I2C_RequestMemoryRead>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d005      	beq.n	800ab1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e0ad      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	2bff      	cmp	r3, #255	; 0xff
 800ab24:	d90e      	bls.n	800ab44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	22ff      	movs	r2, #255	; 0xff
 800ab2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab30:	b2da      	uxtb	r2, r3
 800ab32:	8979      	ldrh	r1, [r7, #10]
 800ab34:	4b52      	ldr	r3, [pc, #328]	; (800ac80 <HAL_I2C_Mem_Read+0x22c>)
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab3c:	68f8      	ldr	r0, [r7, #12]
 800ab3e:	f000 fb17 	bl	800b170 <I2C_TransferConfig>
 800ab42:	e00f      	b.n	800ab64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	8979      	ldrh	r1, [r7, #10]
 800ab56:	4b4a      	ldr	r3, [pc, #296]	; (800ac80 <HAL_I2C_Mem_Read+0x22c>)
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab5e:	68f8      	ldr	r0, [r7, #12]
 800ab60:	f000 fb06 	bl	800b170 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	2104      	movs	r1, #4
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f000 f956 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d001      	beq.n	800ab7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e07c      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	b2d2      	uxtb	r2, r2
 800ab8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab90:	1c5a      	adds	r2, r3, #1
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	3b01      	subs	r3, #1
 800abaa:	b29a      	uxth	r2, r3
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d034      	beq.n	800ac24 <HAL_I2C_Mem_Read+0x1d0>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d130      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2200      	movs	r2, #0
 800abca:	2180      	movs	r1, #128	; 0x80
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f927 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e04d      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2bff      	cmp	r3, #255	; 0xff
 800abe4:	d90e      	bls.n	800ac04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	22ff      	movs	r2, #255	; 0xff
 800abea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	8979      	ldrh	r1, [r7, #10]
 800abf4:	2300      	movs	r3, #0
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 fab7 	bl	800b170 <I2C_TransferConfig>
 800ac02:	e00f      	b.n	800ac24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac12:	b2da      	uxtb	r2, r3
 800ac14:	8979      	ldrh	r1, [r7, #10]
 800ac16:	2300      	movs	r3, #0
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 faa6 	bl	800b170 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d19a      	bne.n	800ab64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 f974 	bl	800af20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e01a      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2220      	movs	r2, #32
 800ac48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6859      	ldr	r1, [r3, #4]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	4b0b      	ldr	r3, [pc, #44]	; (800ac84 <HAL_I2C_Mem_Read+0x230>)
 800ac56:	400b      	ands	r3, r1
 800ac58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	e000      	b.n	800ac78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac76:	2302      	movs	r3, #2
  }
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	80002400 	.word	0x80002400
 800ac84:	fe00e800 	.word	0xfe00e800

0800ac88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	4608      	mov	r0, r1
 800ac92:	4611      	mov	r1, r2
 800ac94:	461a      	mov	r2, r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	817b      	strh	r3, [r7, #10]
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	813b      	strh	r3, [r7, #8]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aca2:	88fb      	ldrh	r3, [r7, #6]
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	8979      	ldrh	r1, [r7, #10]
 800aca8:	4b20      	ldr	r3, [pc, #128]	; (800ad2c <I2C_RequestMemoryWrite+0xa4>)
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 fa5d 	bl	800b170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acb6:	69fa      	ldr	r2, [r7, #28]
 800acb8:	69b9      	ldr	r1, [r7, #24]
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 f8f0 	bl	800aea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e02c      	b.n	800ad24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acca:	88fb      	ldrh	r3, [r7, #6]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d105      	bne.n	800acdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800acd0:	893b      	ldrh	r3, [r7, #8]
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	629a      	str	r2, [r3, #40]	; 0x28
 800acda:	e015      	b.n	800ad08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800acdc:	893b      	ldrh	r3, [r7, #8]
 800acde:	0a1b      	lsrs	r3, r3, #8
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acea:	69fa      	ldr	r2, [r7, #28]
 800acec:	69b9      	ldr	r1, [r7, #24]
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 f8d6 	bl	800aea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e012      	b.n	800ad24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800acfe:	893b      	ldrh	r3, [r7, #8]
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2180      	movs	r1, #128	; 0x80
 800ad12:	68f8      	ldr	r0, [r7, #12]
 800ad14:	f000 f884 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e000      	b.n	800ad24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	80002000 	.word	0x80002000

0800ad30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af02      	add	r7, sp, #8
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	4608      	mov	r0, r1
 800ad3a:	4611      	mov	r1, r2
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	817b      	strh	r3, [r7, #10]
 800ad42:	460b      	mov	r3, r1
 800ad44:	813b      	strh	r3, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	b2da      	uxtb	r2, r3
 800ad4e:	8979      	ldrh	r1, [r7, #10]
 800ad50:	4b20      	ldr	r3, [pc, #128]	; (800add4 <I2C_RequestMemoryRead+0xa4>)
 800ad52:	9300      	str	r3, [sp, #0]
 800ad54:	2300      	movs	r3, #0
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fa0a 	bl	800b170 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad5c:	69fa      	ldr	r2, [r7, #28]
 800ad5e:	69b9      	ldr	r1, [r7, #24]
 800ad60:	68f8      	ldr	r0, [r7, #12]
 800ad62:	f000 f89d 	bl	800aea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e02c      	b.n	800adca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d105      	bne.n	800ad82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad76:	893b      	ldrh	r3, [r7, #8]
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	629a      	str	r2, [r3, #40]	; 0x28
 800ad80:	e015      	b.n	800adae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad82:	893b      	ldrh	r3, [r7, #8]
 800ad84:	0a1b      	lsrs	r3, r3, #8
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	b2da      	uxtb	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad90:	69fa      	ldr	r2, [r7, #28]
 800ad92:	69b9      	ldr	r1, [r7, #24]
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 f883 	bl	800aea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e012      	b.n	800adca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ada4:	893b      	ldrh	r3, [r7, #8]
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	2200      	movs	r2, #0
 800adb6:	2140      	movs	r1, #64	; 0x40
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 f831 	bl	800ae20 <I2C_WaitOnFlagUntilTimeout>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	e000      	b.n	800adca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	80002000 	.word	0x80002000

0800add8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	f003 0302 	and.w	r3, r3, #2
 800adea:	2b02      	cmp	r3, #2
 800adec:	d103      	bne.n	800adf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	699b      	ldr	r3, [r3, #24]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d007      	beq.n	800ae14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	699a      	ldr	r2, [r3, #24]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0201 	orr.w	r2, r2, #1
 800ae12:	619a      	str	r2, [r3, #24]
  }
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae30:	e022      	b.n	800ae78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae38:	d01e      	beq.n	800ae78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae3a:	f7fd fc45 	bl	80086c8 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d302      	bcc.n	800ae50 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d113      	bne.n	800ae78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae54:	f043 0220 	orr.w	r2, r3, #32
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e00f      	b.n	800ae98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	699a      	ldr	r2, [r3, #24]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	4013      	ands	r3, r2
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	bf0c      	ite	eq
 800ae88:	2301      	moveq	r3, #1
 800ae8a:	2300      	movne	r3, #0
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	79fb      	ldrb	r3, [r7, #7]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d0cd      	beq.n	800ae32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aeac:	e02c      	b.n	800af08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	68b9      	ldr	r1, [r7, #8]
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f000 f870 	bl	800af98 <I2C_IsErrorOccurred>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	e02a      	b.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec8:	d01e      	beq.n	800af08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeca:	f7fd fbfd 	bl	80086c8 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d302      	bcc.n	800aee0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d113      	bne.n	800af08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee4:	f043 0220 	orr.w	r2, r3, #32
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2220      	movs	r2, #32
 800aef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
 800af06:	e007      	b.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f003 0302 	and.w	r3, r3, #2
 800af12:	2b02      	cmp	r3, #2
 800af14:	d1cb      	bne.n	800aeae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af2c:	e028      	b.n	800af80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	68b9      	ldr	r1, [r7, #8]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 f830 	bl	800af98 <I2C_IsErrorOccurred>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e026      	b.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af42:	f7fd fbc1 	bl	80086c8 <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d302      	bcc.n	800af58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d113      	bne.n	800af80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5c:	f043 0220 	orr.w	r2, r3, #32
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e007      	b.n	800af90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	f003 0320 	and.w	r3, r3, #32
 800af8a:	2b20      	cmp	r3, #32
 800af8c:	d1cf      	bne.n	800af2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08a      	sub	sp, #40	; 0x28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afa4:	2300      	movs	r3, #0
 800afa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	699b      	ldr	r3, [r3, #24]
 800afb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d075      	beq.n	800b0b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2210      	movs	r2, #16
 800afca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800afcc:	e056      	b.n	800b07c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd4:	d052      	beq.n	800b07c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800afd6:	f7fd fb77 	bl	80086c8 <HAL_GetTick>
 800afda:	4602      	mov	r2, r0
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	1ad3      	subs	r3, r2, r3
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d302      	bcc.n	800afec <I2C_IsErrorOccurred+0x54>
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d147      	bne.n	800b07c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aff6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800affe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b00e:	d12e      	bne.n	800b06e <I2C_IsErrorOccurred+0xd6>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b016:	d02a      	beq.n	800b06e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800b018:	7cfb      	ldrb	r3, [r7, #19]
 800b01a:	2b20      	cmp	r3, #32
 800b01c:	d027      	beq.n	800b06e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b02c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b02e:	f7fd fb4b 	bl	80086c8 <HAL_GetTick>
 800b032:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b034:	e01b      	b.n	800b06e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b036:	f7fd fb47 	bl	80086c8 <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	2b19      	cmp	r3, #25
 800b042:	d914      	bls.n	800b06e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b048:	f043 0220 	orr.w	r2, r3, #32
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	f003 0320 	and.w	r3, r3, #32
 800b078:	2b20      	cmp	r3, #32
 800b07a:	d1dc      	bne.n	800b036 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	f003 0320 	and.w	r3, r3, #32
 800b086:	2b20      	cmp	r3, #32
 800b088:	d003      	beq.n	800b092 <I2C_IsErrorOccurred+0xfa>
 800b08a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d09d      	beq.n	800afce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b092:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b096:	2b00      	cmp	r3, #0
 800b098:	d103      	bne.n	800b0a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	f043 0304 	orr.w	r3, r3, #4
 800b0a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00b      	beq.n	800b0da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	f043 0301 	orr.w	r3, r3, #1
 800b0c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00b      	beq.n	800b0fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	f043 0308 	orr.w	r3, r3, #8
 800b0ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b0f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b0fc:	69bb      	ldr	r3, [r7, #24]
 800b0fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00b      	beq.n	800b11e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	f043 0302 	orr.w	r3, r3, #2
 800b10c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b116:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b11e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b122:	2b00      	cmp	r3, #0
 800b124:	d01c      	beq.n	800b160 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b126:	68f8      	ldr	r0, [r7, #12]
 800b128:	f7ff fe56 	bl	800add8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6859      	ldr	r1, [r3, #4]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	4b0d      	ldr	r3, [pc, #52]	; (800b16c <I2C_IsErrorOccurred+0x1d4>)
 800b138:	400b      	ands	r3, r1
 800b13a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b140:	6a3b      	ldr	r3, [r7, #32]
 800b142:	431a      	orrs	r2, r3
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2220      	movs	r2, #32
 800b14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b160:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b164:	4618      	mov	r0, r3
 800b166:	3728      	adds	r7, #40	; 0x28
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	fe00e800 	.word	0xfe00e800

0800b170 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b170:	b480      	push	{r7}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	817b      	strh	r3, [r7, #10]
 800b17e:	4613      	mov	r3, r2
 800b180:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b182:	897b      	ldrh	r3, [r7, #10]
 800b184:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b188:	7a7b      	ldrb	r3, [r7, #9]
 800b18a:	041b      	lsls	r3, r3, #16
 800b18c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b190:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b196:	6a3b      	ldr	r3, [r7, #32]
 800b198:	4313      	orrs	r3, r2
 800b19a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b19e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685a      	ldr	r2, [r3, #4]
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	0d5b      	lsrs	r3, r3, #21
 800b1aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b1ae:	4b08      	ldr	r3, [pc, #32]	; (800b1d0 <I2C_TransferConfig+0x60>)
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	ea02 0103 	and.w	r1, r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b1c2:	bf00      	nop
 800b1c4:	371c      	adds	r7, #28
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	03ff63ff 	.word	0x03ff63ff

0800b1d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b20      	cmp	r3, #32
 800b1e8:	d138      	bne.n	800b25c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d101      	bne.n	800b1f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e032      	b.n	800b25e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2224      	movs	r2, #36	; 0x24
 800b204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f022 0201 	bic.w	r2, r2, #1
 800b216:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b226:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6819      	ldr	r1, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	430a      	orrs	r2, r1
 800b236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f042 0201 	orr.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b258:	2300      	movs	r3, #0
 800b25a:	e000      	b.n	800b25e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b25c:	2302      	movs	r3, #2
  }
}
 800b25e:	4618      	mov	r0, r3
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b26a:	b480      	push	{r7}
 800b26c:	b085      	sub	sp, #20
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
 800b272:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b27a:	b2db      	uxtb	r3, r3
 800b27c:	2b20      	cmp	r3, #32
 800b27e:	d139      	bne.n	800b2f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e033      	b.n	800b2f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2224      	movs	r2, #36	; 0x24
 800b29a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f022 0201 	bic.w	r2, r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b2bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2220      	movs	r2, #32
 800b2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e000      	b.n	800b2f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b2f4:	2302      	movs	r3, #2
  }
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
	...

0800b304 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d141      	bne.n	800b396 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b312:	4b4b      	ldr	r3, [pc, #300]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b31a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b31e:	d131      	bne.n	800b384 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b320:	4b47      	ldr	r3, [pc, #284]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b326:	4a46      	ldr	r2, [pc, #280]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b328:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b32c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b330:	4b43      	ldr	r3, [pc, #268]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b338:	4a41      	ldr	r2, [pc, #260]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b33a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b33e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b340:	4b40      	ldr	r3, [pc, #256]	; (800b444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2232      	movs	r2, #50	; 0x32
 800b346:	fb02 f303 	mul.w	r3, r2, r3
 800b34a:	4a3f      	ldr	r2, [pc, #252]	; (800b448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b34c:	fba2 2303 	umull	r2, r3, r2, r3
 800b350:	0c9b      	lsrs	r3, r3, #18
 800b352:	3301      	adds	r3, #1
 800b354:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b356:	e002      	b.n	800b35e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b35e:	4b38      	ldr	r3, [pc, #224]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b36a:	d102      	bne.n	800b372 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1f2      	bne.n	800b358 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b372:	4b33      	ldr	r3, [pc, #204]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b37a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b37e:	d158      	bne.n	800b432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e057      	b.n	800b434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b384:	4b2e      	ldr	r3, [pc, #184]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b38a:	4a2d      	ldr	r2, [pc, #180]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b38c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b394:	e04d      	b.n	800b432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b39c:	d141      	bne.n	800b422 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b39e:	4b28      	ldr	r3, [pc, #160]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3aa:	d131      	bne.n	800b410 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b3ac:	4b24      	ldr	r3, [pc, #144]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3b2:	4a23      	ldr	r2, [pc, #140]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b3bc:	4b20      	ldr	r3, [pc, #128]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b3c4:	4a1e      	ldr	r2, [pc, #120]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b3ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b3cc:	4b1d      	ldr	r3, [pc, #116]	; (800b444 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2232      	movs	r2, #50	; 0x32
 800b3d2:	fb02 f303 	mul.w	r3, r2, r3
 800b3d6:	4a1c      	ldr	r2, [pc, #112]	; (800b448 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3dc:	0c9b      	lsrs	r3, r3, #18
 800b3de:	3301      	adds	r3, #1
 800b3e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3e2:	e002      	b.n	800b3ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b3ea:	4b15      	ldr	r3, [pc, #84]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3f6:	d102      	bne.n	800b3fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1f2      	bne.n	800b3e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b3fe:	4b10      	ldr	r3, [pc, #64]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b400:	695b      	ldr	r3, [r3, #20]
 800b402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b40a:	d112      	bne.n	800b432 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e011      	b.n	800b434 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b416:	4a0a      	ldr	r2, [pc, #40]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b41c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b420:	e007      	b.n	800b432 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b422:	4b07      	ldr	r3, [pc, #28]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b42a:	4a05      	ldr	r2, [pc, #20]	; (800b440 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b42c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b430:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	40007000 	.word	0x40007000
 800b444:	20000004 	.word	0x20000004
 800b448:	431bde83 	.word	0x431bde83

0800b44c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d101      	bne.n	800b45e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e306      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0301 	and.w	r3, r3, #1
 800b466:	2b00      	cmp	r3, #0
 800b468:	d075      	beq.n	800b556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b46a:	4b97      	ldr	r3, [pc, #604]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f003 030c 	and.w	r3, r3, #12
 800b472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b474:	4b94      	ldr	r3, [pc, #592]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f003 0303 	and.w	r3, r3, #3
 800b47c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b0c      	cmp	r3, #12
 800b482:	d102      	bne.n	800b48a <HAL_RCC_OscConfig+0x3e>
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b03      	cmp	r3, #3
 800b488:	d002      	beq.n	800b490 <HAL_RCC_OscConfig+0x44>
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	2b08      	cmp	r3, #8
 800b48e:	d10b      	bne.n	800b4a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b490:	4b8d      	ldr	r3, [pc, #564]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d05b      	beq.n	800b554 <HAL_RCC_OscConfig+0x108>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d157      	bne.n	800b554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e2e1      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4b0:	d106      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x74>
 800b4b2:	4b85      	ldr	r3, [pc, #532]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a84      	ldr	r2, [pc, #528]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	e01d      	b.n	800b4fc <HAL_RCC_OscConfig+0xb0>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4c8:	d10c      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x98>
 800b4ca:	4b7f      	ldr	r3, [pc, #508]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a7e      	ldr	r2, [pc, #504]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4d4:	6013      	str	r3, [r2, #0]
 800b4d6:	4b7c      	ldr	r3, [pc, #496]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a7b      	ldr	r2, [pc, #492]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4e0:	6013      	str	r3, [r2, #0]
 800b4e2:	e00b      	b.n	800b4fc <HAL_RCC_OscConfig+0xb0>
 800b4e4:	4b78      	ldr	r3, [pc, #480]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a77      	ldr	r2, [pc, #476]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	4b75      	ldr	r3, [pc, #468]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a74      	ldr	r2, [pc, #464]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b4f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b4fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d013      	beq.n	800b52c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b504:	f7fd f8e0 	bl	80086c8 <HAL_GetTick>
 800b508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b50a:	e008      	b.n	800b51e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b50c:	f7fd f8dc 	bl	80086c8 <HAL_GetTick>
 800b510:	4602      	mov	r2, r0
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	2b64      	cmp	r3, #100	; 0x64
 800b518:	d901      	bls.n	800b51e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e2a6      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b51e:	4b6a      	ldr	r3, [pc, #424]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0f0      	beq.n	800b50c <HAL_RCC_OscConfig+0xc0>
 800b52a:	e014      	b.n	800b556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b52c:	f7fd f8cc 	bl	80086c8 <HAL_GetTick>
 800b530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b532:	e008      	b.n	800b546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b534:	f7fd f8c8 	bl	80086c8 <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b64      	cmp	r3, #100	; 0x64
 800b540:	d901      	bls.n	800b546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e292      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b546:	4b60      	ldr	r3, [pc, #384]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1f0      	bne.n	800b534 <HAL_RCC_OscConfig+0xe8>
 800b552:	e000      	b.n	800b556 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d075      	beq.n	800b64e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b562:	4b59      	ldr	r3, [pc, #356]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f003 030c 	and.w	r3, r3, #12
 800b56a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b56c:	4b56      	ldr	r3, [pc, #344]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	f003 0303 	and.w	r3, r3, #3
 800b574:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	2b0c      	cmp	r3, #12
 800b57a:	d102      	bne.n	800b582 <HAL_RCC_OscConfig+0x136>
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d002      	beq.n	800b588 <HAL_RCC_OscConfig+0x13c>
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d11f      	bne.n	800b5c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b588:	4b4f      	ldr	r3, [pc, #316]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b590:	2b00      	cmp	r3, #0
 800b592:	d005      	beq.n	800b5a0 <HAL_RCC_OscConfig+0x154>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e265      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5a0:	4b49      	ldr	r3, [pc, #292]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	061b      	lsls	r3, r3, #24
 800b5ae:	4946      	ldr	r1, [pc, #280]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b5b4:	4b45      	ldr	r3, [pc, #276]	; (800b6cc <HAL_RCC_OscConfig+0x280>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fc fc01 	bl	8007dc0 <HAL_InitTick>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d043      	beq.n	800b64c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e251      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d023      	beq.n	800b618 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5d0:	4b3d      	ldr	r3, [pc, #244]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a3c      	ldr	r2, [pc, #240]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b5d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5dc:	f7fd f874 	bl	80086c8 <HAL_GetTick>
 800b5e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5e4:	f7fd f870 	bl	80086c8 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e23a      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b5f6:	4b34      	ldr	r3, [pc, #208]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0f0      	beq.n	800b5e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b602:	4b31      	ldr	r3, [pc, #196]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	061b      	lsls	r3, r3, #24
 800b610:	492d      	ldr	r1, [pc, #180]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b612:	4313      	orrs	r3, r2
 800b614:	604b      	str	r3, [r1, #4]
 800b616:	e01a      	b.n	800b64e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b618:	4b2b      	ldr	r3, [pc, #172]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a2a      	ldr	r2, [pc, #168]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b61e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b624:	f7fd f850 	bl	80086c8 <HAL_GetTick>
 800b628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b62a:	e008      	b.n	800b63e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b62c:	f7fd f84c 	bl	80086c8 <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	2b02      	cmp	r3, #2
 800b638:	d901      	bls.n	800b63e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e216      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b63e:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1f0      	bne.n	800b62c <HAL_RCC_OscConfig+0x1e0>
 800b64a:	e000      	b.n	800b64e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b64c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 0308 	and.w	r3, r3, #8
 800b656:	2b00      	cmp	r3, #0
 800b658:	d041      	beq.n	800b6de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	695b      	ldr	r3, [r3, #20]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d01c      	beq.n	800b69c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b662:	4b19      	ldr	r3, [pc, #100]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b668:	4a17      	ldr	r2, [pc, #92]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b66a:	f043 0301 	orr.w	r3, r3, #1
 800b66e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b672:	f7fd f829 	bl	80086c8 <HAL_GetTick>
 800b676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b678:	e008      	b.n	800b68c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b67a:	f7fd f825 	bl	80086c8 <HAL_GetTick>
 800b67e:	4602      	mov	r2, r0
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	2b02      	cmp	r3, #2
 800b686:	d901      	bls.n	800b68c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b688:	2303      	movs	r3, #3
 800b68a:	e1ef      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b68c:	4b0e      	ldr	r3, [pc, #56]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b68e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d0ef      	beq.n	800b67a <HAL_RCC_OscConfig+0x22e>
 800b69a:	e020      	b.n	800b6de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b69c:	4b0a      	ldr	r3, [pc, #40]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b69e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6a2:	4a09      	ldr	r2, [pc, #36]	; (800b6c8 <HAL_RCC_OscConfig+0x27c>)
 800b6a4:	f023 0301 	bic.w	r3, r3, #1
 800b6a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ac:	f7fd f80c 	bl	80086c8 <HAL_GetTick>
 800b6b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6b2:	e00d      	b.n	800b6d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6b4:	f7fd f808 	bl	80086c8 <HAL_GetTick>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d906      	bls.n	800b6d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b6c2:	2303      	movs	r3, #3
 800b6c4:	e1d2      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
 800b6c6:	bf00      	nop
 800b6c8:	40021000 	.word	0x40021000
 800b6cc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b6d0:	4b8c      	ldr	r3, [pc, #560]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b6d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1ea      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f003 0304 	and.w	r3, r3, #4
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f000 80a6 	beq.w	800b838 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b6f0:	4b84      	ldr	r3, [pc, #528]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <HAL_RCC_OscConfig+0x2b4>
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e000      	b.n	800b702 <HAL_RCC_OscConfig+0x2b6>
 800b700:	2300      	movs	r3, #0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00d      	beq.n	800b722 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b706:	4b7f      	ldr	r3, [pc, #508]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b70a:	4a7e      	ldr	r2, [pc, #504]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b70c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b710:	6593      	str	r3, [r2, #88]	; 0x58
 800b712:	4b7c      	ldr	r3, [pc, #496]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b71e:	2301      	movs	r3, #1
 800b720:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b722:	4b79      	ldr	r3, [pc, #484]	; (800b908 <HAL_RCC_OscConfig+0x4bc>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d118      	bne.n	800b760 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b72e:	4b76      	ldr	r3, [pc, #472]	; (800b908 <HAL_RCC_OscConfig+0x4bc>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a75      	ldr	r2, [pc, #468]	; (800b908 <HAL_RCC_OscConfig+0x4bc>)
 800b734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b73a:	f7fc ffc5 	bl	80086c8 <HAL_GetTick>
 800b73e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b740:	e008      	b.n	800b754 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b742:	f7fc ffc1 	bl	80086c8 <HAL_GetTick>
 800b746:	4602      	mov	r2, r0
 800b748:	693b      	ldr	r3, [r7, #16]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d901      	bls.n	800b754 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e18b      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b754:	4b6c      	ldr	r3, [pc, #432]	; (800b908 <HAL_RCC_OscConfig+0x4bc>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0f0      	beq.n	800b742 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d108      	bne.n	800b77a <HAL_RCC_OscConfig+0x32e>
 800b768:	4b66      	ldr	r3, [pc, #408]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b76e:	4a65      	ldr	r2, [pc, #404]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b770:	f043 0301 	orr.w	r3, r3, #1
 800b774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b778:	e024      	b.n	800b7c4 <HAL_RCC_OscConfig+0x378>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	2b05      	cmp	r3, #5
 800b780:	d110      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x358>
 800b782:	4b60      	ldr	r3, [pc, #384]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b788:	4a5e      	ldr	r2, [pc, #376]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b78a:	f043 0304 	orr.w	r3, r3, #4
 800b78e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b792:	4b5c      	ldr	r3, [pc, #368]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b798:	4a5a      	ldr	r2, [pc, #360]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b79a:	f043 0301 	orr.w	r3, r3, #1
 800b79e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7a2:	e00f      	b.n	800b7c4 <HAL_RCC_OscConfig+0x378>
 800b7a4:	4b57      	ldr	r3, [pc, #348]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7aa:	4a56      	ldr	r2, [pc, #344]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b7ac:	f023 0301 	bic.w	r3, r3, #1
 800b7b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b7b4:	4b53      	ldr	r3, [pc, #332]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b7b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7ba:	4a52      	ldr	r2, [pc, #328]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b7bc:	f023 0304 	bic.w	r3, r3, #4
 800b7c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d016      	beq.n	800b7fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7cc:	f7fc ff7c 	bl	80086c8 <HAL_GetTick>
 800b7d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7d2:	e00a      	b.n	800b7ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7d4:	f7fc ff78 	bl	80086c8 <HAL_GetTick>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	1ad3      	subs	r3, r2, r3
 800b7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e140      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b7ea:	4b46      	ldr	r3, [pc, #280]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b7ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7f0:	f003 0302 	and.w	r3, r3, #2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d0ed      	beq.n	800b7d4 <HAL_RCC_OscConfig+0x388>
 800b7f8:	e015      	b.n	800b826 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7fa:	f7fc ff65 	bl	80086c8 <HAL_GetTick>
 800b7fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b800:	e00a      	b.n	800b818 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b802:	f7fc ff61 	bl	80086c8 <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b810:	4293      	cmp	r3, r2
 800b812:	d901      	bls.n	800b818 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b814:	2303      	movs	r3, #3
 800b816:	e129      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b818:	4b3a      	ldr	r3, [pc, #232]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b81a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1ed      	bne.n	800b802 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b826:	7ffb      	ldrb	r3, [r7, #31]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d105      	bne.n	800b838 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b82c:	4b35      	ldr	r3, [pc, #212]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b82e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b830:	4a34      	ldr	r2, [pc, #208]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b836:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0320 	and.w	r3, r3, #32
 800b840:	2b00      	cmp	r3, #0
 800b842:	d03c      	beq.n	800b8be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01c      	beq.n	800b886 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b84c:	4b2d      	ldr	r3, [pc, #180]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b84e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b852:	4a2c      	ldr	r2, [pc, #176]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b854:	f043 0301 	orr.w	r3, r3, #1
 800b858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b85c:	f7fc ff34 	bl	80086c8 <HAL_GetTick>
 800b860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b862:	e008      	b.n	800b876 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b864:	f7fc ff30 	bl	80086c8 <HAL_GetTick>
 800b868:	4602      	mov	r2, r0
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	2b02      	cmp	r3, #2
 800b870:	d901      	bls.n	800b876 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b872:	2303      	movs	r3, #3
 800b874:	e0fa      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b876:	4b23      	ldr	r3, [pc, #140]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b87c:	f003 0302 	and.w	r3, r3, #2
 800b880:	2b00      	cmp	r3, #0
 800b882:	d0ef      	beq.n	800b864 <HAL_RCC_OscConfig+0x418>
 800b884:	e01b      	b.n	800b8be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b886:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b88c:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b88e:	f023 0301 	bic.w	r3, r3, #1
 800b892:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b896:	f7fc ff17 	bl	80086c8 <HAL_GetTick>
 800b89a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b89c:	e008      	b.n	800b8b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b89e:	f7fc ff13 	bl	80086c8 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	2b02      	cmp	r3, #2
 800b8aa:	d901      	bls.n	800b8b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e0dd      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b8b0:	4b14      	ldr	r3, [pc, #80]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b8b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d1ef      	bne.n	800b89e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	69db      	ldr	r3, [r3, #28]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80d1 	beq.w	800ba6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b8c8:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f003 030c 	and.w	r3, r3, #12
 800b8d0:	2b0c      	cmp	r3, #12
 800b8d2:	f000 808b 	beq.w	800b9ec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	69db      	ldr	r3, [r3, #28]
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d15e      	bne.n	800b99c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8de:	4b09      	ldr	r3, [pc, #36]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a08      	ldr	r2, [pc, #32]	; (800b904 <HAL_RCC_OscConfig+0x4b8>)
 800b8e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ea:	f7fc feed 	bl	80086c8 <HAL_GetTick>
 800b8ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8f0:	e00c      	b.n	800b90c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8f2:	f7fc fee9 	bl	80086c8 <HAL_GetTick>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	1ad3      	subs	r3, r2, r3
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	d905      	bls.n	800b90c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b900:	2303      	movs	r3, #3
 800b902:	e0b3      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
 800b904:	40021000 	.word	0x40021000
 800b908:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b90c:	4b59      	ldr	r3, [pc, #356]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d1ec      	bne.n	800b8f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b918:	4b56      	ldr	r3, [pc, #344]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b91a:	68da      	ldr	r2, [r3, #12]
 800b91c:	4b56      	ldr	r3, [pc, #344]	; (800ba78 <HAL_RCC_OscConfig+0x62c>)
 800b91e:	4013      	ands	r3, r2
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	6a11      	ldr	r1, [r2, #32]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b928:	3a01      	subs	r2, #1
 800b92a:	0112      	lsls	r2, r2, #4
 800b92c:	4311      	orrs	r1, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b932:	0212      	lsls	r2, r2, #8
 800b934:	4311      	orrs	r1, r2
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b93a:	0852      	lsrs	r2, r2, #1
 800b93c:	3a01      	subs	r2, #1
 800b93e:	0552      	lsls	r2, r2, #21
 800b940:	4311      	orrs	r1, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b946:	0852      	lsrs	r2, r2, #1
 800b948:	3a01      	subs	r2, #1
 800b94a:	0652      	lsls	r2, r2, #25
 800b94c:	4311      	orrs	r1, r2
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b952:	06d2      	lsls	r2, r2, #27
 800b954:	430a      	orrs	r2, r1
 800b956:	4947      	ldr	r1, [pc, #284]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b95c:	4b45      	ldr	r3, [pc, #276]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a44      	ldr	r2, [pc, #272]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b966:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b968:	4b42      	ldr	r3, [pc, #264]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	4a41      	ldr	r2, [pc, #260]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b96e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b972:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b974:	f7fc fea8 	bl	80086c8 <HAL_GetTick>
 800b978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b97a:	e008      	b.n	800b98e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b97c:	f7fc fea4 	bl	80086c8 <HAL_GetTick>
 800b980:	4602      	mov	r2, r0
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	2b02      	cmp	r3, #2
 800b988:	d901      	bls.n	800b98e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e06e      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b98e:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0f0      	beq.n	800b97c <HAL_RCC_OscConfig+0x530>
 800b99a:	e066      	b.n	800ba6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b99c:	4b35      	ldr	r3, [pc, #212]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a34      	ldr	r2, [pc, #208]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b9a6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b9a8:	4b32      	ldr	r3, [pc, #200]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	4a31      	ldr	r2, [pc, #196]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9ae:	f023 0303 	bic.w	r3, r3, #3
 800b9b2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b9b4:	4b2f      	ldr	r3, [pc, #188]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	4a2e      	ldr	r2, [pc, #184]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9ba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b9be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c4:	f7fc fe80 	bl	80086c8 <HAL_GetTick>
 800b9c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9ca:	e008      	b.n	800b9de <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9cc:	f7fc fe7c 	bl	80086c8 <HAL_GetTick>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	1ad3      	subs	r3, r2, r3
 800b9d6:	2b02      	cmp	r3, #2
 800b9d8:	d901      	bls.n	800b9de <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e046      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9de:	4b25      	ldr	r3, [pc, #148]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1f0      	bne.n	800b9cc <HAL_RCC_OscConfig+0x580>
 800b9ea:	e03e      	b.n	800ba6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69db      	ldr	r3, [r3, #28]
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d101      	bne.n	800b9f8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e039      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b9f8:	4b1e      	ldr	r3, [pc, #120]	; (800ba74 <HAL_RCC_OscConfig+0x628>)
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	f003 0203 	and.w	r2, r3, #3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d12c      	bne.n	800ba66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba16:	3b01      	subs	r3, #1
 800ba18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d123      	bne.n	800ba66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d11b      	bne.n	800ba66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d113      	bne.n	800ba66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	085b      	lsrs	r3, r3, #1
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d109      	bne.n	800ba66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d001      	beq.n	800ba6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e000      	b.n	800ba6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3720      	adds	r7, #32
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	40021000 	.word	0x40021000
 800ba78:	019f800c 	.word	0x019f800c

0800ba7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b086      	sub	sp, #24
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ba86:	2300      	movs	r3, #0
 800ba88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e11e      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba94:	4b91      	ldr	r3, [pc, #580]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d910      	bls.n	800bac4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800baa2:	4b8e      	ldr	r3, [pc, #568]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f023 020f 	bic.w	r2, r3, #15
 800baaa:	498c      	ldr	r1, [pc, #560]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	4313      	orrs	r3, r2
 800bab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bab2:	4b8a      	ldr	r3, [pc, #552]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	683a      	ldr	r2, [r7, #0]
 800babc:	429a      	cmp	r2, r3
 800babe:	d001      	beq.n	800bac4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e106      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d073      	beq.n	800bbb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	d129      	bne.n	800bb2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bad8:	4b81      	ldr	r3, [pc, #516]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e0f4      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bae8:	f000 f9d0 	bl	800be8c <RCC_GetSysClockFreqFromPLLSource>
 800baec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	4a7c      	ldr	r2, [pc, #496]	; (800bce4 <HAL_RCC_ClockConfig+0x268>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d93f      	bls.n	800bb76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800baf6:	4b7a      	ldr	r3, [pc, #488]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d009      	beq.n	800bb16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d033      	beq.n	800bb76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d12f      	bne.n	800bb76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb16:	4b72      	ldr	r3, [pc, #456]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb1e:	4a70      	ldr	r2, [pc, #448]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bb26:	2380      	movs	r3, #128	; 0x80
 800bb28:	617b      	str	r3, [r7, #20]
 800bb2a:	e024      	b.n	800bb76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d107      	bne.n	800bb44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bb34:	4b6a      	ldr	r3, [pc, #424]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d109      	bne.n	800bb54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	e0c6      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb44:	4b66      	ldr	r3, [pc, #408]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e0be      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bb54:	f000 f8ce 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800bb58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	4a61      	ldr	r2, [pc, #388]	; (800bce4 <HAL_RCC_ClockConfig+0x268>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d909      	bls.n	800bb76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bb62:	4b5f      	ldr	r3, [pc, #380]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb6a:	4a5d      	ldr	r2, [pc, #372]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bb72:	2380      	movs	r3, #128	; 0x80
 800bb74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bb76:	4b5a      	ldr	r3, [pc, #360]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f023 0203 	bic.w	r2, r3, #3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	4957      	ldr	r1, [pc, #348]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bb84:	4313      	orrs	r3, r2
 800bb86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb88:	f7fc fd9e 	bl	80086c8 <HAL_GetTick>
 800bb8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb8e:	e00a      	b.n	800bba6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb90:	f7fc fd9a 	bl	80086c8 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d901      	bls.n	800bba6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e095      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bba6:	4b4e      	ldr	r3, [pc, #312]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	f003 020c 	and.w	r2, r3, #12
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d1eb      	bne.n	800bb90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 0302 	and.w	r3, r3, #2
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d023      	beq.n	800bc0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0304 	and.w	r3, r3, #4
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d005      	beq.n	800bbdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bbd0:	4b43      	ldr	r3, [pc, #268]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	4a42      	ldr	r2, [pc, #264]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bbd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bbda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0308 	and.w	r3, r3, #8
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d007      	beq.n	800bbf8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bbe8:	4b3d      	ldr	r3, [pc, #244]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bbf0:	4a3b      	ldr	r2, [pc, #236]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bbf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bbf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bbf8:	4b39      	ldr	r3, [pc, #228]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	689b      	ldr	r3, [r3, #8]
 800bc04:	4936      	ldr	r1, [pc, #216]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc06:	4313      	orrs	r3, r2
 800bc08:	608b      	str	r3, [r1, #8]
 800bc0a:	e008      	b.n	800bc1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2b80      	cmp	r3, #128	; 0x80
 800bc10:	d105      	bne.n	800bc1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bc12:	4b33      	ldr	r3, [pc, #204]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	4a32      	ldr	r2, [pc, #200]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bc1e:	4b2f      	ldr	r3, [pc, #188]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f003 030f 	and.w	r3, r3, #15
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d21d      	bcs.n	800bc68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc2c:	4b2b      	ldr	r3, [pc, #172]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f023 020f 	bic.w	r2, r3, #15
 800bc34:	4929      	ldr	r1, [pc, #164]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bc3c:	f7fc fd44 	bl	80086c8 <HAL_GetTick>
 800bc40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc42:	e00a      	b.n	800bc5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc44:	f7fc fd40 	bl	80086c8 <HAL_GetTick>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e03b      	b.n	800bcd2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc5a:	4b20      	ldr	r3, [pc, #128]	; (800bcdc <HAL_RCC_ClockConfig+0x260>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f003 030f 	and.w	r3, r3, #15
 800bc62:	683a      	ldr	r2, [r7, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d1ed      	bne.n	800bc44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d008      	beq.n	800bc86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bc74:	4b1a      	ldr	r3, [pc, #104]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	4917      	ldr	r1, [pc, #92]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc82:	4313      	orrs	r3, r2
 800bc84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0308 	and.w	r3, r3, #8
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bc92:	4b13      	ldr	r3, [pc, #76]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	490f      	ldr	r1, [pc, #60]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bca2:	4313      	orrs	r3, r2
 800bca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bca6:	f000 f825 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	4b0c      	ldr	r3, [pc, #48]	; (800bce0 <HAL_RCC_ClockConfig+0x264>)
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	091b      	lsrs	r3, r3, #4
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	490c      	ldr	r1, [pc, #48]	; (800bce8 <HAL_RCC_ClockConfig+0x26c>)
 800bcb8:	5ccb      	ldrb	r3, [r1, r3]
 800bcba:	f003 031f 	and.w	r3, r3, #31
 800bcbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bcc2:	4a0a      	ldr	r2, [pc, #40]	; (800bcec <HAL_RCC_ClockConfig+0x270>)
 800bcc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bcc6:	4b0a      	ldr	r3, [pc, #40]	; (800bcf0 <HAL_RCC_ClockConfig+0x274>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fc f878 	bl	8007dc0 <HAL_InitTick>
 800bcd0:	4603      	mov	r3, r0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	40022000 	.word	0x40022000
 800bce0:	40021000 	.word	0x40021000
 800bce4:	04c4b400 	.word	0x04c4b400
 800bce8:	080131e8 	.word	0x080131e8
 800bcec:	20000004 	.word	0x20000004
 800bcf0:	20000008 	.word	0x20000008

0800bcf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bcfa:	4b2c      	ldr	r3, [pc, #176]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f003 030c 	and.w	r3, r3, #12
 800bd02:	2b04      	cmp	r3, #4
 800bd04:	d102      	bne.n	800bd0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bd06:	4b2a      	ldr	r3, [pc, #168]	; (800bdb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd08:	613b      	str	r3, [r7, #16]
 800bd0a:	e047      	b.n	800bd9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bd0c:	4b27      	ldr	r3, [pc, #156]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	f003 030c 	and.w	r3, r3, #12
 800bd14:	2b08      	cmp	r3, #8
 800bd16:	d102      	bne.n	800bd1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bd18:	4b26      	ldr	r3, [pc, #152]	; (800bdb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd1a:	613b      	str	r3, [r7, #16]
 800bd1c:	e03e      	b.n	800bd9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bd1e:	4b23      	ldr	r3, [pc, #140]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 030c 	and.w	r3, r3, #12
 800bd26:	2b0c      	cmp	r3, #12
 800bd28:	d136      	bne.n	800bd98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bd2a:	4b20      	ldr	r3, [pc, #128]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	f003 0303 	and.w	r3, r3, #3
 800bd32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bd34:	4b1d      	ldr	r3, [pc, #116]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	091b      	lsrs	r3, r3, #4
 800bd3a:	f003 030f 	and.w	r3, r3, #15
 800bd3e:	3301      	adds	r3, #1
 800bd40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b03      	cmp	r3, #3
 800bd46:	d10c      	bne.n	800bd62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd48:	4a1a      	ldr	r2, [pc, #104]	; (800bdb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd50:	4a16      	ldr	r2, [pc, #88]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd52:	68d2      	ldr	r2, [r2, #12]
 800bd54:	0a12      	lsrs	r2, r2, #8
 800bd56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd5a:	fb02 f303 	mul.w	r3, r2, r3
 800bd5e:	617b      	str	r3, [r7, #20]
      break;
 800bd60:	e00c      	b.n	800bd7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd62:	4a13      	ldr	r2, [pc, #76]	; (800bdb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd6a:	4a10      	ldr	r2, [pc, #64]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd6c:	68d2      	ldr	r2, [r2, #12]
 800bd6e:	0a12      	lsrs	r2, r2, #8
 800bd70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd74:	fb02 f303 	mul.w	r3, r2, r3
 800bd78:	617b      	str	r3, [r7, #20]
      break;
 800bd7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd7c:	4b0b      	ldr	r3, [pc, #44]	; (800bdac <HAL_RCC_GetSysClockFreq+0xb8>)
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	0e5b      	lsrs	r3, r3, #25
 800bd82:	f003 0303 	and.w	r3, r3, #3
 800bd86:	3301      	adds	r3, #1
 800bd88:	005b      	lsls	r3, r3, #1
 800bd8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bd8c:	697a      	ldr	r2, [r7, #20]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd94:	613b      	str	r3, [r7, #16]
 800bd96:	e001      	b.n	800bd9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bd9c:	693b      	ldr	r3, [r7, #16]
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40021000 	.word	0x40021000
 800bdb0:	00f42400 	.word	0x00f42400
 800bdb4:	007a1200 	.word	0x007a1200

0800bdb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bdbc:	4b03      	ldr	r3, [pc, #12]	; (800bdcc <HAL_RCC_GetHCLKFreq+0x14>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	20000004 	.word	0x20000004

0800bdd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bdd4:	f7ff fff0 	bl	800bdb8 <HAL_RCC_GetHCLKFreq>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	4b06      	ldr	r3, [pc, #24]	; (800bdf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	0a1b      	lsrs	r3, r3, #8
 800bde0:	f003 0307 	and.w	r3, r3, #7
 800bde4:	4904      	ldr	r1, [pc, #16]	; (800bdf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bde6:	5ccb      	ldrb	r3, [r1, r3]
 800bde8:	f003 031f 	and.w	r3, r3, #31
 800bdec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	40021000 	.word	0x40021000
 800bdf8:	080131f8 	.word	0x080131f8

0800bdfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bdfc:	b580      	push	{r7, lr}
 800bdfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800be00:	f7ff ffda 	bl	800bdb8 <HAL_RCC_GetHCLKFreq>
 800be04:	4602      	mov	r2, r0
 800be06:	4b06      	ldr	r3, [pc, #24]	; (800be20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	0adb      	lsrs	r3, r3, #11
 800be0c:	f003 0307 	and.w	r3, r3, #7
 800be10:	4904      	ldr	r1, [pc, #16]	; (800be24 <HAL_RCC_GetPCLK2Freq+0x28>)
 800be12:	5ccb      	ldrb	r3, [r1, r3]
 800be14:	f003 031f 	and.w	r3, r3, #31
 800be18:	fa22 f303 	lsr.w	r3, r2, r3
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	40021000 	.word	0x40021000
 800be24:	080131f8 	.word	0x080131f8

0800be28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	220f      	movs	r2, #15
 800be36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800be38:	4b12      	ldr	r3, [pc, #72]	; (800be84 <HAL_RCC_GetClockConfig+0x5c>)
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f003 0203 	and.w	r2, r3, #3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800be44:	4b0f      	ldr	r3, [pc, #60]	; (800be84 <HAL_RCC_GetClockConfig+0x5c>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800be50:	4b0c      	ldr	r3, [pc, #48]	; (800be84 <HAL_RCC_GetClockConfig+0x5c>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800be5c:	4b09      	ldr	r3, [pc, #36]	; (800be84 <HAL_RCC_GetClockConfig+0x5c>)
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	08db      	lsrs	r3, r3, #3
 800be62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800be6a:	4b07      	ldr	r3, [pc, #28]	; (800be88 <HAL_RCC_GetClockConfig+0x60>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 020f 	and.w	r2, r3, #15
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	601a      	str	r2, [r3, #0]
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	40021000 	.word	0x40021000
 800be88:	40022000 	.word	0x40022000

0800be8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b087      	sub	sp, #28
 800be90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800be92:	4b1e      	ldr	r3, [pc, #120]	; (800bf0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f003 0303 	and.w	r3, r3, #3
 800be9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800be9c:	4b1b      	ldr	r3, [pc, #108]	; (800bf0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	091b      	lsrs	r3, r3, #4
 800bea2:	f003 030f 	and.w	r3, r3, #15
 800bea6:	3301      	adds	r3, #1
 800bea8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b03      	cmp	r3, #3
 800beae:	d10c      	bne.n	800beca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800beb0:	4a17      	ldr	r2, [pc, #92]	; (800bf10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb8:	4a14      	ldr	r2, [pc, #80]	; (800bf0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800beba:	68d2      	ldr	r2, [r2, #12]
 800bebc:	0a12      	lsrs	r2, r2, #8
 800bebe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bec2:	fb02 f303 	mul.w	r3, r2, r3
 800bec6:	617b      	str	r3, [r7, #20]
    break;
 800bec8:	e00c      	b.n	800bee4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800beca:	4a12      	ldr	r2, [pc, #72]	; (800bf14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	fbb2 f3f3 	udiv	r3, r2, r3
 800bed2:	4a0e      	ldr	r2, [pc, #56]	; (800bf0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bed4:	68d2      	ldr	r2, [r2, #12]
 800bed6:	0a12      	lsrs	r2, r2, #8
 800bed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bedc:	fb02 f303 	mul.w	r3, r2, r3
 800bee0:	617b      	str	r3, [r7, #20]
    break;
 800bee2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bee4:	4b09      	ldr	r3, [pc, #36]	; (800bf0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	0e5b      	lsrs	r3, r3, #25
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	3301      	adds	r3, #1
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	fbb2 f3f3 	udiv	r3, r2, r3
 800befc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800befe:	687b      	ldr	r3, [r7, #4]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	371c      	adds	r7, #28
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	40021000 	.word	0x40021000
 800bf10:	007a1200 	.word	0x007a1200
 800bf14:	00f42400 	.word	0x00f42400

0800bf18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bf20:	2300      	movs	r3, #0
 800bf22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bf24:	2300      	movs	r3, #0
 800bf26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 8098 	beq.w	800c066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bf36:	2300      	movs	r3, #0
 800bf38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bf3a:	4b43      	ldr	r3, [pc, #268]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d10d      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bf46:	4b40      	ldr	r3, [pc, #256]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf4a:	4a3f      	ldr	r2, [pc, #252]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf50:	6593      	str	r3, [r2, #88]	; 0x58
 800bf52:	4b3d      	ldr	r3, [pc, #244]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf5a:	60bb      	str	r3, [r7, #8]
 800bf5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bf62:	4b3a      	ldr	r3, [pc, #232]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a39      	ldr	r2, [pc, #228]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bf68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bf6e:	f7fc fbab 	bl	80086c8 <HAL_GetTick>
 800bf72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf74:	e009      	b.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf76:	f7fc fba7 	bl	80086c8 <HAL_GetTick>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	2b02      	cmp	r3, #2
 800bf82:	d902      	bls.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bf84:	2303      	movs	r3, #3
 800bf86:	74fb      	strb	r3, [r7, #19]
        break;
 800bf88:	e005      	b.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bf8a:	4b30      	ldr	r3, [pc, #192]	; (800c04c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d0ef      	beq.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bf96:	7cfb      	ldrb	r3, [r7, #19]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d159      	bne.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bf9c:	4b2a      	ldr	r3, [pc, #168]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bf9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfa6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d01e      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d019      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800bfb8:	4b23      	ldr	r3, [pc, #140]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bfc4:	4b20      	ldr	r3, [pc, #128]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfca:	4a1f      	ldr	r2, [pc, #124]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bfd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bfd4:	4b1c      	ldr	r3, [pc, #112]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfda:	4a1b      	ldr	r2, [pc, #108]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bfe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800bfe4:	4a18      	ldr	r2, [pc, #96]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f003 0301 	and.w	r3, r3, #1
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d016      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff6:	f7fc fb67 	bl	80086c8 <HAL_GetTick>
 800bffa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bffc:	e00b      	b.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bffe:	f7fc fb63 	bl	80086c8 <HAL_GetTick>
 800c002:	4602      	mov	r2, r0
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	f241 3288 	movw	r2, #5000	; 0x1388
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d902      	bls.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c010:	2303      	movs	r3, #3
 800c012:	74fb      	strb	r3, [r7, #19]
            break;
 800c014:	e006      	b.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d0ec      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c024:	7cfb      	ldrb	r3, [r7, #19]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10b      	bne.n	800c042 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c02a:	4b07      	ldr	r3, [pc, #28]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c030:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c038:	4903      	ldr	r1, [pc, #12]	; (800c048 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c040:	e008      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c042:	7cfb      	ldrb	r3, [r7, #19]
 800c044:	74bb      	strb	r3, [r7, #18]
 800c046:	e005      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c048:	40021000 	.word	0x40021000
 800c04c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c050:	7cfb      	ldrb	r3, [r7, #19]
 800c052:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c054:	7c7b      	ldrb	r3, [r7, #17]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d105      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c05a:	4ba7      	ldr	r3, [pc, #668]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c05c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05e:	4aa6      	ldr	r2, [pc, #664]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c064:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c072:	4ba1      	ldr	r3, [pc, #644]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c078:	f023 0203 	bic.w	r2, r3, #3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	499d      	ldr	r1, [pc, #628]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c082:	4313      	orrs	r3, r2
 800c084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0302 	and.w	r3, r3, #2
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c094:	4b98      	ldr	r3, [pc, #608]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09a:	f023 020c 	bic.w	r2, r3, #12
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	4995      	ldr	r1, [pc, #596]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f003 0304 	and.w	r3, r3, #4
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c0b6:	4b90      	ldr	r3, [pc, #576]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	498c      	ldr	r1, [pc, #560]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0308 	and.w	r3, r3, #8
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c0d8:	4b87      	ldr	r3, [pc, #540]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	4984      	ldr	r1, [pc, #528]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0310 	and.w	r3, r3, #16
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c0fa:	4b7f      	ldr	r3, [pc, #508]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c0fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	695b      	ldr	r3, [r3, #20]
 800c108:	497b      	ldr	r1, [pc, #492]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0320 	and.w	r3, r3, #32
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00a      	beq.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c11c:	4b76      	ldr	r3, [pc, #472]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c122:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	4973      	ldr	r1, [pc, #460]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c12c:	4313      	orrs	r3, r2
 800c12e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00a      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c13e:	4b6e      	ldr	r3, [pc, #440]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c144:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	69db      	ldr	r3, [r3, #28]
 800c14c:	496a      	ldr	r1, [pc, #424]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c14e:	4313      	orrs	r3, r2
 800c150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d00a      	beq.n	800c176 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c160:	4b65      	ldr	r3, [pc, #404]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c166:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	4962      	ldr	r1, [pc, #392]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c170:	4313      	orrs	r3, r2
 800c172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00a      	beq.n	800c198 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c182:	4b5d      	ldr	r3, [pc, #372]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c190:	4959      	ldr	r1, [pc, #356]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c192:	4313      	orrs	r3, r2
 800c194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00a      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c1a4:	4b54      	ldr	r3, [pc, #336]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1aa:	f023 0203 	bic.w	r2, r3, #3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b2:	4951      	ldr	r1, [pc, #324]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d00a      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c1c6:	4b4c      	ldr	r3, [pc, #304]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d4:	4948      	ldr	r1, [pc, #288]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d015      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c1e8:	4b43      	ldr	r3, [pc, #268]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f6:	4940      	ldr	r1, [pc, #256]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c206:	d105      	bne.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c208:	4b3b      	ldr	r3, [pc, #236]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	4a3a      	ldr	r2, [pc, #232]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c20e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d015      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c220:	4b35      	ldr	r3, [pc, #212]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c22e:	4932      	ldr	r1, [pc, #200]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c230:	4313      	orrs	r3, r2
 800c232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c23e:	d105      	bne.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c240:	4b2d      	ldr	r3, [pc, #180]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	4a2c      	ldr	r2, [pc, #176]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c24a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c254:	2b00      	cmp	r3, #0
 800c256:	d015      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c258:	4b27      	ldr	r3, [pc, #156]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	4924      	ldr	r1, [pc, #144]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c276:	d105      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c278:	4b1f      	ldr	r3, [pc, #124]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c27a:	68db      	ldr	r3, [r3, #12]
 800c27c:	4a1e      	ldr	r2, [pc, #120]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c282:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d015      	beq.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c290:	4b19      	ldr	r3, [pc, #100]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c29e:	4916      	ldr	r1, [pc, #88]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ae:	d105      	bne.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2b0:	4b11      	ldr	r3, [pc, #68]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	4a10      	ldr	r2, [pc, #64]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d019      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c2c8:	4b0b      	ldr	r3, [pc, #44]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2d6:	4908      	ldr	r1, [pc, #32]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e6:	d109      	bne.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2e8:	4b03      	ldr	r3, [pc, #12]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	4a02      	ldr	r2, [pc, #8]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800c2ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2f2:	60d3      	str	r3, [r2, #12]
 800c2f4:	e002      	b.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c2f6:	bf00      	nop
 800c2f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c304:	2b00      	cmp	r3, #0
 800c306:	d015      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c308:	4b29      	ldr	r3, [pc, #164]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c30e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c316:	4926      	ldr	r1, [pc, #152]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c318:	4313      	orrs	r3, r2
 800c31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c326:	d105      	bne.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c328:	4b21      	ldr	r3, [pc, #132]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	4a20      	ldr	r2, [pc, #128]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c32e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c332:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d015      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c340:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c346:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c34e:	4918      	ldr	r1, [pc, #96]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c350:	4313      	orrs	r3, r2
 800c352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c35e:	d105      	bne.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c360:	4b13      	ldr	r3, [pc, #76]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	4a12      	ldr	r2, [pc, #72]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c36a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c374:	2b00      	cmp	r3, #0
 800c376:	d015      	beq.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c378:	4b0d      	ldr	r3, [pc, #52]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c37a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c37e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c386:	490a      	ldr	r1, [pc, #40]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c388:	4313      	orrs	r3, r2
 800c38a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c392:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c396:	d105      	bne.n	800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c398:	4b05      	ldr	r3, [pc, #20]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	4a04      	ldr	r2, [pc, #16]	; (800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800c39e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c3a4:	7cbb      	ldrb	r3, [r7, #18]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	40021000 	.word	0x40021000

0800c3b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e09d      	b.n	800c502 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d108      	bne.n	800c3e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3d6:	d009      	beq.n	800c3ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	61da      	str	r2, [r3, #28]
 800c3de:	e005      	b.n	800c3ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7fb fc70 	bl	8007cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2202      	movs	r2, #2
 800c410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c422:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c42c:	d902      	bls.n	800c434 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
 800c432:	e002      	b.n	800c43a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c438:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c442:	d007      	beq.n	800c454 <HAL_SPI_Init+0xa0>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c44c:	d002      	beq.n	800c454 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c464:	431a      	orrs	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	f003 0302 	and.w	r3, r3, #2
 800c46e:	431a      	orrs	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	f003 0301 	and.w	r3, r3, #1
 800c478:	431a      	orrs	r2, r3
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	699b      	ldr	r3, [r3, #24]
 800c47e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c482:	431a      	orrs	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	69db      	ldr	r3, [r3, #28]
 800c488:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c48c:	431a      	orrs	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6a1b      	ldr	r3, [r3, #32]
 800c492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c496:	ea42 0103 	orr.w	r1, r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	430a      	orrs	r2, r1
 800c4a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	0c1b      	lsrs	r3, r3, #16
 800c4b0:	f003 0204 	and.w	r2, r3, #4
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	f003 0310 	and.w	r3, r3, #16
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c2:	f003 0308 	and.w	r3, r3, #8
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	68db      	ldr	r3, [r3, #12]
 800c4cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c4d0:	ea42 0103 	orr.w	r1, r2, r3
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	430a      	orrs	r2, r1
 800c4e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	69da      	ldr	r2, [r3, #28]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c4f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b082      	sub	sp, #8
 800c50e:	af00      	add	r7, sp, #0
 800c510:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e049      	b.n	800c5b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	d106      	bne.n	800c536 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f841 	bl	800c5b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2202      	movs	r2, #2
 800c53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3304      	adds	r3, #4
 800c546:	4619      	mov	r1, r3
 800c548:	4610      	mov	r0, r2
 800c54a:	f000 fcdd 	bl	800cf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2201      	movs	r2, #1
 800c572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2201      	movs	r2, #1
 800c582:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c5c0:	bf00      	nop
 800c5c2:	370c      	adds	r7, #12
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b085      	sub	sp, #20
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d001      	beq.n	800c5e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e054      	b.n	800c68e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f042 0201 	orr.w	r2, r2, #1
 800c5fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4a26      	ldr	r2, [pc, #152]	; (800c69c <HAL_TIM_Base_Start_IT+0xd0>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d022      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c60e:	d01d      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a22      	ldr	r2, [pc, #136]	; (800c6a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d018      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a21      	ldr	r2, [pc, #132]	; (800c6a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d013      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a1f      	ldr	r2, [pc, #124]	; (800c6a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d00e      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a1e      	ldr	r2, [pc, #120]	; (800c6ac <HAL_TIM_Base_Start_IT+0xe0>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d009      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a1c      	ldr	r2, [pc, #112]	; (800c6b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d004      	beq.n	800c64c <HAL_TIM_Base_Start_IT+0x80>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a1b      	ldr	r2, [pc, #108]	; (800c6b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d115      	bne.n	800c678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	689a      	ldr	r2, [r3, #8]
 800c652:	4b19      	ldr	r3, [pc, #100]	; (800c6b8 <HAL_TIM_Base_Start_IT+0xec>)
 800c654:	4013      	ands	r3, r2
 800c656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2b06      	cmp	r3, #6
 800c65c:	d015      	beq.n	800c68a <HAL_TIM_Base_Start_IT+0xbe>
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c664:	d011      	beq.n	800c68a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f042 0201 	orr.w	r2, r2, #1
 800c674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c676:	e008      	b.n	800c68a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f042 0201 	orr.w	r2, r2, #1
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e000      	b.n	800c68c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c68a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3714      	adds	r7, #20
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr
 800c69a:	bf00      	nop
 800c69c:	40012c00 	.word	0x40012c00
 800c6a0:	40000400 	.word	0x40000400
 800c6a4:	40000800 	.word	0x40000800
 800c6a8:	40000c00 	.word	0x40000c00
 800c6ac:	40013400 	.word	0x40013400
 800c6b0:	40014000 	.word	0x40014000
 800c6b4:	40015000 	.word	0x40015000
 800c6b8:	00010007 	.word	0x00010007

0800c6bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e049      	b.n	800c762 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fb fd9c 	bl	8008220 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	f000 fc04 	bl	800cf08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2201      	movs	r2, #1
 800c70c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2201      	movs	r2, #1
 800c71c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2201      	movs	r2, #1
 800c73c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2201      	movs	r2, #1
 800c744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2201      	movs	r2, #1
 800c754:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
	...

0800c76c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d109      	bne.n	800c790 <HAL_TIM_PWM_Start+0x24>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c782:	b2db      	uxtb	r3, r3
 800c784:	2b01      	cmp	r3, #1
 800c786:	bf14      	ite	ne
 800c788:	2301      	movne	r3, #1
 800c78a:	2300      	moveq	r3, #0
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	e03c      	b.n	800c80a <HAL_TIM_PWM_Start+0x9e>
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b04      	cmp	r3, #4
 800c794:	d109      	bne.n	800c7aa <HAL_TIM_PWM_Start+0x3e>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	bf14      	ite	ne
 800c7a2:	2301      	movne	r3, #1
 800c7a4:	2300      	moveq	r3, #0
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	e02f      	b.n	800c80a <HAL_TIM_PWM_Start+0x9e>
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b08      	cmp	r3, #8
 800c7ae:	d109      	bne.n	800c7c4 <HAL_TIM_PWM_Start+0x58>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	bf14      	ite	ne
 800c7bc:	2301      	movne	r3, #1
 800c7be:	2300      	moveq	r3, #0
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	e022      	b.n	800c80a <HAL_TIM_PWM_Start+0x9e>
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	2b0c      	cmp	r3, #12
 800c7c8:	d109      	bne.n	800c7de <HAL_TIM_PWM_Start+0x72>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	bf14      	ite	ne
 800c7d6:	2301      	movne	r3, #1
 800c7d8:	2300      	moveq	r3, #0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	e015      	b.n	800c80a <HAL_TIM_PWM_Start+0x9e>
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	2b10      	cmp	r3, #16
 800c7e2:	d109      	bne.n	800c7f8 <HAL_TIM_PWM_Start+0x8c>
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	bf14      	ite	ne
 800c7f0:	2301      	movne	r3, #1
 800c7f2:	2300      	moveq	r3, #0
 800c7f4:	b2db      	uxtb	r3, r3
 800c7f6:	e008      	b.n	800c80a <HAL_TIM_PWM_Start+0x9e>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b01      	cmp	r3, #1
 800c802:	bf14      	ite	ne
 800c804:	2301      	movne	r3, #1
 800c806:	2300      	moveq	r3, #0
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	e0a6      	b.n	800c960 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d104      	bne.n	800c822 <HAL_TIM_PWM_Start+0xb6>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2202      	movs	r2, #2
 800c81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c820:	e023      	b.n	800c86a <HAL_TIM_PWM_Start+0xfe>
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b04      	cmp	r3, #4
 800c826:	d104      	bne.n	800c832 <HAL_TIM_PWM_Start+0xc6>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2202      	movs	r2, #2
 800c82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c830:	e01b      	b.n	800c86a <HAL_TIM_PWM_Start+0xfe>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	2b08      	cmp	r3, #8
 800c836:	d104      	bne.n	800c842 <HAL_TIM_PWM_Start+0xd6>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2202      	movs	r2, #2
 800c83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c840:	e013      	b.n	800c86a <HAL_TIM_PWM_Start+0xfe>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b0c      	cmp	r3, #12
 800c846:	d104      	bne.n	800c852 <HAL_TIM_PWM_Start+0xe6>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2202      	movs	r2, #2
 800c84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c850:	e00b      	b.n	800c86a <HAL_TIM_PWM_Start+0xfe>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b10      	cmp	r3, #16
 800c856:	d104      	bne.n	800c862 <HAL_TIM_PWM_Start+0xf6>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c860:	e003      	b.n	800c86a <HAL_TIM_PWM_Start+0xfe>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2202      	movs	r2, #2
 800c866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2201      	movs	r2, #1
 800c870:	6839      	ldr	r1, [r7, #0]
 800c872:	4618      	mov	r0, r3
 800c874:	f000 ff1a 	bl	800d6ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a3a      	ldr	r2, [pc, #232]	; (800c968 <HAL_TIM_PWM_Start+0x1fc>)
 800c87e:	4293      	cmp	r3, r2
 800c880:	d018      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0x148>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4a39      	ldr	r2, [pc, #228]	; (800c96c <HAL_TIM_PWM_Start+0x200>)
 800c888:	4293      	cmp	r3, r2
 800c88a:	d013      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0x148>
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4a37      	ldr	r2, [pc, #220]	; (800c970 <HAL_TIM_PWM_Start+0x204>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d00e      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0x148>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a36      	ldr	r2, [pc, #216]	; (800c974 <HAL_TIM_PWM_Start+0x208>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d009      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0x148>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a34      	ldr	r2, [pc, #208]	; (800c978 <HAL_TIM_PWM_Start+0x20c>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d004      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0x148>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a33      	ldr	r2, [pc, #204]	; (800c97c <HAL_TIM_PWM_Start+0x210>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIM_PWM_Start+0x14c>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <HAL_TIM_PWM_Start+0x14e>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a25      	ldr	r2, [pc, #148]	; (800c968 <HAL_TIM_PWM_Start+0x1fc>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d022      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8e0:	d01d      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a26      	ldr	r2, [pc, #152]	; (800c980 <HAL_TIM_PWM_Start+0x214>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d018      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a24      	ldr	r2, [pc, #144]	; (800c984 <HAL_TIM_PWM_Start+0x218>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d013      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a23      	ldr	r2, [pc, #140]	; (800c988 <HAL_TIM_PWM_Start+0x21c>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00e      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a19      	ldr	r2, [pc, #100]	; (800c96c <HAL_TIM_PWM_Start+0x200>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d009      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a18      	ldr	r2, [pc, #96]	; (800c970 <HAL_TIM_PWM_Start+0x204>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d004      	beq.n	800c91e <HAL_TIM_PWM_Start+0x1b2>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a18      	ldr	r2, [pc, #96]	; (800c97c <HAL_TIM_PWM_Start+0x210>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d115      	bne.n	800c94a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	689a      	ldr	r2, [r3, #8]
 800c924:	4b19      	ldr	r3, [pc, #100]	; (800c98c <HAL_TIM_PWM_Start+0x220>)
 800c926:	4013      	ands	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b06      	cmp	r3, #6
 800c92e:	d015      	beq.n	800c95c <HAL_TIM_PWM_Start+0x1f0>
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c936:	d011      	beq.n	800c95c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0201 	orr.w	r2, r2, #1
 800c946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c948:	e008      	b.n	800c95c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681a      	ldr	r2, [r3, #0]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f042 0201 	orr.w	r2, r2, #1
 800c958:	601a      	str	r2, [r3, #0]
 800c95a:	e000      	b.n	800c95e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c95c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	40012c00 	.word	0x40012c00
 800c96c:	40013400 	.word	0x40013400
 800c970:	40014000 	.word	0x40014000
 800c974:	40014400 	.word	0x40014400
 800c978:	40014800 	.word	0x40014800
 800c97c:	40015000 	.word	0x40015000
 800c980:	40000400 	.word	0x40000400
 800c984:	40000800 	.word	0x40000800
 800c988:	40000c00 	.word	0x40000c00
 800c98c:	00010007 	.word	0x00010007

0800c990 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b082      	sub	sp, #8
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	691b      	ldr	r3, [r3, #16]
 800c99e:	f003 0302 	and.w	r3, r3, #2
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d122      	bne.n	800c9ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68db      	ldr	r3, [r3, #12]
 800c9ac:	f003 0302 	and.w	r3, r3, #2
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d11b      	bne.n	800c9ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f06f 0202 	mvn.w	r2, #2
 800c9bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	699b      	ldr	r3, [r3, #24]
 800c9ca:	f003 0303 	and.w	r3, r3, #3
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d003      	beq.n	800c9da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 fa7a 	bl	800cecc <HAL_TIM_IC_CaptureCallback>
 800c9d8:	e005      	b.n	800c9e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fa6c 	bl	800ceb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fa7d 	bl	800cee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	691b      	ldr	r3, [r3, #16]
 800c9f2:	f003 0304 	and.w	r3, r3, #4
 800c9f6:	2b04      	cmp	r3, #4
 800c9f8:	d122      	bne.n	800ca40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	d11b      	bne.n	800ca40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f06f 0204 	mvn.w	r2, #4
 800ca10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2202      	movs	r2, #2
 800ca16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f000 fa50 	bl	800cecc <HAL_TIM_IC_CaptureCallback>
 800ca2c:	e005      	b.n	800ca3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 fa42 	bl	800ceb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f000 fa53 	bl	800cee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	f003 0308 	and.w	r3, r3, #8
 800ca4a:	2b08      	cmp	r3, #8
 800ca4c:	d122      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f003 0308 	and.w	r3, r3, #8
 800ca58:	2b08      	cmp	r3, #8
 800ca5a:	d11b      	bne.n	800ca94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f06f 0208 	mvn.w	r2, #8
 800ca64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2204      	movs	r2, #4
 800ca6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69db      	ldr	r3, [r3, #28]
 800ca72:	f003 0303 	and.w	r3, r3, #3
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 fa26 	bl	800cecc <HAL_TIM_IC_CaptureCallback>
 800ca80:	e005      	b.n	800ca8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 fa18 	bl	800ceb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 fa29 	bl	800cee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	f003 0310 	and.w	r3, r3, #16
 800ca9e:	2b10      	cmp	r3, #16
 800caa0:	d122      	bne.n	800cae8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f003 0310 	and.w	r3, r3, #16
 800caac:	2b10      	cmp	r3, #16
 800caae:	d11b      	bne.n	800cae8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f06f 0210 	mvn.w	r2, #16
 800cab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2208      	movs	r2, #8
 800cabe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d003      	beq.n	800cad6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 f9fc 	bl	800cecc <HAL_TIM_IC_CaptureCallback>
 800cad4:	e005      	b.n	800cae2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f000 f9ee 	bl	800ceb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f9ff 	bl	800cee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2200      	movs	r2, #0
 800cae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d10e      	bne.n	800cb14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	f003 0301 	and.w	r3, r3, #1
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d107      	bne.n	800cb14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f06f 0201 	mvn.w	r2, #1
 800cb0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7fa fdc4 	bl	800769c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb1e:	2b80      	cmp	r3, #128	; 0x80
 800cb20:	d10e      	bne.n	800cb40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb2c:	2b80      	cmp	r3, #128	; 0x80
 800cb2e:	d107      	bne.n	800cb40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 fe7c 	bl	800d838 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb4e:	d10e      	bne.n	800cb6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb5a:	2b80      	cmp	r3, #128	; 0x80
 800cb5c:	d107      	bne.n	800cb6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800cb66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 fe6f 	bl	800d84c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb78:	2b40      	cmp	r3, #64	; 0x40
 800cb7a:	d10e      	bne.n	800cb9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	68db      	ldr	r3, [r3, #12]
 800cb82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb86:	2b40      	cmp	r3, #64	; 0x40
 800cb88:	d107      	bne.n	800cb9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 f9ad 	bl	800cef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	f003 0320 	and.w	r3, r3, #32
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	d10e      	bne.n	800cbc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	f003 0320 	and.w	r3, r3, #32
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d107      	bne.n	800cbc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f06f 0220 	mvn.w	r2, #32
 800cbbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f000 fe2f 	bl	800d824 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	691b      	ldr	r3, [r3, #16]
 800cbcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbd4:	d10f      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68db      	ldr	r3, [r3, #12]
 800cbdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbe4:	d107      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800cbee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 fe35 	bl	800d860 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc04:	d10f      	bne.n	800cc26 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc14:	d107      	bne.n	800cc26 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800cc1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fe27 	bl	800d874 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc34:	d10f      	bne.n	800cc56 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc44:	d107      	bne.n	800cc56 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800cc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 fe19 	bl	800d888 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc64:	d10f      	bne.n	800cc86 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc74:	d107      	bne.n	800cc86 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800cc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 fe0b 	bl	800d89c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cc86:	bf00      	nop
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
	...

0800cc90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	60f8      	str	r0, [r7, #12]
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cca6:	2b01      	cmp	r3, #1
 800cca8:	d101      	bne.n	800ccae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	e0ff      	b.n	800ceae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b14      	cmp	r3, #20
 800ccba:	f200 80f0 	bhi.w	800ce9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ccbe:	a201      	add	r2, pc, #4	; (adr r2, 800ccc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ccc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc4:	0800cd19 	.word	0x0800cd19
 800ccc8:	0800ce9f 	.word	0x0800ce9f
 800cccc:	0800ce9f 	.word	0x0800ce9f
 800ccd0:	0800ce9f 	.word	0x0800ce9f
 800ccd4:	0800cd59 	.word	0x0800cd59
 800ccd8:	0800ce9f 	.word	0x0800ce9f
 800ccdc:	0800ce9f 	.word	0x0800ce9f
 800cce0:	0800ce9f 	.word	0x0800ce9f
 800cce4:	0800cd9b 	.word	0x0800cd9b
 800cce8:	0800ce9f 	.word	0x0800ce9f
 800ccec:	0800ce9f 	.word	0x0800ce9f
 800ccf0:	0800ce9f 	.word	0x0800ce9f
 800ccf4:	0800cddb 	.word	0x0800cddb
 800ccf8:	0800ce9f 	.word	0x0800ce9f
 800ccfc:	0800ce9f 	.word	0x0800ce9f
 800cd00:	0800ce9f 	.word	0x0800ce9f
 800cd04:	0800ce1d 	.word	0x0800ce1d
 800cd08:	0800ce9f 	.word	0x0800ce9f
 800cd0c:	0800ce9f 	.word	0x0800ce9f
 800cd10:	0800ce9f 	.word	0x0800ce9f
 800cd14:	0800ce5d 	.word	0x0800ce5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68b9      	ldr	r1, [r7, #8]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f000 f99a 	bl	800d058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	699a      	ldr	r2, [r3, #24]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f042 0208 	orr.w	r2, r2, #8
 800cd32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	699a      	ldr	r2, [r3, #24]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0204 	bic.w	r2, r2, #4
 800cd42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6999      	ldr	r1, [r3, #24]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	619a      	str	r2, [r3, #24]
      break;
 800cd56:	e0a5      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68b9      	ldr	r1, [r7, #8]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f000 fa14 	bl	800d18c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	699a      	ldr	r2, [r3, #24]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	699a      	ldr	r2, [r3, #24]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	6999      	ldr	r1, [r3, #24]
 800cd8a:	68bb      	ldr	r3, [r7, #8]
 800cd8c:	691b      	ldr	r3, [r3, #16]
 800cd8e:	021a      	lsls	r2, r3, #8
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	619a      	str	r2, [r3, #24]
      break;
 800cd98:	e084      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 fa87 	bl	800d2b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	69da      	ldr	r2, [r3, #28]
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f042 0208 	orr.w	r2, r2, #8
 800cdb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	69da      	ldr	r2, [r3, #28]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f022 0204 	bic.w	r2, r2, #4
 800cdc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	69d9      	ldr	r1, [r3, #28]
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	691a      	ldr	r2, [r3, #16]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	430a      	orrs	r2, r1
 800cdd6:	61da      	str	r2, [r3, #28]
      break;
 800cdd8:	e064      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68b9      	ldr	r1, [r7, #8]
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 faf9 	bl	800d3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	69da      	ldr	r2, [r3, #28]
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	69da      	ldr	r2, [r3, #28]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69d9      	ldr	r1, [r3, #28]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	021a      	lsls	r2, r3, #8
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	430a      	orrs	r2, r1
 800ce18:	61da      	str	r2, [r3, #28]
      break;
 800ce1a:	e043      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68b9      	ldr	r1, [r7, #8]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f000 fb6c 	bl	800d500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f042 0208 	orr.w	r2, r2, #8
 800ce36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f022 0204 	bic.w	r2, r2, #4
 800ce46:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	691a      	ldr	r2, [r3, #16]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	430a      	orrs	r2, r1
 800ce58:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ce5a:	e023      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68b9      	ldr	r1, [r7, #8]
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fbb6 	bl	800d5d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce86:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	021a      	lsls	r2, r3, #8
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	430a      	orrs	r2, r1
 800ce9a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ce9c:	e002      	b.n	800cea4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	75fb      	strb	r3, [r7, #23]
      break;
 800cea2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3718      	adds	r7, #24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop

0800ceb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a46      	ldr	r2, [pc, #280]	; (800d034 <TIM_Base_SetConfig+0x12c>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d017      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf26:	d013      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4a43      	ldr	r2, [pc, #268]	; (800d038 <TIM_Base_SetConfig+0x130>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d00f      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a42      	ldr	r2, [pc, #264]	; (800d03c <TIM_Base_SetConfig+0x134>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d00b      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a41      	ldr	r2, [pc, #260]	; (800d040 <TIM_Base_SetConfig+0x138>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d007      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	4a40      	ldr	r2, [pc, #256]	; (800d044 <TIM_Base_SetConfig+0x13c>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d003      	beq.n	800cf50 <TIM_Base_SetConfig+0x48>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	4a3f      	ldr	r2, [pc, #252]	; (800d048 <TIM_Base_SetConfig+0x140>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d108      	bne.n	800cf62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a33      	ldr	r2, [pc, #204]	; (800d034 <TIM_Base_SetConfig+0x12c>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d023      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf70:	d01f      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a30      	ldr	r2, [pc, #192]	; (800d038 <TIM_Base_SetConfig+0x130>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d01b      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a2f      	ldr	r2, [pc, #188]	; (800d03c <TIM_Base_SetConfig+0x134>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d017      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a2e      	ldr	r2, [pc, #184]	; (800d040 <TIM_Base_SetConfig+0x138>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d013      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a2d      	ldr	r2, [pc, #180]	; (800d044 <TIM_Base_SetConfig+0x13c>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d00f      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4a2d      	ldr	r2, [pc, #180]	; (800d04c <TIM_Base_SetConfig+0x144>)
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d00b      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	4a2c      	ldr	r2, [pc, #176]	; (800d050 <TIM_Base_SetConfig+0x148>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d007      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4a2b      	ldr	r2, [pc, #172]	; (800d054 <TIM_Base_SetConfig+0x14c>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d003      	beq.n	800cfb2 <TIM_Base_SetConfig+0xaa>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4a26      	ldr	r2, [pc, #152]	; (800d048 <TIM_Base_SetConfig+0x140>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d108      	bne.n	800cfc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cfb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	695b      	ldr	r3, [r3, #20]
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	689a      	ldr	r2, [r3, #8]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	4a12      	ldr	r2, [pc, #72]	; (800d034 <TIM_Base_SetConfig+0x12c>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d013      	beq.n	800d018 <TIM_Base_SetConfig+0x110>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a14      	ldr	r2, [pc, #80]	; (800d044 <TIM_Base_SetConfig+0x13c>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d00f      	beq.n	800d018 <TIM_Base_SetConfig+0x110>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	4a14      	ldr	r2, [pc, #80]	; (800d04c <TIM_Base_SetConfig+0x144>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d00b      	beq.n	800d018 <TIM_Base_SetConfig+0x110>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a13      	ldr	r2, [pc, #76]	; (800d050 <TIM_Base_SetConfig+0x148>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d007      	beq.n	800d018 <TIM_Base_SetConfig+0x110>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a12      	ldr	r2, [pc, #72]	; (800d054 <TIM_Base_SetConfig+0x14c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d003      	beq.n	800d018 <TIM_Base_SetConfig+0x110>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a0d      	ldr	r2, [pc, #52]	; (800d048 <TIM_Base_SetConfig+0x140>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d103      	bne.n	800d020 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	691a      	ldr	r2, [r3, #16]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	615a      	str	r2, [r3, #20]
}
 800d026:	bf00      	nop
 800d028:	3714      	adds	r7, #20
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	40012c00 	.word	0x40012c00
 800d038:	40000400 	.word	0x40000400
 800d03c:	40000800 	.word	0x40000800
 800d040:	40000c00 	.word	0x40000c00
 800d044:	40013400 	.word	0x40013400
 800d048:	40015000 	.word	0x40015000
 800d04c:	40014000 	.word	0x40014000
 800d050:	40014400 	.word	0x40014400
 800d054:	40014800 	.word	0x40014800

0800d058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d058:	b480      	push	{r7}
 800d05a:	b087      	sub	sp, #28
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	f023 0201 	bic.w	r2, r3, #1
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1b      	ldr	r3, [r3, #32]
 800d072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	685b      	ldr	r3, [r3, #4]
 800d078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f023 0303 	bic.w	r3, r3, #3
 800d092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f023 0302 	bic.w	r3, r3, #2
 800d0a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	697a      	ldr	r2, [r7, #20]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	4a30      	ldr	r2, [pc, #192]	; (800d174 <TIM_OC1_SetConfig+0x11c>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d013      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x88>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	4a2f      	ldr	r2, [pc, #188]	; (800d178 <TIM_OC1_SetConfig+0x120>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d00f      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x88>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a2e      	ldr	r2, [pc, #184]	; (800d17c <TIM_OC1_SetConfig+0x124>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d00b      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x88>
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a2d      	ldr	r2, [pc, #180]	; (800d180 <TIM_OC1_SetConfig+0x128>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d007      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x88>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a2c      	ldr	r2, [pc, #176]	; (800d184 <TIM_OC1_SetConfig+0x12c>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d003      	beq.n	800d0e0 <TIM_OC1_SetConfig+0x88>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4a2b      	ldr	r2, [pc, #172]	; (800d188 <TIM_OC1_SetConfig+0x130>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d10c      	bne.n	800d0fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	f023 0308 	bic.w	r3, r3, #8
 800d0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	697a      	ldr	r2, [r7, #20]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	f023 0304 	bic.w	r3, r3, #4
 800d0f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	4a1d      	ldr	r2, [pc, #116]	; (800d174 <TIM_OC1_SetConfig+0x11c>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d013      	beq.n	800d12a <TIM_OC1_SetConfig+0xd2>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	4a1c      	ldr	r2, [pc, #112]	; (800d178 <TIM_OC1_SetConfig+0x120>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d00f      	beq.n	800d12a <TIM_OC1_SetConfig+0xd2>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	4a1b      	ldr	r2, [pc, #108]	; (800d17c <TIM_OC1_SetConfig+0x124>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d00b      	beq.n	800d12a <TIM_OC1_SetConfig+0xd2>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a1a      	ldr	r2, [pc, #104]	; (800d180 <TIM_OC1_SetConfig+0x128>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d007      	beq.n	800d12a <TIM_OC1_SetConfig+0xd2>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a19      	ldr	r2, [pc, #100]	; (800d184 <TIM_OC1_SetConfig+0x12c>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d003      	beq.n	800d12a <TIM_OC1_SetConfig+0xd2>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	4a18      	ldr	r2, [pc, #96]	; (800d188 <TIM_OC1_SetConfig+0x130>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d111      	bne.n	800d14e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	695b      	ldr	r3, [r3, #20]
 800d13e:	693a      	ldr	r2, [r7, #16]
 800d140:	4313      	orrs	r3, r2
 800d142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	699b      	ldr	r3, [r3, #24]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	693a      	ldr	r2, [r7, #16]
 800d152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	685a      	ldr	r2, [r3, #4]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	697a      	ldr	r2, [r7, #20]
 800d166:	621a      	str	r2, [r3, #32]
}
 800d168:	bf00      	nop
 800d16a:	371c      	adds	r7, #28
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr
 800d174:	40012c00 	.word	0x40012c00
 800d178:	40013400 	.word	0x40013400
 800d17c:	40014000 	.word	0x40014000
 800d180:	40014400 	.word	0x40014400
 800d184:	40014800 	.word	0x40014800
 800d188:	40015000 	.word	0x40015000

0800d18c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6a1b      	ldr	r3, [r3, #32]
 800d19a:	f023 0210 	bic.w	r2, r3, #16
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6a1b      	ldr	r3, [r3, #32]
 800d1a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	021b      	lsls	r3, r3, #8
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f023 0320 	bic.w	r3, r3, #32
 800d1da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	011b      	lsls	r3, r3, #4
 800d1e2:	697a      	ldr	r2, [r7, #20]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4a2c      	ldr	r2, [pc, #176]	; (800d29c <TIM_OC2_SetConfig+0x110>)
 800d1ec:	4293      	cmp	r3, r2
 800d1ee:	d007      	beq.n	800d200 <TIM_OC2_SetConfig+0x74>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a2b      	ldr	r2, [pc, #172]	; (800d2a0 <TIM_OC2_SetConfig+0x114>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d003      	beq.n	800d200 <TIM_OC2_SetConfig+0x74>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a2a      	ldr	r2, [pc, #168]	; (800d2a4 <TIM_OC2_SetConfig+0x118>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d10d      	bne.n	800d21c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	011b      	lsls	r3, r3, #4
 800d20e:	697a      	ldr	r2, [r7, #20]
 800d210:	4313      	orrs	r3, r2
 800d212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	4a1f      	ldr	r2, [pc, #124]	; (800d29c <TIM_OC2_SetConfig+0x110>)
 800d220:	4293      	cmp	r3, r2
 800d222:	d013      	beq.n	800d24c <TIM_OC2_SetConfig+0xc0>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	4a1e      	ldr	r2, [pc, #120]	; (800d2a0 <TIM_OC2_SetConfig+0x114>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d00f      	beq.n	800d24c <TIM_OC2_SetConfig+0xc0>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	4a1e      	ldr	r2, [pc, #120]	; (800d2a8 <TIM_OC2_SetConfig+0x11c>)
 800d230:	4293      	cmp	r3, r2
 800d232:	d00b      	beq.n	800d24c <TIM_OC2_SetConfig+0xc0>
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	4a1d      	ldr	r2, [pc, #116]	; (800d2ac <TIM_OC2_SetConfig+0x120>)
 800d238:	4293      	cmp	r3, r2
 800d23a:	d007      	beq.n	800d24c <TIM_OC2_SetConfig+0xc0>
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	4a1c      	ldr	r2, [pc, #112]	; (800d2b0 <TIM_OC2_SetConfig+0x124>)
 800d240:	4293      	cmp	r3, r2
 800d242:	d003      	beq.n	800d24c <TIM_OC2_SetConfig+0xc0>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	4a17      	ldr	r2, [pc, #92]	; (800d2a4 <TIM_OC2_SetConfig+0x118>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	d113      	bne.n	800d274 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d254:	693b      	ldr	r3, [r7, #16]
 800d256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d25a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	695b      	ldr	r3, [r3, #20]
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	4313      	orrs	r3, r2
 800d266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	693a      	ldr	r2, [r7, #16]
 800d270:	4313      	orrs	r3, r2
 800d272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	693a      	ldr	r2, [r7, #16]
 800d278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	621a      	str	r2, [r3, #32]
}
 800d28e:	bf00      	nop
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	40012c00 	.word	0x40012c00
 800d2a0:	40013400 	.word	0x40013400
 800d2a4:	40015000 	.word	0x40015000
 800d2a8:	40014000 	.word	0x40014000
 800d2ac:	40014400 	.word	0x40014400
 800d2b0:	40014800 	.word	0x40014800

0800d2b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b087      	sub	sp, #28
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	6a1b      	ldr	r3, [r3, #32]
 800d2c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6a1b      	ldr	r3, [r3, #32]
 800d2ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f023 0303 	bic.w	r3, r3, #3
 800d2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	021b      	lsls	r3, r3, #8
 800d308:	697a      	ldr	r2, [r7, #20]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a2b      	ldr	r2, [pc, #172]	; (800d3c0 <TIM_OC3_SetConfig+0x10c>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d007      	beq.n	800d326 <TIM_OC3_SetConfig+0x72>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a2a      	ldr	r2, [pc, #168]	; (800d3c4 <TIM_OC3_SetConfig+0x110>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d003      	beq.n	800d326 <TIM_OC3_SetConfig+0x72>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a29      	ldr	r2, [pc, #164]	; (800d3c8 <TIM_OC3_SetConfig+0x114>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d10d      	bne.n	800d342 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d32c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	021b      	lsls	r3, r3, #8
 800d334:	697a      	ldr	r2, [r7, #20]
 800d336:	4313      	orrs	r3, r2
 800d338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a1e      	ldr	r2, [pc, #120]	; (800d3c0 <TIM_OC3_SetConfig+0x10c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d013      	beq.n	800d372 <TIM_OC3_SetConfig+0xbe>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a1d      	ldr	r2, [pc, #116]	; (800d3c4 <TIM_OC3_SetConfig+0x110>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d00f      	beq.n	800d372 <TIM_OC3_SetConfig+0xbe>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a1d      	ldr	r2, [pc, #116]	; (800d3cc <TIM_OC3_SetConfig+0x118>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d00b      	beq.n	800d372 <TIM_OC3_SetConfig+0xbe>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a1c      	ldr	r2, [pc, #112]	; (800d3d0 <TIM_OC3_SetConfig+0x11c>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d007      	beq.n	800d372 <TIM_OC3_SetConfig+0xbe>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a1b      	ldr	r2, [pc, #108]	; (800d3d4 <TIM_OC3_SetConfig+0x120>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d003      	beq.n	800d372 <TIM_OC3_SetConfig+0xbe>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a16      	ldr	r2, [pc, #88]	; (800d3c8 <TIM_OC3_SetConfig+0x114>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d113      	bne.n	800d39a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	695b      	ldr	r3, [r3, #20]
 800d386:	011b      	lsls	r3, r3, #4
 800d388:	693a      	ldr	r2, [r7, #16]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4313      	orrs	r3, r2
 800d398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685a      	ldr	r2, [r3, #4]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	621a      	str	r2, [r3, #32]
}
 800d3b4:	bf00      	nop
 800d3b6:	371c      	adds	r7, #28
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	40012c00 	.word	0x40012c00
 800d3c4:	40013400 	.word	0x40013400
 800d3c8:	40015000 	.word	0x40015000
 800d3cc:	40014000 	.word	0x40014000
 800d3d0:	40014400 	.word	0x40014400
 800d3d4:	40014800 	.word	0x40014800

0800d3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d8:	b480      	push	{r7}
 800d3da:	b087      	sub	sp, #28
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a1b      	ldr	r3, [r3, #32]
 800d3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	021b      	lsls	r3, r3, #8
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	4313      	orrs	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	689b      	ldr	r3, [r3, #8]
 800d42c:	031b      	lsls	r3, r3, #12
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	4313      	orrs	r3, r2
 800d432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a2c      	ldr	r2, [pc, #176]	; (800d4e8 <TIM_OC4_SetConfig+0x110>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d007      	beq.n	800d44c <TIM_OC4_SetConfig+0x74>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a2b      	ldr	r2, [pc, #172]	; (800d4ec <TIM_OC4_SetConfig+0x114>)
 800d440:	4293      	cmp	r3, r2
 800d442:	d003      	beq.n	800d44c <TIM_OC4_SetConfig+0x74>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a2a      	ldr	r2, [pc, #168]	; (800d4f0 <TIM_OC4_SetConfig+0x118>)
 800d448:	4293      	cmp	r3, r2
 800d44a:	d10d      	bne.n	800d468 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	031b      	lsls	r3, r3, #12
 800d45a:	697a      	ldr	r2, [r7, #20]
 800d45c:	4313      	orrs	r3, r2
 800d45e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4a1f      	ldr	r2, [pc, #124]	; (800d4e8 <TIM_OC4_SetConfig+0x110>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d013      	beq.n	800d498 <TIM_OC4_SetConfig+0xc0>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	4a1e      	ldr	r2, [pc, #120]	; (800d4ec <TIM_OC4_SetConfig+0x114>)
 800d474:	4293      	cmp	r3, r2
 800d476:	d00f      	beq.n	800d498 <TIM_OC4_SetConfig+0xc0>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	4a1e      	ldr	r2, [pc, #120]	; (800d4f4 <TIM_OC4_SetConfig+0x11c>)
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d00b      	beq.n	800d498 <TIM_OC4_SetConfig+0xc0>
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a1d      	ldr	r2, [pc, #116]	; (800d4f8 <TIM_OC4_SetConfig+0x120>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d007      	beq.n	800d498 <TIM_OC4_SetConfig+0xc0>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	4a1c      	ldr	r2, [pc, #112]	; (800d4fc <TIM_OC4_SetConfig+0x124>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d003      	beq.n	800d498 <TIM_OC4_SetConfig+0xc0>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a17      	ldr	r2, [pc, #92]	; (800d4f0 <TIM_OC4_SetConfig+0x118>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d113      	bne.n	800d4c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d49e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d4a0:	693b      	ldr	r3, [r7, #16]
 800d4a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d4a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	019b      	lsls	r3, r3, #6
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	699b      	ldr	r3, [r3, #24]
 800d4b8:	019b      	lsls	r3, r3, #6
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	693a      	ldr	r2, [r7, #16]
 800d4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	697a      	ldr	r2, [r7, #20]
 800d4d8:	621a      	str	r2, [r3, #32]
}
 800d4da:	bf00      	nop
 800d4dc:	371c      	adds	r7, #28
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	40012c00 	.word	0x40012c00
 800d4ec:	40013400 	.word	0x40013400
 800d4f0:	40015000 	.word	0x40015000
 800d4f4:	40014000 	.word	0x40014000
 800d4f8:	40014400 	.word	0x40014400
 800d4fc:	40014800 	.word	0x40014800

0800d500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d500:	b480      	push	{r7}
 800d502:	b087      	sub	sp, #28
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6a1b      	ldr	r3, [r3, #32]
 800d50e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a1b      	ldr	r3, [r3, #32]
 800d51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4313      	orrs	r3, r2
 800d53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	041b      	lsls	r3, r3, #16
 800d54c:	693a      	ldr	r2, [r7, #16]
 800d54e:	4313      	orrs	r3, r2
 800d550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	4a19      	ldr	r2, [pc, #100]	; (800d5bc <TIM_OC5_SetConfig+0xbc>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d013      	beq.n	800d582 <TIM_OC5_SetConfig+0x82>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	4a18      	ldr	r2, [pc, #96]	; (800d5c0 <TIM_OC5_SetConfig+0xc0>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d00f      	beq.n	800d582 <TIM_OC5_SetConfig+0x82>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4a17      	ldr	r2, [pc, #92]	; (800d5c4 <TIM_OC5_SetConfig+0xc4>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d00b      	beq.n	800d582 <TIM_OC5_SetConfig+0x82>
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a16      	ldr	r2, [pc, #88]	; (800d5c8 <TIM_OC5_SetConfig+0xc8>)
 800d56e:	4293      	cmp	r3, r2
 800d570:	d007      	beq.n	800d582 <TIM_OC5_SetConfig+0x82>
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	4a15      	ldr	r2, [pc, #84]	; (800d5cc <TIM_OC5_SetConfig+0xcc>)
 800d576:	4293      	cmp	r3, r2
 800d578:	d003      	beq.n	800d582 <TIM_OC5_SetConfig+0x82>
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4a14      	ldr	r2, [pc, #80]	; (800d5d0 <TIM_OC5_SetConfig+0xd0>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d109      	bne.n	800d596 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	021b      	lsls	r3, r3, #8
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	4313      	orrs	r3, r2
 800d594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	697a      	ldr	r2, [r7, #20]
 800d59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	621a      	str	r2, [r3, #32]
}
 800d5b0:	bf00      	nop
 800d5b2:	371c      	adds	r7, #28
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	40012c00 	.word	0x40012c00
 800d5c0:	40013400 	.word	0x40013400
 800d5c4:	40014000 	.word	0x40014000
 800d5c8:	40014400 	.word	0x40014400
 800d5cc:	40014800 	.word	0x40014800
 800d5d0:	40015000 	.word	0x40015000

0800d5d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b087      	sub	sp, #28
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6a1b      	ldr	r3, [r3, #32]
 800d5e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6a1b      	ldr	r3, [r3, #32]
 800d5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	021b      	lsls	r3, r3, #8
 800d60e:	68fa      	ldr	r2, [r7, #12]
 800d610:	4313      	orrs	r3, r2
 800d612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d614:	693b      	ldr	r3, [r7, #16]
 800d616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	051b      	lsls	r3, r3, #20
 800d622:	693a      	ldr	r2, [r7, #16]
 800d624:	4313      	orrs	r3, r2
 800d626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a1a      	ldr	r2, [pc, #104]	; (800d694 <TIM_OC6_SetConfig+0xc0>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d013      	beq.n	800d658 <TIM_OC6_SetConfig+0x84>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a19      	ldr	r2, [pc, #100]	; (800d698 <TIM_OC6_SetConfig+0xc4>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d00f      	beq.n	800d658 <TIM_OC6_SetConfig+0x84>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	4a18      	ldr	r2, [pc, #96]	; (800d69c <TIM_OC6_SetConfig+0xc8>)
 800d63c:	4293      	cmp	r3, r2
 800d63e:	d00b      	beq.n	800d658 <TIM_OC6_SetConfig+0x84>
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	4a17      	ldr	r2, [pc, #92]	; (800d6a0 <TIM_OC6_SetConfig+0xcc>)
 800d644:	4293      	cmp	r3, r2
 800d646:	d007      	beq.n	800d658 <TIM_OC6_SetConfig+0x84>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a16      	ldr	r2, [pc, #88]	; (800d6a4 <TIM_OC6_SetConfig+0xd0>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d003      	beq.n	800d658 <TIM_OC6_SetConfig+0x84>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4a15      	ldr	r2, [pc, #84]	; (800d6a8 <TIM_OC6_SetConfig+0xd4>)
 800d654:	4293      	cmp	r3, r2
 800d656:	d109      	bne.n	800d66c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d65e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	029b      	lsls	r3, r3, #10
 800d666:	697a      	ldr	r2, [r7, #20]
 800d668:	4313      	orrs	r3, r2
 800d66a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	693a      	ldr	r2, [r7, #16]
 800d684:	621a      	str	r2, [r3, #32]
}
 800d686:	bf00      	nop
 800d688:	371c      	adds	r7, #28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	40012c00 	.word	0x40012c00
 800d698:	40013400 	.word	0x40013400
 800d69c:	40014000 	.word	0x40014000
 800d6a0:	40014400 	.word	0x40014400
 800d6a4:	40014800 	.word	0x40014800
 800d6a8:	40015000 	.word	0x40015000

0800d6ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b087      	sub	sp, #28
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	60f8      	str	r0, [r7, #12]
 800d6b4:	60b9      	str	r1, [r7, #8]
 800d6b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f003 031f 	and.w	r3, r3, #31
 800d6be:	2201      	movs	r2, #1
 800d6c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6a1a      	ldr	r2, [r3, #32]
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	43db      	mvns	r3, r3
 800d6ce:	401a      	ands	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	6a1a      	ldr	r2, [r3, #32]
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f003 031f 	and.w	r3, r3, #31
 800d6de:	6879      	ldr	r1, [r7, #4]
 800d6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800d6e4:	431a      	orrs	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	621a      	str	r2, [r3, #32]
}
 800d6ea:	bf00      	nop
 800d6ec:	371c      	adds	r7, #28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d101      	bne.n	800d710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d70c:	2302      	movs	r3, #2
 800d70e:	e074      	b.n	800d7fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2202      	movs	r2, #2
 800d71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a34      	ldr	r2, [pc, #208]	; (800d808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d009      	beq.n	800d74e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a33      	ldr	r2, [pc, #204]	; (800d80c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d004      	beq.n	800d74e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a31      	ldr	r2, [pc, #196]	; (800d810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d108      	bne.n	800d760 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d754:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	4313      	orrs	r3, r2
 800d75e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d76a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	4313      	orrs	r3, r2
 800d774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a21      	ldr	r2, [pc, #132]	; (800d808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d022      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d790:	d01d      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a1f      	ldr	r2, [pc, #124]	; (800d814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d798:	4293      	cmp	r3, r2
 800d79a:	d018      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a1d      	ldr	r2, [pc, #116]	; (800d818 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d013      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	4a1c      	ldr	r2, [pc, #112]	; (800d81c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	d00e      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a15      	ldr	r2, [pc, #84]	; (800d80c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d009      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4a18      	ldr	r2, [pc, #96]	; (800d820 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d004      	beq.n	800d7ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a11      	ldr	r2, [pc, #68]	; (800d810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d10c      	bne.n	800d7e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	68ba      	ldr	r2, [r7, #8]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3714      	adds	r7, #20
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop
 800d808:	40012c00 	.word	0x40012c00
 800d80c:	40013400 	.word	0x40013400
 800d810:	40015000 	.word	0x40015000
 800d814:	40000400 	.word	0x40000400
 800d818:	40000800 	.word	0x40000800
 800d81c:	40000c00 	.word	0x40000c00
 800d820:	40014000 	.word	0x40014000

0800d824 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d854:	bf00      	nop
 800d856:	370c      	adds	r7, #12
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d87c:	bf00      	nop
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d890:	bf00      	nop
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d8a4:	bf00      	nop
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d101      	bne.n	800d8c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e042      	b.n	800d948 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d106      	bne.n	800d8da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7fa fddf 	bl	8008498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2224      	movs	r2, #36	; 0x24
 800d8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f022 0201 	bic.w	r2, r2, #1
 800d8f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fd2e 	bl	800e354 <UART_SetConfig>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d101      	bne.n	800d902 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d8fe:	2301      	movs	r3, #1
 800d900:	e022      	b.n	800d948 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d906:	2b00      	cmp	r3, #0
 800d908:	d002      	beq.n	800d910 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f001 f81e 	bl	800e94c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d91e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689a      	ldr	r2, [r3, #8]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d92e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f042 0201 	orr.w	r2, r2, #1
 800d93e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f001 f8a5 	bl	800ea90 <UART_CheckIdleState>
 800d946:	4603      	mov	r3, r0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3708      	adds	r7, #8
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08a      	sub	sp, #40	; 0x28
 800d954:	af02      	add	r7, sp, #8
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	4613      	mov	r3, r2
 800d95e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d966:	2b20      	cmp	r3, #32
 800d968:	f040 8083 	bne.w	800da72 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <HAL_UART_Transmit+0x28>
 800d972:	88fb      	ldrh	r3, [r7, #6]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d978:	2301      	movs	r3, #1
 800d97a:	e07b      	b.n	800da74 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d982:	2b01      	cmp	r3, #1
 800d984:	d101      	bne.n	800d98a <HAL_UART_Transmit+0x3a>
 800d986:	2302      	movs	r3, #2
 800d988:	e074      	b.n	800da74 <HAL_UART_Transmit+0x124>
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	2201      	movs	r2, #1
 800d98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2221      	movs	r2, #33	; 0x21
 800d99e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9a2:	f7fa fe91 	bl	80086c8 <HAL_GetTick>
 800d9a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	88fa      	ldrh	r2, [r7, #6]
 800d9ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	88fa      	ldrh	r2, [r7, #6]
 800d9b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	689b      	ldr	r3, [r3, #8]
 800d9bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9c0:	d108      	bne.n	800d9d4 <HAL_UART_Transmit+0x84>
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d104      	bne.n	800d9d4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	61bb      	str	r3, [r7, #24]
 800d9d2:	e003      	b.n	800d9dc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d9e4:	e02c      	b.n	800da40 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	2180      	movs	r1, #128	; 0x80
 800d9f0:	68f8      	ldr	r0, [r7, #12]
 800d9f2:	f001 f898 	bl	800eb26 <UART_WaitOnFlagUntilTimeout>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e039      	b.n	800da74 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d10b      	bne.n	800da1e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	881b      	ldrh	r3, [r3, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	3302      	adds	r3, #2
 800da1a:	61bb      	str	r3, [r7, #24]
 800da1c:	e007      	b.n	800da2e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	781a      	ldrb	r2, [r3, #0]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	3301      	adds	r3, #1
 800da2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da34:	b29b      	uxth	r3, r3
 800da36:	3b01      	subs	r3, #1
 800da38:	b29a      	uxth	r2, r3
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800da46:	b29b      	uxth	r3, r3
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1cc      	bne.n	800d9e6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	2140      	movs	r1, #64	; 0x40
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f001 f865 	bl	800eb26 <UART_WaitOnFlagUntilTimeout>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800da62:	2303      	movs	r3, #3
 800da64:	e006      	b.n	800da74 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2220      	movs	r2, #32
 800da6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800da6e:	2300      	movs	r3, #0
 800da70:	e000      	b.n	800da74 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800da72:	2302      	movs	r3, #2
  }
}
 800da74:	4618      	mov	r0, r3
 800da76:	3720      	adds	r7, #32
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08a      	sub	sp, #40	; 0x28
 800da80:	af02      	add	r7, sp, #8
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	603b      	str	r3, [r7, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da92:	2b20      	cmp	r3, #32
 800da94:	f040 80c0 	bne.w	800dc18 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d002      	beq.n	800daa4 <HAL_UART_Receive+0x28>
 800da9e:	88fb      	ldrh	r3, [r7, #6]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d101      	bne.n	800daa8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	e0b8      	b.n	800dc1a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d101      	bne.n	800dab6 <HAL_UART_Receive+0x3a>
 800dab2:	2302      	movs	r3, #2
 800dab4:	e0b1      	b.n	800dc1a <HAL_UART_Receive+0x19e>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2222      	movs	r2, #34	; 0x22
 800daca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2200      	movs	r2, #0
 800dad2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dad4:	f7fa fdf8 	bl	80086c8 <HAL_GetTick>
 800dad8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	88fa      	ldrh	r2, [r7, #6]
 800dade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	88fa      	ldrh	r2, [r7, #6]
 800dae6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf2:	d10e      	bne.n	800db12 <HAL_UART_Receive+0x96>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d105      	bne.n	800db08 <HAL_UART_Receive+0x8c>
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db06:	e02d      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	22ff      	movs	r2, #255	; 0xff
 800db0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db10:	e028      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	689b      	ldr	r3, [r3, #8]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10d      	bne.n	800db36 <HAL_UART_Receive+0xba>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d104      	bne.n	800db2c <HAL_UART_Receive+0xb0>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	22ff      	movs	r2, #255	; 0xff
 800db26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db2a:	e01b      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	227f      	movs	r2, #127	; 0x7f
 800db30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db34:	e016      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db3e:	d10d      	bne.n	800db5c <HAL_UART_Receive+0xe0>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d104      	bne.n	800db52 <HAL_UART_Receive+0xd6>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	227f      	movs	r2, #127	; 0x7f
 800db4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db50:	e008      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	223f      	movs	r2, #63	; 0x3f
 800db56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800db5a:	e003      	b.n	800db64 <HAL_UART_Receive+0xe8>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db6a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db74:	d108      	bne.n	800db88 <HAL_UART_Receive+0x10c>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d104      	bne.n	800db88 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800db7e:	2300      	movs	r3, #0
 800db80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	61bb      	str	r3, [r7, #24]
 800db86:	e003      	b.n	800db90 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db8c:	2300      	movs	r3, #0
 800db8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800db98:	e032      	b.n	800dc00 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	9300      	str	r3, [sp, #0]
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	2200      	movs	r2, #0
 800dba2:	2120      	movs	r1, #32
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 ffbe 	bl	800eb26 <UART_WaitOnFlagUntilTimeout>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d001      	beq.n	800dbb4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800dbb0:	2303      	movs	r3, #3
 800dbb2:	e032      	b.n	800dc1a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d10c      	bne.n	800dbd4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	8a7b      	ldrh	r3, [r7, #18]
 800dbc4:	4013      	ands	r3, r2
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	3302      	adds	r3, #2
 800dbd0:	61bb      	str	r3, [r7, #24]
 800dbd2:	e00c      	b.n	800dbee <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	8a7b      	ldrh	r3, [r7, #18]
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	4013      	ands	r3, r2
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	3301      	adds	r3, #1
 800dbec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d1c6      	bne.n	800db9a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2220      	movs	r2, #32
 800dc10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	e000      	b.n	800dc1a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800dc18:	2302      	movs	r3, #2
  }
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3720      	adds	r7, #32
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b08a      	sub	sp, #40	; 0x28
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	4613      	mov	r3, r2
 800dc30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc38:	2b20      	cmp	r3, #32
 800dc3a:	d142      	bne.n	800dcc2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d002      	beq.n	800dc48 <HAL_UART_Receive_IT+0x24>
 800dc42:	88fb      	ldrh	r3, [r7, #6]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e03b      	b.n	800dcc4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc52:	2b01      	cmp	r3, #1
 800dc54:	d101      	bne.n	800dc5a <HAL_UART_Receive_IT+0x36>
 800dc56:	2302      	movs	r3, #2
 800dc58:	e034      	b.n	800dcc4 <HAL_UART_Receive_IT+0xa0>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a17      	ldr	r2, [pc, #92]	; (800dccc <HAL_UART_Receive_IT+0xa8>)
 800dc6e:	4293      	cmp	r3, r2
 800dc70:	d01f      	beq.n	800dcb2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d018      	beq.n	800dcb2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	e853 3f00 	ldrex	r3, [r3]
 800dc8c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dc94:	627b      	str	r3, [r7, #36]	; 0x24
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9e:	623b      	str	r3, [r7, #32]
 800dca0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca2:	69f9      	ldr	r1, [r7, #28]
 800dca4:	6a3a      	ldr	r2, [r7, #32]
 800dca6:	e841 2300 	strex	r3, r2, [r1]
 800dcaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1e6      	bne.n	800dc80 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800dcb2:	88fb      	ldrh	r3, [r7, #6]
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	68b9      	ldr	r1, [r7, #8]
 800dcb8:	68f8      	ldr	r0, [r7, #12]
 800dcba:	f000 fffd 	bl	800ecb8 <UART_Start_Receive_IT>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	e000      	b.n	800dcc4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dcc2:	2302      	movs	r3, #2
  }
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3728      	adds	r7, #40	; 0x28
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}
 800dccc:	40008000 	.word	0x40008000

0800dcd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b0ba      	sub	sp, #232	; 0xe8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	69db      	ldr	r3, [r3, #28]
 800dcde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dcf6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800dcfa:	f640 030f 	movw	r3, #2063	; 0x80f
 800dcfe:	4013      	ands	r3, r2
 800dd00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dd04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11b      	bne.n	800dd44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dd0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd10:	f003 0320 	and.w	r3, r3, #32
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d015      	beq.n	800dd44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dd18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd1c:	f003 0320 	and.w	r3, r3, #32
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d105      	bne.n	800dd30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dd24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dd28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d009      	beq.n	800dd44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f000 82d6 	beq.w	800e2e6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
      }
      return;
 800dd42:	e2d0      	b.n	800e2e6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dd44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f000 811f 	beq.w	800df8c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dd4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dd52:	4b8b      	ldr	r3, [pc, #556]	; (800df80 <HAL_UART_IRQHandler+0x2b0>)
 800dd54:	4013      	ands	r3, r2
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800dd5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800dd5e:	4b89      	ldr	r3, [pc, #548]	; (800df84 <HAL_UART_IRQHandler+0x2b4>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8112 	beq.w	800df8c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd6c:	f003 0301 	and.w	r3, r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d011      	beq.n	800dd98 <HAL_UART_IRQHandler+0xc8>
 800dd74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00b      	beq.n	800dd98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2201      	movs	r2, #1
 800dd86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd8e:	f043 0201 	orr.w	r2, r3, #1
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd9c:	f003 0302 	and.w	r3, r3, #2
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d011      	beq.n	800ddc8 <HAL_UART_IRQHandler+0xf8>
 800dda4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dda8:	f003 0301 	and.w	r3, r3, #1
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d00b      	beq.n	800ddc8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2202      	movs	r2, #2
 800ddb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddbe:	f043 0204 	orr.w	r2, r3, #4
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ddc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddcc:	f003 0304 	and.w	r3, r3, #4
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d011      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x128>
 800ddd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddd8:	f003 0301 	and.w	r3, r3, #1
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00b      	beq.n	800ddf8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2204      	movs	r2, #4
 800dde6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ddee:	f043 0202 	orr.w	r2, r3, #2
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ddf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ddfc:	f003 0308 	and.w	r3, r3, #8
 800de00:	2b00      	cmp	r3, #0
 800de02:	d017      	beq.n	800de34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de08:	f003 0320 	and.w	r3, r3, #32
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d105      	bne.n	800de1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800de10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800de14:	4b5a      	ldr	r3, [pc, #360]	; (800df80 <HAL_UART_IRQHandler+0x2b0>)
 800de16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00b      	beq.n	800de34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2208      	movs	r2, #8
 800de22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de2a:	f043 0208 	orr.w	r2, r3, #8
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800de34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d012      	beq.n	800de66 <HAL_UART_IRQHandler+0x196>
 800de40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de5c:	f043 0220 	orr.w	r2, r3, #32
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 823c 	beq.w	800e2ea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800de72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de76:	f003 0320 	and.w	r3, r3, #32
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d013      	beq.n	800dea6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800de7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800de82:	f003 0320 	and.w	r3, r3, #32
 800de86:	2b00      	cmp	r3, #0
 800de88:	d105      	bne.n	800de96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800de8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de92:	2b00      	cmp	r3, #0
 800de94:	d007      	beq.n	800dea6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800deac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deba:	2b40      	cmp	r3, #64	; 0x40
 800debc:	d005      	beq.n	800deca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800debe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d04f      	beq.n	800df6a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f001 f81e 	bl	800ef0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deda:	2b40      	cmp	r3, #64	; 0x40
 800dedc:	d141      	bne.n	800df62 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3308      	adds	r3, #8
 800dee4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800deec:	e853 3f00 	ldrex	r3, [r3]
 800def0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800def4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800def8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800defc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3308      	adds	r3, #8
 800df06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800df0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800df0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800df16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800df22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d1d9      	bne.n	800dede <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d013      	beq.n	800df5a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df36:	4a14      	ldr	r2, [pc, #80]	; (800df88 <HAL_UART_IRQHandler+0x2b8>)
 800df38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fc f858 	bl	8009ff4 <HAL_DMA_Abort_IT>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d017      	beq.n	800df7a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800df54:	4610      	mov	r0, r2
 800df56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df58:	e00f      	b.n	800df7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f9e4 	bl	800e328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df60:	e00b      	b.n	800df7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f9e0 	bl	800e328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df68:	e007      	b.n	800df7a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f9dc 	bl	800e328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	2200      	movs	r2, #0
 800df74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800df78:	e1b7      	b.n	800e2ea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df7a:	bf00      	nop
    return;
 800df7c:	e1b5      	b.n	800e2ea <HAL_UART_IRQHandler+0x61a>
 800df7e:	bf00      	nop
 800df80:	10000001 	.word	0x10000001
 800df84:	04000120 	.word	0x04000120
 800df88:	0800efd9 	.word	0x0800efd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df90:	2b01      	cmp	r3, #1
 800df92:	f040 814a 	bne.w	800e22a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800df96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df9a:	f003 0310 	and.w	r3, r3, #16
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	f000 8143 	beq.w	800e22a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dfa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dfa8:	f003 0310 	and.w	r3, r3, #16
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	f000 813c 	beq.w	800e22a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2210      	movs	r2, #16
 800dfb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfc4:	2b40      	cmp	r3, #64	; 0x40
 800dfc6:	f040 80b5 	bne.w	800e134 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dfd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 8187 	beq.w	800e2ee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dfea:	429a      	cmp	r2, r3
 800dfec:	f080 817f 	bcs.w	800e2ee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f003 0320 	and.w	r3, r3, #32
 800e006:	2b00      	cmp	r3, #0
 800e008:	f040 8086 	bne.w	800e118 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e014:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e018:	e853 3f00 	ldrex	r3, [r3]
 800e01c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	461a      	mov	r2, r3
 800e032:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e036:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e03a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e03e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e042:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e04e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e052:	2b00      	cmp	r3, #0
 800e054:	d1da      	bne.n	800e00c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	3308      	adds	r3, #8
 800e05c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e05e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e060:	e853 3f00 	ldrex	r3, [r3]
 800e064:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e066:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e068:	f023 0301 	bic.w	r3, r3, #1
 800e06c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	3308      	adds	r3, #8
 800e076:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e07a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e07e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e080:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e082:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e086:	e841 2300 	strex	r3, r2, [r1]
 800e08a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e08c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1e1      	bne.n	800e056 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	3308      	adds	r3, #8
 800e098:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e09a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e09c:	e853 3f00 	ldrex	r3, [r3]
 800e0a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e0a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e0a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e0b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e0b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e0bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e0be:	e841 2300 	strex	r3, r2, [r1]
 800e0c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e0c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d1e3      	bne.n	800e092 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2220      	movs	r2, #32
 800e0ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e0:	e853 3f00 	ldrex	r3, [r3]
 800e0e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e8:	f023 0310 	bic.w	r3, r3, #16
 800e0ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e0fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e102:	e841 2300 	strex	r3, r2, [r1]
 800e106:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d1e4      	bne.n	800e0d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e112:	4618      	mov	r0, r3
 800e114:	f7fb ff15 	bl	8009f42 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e124:	b29b      	uxth	r3, r3
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	b29b      	uxth	r3, r3
 800e12a:	4619      	mov	r1, r3
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f905 	bl	800e33c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e132:	e0dc      	b.n	800e2ee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e140:	b29b      	uxth	r3, r3
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e14e:	b29b      	uxth	r3, r3
 800e150:	2b00      	cmp	r3, #0
 800e152:	f000 80ce 	beq.w	800e2f2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800e156:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f000 80c9 	beq.w	800e2f2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e174:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	461a      	mov	r2, r3
 800e17e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e182:	647b      	str	r3, [r7, #68]	; 0x44
 800e184:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e186:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e188:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e18a:	e841 2300 	strex	r3, r2, [r1]
 800e18e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e192:	2b00      	cmp	r3, #0
 800e194:	d1e4      	bne.n	800e160 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3308      	adds	r3, #8
 800e19c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	e853 3f00 	ldrex	r3, [r3]
 800e1a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e1ac:	f023 0301 	bic.w	r3, r3, #1
 800e1b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	3308      	adds	r3, #8
 800e1ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e1be:	633a      	str	r2, [r7, #48]	; 0x30
 800e1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c6:	e841 2300 	strex	r3, r2, [r1]
 800e1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1e1      	bne.n	800e196 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2220      	movs	r2, #32
 800e1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	e853 3f00 	ldrex	r3, [r3]
 800e1f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f023 0310 	bic.w	r3, r3, #16
 800e1fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e208:	61fb      	str	r3, [r7, #28]
 800e20a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20c:	69b9      	ldr	r1, [r7, #24]
 800e20e:	69fa      	ldr	r2, [r7, #28]
 800e210:	e841 2300 	strex	r3, r2, [r1]
 800e214:	617b      	str	r3, [r7, #20]
   return(result);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d1e4      	bne.n	800e1e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e21c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e220:	4619      	mov	r1, r3
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f88a 	bl	800e33c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e228:	e063      	b.n	800e2f2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e22a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e22e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00e      	beq.n	800e254 <HAL_UART_IRQHandler+0x584>
 800e236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d008      	beq.n	800e254 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e24a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f001 fb61 	bl	800f914 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e252:	e051      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d014      	beq.n	800e28a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d105      	bne.n	800e278 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e26c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e270:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d008      	beq.n	800e28a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d03a      	beq.n	800e2f6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	4798      	blx	r3
    }
    return;
 800e288:	e035      	b.n	800e2f6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e292:	2b00      	cmp	r3, #0
 800e294:	d009      	beq.n	800e2aa <HAL_UART_IRQHandler+0x5da>
 800e296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f000 feae 	bl	800f004 <UART_EndTransmit_IT>
    return;
 800e2a8:	e026      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e2aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d009      	beq.n	800e2ca <HAL_UART_IRQHandler+0x5fa>
 800e2b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d003      	beq.n	800e2ca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f001 fb3a 	bl	800f93c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2c8:	e016      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e2ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e2ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d010      	beq.n	800e2f8 <HAL_UART_IRQHandler+0x628>
 800e2d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	da0c      	bge.n	800e2f8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f001 fb22 	bl	800f928 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e2e4:	e008      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
      return;
 800e2e6:	bf00      	nop
 800e2e8:	e006      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
    return;
 800e2ea:	bf00      	nop
 800e2ec:	e004      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
      return;
 800e2ee:	bf00      	nop
 800e2f0:	e002      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
      return;
 800e2f2:	bf00      	nop
 800e2f4:	e000      	b.n	800e2f8 <HAL_UART_IRQHandler+0x628>
    return;
 800e2f6:	bf00      	nop
  }
}
 800e2f8:	37e8      	adds	r7, #232	; 0xe8
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop

0800e300 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e308:	bf00      	nop
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e314:	b480      	push	{r7}
 800e316:	b083      	sub	sp, #12
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e31c:	bf00      	nop
 800e31e:	370c      	adds	r7, #12
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr

0800e328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e330:	bf00      	nop
 800e332:	370c      	adds	r7, #12
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b083      	sub	sp, #12
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e348:	bf00      	nop
 800e34a:	370c      	adds	r7, #12
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr

0800e354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e358:	b08c      	sub	sp, #48	; 0x30
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e35e:	2300      	movs	r3, #0
 800e360:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	689a      	ldr	r2, [r3, #8]
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	431a      	orrs	r2, r3
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	695b      	ldr	r3, [r3, #20]
 800e372:	431a      	orrs	r2, r3
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	4313      	orrs	r3, r2
 800e37a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	4baa      	ldr	r3, [pc, #680]	; (800e62c <UART_SetConfig+0x2d8>)
 800e384:	4013      	ands	r3, r2
 800e386:	697a      	ldr	r2, [r7, #20]
 800e388:	6812      	ldr	r2, [r2, #0]
 800e38a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e38c:	430b      	orrs	r3, r1
 800e38e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e390:	697b      	ldr	r3, [r7, #20]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	68da      	ldr	r2, [r3, #12]
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	430a      	orrs	r2, r1
 800e3a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	699b      	ldr	r3, [r3, #24]
 800e3aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a9f      	ldr	r2, [pc, #636]	; (800e630 <UART_SetConfig+0x2dc>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d004      	beq.n	800e3c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689b      	ldr	r3, [r3, #8]
 800e3c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800e3ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800e3ce:	697a      	ldr	r2, [r7, #20]
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3d4:	430b      	orrs	r3, r1
 800e3d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3de:	f023 010f 	bic.w	r1, r3, #15
 800e3e2:	697b      	ldr	r3, [r7, #20]
 800e3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	430a      	orrs	r2, r1
 800e3ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a90      	ldr	r2, [pc, #576]	; (800e634 <UART_SetConfig+0x2e0>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d125      	bne.n	800e444 <UART_SetConfig+0xf0>
 800e3f8:	4b8f      	ldr	r3, [pc, #572]	; (800e638 <UART_SetConfig+0x2e4>)
 800e3fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3fe:	f003 0303 	and.w	r3, r3, #3
 800e402:	2b03      	cmp	r3, #3
 800e404:	d81a      	bhi.n	800e43c <UART_SetConfig+0xe8>
 800e406:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <UART_SetConfig+0xb8>)
 800e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40c:	0800e41d 	.word	0x0800e41d
 800e410:	0800e42d 	.word	0x0800e42d
 800e414:	0800e425 	.word	0x0800e425
 800e418:	0800e435 	.word	0x0800e435
 800e41c:	2301      	movs	r3, #1
 800e41e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e422:	e116      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e424:	2302      	movs	r3, #2
 800e426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e42a:	e112      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e42c:	2304      	movs	r3, #4
 800e42e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e432:	e10e      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e434:	2308      	movs	r3, #8
 800e436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e43a:	e10a      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e43c:	2310      	movs	r3, #16
 800e43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e442:	e106      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	4a7c      	ldr	r2, [pc, #496]	; (800e63c <UART_SetConfig+0x2e8>)
 800e44a:	4293      	cmp	r3, r2
 800e44c:	d138      	bne.n	800e4c0 <UART_SetConfig+0x16c>
 800e44e:	4b7a      	ldr	r3, [pc, #488]	; (800e638 <UART_SetConfig+0x2e4>)
 800e450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e454:	f003 030c 	and.w	r3, r3, #12
 800e458:	2b0c      	cmp	r3, #12
 800e45a:	d82d      	bhi.n	800e4b8 <UART_SetConfig+0x164>
 800e45c:	a201      	add	r2, pc, #4	; (adr r2, 800e464 <UART_SetConfig+0x110>)
 800e45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e462:	bf00      	nop
 800e464:	0800e499 	.word	0x0800e499
 800e468:	0800e4b9 	.word	0x0800e4b9
 800e46c:	0800e4b9 	.word	0x0800e4b9
 800e470:	0800e4b9 	.word	0x0800e4b9
 800e474:	0800e4a9 	.word	0x0800e4a9
 800e478:	0800e4b9 	.word	0x0800e4b9
 800e47c:	0800e4b9 	.word	0x0800e4b9
 800e480:	0800e4b9 	.word	0x0800e4b9
 800e484:	0800e4a1 	.word	0x0800e4a1
 800e488:	0800e4b9 	.word	0x0800e4b9
 800e48c:	0800e4b9 	.word	0x0800e4b9
 800e490:	0800e4b9 	.word	0x0800e4b9
 800e494:	0800e4b1 	.word	0x0800e4b1
 800e498:	2300      	movs	r3, #0
 800e49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e49e:	e0d8      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4a6:	e0d4      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4a8:	2304      	movs	r3, #4
 800e4aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4ae:	e0d0      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4b6:	e0cc      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4b8:	2310      	movs	r3, #16
 800e4ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4be:	e0c8      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a5e      	ldr	r2, [pc, #376]	; (800e640 <UART_SetConfig+0x2ec>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d125      	bne.n	800e516 <UART_SetConfig+0x1c2>
 800e4ca:	4b5b      	ldr	r3, [pc, #364]	; (800e638 <UART_SetConfig+0x2e4>)
 800e4cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e4d4:	2b30      	cmp	r3, #48	; 0x30
 800e4d6:	d016      	beq.n	800e506 <UART_SetConfig+0x1b2>
 800e4d8:	2b30      	cmp	r3, #48	; 0x30
 800e4da:	d818      	bhi.n	800e50e <UART_SetConfig+0x1ba>
 800e4dc:	2b20      	cmp	r3, #32
 800e4de:	d00a      	beq.n	800e4f6 <UART_SetConfig+0x1a2>
 800e4e0:	2b20      	cmp	r3, #32
 800e4e2:	d814      	bhi.n	800e50e <UART_SetConfig+0x1ba>
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <UART_SetConfig+0x19a>
 800e4e8:	2b10      	cmp	r3, #16
 800e4ea:	d008      	beq.n	800e4fe <UART_SetConfig+0x1aa>
 800e4ec:	e00f      	b.n	800e50e <UART_SetConfig+0x1ba>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4f4:	e0ad      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e4fc:	e0a9      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e4fe:	2304      	movs	r3, #4
 800e500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e504:	e0a5      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e506:	2308      	movs	r3, #8
 800e508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e50c:	e0a1      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e50e:	2310      	movs	r3, #16
 800e510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e514:	e09d      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a4a      	ldr	r2, [pc, #296]	; (800e644 <UART_SetConfig+0x2f0>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d125      	bne.n	800e56c <UART_SetConfig+0x218>
 800e520:	4b45      	ldr	r3, [pc, #276]	; (800e638 <UART_SetConfig+0x2e4>)
 800e522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e526:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e52a:	2bc0      	cmp	r3, #192	; 0xc0
 800e52c:	d016      	beq.n	800e55c <UART_SetConfig+0x208>
 800e52e:	2bc0      	cmp	r3, #192	; 0xc0
 800e530:	d818      	bhi.n	800e564 <UART_SetConfig+0x210>
 800e532:	2b80      	cmp	r3, #128	; 0x80
 800e534:	d00a      	beq.n	800e54c <UART_SetConfig+0x1f8>
 800e536:	2b80      	cmp	r3, #128	; 0x80
 800e538:	d814      	bhi.n	800e564 <UART_SetConfig+0x210>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <UART_SetConfig+0x1f0>
 800e53e:	2b40      	cmp	r3, #64	; 0x40
 800e540:	d008      	beq.n	800e554 <UART_SetConfig+0x200>
 800e542:	e00f      	b.n	800e564 <UART_SetConfig+0x210>
 800e544:	2300      	movs	r3, #0
 800e546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e54a:	e082      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e54c:	2302      	movs	r3, #2
 800e54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e552:	e07e      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e554:	2304      	movs	r3, #4
 800e556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e55a:	e07a      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e55c:	2308      	movs	r3, #8
 800e55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e562:	e076      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e564:	2310      	movs	r3, #16
 800e566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e56a:	e072      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a35      	ldr	r2, [pc, #212]	; (800e648 <UART_SetConfig+0x2f4>)
 800e572:	4293      	cmp	r3, r2
 800e574:	d12a      	bne.n	800e5cc <UART_SetConfig+0x278>
 800e576:	4b30      	ldr	r3, [pc, #192]	; (800e638 <UART_SetConfig+0x2e4>)
 800e578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e57c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e584:	d01a      	beq.n	800e5bc <UART_SetConfig+0x268>
 800e586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e58a:	d81b      	bhi.n	800e5c4 <UART_SetConfig+0x270>
 800e58c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e590:	d00c      	beq.n	800e5ac <UART_SetConfig+0x258>
 800e592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e596:	d815      	bhi.n	800e5c4 <UART_SetConfig+0x270>
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d003      	beq.n	800e5a4 <UART_SetConfig+0x250>
 800e59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5a0:	d008      	beq.n	800e5b4 <UART_SetConfig+0x260>
 800e5a2:	e00f      	b.n	800e5c4 <UART_SetConfig+0x270>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5aa:	e052      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e5ac:	2302      	movs	r3, #2
 800e5ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5b2:	e04e      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e5b4:	2304      	movs	r3, #4
 800e5b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ba:	e04a      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e5bc:	2308      	movs	r3, #8
 800e5be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5c2:	e046      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e5c4:	2310      	movs	r3, #16
 800e5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e5ca:	e042      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a17      	ldr	r2, [pc, #92]	; (800e630 <UART_SetConfig+0x2dc>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d13a      	bne.n	800e64c <UART_SetConfig+0x2f8>
 800e5d6:	4b18      	ldr	r3, [pc, #96]	; (800e638 <UART_SetConfig+0x2e4>)
 800e5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e5e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5e4:	d01a      	beq.n	800e61c <UART_SetConfig+0x2c8>
 800e5e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5ea:	d81b      	bhi.n	800e624 <UART_SetConfig+0x2d0>
 800e5ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5f0:	d00c      	beq.n	800e60c <UART_SetConfig+0x2b8>
 800e5f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5f6:	d815      	bhi.n	800e624 <UART_SetConfig+0x2d0>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d003      	beq.n	800e604 <UART_SetConfig+0x2b0>
 800e5fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e600:	d008      	beq.n	800e614 <UART_SetConfig+0x2c0>
 800e602:	e00f      	b.n	800e624 <UART_SetConfig+0x2d0>
 800e604:	2300      	movs	r3, #0
 800e606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e60a:	e022      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e60c:	2302      	movs	r3, #2
 800e60e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e612:	e01e      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e614:	2304      	movs	r3, #4
 800e616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e61a:	e01a      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e61c:	2308      	movs	r3, #8
 800e61e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e622:	e016      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e624:	2310      	movs	r3, #16
 800e626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e62a:	e012      	b.n	800e652 <UART_SetConfig+0x2fe>
 800e62c:	cfff69f3 	.word	0xcfff69f3
 800e630:	40008000 	.word	0x40008000
 800e634:	40013800 	.word	0x40013800
 800e638:	40021000 	.word	0x40021000
 800e63c:	40004400 	.word	0x40004400
 800e640:	40004800 	.word	0x40004800
 800e644:	40004c00 	.word	0x40004c00
 800e648:	40005000 	.word	0x40005000
 800e64c:	2310      	movs	r3, #16
 800e64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	4aae      	ldr	r2, [pc, #696]	; (800e910 <UART_SetConfig+0x5bc>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	f040 8097 	bne.w	800e78c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e65e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e662:	2b08      	cmp	r3, #8
 800e664:	d823      	bhi.n	800e6ae <UART_SetConfig+0x35a>
 800e666:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <UART_SetConfig+0x318>)
 800e668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66c:	0800e691 	.word	0x0800e691
 800e670:	0800e6af 	.word	0x0800e6af
 800e674:	0800e699 	.word	0x0800e699
 800e678:	0800e6af 	.word	0x0800e6af
 800e67c:	0800e69f 	.word	0x0800e69f
 800e680:	0800e6af 	.word	0x0800e6af
 800e684:	0800e6af 	.word	0x0800e6af
 800e688:	0800e6af 	.word	0x0800e6af
 800e68c:	0800e6a7 	.word	0x0800e6a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e690:	f7fd fb9e 	bl	800bdd0 <HAL_RCC_GetPCLK1Freq>
 800e694:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e696:	e010      	b.n	800e6ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e698:	4b9e      	ldr	r3, [pc, #632]	; (800e914 <UART_SetConfig+0x5c0>)
 800e69a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e69c:	e00d      	b.n	800e6ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e69e:	f7fd fb29 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800e6a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e6a4:	e009      	b.n	800e6ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e6aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e6ac:	e005      	b.n	800e6ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e6b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 8130 	beq.w	800e922 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6c6:	4a94      	ldr	r2, [pc, #592]	; (800e918 <UART_SetConfig+0x5c4>)
 800e6c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	685a      	ldr	r2, [r3, #4]
 800e6da:	4613      	mov	r3, r2
 800e6dc:	005b      	lsls	r3, r3, #1
 800e6de:	4413      	add	r3, r2
 800e6e0:	69ba      	ldr	r2, [r7, #24]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d305      	bcc.n	800e6f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e6e6:	697b      	ldr	r3, [r7, #20]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e6ec:	69ba      	ldr	r2, [r7, #24]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d903      	bls.n	800e6fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e6f8:	e113      	b.n	800e922 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	60bb      	str	r3, [r7, #8]
 800e700:	60fa      	str	r2, [r7, #12]
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e706:	4a84      	ldr	r2, [pc, #528]	; (800e918 <UART_SetConfig+0x5c4>)
 800e708:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	2200      	movs	r2, #0
 800e710:	603b      	str	r3, [r7, #0]
 800e712:	607a      	str	r2, [r7, #4]
 800e714:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e71c:	f7f6 fa4e 	bl	8004bbc <__aeabi_uldivmod>
 800e720:	4602      	mov	r2, r0
 800e722:	460b      	mov	r3, r1
 800e724:	4610      	mov	r0, r2
 800e726:	4619      	mov	r1, r3
 800e728:	f04f 0200 	mov.w	r2, #0
 800e72c:	f04f 0300 	mov.w	r3, #0
 800e730:	020b      	lsls	r3, r1, #8
 800e732:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e736:	0202      	lsls	r2, r0, #8
 800e738:	6979      	ldr	r1, [r7, #20]
 800e73a:	6849      	ldr	r1, [r1, #4]
 800e73c:	0849      	lsrs	r1, r1, #1
 800e73e:	2000      	movs	r0, #0
 800e740:	460c      	mov	r4, r1
 800e742:	4605      	mov	r5, r0
 800e744:	eb12 0804 	adds.w	r8, r2, r4
 800e748:	eb43 0905 	adc.w	r9, r3, r5
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	469a      	mov	sl, r3
 800e754:	4693      	mov	fp, r2
 800e756:	4652      	mov	r2, sl
 800e758:	465b      	mov	r3, fp
 800e75a:	4640      	mov	r0, r8
 800e75c:	4649      	mov	r1, r9
 800e75e:	f7f6 fa2d 	bl	8004bbc <__aeabi_uldivmod>
 800e762:	4602      	mov	r2, r0
 800e764:	460b      	mov	r3, r1
 800e766:	4613      	mov	r3, r2
 800e768:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e770:	d308      	bcc.n	800e784 <UART_SetConfig+0x430>
 800e772:	6a3b      	ldr	r3, [r7, #32]
 800e774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e778:	d204      	bcs.n	800e784 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	6a3a      	ldr	r2, [r7, #32]
 800e780:	60da      	str	r2, [r3, #12]
 800e782:	e0ce      	b.n	800e922 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e78a:	e0ca      	b.n	800e922 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	69db      	ldr	r3, [r3, #28]
 800e790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e794:	d166      	bne.n	800e864 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800e796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e79a:	2b08      	cmp	r3, #8
 800e79c:	d827      	bhi.n	800e7ee <UART_SetConfig+0x49a>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <UART_SetConfig+0x450>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7c9 	.word	0x0800e7c9
 800e7a8:	0800e7d1 	.word	0x0800e7d1
 800e7ac:	0800e7d9 	.word	0x0800e7d9
 800e7b0:	0800e7ef 	.word	0x0800e7ef
 800e7b4:	0800e7df 	.word	0x0800e7df
 800e7b8:	0800e7ef 	.word	0x0800e7ef
 800e7bc:	0800e7ef 	.word	0x0800e7ef
 800e7c0:	0800e7ef 	.word	0x0800e7ef
 800e7c4:	0800e7e7 	.word	0x0800e7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7c8:	f7fd fb02 	bl	800bdd0 <HAL_RCC_GetPCLK1Freq>
 800e7cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7ce:	e014      	b.n	800e7fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7d0:	f7fd fb14 	bl	800bdfc <HAL_RCC_GetPCLK2Freq>
 800e7d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7d6:	e010      	b.n	800e7fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e7d8:	4b4e      	ldr	r3, [pc, #312]	; (800e914 <UART_SetConfig+0x5c0>)
 800e7da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7dc:	e00d      	b.n	800e7fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7de:	f7fd fa89 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800e7e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e7e4:	e009      	b.n	800e7fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e7ec:	e005      	b.n	800e7fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e7f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 8090 	beq.w	800e922 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e806:	4a44      	ldr	r2, [pc, #272]	; (800e918 <UART_SetConfig+0x5c4>)
 800e808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e80c:	461a      	mov	r2, r3
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	fbb3 f3f2 	udiv	r3, r3, r2
 800e814:	005a      	lsls	r2, r3, #1
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	085b      	lsrs	r3, r3, #1
 800e81c:	441a      	add	r2, r3
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	fbb2 f3f3 	udiv	r3, r2, r3
 800e826:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e828:	6a3b      	ldr	r3, [r7, #32]
 800e82a:	2b0f      	cmp	r3, #15
 800e82c:	d916      	bls.n	800e85c <UART_SetConfig+0x508>
 800e82e:	6a3b      	ldr	r3, [r7, #32]
 800e830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e834:	d212      	bcs.n	800e85c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e836:	6a3b      	ldr	r3, [r7, #32]
 800e838:	b29b      	uxth	r3, r3
 800e83a:	f023 030f 	bic.w	r3, r3, #15
 800e83e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	085b      	lsrs	r3, r3, #1
 800e844:	b29b      	uxth	r3, r3
 800e846:	f003 0307 	and.w	r3, r3, #7
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	8bfb      	ldrh	r3, [r7, #30]
 800e84e:	4313      	orrs	r3, r2
 800e850:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	8bfa      	ldrh	r2, [r7, #30]
 800e858:	60da      	str	r2, [r3, #12]
 800e85a:	e062      	b.n	800e922 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800e862:	e05e      	b.n	800e922 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e864:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e868:	2b08      	cmp	r3, #8
 800e86a:	d828      	bhi.n	800e8be <UART_SetConfig+0x56a>
 800e86c:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <UART_SetConfig+0x520>)
 800e86e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e872:	bf00      	nop
 800e874:	0800e899 	.word	0x0800e899
 800e878:	0800e8a1 	.word	0x0800e8a1
 800e87c:	0800e8a9 	.word	0x0800e8a9
 800e880:	0800e8bf 	.word	0x0800e8bf
 800e884:	0800e8af 	.word	0x0800e8af
 800e888:	0800e8bf 	.word	0x0800e8bf
 800e88c:	0800e8bf 	.word	0x0800e8bf
 800e890:	0800e8bf 	.word	0x0800e8bf
 800e894:	0800e8b7 	.word	0x0800e8b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e898:	f7fd fa9a 	bl	800bdd0 <HAL_RCC_GetPCLK1Freq>
 800e89c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e89e:	e014      	b.n	800e8ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e8a0:	f7fd faac 	bl	800bdfc <HAL_RCC_GetPCLK2Freq>
 800e8a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e8a6:	e010      	b.n	800e8ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e8a8:	4b1a      	ldr	r3, [pc, #104]	; (800e914 <UART_SetConfig+0x5c0>)
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e8ac:	e00d      	b.n	800e8ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e8ae:	f7fd fa21 	bl	800bcf4 <HAL_RCC_GetSysClockFreq>
 800e8b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800e8b4:	e009      	b.n	800e8ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800e8bc:	e005      	b.n	800e8ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800e8c8:	bf00      	nop
    }

    if (pclk != 0U)
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d028      	beq.n	800e922 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d4:	4a10      	ldr	r2, [pc, #64]	; (800e918 <UART_SetConfig+0x5c4>)
 800e8d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8da:	461a      	mov	r2, r3
 800e8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8de:	fbb3 f2f2 	udiv	r2, r3, r2
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	085b      	lsrs	r3, r3, #1
 800e8e8:	441a      	add	r2, r3
 800e8ea:	697b      	ldr	r3, [r7, #20]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800e8f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8f4:	6a3b      	ldr	r3, [r7, #32]
 800e8f6:	2b0f      	cmp	r3, #15
 800e8f8:	d910      	bls.n	800e91c <UART_SetConfig+0x5c8>
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e900:	d20c      	bcs.n	800e91c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e902:	6a3b      	ldr	r3, [r7, #32]
 800e904:	b29a      	uxth	r2, r3
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	60da      	str	r2, [r3, #12]
 800e90c:	e009      	b.n	800e922 <UART_SetConfig+0x5ce>
 800e90e:	bf00      	nop
 800e910:	40008000 	.word	0x40008000
 800e914:	00f42400 	.word	0x00f42400
 800e918:	08013200 	.word	0x08013200
      }
      else
      {
        ret = HAL_ERROR;
 800e91c:	2301      	movs	r3, #1
 800e91e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	2201      	movs	r2, #1
 800e926:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2201      	movs	r2, #1
 800e92e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	2200      	movs	r2, #0
 800e936:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	2200      	movs	r2, #0
 800e93c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e93e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800e942:	4618      	mov	r0, r3
 800e944:	3730      	adds	r7, #48	; 0x30
 800e946:	46bd      	mov	sp, r7
 800e948:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e94c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00a      	beq.n	800e976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	430a      	orrs	r2, r1
 800e974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e97a:	f003 0302 	and.w	r3, r3, #2
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00a      	beq.n	800e998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	685b      	ldr	r3, [r3, #4]
 800e988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	430a      	orrs	r2, r1
 800e996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e99c:	f003 0304 	and.w	r3, r3, #4
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00a      	beq.n	800e9ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	430a      	orrs	r2, r1
 800e9b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9be:	f003 0308 	and.w	r3, r3, #8
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	430a      	orrs	r2, r1
 800e9da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9e0:	f003 0310 	and.w	r3, r3, #16
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00a      	beq.n	800e9fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	430a      	orrs	r2, r1
 800e9fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00a      	beq.n	800ea20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	430a      	orrs	r2, r1
 800ea1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d01a      	beq.n	800ea62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	685b      	ldr	r3, [r3, #4]
 800ea32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	430a      	orrs	r2, r1
 800ea40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea4a:	d10a      	bne.n	800ea62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	430a      	orrs	r2, r1
 800ea60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d00a      	beq.n	800ea84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	430a      	orrs	r2, r1
 800ea82:	605a      	str	r2, [r3, #4]
  }
}
 800ea84:	bf00      	nop
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af02      	add	r7, sp, #8
 800ea96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800eaa0:	f7f9 fe12 	bl	80086c8 <HAL_GetTick>
 800eaa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f003 0308 	and.w	r3, r3, #8
 800eab0:	2b08      	cmp	r3, #8
 800eab2:	d10e      	bne.n	800ead2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2200      	movs	r2, #0
 800eabe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f82f 	bl	800eb26 <UART_WaitOnFlagUntilTimeout>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eace:	2303      	movs	r3, #3
 800ead0:	e025      	b.n	800eb1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f003 0304 	and.w	r3, r3, #4
 800eadc:	2b04      	cmp	r3, #4
 800eade:	d10e      	bne.n	800eafe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eae4:	9300      	str	r3, [sp, #0]
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f819 	bl	800eb26 <UART_WaitOnFlagUntilTimeout>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eafa:	2303      	movs	r3, #3
 800eafc:	e00f      	b.n	800eb1e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2220      	movs	r2, #32
 800eb02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}

0800eb26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb26:	b580      	push	{r7, lr}
 800eb28:	b09c      	sub	sp, #112	; 0x70
 800eb2a:	af00      	add	r7, sp, #0
 800eb2c:	60f8      	str	r0, [r7, #12]
 800eb2e:	60b9      	str	r1, [r7, #8]
 800eb30:	603b      	str	r3, [r7, #0]
 800eb32:	4613      	mov	r3, r2
 800eb34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb36:	e0a9      	b.n	800ec8c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb3e:	f000 80a5 	beq.w	800ec8c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb42:	f7f9 fdc1 	bl	80086c8 <HAL_GetTick>
 800eb46:	4602      	mov	r2, r0
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d302      	bcc.n	800eb58 <UART_WaitOnFlagUntilTimeout+0x32>
 800eb52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d140      	bne.n	800ebda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb60:	e853 3f00 	ldrex	r3, [r3]
 800eb64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800eb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800eb6c:	667b      	str	r3, [r7, #100]	; 0x64
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eb76:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800eb7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eb7e:	e841 2300 	strex	r3, r2, [r1]
 800eb82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800eb84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d1e6      	bne.n	800eb58 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb94:	e853 3f00 	ldrex	r3, [r3]
 800eb98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9c:	f023 0301 	bic.w	r3, r3, #1
 800eba0:	663b      	str	r3, [r7, #96]	; 0x60
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3308      	adds	r3, #8
 800eba8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ebaa:	64ba      	str	r2, [r7, #72]	; 0x48
 800ebac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ebb2:	e841 2300 	strex	r3, r2, [r1]
 800ebb6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ebb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e5      	bne.n	800eb8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2220      	movs	r2, #32
 800ebca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	e069      	b.n	800ecae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f003 0304 	and.w	r3, r3, #4
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d051      	beq.n	800ec8c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	69db      	ldr	r3, [r3, #28]
 800ebee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ebf6:	d149      	bne.n	800ec8c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ec00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0a:	e853 3f00 	ldrex	r3, [r3]
 800ec0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ec16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec20:	637b      	str	r3, [r7, #52]	; 0x34
 800ec22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec28:	e841 2300 	strex	r3, r2, [r1]
 800ec2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ec2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1e6      	bne.n	800ec02 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	3308      	adds	r3, #8
 800ec3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	e853 3f00 	ldrex	r3, [r3]
 800ec42:	613b      	str	r3, [r7, #16]
   return(result);
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	f023 0301 	bic.w	r3, r3, #1
 800ec4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	3308      	adds	r3, #8
 800ec52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ec54:	623a      	str	r2, [r7, #32]
 800ec56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec58:	69f9      	ldr	r1, [r7, #28]
 800ec5a:	6a3a      	ldr	r2, [r7, #32]
 800ec5c:	e841 2300 	strex	r3, r2, [r1]
 800ec60:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec62:	69bb      	ldr	r3, [r7, #24]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1e5      	bne.n	800ec34 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2220      	movs	r2, #32
 800ec6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2220      	movs	r2, #32
 800ec74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2220      	movs	r2, #32
 800ec7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ec88:	2303      	movs	r3, #3
 800ec8a:	e010      	b.n	800ecae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	69da      	ldr	r2, [r3, #28]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	4013      	ands	r3, r2
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	bf0c      	ite	eq
 800ec9c:	2301      	moveq	r3, #1
 800ec9e:	2300      	movne	r3, #0
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	461a      	mov	r2, r3
 800eca4:	79fb      	ldrb	r3, [r7, #7]
 800eca6:	429a      	cmp	r2, r3
 800eca8:	f43f af46 	beq.w	800eb38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3770      	adds	r7, #112	; 0x70
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b0a3      	sub	sp, #140	; 0x8c
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	4613      	mov	r3, r2
 800ecc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	68ba      	ldr	r2, [r7, #8]
 800ecca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	88fa      	ldrh	r2, [r7, #6]
 800ecd0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	88fa      	ldrh	r2, [r7, #6]
 800ecd8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ecea:	d10e      	bne.n	800ed0a <UART_Start_Receive_IT+0x52>
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d105      	bne.n	800ed00 <UART_Start_Receive_IT+0x48>
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ecfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ecfe:	e02d      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	22ff      	movs	r2, #255	; 0xff
 800ed04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed08:	e028      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d10d      	bne.n	800ed2e <UART_Start_Receive_IT+0x76>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	691b      	ldr	r3, [r3, #16]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d104      	bne.n	800ed24 <UART_Start_Receive_IT+0x6c>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	22ff      	movs	r2, #255	; 0xff
 800ed1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed22:	e01b      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	227f      	movs	r2, #127	; 0x7f
 800ed28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed2c:	e016      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed36:	d10d      	bne.n	800ed54 <UART_Start_Receive_IT+0x9c>
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	691b      	ldr	r3, [r3, #16]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d104      	bne.n	800ed4a <UART_Start_Receive_IT+0x92>
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	227f      	movs	r2, #127	; 0x7f
 800ed44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed48:	e008      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	223f      	movs	r2, #63	; 0x3f
 800ed4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ed52:	e003      	b.n	800ed5c <UART_Start_Receive_IT+0xa4>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2200      	movs	r2, #0
 800ed58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	2222      	movs	r2, #34	; 0x22
 800ed68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed76:	e853 3f00 	ldrex	r3, [r3]
 800ed7a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ed7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed7e:	f043 0301 	orr.w	r3, r3, #1
 800ed82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	3308      	adds	r3, #8
 800ed8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ed90:	673a      	str	r2, [r7, #112]	; 0x70
 800ed92:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed94:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ed96:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ed98:	e841 2300 	strex	r3, r2, [r1]
 800ed9c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800ed9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d1e3      	bne.n	800ed6c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eda8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edac:	d153      	bne.n	800ee56 <UART_Start_Receive_IT+0x19e>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800edb4:	88fa      	ldrh	r2, [r7, #6]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d34d      	bcc.n	800ee56 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	689b      	ldr	r3, [r3, #8]
 800edbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800edc2:	d107      	bne.n	800edd4 <UART_Start_Receive_IT+0x11c>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	691b      	ldr	r3, [r3, #16]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d103      	bne.n	800edd4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	4a4b      	ldr	r2, [pc, #300]	; (800eefc <UART_Start_Receive_IT+0x244>)
 800edd0:	671a      	str	r2, [r3, #112]	; 0x70
 800edd2:	e002      	b.n	800edda <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	4a4a      	ldr	r2, [pc, #296]	; (800ef00 <UART_Start_Receive_IT+0x248>)
 800edd8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d01a      	beq.n	800ee20 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edf2:	e853 3f00 	ldrex	r3, [r3]
 800edf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800edf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edfe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	461a      	mov	r2, r3
 800ee08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee0e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee10:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ee12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ee14:	e841 2300 	strex	r3, r2, [r1]
 800ee18:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ee1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1e4      	bne.n	800edea <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	3308      	adds	r3, #8
 800ee26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee2a:	e853 3f00 	ldrex	r3, [r3]
 800ee2e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee36:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee40:	64ba      	str	r2, [r7, #72]	; 0x48
 800ee42:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee44:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee48:	e841 2300 	strex	r3, r2, [r1]
 800ee4c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ee4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1e5      	bne.n	800ee20 <UART_Start_Receive_IT+0x168>
 800ee54:	e04a      	b.n	800eeec <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	689b      	ldr	r3, [r3, #8]
 800ee5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee5e:	d107      	bne.n	800ee70 <UART_Start_Receive_IT+0x1b8>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d103      	bne.n	800ee70 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	4a26      	ldr	r2, [pc, #152]	; (800ef04 <UART_Start_Receive_IT+0x24c>)
 800ee6c:	671a      	str	r2, [r3, #112]	; 0x70
 800ee6e:	e002      	b.n	800ee76 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	4a25      	ldr	r2, [pc, #148]	; (800ef08 <UART_Start_Receive_IT+0x250>)
 800ee74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	691b      	ldr	r3, [r3, #16]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d019      	beq.n	800eeba <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	e853 3f00 	ldrex	r3, [r3]
 800ee92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee96:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ee9a:	677b      	str	r3, [r7, #116]	; 0x74
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	461a      	mov	r2, r3
 800eea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eea4:	637b      	str	r3, [r7, #52]	; 0x34
 800eea6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eeaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eeac:	e841 2300 	strex	r3, r2, [r1]
 800eeb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eeb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d1e6      	bne.n	800ee86 <UART_Start_Receive_IT+0x1ce>
 800eeb8:	e018      	b.n	800eeec <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	e853 3f00 	ldrex	r3, [r3]
 800eec6:	613b      	str	r3, [r7, #16]
   return(result);
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	f043 0320 	orr.w	r3, r3, #32
 800eece:	67bb      	str	r3, [r7, #120]	; 0x78
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	461a      	mov	r2, r3
 800eed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eed8:	623b      	str	r3, [r7, #32]
 800eeda:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eedc:	69f9      	ldr	r1, [r7, #28]
 800eede:	6a3a      	ldr	r2, [r7, #32]
 800eee0:	e841 2300 	strex	r3, r2, [r1]
 800eee4:	61bb      	str	r3, [r7, #24]
   return(result);
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d1e6      	bne.n	800eeba <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	378c      	adds	r7, #140	; 0x8c
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	0800f615 	.word	0x0800f615
 800ef00:	0800f31d 	.word	0x0800f31d
 800ef04:	0800f1bb 	.word	0x0800f1bb
 800ef08:	0800f05b 	.word	0x0800f05b

0800ef0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b095      	sub	sp, #84	; 0x54
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef1c:	e853 3f00 	ldrex	r3, [r3]
 800ef20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef28:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef32:	643b      	str	r3, [r7, #64]	; 0x40
 800ef34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef3a:	e841 2300 	strex	r3, r2, [r1]
 800ef3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d1e6      	bne.n	800ef14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	3308      	adds	r3, #8
 800ef4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef4e:	6a3b      	ldr	r3, [r7, #32]
 800ef50:	e853 3f00 	ldrex	r3, [r3]
 800ef54:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef56:	69fb      	ldr	r3, [r7, #28]
 800ef58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ef5c:	f023 0301 	bic.w	r3, r3, #1
 800ef60:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	3308      	adds	r3, #8
 800ef68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef72:	e841 2300 	strex	r3, r2, [r1]
 800ef76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1e3      	bne.n	800ef46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d118      	bne.n	800efb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	e853 3f00 	ldrex	r3, [r3]
 800ef92:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	f023 0310 	bic.w	r3, r3, #16
 800ef9a:	647b      	str	r3, [r7, #68]	; 0x44
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	461a      	mov	r2, r3
 800efa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efa4:	61bb      	str	r3, [r7, #24]
 800efa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa8:	6979      	ldr	r1, [r7, #20]
 800efaa:	69ba      	ldr	r2, [r7, #24]
 800efac:	e841 2300 	strex	r3, r2, [r1]
 800efb0:	613b      	str	r3, [r7, #16]
   return(result);
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d1e6      	bne.n	800ef86 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2220      	movs	r2, #32
 800efbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	671a      	str	r2, [r3, #112]	; 0x70
}
 800efcc:	bf00      	nop
 800efce:	3754      	adds	r7, #84	; 0x54
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b084      	sub	sp, #16
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eff6:	68f8      	ldr	r0, [r7, #12]
 800eff8:	f7ff f996 	bl	800e328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800effc:	bf00      	nop
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	e853 3f00 	ldrex	r3, [r3]
 800f018:	60bb      	str	r3, [r7, #8]
   return(result);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f020:	61fb      	str	r3, [r7, #28]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	61bb      	str	r3, [r7, #24]
 800f02c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02e:	6979      	ldr	r1, [r7, #20]
 800f030:	69ba      	ldr	r2, [r7, #24]
 800f032:	e841 2300 	strex	r3, r2, [r1]
 800f036:	613b      	str	r3, [r7, #16]
   return(result);
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1e6      	bne.n	800f00c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2220      	movs	r2, #32
 800f042:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f7ff f957 	bl	800e300 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f052:	bf00      	nop
 800f054:	3720      	adds	r7, #32
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}

0800f05a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b096      	sub	sp, #88	; 0x58
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f068:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f072:	2b22      	cmp	r3, #34	; 0x22
 800f074:	f040 8095 	bne.w	800f1a2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f082:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f086:	b2d9      	uxtb	r1, r3
 800f088:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f092:	400a      	ands	r2, r1
 800f094:	b2d2      	uxtb	r2, r2
 800f096:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f09c:	1c5a      	adds	r2, r3, #1
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	3b01      	subs	r3, #1
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d178      	bne.n	800f1b2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	e853 3f00 	ldrex	r3, [r3]
 800f0cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f0d4:	653b      	str	r3, [r7, #80]	; 0x50
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	461a      	mov	r2, r3
 800f0dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0de:	647b      	str	r3, [r7, #68]	; 0x44
 800f0e0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0e6:	e841 2300 	strex	r3, r2, [r1]
 800f0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1e6      	bne.n	800f0c0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3308      	adds	r3, #8
 800f0f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fc:	e853 3f00 	ldrex	r3, [r3]
 800f100:	623b      	str	r3, [r7, #32]
   return(result);
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	f023 0301 	bic.w	r3, r3, #1
 800f108:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3308      	adds	r3, #8
 800f110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f112:	633a      	str	r2, [r7, #48]	; 0x30
 800f114:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f116:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f11a:	e841 2300 	strex	r3, r2, [r1]
 800f11e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f122:	2b00      	cmp	r3, #0
 800f124:	d1e5      	bne.n	800f0f2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2220      	movs	r2, #32
 800f12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2200      	movs	r2, #0
 800f132:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f138:	2b01      	cmp	r3, #1
 800f13a:	d12e      	bne.n	800f19a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	e853 3f00 	ldrex	r3, [r3]
 800f14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f023 0310 	bic.w	r3, r3, #16
 800f156:	64bb      	str	r3, [r7, #72]	; 0x48
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f160:	61fb      	str	r3, [r7, #28]
 800f162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f164:	69b9      	ldr	r1, [r7, #24]
 800f166:	69fa      	ldr	r2, [r7, #28]
 800f168:	e841 2300 	strex	r3, r2, [r1]
 800f16c:	617b      	str	r3, [r7, #20]
   return(result);
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1e6      	bne.n	800f142 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	69db      	ldr	r3, [r3, #28]
 800f17a:	f003 0310 	and.w	r3, r3, #16
 800f17e:	2b10      	cmp	r3, #16
 800f180:	d103      	bne.n	800f18a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2210      	movs	r2, #16
 800f188:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7ff f8d2 	bl	800e33c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f198:	e00b      	b.n	800f1b2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff f8ba 	bl	800e314 <HAL_UART_RxCpltCallback>
}
 800f1a0:	e007      	b.n	800f1b2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	699a      	ldr	r2, [r3, #24]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	f042 0208 	orr.w	r2, r2, #8
 800f1b0:	619a      	str	r2, [r3, #24]
}
 800f1b2:	bf00      	nop
 800f1b4:	3758      	adds	r7, #88	; 0x58
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b096      	sub	sp, #88	; 0x58
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f1c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1d2:	2b22      	cmp	r3, #34	; 0x22
 800f1d4:	f040 8095 	bne.w	800f302 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800f1e8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800f1ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1f6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1fc:	1c9a      	adds	r2, r3, #2
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f208:	b29b      	uxth	r3, r3
 800f20a:	3b01      	subs	r3, #1
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d178      	bne.n	800f312 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f228:	e853 3f00 	ldrex	r3, [r3]
 800f22c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f230:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f234:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	461a      	mov	r2, r3
 800f23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f23e:	643b      	str	r3, [r7, #64]	; 0x40
 800f240:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f244:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f246:	e841 2300 	strex	r3, r2, [r1]
 800f24a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1e6      	bne.n	800f220 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	3308      	adds	r3, #8
 800f258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25a:	6a3b      	ldr	r3, [r7, #32]
 800f25c:	e853 3f00 	ldrex	r3, [r3]
 800f260:	61fb      	str	r3, [r7, #28]
   return(result);
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	f023 0301 	bic.w	r3, r3, #1
 800f268:	64bb      	str	r3, [r7, #72]	; 0x48
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	3308      	adds	r3, #8
 800f270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f272:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f274:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f27a:	e841 2300 	strex	r3, r2, [r1]
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1e5      	bne.n	800f252 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2220      	movs	r2, #32
 800f28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2200      	movs	r2, #0
 800f292:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d12e      	bne.n	800f2fa <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2200      	movs	r2, #0
 800f2a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	e853 3f00 	ldrex	r3, [r3]
 800f2ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	f023 0310 	bic.w	r3, r3, #16
 800f2b6:	647b      	str	r3, [r7, #68]	; 0x44
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	461a      	mov	r2, r3
 800f2be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c0:	61bb      	str	r3, [r7, #24]
 800f2c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2c4:	6979      	ldr	r1, [r7, #20]
 800f2c6:	69ba      	ldr	r2, [r7, #24]
 800f2c8:	e841 2300 	strex	r3, r2, [r1]
 800f2cc:	613b      	str	r3, [r7, #16]
   return(result);
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d1e6      	bne.n	800f2a2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	f003 0310 	and.w	r3, r3, #16
 800f2de:	2b10      	cmp	r3, #16
 800f2e0:	d103      	bne.n	800f2ea <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2210      	movs	r2, #16
 800f2e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f7ff f822 	bl	800e33c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f2f8:	e00b      	b.n	800f312 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7ff f80a 	bl	800e314 <HAL_UART_RxCpltCallback>
}
 800f300:	e007      	b.n	800f312 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	699a      	ldr	r2, [r3, #24]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f042 0208 	orr.w	r2, r2, #8
 800f310:	619a      	str	r2, [r3, #24]
}
 800f312:	bf00      	nop
 800f314:	3758      	adds	r7, #88	; 0x58
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
	...

0800f31c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b0a6      	sub	sp, #152	; 0x98
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f32a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	69db      	ldr	r3, [r3, #28]
 800f334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f352:	2b22      	cmp	r3, #34	; 0x22
 800f354:	f040 814f 	bne.w	800f5f6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f35e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f362:	e0f6      	b.n	800f552 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f36a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f36e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800f372:	b2d9      	uxtb	r1, r3
 800f374:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f37e:	400a      	ands	r2, r1
 800f380:	b2d2      	uxtb	r2, r2
 800f382:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f388:	1c5a      	adds	r2, r3, #1
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f394:	b29b      	uxth	r3, r3
 800f396:	3b01      	subs	r3, #1
 800f398:	b29a      	uxth	r2, r3
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	69db      	ldr	r3, [r3, #28]
 800f3a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f3aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ae:	f003 0307 	and.w	r3, r3, #7
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d053      	beq.n	800f45e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f3b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d011      	beq.n	800f3e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f3c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00b      	beq.n	800f3e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f3dc:	f043 0201 	orr.w	r2, r3, #1
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f3e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f3ea:	f003 0302 	and.w	r3, r3, #2
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d011      	beq.n	800f416 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f3f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f3f6:	f003 0301 	and.w	r3, r3, #1
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00b      	beq.n	800f416 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	2202      	movs	r2, #2
 800f404:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f40c:	f043 0204 	orr.w	r2, r3, #4
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f416:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f41a:	f003 0304 	and.w	r3, r3, #4
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d011      	beq.n	800f446 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f426:	f003 0301 	and.w	r3, r3, #1
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00b      	beq.n	800f446 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	2204      	movs	r2, #4
 800f434:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f43c:	f043 0202 	orr.w	r2, r3, #2
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d006      	beq.n	800f45e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7fe ff69 	bl	800e328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	2200      	movs	r2, #0
 800f45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f464:	b29b      	uxth	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d173      	bne.n	800f552 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f472:	e853 3f00 	ldrex	r3, [r3]
 800f476:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f47a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f47e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	461a      	mov	r2, r3
 800f488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f48c:	66bb      	str	r3, [r7, #104]	; 0x68
 800f48e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f490:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f492:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f494:	e841 2300 	strex	r3, r2, [r1]
 800f498:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f49a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d1e4      	bne.n	800f46a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	3308      	adds	r3, #8
 800f4a6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4aa:	e853 3f00 	ldrex	r3, [r3]
 800f4ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f4b6:	f023 0301 	bic.w	r3, r3, #1
 800f4ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	3308      	adds	r3, #8
 800f4c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4c4:	657a      	str	r2, [r7, #84]	; 0x54
 800f4c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4cc:	e841 2300 	strex	r3, r2, [r1]
 800f4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f4d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1e3      	bne.n	800f4a0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2220      	movs	r2, #32
 800f4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d12e      	bne.n	800f54c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4fc:	e853 3f00 	ldrex	r3, [r3]
 800f500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	f023 0310 	bic.w	r3, r3, #16
 800f508:	67bb      	str	r3, [r7, #120]	; 0x78
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f512:	643b      	str	r3, [r7, #64]	; 0x40
 800f514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f51a:	e841 2300 	strex	r3, r2, [r1]
 800f51e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f522:	2b00      	cmp	r3, #0
 800f524:	d1e6      	bne.n	800f4f4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	69db      	ldr	r3, [r3, #28]
 800f52c:	f003 0310 	and.w	r3, r3, #16
 800f530:	2b10      	cmp	r3, #16
 800f532:	d103      	bne.n	800f53c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2210      	movs	r2, #16
 800f53a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f542:	4619      	mov	r1, r3
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7fe fef9 	bl	800e33c <HAL_UARTEx_RxEventCallback>
 800f54a:	e002      	b.n	800f552 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f7fe fee1 	bl	800e314 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f552:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800f556:	2b00      	cmp	r3, #0
 800f558:	d006      	beq.n	800f568 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800f55a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f55e:	f003 0320 	and.w	r3, r3, #32
 800f562:	2b00      	cmp	r3, #0
 800f564:	f47f aefe 	bne.w	800f364 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f56e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f572:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800f576:	2b00      	cmp	r3, #0
 800f578:	d045      	beq.n	800f606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f580:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800f584:	429a      	cmp	r2, r3
 800f586:	d23e      	bcs.n	800f606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	3308      	adds	r3, #8
 800f58e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f590:	6a3b      	ldr	r3, [r7, #32]
 800f592:	e853 3f00 	ldrex	r3, [r3]
 800f596:	61fb      	str	r3, [r7, #28]
   return(result);
 800f598:	69fb      	ldr	r3, [r7, #28]
 800f59a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f59e:	673b      	str	r3, [r7, #112]	; 0x70
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	3308      	adds	r3, #8
 800f5a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f5a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f5aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f5b0:	e841 2300 	strex	r3, r2, [r1]
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d1e5      	bne.n	800f588 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a14      	ldr	r2, [pc, #80]	; (800f610 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800f5c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	e853 3f00 	ldrex	r3, [r3]
 800f5ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	f043 0320 	orr.w	r3, r3, #32
 800f5d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5e0:	61bb      	str	r3, [r7, #24]
 800f5e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5e4:	6979      	ldr	r1, [r7, #20]
 800f5e6:	69ba      	ldr	r2, [r7, #24]
 800f5e8:	e841 2300 	strex	r3, r2, [r1]
 800f5ec:	613b      	str	r3, [r7, #16]
   return(result);
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d1e6      	bne.n	800f5c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f5f4:	e007      	b.n	800f606 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	699a      	ldr	r2, [r3, #24]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f042 0208 	orr.w	r2, r2, #8
 800f604:	619a      	str	r2, [r3, #24]
}
 800f606:	bf00      	nop
 800f608:	3798      	adds	r7, #152	; 0x98
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	0800f05b 	.word	0x0800f05b

0800f614 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b0a8      	sub	sp, #160	; 0xa0
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f622:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	69db      	ldr	r3, [r3, #28]
 800f62c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	689b      	ldr	r3, [r3, #8]
 800f640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f64a:	2b22      	cmp	r3, #34	; 0x22
 800f64c:	f040 8153 	bne.w	800f8f6 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f656:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f65a:	e0fa      	b.n	800f852 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f662:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f66a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800f66e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800f672:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800f676:	4013      	ands	r3, r2
 800f678:	b29a      	uxth	r2, r3
 800f67a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f67e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f684:	1c9a      	adds	r2, r3, #2
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f690:	b29b      	uxth	r3, r3
 800f692:	3b01      	subs	r3, #1
 800f694:	b29a      	uxth	r2, r3
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	69db      	ldr	r3, [r3, #28]
 800f6a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f6a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d053      	beq.n	800f75a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6b6:	f003 0301 	and.w	r3, r3, #1
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d011      	beq.n	800f6e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f6be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00b      	beq.n	800f6e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2201      	movs	r2, #1
 800f6d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f6d8:	f043 0201 	orr.w	r2, r3, #1
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6e6:	f003 0302 	and.w	r3, r3, #2
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d011      	beq.n	800f712 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f6ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00b      	beq.n	800f712 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2202      	movs	r2, #2
 800f700:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f708:	f043 0204 	orr.w	r2, r3, #4
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f716:	f003 0304 	and.w	r3, r3, #4
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d011      	beq.n	800f742 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f71e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00b      	beq.n	800f742 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2204      	movs	r2, #4
 800f730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f738:	f043 0202 	orr.w	r2, r3, #2
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d006      	beq.n	800f75a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7fe fdeb 	bl	800e328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2200      	movs	r2, #0
 800f756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f760:	b29b      	uxth	r3, r3
 800f762:	2b00      	cmp	r3, #0
 800f764:	d175      	bne.n	800f852 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f76c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f76e:	e853 3f00 	ldrex	r3, [r3]
 800f772:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	461a      	mov	r2, r3
 800f784:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f788:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f78a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f78c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f78e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f790:	e841 2300 	strex	r3, r2, [r1]
 800f794:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1e4      	bne.n	800f766 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	3308      	adds	r3, #8
 800f7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7a6:	e853 3f00 	ldrex	r3, [r3]
 800f7aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f7ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7b2:	f023 0301 	bic.w	r3, r3, #1
 800f7b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	3308      	adds	r3, #8
 800f7c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7c4:	65ba      	str	r2, [r7, #88]	; 0x58
 800f7c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f7ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f7cc:	e841 2300 	strex	r3, r2, [r1]
 800f7d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1e1      	bne.n	800f79c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d12e      	bne.n	800f84c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fc:	e853 3f00 	ldrex	r3, [r3]
 800f800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f804:	f023 0310 	bic.w	r3, r3, #16
 800f808:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	461a      	mov	r2, r3
 800f810:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f812:	647b      	str	r3, [r7, #68]	; 0x44
 800f814:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f81a:	e841 2300 	strex	r3, r2, [r1]
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f822:	2b00      	cmp	r3, #0
 800f824:	d1e6      	bne.n	800f7f4 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	69db      	ldr	r3, [r3, #28]
 800f82c:	f003 0310 	and.w	r3, r3, #16
 800f830:	2b10      	cmp	r3, #16
 800f832:	d103      	bne.n	800f83c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	2210      	movs	r2, #16
 800f83a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f842:	4619      	mov	r1, r3
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f7fe fd79 	bl	800e33c <HAL_UARTEx_RxEventCallback>
 800f84a:	e002      	b.n	800f852 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f7fe fd61 	bl	800e314 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f852:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f856:	2b00      	cmp	r3, #0
 800f858:	d006      	beq.n	800f868 <UART_RxISR_16BIT_FIFOEN+0x254>
 800f85a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f85e:	f003 0320 	and.w	r3, r3, #32
 800f862:	2b00      	cmp	r3, #0
 800f864:	f47f aefa 	bne.w	800f65c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f86e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f872:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800f876:	2b00      	cmp	r3, #0
 800f878:	d045      	beq.n	800f906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f880:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800f884:	429a      	cmp	r2, r3
 800f886:	d23e      	bcs.n	800f906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	3308      	adds	r3, #8
 800f88e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f892:	e853 3f00 	ldrex	r3, [r3]
 800f896:	623b      	str	r3, [r7, #32]
   return(result);
 800f898:	6a3b      	ldr	r3, [r7, #32]
 800f89a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f89e:	677b      	str	r3, [r7, #116]	; 0x74
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	3308      	adds	r3, #8
 800f8a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f8a8:	633a      	str	r2, [r7, #48]	; 0x30
 800f8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f8ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b0:	e841 2300 	strex	r3, r2, [r1]
 800f8b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d1e5      	bne.n	800f888 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a14      	ldr	r2, [pc, #80]	; (800f910 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800f8c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	e853 3f00 	ldrex	r3, [r3]
 800f8ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f043 0320 	orr.w	r3, r3, #32
 800f8d6:	673b      	str	r3, [r7, #112]	; 0x70
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8e0:	61fb      	str	r3, [r7, #28]
 800f8e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8e4:	69b9      	ldr	r1, [r7, #24]
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	e841 2300 	strex	r3, r2, [r1]
 800f8ec:	617b      	str	r3, [r7, #20]
   return(result);
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d1e6      	bne.n	800f8c2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8f4:	e007      	b.n	800f906 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	699a      	ldr	r2, [r3, #24]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f042 0208 	orr.w	r2, r2, #8
 800f904:	619a      	str	r2, [r3, #24]
}
 800f906:	bf00      	nop
 800f908:	37a0      	adds	r7, #160	; 0xa0
 800f90a:	46bd      	mov	sp, r7
 800f90c:	bd80      	pop	{r7, pc}
 800f90e:	bf00      	nop
 800f910:	0800f1bb 	.word	0x0800f1bb

0800f914 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f928:	b480      	push	{r7}
 800f92a:	b083      	sub	sp, #12
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f930:	bf00      	nop
 800f932:	370c      	adds	r7, #12
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b083      	sub	sp, #12
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f944:	bf00      	nop
 800f946:	370c      	adds	r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d101      	bne.n	800f966 <HAL_UARTEx_DisableFifoMode+0x16>
 800f962:	2302      	movs	r3, #2
 800f964:	e027      	b.n	800f9b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2201      	movs	r2, #1
 800f96a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2224      	movs	r2, #36	; 0x24
 800f972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f022 0201 	bic.w	r2, r2, #1
 800f98c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f994:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2200      	movs	r2, #0
 800f99a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68fa      	ldr	r2, [r7, #12]
 800f9a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2220      	movs	r2, #32
 800f9a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f9b4:	2300      	movs	r3, #0
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3714      	adds	r7, #20
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f9c2:	b580      	push	{r7, lr}
 800f9c4:	b084      	sub	sp, #16
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d101      	bne.n	800f9da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9d6:	2302      	movs	r3, #2
 800f9d8:	e02d      	b.n	800fa36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2224      	movs	r2, #36	; 0x24
 800f9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f022 0201 	bic.w	r2, r2, #1
 800fa00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	689b      	ldr	r3, [r3, #8]
 800fa08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	430a      	orrs	r2, r1
 800fa14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f850 	bl	800fabc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2220      	movs	r2, #32
 800fa28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
 800fa46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d101      	bne.n	800fa56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa52:	2302      	movs	r3, #2
 800fa54:	e02d      	b.n	800fab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2224      	movs	r2, #36	; 0x24
 800fa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f022 0201 	bic.w	r2, r2, #1
 800fa7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	683a      	ldr	r2, [r7, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f812 	bl	800fabc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	68fa      	ldr	r2, [r7, #12]
 800fa9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2220      	movs	r2, #32
 800faa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}
	...

0800fabc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b085      	sub	sp, #20
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d108      	bne.n	800fade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2201      	movs	r2, #1
 800fad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2201      	movs	r2, #1
 800fad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fadc:	e031      	b.n	800fb42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fade:	2308      	movs	r3, #8
 800fae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fae2:	2308      	movs	r3, #8
 800fae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	689b      	ldr	r3, [r3, #8]
 800faec:	0e5b      	lsrs	r3, r3, #25
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	f003 0307 	and.w	r3, r3, #7
 800faf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	689b      	ldr	r3, [r3, #8]
 800fafc:	0f5b      	lsrs	r3, r3, #29
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	f003 0307 	and.w	r3, r3, #7
 800fb04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	7b3a      	ldrb	r2, [r7, #12]
 800fb0a:	4911      	ldr	r1, [pc, #68]	; (800fb50 <UARTEx_SetNbDataToProcess+0x94>)
 800fb0c:	5c8a      	ldrb	r2, [r1, r2]
 800fb0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb12:	7b3a      	ldrb	r2, [r7, #12]
 800fb14:	490f      	ldr	r1, [pc, #60]	; (800fb54 <UARTEx_SetNbDataToProcess+0x98>)
 800fb16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb18:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb1c:	b29a      	uxth	r2, r3
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	7b7a      	ldrb	r2, [r7, #13]
 800fb28:	4909      	ldr	r1, [pc, #36]	; (800fb50 <UARTEx_SetNbDataToProcess+0x94>)
 800fb2a:	5c8a      	ldrb	r2, [r1, r2]
 800fb2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fb30:	7b7a      	ldrb	r2, [r7, #13]
 800fb32:	4908      	ldr	r1, [pc, #32]	; (800fb54 <UARTEx_SetNbDataToProcess+0x98>)
 800fb34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fb36:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fb42:	bf00      	nop
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	08013218 	.word	0x08013218
 800fb54:	08013220 	.word	0x08013220

0800fb58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	4603      	mov	r3, r0
 800fb60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fb62:	2300      	movs	r3, #0
 800fb64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fb66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb6a:	2b84      	cmp	r3, #132	; 0x84
 800fb6c:	d005      	beq.n	800fb7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fb6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	4413      	add	r3, r2
 800fb76:	3303      	adds	r3, #3
 800fb78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fb8c:	f000 fee8 	bl	8010960 <vTaskStartScheduler>
  
  return osOK;
 800fb90:	2300      	movs	r3, #0
}
 800fb92:	4618      	mov	r0, r3
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fb96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb98:	b087      	sub	sp, #28
 800fb9a:	af02      	add	r7, sp, #8
 800fb9c:	6078      	str	r0, [r7, #4]
 800fb9e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685c      	ldr	r4, [r3, #4]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fbac:	b29e      	uxth	r6, r3
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7ff ffcf 	bl	800fb58 <makeFreeRtosPriority>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	f107 030c 	add.w	r3, r7, #12
 800fbc0:	9301      	str	r3, [sp, #4]
 800fbc2:	9200      	str	r2, [sp, #0]
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	4632      	mov	r2, r6
 800fbc8:	4629      	mov	r1, r5
 800fbca:	4620      	mov	r0, r4
 800fbcc:	f000 fd54 	bl	8010678 <xTaskCreate>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	d001      	beq.n	800fbda <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	e000      	b.n	800fbdc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800fbda:	68fb      	ldr	r3, [r7, #12]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3714      	adds	r7, #20
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbe4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d001      	beq.n	800fbfa <osDelay+0x16>
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	e000      	b.n	800fbfc <osDelay+0x18>
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f000 fe7b 	bl	80108f8 <vTaskDelay>
  
  return osOK;
 800fc02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3710      	adds	r7, #16
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800fc14:	2001      	movs	r0, #1
 800fc16:	f000 f9a1 	bl	800ff5c <xQueueCreateMutex>
 800fc1a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b084      	sub	sp, #16
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d110      	bne.n	800fc56 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800fc34:	2203      	movs	r2, #3
 800fc36:	2100      	movs	r1, #0
 800fc38:	2001      	movs	r0, #1
 800fc3a:	f000 f920 	bl	800fe7e <xQueueGenericCreate>
 800fc3e:	60f8      	str	r0, [r7, #12]
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d005      	beq.n	800fc52 <osSemaphoreCreate+0x2e>
 800fc46:	2300      	movs	r3, #0
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2100      	movs	r1, #0
 800fc4c:	68f8      	ldr	r0, [r7, #12]
 800fc4e:	f000 f99d 	bl	800ff8c <xQueueGenericSend>
    return sema;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	e000      	b.n	800fc58 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800fc56:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3710      	adds	r7, #16
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}

0800fc60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fc60:	b480      	push	{r7}
 800fc62:	b083      	sub	sp, #12
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f103 0208 	add.w	r2, r3, #8
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f04f 32ff 	mov.w	r2, #4294967295
 800fc78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f103 0208 	add.w	r2, r3, #8
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f103 0208 	add.w	r2, r3, #8
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fc94:	bf00      	nop
 800fc96:	370c      	adds	r7, #12
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr

0800fca0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fcae:	bf00      	nop
 800fcb0:	370c      	adds	r7, #12
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr

0800fcba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fcba:	b480      	push	{r7}
 800fcbc:	b085      	sub	sp, #20
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
 800fcc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	68fa      	ldr	r2, [r7, #12]
 800fcce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	689a      	ldr	r2, [r3, #8]
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	683a      	ldr	r2, [r7, #0]
 800fcde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	687a      	ldr	r2, [r7, #4]
 800fcea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	1c5a      	adds	r2, r3, #1
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	601a      	str	r2, [r3, #0]
}
 800fcf6:	bf00      	nop
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd02:	b480      	push	{r7}
 800fd04:	b085      	sub	sp, #20
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	6078      	str	r0, [r7, #4]
 800fd0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd18:	d103      	bne.n	800fd22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	60fb      	str	r3, [r7, #12]
 800fd20:	e00c      	b.n	800fd3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	3308      	adds	r3, #8
 800fd26:	60fb      	str	r3, [r7, #12]
 800fd28:	e002      	b.n	800fd30 <vListInsert+0x2e>
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d2f6      	bcs.n	800fd2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	685a      	ldr	r2, [r3, #4]
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	68fa      	ldr	r2, [r7, #12]
 800fd50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	1c5a      	adds	r2, r3, #1
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	601a      	str	r2, [r3, #0]
}
 800fd68:	bf00      	nop
 800fd6a:	3714      	adds	r7, #20
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fd74:	b480      	push	{r7}
 800fd76:	b085      	sub	sp, #20
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	685b      	ldr	r3, [r3, #4]
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	6892      	ldr	r2, [r2, #8]
 800fd8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	689b      	ldr	r3, [r3, #8]
 800fd90:	687a      	ldr	r2, [r7, #4]
 800fd92:	6852      	ldr	r2, [r2, #4]
 800fd94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d103      	bne.n	800fda8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	689a      	ldr	r2, [r3, #8]
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	1e5a      	subs	r2, r3, #1
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	3714      	adds	r7, #20
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10a      	bne.n	800fdf2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde0:	f383 8811 	msr	BASEPRI, r3
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	f3bf 8f4f 	dsb	sy
 800fdec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fdee:	bf00      	nop
 800fdf0:	e7fe      	b.n	800fdf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fdf2:	f001 fcbf 	bl	8011774 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdfe:	68f9      	ldr	r1, [r7, #12]
 800fe00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe02:	fb01 f303 	mul.w	r3, r1, r3
 800fe06:	441a      	add	r2, r3
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681a      	ldr	r2, [r3, #0]
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe22:	3b01      	subs	r3, #1
 800fe24:	68f9      	ldr	r1, [r7, #12]
 800fe26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fe28:	fb01 f303 	mul.w	r3, r1, r3
 800fe2c:	441a      	add	r2, r3
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	22ff      	movs	r2, #255	; 0xff
 800fe36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	22ff      	movs	r2, #255	; 0xff
 800fe3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d109      	bne.n	800fe5c <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	691b      	ldr	r3, [r3, #16]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d00f      	beq.n	800fe70 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	3310      	adds	r3, #16
 800fe54:	4618      	mov	r0, r3
 800fe56:	f000 ff8b 	bl	8010d70 <xTaskRemoveFromEventList>
 800fe5a:	e009      	b.n	800fe70 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	3310      	adds	r3, #16
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7ff fefd 	bl	800fc60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	3324      	adds	r3, #36	; 0x24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff fef8 	bl	800fc60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe70:	f001 fcb0 	bl	80117d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe74:	2301      	movs	r3, #1
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3710      	adds	r7, #16
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b08a      	sub	sp, #40	; 0x28
 800fe82:	af02      	add	r7, sp, #8
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10a      	bne.n	800fea8 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fe92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe96:	f383 8811 	msr	BASEPRI, r3
 800fe9a:	f3bf 8f6f 	isb	sy
 800fe9e:	f3bf 8f4f 	dsb	sy
 800fea2:	613b      	str	r3, [r7, #16]
}
 800fea4:	bf00      	nop
 800fea6:	e7fe      	b.n	800fea6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	68ba      	ldr	r2, [r7, #8]
 800feac:	fb02 f303 	mul.w	r3, r2, r3
 800feb0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	3348      	adds	r3, #72	; 0x48
 800feb6:	4618      	mov	r0, r3
 800feb8:	f001 fd7e 	bl	80119b8 <pvPortMalloc>
 800febc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800febe:	69bb      	ldr	r3, [r7, #24]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00d      	beq.n	800fee0 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fec4:	69bb      	ldr	r3, [r7, #24]
 800fec6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	3348      	adds	r3, #72	; 0x48
 800fecc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fece:	79fa      	ldrb	r2, [r7, #7]
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	4613      	mov	r3, r2
 800fed6:	697a      	ldr	r2, [r7, #20]
 800fed8:	68b9      	ldr	r1, [r7, #8]
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f000 f805 	bl	800feea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fee0:	69bb      	ldr	r3, [r7, #24]
	}
 800fee2:	4618      	mov	r0, r3
 800fee4:	3720      	adds	r7, #32
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}

0800feea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800feea:	b580      	push	{r7, lr}
 800feec:	b084      	sub	sp, #16
 800feee:	af00      	add	r7, sp, #0
 800fef0:	60f8      	str	r0, [r7, #12]
 800fef2:	60b9      	str	r1, [r7, #8]
 800fef4:	607a      	str	r2, [r7, #4]
 800fef6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d103      	bne.n	800ff06 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	e002      	b.n	800ff0c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	68ba      	ldr	r2, [r7, #8]
 800ff16:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff18:	2101      	movs	r1, #1
 800ff1a:	69b8      	ldr	r0, [r7, #24]
 800ff1c:	f7ff ff54 	bl	800fdc8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ff20:	bf00      	nop
 800ff22:	3710      	adds	r7, #16
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00e      	beq.n	800ff54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2200      	movs	r2, #0
 800ff3a:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff48:	2300      	movs	r3, #0
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	2100      	movs	r1, #0
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f81c 	bl	800ff8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ff54:	bf00      	nop
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}

0800ff5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b086      	sub	sp, #24
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	4603      	mov	r3, r0
 800ff64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ff66:	2301      	movs	r3, #1
 800ff68:	617b      	str	r3, [r7, #20]
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ff6e:	79fb      	ldrb	r3, [r7, #7]
 800ff70:	461a      	mov	r2, r3
 800ff72:	6939      	ldr	r1, [r7, #16]
 800ff74:	6978      	ldr	r0, [r7, #20]
 800ff76:	f7ff ff82 	bl	800fe7e <xQueueGenericCreate>
 800ff7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff7c:	68f8      	ldr	r0, [r7, #12]
 800ff7e:	f7ff ffd3 	bl	800ff28 <prvInitialiseMutex>

		return xNewQueue;
 800ff82:	68fb      	ldr	r3, [r7, #12]
	}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3718      	adds	r7, #24
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b08e      	sub	sp, #56	; 0x38
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	607a      	str	r2, [r7, #4]
 800ff98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ffa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d10a      	bne.n	800ffbe <xQueueGenericSend+0x32>
	__asm volatile
 800ffa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffac:	f383 8811 	msr	BASEPRI, r3
 800ffb0:	f3bf 8f6f 	isb	sy
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ffba:	bf00      	nop
 800ffbc:	e7fe      	b.n	800ffbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d103      	bne.n	800ffcc <xQueueGenericSend+0x40>
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <xQueueGenericSend+0x44>
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e000      	b.n	800ffd2 <xQueueGenericSend+0x46>
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d10a      	bne.n	800ffec <xQueueGenericSend+0x60>
	__asm volatile
 800ffd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffda:	f383 8811 	msr	BASEPRI, r3
 800ffde:	f3bf 8f6f 	isb	sy
 800ffe2:	f3bf 8f4f 	dsb	sy
 800ffe6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffe8:	bf00      	nop
 800ffea:	e7fe      	b.n	800ffea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	2b02      	cmp	r3, #2
 800fff0:	d103      	bne.n	800fffa <xQueueGenericSend+0x6e>
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d101      	bne.n	800fffe <xQueueGenericSend+0x72>
 800fffa:	2301      	movs	r3, #1
 800fffc:	e000      	b.n	8010000 <xQueueGenericSend+0x74>
 800fffe:	2300      	movs	r3, #0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d10a      	bne.n	801001a <xQueueGenericSend+0x8e>
	__asm volatile
 8010004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	623b      	str	r3, [r7, #32]
}
 8010016:	bf00      	nop
 8010018:	e7fe      	b.n	8010018 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801001a:	f001 f855 	bl	80110c8 <xTaskGetSchedulerState>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d102      	bne.n	801002a <xQueueGenericSend+0x9e>
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <xQueueGenericSend+0xa2>
 801002a:	2301      	movs	r3, #1
 801002c:	e000      	b.n	8010030 <xQueueGenericSend+0xa4>
 801002e:	2300      	movs	r3, #0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10a      	bne.n	801004a <xQueueGenericSend+0xbe>
	__asm volatile
 8010034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010038:	f383 8811 	msr	BASEPRI, r3
 801003c:	f3bf 8f6f 	isb	sy
 8010040:	f3bf 8f4f 	dsb	sy
 8010044:	61fb      	str	r3, [r7, #28]
}
 8010046:	bf00      	nop
 8010048:	e7fe      	b.n	8010048 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801004a:	f001 fb93 	bl	8011774 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010056:	429a      	cmp	r2, r3
 8010058:	d302      	bcc.n	8010060 <xQueueGenericSend+0xd4>
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	2b02      	cmp	r3, #2
 801005e:	d112      	bne.n	8010086 <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010060:	683a      	ldr	r2, [r7, #0]
 8010062:	68b9      	ldr	r1, [r7, #8]
 8010064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010066:	f000 fa1d 	bl	80104a4 <prvCopyDataToQueue>
 801006a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801006c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010070:	2b00      	cmp	r3, #0
 8010072:	d004      	beq.n	801007e <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010076:	3324      	adds	r3, #36	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f000 fe79 	bl	8010d70 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801007e:	f001 fba9 	bl	80117d4 <vPortExitCritical>
				return pdPASS;
 8010082:	2301      	movs	r3, #1
 8010084:	e062      	b.n	801014c <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d103      	bne.n	8010094 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801008c:	f001 fba2 	bl	80117d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010090:	2300      	movs	r3, #0
 8010092:	e05b      	b.n	801014c <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010096:	2b00      	cmp	r3, #0
 8010098:	d106      	bne.n	80100a8 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801009a:	f107 0314 	add.w	r3, r7, #20
 801009e:	4618      	mov	r0, r3
 80100a0:	f000 fec8 	bl	8010e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100a4:	2301      	movs	r3, #1
 80100a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100a8:	f001 fb94 	bl	80117d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100ac:	f000 fca8 	bl	8010a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100b0:	f001 fb60 	bl	8011774 <vPortEnterCritical>
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100ba:	b25b      	sxtb	r3, r3
 80100bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100c0:	d103      	bne.n	80100ca <xQueueGenericSend+0x13e>
 80100c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c4:	2200      	movs	r2, #0
 80100c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d6:	d103      	bne.n	80100e0 <xQueueGenericSend+0x154>
 80100d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100da:	2200      	movs	r2, #0
 80100dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100e0:	f001 fb78 	bl	80117d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100e4:	1d3a      	adds	r2, r7, #4
 80100e6:	f107 0314 	add.w	r3, r7, #20
 80100ea:	4611      	mov	r1, r2
 80100ec:	4618      	mov	r0, r3
 80100ee:	f000 feb7 	bl	8010e60 <xTaskCheckForTimeOut>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d123      	bne.n	8010140 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80100f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100fa:	f000 faa5 	bl	8010648 <prvIsQueueFull>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d017      	beq.n	8010134 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	3310      	adds	r3, #16
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	4611      	mov	r1, r2
 801010c:	4618      	mov	r0, r3
 801010e:	f000 fe0b 	bl	8010d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010112:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010114:	f000 fa30 	bl	8010578 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010118:	f000 fc80 	bl	8010a1c <xTaskResumeAll>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d193      	bne.n	801004a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010122:	4b0c      	ldr	r3, [pc, #48]	; (8010154 <xQueueGenericSend+0x1c8>)
 8010124:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010128:	601a      	str	r2, [r3, #0]
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	e78a      	b.n	801004a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010136:	f000 fa1f 	bl	8010578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801013a:	f000 fc6f 	bl	8010a1c <xTaskResumeAll>
 801013e:	e784      	b.n	801004a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010142:	f000 fa19 	bl	8010578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010146:	f000 fc69 	bl	8010a1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801014a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801014c:	4618      	mov	r0, r3
 801014e:	3738      	adds	r7, #56	; 0x38
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	e000ed04 	.word	0xe000ed04

08010158 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b08e      	sub	sp, #56	; 0x38
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10a      	bne.n	8010182 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801016c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010170:	f383 8811 	msr	BASEPRI, r3
 8010174:	f3bf 8f6f 	isb	sy
 8010178:	f3bf 8f4f 	dsb	sy
 801017c:	623b      	str	r3, [r7, #32]
}
 801017e:	bf00      	nop
 8010180:	e7fe      	b.n	8010180 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00a      	beq.n	80101a0 <xQueueGiveFromISR+0x48>
	__asm volatile
 801018a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018e:	f383 8811 	msr	BASEPRI, r3
 8010192:	f3bf 8f6f 	isb	sy
 8010196:	f3bf 8f4f 	dsb	sy
 801019a:	61fb      	str	r3, [r7, #28]
}
 801019c:	bf00      	nop
 801019e:	e7fe      	b.n	801019e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80101a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d103      	bne.n	80101b0 <xQueueGiveFromISR+0x58>
 80101a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d101      	bne.n	80101b4 <xQueueGiveFromISR+0x5c>
 80101b0:	2301      	movs	r3, #1
 80101b2:	e000      	b.n	80101b6 <xQueueGiveFromISR+0x5e>
 80101b4:	2300      	movs	r3, #0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10a      	bne.n	80101d0 <xQueueGiveFromISR+0x78>
	__asm volatile
 80101ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	61bb      	str	r3, [r7, #24]
}
 80101cc:	bf00      	nop
 80101ce:	e7fe      	b.n	80101ce <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80101d0:	f001 fbb2 	bl	8011938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80101d4:	f3ef 8211 	mrs	r2, BASEPRI
 80101d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101dc:	f383 8811 	msr	BASEPRI, r3
 80101e0:	f3bf 8f6f 	isb	sy
 80101e4:	f3bf 8f4f 	dsb	sy
 80101e8:	617a      	str	r2, [r7, #20]
 80101ea:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80101ec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80101ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101f4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d22b      	bcs.n	8010258 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801020a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801020c:	1c5a      	adds	r2, r3, #1
 801020e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010210:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010212:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801021a:	d112      	bne.n	8010242 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010220:	2b00      	cmp	r3, #0
 8010222:	d016      	beq.n	8010252 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010226:	3324      	adds	r3, #36	; 0x24
 8010228:	4618      	mov	r0, r3
 801022a:	f000 fda1 	bl	8010d70 <xTaskRemoveFromEventList>
 801022e:	4603      	mov	r3, r0
 8010230:	2b00      	cmp	r3, #0
 8010232:	d00e      	beq.n	8010252 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00b      	beq.n	8010252 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	2201      	movs	r2, #1
 801023e:	601a      	str	r2, [r3, #0]
 8010240:	e007      	b.n	8010252 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010242:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010246:	3301      	adds	r3, #1
 8010248:	b2db      	uxtb	r3, r3
 801024a:	b25a      	sxtb	r2, r3
 801024c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010252:	2301      	movs	r3, #1
 8010254:	637b      	str	r3, [r7, #52]	; 0x34
 8010256:	e001      	b.n	801025c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010258:	2300      	movs	r3, #0
 801025a:	637b      	str	r3, [r7, #52]	; 0x34
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801026a:	4618      	mov	r0, r3
 801026c:	3738      	adds	r7, #56	; 0x38
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b08e      	sub	sp, #56	; 0x38
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801027e:	2300      	movs	r3, #0
 8010280:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010286:	2300      	movs	r3, #0
 8010288:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801028a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028c:	2b00      	cmp	r3, #0
 801028e:	d10a      	bne.n	80102a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010294:	f383 8811 	msr	BASEPRI, r3
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	623b      	str	r3, [r7, #32]
}
 80102a2:	bf00      	nop
 80102a4:	e7fe      	b.n	80102a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00a      	beq.n	80102c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b2:	f383 8811 	msr	BASEPRI, r3
 80102b6:	f3bf 8f6f 	isb	sy
 80102ba:	f3bf 8f4f 	dsb	sy
 80102be:	61fb      	str	r3, [r7, #28]
}
 80102c0:	bf00      	nop
 80102c2:	e7fe      	b.n	80102c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102c4:	f000 ff00 	bl	80110c8 <xTaskGetSchedulerState>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d102      	bne.n	80102d4 <xQueueSemaphoreTake+0x60>
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d101      	bne.n	80102d8 <xQueueSemaphoreTake+0x64>
 80102d4:	2301      	movs	r3, #1
 80102d6:	e000      	b.n	80102da <xQueueSemaphoreTake+0x66>
 80102d8:	2300      	movs	r3, #0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10a      	bne.n	80102f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	61bb      	str	r3, [r7, #24]
}
 80102f0:	bf00      	nop
 80102f2:	e7fe      	b.n	80102f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80102f4:	f001 fa3e 	bl	8011774 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80102fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010300:	2b00      	cmp	r3, #0
 8010302:	d019      	beq.n	8010338 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010306:	1e5a      	subs	r2, r3, #1
 8010308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801030c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d104      	bne.n	801031e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010314:	f001 f880 	bl	8011418 <pvTaskIncrementMutexHeldCount>
 8010318:	4602      	mov	r2, r0
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801031e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010320:	691b      	ldr	r3, [r3, #16]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d004      	beq.n	8010330 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010328:	3310      	adds	r3, #16
 801032a:	4618      	mov	r0, r3
 801032c:	f000 fd20 	bl	8010d70 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010330:	f001 fa50 	bl	80117d4 <vPortExitCritical>
				return pdPASS;
 8010334:	2301      	movs	r3, #1
 8010336:	e097      	b.n	8010468 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d111      	bne.n	8010362 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801033e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00a      	beq.n	801035a <xQueueSemaphoreTake+0xe6>
	__asm volatile
 8010344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010348:	f383 8811 	msr	BASEPRI, r3
 801034c:	f3bf 8f6f 	isb	sy
 8010350:	f3bf 8f4f 	dsb	sy
 8010354:	617b      	str	r3, [r7, #20]
}
 8010356:	bf00      	nop
 8010358:	e7fe      	b.n	8010358 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801035a:	f001 fa3b 	bl	80117d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801035e:	2300      	movs	r3, #0
 8010360:	e082      	b.n	8010468 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010364:	2b00      	cmp	r3, #0
 8010366:	d106      	bne.n	8010376 <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010368:	f107 030c 	add.w	r3, r7, #12
 801036c:	4618      	mov	r0, r3
 801036e:	f000 fd61 	bl	8010e34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010372:	2301      	movs	r3, #1
 8010374:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010376:	f001 fa2d 	bl	80117d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801037a:	f000 fb41 	bl	8010a00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801037e:	f001 f9f9 	bl	8011774 <vPortEnterCritical>
 8010382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010388:	b25b      	sxtb	r3, r3
 801038a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801038e:	d103      	bne.n	8010398 <xQueueSemaphoreTake+0x124>
 8010390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010392:	2200      	movs	r2, #0
 8010394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801039e:	b25b      	sxtb	r3, r3
 80103a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103a4:	d103      	bne.n	80103ae <xQueueSemaphoreTake+0x13a>
 80103a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a8:	2200      	movs	r2, #0
 80103aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103ae:	f001 fa11 	bl	80117d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103b2:	463a      	mov	r2, r7
 80103b4:	f107 030c 	add.w	r3, r7, #12
 80103b8:	4611      	mov	r1, r2
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 fd50 	bl	8010e60 <xTaskCheckForTimeOut>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d132      	bne.n	801042c <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103c8:	f000 f928 	bl	801061c <prvIsQueueEmpty>
 80103cc:	4603      	mov	r3, r0
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d026      	beq.n	8010420 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d109      	bne.n	80103ee <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 80103da:	f001 f9cb 	bl	8011774 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80103de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e0:	689b      	ldr	r3, [r3, #8]
 80103e2:	4618      	mov	r0, r3
 80103e4:	f000 fe8e 	bl	8011104 <xTaskPriorityInherit>
 80103e8:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80103ea:	f001 f9f3 	bl	80117d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80103ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f0:	3324      	adds	r3, #36	; 0x24
 80103f2:	683a      	ldr	r2, [r7, #0]
 80103f4:	4611      	mov	r1, r2
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 fc96 	bl	8010d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80103fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103fe:	f000 f8bb 	bl	8010578 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010402:	f000 fb0b 	bl	8010a1c <xTaskResumeAll>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	f47f af73 	bne.w	80102f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801040e:	4b18      	ldr	r3, [pc, #96]	; (8010470 <xQueueSemaphoreTake+0x1fc>)
 8010410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010414:	601a      	str	r2, [r3, #0]
 8010416:	f3bf 8f4f 	dsb	sy
 801041a:	f3bf 8f6f 	isb	sy
 801041e:	e769      	b.n	80102f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010422:	f000 f8a9 	bl	8010578 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010426:	f000 faf9 	bl	8010a1c <xTaskResumeAll>
 801042a:	e763      	b.n	80102f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801042c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801042e:	f000 f8a3 	bl	8010578 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010432:	f000 faf3 	bl	8010a1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010438:	f000 f8f0 	bl	801061c <prvIsQueueEmpty>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	f43f af58 	beq.w	80102f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010446:	2b00      	cmp	r3, #0
 8010448:	d00d      	beq.n	8010466 <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 801044a:	f001 f993 	bl	8011774 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801044e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010450:	f000 f810 	bl	8010474 <prvGetDisinheritPriorityAfterTimeout>
 8010454:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010458:	689b      	ldr	r3, [r3, #8]
 801045a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801045c:	4618      	mov	r0, r3
 801045e:	f000 ff4d 	bl	80112fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010462:	f001 f9b7 	bl	80117d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010466:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010468:	4618      	mov	r0, r3
 801046a:	3738      	adds	r7, #56	; 0x38
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}
 8010470:	e000ed04 	.word	0xe000ed04

08010474 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010480:	2b00      	cmp	r3, #0
 8010482:	d006      	beq.n	8010492 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	f1c3 0307 	rsb	r3, r3, #7
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	e001      	b.n	8010496 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010492:	2300      	movs	r3, #0
 8010494:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010496:	68fb      	ldr	r3, [r7, #12]
	}
 8010498:	4618      	mov	r0, r3
 801049a:	3714      	adds	r7, #20
 801049c:	46bd      	mov	sp, r7
 801049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a2:	4770      	bx	lr

080104a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80104b0:	2300      	movs	r3, #0
 80104b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10d      	bne.n	80104de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d14d      	bne.n	8010566 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	689b      	ldr	r3, [r3, #8]
 80104ce:	4618      	mov	r0, r3
 80104d0:	f000 fe8e 	bl	80111f0 <xTaskPriorityDisinherit>
 80104d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	609a      	str	r2, [r3, #8]
 80104dc:	e043      	b.n	8010566 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d119      	bne.n	8010518 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	6858      	ldr	r0, [r3, #4]
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ec:	461a      	mov	r2, r3
 80104ee:	68b9      	ldr	r1, [r7, #8]
 80104f0:	f001 fca6 	bl	8011e40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	685a      	ldr	r2, [r3, #4]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104fc:	441a      	add	r2, r3
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	685a      	ldr	r2, [r3, #4]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	689b      	ldr	r3, [r3, #8]
 801050a:	429a      	cmp	r2, r3
 801050c:	d32b      	bcc.n	8010566 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	681a      	ldr	r2, [r3, #0]
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	605a      	str	r2, [r3, #4]
 8010516:	e026      	b.n	8010566 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	68d8      	ldr	r0, [r3, #12]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010520:	461a      	mov	r2, r3
 8010522:	68b9      	ldr	r1, [r7, #8]
 8010524:	f001 fc8c 	bl	8011e40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	68da      	ldr	r2, [r3, #12]
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010530:	425b      	negs	r3, r3
 8010532:	441a      	add	r2, r3
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	68da      	ldr	r2, [r3, #12]
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	429a      	cmp	r2, r3
 8010542:	d207      	bcs.n	8010554 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	689a      	ldr	r2, [r3, #8]
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054c:	425b      	negs	r3, r3
 801054e:	441a      	add	r2, r3
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b02      	cmp	r3, #2
 8010558:	d105      	bne.n	8010566 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	3b01      	subs	r3, #1
 8010564:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	1c5a      	adds	r2, r3, #1
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801056e:	697b      	ldr	r3, [r7, #20]
}
 8010570:	4618      	mov	r0, r3
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010580:	f001 f8f8 	bl	8011774 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801058a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801058c:	e011      	b.n	80105b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010592:	2b00      	cmp	r3, #0
 8010594:	d012      	beq.n	80105bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	3324      	adds	r3, #36	; 0x24
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fbe8 	bl	8010d70 <xTaskRemoveFromEventList>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d001      	beq.n	80105aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105a6:	f000 fccd 	bl	8010f44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105aa:	7bfb      	ldrb	r3, [r7, #15]
 80105ac:	3b01      	subs	r3, #1
 80105ae:	b2db      	uxtb	r3, r3
 80105b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	dce9      	bgt.n	801058e <prvUnlockQueue+0x16>
 80105ba:	e000      	b.n	80105be <prvUnlockQueue+0x46>
					break;
 80105bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	22ff      	movs	r2, #255	; 0xff
 80105c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80105c6:	f001 f905 	bl	80117d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105ca:	f001 f8d3 	bl	8011774 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105d6:	e011      	b.n	80105fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	691b      	ldr	r3, [r3, #16]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d012      	beq.n	8010606 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	3310      	adds	r3, #16
 80105e4:	4618      	mov	r0, r3
 80105e6:	f000 fbc3 	bl	8010d70 <xTaskRemoveFromEventList>
 80105ea:	4603      	mov	r3, r0
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d001      	beq.n	80105f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80105f0:	f000 fca8 	bl	8010f44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80105f4:	7bbb      	ldrb	r3, [r7, #14]
 80105f6:	3b01      	subs	r3, #1
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010600:	2b00      	cmp	r3, #0
 8010602:	dce9      	bgt.n	80105d8 <prvUnlockQueue+0x60>
 8010604:	e000      	b.n	8010608 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010606:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	22ff      	movs	r2, #255	; 0xff
 801060c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010610:	f001 f8e0 	bl	80117d4 <vPortExitCritical>
}
 8010614:	bf00      	nop
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010624:	f001 f8a6 	bl	8011774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010630:	2301      	movs	r3, #1
 8010632:	60fb      	str	r3, [r7, #12]
 8010634:	e001      	b.n	801063a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010636:	2300      	movs	r3, #0
 8010638:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801063a:	f001 f8cb 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 801063e:	68fb      	ldr	r3, [r7, #12]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3710      	adds	r7, #16
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010650:	f001 f890 	bl	8011774 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801065c:	429a      	cmp	r2, r3
 801065e:	d102      	bne.n	8010666 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010660:	2301      	movs	r3, #1
 8010662:	60fb      	str	r3, [r7, #12]
 8010664:	e001      	b.n	801066a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010666:	2300      	movs	r3, #0
 8010668:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801066a:	f001 f8b3 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 801066e:	68fb      	ldr	r3, [r7, #12]
}
 8010670:	4618      	mov	r0, r3
 8010672:	3710      	adds	r7, #16
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010678:	b580      	push	{r7, lr}
 801067a:	b08c      	sub	sp, #48	; 0x30
 801067c:	af04      	add	r7, sp, #16
 801067e:	60f8      	str	r0, [r7, #12]
 8010680:	60b9      	str	r1, [r7, #8]
 8010682:	603b      	str	r3, [r7, #0]
 8010684:	4613      	mov	r3, r2
 8010686:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010688:	88fb      	ldrh	r3, [r7, #6]
 801068a:	009b      	lsls	r3, r3, #2
 801068c:	4618      	mov	r0, r3
 801068e:	f001 f993 	bl	80119b8 <pvPortMalloc>
 8010692:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00e      	beq.n	80106b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801069a:	20b4      	movs	r0, #180	; 0xb4
 801069c:	f001 f98c 	bl	80119b8 <pvPortMalloc>
 80106a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80106a8:	69fb      	ldr	r3, [r7, #28]
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	631a      	str	r2, [r3, #48]	; 0x30
 80106ae:	e005      	b.n	80106bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80106b0:	6978      	ldr	r0, [r7, #20]
 80106b2:	f001 fa4d 	bl	8011b50 <vPortFree>
 80106b6:	e001      	b.n	80106bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80106b8:	2300      	movs	r3, #0
 80106ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d013      	beq.n	80106ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80106c2:	88fa      	ldrh	r2, [r7, #6]
 80106c4:	2300      	movs	r3, #0
 80106c6:	9303      	str	r3, [sp, #12]
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	9302      	str	r3, [sp, #8]
 80106cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ce:	9301      	str	r3, [sp, #4]
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	68b9      	ldr	r1, [r7, #8]
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f000 f80f 	bl	80106fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80106de:	69f8      	ldr	r0, [r7, #28]
 80106e0:	f000 f8ae 	bl	8010840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80106e4:	2301      	movs	r3, #1
 80106e6:	61bb      	str	r3, [r7, #24]
 80106e8:	e002      	b.n	80106f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80106ea:	f04f 33ff 	mov.w	r3, #4294967295
 80106ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80106f0:	69bb      	ldr	r3, [r7, #24]
	}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3720      	adds	r7, #32
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
	...

080106fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b088      	sub	sp, #32
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	607a      	str	r2, [r7, #4]
 8010708:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801070a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801070c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010714:	3b01      	subs	r3, #1
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4413      	add	r3, r2
 801071a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	f023 0307 	bic.w	r3, r3, #7
 8010722:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010724:	69bb      	ldr	r3, [r7, #24]
 8010726:	f003 0307 	and.w	r3, r3, #7
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00a      	beq.n	8010744 <prvInitialiseNewTask+0x48>
	__asm volatile
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	617b      	str	r3, [r7, #20]
}
 8010740:	bf00      	nop
 8010742:	e7fe      	b.n	8010742 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d01f      	beq.n	801078a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801074a:	2300      	movs	r3, #0
 801074c:	61fb      	str	r3, [r7, #28]
 801074e:	e012      	b.n	8010776 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010750:	68ba      	ldr	r2, [r7, #8]
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	4413      	add	r3, r2
 8010756:	7819      	ldrb	r1, [r3, #0]
 8010758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	4413      	add	r3, r2
 801075e:	3334      	adds	r3, #52	; 0x34
 8010760:	460a      	mov	r2, r1
 8010762:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010764:	68ba      	ldr	r2, [r7, #8]
 8010766:	69fb      	ldr	r3, [r7, #28]
 8010768:	4413      	add	r3, r2
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d006      	beq.n	801077e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	3301      	adds	r3, #1
 8010774:	61fb      	str	r3, [r7, #28]
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	2b0f      	cmp	r3, #15
 801077a:	d9e9      	bls.n	8010750 <prvInitialiseNewTask+0x54>
 801077c:	e000      	b.n	8010780 <prvInitialiseNewTask+0x84>
			{
				break;
 801077e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010782:	2200      	movs	r2, #0
 8010784:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010788:	e003      	b.n	8010792 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078c:	2200      	movs	r2, #0
 801078e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	2b06      	cmp	r3, #6
 8010796:	d901      	bls.n	801079c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010798:	2306      	movs	r3, #6
 801079a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801079c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	2200      	movs	r2, #0
 80107ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	3304      	adds	r3, #4
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7ff fa74 	bl	800fca0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80107b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ba:	3318      	adds	r3, #24
 80107bc:	4618      	mov	r0, r3
 80107be:	f7ff fa6f 	bl	800fca0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80107c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80107c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ca:	f1c3 0207 	rsb	r2, r3, #7
 80107ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80107d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80107d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107da:	2200      	movs	r2, #0
 80107dc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80107e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e2:	2200      	movs	r2, #0
 80107e4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	334c      	adds	r3, #76	; 0x4c
 80107ec:	2260      	movs	r2, #96	; 0x60
 80107ee:	2100      	movs	r1, #0
 80107f0:	4618      	mov	r0, r3
 80107f2:	f001 fb33 	bl	8011e5c <memset>
 80107f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f8:	4a0e      	ldr	r2, [pc, #56]	; (8010834 <prvInitialiseNewTask+0x138>)
 80107fa:	651a      	str	r2, [r3, #80]	; 0x50
 80107fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fe:	4a0e      	ldr	r2, [pc, #56]	; (8010838 <prvInitialiseNewTask+0x13c>)
 8010800:	655a      	str	r2, [r3, #84]	; 0x54
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	4a0d      	ldr	r2, [pc, #52]	; (801083c <prvInitialiseNewTask+0x140>)
 8010806:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8010808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080a:	2200      	movs	r2, #0
 801080c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	68f9      	ldr	r1, [r7, #12]
 8010814:	69b8      	ldr	r0, [r7, #24]
 8010816:	f000 fe7d 	bl	8011514 <pxPortInitialiseStack>
 801081a:	4602      	mov	r2, r0
 801081c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010822:	2b00      	cmp	r3, #0
 8010824:	d002      	beq.n	801082c <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801082a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801082c:	bf00      	nop
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	08013248 	.word	0x08013248
 8010838:	08013268 	.word	0x08013268
 801083c:	08013228 	.word	0x08013228

08010840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010848:	f000 ff94 	bl	8011774 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801084c:	4b24      	ldr	r3, [pc, #144]	; (80108e0 <prvAddNewTaskToReadyList+0xa0>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	3301      	adds	r3, #1
 8010852:	4a23      	ldr	r2, [pc, #140]	; (80108e0 <prvAddNewTaskToReadyList+0xa0>)
 8010854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010856:	4b23      	ldr	r3, [pc, #140]	; (80108e4 <prvAddNewTaskToReadyList+0xa4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d109      	bne.n	8010872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801085e:	4a21      	ldr	r2, [pc, #132]	; (80108e4 <prvAddNewTaskToReadyList+0xa4>)
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010864:	4b1e      	ldr	r3, [pc, #120]	; (80108e0 <prvAddNewTaskToReadyList+0xa0>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2b01      	cmp	r3, #1
 801086a:	d110      	bne.n	801088e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801086c:	f000 fb88 	bl	8010f80 <prvInitialiseTaskLists>
 8010870:	e00d      	b.n	801088e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010872:	4b1d      	ldr	r3, [pc, #116]	; (80108e8 <prvAddNewTaskToReadyList+0xa8>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d109      	bne.n	801088e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801087a:	4b1a      	ldr	r3, [pc, #104]	; (80108e4 <prvAddNewTaskToReadyList+0xa4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010884:	429a      	cmp	r2, r3
 8010886:	d802      	bhi.n	801088e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010888:	4a16      	ldr	r2, [pc, #88]	; (80108e4 <prvAddNewTaskToReadyList+0xa4>)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801088e:	4b17      	ldr	r3, [pc, #92]	; (80108ec <prvAddNewTaskToReadyList+0xac>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	3301      	adds	r3, #1
 8010894:	4a15      	ldr	r2, [pc, #84]	; (80108ec <prvAddNewTaskToReadyList+0xac>)
 8010896:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089c:	2201      	movs	r2, #1
 801089e:	409a      	lsls	r2, r3
 80108a0:	4b13      	ldr	r3, [pc, #76]	; (80108f0 <prvAddNewTaskToReadyList+0xb0>)
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4313      	orrs	r3, r2
 80108a6:	4a12      	ldr	r2, [pc, #72]	; (80108f0 <prvAddNewTaskToReadyList+0xb0>)
 80108a8:	6013      	str	r3, [r2, #0]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108ae:	4613      	mov	r3, r2
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	4413      	add	r3, r2
 80108b4:	009b      	lsls	r3, r3, #2
 80108b6:	4a0f      	ldr	r2, [pc, #60]	; (80108f4 <prvAddNewTaskToReadyList+0xb4>)
 80108b8:	441a      	add	r2, r3
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	3304      	adds	r3, #4
 80108be:	4619      	mov	r1, r3
 80108c0:	4610      	mov	r0, r2
 80108c2:	f7ff f9fa 	bl	800fcba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80108c6:	f000 ff85 	bl	80117d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80108ca:	4b07      	ldr	r3, [pc, #28]	; (80108e8 <prvAddNewTaskToReadyList+0xa8>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80108d2:	4b04      	ldr	r3, [pc, #16]	; (80108e4 <prvAddNewTaskToReadyList+0xa4>)
 80108d4:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80108d6:	bf00      	nop
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	20000b24 	.word	0x20000b24
 80108e4:	20000a24 	.word	0x20000a24
 80108e8:	20000b30 	.word	0x20000b30
 80108ec:	20000b40 	.word	0x20000b40
 80108f0:	20000b2c 	.word	0x20000b2c
 80108f4:	20000a28 	.word	0x20000a28

080108f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010900:	2300      	movs	r3, #0
 8010902:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2b00      	cmp	r3, #0
 8010908:	d017      	beq.n	801093a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801090a:	4b13      	ldr	r3, [pc, #76]	; (8010958 <vTaskDelay+0x60>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d00a      	beq.n	8010928 <vTaskDelay+0x30>
	__asm volatile
 8010912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010916:	f383 8811 	msr	BASEPRI, r3
 801091a:	f3bf 8f6f 	isb	sy
 801091e:	f3bf 8f4f 	dsb	sy
 8010922:	60bb      	str	r3, [r7, #8]
}
 8010924:	bf00      	nop
 8010926:	e7fe      	b.n	8010926 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010928:	f000 f86a 	bl	8010a00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 fd86 	bl	8011440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010934:	f000 f872 	bl	8010a1c <xTaskResumeAll>
 8010938:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d107      	bne.n	8010950 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010940:	4b06      	ldr	r3, [pc, #24]	; (801095c <vTaskDelay+0x64>)
 8010942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010950:	bf00      	nop
 8010952:	3710      	adds	r7, #16
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	20000b4c 	.word	0x20000b4c
 801095c:	e000ed04 	.word	0xe000ed04

08010960 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b086      	sub	sp, #24
 8010964:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8010966:	4b1e      	ldr	r3, [pc, #120]	; (80109e0 <vTaskStartScheduler+0x80>)
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	2300      	movs	r3, #0
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	2300      	movs	r3, #0
 8010970:	2280      	movs	r2, #128	; 0x80
 8010972:	491c      	ldr	r1, [pc, #112]	; (80109e4 <vTaskStartScheduler+0x84>)
 8010974:	481c      	ldr	r0, [pc, #112]	; (80109e8 <vTaskStartScheduler+0x88>)
 8010976:	f7ff fe7f 	bl	8010678 <xTaskCreate>
 801097a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b01      	cmp	r3, #1
 8010980:	d11b      	bne.n	80109ba <vTaskStartScheduler+0x5a>
	__asm volatile
 8010982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010986:	f383 8811 	msr	BASEPRI, r3
 801098a:	f3bf 8f6f 	isb	sy
 801098e:	f3bf 8f4f 	dsb	sy
 8010992:	60bb      	str	r3, [r7, #8]
}
 8010994:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010996:	4b15      	ldr	r3, [pc, #84]	; (80109ec <vTaskStartScheduler+0x8c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	334c      	adds	r3, #76	; 0x4c
 801099c:	4a14      	ldr	r2, [pc, #80]	; (80109f0 <vTaskStartScheduler+0x90>)
 801099e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109a0:	4b14      	ldr	r3, [pc, #80]	; (80109f4 <vTaskStartScheduler+0x94>)
 80109a2:	f04f 32ff 	mov.w	r2, #4294967295
 80109a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109a8:	4b13      	ldr	r3, [pc, #76]	; (80109f8 <vTaskStartScheduler+0x98>)
 80109aa:	2201      	movs	r2, #1
 80109ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80109ae:	4b13      	ldr	r3, [pc, #76]	; (80109fc <vTaskStartScheduler+0x9c>)
 80109b0:	2200      	movs	r2, #0
 80109b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109b4:	f000 fe3c 	bl	8011630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109b8:	e00e      	b.n	80109d8 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c0:	d10a      	bne.n	80109d8 <vTaskStartScheduler+0x78>
	__asm volatile
 80109c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c6:	f383 8811 	msr	BASEPRI, r3
 80109ca:	f3bf 8f6f 	isb	sy
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	607b      	str	r3, [r7, #4]
}
 80109d4:	bf00      	nop
 80109d6:	e7fe      	b.n	80109d6 <vTaskStartScheduler+0x76>
}
 80109d8:	bf00      	nop
 80109da:	3710      	adds	r7, #16
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	20000b48 	.word	0x20000b48
 80109e4:	080131e0 	.word	0x080131e0
 80109e8:	08010f5d 	.word	0x08010f5d
 80109ec:	20000a24 	.word	0x20000a24
 80109f0:	20000014 	.word	0x20000014
 80109f4:	20000b44 	.word	0x20000b44
 80109f8:	20000b30 	.word	0x20000b30
 80109fc:	20000b28 	.word	0x20000b28

08010a00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a00:	b480      	push	{r7}
 8010a02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010a04:	4b04      	ldr	r3, [pc, #16]	; (8010a18 <vTaskSuspendAll+0x18>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	4a03      	ldr	r2, [pc, #12]	; (8010a18 <vTaskSuspendAll+0x18>)
 8010a0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010a0e:	bf00      	nop
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	20000b4c 	.word	0x20000b4c

08010a1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a22:	2300      	movs	r3, #0
 8010a24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a26:	2300      	movs	r3, #0
 8010a28:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a2a:	4b3b      	ldr	r3, [pc, #236]	; (8010b18 <xTaskResumeAll+0xfc>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10a      	bne.n	8010a48 <xTaskResumeAll+0x2c>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	603b      	str	r3, [r7, #0]
}
 8010a44:	bf00      	nop
 8010a46:	e7fe      	b.n	8010a46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a48:	f000 fe94 	bl	8011774 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a4c:	4b32      	ldr	r3, [pc, #200]	; (8010b18 <xTaskResumeAll+0xfc>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3b01      	subs	r3, #1
 8010a52:	4a31      	ldr	r2, [pc, #196]	; (8010b18 <xTaskResumeAll+0xfc>)
 8010a54:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a56:	4b30      	ldr	r3, [pc, #192]	; (8010b18 <xTaskResumeAll+0xfc>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d155      	bne.n	8010b0a <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a5e:	4b2f      	ldr	r3, [pc, #188]	; (8010b1c <xTaskResumeAll+0x100>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d051      	beq.n	8010b0a <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a66:	e02e      	b.n	8010ac6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a68:	4b2d      	ldr	r3, [pc, #180]	; (8010b20 <xTaskResumeAll+0x104>)
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	3318      	adds	r3, #24
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7ff f97d 	bl	800fd74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	3304      	adds	r3, #4
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7ff f978 	bl	800fd74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a88:	2201      	movs	r2, #1
 8010a8a:	409a      	lsls	r2, r3
 8010a8c:	4b25      	ldr	r3, [pc, #148]	; (8010b24 <xTaskResumeAll+0x108>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	4313      	orrs	r3, r2
 8010a92:	4a24      	ldr	r2, [pc, #144]	; (8010b24 <xTaskResumeAll+0x108>)
 8010a94:	6013      	str	r3, [r2, #0]
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	009b      	lsls	r3, r3, #2
 8010a9e:	4413      	add	r3, r2
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	4a21      	ldr	r2, [pc, #132]	; (8010b28 <xTaskResumeAll+0x10c>)
 8010aa4:	441a      	add	r2, r3
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	3304      	adds	r3, #4
 8010aaa:	4619      	mov	r1, r3
 8010aac:	4610      	mov	r0, r2
 8010aae:	f7ff f904 	bl	800fcba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <xTaskResumeAll+0x110>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010abc:	429a      	cmp	r2, r3
 8010abe:	d302      	bcc.n	8010ac6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010ac0:	4b1b      	ldr	r3, [pc, #108]	; (8010b30 <xTaskResumeAll+0x114>)
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010ac6:	4b16      	ldr	r3, [pc, #88]	; (8010b20 <xTaskResumeAll+0x104>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1cc      	bne.n	8010a68 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ad4:	f000 fad8 	bl	8011088 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010ad8:	4b16      	ldr	r3, [pc, #88]	; (8010b34 <xTaskResumeAll+0x118>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d010      	beq.n	8010b06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010ae4:	f000 f828 	bl	8010b38 <xTaskIncrementTick>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d002      	beq.n	8010af4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010aee:	4b10      	ldr	r3, [pc, #64]	; (8010b30 <xTaskResumeAll+0x114>)
 8010af0:	2201      	movs	r2, #1
 8010af2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010af4:	68bb      	ldr	r3, [r7, #8]
 8010af6:	3b01      	subs	r3, #1
 8010af8:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1f1      	bne.n	8010ae4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010b00:	4b0c      	ldr	r3, [pc, #48]	; (8010b34 <xTaskResumeAll+0x118>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b06:	4b0a      	ldr	r3, [pc, #40]	; (8010b30 <xTaskResumeAll+0x114>)
 8010b08:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b0a:	f000 fe63 	bl	80117d4 <vPortExitCritical>

	return xAlreadyYielded;
 8010b0e:	687b      	ldr	r3, [r7, #4]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	20000b4c 	.word	0x20000b4c
 8010b1c:	20000b24 	.word	0x20000b24
 8010b20:	20000ae4 	.word	0x20000ae4
 8010b24:	20000b2c 	.word	0x20000b2c
 8010b28:	20000a28 	.word	0x20000a28
 8010b2c:	20000a24 	.word	0x20000a24
 8010b30:	20000b38 	.word	0x20000b38
 8010b34:	20000b34 	.word	0x20000b34

08010b38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b086      	sub	sp, #24
 8010b3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b3e:	2300      	movs	r3, #0
 8010b40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b42:	4b3f      	ldr	r3, [pc, #252]	; (8010c40 <xTaskIncrementTick+0x108>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d16f      	bne.n	8010c2a <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b4a:	4b3e      	ldr	r3, [pc, #248]	; (8010c44 <xTaskIncrementTick+0x10c>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b52:	4a3c      	ldr	r2, [pc, #240]	; (8010c44 <xTaskIncrementTick+0x10c>)
 8010b54:	693b      	ldr	r3, [r7, #16]
 8010b56:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d120      	bne.n	8010ba0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b5e:	4b3a      	ldr	r3, [pc, #232]	; (8010c48 <xTaskIncrementTick+0x110>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00a      	beq.n	8010b7e <xTaskIncrementTick+0x46>
	__asm volatile
 8010b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b6c:	f383 8811 	msr	BASEPRI, r3
 8010b70:	f3bf 8f6f 	isb	sy
 8010b74:	f3bf 8f4f 	dsb	sy
 8010b78:	603b      	str	r3, [r7, #0]
}
 8010b7a:	bf00      	nop
 8010b7c:	e7fe      	b.n	8010b7c <xTaskIncrementTick+0x44>
 8010b7e:	4b32      	ldr	r3, [pc, #200]	; (8010c48 <xTaskIncrementTick+0x110>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	4b31      	ldr	r3, [pc, #196]	; (8010c4c <xTaskIncrementTick+0x114>)
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	4a2f      	ldr	r2, [pc, #188]	; (8010c48 <xTaskIncrementTick+0x110>)
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	4a2f      	ldr	r2, [pc, #188]	; (8010c4c <xTaskIncrementTick+0x114>)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6013      	str	r3, [r2, #0]
 8010b92:	4b2f      	ldr	r3, [pc, #188]	; (8010c50 <xTaskIncrementTick+0x118>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	3301      	adds	r3, #1
 8010b98:	4a2d      	ldr	r2, [pc, #180]	; (8010c50 <xTaskIncrementTick+0x118>)
 8010b9a:	6013      	str	r3, [r2, #0]
 8010b9c:	f000 fa74 	bl	8011088 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010ba0:	4b2c      	ldr	r3, [pc, #176]	; (8010c54 <xTaskIncrementTick+0x11c>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d344      	bcc.n	8010c34 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010baa:	4b27      	ldr	r3, [pc, #156]	; (8010c48 <xTaskIncrementTick+0x110>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d104      	bne.n	8010bbe <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bb4:	4b27      	ldr	r3, [pc, #156]	; (8010c54 <xTaskIncrementTick+0x11c>)
 8010bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bba:	601a      	str	r2, [r3, #0]
					break;
 8010bbc:	e03a      	b.n	8010c34 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bbe:	4b22      	ldr	r3, [pc, #136]	; (8010c48 <xTaskIncrementTick+0x110>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010bce:	693a      	ldr	r2, [r7, #16]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	d203      	bcs.n	8010bde <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010bd6:	4a1f      	ldr	r2, [pc, #124]	; (8010c54 <xTaskIncrementTick+0x11c>)
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010bdc:	e02a      	b.n	8010c34 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	3304      	adds	r3, #4
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff f8c6 	bl	800fd74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d004      	beq.n	8010bfa <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	3318      	adds	r3, #24
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7ff f8bd 	bl	800fd74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bfe:	2201      	movs	r2, #1
 8010c00:	409a      	lsls	r2, r3
 8010c02:	4b15      	ldr	r3, [pc, #84]	; (8010c58 <xTaskIncrementTick+0x120>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	4313      	orrs	r3, r2
 8010c08:	4a13      	ldr	r2, [pc, #76]	; (8010c58 <xTaskIncrementTick+0x120>)
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c10:	4613      	mov	r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	4413      	add	r3, r2
 8010c16:	009b      	lsls	r3, r3, #2
 8010c18:	4a10      	ldr	r2, [pc, #64]	; (8010c5c <xTaskIncrementTick+0x124>)
 8010c1a:	441a      	add	r2, r3
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	3304      	adds	r3, #4
 8010c20:	4619      	mov	r1, r3
 8010c22:	4610      	mov	r0, r2
 8010c24:	f7ff f849 	bl	800fcba <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c28:	e7bf      	b.n	8010baa <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010c2a:	4b0d      	ldr	r3, [pc, #52]	; (8010c60 <xTaskIncrementTick+0x128>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3301      	adds	r3, #1
 8010c30:	4a0b      	ldr	r2, [pc, #44]	; (8010c60 <xTaskIncrementTick+0x128>)
 8010c32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010c34:	697b      	ldr	r3, [r7, #20]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3718      	adds	r7, #24
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	20000b4c 	.word	0x20000b4c
 8010c44:	20000b28 	.word	0x20000b28
 8010c48:	20000adc 	.word	0x20000adc
 8010c4c:	20000ae0 	.word	0x20000ae0
 8010c50:	20000b3c 	.word	0x20000b3c
 8010c54:	20000b44 	.word	0x20000b44
 8010c58:	20000b2c 	.word	0x20000b2c
 8010c5c:	20000a28 	.word	0x20000a28
 8010c60:	20000b34 	.word	0x20000b34

08010c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010c64:	b480      	push	{r7}
 8010c66:	b087      	sub	sp, #28
 8010c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010c6a:	4b29      	ldr	r3, [pc, #164]	; (8010d10 <vTaskSwitchContext+0xac>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010c72:	4b28      	ldr	r3, [pc, #160]	; (8010d14 <vTaskSwitchContext+0xb0>)
 8010c74:	2201      	movs	r2, #1
 8010c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010c78:	e044      	b.n	8010d04 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8010c7a:	4b26      	ldr	r3, [pc, #152]	; (8010d14 <vTaskSwitchContext+0xb0>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c80:	4b25      	ldr	r3, [pc, #148]	; (8010d18 <vTaskSwitchContext+0xb4>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	fab3 f383 	clz	r3, r3
 8010c8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010c8e:	7afb      	ldrb	r3, [r7, #11]
 8010c90:	f1c3 031f 	rsb	r3, r3, #31
 8010c94:	617b      	str	r3, [r7, #20]
 8010c96:	4921      	ldr	r1, [pc, #132]	; (8010d1c <vTaskSwitchContext+0xb8>)
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	4613      	mov	r3, r2
 8010c9c:	009b      	lsls	r3, r3, #2
 8010c9e:	4413      	add	r3, r2
 8010ca0:	009b      	lsls	r3, r3, #2
 8010ca2:	440b      	add	r3, r1
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d10a      	bne.n	8010cc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cae:	f383 8811 	msr	BASEPRI, r3
 8010cb2:	f3bf 8f6f 	isb	sy
 8010cb6:	f3bf 8f4f 	dsb	sy
 8010cba:	607b      	str	r3, [r7, #4]
}
 8010cbc:	bf00      	nop
 8010cbe:	e7fe      	b.n	8010cbe <vTaskSwitchContext+0x5a>
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	009b      	lsls	r3, r3, #2
 8010cc6:	4413      	add	r3, r2
 8010cc8:	009b      	lsls	r3, r3, #2
 8010cca:	4a14      	ldr	r2, [pc, #80]	; (8010d1c <vTaskSwitchContext+0xb8>)
 8010ccc:	4413      	add	r3, r2
 8010cce:	613b      	str	r3, [r7, #16]
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	685b      	ldr	r3, [r3, #4]
 8010cd4:	685a      	ldr	r2, [r3, #4]
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	605a      	str	r2, [r3, #4]
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	685a      	ldr	r2, [r3, #4]
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d104      	bne.n	8010cf0 <vTaskSwitchContext+0x8c>
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	685a      	ldr	r2, [r3, #4]
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	605a      	str	r2, [r3, #4]
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	68db      	ldr	r3, [r3, #12]
 8010cf6:	4a0a      	ldr	r2, [pc, #40]	; (8010d20 <vTaskSwitchContext+0xbc>)
 8010cf8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010cfa:	4b09      	ldr	r3, [pc, #36]	; (8010d20 <vTaskSwitchContext+0xbc>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	334c      	adds	r3, #76	; 0x4c
 8010d00:	4a08      	ldr	r2, [pc, #32]	; (8010d24 <vTaskSwitchContext+0xc0>)
 8010d02:	6013      	str	r3, [r2, #0]
}
 8010d04:	bf00      	nop
 8010d06:	371c      	adds	r7, #28
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	20000b4c 	.word	0x20000b4c
 8010d14:	20000b38 	.word	0x20000b38
 8010d18:	20000b2c 	.word	0x20000b2c
 8010d1c:	20000a28 	.word	0x20000a28
 8010d20:	20000a24 	.word	0x20000a24
 8010d24:	20000014 	.word	0x20000014

08010d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b084      	sub	sp, #16
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d10a      	bne.n	8010d4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3c:	f383 8811 	msr	BASEPRI, r3
 8010d40:	f3bf 8f6f 	isb	sy
 8010d44:	f3bf 8f4f 	dsb	sy
 8010d48:	60fb      	str	r3, [r7, #12]
}
 8010d4a:	bf00      	nop
 8010d4c:	e7fe      	b.n	8010d4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010d4e:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <vTaskPlaceOnEventList+0x44>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	3318      	adds	r3, #24
 8010d54:	4619      	mov	r1, r3
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f7fe ffd3 	bl	800fd02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	6838      	ldr	r0, [r7, #0]
 8010d60:	f000 fb6e 	bl	8011440 <prvAddCurrentTaskToDelayedList>
}
 8010d64:	bf00      	nop
 8010d66:	3710      	adds	r7, #16
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	20000a24 	.word	0x20000a24

08010d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b086      	sub	sp, #24
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d10a      	bne.n	8010d9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	60fb      	str	r3, [r7, #12]
}
 8010d98:	bf00      	nop
 8010d9a:	e7fe      	b.n	8010d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010d9c:	693b      	ldr	r3, [r7, #16]
 8010d9e:	3318      	adds	r3, #24
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fe ffe7 	bl	800fd74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010da6:	4b1d      	ldr	r3, [pc, #116]	; (8010e1c <xTaskRemoveFromEventList+0xac>)
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d11c      	bne.n	8010de8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	3304      	adds	r3, #4
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fe ffde 	bl	800fd74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010db8:	693b      	ldr	r3, [r7, #16]
 8010dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dbc:	2201      	movs	r2, #1
 8010dbe:	409a      	lsls	r2, r3
 8010dc0:	4b17      	ldr	r3, [pc, #92]	; (8010e20 <xTaskRemoveFromEventList+0xb0>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4313      	orrs	r3, r2
 8010dc6:	4a16      	ldr	r2, [pc, #88]	; (8010e20 <xTaskRemoveFromEventList+0xb0>)
 8010dc8:	6013      	str	r3, [r2, #0]
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dce:	4613      	mov	r3, r2
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	4413      	add	r3, r2
 8010dd4:	009b      	lsls	r3, r3, #2
 8010dd6:	4a13      	ldr	r2, [pc, #76]	; (8010e24 <xTaskRemoveFromEventList+0xb4>)
 8010dd8:	441a      	add	r2, r3
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	3304      	adds	r3, #4
 8010dde:	4619      	mov	r1, r3
 8010de0:	4610      	mov	r0, r2
 8010de2:	f7fe ff6a 	bl	800fcba <vListInsertEnd>
 8010de6:	e005      	b.n	8010df4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	3318      	adds	r3, #24
 8010dec:	4619      	mov	r1, r3
 8010dee:	480e      	ldr	r0, [pc, #56]	; (8010e28 <xTaskRemoveFromEventList+0xb8>)
 8010df0:	f7fe ff63 	bl	800fcba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010df8:	4b0c      	ldr	r3, [pc, #48]	; (8010e2c <xTaskRemoveFromEventList+0xbc>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d905      	bls.n	8010e0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010e02:	2301      	movs	r3, #1
 8010e04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010e06:	4b0a      	ldr	r3, [pc, #40]	; (8010e30 <xTaskRemoveFromEventList+0xc0>)
 8010e08:	2201      	movs	r2, #1
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	e001      	b.n	8010e12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010e12:	697b      	ldr	r3, [r7, #20]
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3718      	adds	r7, #24
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	20000b4c 	.word	0x20000b4c
 8010e20:	20000b2c 	.word	0x20000b2c
 8010e24:	20000a28 	.word	0x20000a28
 8010e28:	20000ae4 	.word	0x20000ae4
 8010e2c:	20000a24 	.word	0x20000a24
 8010e30:	20000b38 	.word	0x20000b38

08010e34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010e34:	b480      	push	{r7}
 8010e36:	b083      	sub	sp, #12
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010e3c:	4b06      	ldr	r3, [pc, #24]	; (8010e58 <vTaskInternalSetTimeOutState+0x24>)
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010e44:	4b05      	ldr	r3, [pc, #20]	; (8010e5c <vTaskInternalSetTimeOutState+0x28>)
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	605a      	str	r2, [r3, #4]
}
 8010e4c:	bf00      	nop
 8010e4e:	370c      	adds	r7, #12
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr
 8010e58:	20000b3c 	.word	0x20000b3c
 8010e5c:	20000b28 	.word	0x20000b28

08010e60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b088      	sub	sp, #32
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d10a      	bne.n	8010e86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	613b      	str	r3, [r7, #16]
}
 8010e82:	bf00      	nop
 8010e84:	e7fe      	b.n	8010e84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d10a      	bne.n	8010ea2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e90:	f383 8811 	msr	BASEPRI, r3
 8010e94:	f3bf 8f6f 	isb	sy
 8010e98:	f3bf 8f4f 	dsb	sy
 8010e9c:	60fb      	str	r3, [r7, #12]
}
 8010e9e:	bf00      	nop
 8010ea0:	e7fe      	b.n	8010ea0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010ea2:	f000 fc67 	bl	8011774 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010ea6:	4b24      	ldr	r3, [pc, #144]	; (8010f38 <xTaskCheckForTimeOut+0xd8>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	69ba      	ldr	r2, [r7, #24]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8010eb6:	4b21      	ldr	r3, [pc, #132]	; (8010f3c <xTaskCheckForTimeOut+0xdc>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d007      	beq.n	8010ed2 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010ec2:	4b1e      	ldr	r3, [pc, #120]	; (8010f3c <xTaskCheckForTimeOut+0xdc>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				xReturn = pdTRUE;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	61fb      	str	r3, [r7, #28]
 8010ed0:	e02b      	b.n	8010f2a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eda:	d102      	bne.n	8010ee2 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010edc:	2300      	movs	r3, #0
 8010ede:	61fb      	str	r3, [r7, #28]
 8010ee0:	e023      	b.n	8010f2a <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681a      	ldr	r2, [r3, #0]
 8010ee6:	4b16      	ldr	r3, [pc, #88]	; (8010f40 <xTaskCheckForTimeOut+0xe0>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d007      	beq.n	8010efe <xTaskCheckForTimeOut+0x9e>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	69ba      	ldr	r2, [r7, #24]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d302      	bcc.n	8010efe <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010ef8:	2301      	movs	r3, #1
 8010efa:	61fb      	str	r3, [r7, #28]
 8010efc:	e015      	b.n	8010f2a <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d20b      	bcs.n	8010f20 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	1ad2      	subs	r2, r2, r3
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f7ff ff8d 	bl	8010e34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010f1a:	2300      	movs	r3, #0
 8010f1c:	61fb      	str	r3, [r7, #28]
 8010f1e:	e004      	b.n	8010f2a <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	2200      	movs	r2, #0
 8010f24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010f26:	2301      	movs	r3, #1
 8010f28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010f2a:	f000 fc53 	bl	80117d4 <vPortExitCritical>

	return xReturn;
 8010f2e:	69fb      	ldr	r3, [r7, #28]
}
 8010f30:	4618      	mov	r0, r3
 8010f32:	3720      	adds	r7, #32
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}
 8010f38:	20000b28 	.word	0x20000b28
 8010f3c:	20000a24 	.word	0x20000a24
 8010f40:	20000b3c 	.word	0x20000b3c

08010f44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010f44:	b480      	push	{r7}
 8010f46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010f48:	4b03      	ldr	r3, [pc, #12]	; (8010f58 <vTaskMissedYield+0x14>)
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	601a      	str	r2, [r3, #0]
}
 8010f4e:	bf00      	nop
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	20000b38 	.word	0x20000b38

08010f5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b082      	sub	sp, #8
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010f64:	f000 f84c 	bl	8011000 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8010f68:	4b04      	ldr	r3, [pc, #16]	; (8010f7c <prvIdleTask+0x20>)
 8010f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f6e:	601a      	str	r2, [r3, #0]
 8010f70:	f3bf 8f4f 	dsb	sy
 8010f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010f78:	e7f4      	b.n	8010f64 <prvIdleTask+0x8>
 8010f7a:	bf00      	nop
 8010f7c:	e000ed04 	.word	0xe000ed04

08010f80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010f86:	2300      	movs	r3, #0
 8010f88:	607b      	str	r3, [r7, #4]
 8010f8a:	e00c      	b.n	8010fa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	009b      	lsls	r3, r3, #2
 8010f92:	4413      	add	r3, r2
 8010f94:	009b      	lsls	r3, r3, #2
 8010f96:	4a12      	ldr	r2, [pc, #72]	; (8010fe0 <prvInitialiseTaskLists+0x60>)
 8010f98:	4413      	add	r3, r2
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fe fe60 	bl	800fc60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	607b      	str	r3, [r7, #4]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2b06      	cmp	r3, #6
 8010faa:	d9ef      	bls.n	8010f8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010fac:	480d      	ldr	r0, [pc, #52]	; (8010fe4 <prvInitialiseTaskLists+0x64>)
 8010fae:	f7fe fe57 	bl	800fc60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010fb2:	480d      	ldr	r0, [pc, #52]	; (8010fe8 <prvInitialiseTaskLists+0x68>)
 8010fb4:	f7fe fe54 	bl	800fc60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010fb8:	480c      	ldr	r0, [pc, #48]	; (8010fec <prvInitialiseTaskLists+0x6c>)
 8010fba:	f7fe fe51 	bl	800fc60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010fbe:	480c      	ldr	r0, [pc, #48]	; (8010ff0 <prvInitialiseTaskLists+0x70>)
 8010fc0:	f7fe fe4e 	bl	800fc60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010fc4:	480b      	ldr	r0, [pc, #44]	; (8010ff4 <prvInitialiseTaskLists+0x74>)
 8010fc6:	f7fe fe4b 	bl	800fc60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010fca:	4b0b      	ldr	r3, [pc, #44]	; (8010ff8 <prvInitialiseTaskLists+0x78>)
 8010fcc:	4a05      	ldr	r2, [pc, #20]	; (8010fe4 <prvInitialiseTaskLists+0x64>)
 8010fce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010fd0:	4b0a      	ldr	r3, [pc, #40]	; (8010ffc <prvInitialiseTaskLists+0x7c>)
 8010fd2:	4a05      	ldr	r2, [pc, #20]	; (8010fe8 <prvInitialiseTaskLists+0x68>)
 8010fd4:	601a      	str	r2, [r3, #0]
}
 8010fd6:	bf00      	nop
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20000a28 	.word	0x20000a28
 8010fe4:	20000ab4 	.word	0x20000ab4
 8010fe8:	20000ac8 	.word	0x20000ac8
 8010fec:	20000ae4 	.word	0x20000ae4
 8010ff0:	20000af8 	.word	0x20000af8
 8010ff4:	20000b10 	.word	0x20000b10
 8010ff8:	20000adc 	.word	0x20000adc
 8010ffc:	20000ae0 	.word	0x20000ae0

08011000 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011006:	e019      	b.n	801103c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011008:	f000 fbb4 	bl	8011774 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801100c:	4b10      	ldr	r3, [pc, #64]	; (8011050 <prvCheckTasksWaitingTermination+0x50>)
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	3304      	adds	r3, #4
 8011018:	4618      	mov	r0, r3
 801101a:	f7fe feab 	bl	800fd74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801101e:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <prvCheckTasksWaitingTermination+0x54>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	3b01      	subs	r3, #1
 8011024:	4a0b      	ldr	r2, [pc, #44]	; (8011054 <prvCheckTasksWaitingTermination+0x54>)
 8011026:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011028:	4b0b      	ldr	r3, [pc, #44]	; (8011058 <prvCheckTasksWaitingTermination+0x58>)
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	3b01      	subs	r3, #1
 801102e:	4a0a      	ldr	r2, [pc, #40]	; (8011058 <prvCheckTasksWaitingTermination+0x58>)
 8011030:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011032:	f000 fbcf 	bl	80117d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f810 	bl	801105c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801103c:	4b06      	ldr	r3, [pc, #24]	; (8011058 <prvCheckTasksWaitingTermination+0x58>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1e1      	bne.n	8011008 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011044:	bf00      	nop
 8011046:	bf00      	nop
 8011048:	3708      	adds	r7, #8
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	20000af8 	.word	0x20000af8
 8011054:	20000b24 	.word	0x20000b24
 8011058:	20000b0c 	.word	0x20000b0c

0801105c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	334c      	adds	r3, #76	; 0x4c
 8011068:	4618      	mov	r0, r3
 801106a:	f000 ffed 	bl	8012048 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011072:	4618      	mov	r0, r3
 8011074:	f000 fd6c 	bl	8011b50 <vPortFree>
			vPortFree( pxTCB );
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	f000 fd69 	bl	8011b50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801107e:	bf00      	nop
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
	...

08011088 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801108e:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <prvResetNextTaskUnblockTime+0x38>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d104      	bne.n	80110a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011098:	4b0a      	ldr	r3, [pc, #40]	; (80110c4 <prvResetNextTaskUnblockTime+0x3c>)
 801109a:	f04f 32ff 	mov.w	r2, #4294967295
 801109e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80110a0:	e008      	b.n	80110b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110a2:	4b07      	ldr	r3, [pc, #28]	; (80110c0 <prvResetNextTaskUnblockTime+0x38>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	68db      	ldr	r3, [r3, #12]
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	4a04      	ldr	r2, [pc, #16]	; (80110c4 <prvResetNextTaskUnblockTime+0x3c>)
 80110b2:	6013      	str	r3, [r2, #0]
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr
 80110c0:	20000adc 	.word	0x20000adc
 80110c4:	20000b44 	.word	0x20000b44

080110c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80110ce:	4b0b      	ldr	r3, [pc, #44]	; (80110fc <xTaskGetSchedulerState+0x34>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d102      	bne.n	80110dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80110d6:	2301      	movs	r3, #1
 80110d8:	607b      	str	r3, [r7, #4]
 80110da:	e008      	b.n	80110ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110dc:	4b08      	ldr	r3, [pc, #32]	; (8011100 <xTaskGetSchedulerState+0x38>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d102      	bne.n	80110ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80110e4:	2302      	movs	r3, #2
 80110e6:	607b      	str	r3, [r7, #4]
 80110e8:	e001      	b.n	80110ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80110ea:	2300      	movs	r3, #0
 80110ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80110ee:	687b      	ldr	r3, [r7, #4]
	}
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	20000b30 	.word	0x20000b30
 8011100:	20000b4c 	.word	0x20000b4c

08011104 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011110:	2300      	movs	r3, #0
 8011112:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d05e      	beq.n	80111d8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111e:	4b31      	ldr	r3, [pc, #196]	; (80111e4 <xTaskPriorityInherit+0xe0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011124:	429a      	cmp	r2, r3
 8011126:	d24e      	bcs.n	80111c6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	699b      	ldr	r3, [r3, #24]
 801112c:	2b00      	cmp	r3, #0
 801112e:	db06      	blt.n	801113e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011130:	4b2c      	ldr	r3, [pc, #176]	; (80111e4 <xTaskPriorityInherit+0xe0>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011136:	f1c3 0207 	rsb	r2, r3, #7
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	6959      	ldr	r1, [r3, #20]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011146:	4613      	mov	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4a26      	ldr	r2, [pc, #152]	; (80111e8 <xTaskPriorityInherit+0xe4>)
 8011150:	4413      	add	r3, r2
 8011152:	4299      	cmp	r1, r3
 8011154:	d12f      	bne.n	80111b6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	3304      	adds	r3, #4
 801115a:	4618      	mov	r0, r3
 801115c:	f7fe fe0a 	bl	800fd74 <uxListRemove>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d10a      	bne.n	801117c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116a:	2201      	movs	r2, #1
 801116c:	fa02 f303 	lsl.w	r3, r2, r3
 8011170:	43da      	mvns	r2, r3
 8011172:	4b1e      	ldr	r3, [pc, #120]	; (80111ec <xTaskPriorityInherit+0xe8>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	4013      	ands	r3, r2
 8011178:	4a1c      	ldr	r2, [pc, #112]	; (80111ec <xTaskPriorityInherit+0xe8>)
 801117a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801117c:	4b19      	ldr	r3, [pc, #100]	; (80111e4 <xTaskPriorityInherit+0xe0>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801118a:	2201      	movs	r2, #1
 801118c:	409a      	lsls	r2, r3
 801118e:	4b17      	ldr	r3, [pc, #92]	; (80111ec <xTaskPriorityInherit+0xe8>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4313      	orrs	r3, r2
 8011194:	4a15      	ldr	r2, [pc, #84]	; (80111ec <xTaskPriorityInherit+0xe8>)
 8011196:	6013      	str	r3, [r2, #0]
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119c:	4613      	mov	r3, r2
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	4413      	add	r3, r2
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4a10      	ldr	r2, [pc, #64]	; (80111e8 <xTaskPriorityInherit+0xe4>)
 80111a6:	441a      	add	r2, r3
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	3304      	adds	r3, #4
 80111ac:	4619      	mov	r1, r3
 80111ae:	4610      	mov	r0, r2
 80111b0:	f7fe fd83 	bl	800fcba <vListInsertEnd>
 80111b4:	e004      	b.n	80111c0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80111b6:	4b0b      	ldr	r3, [pc, #44]	; (80111e4 <xTaskPriorityInherit+0xe0>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80111c0:	2301      	movs	r3, #1
 80111c2:	60fb      	str	r3, [r7, #12]
 80111c4:	e008      	b.n	80111d8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111ca:	4b06      	ldr	r3, [pc, #24]	; (80111e4 <xTaskPriorityInherit+0xe0>)
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d201      	bcs.n	80111d8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80111d4:	2301      	movs	r3, #1
 80111d6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80111d8:	68fb      	ldr	r3, [r7, #12]
	}
 80111da:	4618      	mov	r0, r3
 80111dc:	3710      	adds	r7, #16
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	20000a24 	.word	0x20000a24
 80111e8:	20000a28 	.word	0x20000a28
 80111ec:	20000b2c 	.word	0x20000b2c

080111f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80111fc:	2300      	movs	r3, #0
 80111fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d06e      	beq.n	80112e4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011206:	4b3a      	ldr	r3, [pc, #232]	; (80112f0 <xTaskPriorityDisinherit+0x100>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	693a      	ldr	r2, [r7, #16]
 801120c:	429a      	cmp	r2, r3
 801120e:	d00a      	beq.n	8011226 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011214:	f383 8811 	msr	BASEPRI, r3
 8011218:	f3bf 8f6f 	isb	sy
 801121c:	f3bf 8f4f 	dsb	sy
 8011220:	60fb      	str	r3, [r7, #12]
}
 8011222:	bf00      	nop
 8011224:	e7fe      	b.n	8011224 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801122a:	2b00      	cmp	r3, #0
 801122c:	d10a      	bne.n	8011244 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801122e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011232:	f383 8811 	msr	BASEPRI, r3
 8011236:	f3bf 8f6f 	isb	sy
 801123a:	f3bf 8f4f 	dsb	sy
 801123e:	60bb      	str	r3, [r7, #8]
}
 8011240:	bf00      	nop
 8011242:	e7fe      	b.n	8011242 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011248:	1e5a      	subs	r2, r3, #1
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801124e:	693b      	ldr	r3, [r7, #16]
 8011250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011256:	429a      	cmp	r2, r3
 8011258:	d044      	beq.n	80112e4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801125e:	2b00      	cmp	r3, #0
 8011260:	d140      	bne.n	80112e4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	3304      	adds	r3, #4
 8011266:	4618      	mov	r0, r3
 8011268:	f7fe fd84 	bl	800fd74 <uxListRemove>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d115      	bne.n	801129e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011272:	693b      	ldr	r3, [r7, #16]
 8011274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011276:	491f      	ldr	r1, [pc, #124]	; (80112f4 <xTaskPriorityDisinherit+0x104>)
 8011278:	4613      	mov	r3, r2
 801127a:	009b      	lsls	r3, r3, #2
 801127c:	4413      	add	r3, r2
 801127e:	009b      	lsls	r3, r3, #2
 8011280:	440b      	add	r3, r1
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d10a      	bne.n	801129e <xTaskPriorityDisinherit+0xae>
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128c:	2201      	movs	r2, #1
 801128e:	fa02 f303 	lsl.w	r3, r2, r3
 8011292:	43da      	mvns	r2, r3
 8011294:	4b18      	ldr	r3, [pc, #96]	; (80112f8 <xTaskPriorityDisinherit+0x108>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	4013      	ands	r3, r2
 801129a:	4a17      	ldr	r2, [pc, #92]	; (80112f8 <xTaskPriorityDisinherit+0x108>)
 801129c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112aa:	f1c3 0207 	rsb	r2, r3, #7
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b6:	2201      	movs	r2, #1
 80112b8:	409a      	lsls	r2, r3
 80112ba:	4b0f      	ldr	r3, [pc, #60]	; (80112f8 <xTaskPriorityDisinherit+0x108>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	4313      	orrs	r3, r2
 80112c0:	4a0d      	ldr	r2, [pc, #52]	; (80112f8 <xTaskPriorityDisinherit+0x108>)
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112c8:	4613      	mov	r3, r2
 80112ca:	009b      	lsls	r3, r3, #2
 80112cc:	4413      	add	r3, r2
 80112ce:	009b      	lsls	r3, r3, #2
 80112d0:	4a08      	ldr	r2, [pc, #32]	; (80112f4 <xTaskPriorityDisinherit+0x104>)
 80112d2:	441a      	add	r2, r3
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	3304      	adds	r3, #4
 80112d8:	4619      	mov	r1, r3
 80112da:	4610      	mov	r0, r2
 80112dc:	f7fe fced 	bl	800fcba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80112e0:	2301      	movs	r3, #1
 80112e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80112e4:	697b      	ldr	r3, [r7, #20]
	}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3718      	adds	r7, #24
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop
 80112f0:	20000a24 	.word	0x20000a24
 80112f4:	20000a28 	.word	0x20000a28
 80112f8:	20000b2c 	.word	0x20000b2c

080112fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b088      	sub	sp, #32
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801130a:	2301      	movs	r3, #1
 801130c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d077      	beq.n	8011404 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011318:	2b00      	cmp	r3, #0
 801131a:	d10a      	bne.n	8011332 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801131c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011320:	f383 8811 	msr	BASEPRI, r3
 8011324:	f3bf 8f6f 	isb	sy
 8011328:	f3bf 8f4f 	dsb	sy
 801132c:	60fb      	str	r3, [r7, #12]
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011332:	69bb      	ldr	r3, [r7, #24]
 8011334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011336:	683a      	ldr	r2, [r7, #0]
 8011338:	429a      	cmp	r2, r3
 801133a:	d902      	bls.n	8011342 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	61fb      	str	r3, [r7, #28]
 8011340:	e002      	b.n	8011348 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011346:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011348:	69bb      	ldr	r3, [r7, #24]
 801134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134c:	69fa      	ldr	r2, [r7, #28]
 801134e:	429a      	cmp	r2, r3
 8011350:	d058      	beq.n	8011404 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011352:	69bb      	ldr	r3, [r7, #24]
 8011354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	429a      	cmp	r2, r3
 801135a:	d153      	bne.n	8011404 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801135c:	4b2b      	ldr	r3, [pc, #172]	; (801140c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	69ba      	ldr	r2, [r7, #24]
 8011362:	429a      	cmp	r2, r3
 8011364:	d10a      	bne.n	801137c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801136a:	f383 8811 	msr	BASEPRI, r3
 801136e:	f3bf 8f6f 	isb	sy
 8011372:	f3bf 8f4f 	dsb	sy
 8011376:	60bb      	str	r3, [r7, #8]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011380:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	69fa      	ldr	r2, [r7, #28]
 8011386:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	db04      	blt.n	801139a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011390:	69fb      	ldr	r3, [r7, #28]
 8011392:	f1c3 0207 	rsb	r2, r3, #7
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	6959      	ldr	r1, [r3, #20]
 801139e:	693a      	ldr	r2, [r7, #16]
 80113a0:	4613      	mov	r3, r2
 80113a2:	009b      	lsls	r3, r3, #2
 80113a4:	4413      	add	r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	4a19      	ldr	r2, [pc, #100]	; (8011410 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80113aa:	4413      	add	r3, r2
 80113ac:	4299      	cmp	r1, r3
 80113ae:	d129      	bne.n	8011404 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	3304      	adds	r3, #4
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7fe fcdd 	bl	800fd74 <uxListRemove>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d10a      	bne.n	80113d6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c4:	2201      	movs	r2, #1
 80113c6:	fa02 f303 	lsl.w	r3, r2, r3
 80113ca:	43da      	mvns	r2, r3
 80113cc:	4b11      	ldr	r3, [pc, #68]	; (8011414 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4013      	ands	r3, r2
 80113d2:	4a10      	ldr	r2, [pc, #64]	; (8011414 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80113d4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113da:	2201      	movs	r2, #1
 80113dc:	409a      	lsls	r2, r3
 80113de:	4b0d      	ldr	r3, [pc, #52]	; (8011414 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4313      	orrs	r3, r2
 80113e4:	4a0b      	ldr	r2, [pc, #44]	; (8011414 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80113e6:	6013      	str	r3, [r2, #0]
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113ec:	4613      	mov	r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4a06      	ldr	r2, [pc, #24]	; (8011410 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80113f6:	441a      	add	r2, r3
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	3304      	adds	r3, #4
 80113fc:	4619      	mov	r1, r3
 80113fe:	4610      	mov	r0, r2
 8011400:	f7fe fc5b 	bl	800fcba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011404:	bf00      	nop
 8011406:	3720      	adds	r7, #32
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	20000a24 	.word	0x20000a24
 8011410:	20000a28 	.word	0x20000a28
 8011414:	20000b2c 	.word	0x20000b2c

08011418 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011418:	b480      	push	{r7}
 801141a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801141c:	4b07      	ldr	r3, [pc, #28]	; (801143c <pvTaskIncrementMutexHeldCount+0x24>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d004      	beq.n	801142e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011424:	4b05      	ldr	r3, [pc, #20]	; (801143c <pvTaskIncrementMutexHeldCount+0x24>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801142a:	3201      	adds	r2, #1
 801142c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801142e:	4b03      	ldr	r3, [pc, #12]	; (801143c <pvTaskIncrementMutexHeldCount+0x24>)
 8011430:	681b      	ldr	r3, [r3, #0]
	}
 8011432:	4618      	mov	r0, r3
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	20000a24 	.word	0x20000a24

08011440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801144a:	4b2b      	ldr	r3, [pc, #172]	; (80114f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011450:	4b2a      	ldr	r3, [pc, #168]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2200      	movs	r2, #0
 8011456:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801145a:	4b28      	ldr	r3, [pc, #160]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	3304      	adds	r3, #4
 8011460:	4618      	mov	r0, r3
 8011462:	f7fe fc87 	bl	800fd74 <uxListRemove>
 8011466:	4603      	mov	r3, r0
 8011468:	2b00      	cmp	r3, #0
 801146a:	d10b      	bne.n	8011484 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801146c:	4b23      	ldr	r3, [pc, #140]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011472:	2201      	movs	r2, #1
 8011474:	fa02 f303 	lsl.w	r3, r2, r3
 8011478:	43da      	mvns	r2, r3
 801147a:	4b21      	ldr	r3, [pc, #132]	; (8011500 <prvAddCurrentTaskToDelayedList+0xc0>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	4013      	ands	r3, r2
 8011480:	4a1f      	ldr	r2, [pc, #124]	; (8011500 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011482:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148a:	d10a      	bne.n	80114a2 <prvAddCurrentTaskToDelayedList+0x62>
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d007      	beq.n	80114a2 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011492:	4b1a      	ldr	r3, [pc, #104]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3304      	adds	r3, #4
 8011498:	4619      	mov	r1, r3
 801149a:	481a      	ldr	r0, [pc, #104]	; (8011504 <prvAddCurrentTaskToDelayedList+0xc4>)
 801149c:	f7fe fc0d 	bl	800fcba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80114a0:	e026      	b.n	80114f0 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80114a2:	68fa      	ldr	r2, [r7, #12]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4413      	add	r3, r2
 80114a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114aa:	4b14      	ldr	r3, [pc, #80]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	68ba      	ldr	r2, [r7, #8]
 80114b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d209      	bcs.n	80114ce <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114ba:	4b13      	ldr	r3, [pc, #76]	; (8011508 <prvAddCurrentTaskToDelayedList+0xc8>)
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	4b0f      	ldr	r3, [pc, #60]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	3304      	adds	r3, #4
 80114c4:	4619      	mov	r1, r3
 80114c6:	4610      	mov	r0, r2
 80114c8:	f7fe fc1b 	bl	800fd02 <vListInsert>
}
 80114cc:	e010      	b.n	80114f0 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114ce:	4b0f      	ldr	r3, [pc, #60]	; (801150c <prvAddCurrentTaskToDelayedList+0xcc>)
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	4b0a      	ldr	r3, [pc, #40]	; (80114fc <prvAddCurrentTaskToDelayedList+0xbc>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	3304      	adds	r3, #4
 80114d8:	4619      	mov	r1, r3
 80114da:	4610      	mov	r0, r2
 80114dc:	f7fe fc11 	bl	800fd02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80114e0:	4b0b      	ldr	r3, [pc, #44]	; (8011510 <prvAddCurrentTaskToDelayedList+0xd0>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d202      	bcs.n	80114f0 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 80114ea:	4a09      	ldr	r2, [pc, #36]	; (8011510 <prvAddCurrentTaskToDelayedList+0xd0>)
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	6013      	str	r3, [r2, #0]
}
 80114f0:	bf00      	nop
 80114f2:	3710      	adds	r7, #16
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}
 80114f8:	20000b28 	.word	0x20000b28
 80114fc:	20000a24 	.word	0x20000a24
 8011500:	20000b2c 	.word	0x20000b2c
 8011504:	20000b10 	.word	0x20000b10
 8011508:	20000ae0 	.word	0x20000ae0
 801150c:	20000adc 	.word	0x20000adc
 8011510:	20000b44 	.word	0x20000b44

08011514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011514:	b480      	push	{r7}
 8011516:	b085      	sub	sp, #20
 8011518:	af00      	add	r7, sp, #0
 801151a:	60f8      	str	r0, [r7, #12]
 801151c:	60b9      	str	r1, [r7, #8]
 801151e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	3b04      	subs	r3, #4
 8011524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801152c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3b04      	subs	r3, #4
 8011532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	f023 0201 	bic.w	r2, r3, #1
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	3b04      	subs	r3, #4
 8011542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011544:	4a0c      	ldr	r2, [pc, #48]	; (8011578 <pxPortInitialiseStack+0x64>)
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	3b14      	subs	r3, #20
 801154e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011550:	687a      	ldr	r2, [r7, #4]
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	3b04      	subs	r3, #4
 801155a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	f06f 0202 	mvn.w	r2, #2
 8011562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	3b20      	subs	r3, #32
 8011568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801156a:	68fb      	ldr	r3, [r7, #12]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3714      	adds	r7, #20
 8011570:	46bd      	mov	sp, r7
 8011572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011576:	4770      	bx	lr
 8011578:	0801157d 	.word	0x0801157d

0801157c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011582:	2300      	movs	r3, #0
 8011584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011586:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <prvTaskExitError+0x54>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801158e:	d00a      	beq.n	80115a6 <prvTaskExitError+0x2a>
	__asm volatile
 8011590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011594:	f383 8811 	msr	BASEPRI, r3
 8011598:	f3bf 8f6f 	isb	sy
 801159c:	f3bf 8f4f 	dsb	sy
 80115a0:	60fb      	str	r3, [r7, #12]
}
 80115a2:	bf00      	nop
 80115a4:	e7fe      	b.n	80115a4 <prvTaskExitError+0x28>
	__asm volatile
 80115a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115aa:	f383 8811 	msr	BASEPRI, r3
 80115ae:	f3bf 8f6f 	isb	sy
 80115b2:	f3bf 8f4f 	dsb	sy
 80115b6:	60bb      	str	r3, [r7, #8]
}
 80115b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80115ba:	bf00      	nop
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0fc      	beq.n	80115bc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80115c2:	bf00      	nop
 80115c4:	bf00      	nop
 80115c6:	3714      	adds	r7, #20
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	20000010 	.word	0x20000010
	...

080115e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80115e0:	4b07      	ldr	r3, [pc, #28]	; (8011600 <pxCurrentTCBConst2>)
 80115e2:	6819      	ldr	r1, [r3, #0]
 80115e4:	6808      	ldr	r0, [r1, #0]
 80115e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ea:	f380 8809 	msr	PSP, r0
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f04f 0000 	mov.w	r0, #0
 80115f6:	f380 8811 	msr	BASEPRI, r0
 80115fa:	4770      	bx	lr
 80115fc:	f3af 8000 	nop.w

08011600 <pxCurrentTCBConst2>:
 8011600:	20000a24 	.word	0x20000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011604:	bf00      	nop
 8011606:	bf00      	nop

08011608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011608:	4808      	ldr	r0, [pc, #32]	; (801162c <prvPortStartFirstTask+0x24>)
 801160a:	6800      	ldr	r0, [r0, #0]
 801160c:	6800      	ldr	r0, [r0, #0]
 801160e:	f380 8808 	msr	MSP, r0
 8011612:	f04f 0000 	mov.w	r0, #0
 8011616:	f380 8814 	msr	CONTROL, r0
 801161a:	b662      	cpsie	i
 801161c:	b661      	cpsie	f
 801161e:	f3bf 8f4f 	dsb	sy
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	df00      	svc	0
 8011628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801162a:	bf00      	nop
 801162c:	e000ed08 	.word	0xe000ed08

08011630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011636:	4b46      	ldr	r3, [pc, #280]	; (8011750 <xPortStartScheduler+0x120>)
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	4a46      	ldr	r2, [pc, #280]	; (8011754 <xPortStartScheduler+0x124>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d10a      	bne.n	8011656 <xPortStartScheduler+0x26>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	613b      	str	r3, [r7, #16]
}
 8011652:	bf00      	nop
 8011654:	e7fe      	b.n	8011654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011656:	4b3e      	ldr	r3, [pc, #248]	; (8011750 <xPortStartScheduler+0x120>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4a3f      	ldr	r2, [pc, #252]	; (8011758 <xPortStartScheduler+0x128>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d10a      	bne.n	8011676 <xPortStartScheduler+0x46>
	__asm volatile
 8011660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011664:	f383 8811 	msr	BASEPRI, r3
 8011668:	f3bf 8f6f 	isb	sy
 801166c:	f3bf 8f4f 	dsb	sy
 8011670:	60fb      	str	r3, [r7, #12]
}
 8011672:	bf00      	nop
 8011674:	e7fe      	b.n	8011674 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011676:	4b39      	ldr	r3, [pc, #228]	; (801175c <xPortStartScheduler+0x12c>)
 8011678:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	781b      	ldrb	r3, [r3, #0]
 801167e:	b2db      	uxtb	r3, r3
 8011680:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	22ff      	movs	r2, #255	; 0xff
 8011686:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	781b      	ldrb	r3, [r3, #0]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011690:	78fb      	ldrb	r3, [r7, #3]
 8011692:	b2db      	uxtb	r3, r3
 8011694:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011698:	b2da      	uxtb	r2, r3
 801169a:	4b31      	ldr	r3, [pc, #196]	; (8011760 <xPortStartScheduler+0x130>)
 801169c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801169e:	4b31      	ldr	r3, [pc, #196]	; (8011764 <xPortStartScheduler+0x134>)
 80116a0:	2207      	movs	r2, #7
 80116a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116a4:	e009      	b.n	80116ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80116a6:	4b2f      	ldr	r3, [pc, #188]	; (8011764 <xPortStartScheduler+0x134>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	3b01      	subs	r3, #1
 80116ac:	4a2d      	ldr	r2, [pc, #180]	; (8011764 <xPortStartScheduler+0x134>)
 80116ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116b0:	78fb      	ldrb	r3, [r7, #3]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	005b      	lsls	r3, r3, #1
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116ba:	78fb      	ldrb	r3, [r7, #3]
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116c2:	2b80      	cmp	r3, #128	; 0x80
 80116c4:	d0ef      	beq.n	80116a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80116c6:	4b27      	ldr	r3, [pc, #156]	; (8011764 <xPortStartScheduler+0x134>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	f1c3 0307 	rsb	r3, r3, #7
 80116ce:	2b04      	cmp	r3, #4
 80116d0:	d00a      	beq.n	80116e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80116d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d6:	f383 8811 	msr	BASEPRI, r3
 80116da:	f3bf 8f6f 	isb	sy
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	60bb      	str	r3, [r7, #8]
}
 80116e4:	bf00      	nop
 80116e6:	e7fe      	b.n	80116e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80116e8:	4b1e      	ldr	r3, [pc, #120]	; (8011764 <xPortStartScheduler+0x134>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	021b      	lsls	r3, r3, #8
 80116ee:	4a1d      	ldr	r2, [pc, #116]	; (8011764 <xPortStartScheduler+0x134>)
 80116f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80116f2:	4b1c      	ldr	r3, [pc, #112]	; (8011764 <xPortStartScheduler+0x134>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80116fa:	4a1a      	ldr	r2, [pc, #104]	; (8011764 <xPortStartScheduler+0x134>)
 80116fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	b2da      	uxtb	r2, r3
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011706:	4b18      	ldr	r3, [pc, #96]	; (8011768 <xPortStartScheduler+0x138>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	4a17      	ldr	r2, [pc, #92]	; (8011768 <xPortStartScheduler+0x138>)
 801170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011710:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011712:	4b15      	ldr	r3, [pc, #84]	; (8011768 <xPortStartScheduler+0x138>)
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	4a14      	ldr	r2, [pc, #80]	; (8011768 <xPortStartScheduler+0x138>)
 8011718:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801171c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801171e:	f000 f8dd 	bl	80118dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011722:	4b12      	ldr	r3, [pc, #72]	; (801176c <xPortStartScheduler+0x13c>)
 8011724:	2200      	movs	r2, #0
 8011726:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011728:	f000 f8fc 	bl	8011924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801172c:	4b10      	ldr	r3, [pc, #64]	; (8011770 <xPortStartScheduler+0x140>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a0f      	ldr	r2, [pc, #60]	; (8011770 <xPortStartScheduler+0x140>)
 8011732:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011736:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011738:	f7ff ff66 	bl	8011608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801173c:	f7ff fa92 	bl	8010c64 <vTaskSwitchContext>
	prvTaskExitError();
 8011740:	f7ff ff1c 	bl	801157c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011744:	2300      	movs	r3, #0
}
 8011746:	4618      	mov	r0, r3
 8011748:	3718      	adds	r7, #24
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	e000ed00 	.word	0xe000ed00
 8011754:	410fc271 	.word	0x410fc271
 8011758:	410fc270 	.word	0x410fc270
 801175c:	e000e400 	.word	0xe000e400
 8011760:	20000b50 	.word	0x20000b50
 8011764:	20000b54 	.word	0x20000b54
 8011768:	e000ed20 	.word	0xe000ed20
 801176c:	20000010 	.word	0x20000010
 8011770:	e000ef34 	.word	0xe000ef34

08011774 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
	__asm volatile
 801177a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177e:	f383 8811 	msr	BASEPRI, r3
 8011782:	f3bf 8f6f 	isb	sy
 8011786:	f3bf 8f4f 	dsb	sy
 801178a:	607b      	str	r3, [r7, #4]
}
 801178c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801178e:	4b0f      	ldr	r3, [pc, #60]	; (80117cc <vPortEnterCritical+0x58>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	3301      	adds	r3, #1
 8011794:	4a0d      	ldr	r2, [pc, #52]	; (80117cc <vPortEnterCritical+0x58>)
 8011796:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011798:	4b0c      	ldr	r3, [pc, #48]	; (80117cc <vPortEnterCritical+0x58>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d10f      	bne.n	80117c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80117a0:	4b0b      	ldr	r3, [pc, #44]	; (80117d0 <vPortEnterCritical+0x5c>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d00a      	beq.n	80117c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80117aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ae:	f383 8811 	msr	BASEPRI, r3
 80117b2:	f3bf 8f6f 	isb	sy
 80117b6:	f3bf 8f4f 	dsb	sy
 80117ba:	603b      	str	r3, [r7, #0]
}
 80117bc:	bf00      	nop
 80117be:	e7fe      	b.n	80117be <vPortEnterCritical+0x4a>
	}
}
 80117c0:	bf00      	nop
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	20000010 	.word	0x20000010
 80117d0:	e000ed04 	.word	0xe000ed04

080117d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80117d4:	b480      	push	{r7}
 80117d6:	b083      	sub	sp, #12
 80117d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80117da:	4b12      	ldr	r3, [pc, #72]	; (8011824 <vPortExitCritical+0x50>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d10a      	bne.n	80117f8 <vPortExitCritical+0x24>
	__asm volatile
 80117e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117e6:	f383 8811 	msr	BASEPRI, r3
 80117ea:	f3bf 8f6f 	isb	sy
 80117ee:	f3bf 8f4f 	dsb	sy
 80117f2:	607b      	str	r3, [r7, #4]
}
 80117f4:	bf00      	nop
 80117f6:	e7fe      	b.n	80117f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80117f8:	4b0a      	ldr	r3, [pc, #40]	; (8011824 <vPortExitCritical+0x50>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	3b01      	subs	r3, #1
 80117fe:	4a09      	ldr	r2, [pc, #36]	; (8011824 <vPortExitCritical+0x50>)
 8011800:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011802:	4b08      	ldr	r3, [pc, #32]	; (8011824 <vPortExitCritical+0x50>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d105      	bne.n	8011816 <vPortExitCritical+0x42>
 801180a:	2300      	movs	r3, #0
 801180c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801180e:	683b      	ldr	r3, [r7, #0]
 8011810:	f383 8811 	msr	BASEPRI, r3
}
 8011814:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011816:	bf00      	nop
 8011818:	370c      	adds	r7, #12
 801181a:	46bd      	mov	sp, r7
 801181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011820:	4770      	bx	lr
 8011822:	bf00      	nop
 8011824:	20000010 	.word	0x20000010
	...

08011830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011830:	f3ef 8009 	mrs	r0, PSP
 8011834:	f3bf 8f6f 	isb	sy
 8011838:	4b15      	ldr	r3, [pc, #84]	; (8011890 <pxCurrentTCBConst>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	f01e 0f10 	tst.w	lr, #16
 8011840:	bf08      	it	eq
 8011842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801184a:	6010      	str	r0, [r2, #0]
 801184c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011850:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011854:	f380 8811 	msr	BASEPRI, r0
 8011858:	f3bf 8f4f 	dsb	sy
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f7ff fa00 	bl	8010c64 <vTaskSwitchContext>
 8011864:	f04f 0000 	mov.w	r0, #0
 8011868:	f380 8811 	msr	BASEPRI, r0
 801186c:	bc09      	pop	{r0, r3}
 801186e:	6819      	ldr	r1, [r3, #0]
 8011870:	6808      	ldr	r0, [r1, #0]
 8011872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011876:	f01e 0f10 	tst.w	lr, #16
 801187a:	bf08      	it	eq
 801187c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011880:	f380 8809 	msr	PSP, r0
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	f3af 8000 	nop.w

08011890 <pxCurrentTCBConst>:
 8011890:	20000a24 	.word	0x20000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011894:	bf00      	nop
 8011896:	bf00      	nop

08011898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
	__asm volatile
 801189e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a2:	f383 8811 	msr	BASEPRI, r3
 80118a6:	f3bf 8f6f 	isb	sy
 80118aa:	f3bf 8f4f 	dsb	sy
 80118ae:	607b      	str	r3, [r7, #4]
}
 80118b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80118b2:	f7ff f941 	bl	8010b38 <xTaskIncrementTick>
 80118b6:	4603      	mov	r3, r0
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d003      	beq.n	80118c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80118bc:	4b06      	ldr	r3, [pc, #24]	; (80118d8 <SysTick_Handler+0x40>)
 80118be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	2300      	movs	r3, #0
 80118c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118c8:	683b      	ldr	r3, [r7, #0]
 80118ca:	f383 8811 	msr	BASEPRI, r3
}
 80118ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80118d0:	bf00      	nop
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	e000ed04 	.word	0xe000ed04

080118dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80118dc:	b480      	push	{r7}
 80118de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80118e0:	4b0b      	ldr	r3, [pc, #44]	; (8011910 <vPortSetupTimerInterrupt+0x34>)
 80118e2:	2200      	movs	r2, #0
 80118e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80118e6:	4b0b      	ldr	r3, [pc, #44]	; (8011914 <vPortSetupTimerInterrupt+0x38>)
 80118e8:	2200      	movs	r2, #0
 80118ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80118ec:	4b0a      	ldr	r3, [pc, #40]	; (8011918 <vPortSetupTimerInterrupt+0x3c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	4a0a      	ldr	r2, [pc, #40]	; (801191c <vPortSetupTimerInterrupt+0x40>)
 80118f2:	fba2 2303 	umull	r2, r3, r2, r3
 80118f6:	099b      	lsrs	r3, r3, #6
 80118f8:	4a09      	ldr	r2, [pc, #36]	; (8011920 <vPortSetupTimerInterrupt+0x44>)
 80118fa:	3b01      	subs	r3, #1
 80118fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80118fe:	4b04      	ldr	r3, [pc, #16]	; (8011910 <vPortSetupTimerInterrupt+0x34>)
 8011900:	2207      	movs	r2, #7
 8011902:	601a      	str	r2, [r3, #0]
}
 8011904:	bf00      	nop
 8011906:	46bd      	mov	sp, r7
 8011908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190c:	4770      	bx	lr
 801190e:	bf00      	nop
 8011910:	e000e010 	.word	0xe000e010
 8011914:	e000e018 	.word	0xe000e018
 8011918:	20000004 	.word	0x20000004
 801191c:	10624dd3 	.word	0x10624dd3
 8011920:	e000e014 	.word	0xe000e014

08011924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011924:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011934 <vPortEnableVFP+0x10>
 8011928:	6801      	ldr	r1, [r0, #0]
 801192a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801192e:	6001      	str	r1, [r0, #0]
 8011930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011932:	bf00      	nop
 8011934:	e000ed88 	.word	0xe000ed88

08011938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011938:	b480      	push	{r7}
 801193a:	b085      	sub	sp, #20
 801193c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801193e:	f3ef 8305 	mrs	r3, IPSR
 8011942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2b0f      	cmp	r3, #15
 8011948:	d914      	bls.n	8011974 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801194a:	4a17      	ldr	r2, [pc, #92]	; (80119a8 <vPortValidateInterruptPriority+0x70>)
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	4413      	add	r3, r2
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011954:	4b15      	ldr	r3, [pc, #84]	; (80119ac <vPortValidateInterruptPriority+0x74>)
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	7afa      	ldrb	r2, [r7, #11]
 801195a:	429a      	cmp	r2, r3
 801195c:	d20a      	bcs.n	8011974 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	607b      	str	r3, [r7, #4]
}
 8011970:	bf00      	nop
 8011972:	e7fe      	b.n	8011972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011974:	4b0e      	ldr	r3, [pc, #56]	; (80119b0 <vPortValidateInterruptPriority+0x78>)
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801197c:	4b0d      	ldr	r3, [pc, #52]	; (80119b4 <vPortValidateInterruptPriority+0x7c>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	429a      	cmp	r2, r3
 8011982:	d90a      	bls.n	801199a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011988:	f383 8811 	msr	BASEPRI, r3
 801198c:	f3bf 8f6f 	isb	sy
 8011990:	f3bf 8f4f 	dsb	sy
 8011994:	603b      	str	r3, [r7, #0]
}
 8011996:	bf00      	nop
 8011998:	e7fe      	b.n	8011998 <vPortValidateInterruptPriority+0x60>
	}
 801199a:	bf00      	nop
 801199c:	3714      	adds	r7, #20
 801199e:	46bd      	mov	sp, r7
 80119a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a4:	4770      	bx	lr
 80119a6:	bf00      	nop
 80119a8:	e000e3f0 	.word	0xe000e3f0
 80119ac:	20000b50 	.word	0x20000b50
 80119b0:	e000ed0c 	.word	0xe000ed0c
 80119b4:	20000b54 	.word	0x20000b54

080119b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	b08a      	sub	sp, #40	; 0x28
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80119c0:	2300      	movs	r3, #0
 80119c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80119c4:	f7ff f81c 	bl	8010a00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80119c8:	4b5b      	ldr	r3, [pc, #364]	; (8011b38 <pvPortMalloc+0x180>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d101      	bne.n	80119d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80119d0:	f000 f920 	bl	8011c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80119d4:	4b59      	ldr	r3, [pc, #356]	; (8011b3c <pvPortMalloc+0x184>)
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	4013      	ands	r3, r2
 80119dc:	2b00      	cmp	r3, #0
 80119de:	f040 8093 	bne.w	8011b08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d01d      	beq.n	8011a24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80119e8:	2208      	movs	r2, #8
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4413      	add	r3, r2
 80119ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f003 0307 	and.w	r3, r3, #7
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d014      	beq.n	8011a24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	f023 0307 	bic.w	r3, r3, #7
 8011a00:	3308      	adds	r3, #8
 8011a02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f003 0307 	and.w	r3, r3, #7
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00a      	beq.n	8011a24 <pvPortMalloc+0x6c>
	__asm volatile
 8011a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a12:	f383 8811 	msr	BASEPRI, r3
 8011a16:	f3bf 8f6f 	isb	sy
 8011a1a:	f3bf 8f4f 	dsb	sy
 8011a1e:	617b      	str	r3, [r7, #20]
}
 8011a20:	bf00      	nop
 8011a22:	e7fe      	b.n	8011a22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d06e      	beq.n	8011b08 <pvPortMalloc+0x150>
 8011a2a:	4b45      	ldr	r3, [pc, #276]	; (8011b40 <pvPortMalloc+0x188>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d869      	bhi.n	8011b08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011a34:	4b43      	ldr	r3, [pc, #268]	; (8011b44 <pvPortMalloc+0x18c>)
 8011a36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011a38:	4b42      	ldr	r3, [pc, #264]	; (8011b44 <pvPortMalloc+0x18c>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a3e:	e004      	b.n	8011a4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d903      	bls.n	8011a5c <pvPortMalloc+0xa4>
 8011a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1f1      	bne.n	8011a40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a5c:	4b36      	ldr	r3, [pc, #216]	; (8011b38 <pvPortMalloc+0x180>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d050      	beq.n	8011b08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a66:	6a3b      	ldr	r3, [r7, #32]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2208      	movs	r2, #8
 8011a6c:	4413      	add	r3, r2
 8011a6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7a:	685a      	ldr	r2, [r3, #4]
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	1ad2      	subs	r2, r2, r3
 8011a80:	2308      	movs	r3, #8
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d91f      	bls.n	8011ac8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	4413      	add	r3, r2
 8011a8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	f003 0307 	and.w	r3, r3, #7
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d00a      	beq.n	8011ab0 <pvPortMalloc+0xf8>
	__asm volatile
 8011a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a9e:	f383 8811 	msr	BASEPRI, r3
 8011aa2:	f3bf 8f6f 	isb	sy
 8011aa6:	f3bf 8f4f 	dsb	sy
 8011aaa:	613b      	str	r3, [r7, #16]
}
 8011aac:	bf00      	nop
 8011aae:	e7fe      	b.n	8011aae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab2:	685a      	ldr	r2, [r3, #4]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	1ad2      	subs	r2, r2, r3
 8011ab8:	69bb      	ldr	r3, [r7, #24]
 8011aba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011ac2:	69b8      	ldr	r0, [r7, #24]
 8011ac4:	f000 f908 	bl	8011cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011ac8:	4b1d      	ldr	r3, [pc, #116]	; (8011b40 <pvPortMalloc+0x188>)
 8011aca:	681a      	ldr	r2, [r3, #0]
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	1ad3      	subs	r3, r2, r3
 8011ad2:	4a1b      	ldr	r2, [pc, #108]	; (8011b40 <pvPortMalloc+0x188>)
 8011ad4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011ad6:	4b1a      	ldr	r3, [pc, #104]	; (8011b40 <pvPortMalloc+0x188>)
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	4b1b      	ldr	r3, [pc, #108]	; (8011b48 <pvPortMalloc+0x190>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d203      	bcs.n	8011aea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ae2:	4b17      	ldr	r3, [pc, #92]	; (8011b40 <pvPortMalloc+0x188>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	4a18      	ldr	r2, [pc, #96]	; (8011b48 <pvPortMalloc+0x190>)
 8011ae8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	685a      	ldr	r2, [r3, #4]
 8011aee:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <pvPortMalloc+0x184>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	431a      	orrs	r2, r3
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afa:	2200      	movs	r2, #0
 8011afc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011afe:	4b13      	ldr	r3, [pc, #76]	; (8011b4c <pvPortMalloc+0x194>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	3301      	adds	r3, #1
 8011b04:	4a11      	ldr	r2, [pc, #68]	; (8011b4c <pvPortMalloc+0x194>)
 8011b06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b08:	f7fe ff88 	bl	8010a1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b0c:	69fb      	ldr	r3, [r7, #28]
 8011b0e:	f003 0307 	and.w	r3, r3, #7
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d00a      	beq.n	8011b2c <pvPortMalloc+0x174>
	__asm volatile
 8011b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b1a:	f383 8811 	msr	BASEPRI, r3
 8011b1e:	f3bf 8f6f 	isb	sy
 8011b22:	f3bf 8f4f 	dsb	sy
 8011b26:	60fb      	str	r3, [r7, #12]
}
 8011b28:	bf00      	nop
 8011b2a:	e7fe      	b.n	8011b2a <pvPortMalloc+0x172>
	return pvReturn;
 8011b2c:	69fb      	ldr	r3, [r7, #28]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3728      	adds	r7, #40	; 0x28
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}
 8011b36:	bf00      	nop
 8011b38:	20003b60 	.word	0x20003b60
 8011b3c:	20003b74 	.word	0x20003b74
 8011b40:	20003b64 	.word	0x20003b64
 8011b44:	20003b58 	.word	0x20003b58
 8011b48:	20003b68 	.word	0x20003b68
 8011b4c:	20003b6c 	.word	0x20003b6c

08011b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b086      	sub	sp, #24
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d04d      	beq.n	8011bfe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b62:	2308      	movs	r3, #8
 8011b64:	425b      	negs	r3, r3
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	4413      	add	r3, r2
 8011b6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	4b24      	ldr	r3, [pc, #144]	; (8011c08 <vPortFree+0xb8>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4013      	ands	r3, r2
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d10a      	bne.n	8011b94 <vPortFree+0x44>
	__asm volatile
 8011b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b82:	f383 8811 	msr	BASEPRI, r3
 8011b86:	f3bf 8f6f 	isb	sy
 8011b8a:	f3bf 8f4f 	dsb	sy
 8011b8e:	60fb      	str	r3, [r7, #12]
}
 8011b90:	bf00      	nop
 8011b92:	e7fe      	b.n	8011b92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00a      	beq.n	8011bb2 <vPortFree+0x62>
	__asm volatile
 8011b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	60bb      	str	r3, [r7, #8]
}
 8011bae:	bf00      	nop
 8011bb0:	e7fe      	b.n	8011bb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	685a      	ldr	r2, [r3, #4]
 8011bb6:	4b14      	ldr	r3, [pc, #80]	; (8011c08 <vPortFree+0xb8>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4013      	ands	r3, r2
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d01e      	beq.n	8011bfe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d11a      	bne.n	8011bfe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	685a      	ldr	r2, [r3, #4]
 8011bcc:	4b0e      	ldr	r3, [pc, #56]	; (8011c08 <vPortFree+0xb8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	43db      	mvns	r3, r3
 8011bd2:	401a      	ands	r2, r3
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011bd8:	f7fe ff12 	bl	8010a00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	685a      	ldr	r2, [r3, #4]
 8011be0:	4b0a      	ldr	r3, [pc, #40]	; (8011c0c <vPortFree+0xbc>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	4413      	add	r3, r2
 8011be6:	4a09      	ldr	r2, [pc, #36]	; (8011c0c <vPortFree+0xbc>)
 8011be8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011bea:	6938      	ldr	r0, [r7, #16]
 8011bec:	f000 f874 	bl	8011cd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011bf0:	4b07      	ldr	r3, [pc, #28]	; (8011c10 <vPortFree+0xc0>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	4a06      	ldr	r2, [pc, #24]	; (8011c10 <vPortFree+0xc0>)
 8011bf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011bfa:	f7fe ff0f 	bl	8010a1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011bfe:	bf00      	nop
 8011c00:	3718      	adds	r7, #24
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	20003b74 	.word	0x20003b74
 8011c0c:	20003b64 	.word	0x20003b64
 8011c10:	20003b70 	.word	0x20003b70

08011c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c14:	b480      	push	{r7}
 8011c16:	b085      	sub	sp, #20
 8011c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8011c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011c20:	4b27      	ldr	r3, [pc, #156]	; (8011cc0 <prvHeapInit+0xac>)
 8011c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f003 0307 	and.w	r3, r3, #7
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00c      	beq.n	8011c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3307      	adds	r3, #7
 8011c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	f023 0307 	bic.w	r3, r3, #7
 8011c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011c3c:	68ba      	ldr	r2, [r7, #8]
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	1ad3      	subs	r3, r2, r3
 8011c42:	4a1f      	ldr	r2, [pc, #124]	; (8011cc0 <prvHeapInit+0xac>)
 8011c44:	4413      	add	r3, r2
 8011c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c4c:	4a1d      	ldr	r2, [pc, #116]	; (8011cc4 <prvHeapInit+0xb0>)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c52:	4b1c      	ldr	r3, [pc, #112]	; (8011cc4 <prvHeapInit+0xb0>)
 8011c54:	2200      	movs	r2, #0
 8011c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c60:	2208      	movs	r2, #8
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	1a9b      	subs	r3, r3, r2
 8011c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f023 0307 	bic.w	r3, r3, #7
 8011c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	4a15      	ldr	r2, [pc, #84]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c76:	4b14      	ldr	r3, [pc, #80]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c7e:	4b12      	ldr	r3, [pc, #72]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	2200      	movs	r2, #0
 8011c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	68fa      	ldr	r2, [r7, #12]
 8011c8e:	1ad2      	subs	r2, r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c94:	4b0c      	ldr	r3, [pc, #48]	; (8011cc8 <prvHeapInit+0xb4>)
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	4a0a      	ldr	r2, [pc, #40]	; (8011ccc <prvHeapInit+0xb8>)
 8011ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	4a09      	ldr	r2, [pc, #36]	; (8011cd0 <prvHeapInit+0xbc>)
 8011caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011cac:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <prvHeapInit+0xc0>)
 8011cae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011cb2:	601a      	str	r2, [r3, #0]
}
 8011cb4:	bf00      	nop
 8011cb6:	3714      	adds	r7, #20
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	20000b58 	.word	0x20000b58
 8011cc4:	20003b58 	.word	0x20003b58
 8011cc8:	20003b60 	.word	0x20003b60
 8011ccc:	20003b68 	.word	0x20003b68
 8011cd0:	20003b64 	.word	0x20003b64
 8011cd4:	20003b74 	.word	0x20003b74

08011cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ce0:	4b28      	ldr	r3, [pc, #160]	; (8011d84 <prvInsertBlockIntoFreeList+0xac>)
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	e002      	b.n	8011cec <prvInsertBlockIntoFreeList+0x14>
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d8f7      	bhi.n	8011ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	4413      	add	r3, r2
 8011d02:	687a      	ldr	r2, [r7, #4]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d108      	bne.n	8011d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	685a      	ldr	r2, [r3, #4]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	685b      	ldr	r3, [r3, #4]
 8011d10:	441a      	add	r2, r3
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	68ba      	ldr	r2, [r7, #8]
 8011d24:	441a      	add	r2, r3
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d118      	bne.n	8011d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	4b15      	ldr	r3, [pc, #84]	; (8011d88 <prvInsertBlockIntoFreeList+0xb0>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d00d      	beq.n	8011d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	685b      	ldr	r3, [r3, #4]
 8011d44:	441a      	add	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	601a      	str	r2, [r3, #0]
 8011d54:	e008      	b.n	8011d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d56:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <prvInsertBlockIntoFreeList+0xb0>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	601a      	str	r2, [r3, #0]
 8011d5e:	e003      	b.n	8011d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681a      	ldr	r2, [r3, #0]
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d68:	68fa      	ldr	r2, [r7, #12]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d002      	beq.n	8011d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	687a      	ldr	r2, [r7, #4]
 8011d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d76:	bf00      	nop
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	20003b58 	.word	0x20003b58
 8011d88:	20003b60 	.word	0x20003b60

08011d8c <arm_pid_init_f32>:
 8011d8c:	edd0 6a08 	vldr	s13, [r0, #32]
 8011d90:	edd0 7a06 	vldr	s15, [r0, #24]
 8011d94:	ed90 7a07 	vldr	s14, [r0, #28]
 8011d98:	edc0 6a02 	vstr	s13, [r0, #8]
 8011d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011da0:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8011da4:	eef1 7a67 	vneg.f32	s15, s15
 8011da8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011dac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011db0:	ed80 7a00 	vstr	s14, [r0]
 8011db4:	edc0 7a01 	vstr	s15, [r0, #4]
 8011db8:	b901      	cbnz	r1, 8011dbc <arm_pid_init_f32+0x30>
 8011dba:	4770      	bx	lr
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	60c3      	str	r3, [r0, #12]
 8011dc0:	6103      	str	r3, [r0, #16]
 8011dc2:	6143      	str	r3, [r0, #20]
 8011dc4:	4770      	bx	lr
 8011dc6:	bf00      	nop

08011dc8 <__errno>:
 8011dc8:	4b01      	ldr	r3, [pc, #4]	; (8011dd0 <__errno+0x8>)
 8011dca:	6818      	ldr	r0, [r3, #0]
 8011dcc:	4770      	bx	lr
 8011dce:	bf00      	nop
 8011dd0:	20000014 	.word	0x20000014

08011dd4 <__libc_init_array>:
 8011dd4:	b570      	push	{r4, r5, r6, lr}
 8011dd6:	4d0d      	ldr	r5, [pc, #52]	; (8011e0c <__libc_init_array+0x38>)
 8011dd8:	4c0d      	ldr	r4, [pc, #52]	; (8011e10 <__libc_init_array+0x3c>)
 8011dda:	1b64      	subs	r4, r4, r5
 8011ddc:	10a4      	asrs	r4, r4, #2
 8011dde:	2600      	movs	r6, #0
 8011de0:	42a6      	cmp	r6, r4
 8011de2:	d109      	bne.n	8011df8 <__libc_init_array+0x24>
 8011de4:	4d0b      	ldr	r5, [pc, #44]	; (8011e14 <__libc_init_array+0x40>)
 8011de6:	4c0c      	ldr	r4, [pc, #48]	; (8011e18 <__libc_init_array+0x44>)
 8011de8:	f001 f8e4 	bl	8012fb4 <_init>
 8011dec:	1b64      	subs	r4, r4, r5
 8011dee:	10a4      	asrs	r4, r4, #2
 8011df0:	2600      	movs	r6, #0
 8011df2:	42a6      	cmp	r6, r4
 8011df4:	d105      	bne.n	8011e02 <__libc_init_array+0x2e>
 8011df6:	bd70      	pop	{r4, r5, r6, pc}
 8011df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dfc:	4798      	blx	r3
 8011dfe:	3601      	adds	r6, #1
 8011e00:	e7ee      	b.n	8011de0 <__libc_init_array+0xc>
 8011e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8011e06:	4798      	blx	r3
 8011e08:	3601      	adds	r6, #1
 8011e0a:	e7f2      	b.n	8011df2 <__libc_init_array+0x1e>
 8011e0c:	080132c0 	.word	0x080132c0
 8011e10:	080132c0 	.word	0x080132c0
 8011e14:	080132c0 	.word	0x080132c0
 8011e18:	080132c4 	.word	0x080132c4

08011e1c <__retarget_lock_acquire_recursive>:
 8011e1c:	4770      	bx	lr

08011e1e <__retarget_lock_release_recursive>:
 8011e1e:	4770      	bx	lr

08011e20 <malloc>:
 8011e20:	4b02      	ldr	r3, [pc, #8]	; (8011e2c <malloc+0xc>)
 8011e22:	4601      	mov	r1, r0
 8011e24:	6818      	ldr	r0, [r3, #0]
 8011e26:	f000 b88d 	b.w	8011f44 <_malloc_r>
 8011e2a:	bf00      	nop
 8011e2c:	20000014 	.word	0x20000014

08011e30 <free>:
 8011e30:	4b02      	ldr	r3, [pc, #8]	; (8011e3c <free+0xc>)
 8011e32:	4601      	mov	r1, r0
 8011e34:	6818      	ldr	r0, [r3, #0]
 8011e36:	f000 b819 	b.w	8011e6c <_free_r>
 8011e3a:	bf00      	nop
 8011e3c:	20000014 	.word	0x20000014

08011e40 <memcpy>:
 8011e40:	440a      	add	r2, r1
 8011e42:	4291      	cmp	r1, r2
 8011e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8011e48:	d100      	bne.n	8011e4c <memcpy+0xc>
 8011e4a:	4770      	bx	lr
 8011e4c:	b510      	push	{r4, lr}
 8011e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e56:	4291      	cmp	r1, r2
 8011e58:	d1f9      	bne.n	8011e4e <memcpy+0xe>
 8011e5a:	bd10      	pop	{r4, pc}

08011e5c <memset>:
 8011e5c:	4402      	add	r2, r0
 8011e5e:	4603      	mov	r3, r0
 8011e60:	4293      	cmp	r3, r2
 8011e62:	d100      	bne.n	8011e66 <memset+0xa>
 8011e64:	4770      	bx	lr
 8011e66:	f803 1b01 	strb.w	r1, [r3], #1
 8011e6a:	e7f9      	b.n	8011e60 <memset+0x4>

08011e6c <_free_r>:
 8011e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e6e:	2900      	cmp	r1, #0
 8011e70:	d044      	beq.n	8011efc <_free_r+0x90>
 8011e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e76:	9001      	str	r0, [sp, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8011e7e:	bfb8      	it	lt
 8011e80:	18e4      	addlt	r4, r4, r3
 8011e82:	f000 f96f 	bl	8012164 <__malloc_lock>
 8011e86:	4a1e      	ldr	r2, [pc, #120]	; (8011f00 <_free_r+0x94>)
 8011e88:	9801      	ldr	r0, [sp, #4]
 8011e8a:	6813      	ldr	r3, [r2, #0]
 8011e8c:	b933      	cbnz	r3, 8011e9c <_free_r+0x30>
 8011e8e:	6063      	str	r3, [r4, #4]
 8011e90:	6014      	str	r4, [r2, #0]
 8011e92:	b003      	add	sp, #12
 8011e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e98:	f000 b96a 	b.w	8012170 <__malloc_unlock>
 8011e9c:	42a3      	cmp	r3, r4
 8011e9e:	d908      	bls.n	8011eb2 <_free_r+0x46>
 8011ea0:	6825      	ldr	r5, [r4, #0]
 8011ea2:	1961      	adds	r1, r4, r5
 8011ea4:	428b      	cmp	r3, r1
 8011ea6:	bf01      	itttt	eq
 8011ea8:	6819      	ldreq	r1, [r3, #0]
 8011eaa:	685b      	ldreq	r3, [r3, #4]
 8011eac:	1949      	addeq	r1, r1, r5
 8011eae:	6021      	streq	r1, [r4, #0]
 8011eb0:	e7ed      	b.n	8011e8e <_free_r+0x22>
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	b10b      	cbz	r3, 8011ebc <_free_r+0x50>
 8011eb8:	42a3      	cmp	r3, r4
 8011eba:	d9fa      	bls.n	8011eb2 <_free_r+0x46>
 8011ebc:	6811      	ldr	r1, [r2, #0]
 8011ebe:	1855      	adds	r5, r2, r1
 8011ec0:	42a5      	cmp	r5, r4
 8011ec2:	d10b      	bne.n	8011edc <_free_r+0x70>
 8011ec4:	6824      	ldr	r4, [r4, #0]
 8011ec6:	4421      	add	r1, r4
 8011ec8:	1854      	adds	r4, r2, r1
 8011eca:	42a3      	cmp	r3, r4
 8011ecc:	6011      	str	r1, [r2, #0]
 8011ece:	d1e0      	bne.n	8011e92 <_free_r+0x26>
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	685b      	ldr	r3, [r3, #4]
 8011ed4:	6053      	str	r3, [r2, #4]
 8011ed6:	4421      	add	r1, r4
 8011ed8:	6011      	str	r1, [r2, #0]
 8011eda:	e7da      	b.n	8011e92 <_free_r+0x26>
 8011edc:	d902      	bls.n	8011ee4 <_free_r+0x78>
 8011ede:	230c      	movs	r3, #12
 8011ee0:	6003      	str	r3, [r0, #0]
 8011ee2:	e7d6      	b.n	8011e92 <_free_r+0x26>
 8011ee4:	6825      	ldr	r5, [r4, #0]
 8011ee6:	1961      	adds	r1, r4, r5
 8011ee8:	428b      	cmp	r3, r1
 8011eea:	bf04      	itt	eq
 8011eec:	6819      	ldreq	r1, [r3, #0]
 8011eee:	685b      	ldreq	r3, [r3, #4]
 8011ef0:	6063      	str	r3, [r4, #4]
 8011ef2:	bf04      	itt	eq
 8011ef4:	1949      	addeq	r1, r1, r5
 8011ef6:	6021      	streq	r1, [r4, #0]
 8011ef8:	6054      	str	r4, [r2, #4]
 8011efa:	e7ca      	b.n	8011e92 <_free_r+0x26>
 8011efc:	b003      	add	sp, #12
 8011efe:	bd30      	pop	{r4, r5, pc}
 8011f00:	20003b7c 	.word	0x20003b7c

08011f04 <sbrk_aligned>:
 8011f04:	b570      	push	{r4, r5, r6, lr}
 8011f06:	4e0e      	ldr	r6, [pc, #56]	; (8011f40 <sbrk_aligned+0x3c>)
 8011f08:	460c      	mov	r4, r1
 8011f0a:	6831      	ldr	r1, [r6, #0]
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	b911      	cbnz	r1, 8011f16 <sbrk_aligned+0x12>
 8011f10:	f000 f8f6 	bl	8012100 <_sbrk_r>
 8011f14:	6030      	str	r0, [r6, #0]
 8011f16:	4621      	mov	r1, r4
 8011f18:	4628      	mov	r0, r5
 8011f1a:	f000 f8f1 	bl	8012100 <_sbrk_r>
 8011f1e:	1c43      	adds	r3, r0, #1
 8011f20:	d00a      	beq.n	8011f38 <sbrk_aligned+0x34>
 8011f22:	1cc4      	adds	r4, r0, #3
 8011f24:	f024 0403 	bic.w	r4, r4, #3
 8011f28:	42a0      	cmp	r0, r4
 8011f2a:	d007      	beq.n	8011f3c <sbrk_aligned+0x38>
 8011f2c:	1a21      	subs	r1, r4, r0
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f000 f8e6 	bl	8012100 <_sbrk_r>
 8011f34:	3001      	adds	r0, #1
 8011f36:	d101      	bne.n	8011f3c <sbrk_aligned+0x38>
 8011f38:	f04f 34ff 	mov.w	r4, #4294967295
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	20003b80 	.word	0x20003b80

08011f44 <_malloc_r>:
 8011f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f48:	1ccd      	adds	r5, r1, #3
 8011f4a:	f025 0503 	bic.w	r5, r5, #3
 8011f4e:	3508      	adds	r5, #8
 8011f50:	2d0c      	cmp	r5, #12
 8011f52:	bf38      	it	cc
 8011f54:	250c      	movcc	r5, #12
 8011f56:	2d00      	cmp	r5, #0
 8011f58:	4607      	mov	r7, r0
 8011f5a:	db01      	blt.n	8011f60 <_malloc_r+0x1c>
 8011f5c:	42a9      	cmp	r1, r5
 8011f5e:	d905      	bls.n	8011f6c <_malloc_r+0x28>
 8011f60:	230c      	movs	r3, #12
 8011f62:	603b      	str	r3, [r7, #0]
 8011f64:	2600      	movs	r6, #0
 8011f66:	4630      	mov	r0, r6
 8011f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6c:	4e2e      	ldr	r6, [pc, #184]	; (8012028 <_malloc_r+0xe4>)
 8011f6e:	f000 f8f9 	bl	8012164 <__malloc_lock>
 8011f72:	6833      	ldr	r3, [r6, #0]
 8011f74:	461c      	mov	r4, r3
 8011f76:	bb34      	cbnz	r4, 8011fc6 <_malloc_r+0x82>
 8011f78:	4629      	mov	r1, r5
 8011f7a:	4638      	mov	r0, r7
 8011f7c:	f7ff ffc2 	bl	8011f04 <sbrk_aligned>
 8011f80:	1c43      	adds	r3, r0, #1
 8011f82:	4604      	mov	r4, r0
 8011f84:	d14d      	bne.n	8012022 <_malloc_r+0xde>
 8011f86:	6834      	ldr	r4, [r6, #0]
 8011f88:	4626      	mov	r6, r4
 8011f8a:	2e00      	cmp	r6, #0
 8011f8c:	d140      	bne.n	8012010 <_malloc_r+0xcc>
 8011f8e:	6823      	ldr	r3, [r4, #0]
 8011f90:	4631      	mov	r1, r6
 8011f92:	4638      	mov	r0, r7
 8011f94:	eb04 0803 	add.w	r8, r4, r3
 8011f98:	f000 f8b2 	bl	8012100 <_sbrk_r>
 8011f9c:	4580      	cmp	r8, r0
 8011f9e:	d13a      	bne.n	8012016 <_malloc_r+0xd2>
 8011fa0:	6821      	ldr	r1, [r4, #0]
 8011fa2:	3503      	adds	r5, #3
 8011fa4:	1a6d      	subs	r5, r5, r1
 8011fa6:	f025 0503 	bic.w	r5, r5, #3
 8011faa:	3508      	adds	r5, #8
 8011fac:	2d0c      	cmp	r5, #12
 8011fae:	bf38      	it	cc
 8011fb0:	250c      	movcc	r5, #12
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	4638      	mov	r0, r7
 8011fb6:	f7ff ffa5 	bl	8011f04 <sbrk_aligned>
 8011fba:	3001      	adds	r0, #1
 8011fbc:	d02b      	beq.n	8012016 <_malloc_r+0xd2>
 8011fbe:	6823      	ldr	r3, [r4, #0]
 8011fc0:	442b      	add	r3, r5
 8011fc2:	6023      	str	r3, [r4, #0]
 8011fc4:	e00e      	b.n	8011fe4 <_malloc_r+0xa0>
 8011fc6:	6822      	ldr	r2, [r4, #0]
 8011fc8:	1b52      	subs	r2, r2, r5
 8011fca:	d41e      	bmi.n	801200a <_malloc_r+0xc6>
 8011fcc:	2a0b      	cmp	r2, #11
 8011fce:	d916      	bls.n	8011ffe <_malloc_r+0xba>
 8011fd0:	1961      	adds	r1, r4, r5
 8011fd2:	42a3      	cmp	r3, r4
 8011fd4:	6025      	str	r5, [r4, #0]
 8011fd6:	bf18      	it	ne
 8011fd8:	6059      	strne	r1, [r3, #4]
 8011fda:	6863      	ldr	r3, [r4, #4]
 8011fdc:	bf08      	it	eq
 8011fde:	6031      	streq	r1, [r6, #0]
 8011fe0:	5162      	str	r2, [r4, r5]
 8011fe2:	604b      	str	r3, [r1, #4]
 8011fe4:	4638      	mov	r0, r7
 8011fe6:	f104 060b 	add.w	r6, r4, #11
 8011fea:	f000 f8c1 	bl	8012170 <__malloc_unlock>
 8011fee:	f026 0607 	bic.w	r6, r6, #7
 8011ff2:	1d23      	adds	r3, r4, #4
 8011ff4:	1af2      	subs	r2, r6, r3
 8011ff6:	d0b6      	beq.n	8011f66 <_malloc_r+0x22>
 8011ff8:	1b9b      	subs	r3, r3, r6
 8011ffa:	50a3      	str	r3, [r4, r2]
 8011ffc:	e7b3      	b.n	8011f66 <_malloc_r+0x22>
 8011ffe:	6862      	ldr	r2, [r4, #4]
 8012000:	42a3      	cmp	r3, r4
 8012002:	bf0c      	ite	eq
 8012004:	6032      	streq	r2, [r6, #0]
 8012006:	605a      	strne	r2, [r3, #4]
 8012008:	e7ec      	b.n	8011fe4 <_malloc_r+0xa0>
 801200a:	4623      	mov	r3, r4
 801200c:	6864      	ldr	r4, [r4, #4]
 801200e:	e7b2      	b.n	8011f76 <_malloc_r+0x32>
 8012010:	4634      	mov	r4, r6
 8012012:	6876      	ldr	r6, [r6, #4]
 8012014:	e7b9      	b.n	8011f8a <_malloc_r+0x46>
 8012016:	230c      	movs	r3, #12
 8012018:	603b      	str	r3, [r7, #0]
 801201a:	4638      	mov	r0, r7
 801201c:	f000 f8a8 	bl	8012170 <__malloc_unlock>
 8012020:	e7a1      	b.n	8011f66 <_malloc_r+0x22>
 8012022:	6025      	str	r5, [r4, #0]
 8012024:	e7de      	b.n	8011fe4 <_malloc_r+0xa0>
 8012026:	bf00      	nop
 8012028:	20003b7c 	.word	0x20003b7c

0801202c <cleanup_glue>:
 801202c:	b538      	push	{r3, r4, r5, lr}
 801202e:	460c      	mov	r4, r1
 8012030:	6809      	ldr	r1, [r1, #0]
 8012032:	4605      	mov	r5, r0
 8012034:	b109      	cbz	r1, 801203a <cleanup_glue+0xe>
 8012036:	f7ff fff9 	bl	801202c <cleanup_glue>
 801203a:	4621      	mov	r1, r4
 801203c:	4628      	mov	r0, r5
 801203e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012042:	f7ff bf13 	b.w	8011e6c <_free_r>
	...

08012048 <_reclaim_reent>:
 8012048:	4b2c      	ldr	r3, [pc, #176]	; (80120fc <_reclaim_reent+0xb4>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4283      	cmp	r3, r0
 801204e:	b570      	push	{r4, r5, r6, lr}
 8012050:	4604      	mov	r4, r0
 8012052:	d051      	beq.n	80120f8 <_reclaim_reent+0xb0>
 8012054:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012056:	b143      	cbz	r3, 801206a <_reclaim_reent+0x22>
 8012058:	68db      	ldr	r3, [r3, #12]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d14a      	bne.n	80120f4 <_reclaim_reent+0xac>
 801205e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012060:	6819      	ldr	r1, [r3, #0]
 8012062:	b111      	cbz	r1, 801206a <_reclaim_reent+0x22>
 8012064:	4620      	mov	r0, r4
 8012066:	f7ff ff01 	bl	8011e6c <_free_r>
 801206a:	6961      	ldr	r1, [r4, #20]
 801206c:	b111      	cbz	r1, 8012074 <_reclaim_reent+0x2c>
 801206e:	4620      	mov	r0, r4
 8012070:	f7ff fefc 	bl	8011e6c <_free_r>
 8012074:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012076:	b111      	cbz	r1, 801207e <_reclaim_reent+0x36>
 8012078:	4620      	mov	r0, r4
 801207a:	f7ff fef7 	bl	8011e6c <_free_r>
 801207e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012080:	b111      	cbz	r1, 8012088 <_reclaim_reent+0x40>
 8012082:	4620      	mov	r0, r4
 8012084:	f7ff fef2 	bl	8011e6c <_free_r>
 8012088:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801208a:	b111      	cbz	r1, 8012092 <_reclaim_reent+0x4a>
 801208c:	4620      	mov	r0, r4
 801208e:	f7ff feed 	bl	8011e6c <_free_r>
 8012092:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012094:	b111      	cbz	r1, 801209c <_reclaim_reent+0x54>
 8012096:	4620      	mov	r0, r4
 8012098:	f7ff fee8 	bl	8011e6c <_free_r>
 801209c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801209e:	b111      	cbz	r1, 80120a6 <_reclaim_reent+0x5e>
 80120a0:	4620      	mov	r0, r4
 80120a2:	f7ff fee3 	bl	8011e6c <_free_r>
 80120a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80120a8:	b111      	cbz	r1, 80120b0 <_reclaim_reent+0x68>
 80120aa:	4620      	mov	r0, r4
 80120ac:	f7ff fede 	bl	8011e6c <_free_r>
 80120b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80120b2:	b111      	cbz	r1, 80120ba <_reclaim_reent+0x72>
 80120b4:	4620      	mov	r0, r4
 80120b6:	f7ff fed9 	bl	8011e6c <_free_r>
 80120ba:	69a3      	ldr	r3, [r4, #24]
 80120bc:	b1e3      	cbz	r3, 80120f8 <_reclaim_reent+0xb0>
 80120be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80120c0:	4620      	mov	r0, r4
 80120c2:	4798      	blx	r3
 80120c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80120c6:	b1b9      	cbz	r1, 80120f8 <_reclaim_reent+0xb0>
 80120c8:	4620      	mov	r0, r4
 80120ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120ce:	f7ff bfad 	b.w	801202c <cleanup_glue>
 80120d2:	5949      	ldr	r1, [r1, r5]
 80120d4:	b941      	cbnz	r1, 80120e8 <_reclaim_reent+0xa0>
 80120d6:	3504      	adds	r5, #4
 80120d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120da:	2d80      	cmp	r5, #128	; 0x80
 80120dc:	68d9      	ldr	r1, [r3, #12]
 80120de:	d1f8      	bne.n	80120d2 <_reclaim_reent+0x8a>
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7ff fec3 	bl	8011e6c <_free_r>
 80120e6:	e7ba      	b.n	801205e <_reclaim_reent+0x16>
 80120e8:	680e      	ldr	r6, [r1, #0]
 80120ea:	4620      	mov	r0, r4
 80120ec:	f7ff febe 	bl	8011e6c <_free_r>
 80120f0:	4631      	mov	r1, r6
 80120f2:	e7ef      	b.n	80120d4 <_reclaim_reent+0x8c>
 80120f4:	2500      	movs	r5, #0
 80120f6:	e7ef      	b.n	80120d8 <_reclaim_reent+0x90>
 80120f8:	bd70      	pop	{r4, r5, r6, pc}
 80120fa:	bf00      	nop
 80120fc:	20000014 	.word	0x20000014

08012100 <_sbrk_r>:
 8012100:	b538      	push	{r3, r4, r5, lr}
 8012102:	4d06      	ldr	r5, [pc, #24]	; (801211c <_sbrk_r+0x1c>)
 8012104:	2300      	movs	r3, #0
 8012106:	4604      	mov	r4, r0
 8012108:	4608      	mov	r0, r1
 801210a:	602b      	str	r3, [r5, #0]
 801210c:	f7f5 ff16 	bl	8007f3c <_sbrk>
 8012110:	1c43      	adds	r3, r0, #1
 8012112:	d102      	bne.n	801211a <_sbrk_r+0x1a>
 8012114:	682b      	ldr	r3, [r5, #0]
 8012116:	b103      	cbz	r3, 801211a <_sbrk_r+0x1a>
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	bd38      	pop	{r3, r4, r5, pc}
 801211c:	20003b84 	.word	0x20003b84

08012120 <strcat>:
 8012120:	b510      	push	{r4, lr}
 8012122:	4602      	mov	r2, r0
 8012124:	7814      	ldrb	r4, [r2, #0]
 8012126:	4613      	mov	r3, r2
 8012128:	3201      	adds	r2, #1
 801212a:	2c00      	cmp	r4, #0
 801212c:	d1fa      	bne.n	8012124 <strcat+0x4>
 801212e:	3b01      	subs	r3, #1
 8012130:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012134:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012138:	2a00      	cmp	r2, #0
 801213a:	d1f9      	bne.n	8012130 <strcat+0x10>
 801213c:	bd10      	pop	{r4, pc}

0801213e <strncat>:
 801213e:	b530      	push	{r4, r5, lr}
 8012140:	4604      	mov	r4, r0
 8012142:	7825      	ldrb	r5, [r4, #0]
 8012144:	4623      	mov	r3, r4
 8012146:	3401      	adds	r4, #1
 8012148:	2d00      	cmp	r5, #0
 801214a:	d1fa      	bne.n	8012142 <strncat+0x4>
 801214c:	3a01      	subs	r2, #1
 801214e:	d304      	bcc.n	801215a <strncat+0x1c>
 8012150:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012154:	f803 4b01 	strb.w	r4, [r3], #1
 8012158:	b904      	cbnz	r4, 801215c <strncat+0x1e>
 801215a:	bd30      	pop	{r4, r5, pc}
 801215c:	2a00      	cmp	r2, #0
 801215e:	d1f5      	bne.n	801214c <strncat+0xe>
 8012160:	701a      	strb	r2, [r3, #0]
 8012162:	e7f3      	b.n	801214c <strncat+0xe>

08012164 <__malloc_lock>:
 8012164:	4801      	ldr	r0, [pc, #4]	; (801216c <__malloc_lock+0x8>)
 8012166:	f7ff be59 	b.w	8011e1c <__retarget_lock_acquire_recursive>
 801216a:	bf00      	nop
 801216c:	20003b78 	.word	0x20003b78

08012170 <__malloc_unlock>:
 8012170:	4801      	ldr	r0, [pc, #4]	; (8012178 <__malloc_unlock+0x8>)
 8012172:	f7ff be54 	b.w	8011e1e <__retarget_lock_release_recursive>
 8012176:	bf00      	nop
 8012178:	20003b78 	.word	0x20003b78

0801217c <pow>:
 801217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217e:	ed2d 8b02 	vpush	{d8}
 8012182:	eeb0 8a40 	vmov.f32	s16, s0
 8012186:	eef0 8a60 	vmov.f32	s17, s1
 801218a:	ec55 4b11 	vmov	r4, r5, d1
 801218e:	f000 f867 	bl	8012260 <__ieee754_pow>
 8012192:	4622      	mov	r2, r4
 8012194:	462b      	mov	r3, r5
 8012196:	4620      	mov	r0, r4
 8012198:	4629      	mov	r1, r5
 801219a:	ec57 6b10 	vmov	r6, r7, d0
 801219e:	f7f2 fca7 	bl	8004af0 <__aeabi_dcmpun>
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d13b      	bne.n	801221e <pow+0xa2>
 80121a6:	ec51 0b18 	vmov	r0, r1, d8
 80121aa:	2200      	movs	r2, #0
 80121ac:	2300      	movs	r3, #0
 80121ae:	f7f2 fc6d 	bl	8004a8c <__aeabi_dcmpeq>
 80121b2:	b1b8      	cbz	r0, 80121e4 <pow+0x68>
 80121b4:	2200      	movs	r2, #0
 80121b6:	2300      	movs	r3, #0
 80121b8:	4620      	mov	r0, r4
 80121ba:	4629      	mov	r1, r5
 80121bc:	f7f2 fc66 	bl	8004a8c <__aeabi_dcmpeq>
 80121c0:	2800      	cmp	r0, #0
 80121c2:	d146      	bne.n	8012252 <pow+0xd6>
 80121c4:	ec45 4b10 	vmov	d0, r4, r5
 80121c8:	f000 fe63 	bl	8012e92 <finite>
 80121cc:	b338      	cbz	r0, 801221e <pow+0xa2>
 80121ce:	2200      	movs	r2, #0
 80121d0:	2300      	movs	r3, #0
 80121d2:	4620      	mov	r0, r4
 80121d4:	4629      	mov	r1, r5
 80121d6:	f7f2 fc63 	bl	8004aa0 <__aeabi_dcmplt>
 80121da:	b300      	cbz	r0, 801221e <pow+0xa2>
 80121dc:	f7ff fdf4 	bl	8011dc8 <__errno>
 80121e0:	2322      	movs	r3, #34	; 0x22
 80121e2:	e01b      	b.n	801221c <pow+0xa0>
 80121e4:	ec47 6b10 	vmov	d0, r6, r7
 80121e8:	f000 fe53 	bl	8012e92 <finite>
 80121ec:	b9e0      	cbnz	r0, 8012228 <pow+0xac>
 80121ee:	eeb0 0a48 	vmov.f32	s0, s16
 80121f2:	eef0 0a68 	vmov.f32	s1, s17
 80121f6:	f000 fe4c 	bl	8012e92 <finite>
 80121fa:	b1a8      	cbz	r0, 8012228 <pow+0xac>
 80121fc:	ec45 4b10 	vmov	d0, r4, r5
 8012200:	f000 fe47 	bl	8012e92 <finite>
 8012204:	b180      	cbz	r0, 8012228 <pow+0xac>
 8012206:	4632      	mov	r2, r6
 8012208:	463b      	mov	r3, r7
 801220a:	4630      	mov	r0, r6
 801220c:	4639      	mov	r1, r7
 801220e:	f7f2 fc6f 	bl	8004af0 <__aeabi_dcmpun>
 8012212:	2800      	cmp	r0, #0
 8012214:	d0e2      	beq.n	80121dc <pow+0x60>
 8012216:	f7ff fdd7 	bl	8011dc8 <__errno>
 801221a:	2321      	movs	r3, #33	; 0x21
 801221c:	6003      	str	r3, [r0, #0]
 801221e:	ecbd 8b02 	vpop	{d8}
 8012222:	ec47 6b10 	vmov	d0, r6, r7
 8012226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012228:	2200      	movs	r2, #0
 801222a:	2300      	movs	r3, #0
 801222c:	4630      	mov	r0, r6
 801222e:	4639      	mov	r1, r7
 8012230:	f7f2 fc2c 	bl	8004a8c <__aeabi_dcmpeq>
 8012234:	2800      	cmp	r0, #0
 8012236:	d0f2      	beq.n	801221e <pow+0xa2>
 8012238:	eeb0 0a48 	vmov.f32	s0, s16
 801223c:	eef0 0a68 	vmov.f32	s1, s17
 8012240:	f000 fe27 	bl	8012e92 <finite>
 8012244:	2800      	cmp	r0, #0
 8012246:	d0ea      	beq.n	801221e <pow+0xa2>
 8012248:	ec45 4b10 	vmov	d0, r4, r5
 801224c:	f000 fe21 	bl	8012e92 <finite>
 8012250:	e7c3      	b.n	80121da <pow+0x5e>
 8012252:	4f01      	ldr	r7, [pc, #4]	; (8012258 <pow+0xdc>)
 8012254:	2600      	movs	r6, #0
 8012256:	e7e2      	b.n	801221e <pow+0xa2>
 8012258:	3ff00000 	.word	0x3ff00000
 801225c:	00000000 	.word	0x00000000

08012260 <__ieee754_pow>:
 8012260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012264:	ed2d 8b06 	vpush	{d8-d10}
 8012268:	b089      	sub	sp, #36	; 0x24
 801226a:	ed8d 1b00 	vstr	d1, [sp]
 801226e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012272:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012276:	ea58 0102 	orrs.w	r1, r8, r2
 801227a:	ec57 6b10 	vmov	r6, r7, d0
 801227e:	d115      	bne.n	80122ac <__ieee754_pow+0x4c>
 8012280:	19b3      	adds	r3, r6, r6
 8012282:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8012286:	4152      	adcs	r2, r2
 8012288:	4299      	cmp	r1, r3
 801228a:	4b89      	ldr	r3, [pc, #548]	; (80124b0 <__ieee754_pow+0x250>)
 801228c:	4193      	sbcs	r3, r2
 801228e:	f080 84d2 	bcs.w	8012c36 <__ieee754_pow+0x9d6>
 8012292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012296:	4630      	mov	r0, r6
 8012298:	4639      	mov	r1, r7
 801229a:	f7f1 ffd9 	bl	8004250 <__adddf3>
 801229e:	ec41 0b10 	vmov	d0, r0, r1
 80122a2:	b009      	add	sp, #36	; 0x24
 80122a4:	ecbd 8b06 	vpop	{d8-d10}
 80122a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ac:	4b81      	ldr	r3, [pc, #516]	; (80124b4 <__ieee754_pow+0x254>)
 80122ae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80122b2:	429c      	cmp	r4, r3
 80122b4:	ee10 aa10 	vmov	sl, s0
 80122b8:	463d      	mov	r5, r7
 80122ba:	dc06      	bgt.n	80122ca <__ieee754_pow+0x6a>
 80122bc:	d101      	bne.n	80122c2 <__ieee754_pow+0x62>
 80122be:	2e00      	cmp	r6, #0
 80122c0:	d1e7      	bne.n	8012292 <__ieee754_pow+0x32>
 80122c2:	4598      	cmp	r8, r3
 80122c4:	dc01      	bgt.n	80122ca <__ieee754_pow+0x6a>
 80122c6:	d10f      	bne.n	80122e8 <__ieee754_pow+0x88>
 80122c8:	b172      	cbz	r2, 80122e8 <__ieee754_pow+0x88>
 80122ca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80122ce:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80122d2:	ea55 050a 	orrs.w	r5, r5, sl
 80122d6:	d1dc      	bne.n	8012292 <__ieee754_pow+0x32>
 80122d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80122dc:	18db      	adds	r3, r3, r3
 80122de:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80122e2:	4152      	adcs	r2, r2
 80122e4:	429d      	cmp	r5, r3
 80122e6:	e7d0      	b.n	801228a <__ieee754_pow+0x2a>
 80122e8:	2d00      	cmp	r5, #0
 80122ea:	da3b      	bge.n	8012364 <__ieee754_pow+0x104>
 80122ec:	4b72      	ldr	r3, [pc, #456]	; (80124b8 <__ieee754_pow+0x258>)
 80122ee:	4598      	cmp	r8, r3
 80122f0:	dc51      	bgt.n	8012396 <__ieee754_pow+0x136>
 80122f2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80122f6:	4598      	cmp	r8, r3
 80122f8:	f340 84ac 	ble.w	8012c54 <__ieee754_pow+0x9f4>
 80122fc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012300:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012304:	2b14      	cmp	r3, #20
 8012306:	dd0f      	ble.n	8012328 <__ieee754_pow+0xc8>
 8012308:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801230c:	fa22 f103 	lsr.w	r1, r2, r3
 8012310:	fa01 f303 	lsl.w	r3, r1, r3
 8012314:	4293      	cmp	r3, r2
 8012316:	f040 849d 	bne.w	8012c54 <__ieee754_pow+0x9f4>
 801231a:	f001 0101 	and.w	r1, r1, #1
 801231e:	f1c1 0302 	rsb	r3, r1, #2
 8012322:	9304      	str	r3, [sp, #16]
 8012324:	b182      	cbz	r2, 8012348 <__ieee754_pow+0xe8>
 8012326:	e05f      	b.n	80123e8 <__ieee754_pow+0x188>
 8012328:	2a00      	cmp	r2, #0
 801232a:	d15b      	bne.n	80123e4 <__ieee754_pow+0x184>
 801232c:	f1c3 0314 	rsb	r3, r3, #20
 8012330:	fa48 f103 	asr.w	r1, r8, r3
 8012334:	fa01 f303 	lsl.w	r3, r1, r3
 8012338:	4543      	cmp	r3, r8
 801233a:	f040 8488 	bne.w	8012c4e <__ieee754_pow+0x9ee>
 801233e:	f001 0101 	and.w	r1, r1, #1
 8012342:	f1c1 0302 	rsb	r3, r1, #2
 8012346:	9304      	str	r3, [sp, #16]
 8012348:	4b5c      	ldr	r3, [pc, #368]	; (80124bc <__ieee754_pow+0x25c>)
 801234a:	4598      	cmp	r8, r3
 801234c:	d132      	bne.n	80123b4 <__ieee754_pow+0x154>
 801234e:	f1b9 0f00 	cmp.w	r9, #0
 8012352:	f280 8478 	bge.w	8012c46 <__ieee754_pow+0x9e6>
 8012356:	4959      	ldr	r1, [pc, #356]	; (80124bc <__ieee754_pow+0x25c>)
 8012358:	4632      	mov	r2, r6
 801235a:	463b      	mov	r3, r7
 801235c:	2000      	movs	r0, #0
 801235e:	f7f2 fa57 	bl	8004810 <__aeabi_ddiv>
 8012362:	e79c      	b.n	801229e <__ieee754_pow+0x3e>
 8012364:	2300      	movs	r3, #0
 8012366:	9304      	str	r3, [sp, #16]
 8012368:	2a00      	cmp	r2, #0
 801236a:	d13d      	bne.n	80123e8 <__ieee754_pow+0x188>
 801236c:	4b51      	ldr	r3, [pc, #324]	; (80124b4 <__ieee754_pow+0x254>)
 801236e:	4598      	cmp	r8, r3
 8012370:	d1ea      	bne.n	8012348 <__ieee754_pow+0xe8>
 8012372:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8012376:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801237a:	ea53 030a 	orrs.w	r3, r3, sl
 801237e:	f000 845a 	beq.w	8012c36 <__ieee754_pow+0x9d6>
 8012382:	4b4f      	ldr	r3, [pc, #316]	; (80124c0 <__ieee754_pow+0x260>)
 8012384:	429c      	cmp	r4, r3
 8012386:	dd08      	ble.n	801239a <__ieee754_pow+0x13a>
 8012388:	f1b9 0f00 	cmp.w	r9, #0
 801238c:	f2c0 8457 	blt.w	8012c3e <__ieee754_pow+0x9de>
 8012390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012394:	e783      	b.n	801229e <__ieee754_pow+0x3e>
 8012396:	2302      	movs	r3, #2
 8012398:	e7e5      	b.n	8012366 <__ieee754_pow+0x106>
 801239a:	f1b9 0f00 	cmp.w	r9, #0
 801239e:	f04f 0000 	mov.w	r0, #0
 80123a2:	f04f 0100 	mov.w	r1, #0
 80123a6:	f6bf af7a 	bge.w	801229e <__ieee754_pow+0x3e>
 80123aa:	e9dd 0300 	ldrd	r0, r3, [sp]
 80123ae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80123b2:	e774      	b.n	801229e <__ieee754_pow+0x3e>
 80123b4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80123b8:	d106      	bne.n	80123c8 <__ieee754_pow+0x168>
 80123ba:	4632      	mov	r2, r6
 80123bc:	463b      	mov	r3, r7
 80123be:	4630      	mov	r0, r6
 80123c0:	4639      	mov	r1, r7
 80123c2:	f7f2 f8fb 	bl	80045bc <__aeabi_dmul>
 80123c6:	e76a      	b.n	801229e <__ieee754_pow+0x3e>
 80123c8:	4b3e      	ldr	r3, [pc, #248]	; (80124c4 <__ieee754_pow+0x264>)
 80123ca:	4599      	cmp	r9, r3
 80123cc:	d10c      	bne.n	80123e8 <__ieee754_pow+0x188>
 80123ce:	2d00      	cmp	r5, #0
 80123d0:	db0a      	blt.n	80123e8 <__ieee754_pow+0x188>
 80123d2:	ec47 6b10 	vmov	d0, r6, r7
 80123d6:	b009      	add	sp, #36	; 0x24
 80123d8:	ecbd 8b06 	vpop	{d8-d10}
 80123dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123e0:	f000 bc6c 	b.w	8012cbc <__ieee754_sqrt>
 80123e4:	2300      	movs	r3, #0
 80123e6:	9304      	str	r3, [sp, #16]
 80123e8:	ec47 6b10 	vmov	d0, r6, r7
 80123ec:	f000 fd48 	bl	8012e80 <fabs>
 80123f0:	ec51 0b10 	vmov	r0, r1, d0
 80123f4:	f1ba 0f00 	cmp.w	sl, #0
 80123f8:	d129      	bne.n	801244e <__ieee754_pow+0x1ee>
 80123fa:	b124      	cbz	r4, 8012406 <__ieee754_pow+0x1a6>
 80123fc:	4b2f      	ldr	r3, [pc, #188]	; (80124bc <__ieee754_pow+0x25c>)
 80123fe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8012402:	429a      	cmp	r2, r3
 8012404:	d123      	bne.n	801244e <__ieee754_pow+0x1ee>
 8012406:	f1b9 0f00 	cmp.w	r9, #0
 801240a:	da05      	bge.n	8012418 <__ieee754_pow+0x1b8>
 801240c:	4602      	mov	r2, r0
 801240e:	460b      	mov	r3, r1
 8012410:	2000      	movs	r0, #0
 8012412:	492a      	ldr	r1, [pc, #168]	; (80124bc <__ieee754_pow+0x25c>)
 8012414:	f7f2 f9fc 	bl	8004810 <__aeabi_ddiv>
 8012418:	2d00      	cmp	r5, #0
 801241a:	f6bf af40 	bge.w	801229e <__ieee754_pow+0x3e>
 801241e:	9b04      	ldr	r3, [sp, #16]
 8012420:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012424:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012428:	4323      	orrs	r3, r4
 801242a:	d108      	bne.n	801243e <__ieee754_pow+0x1de>
 801242c:	4602      	mov	r2, r0
 801242e:	460b      	mov	r3, r1
 8012430:	4610      	mov	r0, r2
 8012432:	4619      	mov	r1, r3
 8012434:	f7f1 ff0a 	bl	800424c <__aeabi_dsub>
 8012438:	4602      	mov	r2, r0
 801243a:	460b      	mov	r3, r1
 801243c:	e78f      	b.n	801235e <__ieee754_pow+0xfe>
 801243e:	9b04      	ldr	r3, [sp, #16]
 8012440:	2b01      	cmp	r3, #1
 8012442:	f47f af2c 	bne.w	801229e <__ieee754_pow+0x3e>
 8012446:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801244a:	4619      	mov	r1, r3
 801244c:	e727      	b.n	801229e <__ieee754_pow+0x3e>
 801244e:	0feb      	lsrs	r3, r5, #31
 8012450:	3b01      	subs	r3, #1
 8012452:	9306      	str	r3, [sp, #24]
 8012454:	9a06      	ldr	r2, [sp, #24]
 8012456:	9b04      	ldr	r3, [sp, #16]
 8012458:	4313      	orrs	r3, r2
 801245a:	d102      	bne.n	8012462 <__ieee754_pow+0x202>
 801245c:	4632      	mov	r2, r6
 801245e:	463b      	mov	r3, r7
 8012460:	e7e6      	b.n	8012430 <__ieee754_pow+0x1d0>
 8012462:	4b19      	ldr	r3, [pc, #100]	; (80124c8 <__ieee754_pow+0x268>)
 8012464:	4598      	cmp	r8, r3
 8012466:	f340 80fb 	ble.w	8012660 <__ieee754_pow+0x400>
 801246a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801246e:	4598      	cmp	r8, r3
 8012470:	4b13      	ldr	r3, [pc, #76]	; (80124c0 <__ieee754_pow+0x260>)
 8012472:	dd0c      	ble.n	801248e <__ieee754_pow+0x22e>
 8012474:	429c      	cmp	r4, r3
 8012476:	dc0f      	bgt.n	8012498 <__ieee754_pow+0x238>
 8012478:	f1b9 0f00 	cmp.w	r9, #0
 801247c:	da0f      	bge.n	801249e <__ieee754_pow+0x23e>
 801247e:	2000      	movs	r0, #0
 8012480:	b009      	add	sp, #36	; 0x24
 8012482:	ecbd 8b06 	vpop	{d8-d10}
 8012486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248a:	f000 bcf0 	b.w	8012e6e <__math_oflow>
 801248e:	429c      	cmp	r4, r3
 8012490:	dbf2      	blt.n	8012478 <__ieee754_pow+0x218>
 8012492:	4b0a      	ldr	r3, [pc, #40]	; (80124bc <__ieee754_pow+0x25c>)
 8012494:	429c      	cmp	r4, r3
 8012496:	dd19      	ble.n	80124cc <__ieee754_pow+0x26c>
 8012498:	f1b9 0f00 	cmp.w	r9, #0
 801249c:	dcef      	bgt.n	801247e <__ieee754_pow+0x21e>
 801249e:	2000      	movs	r0, #0
 80124a0:	b009      	add	sp, #36	; 0x24
 80124a2:	ecbd 8b06 	vpop	{d8-d10}
 80124a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124aa:	f000 bcd7 	b.w	8012e5c <__math_uflow>
 80124ae:	bf00      	nop
 80124b0:	fff00000 	.word	0xfff00000
 80124b4:	7ff00000 	.word	0x7ff00000
 80124b8:	433fffff 	.word	0x433fffff
 80124bc:	3ff00000 	.word	0x3ff00000
 80124c0:	3fefffff 	.word	0x3fefffff
 80124c4:	3fe00000 	.word	0x3fe00000
 80124c8:	41e00000 	.word	0x41e00000
 80124cc:	4b60      	ldr	r3, [pc, #384]	; (8012650 <__ieee754_pow+0x3f0>)
 80124ce:	2200      	movs	r2, #0
 80124d0:	f7f1 febc 	bl	800424c <__aeabi_dsub>
 80124d4:	a354      	add	r3, pc, #336	; (adr r3, 8012628 <__ieee754_pow+0x3c8>)
 80124d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124da:	4604      	mov	r4, r0
 80124dc:	460d      	mov	r5, r1
 80124de:	f7f2 f86d 	bl	80045bc <__aeabi_dmul>
 80124e2:	a353      	add	r3, pc, #332	; (adr r3, 8012630 <__ieee754_pow+0x3d0>)
 80124e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e8:	4606      	mov	r6, r0
 80124ea:	460f      	mov	r7, r1
 80124ec:	4620      	mov	r0, r4
 80124ee:	4629      	mov	r1, r5
 80124f0:	f7f2 f864 	bl	80045bc <__aeabi_dmul>
 80124f4:	4b57      	ldr	r3, [pc, #348]	; (8012654 <__ieee754_pow+0x3f4>)
 80124f6:	4682      	mov	sl, r0
 80124f8:	468b      	mov	fp, r1
 80124fa:	2200      	movs	r2, #0
 80124fc:	4620      	mov	r0, r4
 80124fe:	4629      	mov	r1, r5
 8012500:	f7f2 f85c 	bl	80045bc <__aeabi_dmul>
 8012504:	4602      	mov	r2, r0
 8012506:	460b      	mov	r3, r1
 8012508:	a14b      	add	r1, pc, #300	; (adr r1, 8012638 <__ieee754_pow+0x3d8>)
 801250a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801250e:	f7f1 fe9d 	bl	800424c <__aeabi_dsub>
 8012512:	4622      	mov	r2, r4
 8012514:	462b      	mov	r3, r5
 8012516:	f7f2 f851 	bl	80045bc <__aeabi_dmul>
 801251a:	4602      	mov	r2, r0
 801251c:	460b      	mov	r3, r1
 801251e:	2000      	movs	r0, #0
 8012520:	494d      	ldr	r1, [pc, #308]	; (8012658 <__ieee754_pow+0x3f8>)
 8012522:	f7f1 fe93 	bl	800424c <__aeabi_dsub>
 8012526:	4622      	mov	r2, r4
 8012528:	4680      	mov	r8, r0
 801252a:	4689      	mov	r9, r1
 801252c:	462b      	mov	r3, r5
 801252e:	4620      	mov	r0, r4
 8012530:	4629      	mov	r1, r5
 8012532:	f7f2 f843 	bl	80045bc <__aeabi_dmul>
 8012536:	4602      	mov	r2, r0
 8012538:	460b      	mov	r3, r1
 801253a:	4640      	mov	r0, r8
 801253c:	4649      	mov	r1, r9
 801253e:	f7f2 f83d 	bl	80045bc <__aeabi_dmul>
 8012542:	a33f      	add	r3, pc, #252	; (adr r3, 8012640 <__ieee754_pow+0x3e0>)
 8012544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012548:	f7f2 f838 	bl	80045bc <__aeabi_dmul>
 801254c:	4602      	mov	r2, r0
 801254e:	460b      	mov	r3, r1
 8012550:	4650      	mov	r0, sl
 8012552:	4659      	mov	r1, fp
 8012554:	f7f1 fe7a 	bl	800424c <__aeabi_dsub>
 8012558:	4602      	mov	r2, r0
 801255a:	460b      	mov	r3, r1
 801255c:	4680      	mov	r8, r0
 801255e:	4689      	mov	r9, r1
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7f1 fe74 	bl	8004250 <__adddf3>
 8012568:	2000      	movs	r0, #0
 801256a:	4632      	mov	r2, r6
 801256c:	463b      	mov	r3, r7
 801256e:	4604      	mov	r4, r0
 8012570:	460d      	mov	r5, r1
 8012572:	f7f1 fe6b 	bl	800424c <__aeabi_dsub>
 8012576:	4602      	mov	r2, r0
 8012578:	460b      	mov	r3, r1
 801257a:	4640      	mov	r0, r8
 801257c:	4649      	mov	r1, r9
 801257e:	f7f1 fe65 	bl	800424c <__aeabi_dsub>
 8012582:	9b04      	ldr	r3, [sp, #16]
 8012584:	9a06      	ldr	r2, [sp, #24]
 8012586:	3b01      	subs	r3, #1
 8012588:	4313      	orrs	r3, r2
 801258a:	4682      	mov	sl, r0
 801258c:	468b      	mov	fp, r1
 801258e:	f040 81e7 	bne.w	8012960 <__ieee754_pow+0x700>
 8012592:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012648 <__ieee754_pow+0x3e8>
 8012596:	eeb0 8a47 	vmov.f32	s16, s14
 801259a:	eef0 8a67 	vmov.f32	s17, s15
 801259e:	e9dd 6700 	ldrd	r6, r7, [sp]
 80125a2:	2600      	movs	r6, #0
 80125a4:	4632      	mov	r2, r6
 80125a6:	463b      	mov	r3, r7
 80125a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125ac:	f7f1 fe4e 	bl	800424c <__aeabi_dsub>
 80125b0:	4622      	mov	r2, r4
 80125b2:	462b      	mov	r3, r5
 80125b4:	f7f2 f802 	bl	80045bc <__aeabi_dmul>
 80125b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125bc:	4680      	mov	r8, r0
 80125be:	4689      	mov	r9, r1
 80125c0:	4650      	mov	r0, sl
 80125c2:	4659      	mov	r1, fp
 80125c4:	f7f1 fffa 	bl	80045bc <__aeabi_dmul>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4640      	mov	r0, r8
 80125ce:	4649      	mov	r1, r9
 80125d0:	f7f1 fe3e 	bl	8004250 <__adddf3>
 80125d4:	4632      	mov	r2, r6
 80125d6:	463b      	mov	r3, r7
 80125d8:	4680      	mov	r8, r0
 80125da:	4689      	mov	r9, r1
 80125dc:	4620      	mov	r0, r4
 80125de:	4629      	mov	r1, r5
 80125e0:	f7f1 ffec 	bl	80045bc <__aeabi_dmul>
 80125e4:	460b      	mov	r3, r1
 80125e6:	4604      	mov	r4, r0
 80125e8:	460d      	mov	r5, r1
 80125ea:	4602      	mov	r2, r0
 80125ec:	4649      	mov	r1, r9
 80125ee:	4640      	mov	r0, r8
 80125f0:	f7f1 fe2e 	bl	8004250 <__adddf3>
 80125f4:	4b19      	ldr	r3, [pc, #100]	; (801265c <__ieee754_pow+0x3fc>)
 80125f6:	4299      	cmp	r1, r3
 80125f8:	ec45 4b19 	vmov	d9, r4, r5
 80125fc:	4606      	mov	r6, r0
 80125fe:	460f      	mov	r7, r1
 8012600:	468b      	mov	fp, r1
 8012602:	f340 82f1 	ble.w	8012be8 <__ieee754_pow+0x988>
 8012606:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801260a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801260e:	4303      	orrs	r3, r0
 8012610:	f000 81e4 	beq.w	80129dc <__ieee754_pow+0x77c>
 8012614:	ec51 0b18 	vmov	r0, r1, d8
 8012618:	2200      	movs	r2, #0
 801261a:	2300      	movs	r3, #0
 801261c:	f7f2 fa40 	bl	8004aa0 <__aeabi_dcmplt>
 8012620:	3800      	subs	r0, #0
 8012622:	bf18      	it	ne
 8012624:	2001      	movne	r0, #1
 8012626:	e72b      	b.n	8012480 <__ieee754_pow+0x220>
 8012628:	60000000 	.word	0x60000000
 801262c:	3ff71547 	.word	0x3ff71547
 8012630:	f85ddf44 	.word	0xf85ddf44
 8012634:	3e54ae0b 	.word	0x3e54ae0b
 8012638:	55555555 	.word	0x55555555
 801263c:	3fd55555 	.word	0x3fd55555
 8012640:	652b82fe 	.word	0x652b82fe
 8012644:	3ff71547 	.word	0x3ff71547
 8012648:	00000000 	.word	0x00000000
 801264c:	bff00000 	.word	0xbff00000
 8012650:	3ff00000 	.word	0x3ff00000
 8012654:	3fd00000 	.word	0x3fd00000
 8012658:	3fe00000 	.word	0x3fe00000
 801265c:	408fffff 	.word	0x408fffff
 8012660:	4bd5      	ldr	r3, [pc, #852]	; (80129b8 <__ieee754_pow+0x758>)
 8012662:	402b      	ands	r3, r5
 8012664:	2200      	movs	r2, #0
 8012666:	b92b      	cbnz	r3, 8012674 <__ieee754_pow+0x414>
 8012668:	4bd4      	ldr	r3, [pc, #848]	; (80129bc <__ieee754_pow+0x75c>)
 801266a:	f7f1 ffa7 	bl	80045bc <__aeabi_dmul>
 801266e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012672:	460c      	mov	r4, r1
 8012674:	1523      	asrs	r3, r4, #20
 8012676:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801267a:	4413      	add	r3, r2
 801267c:	9305      	str	r3, [sp, #20]
 801267e:	4bd0      	ldr	r3, [pc, #832]	; (80129c0 <__ieee754_pow+0x760>)
 8012680:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012684:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012688:	429c      	cmp	r4, r3
 801268a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801268e:	dd08      	ble.n	80126a2 <__ieee754_pow+0x442>
 8012690:	4bcc      	ldr	r3, [pc, #816]	; (80129c4 <__ieee754_pow+0x764>)
 8012692:	429c      	cmp	r4, r3
 8012694:	f340 8162 	ble.w	801295c <__ieee754_pow+0x6fc>
 8012698:	9b05      	ldr	r3, [sp, #20]
 801269a:	3301      	adds	r3, #1
 801269c:	9305      	str	r3, [sp, #20]
 801269e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80126a2:	2400      	movs	r4, #0
 80126a4:	00e3      	lsls	r3, r4, #3
 80126a6:	9307      	str	r3, [sp, #28]
 80126a8:	4bc7      	ldr	r3, [pc, #796]	; (80129c8 <__ieee754_pow+0x768>)
 80126aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126ae:	ed93 7b00 	vldr	d7, [r3]
 80126b2:	4629      	mov	r1, r5
 80126b4:	ec53 2b17 	vmov	r2, r3, d7
 80126b8:	eeb0 9a47 	vmov.f32	s18, s14
 80126bc:	eef0 9a67 	vmov.f32	s19, s15
 80126c0:	4682      	mov	sl, r0
 80126c2:	f7f1 fdc3 	bl	800424c <__aeabi_dsub>
 80126c6:	4652      	mov	r2, sl
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	462b      	mov	r3, r5
 80126ce:	ec51 0b19 	vmov	r0, r1, d9
 80126d2:	f7f1 fdbd 	bl	8004250 <__adddf3>
 80126d6:	4602      	mov	r2, r0
 80126d8:	460b      	mov	r3, r1
 80126da:	2000      	movs	r0, #0
 80126dc:	49bb      	ldr	r1, [pc, #748]	; (80129cc <__ieee754_pow+0x76c>)
 80126de:	f7f2 f897 	bl	8004810 <__aeabi_ddiv>
 80126e2:	ec41 0b1a 	vmov	d10, r0, r1
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	4630      	mov	r0, r6
 80126ec:	4639      	mov	r1, r7
 80126ee:	f7f1 ff65 	bl	80045bc <__aeabi_dmul>
 80126f2:	2300      	movs	r3, #0
 80126f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126f8:	9302      	str	r3, [sp, #8]
 80126fa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80126fe:	46ab      	mov	fp, r5
 8012700:	106d      	asrs	r5, r5, #1
 8012702:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012706:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801270a:	ec41 0b18 	vmov	d8, r0, r1
 801270e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8012712:	2200      	movs	r2, #0
 8012714:	4640      	mov	r0, r8
 8012716:	4649      	mov	r1, r9
 8012718:	4614      	mov	r4, r2
 801271a:	461d      	mov	r5, r3
 801271c:	f7f1 ff4e 	bl	80045bc <__aeabi_dmul>
 8012720:	4602      	mov	r2, r0
 8012722:	460b      	mov	r3, r1
 8012724:	4630      	mov	r0, r6
 8012726:	4639      	mov	r1, r7
 8012728:	f7f1 fd90 	bl	800424c <__aeabi_dsub>
 801272c:	ec53 2b19 	vmov	r2, r3, d9
 8012730:	4606      	mov	r6, r0
 8012732:	460f      	mov	r7, r1
 8012734:	4620      	mov	r0, r4
 8012736:	4629      	mov	r1, r5
 8012738:	f7f1 fd88 	bl	800424c <__aeabi_dsub>
 801273c:	4602      	mov	r2, r0
 801273e:	460b      	mov	r3, r1
 8012740:	4650      	mov	r0, sl
 8012742:	4659      	mov	r1, fp
 8012744:	f7f1 fd82 	bl	800424c <__aeabi_dsub>
 8012748:	4642      	mov	r2, r8
 801274a:	464b      	mov	r3, r9
 801274c:	f7f1 ff36 	bl	80045bc <__aeabi_dmul>
 8012750:	4602      	mov	r2, r0
 8012752:	460b      	mov	r3, r1
 8012754:	4630      	mov	r0, r6
 8012756:	4639      	mov	r1, r7
 8012758:	f7f1 fd78 	bl	800424c <__aeabi_dsub>
 801275c:	ec53 2b1a 	vmov	r2, r3, d10
 8012760:	f7f1 ff2c 	bl	80045bc <__aeabi_dmul>
 8012764:	ec53 2b18 	vmov	r2, r3, d8
 8012768:	ec41 0b19 	vmov	d9, r0, r1
 801276c:	ec51 0b18 	vmov	r0, r1, d8
 8012770:	f7f1 ff24 	bl	80045bc <__aeabi_dmul>
 8012774:	a37c      	add	r3, pc, #496	; (adr r3, 8012968 <__ieee754_pow+0x708>)
 8012776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801277a:	4604      	mov	r4, r0
 801277c:	460d      	mov	r5, r1
 801277e:	f7f1 ff1d 	bl	80045bc <__aeabi_dmul>
 8012782:	a37b      	add	r3, pc, #492	; (adr r3, 8012970 <__ieee754_pow+0x710>)
 8012784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012788:	f7f1 fd62 	bl	8004250 <__adddf3>
 801278c:	4622      	mov	r2, r4
 801278e:	462b      	mov	r3, r5
 8012790:	f7f1 ff14 	bl	80045bc <__aeabi_dmul>
 8012794:	a378      	add	r3, pc, #480	; (adr r3, 8012978 <__ieee754_pow+0x718>)
 8012796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279a:	f7f1 fd59 	bl	8004250 <__adddf3>
 801279e:	4622      	mov	r2, r4
 80127a0:	462b      	mov	r3, r5
 80127a2:	f7f1 ff0b 	bl	80045bc <__aeabi_dmul>
 80127a6:	a376      	add	r3, pc, #472	; (adr r3, 8012980 <__ieee754_pow+0x720>)
 80127a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ac:	f7f1 fd50 	bl	8004250 <__adddf3>
 80127b0:	4622      	mov	r2, r4
 80127b2:	462b      	mov	r3, r5
 80127b4:	f7f1 ff02 	bl	80045bc <__aeabi_dmul>
 80127b8:	a373      	add	r3, pc, #460	; (adr r3, 8012988 <__ieee754_pow+0x728>)
 80127ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127be:	f7f1 fd47 	bl	8004250 <__adddf3>
 80127c2:	4622      	mov	r2, r4
 80127c4:	462b      	mov	r3, r5
 80127c6:	f7f1 fef9 	bl	80045bc <__aeabi_dmul>
 80127ca:	a371      	add	r3, pc, #452	; (adr r3, 8012990 <__ieee754_pow+0x730>)
 80127cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127d0:	f7f1 fd3e 	bl	8004250 <__adddf3>
 80127d4:	4622      	mov	r2, r4
 80127d6:	4606      	mov	r6, r0
 80127d8:	460f      	mov	r7, r1
 80127da:	462b      	mov	r3, r5
 80127dc:	4620      	mov	r0, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	f7f1 feec 	bl	80045bc <__aeabi_dmul>
 80127e4:	4602      	mov	r2, r0
 80127e6:	460b      	mov	r3, r1
 80127e8:	4630      	mov	r0, r6
 80127ea:	4639      	mov	r1, r7
 80127ec:	f7f1 fee6 	bl	80045bc <__aeabi_dmul>
 80127f0:	4642      	mov	r2, r8
 80127f2:	4604      	mov	r4, r0
 80127f4:	460d      	mov	r5, r1
 80127f6:	464b      	mov	r3, r9
 80127f8:	ec51 0b18 	vmov	r0, r1, d8
 80127fc:	f7f1 fd28 	bl	8004250 <__adddf3>
 8012800:	ec53 2b19 	vmov	r2, r3, d9
 8012804:	f7f1 feda 	bl	80045bc <__aeabi_dmul>
 8012808:	4622      	mov	r2, r4
 801280a:	462b      	mov	r3, r5
 801280c:	f7f1 fd20 	bl	8004250 <__adddf3>
 8012810:	4642      	mov	r2, r8
 8012812:	4682      	mov	sl, r0
 8012814:	468b      	mov	fp, r1
 8012816:	464b      	mov	r3, r9
 8012818:	4640      	mov	r0, r8
 801281a:	4649      	mov	r1, r9
 801281c:	f7f1 fece 	bl	80045bc <__aeabi_dmul>
 8012820:	4b6b      	ldr	r3, [pc, #428]	; (80129d0 <__ieee754_pow+0x770>)
 8012822:	2200      	movs	r2, #0
 8012824:	4606      	mov	r6, r0
 8012826:	460f      	mov	r7, r1
 8012828:	f7f1 fd12 	bl	8004250 <__adddf3>
 801282c:	4652      	mov	r2, sl
 801282e:	465b      	mov	r3, fp
 8012830:	f7f1 fd0e 	bl	8004250 <__adddf3>
 8012834:	2000      	movs	r0, #0
 8012836:	4604      	mov	r4, r0
 8012838:	460d      	mov	r5, r1
 801283a:	4602      	mov	r2, r0
 801283c:	460b      	mov	r3, r1
 801283e:	4640      	mov	r0, r8
 8012840:	4649      	mov	r1, r9
 8012842:	f7f1 febb 	bl	80045bc <__aeabi_dmul>
 8012846:	4b62      	ldr	r3, [pc, #392]	; (80129d0 <__ieee754_pow+0x770>)
 8012848:	4680      	mov	r8, r0
 801284a:	4689      	mov	r9, r1
 801284c:	2200      	movs	r2, #0
 801284e:	4620      	mov	r0, r4
 8012850:	4629      	mov	r1, r5
 8012852:	f7f1 fcfb 	bl	800424c <__aeabi_dsub>
 8012856:	4632      	mov	r2, r6
 8012858:	463b      	mov	r3, r7
 801285a:	f7f1 fcf7 	bl	800424c <__aeabi_dsub>
 801285e:	4602      	mov	r2, r0
 8012860:	460b      	mov	r3, r1
 8012862:	4650      	mov	r0, sl
 8012864:	4659      	mov	r1, fp
 8012866:	f7f1 fcf1 	bl	800424c <__aeabi_dsub>
 801286a:	ec53 2b18 	vmov	r2, r3, d8
 801286e:	f7f1 fea5 	bl	80045bc <__aeabi_dmul>
 8012872:	4622      	mov	r2, r4
 8012874:	4606      	mov	r6, r0
 8012876:	460f      	mov	r7, r1
 8012878:	462b      	mov	r3, r5
 801287a:	ec51 0b19 	vmov	r0, r1, d9
 801287e:	f7f1 fe9d 	bl	80045bc <__aeabi_dmul>
 8012882:	4602      	mov	r2, r0
 8012884:	460b      	mov	r3, r1
 8012886:	4630      	mov	r0, r6
 8012888:	4639      	mov	r1, r7
 801288a:	f7f1 fce1 	bl	8004250 <__adddf3>
 801288e:	4606      	mov	r6, r0
 8012890:	460f      	mov	r7, r1
 8012892:	4602      	mov	r2, r0
 8012894:	460b      	mov	r3, r1
 8012896:	4640      	mov	r0, r8
 8012898:	4649      	mov	r1, r9
 801289a:	f7f1 fcd9 	bl	8004250 <__adddf3>
 801289e:	a33e      	add	r3, pc, #248	; (adr r3, 8012998 <__ieee754_pow+0x738>)
 80128a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a4:	2000      	movs	r0, #0
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	f7f1 fe87 	bl	80045bc <__aeabi_dmul>
 80128ae:	4642      	mov	r2, r8
 80128b0:	ec41 0b18 	vmov	d8, r0, r1
 80128b4:	464b      	mov	r3, r9
 80128b6:	4620      	mov	r0, r4
 80128b8:	4629      	mov	r1, r5
 80128ba:	f7f1 fcc7 	bl	800424c <__aeabi_dsub>
 80128be:	4602      	mov	r2, r0
 80128c0:	460b      	mov	r3, r1
 80128c2:	4630      	mov	r0, r6
 80128c4:	4639      	mov	r1, r7
 80128c6:	f7f1 fcc1 	bl	800424c <__aeabi_dsub>
 80128ca:	a335      	add	r3, pc, #212	; (adr r3, 80129a0 <__ieee754_pow+0x740>)
 80128cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d0:	f7f1 fe74 	bl	80045bc <__aeabi_dmul>
 80128d4:	a334      	add	r3, pc, #208	; (adr r3, 80129a8 <__ieee754_pow+0x748>)
 80128d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128da:	4606      	mov	r6, r0
 80128dc:	460f      	mov	r7, r1
 80128de:	4620      	mov	r0, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	f7f1 fe6b 	bl	80045bc <__aeabi_dmul>
 80128e6:	4602      	mov	r2, r0
 80128e8:	460b      	mov	r3, r1
 80128ea:	4630      	mov	r0, r6
 80128ec:	4639      	mov	r1, r7
 80128ee:	f7f1 fcaf 	bl	8004250 <__adddf3>
 80128f2:	9a07      	ldr	r2, [sp, #28]
 80128f4:	4b37      	ldr	r3, [pc, #220]	; (80129d4 <__ieee754_pow+0x774>)
 80128f6:	4413      	add	r3, r2
 80128f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fc:	f7f1 fca8 	bl	8004250 <__adddf3>
 8012900:	4682      	mov	sl, r0
 8012902:	9805      	ldr	r0, [sp, #20]
 8012904:	468b      	mov	fp, r1
 8012906:	f7f1 fdef 	bl	80044e8 <__aeabi_i2d>
 801290a:	9a07      	ldr	r2, [sp, #28]
 801290c:	4b32      	ldr	r3, [pc, #200]	; (80129d8 <__ieee754_pow+0x778>)
 801290e:	4413      	add	r3, r2
 8012910:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012914:	4606      	mov	r6, r0
 8012916:	460f      	mov	r7, r1
 8012918:	4652      	mov	r2, sl
 801291a:	465b      	mov	r3, fp
 801291c:	ec51 0b18 	vmov	r0, r1, d8
 8012920:	f7f1 fc96 	bl	8004250 <__adddf3>
 8012924:	4642      	mov	r2, r8
 8012926:	464b      	mov	r3, r9
 8012928:	f7f1 fc92 	bl	8004250 <__adddf3>
 801292c:	4632      	mov	r2, r6
 801292e:	463b      	mov	r3, r7
 8012930:	f7f1 fc8e 	bl	8004250 <__adddf3>
 8012934:	2000      	movs	r0, #0
 8012936:	4632      	mov	r2, r6
 8012938:	463b      	mov	r3, r7
 801293a:	4604      	mov	r4, r0
 801293c:	460d      	mov	r5, r1
 801293e:	f7f1 fc85 	bl	800424c <__aeabi_dsub>
 8012942:	4642      	mov	r2, r8
 8012944:	464b      	mov	r3, r9
 8012946:	f7f1 fc81 	bl	800424c <__aeabi_dsub>
 801294a:	ec53 2b18 	vmov	r2, r3, d8
 801294e:	f7f1 fc7d 	bl	800424c <__aeabi_dsub>
 8012952:	4602      	mov	r2, r0
 8012954:	460b      	mov	r3, r1
 8012956:	4650      	mov	r0, sl
 8012958:	4659      	mov	r1, fp
 801295a:	e610      	b.n	801257e <__ieee754_pow+0x31e>
 801295c:	2401      	movs	r4, #1
 801295e:	e6a1      	b.n	80126a4 <__ieee754_pow+0x444>
 8012960:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80129b0 <__ieee754_pow+0x750>
 8012964:	e617      	b.n	8012596 <__ieee754_pow+0x336>
 8012966:	bf00      	nop
 8012968:	4a454eef 	.word	0x4a454eef
 801296c:	3fca7e28 	.word	0x3fca7e28
 8012970:	93c9db65 	.word	0x93c9db65
 8012974:	3fcd864a 	.word	0x3fcd864a
 8012978:	a91d4101 	.word	0xa91d4101
 801297c:	3fd17460 	.word	0x3fd17460
 8012980:	518f264d 	.word	0x518f264d
 8012984:	3fd55555 	.word	0x3fd55555
 8012988:	db6fabff 	.word	0xdb6fabff
 801298c:	3fdb6db6 	.word	0x3fdb6db6
 8012990:	33333303 	.word	0x33333303
 8012994:	3fe33333 	.word	0x3fe33333
 8012998:	e0000000 	.word	0xe0000000
 801299c:	3feec709 	.word	0x3feec709
 80129a0:	dc3a03fd 	.word	0xdc3a03fd
 80129a4:	3feec709 	.word	0x3feec709
 80129a8:	145b01f5 	.word	0x145b01f5
 80129ac:	be3e2fe0 	.word	0xbe3e2fe0
 80129b0:	00000000 	.word	0x00000000
 80129b4:	3ff00000 	.word	0x3ff00000
 80129b8:	7ff00000 	.word	0x7ff00000
 80129bc:	43400000 	.word	0x43400000
 80129c0:	0003988e 	.word	0x0003988e
 80129c4:	000bb679 	.word	0x000bb679
 80129c8:	08013288 	.word	0x08013288
 80129cc:	3ff00000 	.word	0x3ff00000
 80129d0:	40080000 	.word	0x40080000
 80129d4:	080132a8 	.word	0x080132a8
 80129d8:	08013298 	.word	0x08013298
 80129dc:	a3b5      	add	r3, pc, #724	; (adr r3, 8012cb4 <__ieee754_pow+0xa54>)
 80129de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e2:	4640      	mov	r0, r8
 80129e4:	4649      	mov	r1, r9
 80129e6:	f7f1 fc33 	bl	8004250 <__adddf3>
 80129ea:	4622      	mov	r2, r4
 80129ec:	ec41 0b1a 	vmov	d10, r0, r1
 80129f0:	462b      	mov	r3, r5
 80129f2:	4630      	mov	r0, r6
 80129f4:	4639      	mov	r1, r7
 80129f6:	f7f1 fc29 	bl	800424c <__aeabi_dsub>
 80129fa:	4602      	mov	r2, r0
 80129fc:	460b      	mov	r3, r1
 80129fe:	ec51 0b1a 	vmov	r0, r1, d10
 8012a02:	f7f2 f86b 	bl	8004adc <__aeabi_dcmpgt>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	f47f ae04 	bne.w	8012614 <__ieee754_pow+0x3b4>
 8012a0c:	4aa4      	ldr	r2, [pc, #656]	; (8012ca0 <__ieee754_pow+0xa40>)
 8012a0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012a12:	4293      	cmp	r3, r2
 8012a14:	f340 8108 	ble.w	8012c28 <__ieee754_pow+0x9c8>
 8012a18:	151b      	asrs	r3, r3, #20
 8012a1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012a1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012a22:	fa4a f303 	asr.w	r3, sl, r3
 8012a26:	445b      	add	r3, fp
 8012a28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012a2c:	4e9d      	ldr	r6, [pc, #628]	; (8012ca4 <__ieee754_pow+0xa44>)
 8012a2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012a32:	4116      	asrs	r6, r2
 8012a34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012a38:	2000      	movs	r0, #0
 8012a3a:	ea23 0106 	bic.w	r1, r3, r6
 8012a3e:	f1c2 0214 	rsb	r2, r2, #20
 8012a42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012a46:	fa4a fa02 	asr.w	sl, sl, r2
 8012a4a:	f1bb 0f00 	cmp.w	fp, #0
 8012a4e:	4602      	mov	r2, r0
 8012a50:	460b      	mov	r3, r1
 8012a52:	4620      	mov	r0, r4
 8012a54:	4629      	mov	r1, r5
 8012a56:	bfb8      	it	lt
 8012a58:	f1ca 0a00 	rsblt	sl, sl, #0
 8012a5c:	f7f1 fbf6 	bl	800424c <__aeabi_dsub>
 8012a60:	ec41 0b19 	vmov	d9, r0, r1
 8012a64:	4642      	mov	r2, r8
 8012a66:	464b      	mov	r3, r9
 8012a68:	ec51 0b19 	vmov	r0, r1, d9
 8012a6c:	f7f1 fbf0 	bl	8004250 <__adddf3>
 8012a70:	a37b      	add	r3, pc, #492	; (adr r3, 8012c60 <__ieee754_pow+0xa00>)
 8012a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a76:	2000      	movs	r0, #0
 8012a78:	4604      	mov	r4, r0
 8012a7a:	460d      	mov	r5, r1
 8012a7c:	f7f1 fd9e 	bl	80045bc <__aeabi_dmul>
 8012a80:	ec53 2b19 	vmov	r2, r3, d9
 8012a84:	4606      	mov	r6, r0
 8012a86:	460f      	mov	r7, r1
 8012a88:	4620      	mov	r0, r4
 8012a8a:	4629      	mov	r1, r5
 8012a8c:	f7f1 fbde 	bl	800424c <__aeabi_dsub>
 8012a90:	4602      	mov	r2, r0
 8012a92:	460b      	mov	r3, r1
 8012a94:	4640      	mov	r0, r8
 8012a96:	4649      	mov	r1, r9
 8012a98:	f7f1 fbd8 	bl	800424c <__aeabi_dsub>
 8012a9c:	a372      	add	r3, pc, #456	; (adr r3, 8012c68 <__ieee754_pow+0xa08>)
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	f7f1 fd8b 	bl	80045bc <__aeabi_dmul>
 8012aa6:	a372      	add	r3, pc, #456	; (adr r3, 8012c70 <__ieee754_pow+0xa10>)
 8012aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aac:	4680      	mov	r8, r0
 8012aae:	4689      	mov	r9, r1
 8012ab0:	4620      	mov	r0, r4
 8012ab2:	4629      	mov	r1, r5
 8012ab4:	f7f1 fd82 	bl	80045bc <__aeabi_dmul>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	460b      	mov	r3, r1
 8012abc:	4640      	mov	r0, r8
 8012abe:	4649      	mov	r1, r9
 8012ac0:	f7f1 fbc6 	bl	8004250 <__adddf3>
 8012ac4:	4604      	mov	r4, r0
 8012ac6:	460d      	mov	r5, r1
 8012ac8:	4602      	mov	r2, r0
 8012aca:	460b      	mov	r3, r1
 8012acc:	4630      	mov	r0, r6
 8012ace:	4639      	mov	r1, r7
 8012ad0:	f7f1 fbbe 	bl	8004250 <__adddf3>
 8012ad4:	4632      	mov	r2, r6
 8012ad6:	463b      	mov	r3, r7
 8012ad8:	4680      	mov	r8, r0
 8012ada:	4689      	mov	r9, r1
 8012adc:	f7f1 fbb6 	bl	800424c <__aeabi_dsub>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	4629      	mov	r1, r5
 8012ae8:	f7f1 fbb0 	bl	800424c <__aeabi_dsub>
 8012aec:	4642      	mov	r2, r8
 8012aee:	4606      	mov	r6, r0
 8012af0:	460f      	mov	r7, r1
 8012af2:	464b      	mov	r3, r9
 8012af4:	4640      	mov	r0, r8
 8012af6:	4649      	mov	r1, r9
 8012af8:	f7f1 fd60 	bl	80045bc <__aeabi_dmul>
 8012afc:	a35e      	add	r3, pc, #376	; (adr r3, 8012c78 <__ieee754_pow+0xa18>)
 8012afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b02:	4604      	mov	r4, r0
 8012b04:	460d      	mov	r5, r1
 8012b06:	f7f1 fd59 	bl	80045bc <__aeabi_dmul>
 8012b0a:	a35d      	add	r3, pc, #372	; (adr r3, 8012c80 <__ieee754_pow+0xa20>)
 8012b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b10:	f7f1 fb9c 	bl	800424c <__aeabi_dsub>
 8012b14:	4622      	mov	r2, r4
 8012b16:	462b      	mov	r3, r5
 8012b18:	f7f1 fd50 	bl	80045bc <__aeabi_dmul>
 8012b1c:	a35a      	add	r3, pc, #360	; (adr r3, 8012c88 <__ieee754_pow+0xa28>)
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f7f1 fb95 	bl	8004250 <__adddf3>
 8012b26:	4622      	mov	r2, r4
 8012b28:	462b      	mov	r3, r5
 8012b2a:	f7f1 fd47 	bl	80045bc <__aeabi_dmul>
 8012b2e:	a358      	add	r3, pc, #352	; (adr r3, 8012c90 <__ieee754_pow+0xa30>)
 8012b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b34:	f7f1 fb8a 	bl	800424c <__aeabi_dsub>
 8012b38:	4622      	mov	r2, r4
 8012b3a:	462b      	mov	r3, r5
 8012b3c:	f7f1 fd3e 	bl	80045bc <__aeabi_dmul>
 8012b40:	a355      	add	r3, pc, #340	; (adr r3, 8012c98 <__ieee754_pow+0xa38>)
 8012b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b46:	f7f1 fb83 	bl	8004250 <__adddf3>
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	462b      	mov	r3, r5
 8012b4e:	f7f1 fd35 	bl	80045bc <__aeabi_dmul>
 8012b52:	4602      	mov	r2, r0
 8012b54:	460b      	mov	r3, r1
 8012b56:	4640      	mov	r0, r8
 8012b58:	4649      	mov	r1, r9
 8012b5a:	f7f1 fb77 	bl	800424c <__aeabi_dsub>
 8012b5e:	4604      	mov	r4, r0
 8012b60:	460d      	mov	r5, r1
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4640      	mov	r0, r8
 8012b68:	4649      	mov	r1, r9
 8012b6a:	f7f1 fd27 	bl	80045bc <__aeabi_dmul>
 8012b6e:	2200      	movs	r2, #0
 8012b70:	ec41 0b19 	vmov	d9, r0, r1
 8012b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b78:	4620      	mov	r0, r4
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	f7f1 fb66 	bl	800424c <__aeabi_dsub>
 8012b80:	4602      	mov	r2, r0
 8012b82:	460b      	mov	r3, r1
 8012b84:	ec51 0b19 	vmov	r0, r1, d9
 8012b88:	f7f1 fe42 	bl	8004810 <__aeabi_ddiv>
 8012b8c:	4632      	mov	r2, r6
 8012b8e:	4604      	mov	r4, r0
 8012b90:	460d      	mov	r5, r1
 8012b92:	463b      	mov	r3, r7
 8012b94:	4640      	mov	r0, r8
 8012b96:	4649      	mov	r1, r9
 8012b98:	f7f1 fd10 	bl	80045bc <__aeabi_dmul>
 8012b9c:	4632      	mov	r2, r6
 8012b9e:	463b      	mov	r3, r7
 8012ba0:	f7f1 fb56 	bl	8004250 <__adddf3>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4620      	mov	r0, r4
 8012baa:	4629      	mov	r1, r5
 8012bac:	f7f1 fb4e 	bl	800424c <__aeabi_dsub>
 8012bb0:	4642      	mov	r2, r8
 8012bb2:	464b      	mov	r3, r9
 8012bb4:	f7f1 fb4a 	bl	800424c <__aeabi_dsub>
 8012bb8:	460b      	mov	r3, r1
 8012bba:	4602      	mov	r2, r0
 8012bbc:	493a      	ldr	r1, [pc, #232]	; (8012ca8 <__ieee754_pow+0xa48>)
 8012bbe:	2000      	movs	r0, #0
 8012bc0:	f7f1 fb44 	bl	800424c <__aeabi_dsub>
 8012bc4:	ec41 0b10 	vmov	d0, r0, r1
 8012bc8:	ee10 3a90 	vmov	r3, s1
 8012bcc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012bd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012bd4:	da2b      	bge.n	8012c2e <__ieee754_pow+0x9ce>
 8012bd6:	4650      	mov	r0, sl
 8012bd8:	f000 f966 	bl	8012ea8 <scalbn>
 8012bdc:	ec51 0b10 	vmov	r0, r1, d0
 8012be0:	ec53 2b18 	vmov	r2, r3, d8
 8012be4:	f7ff bbed 	b.w	80123c2 <__ieee754_pow+0x162>
 8012be8:	4b30      	ldr	r3, [pc, #192]	; (8012cac <__ieee754_pow+0xa4c>)
 8012bea:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012bee:	429e      	cmp	r6, r3
 8012bf0:	f77f af0c 	ble.w	8012a0c <__ieee754_pow+0x7ac>
 8012bf4:	4b2e      	ldr	r3, [pc, #184]	; (8012cb0 <__ieee754_pow+0xa50>)
 8012bf6:	440b      	add	r3, r1
 8012bf8:	4303      	orrs	r3, r0
 8012bfa:	d009      	beq.n	8012c10 <__ieee754_pow+0x9b0>
 8012bfc:	ec51 0b18 	vmov	r0, r1, d8
 8012c00:	2200      	movs	r2, #0
 8012c02:	2300      	movs	r3, #0
 8012c04:	f7f1 ff4c 	bl	8004aa0 <__aeabi_dcmplt>
 8012c08:	3800      	subs	r0, #0
 8012c0a:	bf18      	it	ne
 8012c0c:	2001      	movne	r0, #1
 8012c0e:	e447      	b.n	80124a0 <__ieee754_pow+0x240>
 8012c10:	4622      	mov	r2, r4
 8012c12:	462b      	mov	r3, r5
 8012c14:	f7f1 fb1a 	bl	800424c <__aeabi_dsub>
 8012c18:	4642      	mov	r2, r8
 8012c1a:	464b      	mov	r3, r9
 8012c1c:	f7f1 ff54 	bl	8004ac8 <__aeabi_dcmpge>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	f43f aef3 	beq.w	8012a0c <__ieee754_pow+0x7ac>
 8012c26:	e7e9      	b.n	8012bfc <__ieee754_pow+0x99c>
 8012c28:	f04f 0a00 	mov.w	sl, #0
 8012c2c:	e71a      	b.n	8012a64 <__ieee754_pow+0x804>
 8012c2e:	ec51 0b10 	vmov	r0, r1, d0
 8012c32:	4619      	mov	r1, r3
 8012c34:	e7d4      	b.n	8012be0 <__ieee754_pow+0x980>
 8012c36:	491c      	ldr	r1, [pc, #112]	; (8012ca8 <__ieee754_pow+0xa48>)
 8012c38:	2000      	movs	r0, #0
 8012c3a:	f7ff bb30 	b.w	801229e <__ieee754_pow+0x3e>
 8012c3e:	2000      	movs	r0, #0
 8012c40:	2100      	movs	r1, #0
 8012c42:	f7ff bb2c 	b.w	801229e <__ieee754_pow+0x3e>
 8012c46:	4630      	mov	r0, r6
 8012c48:	4639      	mov	r1, r7
 8012c4a:	f7ff bb28 	b.w	801229e <__ieee754_pow+0x3e>
 8012c4e:	9204      	str	r2, [sp, #16]
 8012c50:	f7ff bb7a 	b.w	8012348 <__ieee754_pow+0xe8>
 8012c54:	2300      	movs	r3, #0
 8012c56:	f7ff bb64 	b.w	8012322 <__ieee754_pow+0xc2>
 8012c5a:	bf00      	nop
 8012c5c:	f3af 8000 	nop.w
 8012c60:	00000000 	.word	0x00000000
 8012c64:	3fe62e43 	.word	0x3fe62e43
 8012c68:	fefa39ef 	.word	0xfefa39ef
 8012c6c:	3fe62e42 	.word	0x3fe62e42
 8012c70:	0ca86c39 	.word	0x0ca86c39
 8012c74:	be205c61 	.word	0xbe205c61
 8012c78:	72bea4d0 	.word	0x72bea4d0
 8012c7c:	3e663769 	.word	0x3e663769
 8012c80:	c5d26bf1 	.word	0xc5d26bf1
 8012c84:	3ebbbd41 	.word	0x3ebbbd41
 8012c88:	af25de2c 	.word	0xaf25de2c
 8012c8c:	3f11566a 	.word	0x3f11566a
 8012c90:	16bebd93 	.word	0x16bebd93
 8012c94:	3f66c16c 	.word	0x3f66c16c
 8012c98:	5555553e 	.word	0x5555553e
 8012c9c:	3fc55555 	.word	0x3fc55555
 8012ca0:	3fe00000 	.word	0x3fe00000
 8012ca4:	000fffff 	.word	0x000fffff
 8012ca8:	3ff00000 	.word	0x3ff00000
 8012cac:	4090cbff 	.word	0x4090cbff
 8012cb0:	3f6f3400 	.word	0x3f6f3400
 8012cb4:	652b82fe 	.word	0x652b82fe
 8012cb8:	3c971547 	.word	0x3c971547

08012cbc <__ieee754_sqrt>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	ec55 4b10 	vmov	r4, r5, d0
 8012cc4:	4e55      	ldr	r6, [pc, #340]	; (8012e1c <__ieee754_sqrt+0x160>)
 8012cc6:	43ae      	bics	r6, r5
 8012cc8:	ee10 0a10 	vmov	r0, s0
 8012ccc:	ee10 3a10 	vmov	r3, s0
 8012cd0:	462a      	mov	r2, r5
 8012cd2:	4629      	mov	r1, r5
 8012cd4:	d110      	bne.n	8012cf8 <__ieee754_sqrt+0x3c>
 8012cd6:	ee10 2a10 	vmov	r2, s0
 8012cda:	462b      	mov	r3, r5
 8012cdc:	f7f1 fc6e 	bl	80045bc <__aeabi_dmul>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	4629      	mov	r1, r5
 8012ce8:	f7f1 fab2 	bl	8004250 <__adddf3>
 8012cec:	4604      	mov	r4, r0
 8012cee:	460d      	mov	r5, r1
 8012cf0:	ec45 4b10 	vmov	d0, r4, r5
 8012cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf8:	2d00      	cmp	r5, #0
 8012cfa:	dc10      	bgt.n	8012d1e <__ieee754_sqrt+0x62>
 8012cfc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012d00:	4330      	orrs	r0, r6
 8012d02:	d0f5      	beq.n	8012cf0 <__ieee754_sqrt+0x34>
 8012d04:	b15d      	cbz	r5, 8012d1e <__ieee754_sqrt+0x62>
 8012d06:	ee10 2a10 	vmov	r2, s0
 8012d0a:	462b      	mov	r3, r5
 8012d0c:	ee10 0a10 	vmov	r0, s0
 8012d10:	f7f1 fa9c 	bl	800424c <__aeabi_dsub>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	f7f1 fd7a 	bl	8004810 <__aeabi_ddiv>
 8012d1c:	e7e6      	b.n	8012cec <__ieee754_sqrt+0x30>
 8012d1e:	1512      	asrs	r2, r2, #20
 8012d20:	d074      	beq.n	8012e0c <__ieee754_sqrt+0x150>
 8012d22:	07d4      	lsls	r4, r2, #31
 8012d24:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012d28:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8012d2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8012d30:	bf5e      	ittt	pl
 8012d32:	0fda      	lsrpl	r2, r3, #31
 8012d34:	005b      	lslpl	r3, r3, #1
 8012d36:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8012d3a:	2400      	movs	r4, #0
 8012d3c:	0fda      	lsrs	r2, r3, #31
 8012d3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012d42:	107f      	asrs	r7, r7, #1
 8012d44:	005b      	lsls	r3, r3, #1
 8012d46:	2516      	movs	r5, #22
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8012d4e:	1886      	adds	r6, r0, r2
 8012d50:	428e      	cmp	r6, r1
 8012d52:	bfde      	ittt	le
 8012d54:	1b89      	suble	r1, r1, r6
 8012d56:	18b0      	addle	r0, r6, r2
 8012d58:	18a4      	addle	r4, r4, r2
 8012d5a:	0049      	lsls	r1, r1, #1
 8012d5c:	3d01      	subs	r5, #1
 8012d5e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8012d62:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8012d66:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012d6a:	d1f0      	bne.n	8012d4e <__ieee754_sqrt+0x92>
 8012d6c:	462a      	mov	r2, r5
 8012d6e:	f04f 0e20 	mov.w	lr, #32
 8012d72:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012d76:	4281      	cmp	r1, r0
 8012d78:	eb06 0c05 	add.w	ip, r6, r5
 8012d7c:	dc02      	bgt.n	8012d84 <__ieee754_sqrt+0xc8>
 8012d7e:	d113      	bne.n	8012da8 <__ieee754_sqrt+0xec>
 8012d80:	459c      	cmp	ip, r3
 8012d82:	d811      	bhi.n	8012da8 <__ieee754_sqrt+0xec>
 8012d84:	f1bc 0f00 	cmp.w	ip, #0
 8012d88:	eb0c 0506 	add.w	r5, ip, r6
 8012d8c:	da43      	bge.n	8012e16 <__ieee754_sqrt+0x15a>
 8012d8e:	2d00      	cmp	r5, #0
 8012d90:	db41      	blt.n	8012e16 <__ieee754_sqrt+0x15a>
 8012d92:	f100 0801 	add.w	r8, r0, #1
 8012d96:	1a09      	subs	r1, r1, r0
 8012d98:	459c      	cmp	ip, r3
 8012d9a:	bf88      	it	hi
 8012d9c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8012da0:	eba3 030c 	sub.w	r3, r3, ip
 8012da4:	4432      	add	r2, r6
 8012da6:	4640      	mov	r0, r8
 8012da8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8012dac:	f1be 0e01 	subs.w	lr, lr, #1
 8012db0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8012db4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012db8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012dbc:	d1db      	bne.n	8012d76 <__ieee754_sqrt+0xba>
 8012dbe:	430b      	orrs	r3, r1
 8012dc0:	d006      	beq.n	8012dd0 <__ieee754_sqrt+0x114>
 8012dc2:	1c50      	adds	r0, r2, #1
 8012dc4:	bf13      	iteet	ne
 8012dc6:	3201      	addne	r2, #1
 8012dc8:	3401      	addeq	r4, #1
 8012dca:	4672      	moveq	r2, lr
 8012dcc:	f022 0201 	bicne.w	r2, r2, #1
 8012dd0:	1063      	asrs	r3, r4, #1
 8012dd2:	0852      	lsrs	r2, r2, #1
 8012dd4:	07e1      	lsls	r1, r4, #31
 8012dd6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8012dda:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8012dde:	bf48      	it	mi
 8012de0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8012de4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8012de8:	4614      	mov	r4, r2
 8012dea:	e781      	b.n	8012cf0 <__ieee754_sqrt+0x34>
 8012dec:	0ad9      	lsrs	r1, r3, #11
 8012dee:	3815      	subs	r0, #21
 8012df0:	055b      	lsls	r3, r3, #21
 8012df2:	2900      	cmp	r1, #0
 8012df4:	d0fa      	beq.n	8012dec <__ieee754_sqrt+0x130>
 8012df6:	02cd      	lsls	r5, r1, #11
 8012df8:	d50a      	bpl.n	8012e10 <__ieee754_sqrt+0x154>
 8012dfa:	f1c2 0420 	rsb	r4, r2, #32
 8012dfe:	fa23 f404 	lsr.w	r4, r3, r4
 8012e02:	1e55      	subs	r5, r2, #1
 8012e04:	4093      	lsls	r3, r2
 8012e06:	4321      	orrs	r1, r4
 8012e08:	1b42      	subs	r2, r0, r5
 8012e0a:	e78a      	b.n	8012d22 <__ieee754_sqrt+0x66>
 8012e0c:	4610      	mov	r0, r2
 8012e0e:	e7f0      	b.n	8012df2 <__ieee754_sqrt+0x136>
 8012e10:	0049      	lsls	r1, r1, #1
 8012e12:	3201      	adds	r2, #1
 8012e14:	e7ef      	b.n	8012df6 <__ieee754_sqrt+0x13a>
 8012e16:	4680      	mov	r8, r0
 8012e18:	e7bd      	b.n	8012d96 <__ieee754_sqrt+0xda>
 8012e1a:	bf00      	nop
 8012e1c:	7ff00000 	.word	0x7ff00000

08012e20 <with_errno>:
 8012e20:	b570      	push	{r4, r5, r6, lr}
 8012e22:	4604      	mov	r4, r0
 8012e24:	460d      	mov	r5, r1
 8012e26:	4616      	mov	r6, r2
 8012e28:	f7fe ffce 	bl	8011dc8 <__errno>
 8012e2c:	4629      	mov	r1, r5
 8012e2e:	6006      	str	r6, [r0, #0]
 8012e30:	4620      	mov	r0, r4
 8012e32:	bd70      	pop	{r4, r5, r6, pc}

08012e34 <xflow>:
 8012e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012e36:	4614      	mov	r4, r2
 8012e38:	461d      	mov	r5, r3
 8012e3a:	b108      	cbz	r0, 8012e40 <xflow+0xc>
 8012e3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012e40:	e9cd 2300 	strd	r2, r3, [sp]
 8012e44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e48:	4620      	mov	r0, r4
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	f7f1 fbb6 	bl	80045bc <__aeabi_dmul>
 8012e50:	2222      	movs	r2, #34	; 0x22
 8012e52:	b003      	add	sp, #12
 8012e54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e58:	f7ff bfe2 	b.w	8012e20 <with_errno>

08012e5c <__math_uflow>:
 8012e5c:	b508      	push	{r3, lr}
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012e64:	f7ff ffe6 	bl	8012e34 <xflow>
 8012e68:	ec41 0b10 	vmov	d0, r0, r1
 8012e6c:	bd08      	pop	{r3, pc}

08012e6e <__math_oflow>:
 8012e6e:	b508      	push	{r3, lr}
 8012e70:	2200      	movs	r2, #0
 8012e72:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012e76:	f7ff ffdd 	bl	8012e34 <xflow>
 8012e7a:	ec41 0b10 	vmov	d0, r0, r1
 8012e7e:	bd08      	pop	{r3, pc}

08012e80 <fabs>:
 8012e80:	ec51 0b10 	vmov	r0, r1, d0
 8012e84:	ee10 2a10 	vmov	r2, s0
 8012e88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e8c:	ec43 2b10 	vmov	d0, r2, r3
 8012e90:	4770      	bx	lr

08012e92 <finite>:
 8012e92:	b082      	sub	sp, #8
 8012e94:	ed8d 0b00 	vstr	d0, [sp]
 8012e98:	9801      	ldr	r0, [sp, #4]
 8012e9a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012e9e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012ea2:	0fc0      	lsrs	r0, r0, #31
 8012ea4:	b002      	add	sp, #8
 8012ea6:	4770      	bx	lr

08012ea8 <scalbn>:
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	ec55 4b10 	vmov	r4, r5, d0
 8012eae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	462b      	mov	r3, r5
 8012eb6:	b99a      	cbnz	r2, 8012ee0 <scalbn+0x38>
 8012eb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ebc:	4323      	orrs	r3, r4
 8012ebe:	d036      	beq.n	8012f2e <scalbn+0x86>
 8012ec0:	4b39      	ldr	r3, [pc, #228]	; (8012fa8 <scalbn+0x100>)
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	ee10 0a10 	vmov	r0, s0
 8012ec8:	2200      	movs	r2, #0
 8012eca:	f7f1 fb77 	bl	80045bc <__aeabi_dmul>
 8012ece:	4b37      	ldr	r3, [pc, #220]	; (8012fac <scalbn+0x104>)
 8012ed0:	429e      	cmp	r6, r3
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	460d      	mov	r5, r1
 8012ed6:	da10      	bge.n	8012efa <scalbn+0x52>
 8012ed8:	a32b      	add	r3, pc, #172	; (adr r3, 8012f88 <scalbn+0xe0>)
 8012eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ede:	e03a      	b.n	8012f56 <scalbn+0xae>
 8012ee0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012ee4:	428a      	cmp	r2, r1
 8012ee6:	d10c      	bne.n	8012f02 <scalbn+0x5a>
 8012ee8:	ee10 2a10 	vmov	r2, s0
 8012eec:	4620      	mov	r0, r4
 8012eee:	4629      	mov	r1, r5
 8012ef0:	f7f1 f9ae 	bl	8004250 <__adddf3>
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	460d      	mov	r5, r1
 8012ef8:	e019      	b.n	8012f2e <scalbn+0x86>
 8012efa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012efe:	460b      	mov	r3, r1
 8012f00:	3a36      	subs	r2, #54	; 0x36
 8012f02:	4432      	add	r2, r6
 8012f04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012f08:	428a      	cmp	r2, r1
 8012f0a:	dd08      	ble.n	8012f1e <scalbn+0x76>
 8012f0c:	2d00      	cmp	r5, #0
 8012f0e:	a120      	add	r1, pc, #128	; (adr r1, 8012f90 <scalbn+0xe8>)
 8012f10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f14:	da1c      	bge.n	8012f50 <scalbn+0xa8>
 8012f16:	a120      	add	r1, pc, #128	; (adr r1, 8012f98 <scalbn+0xf0>)
 8012f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f1c:	e018      	b.n	8012f50 <scalbn+0xa8>
 8012f1e:	2a00      	cmp	r2, #0
 8012f20:	dd08      	ble.n	8012f34 <scalbn+0x8c>
 8012f22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f2e:	ec45 4b10 	vmov	d0, r4, r5
 8012f32:	bd70      	pop	{r4, r5, r6, pc}
 8012f34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012f38:	da19      	bge.n	8012f6e <scalbn+0xc6>
 8012f3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012f3e:	429e      	cmp	r6, r3
 8012f40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012f44:	dd0a      	ble.n	8012f5c <scalbn+0xb4>
 8012f46:	a112      	add	r1, pc, #72	; (adr r1, 8012f90 <scalbn+0xe8>)
 8012f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1e2      	bne.n	8012f16 <scalbn+0x6e>
 8012f50:	a30f      	add	r3, pc, #60	; (adr r3, 8012f90 <scalbn+0xe8>)
 8012f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f56:	f7f1 fb31 	bl	80045bc <__aeabi_dmul>
 8012f5a:	e7cb      	b.n	8012ef4 <scalbn+0x4c>
 8012f5c:	a10a      	add	r1, pc, #40	; (adr r1, 8012f88 <scalbn+0xe0>)
 8012f5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d0b8      	beq.n	8012ed8 <scalbn+0x30>
 8012f66:	a10e      	add	r1, pc, #56	; (adr r1, 8012fa0 <scalbn+0xf8>)
 8012f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012f6c:	e7b4      	b.n	8012ed8 <scalbn+0x30>
 8012f6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f72:	3236      	adds	r2, #54	; 0x36
 8012f74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	4b0c      	ldr	r3, [pc, #48]	; (8012fb0 <scalbn+0x108>)
 8012f80:	2200      	movs	r2, #0
 8012f82:	e7e8      	b.n	8012f56 <scalbn+0xae>
 8012f84:	f3af 8000 	nop.w
 8012f88:	c2f8f359 	.word	0xc2f8f359
 8012f8c:	01a56e1f 	.word	0x01a56e1f
 8012f90:	8800759c 	.word	0x8800759c
 8012f94:	7e37e43c 	.word	0x7e37e43c
 8012f98:	8800759c 	.word	0x8800759c
 8012f9c:	fe37e43c 	.word	0xfe37e43c
 8012fa0:	c2f8f359 	.word	0xc2f8f359
 8012fa4:	81a56e1f 	.word	0x81a56e1f
 8012fa8:	43500000 	.word	0x43500000
 8012fac:	ffff3cb0 	.word	0xffff3cb0
 8012fb0:	3c900000 	.word	0x3c900000

08012fb4 <_init>:
 8012fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb6:	bf00      	nop
 8012fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fba:	bc08      	pop	{r3}
 8012fbc:	469e      	mov	lr, r3
 8012fbe:	4770      	bx	lr

08012fc0 <_fini>:
 8012fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc2:	bf00      	nop
 8012fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012fc6:	bc08      	pop	{r3}
 8012fc8:	469e      	mov	lr, r3
 8012fca:	4770      	bx	lr
