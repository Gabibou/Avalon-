
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddb0  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08011f90  08011f90  00011f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012108  08012108  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08012108  08012108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012110  08012110  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012110  08012110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012114  08012114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012118  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b90  20000078  08012190  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c08  08012190  00023c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028ba4  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005655  00000000  00000000  00048d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  0004e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182d  00000000  00000000  000502c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e828  00000000  00000000  00051aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002aa07  00000000  00000000  00080315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001209e6  00000000  00000000  000aad1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ad4  00000000  00000000  001cb704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001d41d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  001d424e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	08011f78 	.word	0x08011f78

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	08011f78 	.word	0x08011f78

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <__aeabi_drsub>:
 8004234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004238:	e002      	b.n	8004240 <__adddf3>
 800423a:	bf00      	nop

0800423c <__aeabi_dsub>:
 800423c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004240 <__adddf3>:
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800424a:	ea94 0f05 	teq	r4, r5
 800424e:	bf08      	it	eq
 8004250:	ea90 0f02 	teqeq	r0, r2
 8004254:	bf1f      	itttt	ne
 8004256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800425a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800425e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004266:	f000 80e2 	beq.w	800442e <__adddf3+0x1ee>
 800426a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800426e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004272:	bfb8      	it	lt
 8004274:	426d      	neglt	r5, r5
 8004276:	dd0c      	ble.n	8004292 <__adddf3+0x52>
 8004278:	442c      	add	r4, r5
 800427a:	ea80 0202 	eor.w	r2, r0, r2
 800427e:	ea81 0303 	eor.w	r3, r1, r3
 8004282:	ea82 0000 	eor.w	r0, r2, r0
 8004286:	ea83 0101 	eor.w	r1, r3, r1
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	2d36      	cmp	r5, #54	; 0x36
 8004294:	bf88      	it	hi
 8004296:	bd30      	pophi	{r4, r5, pc}
 8004298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800429c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042a8:	d002      	beq.n	80042b0 <__adddf3+0x70>
 80042aa:	4240      	negs	r0, r0
 80042ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042bc:	d002      	beq.n	80042c4 <__adddf3+0x84>
 80042be:	4252      	negs	r2, r2
 80042c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042c4:	ea94 0f05 	teq	r4, r5
 80042c8:	f000 80a7 	beq.w	800441a <__adddf3+0x1da>
 80042cc:	f1a4 0401 	sub.w	r4, r4, #1
 80042d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042d4:	db0d      	blt.n	80042f2 <__adddf3+0xb2>
 80042d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042da:	fa22 f205 	lsr.w	r2, r2, r5
 80042de:	1880      	adds	r0, r0, r2
 80042e0:	f141 0100 	adc.w	r1, r1, #0
 80042e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042e8:	1880      	adds	r0, r0, r2
 80042ea:	fa43 f305 	asr.w	r3, r3, r5
 80042ee:	4159      	adcs	r1, r3
 80042f0:	e00e      	b.n	8004310 <__adddf3+0xd0>
 80042f2:	f1a5 0520 	sub.w	r5, r5, #32
 80042f6:	f10e 0e20 	add.w	lr, lr, #32
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004300:	bf28      	it	cs
 8004302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004306:	fa43 f305 	asr.w	r3, r3, r5
 800430a:	18c0      	adds	r0, r0, r3
 800430c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004314:	d507      	bpl.n	8004326 <__adddf3+0xe6>
 8004316:	f04f 0e00 	mov.w	lr, #0
 800431a:	f1dc 0c00 	rsbs	ip, ip, #0
 800431e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004322:	eb6e 0101 	sbc.w	r1, lr, r1
 8004326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800432a:	d31b      	bcc.n	8004364 <__adddf3+0x124>
 800432c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004330:	d30c      	bcc.n	800434c <__adddf3+0x10c>
 8004332:	0849      	lsrs	r1, r1, #1
 8004334:	ea5f 0030 	movs.w	r0, r0, rrx
 8004338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800433c:	f104 0401 	add.w	r4, r4, #1
 8004340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004348:	f080 809a 	bcs.w	8004480 <__adddf3+0x240>
 800434c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004350:	bf08      	it	eq
 8004352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004356:	f150 0000 	adcs.w	r0, r0, #0
 800435a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800435e:	ea41 0105 	orr.w	r1, r1, r5
 8004362:	bd30      	pop	{r4, r5, pc}
 8004364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004368:	4140      	adcs	r0, r0
 800436a:	eb41 0101 	adc.w	r1, r1, r1
 800436e:	3c01      	subs	r4, #1
 8004370:	bf28      	it	cs
 8004372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004376:	d2e9      	bcs.n	800434c <__adddf3+0x10c>
 8004378:	f091 0f00 	teq	r1, #0
 800437c:	bf04      	itt	eq
 800437e:	4601      	moveq	r1, r0
 8004380:	2000      	moveq	r0, #0
 8004382:	fab1 f381 	clz	r3, r1
 8004386:	bf08      	it	eq
 8004388:	3320      	addeq	r3, #32
 800438a:	f1a3 030b 	sub.w	r3, r3, #11
 800438e:	f1b3 0220 	subs.w	r2, r3, #32
 8004392:	da0c      	bge.n	80043ae <__adddf3+0x16e>
 8004394:	320c      	adds	r2, #12
 8004396:	dd08      	ble.n	80043aa <__adddf3+0x16a>
 8004398:	f102 0c14 	add.w	ip, r2, #20
 800439c:	f1c2 020c 	rsb	r2, r2, #12
 80043a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043a4:	fa21 f102 	lsr.w	r1, r1, r2
 80043a8:	e00c      	b.n	80043c4 <__adddf3+0x184>
 80043aa:	f102 0214 	add.w	r2, r2, #20
 80043ae:	bfd8      	it	le
 80043b0:	f1c2 0c20 	rsble	ip, r2, #32
 80043b4:	fa01 f102 	lsl.w	r1, r1, r2
 80043b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043bc:	bfdc      	itt	le
 80043be:	ea41 010c 	orrle.w	r1, r1, ip
 80043c2:	4090      	lslle	r0, r2
 80043c4:	1ae4      	subs	r4, r4, r3
 80043c6:	bfa2      	ittt	ge
 80043c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043cc:	4329      	orrge	r1, r5
 80043ce:	bd30      	popge	{r4, r5, pc}
 80043d0:	ea6f 0404 	mvn.w	r4, r4
 80043d4:	3c1f      	subs	r4, #31
 80043d6:	da1c      	bge.n	8004412 <__adddf3+0x1d2>
 80043d8:	340c      	adds	r4, #12
 80043da:	dc0e      	bgt.n	80043fa <__adddf3+0x1ba>
 80043dc:	f104 0414 	add.w	r4, r4, #20
 80043e0:	f1c4 0220 	rsb	r2, r4, #32
 80043e4:	fa20 f004 	lsr.w	r0, r0, r4
 80043e8:	fa01 f302 	lsl.w	r3, r1, r2
 80043ec:	ea40 0003 	orr.w	r0, r0, r3
 80043f0:	fa21 f304 	lsr.w	r3, r1, r4
 80043f4:	ea45 0103 	orr.w	r1, r5, r3
 80043f8:	bd30      	pop	{r4, r5, pc}
 80043fa:	f1c4 040c 	rsb	r4, r4, #12
 80043fe:	f1c4 0220 	rsb	r2, r4, #32
 8004402:	fa20 f002 	lsr.w	r0, r0, r2
 8004406:	fa01 f304 	lsl.w	r3, r1, r4
 800440a:	ea40 0003 	orr.w	r0, r0, r3
 800440e:	4629      	mov	r1, r5
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	fa21 f004 	lsr.w	r0, r1, r4
 8004416:	4629      	mov	r1, r5
 8004418:	bd30      	pop	{r4, r5, pc}
 800441a:	f094 0f00 	teq	r4, #0
 800441e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004422:	bf06      	itte	eq
 8004424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004428:	3401      	addeq	r4, #1
 800442a:	3d01      	subne	r5, #1
 800442c:	e74e      	b.n	80042cc <__adddf3+0x8c>
 800442e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004432:	bf18      	it	ne
 8004434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004438:	d029      	beq.n	800448e <__adddf3+0x24e>
 800443a:	ea94 0f05 	teq	r4, r5
 800443e:	bf08      	it	eq
 8004440:	ea90 0f02 	teqeq	r0, r2
 8004444:	d005      	beq.n	8004452 <__adddf3+0x212>
 8004446:	ea54 0c00 	orrs.w	ip, r4, r0
 800444a:	bf04      	itt	eq
 800444c:	4619      	moveq	r1, r3
 800444e:	4610      	moveq	r0, r2
 8004450:	bd30      	pop	{r4, r5, pc}
 8004452:	ea91 0f03 	teq	r1, r3
 8004456:	bf1e      	ittt	ne
 8004458:	2100      	movne	r1, #0
 800445a:	2000      	movne	r0, #0
 800445c:	bd30      	popne	{r4, r5, pc}
 800445e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004462:	d105      	bne.n	8004470 <__adddf3+0x230>
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	4149      	adcs	r1, r1
 8004468:	bf28      	it	cs
 800446a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004474:	bf3c      	itt	cc
 8004476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800447a:	bd30      	popcc	{r4, r5, pc}
 800447c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004492:	bf1a      	itte	ne
 8004494:	4619      	movne	r1, r3
 8004496:	4610      	movne	r0, r2
 8004498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800449c:	bf1c      	itt	ne
 800449e:	460b      	movne	r3, r1
 80044a0:	4602      	movne	r2, r0
 80044a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044a6:	bf06      	itte	eq
 80044a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044ac:	ea91 0f03 	teqeq	r1, r3
 80044b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044b4:	bd30      	pop	{r4, r5, pc}
 80044b6:	bf00      	nop

080044b8 <__aeabi_ui2d>:
 80044b8:	f090 0f00 	teq	r0, #0
 80044bc:	bf04      	itt	eq
 80044be:	2100      	moveq	r1, #0
 80044c0:	4770      	bxeq	lr
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	e750      	b.n	8004378 <__adddf3+0x138>
 80044d6:	bf00      	nop

080044d8 <__aeabi_i2d>:
 80044d8:	f090 0f00 	teq	r0, #0
 80044dc:	bf04      	itt	eq
 80044de:	2100      	moveq	r1, #0
 80044e0:	4770      	bxeq	lr
 80044e2:	b530      	push	{r4, r5, lr}
 80044e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80044f0:	bf48      	it	mi
 80044f2:	4240      	negmi	r0, r0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	e73e      	b.n	8004378 <__adddf3+0x138>
 80044fa:	bf00      	nop

080044fc <__aeabi_f2d>:
 80044fc:	0042      	lsls	r2, r0, #1
 80044fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004502:	ea4f 0131 	mov.w	r1, r1, rrx
 8004506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800450a:	bf1f      	itttt	ne
 800450c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004518:	4770      	bxne	lr
 800451a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800451e:	bf08      	it	eq
 8004520:	4770      	bxeq	lr
 8004522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004526:	bf04      	itt	eq
 8004528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800453c:	e71c      	b.n	8004378 <__adddf3+0x138>
 800453e:	bf00      	nop

08004540 <__aeabi_ul2d>:
 8004540:	ea50 0201 	orrs.w	r2, r0, r1
 8004544:	bf08      	it	eq
 8004546:	4770      	bxeq	lr
 8004548:	b530      	push	{r4, r5, lr}
 800454a:	f04f 0500 	mov.w	r5, #0
 800454e:	e00a      	b.n	8004566 <__aeabi_l2d+0x16>

08004550 <__aeabi_l2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800455e:	d502      	bpl.n	8004566 <__aeabi_l2d+0x16>
 8004560:	4240      	negs	r0, r0
 8004562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800456a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800456e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004572:	f43f aed8 	beq.w	8004326 <__adddf3+0xe6>
 8004576:	f04f 0203 	mov.w	r2, #3
 800457a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800457e:	bf18      	it	ne
 8004580:	3203      	addne	r2, #3
 8004582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004586:	bf18      	it	ne
 8004588:	3203      	addne	r2, #3
 800458a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800458e:	f1c2 0320 	rsb	r3, r2, #32
 8004592:	fa00 fc03 	lsl.w	ip, r0, r3
 8004596:	fa20 f002 	lsr.w	r0, r0, r2
 800459a:	fa01 fe03 	lsl.w	lr, r1, r3
 800459e:	ea40 000e 	orr.w	r0, r0, lr
 80045a2:	fa21 f102 	lsr.w	r1, r1, r2
 80045a6:	4414      	add	r4, r2
 80045a8:	e6bd      	b.n	8004326 <__adddf3+0xe6>
 80045aa:	bf00      	nop

080045ac <__aeabi_dmul>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ba:	bf1d      	ittte	ne
 80045bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045c0:	ea94 0f0c 	teqne	r4, ip
 80045c4:	ea95 0f0c 	teqne	r5, ip
 80045c8:	f000 f8de 	bleq	8004788 <__aeabi_dmul+0x1dc>
 80045cc:	442c      	add	r4, r5
 80045ce:	ea81 0603 	eor.w	r6, r1, r3
 80045d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045de:	bf18      	it	ne
 80045e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ec:	d038      	beq.n	8004660 <__aeabi_dmul+0xb4>
 80045ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80045f2:	f04f 0500 	mov.w	r5, #0
 80045f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80045fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80045fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800460a:	f09c 0f00 	teq	ip, #0
 800460e:	bf18      	it	ne
 8004610:	f04e 0e01 	orrne.w	lr, lr, #1
 8004614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800461c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004620:	d204      	bcs.n	800462c <__aeabi_dmul+0x80>
 8004622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004626:	416d      	adcs	r5, r5
 8004628:	eb46 0606 	adc.w	r6, r6, r6
 800462c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800463c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004644:	bf88      	it	hi
 8004646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800464a:	d81e      	bhi.n	800468a <__aeabi_dmul+0xde>
 800464c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004650:	bf08      	it	eq
 8004652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004656:	f150 0000 	adcs.w	r0, r0, #0
 800465a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004664:	ea46 0101 	orr.w	r1, r6, r1
 8004668:	ea40 0002 	orr.w	r0, r0, r2
 800466c:	ea81 0103 	eor.w	r1, r1, r3
 8004670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004674:	bfc2      	ittt	gt
 8004676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800467a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800467e:	bd70      	popgt	{r4, r5, r6, pc}
 8004680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004684:	f04f 0e00 	mov.w	lr, #0
 8004688:	3c01      	subs	r4, #1
 800468a:	f300 80ab 	bgt.w	80047e4 <__aeabi_dmul+0x238>
 800468e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004692:	bfde      	ittt	le
 8004694:	2000      	movle	r0, #0
 8004696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800469a:	bd70      	pople	{r4, r5, r6, pc}
 800469c:	f1c4 0400 	rsb	r4, r4, #0
 80046a0:	3c20      	subs	r4, #32
 80046a2:	da35      	bge.n	8004710 <__aeabi_dmul+0x164>
 80046a4:	340c      	adds	r4, #12
 80046a6:	dc1b      	bgt.n	80046e0 <__aeabi_dmul+0x134>
 80046a8:	f104 0414 	add.w	r4, r4, #20
 80046ac:	f1c4 0520 	rsb	r5, r4, #32
 80046b0:	fa00 f305 	lsl.w	r3, r0, r5
 80046b4:	fa20 f004 	lsr.w	r0, r0, r4
 80046b8:	fa01 f205 	lsl.w	r2, r1, r5
 80046bc:	ea40 0002 	orr.w	r0, r0, r2
 80046c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046cc:	fa21 f604 	lsr.w	r6, r1, r4
 80046d0:	eb42 0106 	adc.w	r1, r2, r6
 80046d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046d8:	bf08      	it	eq
 80046da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f1c4 040c 	rsb	r4, r4, #12
 80046e4:	f1c4 0520 	rsb	r5, r4, #32
 80046e8:	fa00 f304 	lsl.w	r3, r0, r4
 80046ec:	fa20 f005 	lsr.w	r0, r0, r5
 80046f0:	fa01 f204 	lsl.w	r2, r1, r4
 80046f4:	ea40 0002 	orr.w	r0, r0, r2
 80046f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004700:	f141 0100 	adc.w	r1, r1, #0
 8004704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004708:	bf08      	it	eq
 800470a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f1c4 0520 	rsb	r5, r4, #32
 8004714:	fa00 f205 	lsl.w	r2, r0, r5
 8004718:	ea4e 0e02 	orr.w	lr, lr, r2
 800471c:	fa20 f304 	lsr.w	r3, r0, r4
 8004720:	fa01 f205 	lsl.w	r2, r1, r5
 8004724:	ea43 0302 	orr.w	r3, r3, r2
 8004728:	fa21 f004 	lsr.w	r0, r1, r4
 800472c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004730:	fa21 f204 	lsr.w	r2, r1, r4
 8004734:	ea20 0002 	bic.w	r0, r0, r2
 8004738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800473c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004740:	bf08      	it	eq
 8004742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f094 0f00 	teq	r4, #0
 800474c:	d10f      	bne.n	800476e <__aeabi_dmul+0x1c2>
 800474e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	eb41 0101 	adc.w	r1, r1, r1
 8004758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800475c:	bf08      	it	eq
 800475e:	3c01      	subeq	r4, #1
 8004760:	d0f7      	beq.n	8004752 <__aeabi_dmul+0x1a6>
 8004762:	ea41 0106 	orr.w	r1, r1, r6
 8004766:	f095 0f00 	teq	r5, #0
 800476a:	bf18      	it	ne
 800476c:	4770      	bxne	lr
 800476e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	eb43 0303 	adc.w	r3, r3, r3
 8004778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800477c:	bf08      	it	eq
 800477e:	3d01      	subeq	r5, #1
 8004780:	d0f7      	beq.n	8004772 <__aeabi_dmul+0x1c6>
 8004782:	ea43 0306 	orr.w	r3, r3, r6
 8004786:	4770      	bx	lr
 8004788:	ea94 0f0c 	teq	r4, ip
 800478c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004790:	bf18      	it	ne
 8004792:	ea95 0f0c 	teqne	r5, ip
 8004796:	d00c      	beq.n	80047b2 <__aeabi_dmul+0x206>
 8004798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800479c:	bf18      	it	ne
 800479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047a2:	d1d1      	bne.n	8004748 <__aeabi_dmul+0x19c>
 80047a4:	ea81 0103 	eor.w	r1, r1, r3
 80047a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047b6:	bf06      	itte	eq
 80047b8:	4610      	moveq	r0, r2
 80047ba:	4619      	moveq	r1, r3
 80047bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047c0:	d019      	beq.n	80047f6 <__aeabi_dmul+0x24a>
 80047c2:	ea94 0f0c 	teq	r4, ip
 80047c6:	d102      	bne.n	80047ce <__aeabi_dmul+0x222>
 80047c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047cc:	d113      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047ce:	ea95 0f0c 	teq	r5, ip
 80047d2:	d105      	bne.n	80047e0 <__aeabi_dmul+0x234>
 80047d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047d8:	bf1c      	itt	ne
 80047da:	4610      	movne	r0, r2
 80047dc:	4619      	movne	r1, r3
 80047de:	d10a      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80047fe:	bd70      	pop	{r4, r5, r6, pc}

08004800 <__aeabi_ddiv>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800480a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800480e:	bf1d      	ittte	ne
 8004810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004814:	ea94 0f0c 	teqne	r4, ip
 8004818:	ea95 0f0c 	teqne	r5, ip
 800481c:	f000 f8a7 	bleq	800496e <__aeabi_ddiv+0x16e>
 8004820:	eba4 0405 	sub.w	r4, r4, r5
 8004824:	ea81 0e03 	eor.w	lr, r1, r3
 8004828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800482c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004830:	f000 8088 	beq.w	8004944 <__aeabi_ddiv+0x144>
 8004834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800483c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800484c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004858:	429d      	cmp	r5, r3
 800485a:	bf08      	it	eq
 800485c:	4296      	cmpeq	r6, r2
 800485e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004866:	d202      	bcs.n	800486e <__aeabi_ddiv+0x6e>
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	ea4f 0232 	mov.w	r2, r2, rrx
 800486e:	1ab6      	subs	r6, r6, r2
 8004870:	eb65 0503 	sbc.w	r5, r5, r3
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	ea4f 0232 	mov.w	r2, r2, rrx
 800487a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800487e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004882:	ebb6 0e02 	subs.w	lr, r6, r2
 8004886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800488a:	bf22      	ittt	cs
 800488c:	1ab6      	subcs	r6, r6, r2
 800488e:	4675      	movcs	r5, lr
 8004890:	ea40 000c 	orrcs.w	r0, r0, ip
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	ea4f 0232 	mov.w	r2, r2, rrx
 800489a:	ebb6 0e02 	subs.w	lr, r6, r2
 800489e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048a2:	bf22      	ittt	cs
 80048a4:	1ab6      	subcs	r6, r6, r2
 80048a6:	4675      	movcs	r5, lr
 80048a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ba:	bf22      	ittt	cs
 80048bc:	1ab6      	subcs	r6, r6, r2
 80048be:	4675      	movcs	r5, lr
 80048c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048d2:	bf22      	ittt	cs
 80048d4:	1ab6      	subcs	r6, r6, r2
 80048d6:	4675      	movcs	r5, lr
 80048d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80048e0:	d018      	beq.n	8004914 <__aeabi_ddiv+0x114>
 80048e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80048f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80048f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80048fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80048fe:	d1c0      	bne.n	8004882 <__aeabi_ddiv+0x82>
 8004900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004904:	d10b      	bne.n	800491e <__aeabi_ddiv+0x11e>
 8004906:	ea41 0100 	orr.w	r1, r1, r0
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004912:	e7b6      	b.n	8004882 <__aeabi_ddiv+0x82>
 8004914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004918:	bf04      	itt	eq
 800491a:	4301      	orreq	r1, r0
 800491c:	2000      	moveq	r0, #0
 800491e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004922:	bf88      	it	hi
 8004924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004928:	f63f aeaf 	bhi.w	800468a <__aeabi_dmul+0xde>
 800492c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004930:	bf04      	itt	eq
 8004932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800493a:	f150 0000 	adcs.w	r0, r0, #0
 800493e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800494c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004950:	bfc2      	ittt	gt
 8004952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800495a:	bd70      	popgt	{r4, r5, r6, pc}
 800495c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004960:	f04f 0e00 	mov.w	lr, #0
 8004964:	3c01      	subs	r4, #1
 8004966:	e690      	b.n	800468a <__aeabi_dmul+0xde>
 8004968:	ea45 0e06 	orr.w	lr, r5, r6
 800496c:	e68d      	b.n	800468a <__aeabi_dmul+0xde>
 800496e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004972:	ea94 0f0c 	teq	r4, ip
 8004976:	bf08      	it	eq
 8004978:	ea95 0f0c 	teqeq	r5, ip
 800497c:	f43f af3b 	beq.w	80047f6 <__aeabi_dmul+0x24a>
 8004980:	ea94 0f0c 	teq	r4, ip
 8004984:	d10a      	bne.n	800499c <__aeabi_ddiv+0x19c>
 8004986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800498a:	f47f af34 	bne.w	80047f6 <__aeabi_dmul+0x24a>
 800498e:	ea95 0f0c 	teq	r5, ip
 8004992:	f47f af25 	bne.w	80047e0 <__aeabi_dmul+0x234>
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	e72c      	b.n	80047f6 <__aeabi_dmul+0x24a>
 800499c:	ea95 0f0c 	teq	r5, ip
 80049a0:	d106      	bne.n	80049b0 <__aeabi_ddiv+0x1b0>
 80049a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049a6:	f43f aefd 	beq.w	80047a4 <__aeabi_dmul+0x1f8>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e722      	b.n	80047f6 <__aeabi_dmul+0x24a>
 80049b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049b4:	bf18      	it	ne
 80049b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ba:	f47f aec5 	bne.w	8004748 <__aeabi_dmul+0x19c>
 80049be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049c2:	f47f af0d 	bne.w	80047e0 <__aeabi_dmul+0x234>
 80049c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049ca:	f47f aeeb 	bne.w	80047a4 <__aeabi_dmul+0x1f8>
 80049ce:	e712      	b.n	80047f6 <__aeabi_dmul+0x24a>

080049d0 <__gedf2>:
 80049d0:	f04f 3cff 	mov.w	ip, #4294967295
 80049d4:	e006      	b.n	80049e4 <__cmpdf2+0x4>
 80049d6:	bf00      	nop

080049d8 <__ledf2>:
 80049d8:	f04f 0c01 	mov.w	ip, #1
 80049dc:	e002      	b.n	80049e4 <__cmpdf2+0x4>
 80049de:	bf00      	nop

080049e0 <__cmpdf2>:
 80049e0:	f04f 0c01 	mov.w	ip, #1
 80049e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80049f4:	bf18      	it	ne
 80049f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80049fa:	d01b      	beq.n	8004a34 <__cmpdf2+0x54>
 80049fc:	b001      	add	sp, #4
 80049fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a02:	bf0c      	ite	eq
 8004a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a08:	ea91 0f03 	teqne	r1, r3
 8004a0c:	bf02      	ittt	eq
 8004a0e:	ea90 0f02 	teqeq	r0, r2
 8004a12:	2000      	moveq	r0, #0
 8004a14:	4770      	bxeq	lr
 8004a16:	f110 0f00 	cmn.w	r0, #0
 8004a1a:	ea91 0f03 	teq	r1, r3
 8004a1e:	bf58      	it	pl
 8004a20:	4299      	cmppl	r1, r3
 8004a22:	bf08      	it	eq
 8004a24:	4290      	cmpeq	r0, r2
 8004a26:	bf2c      	ite	cs
 8004a28:	17d8      	asrcs	r0, r3, #31
 8004a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a2e:	f040 0001 	orr.w	r0, r0, #1
 8004a32:	4770      	bx	lr
 8004a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a3c:	d102      	bne.n	8004a44 <__cmpdf2+0x64>
 8004a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a42:	d107      	bne.n	8004a54 <__cmpdf2+0x74>
 8004a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d1d6      	bne.n	80049fc <__cmpdf2+0x1c>
 8004a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a52:	d0d3      	beq.n	80049fc <__cmpdf2+0x1c>
 8004a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <__aeabi_cdrcmple>:
 8004a5c:	4684      	mov	ip, r0
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4662      	mov	r2, ip
 8004a62:	468c      	mov	ip, r1
 8004a64:	4619      	mov	r1, r3
 8004a66:	4663      	mov	r3, ip
 8004a68:	e000      	b.n	8004a6c <__aeabi_cdcmpeq>
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdcmpeq>:
 8004a6c:	b501      	push	{r0, lr}
 8004a6e:	f7ff ffb7 	bl	80049e0 <__cmpdf2>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	bf48      	it	mi
 8004a76:	f110 0f00 	cmnmi.w	r0, #0
 8004a7a:	bd01      	pop	{r0, pc}

08004a7c <__aeabi_dcmpeq>:
 8004a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a80:	f7ff fff4 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a84:	bf0c      	ite	eq
 8004a86:	2001      	moveq	r0, #1
 8004a88:	2000      	movne	r0, #0
 8004a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a8e:	bf00      	nop

08004a90 <__aeabi_dcmplt>:
 8004a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a94:	f7ff ffea 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a98:	bf34      	ite	cc
 8004a9a:	2001      	movcc	r0, #1
 8004a9c:	2000      	movcs	r0, #0
 8004a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aa2:	bf00      	nop

08004aa4 <__aeabi_dcmple>:
 8004aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa8:	f7ff ffe0 	bl	8004a6c <__aeabi_cdcmpeq>
 8004aac:	bf94      	ite	ls
 8004aae:	2001      	movls	r0, #1
 8004ab0:	2000      	movhi	r0, #0
 8004ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_dcmpge>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff ffce 	bl	8004a5c <__aeabi_cdrcmple>
 8004ac0:	bf94      	ite	ls
 8004ac2:	2001      	movls	r0, #1
 8004ac4:	2000      	movhi	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmpgt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffc4 	bl	8004a5c <__aeabi_cdrcmple>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmpun>:
 8004ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ae8:	d102      	bne.n	8004af0 <__aeabi_dcmpun+0x10>
 8004aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004aee:	d10a      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x20>
 8004afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004afe:	d102      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	f04f 0001 	mov.w	r0, #1
 8004b0a:	4770      	bx	lr

08004b0c <__aeabi_d2f>:
 8004b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b14:	bf24      	itt	cs
 8004b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b1e:	d90d      	bls.n	8004b3c <__aeabi_d2f+0x30>
 8004b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b34:	bf08      	it	eq
 8004b36:	f020 0001 	biceq.w	r0, r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b40:	d121      	bne.n	8004b86 <__aeabi_d2f+0x7a>
 8004b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b46:	bfbc      	itt	lt
 8004b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b4c:	4770      	bxlt	lr
 8004b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b56:	f1c2 0218 	rsb	r2, r2, #24
 8004b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b62:	fa20 f002 	lsr.w	r0, r0, r2
 8004b66:	bf18      	it	ne
 8004b68:	f040 0001 	orrne.w	r0, r0, #1
 8004b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b78:	ea40 000c 	orr.w	r0, r0, ip
 8004b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b84:	e7cc      	b.n	8004b20 <__aeabi_d2f+0x14>
 8004b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b8a:	d107      	bne.n	8004b9c <__aeabi_d2f+0x90>
 8004b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004b90:	bf1e      	ittt	ne
 8004b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004b9a:	4770      	bxne	lr
 8004b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <__aeabi_uldivmod>:
 8004bac:	b953      	cbnz	r3, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bae:	b94a      	cbnz	r2, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bf08      	it	eq
 8004bb4:	2800      	cmpeq	r0, #0
 8004bb6:	bf1c      	itt	ne
 8004bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bc0:	f000 b970 	b.w	8004ea4 <__aeabi_idiv0>
 8004bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bcc:	f000 f806 	bl	8004bdc <__udivmoddi4>
 8004bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr

08004bdc <__udivmoddi4>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	9e08      	ldr	r6, [sp, #32]
 8004be2:	460d      	mov	r5, r1
 8004be4:	4604      	mov	r4, r0
 8004be6:	460f      	mov	r7, r1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14a      	bne.n	8004c82 <__udivmoddi4+0xa6>
 8004bec:	428a      	cmp	r2, r1
 8004bee:	4694      	mov	ip, r2
 8004bf0:	d965      	bls.n	8004cbe <__udivmoddi4+0xe2>
 8004bf2:	fab2 f382 	clz	r3, r2
 8004bf6:	b143      	cbz	r3, 8004c0a <__udivmoddi4+0x2e>
 8004bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8004bfc:	f1c3 0220 	rsb	r2, r3, #32
 8004c00:	409f      	lsls	r7, r3
 8004c02:	fa20 f202 	lsr.w	r2, r0, r2
 8004c06:	4317      	orrs	r7, r2
 8004c08:	409c      	lsls	r4, r3
 8004c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004c0e:	fa1f f58c 	uxth.w	r5, ip
 8004c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8004c16:	0c22      	lsrs	r2, r4, #16
 8004c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8004c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c20:	fb01 f005 	mul.w	r0, r1, r5
 8004c24:	4290      	cmp	r0, r2
 8004c26:	d90a      	bls.n	8004c3e <__udivmoddi4+0x62>
 8004c28:	eb1c 0202 	adds.w	r2, ip, r2
 8004c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8004c30:	f080 811c 	bcs.w	8004e6c <__udivmoddi4+0x290>
 8004c34:	4290      	cmp	r0, r2
 8004c36:	f240 8119 	bls.w	8004e6c <__udivmoddi4+0x290>
 8004c3a:	3902      	subs	r1, #2
 8004c3c:	4462      	add	r2, ip
 8004c3e:	1a12      	subs	r2, r2, r0
 8004c40:	b2a4      	uxth	r4, r4
 8004c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8004c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8004c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c4e:	fb00 f505 	mul.w	r5, r0, r5
 8004c52:	42a5      	cmp	r5, r4
 8004c54:	d90a      	bls.n	8004c6c <__udivmoddi4+0x90>
 8004c56:	eb1c 0404 	adds.w	r4, ip, r4
 8004c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004c5e:	f080 8107 	bcs.w	8004e70 <__udivmoddi4+0x294>
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	f240 8104 	bls.w	8004e70 <__udivmoddi4+0x294>
 8004c68:	4464      	add	r4, ip
 8004c6a:	3802      	subs	r0, #2
 8004c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	2100      	movs	r1, #0
 8004c74:	b11e      	cbz	r6, 8004c7e <__udivmoddi4+0xa2>
 8004c76:	40dc      	lsrs	r4, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d908      	bls.n	8004c98 <__udivmoddi4+0xbc>
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	f000 80ed 	beq.w	8004e66 <__udivmoddi4+0x28a>
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8004c92:	4608      	mov	r0, r1
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	fab3 f183 	clz	r1, r3
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d149      	bne.n	8004d34 <__udivmoddi4+0x158>
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	d302      	bcc.n	8004caa <__udivmoddi4+0xce>
 8004ca4:	4282      	cmp	r2, r0
 8004ca6:	f200 80f8 	bhi.w	8004e9a <__udivmoddi4+0x2be>
 8004caa:	1a84      	subs	r4, r0, r2
 8004cac:	eb65 0203 	sbc.w	r2, r5, r3
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	4617      	mov	r7, r2
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d0e2      	beq.n	8004c7e <__udivmoddi4+0xa2>
 8004cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8004cbc:	e7df      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004cbe:	b902      	cbnz	r2, 8004cc2 <__udivmoddi4+0xe6>
 8004cc0:	deff      	udf	#255	; 0xff
 8004cc2:	fab2 f382 	clz	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8090 	bne.w	8004dec <__udivmoddi4+0x210>
 8004ccc:	1a8a      	subs	r2, r1, r2
 8004cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cd2:	fa1f fe8c 	uxth.w	lr, ip
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8004cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8004ce0:	0c22      	lsrs	r2, r4, #16
 8004ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ce6:	fb0e f005 	mul.w	r0, lr, r5
 8004cea:	4290      	cmp	r0, r2
 8004cec:	d908      	bls.n	8004d00 <__udivmoddi4+0x124>
 8004cee:	eb1c 0202 	adds.w	r2, ip, r2
 8004cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8004cf6:	d202      	bcs.n	8004cfe <__udivmoddi4+0x122>
 8004cf8:	4290      	cmp	r0, r2
 8004cfa:	f200 80cb 	bhi.w	8004e94 <__udivmoddi4+0x2b8>
 8004cfe:	4645      	mov	r5, r8
 8004d00:	1a12      	subs	r2, r2, r0
 8004d02:	b2a4      	uxth	r4, r4
 8004d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8004d08:	fb07 2210 	mls	r2, r7, r0, r2
 8004d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004d10:	fb0e fe00 	mul.w	lr, lr, r0
 8004d14:	45a6      	cmp	lr, r4
 8004d16:	d908      	bls.n	8004d2a <__udivmoddi4+0x14e>
 8004d18:	eb1c 0404 	adds.w	r4, ip, r4
 8004d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8004d20:	d202      	bcs.n	8004d28 <__udivmoddi4+0x14c>
 8004d22:	45a6      	cmp	lr, r4
 8004d24:	f200 80bb 	bhi.w	8004e9e <__udivmoddi4+0x2c2>
 8004d28:	4610      	mov	r0, r2
 8004d2a:	eba4 040e 	sub.w	r4, r4, lr
 8004d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004d32:	e79f      	b.n	8004c74 <__udivmoddi4+0x98>
 8004d34:	f1c1 0720 	rsb	r7, r1, #32
 8004d38:	408b      	lsls	r3, r1
 8004d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d42:	fa05 f401 	lsl.w	r4, r5, r1
 8004d46:	fa20 f307 	lsr.w	r3, r0, r7
 8004d4a:	40fd      	lsrs	r5, r7
 8004d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d50:	4323      	orrs	r3, r4
 8004d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8004d56:	fa1f fe8c 	uxth.w	lr, ip
 8004d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8004d5e:	0c1c      	lsrs	r4, r3, #16
 8004d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004d64:	fb08 f50e 	mul.w	r5, r8, lr
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8004d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8004d72:	d90b      	bls.n	8004d8c <__udivmoddi4+0x1b0>
 8004d74:	eb1c 0404 	adds.w	r4, ip, r4
 8004d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d7c:	f080 8088 	bcs.w	8004e90 <__udivmoddi4+0x2b4>
 8004d80:	42a5      	cmp	r5, r4
 8004d82:	f240 8085 	bls.w	8004e90 <__udivmoddi4+0x2b4>
 8004d86:	f1a8 0802 	sub.w	r8, r8, #2
 8004d8a:	4464      	add	r4, ip
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	b29d      	uxth	r5, r3
 8004d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8004d94:	fb09 4413 	mls	r4, r9, r3, r4
 8004d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8004da0:	45a6      	cmp	lr, r4
 8004da2:	d908      	bls.n	8004db6 <__udivmoddi4+0x1da>
 8004da4:	eb1c 0404 	adds.w	r4, ip, r4
 8004da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8004dac:	d26c      	bcs.n	8004e88 <__udivmoddi4+0x2ac>
 8004dae:	45a6      	cmp	lr, r4
 8004db0:	d96a      	bls.n	8004e88 <__udivmoddi4+0x2ac>
 8004db2:	3b02      	subs	r3, #2
 8004db4:	4464      	add	r4, ip
 8004db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dba:	fba3 9502 	umull	r9, r5, r3, r2
 8004dbe:	eba4 040e 	sub.w	r4, r4, lr
 8004dc2:	42ac      	cmp	r4, r5
 8004dc4:	46c8      	mov	r8, r9
 8004dc6:	46ae      	mov	lr, r5
 8004dc8:	d356      	bcc.n	8004e78 <__udivmoddi4+0x29c>
 8004dca:	d053      	beq.n	8004e74 <__udivmoddi4+0x298>
 8004dcc:	b156      	cbz	r6, 8004de4 <__udivmoddi4+0x208>
 8004dce:	ebb0 0208 	subs.w	r2, r0, r8
 8004dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8004dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8004dda:	40ca      	lsrs	r2, r1
 8004ddc:	40cc      	lsrs	r4, r1
 8004dde:	4317      	orrs	r7, r2
 8004de0:	e9c6 7400 	strd	r7, r4, [r6]
 8004de4:	4618      	mov	r0, r3
 8004de6:	2100      	movs	r1, #0
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	f1c3 0120 	rsb	r1, r3, #32
 8004df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8004df4:	fa20 f201 	lsr.w	r2, r0, r1
 8004df8:	fa25 f101 	lsr.w	r1, r5, r1
 8004dfc:	409d      	lsls	r5, r3
 8004dfe:	432a      	orrs	r2, r5
 8004e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e04:	fa1f fe8c 	uxth.w	lr, ip
 8004e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8004e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8004e10:	0c11      	lsrs	r1, r2, #16
 8004e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e16:	fb00 f50e 	mul.w	r5, r0, lr
 8004e1a:	428d      	cmp	r5, r1
 8004e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8004e20:	d908      	bls.n	8004e34 <__udivmoddi4+0x258>
 8004e22:	eb1c 0101 	adds.w	r1, ip, r1
 8004e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e2a:	d22f      	bcs.n	8004e8c <__udivmoddi4+0x2b0>
 8004e2c:	428d      	cmp	r5, r1
 8004e2e:	d92d      	bls.n	8004e8c <__udivmoddi4+0x2b0>
 8004e30:	3802      	subs	r0, #2
 8004e32:	4461      	add	r1, ip
 8004e34:	1b49      	subs	r1, r1, r5
 8004e36:	b292      	uxth	r2, r2
 8004e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8004e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8004e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e44:	fb05 f10e 	mul.w	r1, r5, lr
 8004e48:	4291      	cmp	r1, r2
 8004e4a:	d908      	bls.n	8004e5e <__udivmoddi4+0x282>
 8004e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8004e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8004e54:	d216      	bcs.n	8004e84 <__udivmoddi4+0x2a8>
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d914      	bls.n	8004e84 <__udivmoddi4+0x2a8>
 8004e5a:	3d02      	subs	r5, #2
 8004e5c:	4462      	add	r2, ip
 8004e5e:	1a52      	subs	r2, r2, r1
 8004e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004e64:	e738      	b.n	8004cd8 <__udivmoddi4+0xfc>
 8004e66:	4631      	mov	r1, r6
 8004e68:	4630      	mov	r0, r6
 8004e6a:	e708      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	e6e6      	b.n	8004c3e <__udivmoddi4+0x62>
 8004e70:	4610      	mov	r0, r2
 8004e72:	e6fb      	b.n	8004c6c <__udivmoddi4+0x90>
 8004e74:	4548      	cmp	r0, r9
 8004e76:	d2a9      	bcs.n	8004dcc <__udivmoddi4+0x1f0>
 8004e78:	ebb9 0802 	subs.w	r8, r9, r2
 8004e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004e80:	3b01      	subs	r3, #1
 8004e82:	e7a3      	b.n	8004dcc <__udivmoddi4+0x1f0>
 8004e84:	4645      	mov	r5, r8
 8004e86:	e7ea      	b.n	8004e5e <__udivmoddi4+0x282>
 8004e88:	462b      	mov	r3, r5
 8004e8a:	e794      	b.n	8004db6 <__udivmoddi4+0x1da>
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	e7d1      	b.n	8004e34 <__udivmoddi4+0x258>
 8004e90:	46d0      	mov	r8, sl
 8004e92:	e77b      	b.n	8004d8c <__udivmoddi4+0x1b0>
 8004e94:	3d02      	subs	r5, #2
 8004e96:	4462      	add	r2, ip
 8004e98:	e732      	b.n	8004d00 <__udivmoddi4+0x124>
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	e70a      	b.n	8004cb4 <__udivmoddi4+0xd8>
 8004e9e:	4464      	add	r4, ip
 8004ea0:	3802      	subs	r0, #2
 8004ea2:	e742      	b.n	8004d2a <__udivmoddi4+0x14e>

08004ea4 <__aeabi_idiv0>:
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eae:	463b      	mov	r3, r7
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00c f837 	bl	8010f28 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <MX_ADC2_Init+0x100>)
 8004ebe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ec0:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ec2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ec6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ece:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004eda:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f24:	481f      	ldr	r0, [pc, #124]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f26:	f003 f8e7 	bl	80080f8 <HAL_ADC_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f30:	f001 fef4 	bl	8006d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MX_ADC2_Init+0x104>)
 8004f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f38:	2306      	movs	r3, #6
 8004f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <MX_ADC2_Init+0x108>)
 8004f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f44:	2304      	movs	r3, #4
 8004f46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4814      	ldr	r0, [pc, #80]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f52:	f003 fb85 	bl	8008660 <HAL_ADC_ConfigChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f5c:	f001 fede 	bl	8006d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <MX_ADC2_Init+0x10c>)
 8004f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f64:	230c      	movs	r3, #12
 8004f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f68:	463b      	mov	r3, r7
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f6e:	f003 fb77 	bl	8008660 <HAL_ADC_ConfigChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f78:	f001 fed0 	bl	8006d1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <MX_ADC2_Init+0x110>)
 8004f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f80:	2312      	movs	r3, #18
 8004f82:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f84:	237f      	movs	r3, #127	; 0x7f
 8004f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f8e:	f003 fb67 	bl	8008660 <HAL_ADC_ConfigChannel>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004f98:	f001 fec0 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000094 	.word	0x20000094
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	04300002 	.word	0x04300002
 8004fb0:	407f0000 	.word	0x407f0000
 8004fb4:	19200040 	.word	0x19200040
 8004fb8:	2a000400 	.word	0x2a000400

08004fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0a0      	sub	sp, #128	; 0x80
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fd4:	f107 0318 	add.w	r3, r7, #24
 8004fd8:	2254      	movs	r2, #84	; 0x54
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f00b ffa3 	bl	8010f28 <memset>
  if(adcHandle->Instance==ADC2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	; (8005118 <HAL_ADC_MspInit+0x15c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8090 	bne.w	800510e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f006 fa52 	bl	800b4a8 <HAL_RCCEx_PeriphCLKConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800500a:	f001 fe87 	bl	8006d1c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_ADC_MspInit+0x160>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005026:	4b3d      	ldr	r3, [pc, #244]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_ADC_MspInit+0x160>)
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b3a      	ldr	r3, [pc, #232]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800506e:	2302      	movs	r3, #2
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005072:	2303      	movs	r3, #3
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	2300      	movs	r3, #0
 8005078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800507a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800507e:	4619      	mov	r1, r3
 8005080:	4827      	ldr	r0, [pc, #156]	; (8005120 <HAL_ADC_MspInit+0x164>)
 8005082:	f004 fc35 	bl	80098f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005086:	2303      	movs	r3, #3
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4822      	ldr	r0, [pc, #136]	; (8005124 <HAL_ADC_MspInit+0x168>)
 800509a:	f004 fc29 	bl	80098f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f004 fc1c 	bl	80098f0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_ADC_MspInit+0x170>)
 80050bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050f4:	f004 f8ca 	bl	800928c <HAL_DMA_Init>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80050fe:	f001 fe0d 	bl	8006d1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800510e:	bf00      	nop
 8005110:	3780      	adds	r7, #128	; 0x80
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	50000100 	.word	0x50000100
 800511c:	40021000 	.word	0x40021000
 8005120:	48001400 	.word	0x48001400
 8005124:	48000800 	.word	0x48000800
 8005128:	20000100 	.word	0x20000100
 800512c:	40020008 	.word	0x40020008

08005130 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f9c9 	bl	80044d8 <__aeabi_i2d>
 8005146:	a30f      	add	r3, pc, #60	; (adr r3, 8005184 <Battery_ReadBatteryVoltage+0x54>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7ff fa2e 	bl	80045ac <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <Battery_ReadBatteryVoltage+0x50>)
 800515e:	f7ff fb4f 	bl	8004800 <__aeabi_ddiv>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	f7ff fccf 	bl	8004b0c <__aeabi_d2f>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	f3af 8000 	nop.w
 8005180:	40b00000 	.word	0x40b00000
 8005184:	66666666 	.word	0x66666666
 8005188:	400a6666 	.word	0x400a6666
 800518c:	00000000 	.word	0x00000000

08005190 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	3302      	adds	r3, #2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f999 	bl	80044d8 <__aeabi_i2d>
 80051a6:	a319      	add	r3, pc, #100	; (adr r3, 800520c <Battery_ReadCurrent3V3+0x7c>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7ff f9fe 	bl	80045ac <__aeabi_dmul>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <Battery_ReadCurrent3V3+0x78>)
 80051be:	f7ff fb1f 	bl	8004800 <__aeabi_ddiv>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7ff fc9f 	bl	8004b0c <__aeabi_d2f>
 80051ce:	4603      	mov	r3, r0
 80051d0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff f992 	bl	80044fc <__aeabi_f2d>
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <Battery_ReadCurrent3V3+0x70>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7ff fb0f 	bl	8004800 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7ff fc8f 	bl	8004b0c <__aeabi_d2f>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	f3af 8000 	nop.w
 8005200:	d2f1a9fc 	.word	0xd2f1a9fc
 8005204:	3f60624d 	.word	0x3f60624d
 8005208:	40b00000 	.word	0x40b00000
 800520c:	66666666 	.word	0x66666666
 8005210:	400a6666 	.word	0x400a6666
 8005214:	00000000 	.word	0x00000000

08005218 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff f956 	bl	80044d8 <__aeabi_i2d>
 800522c:	a319      	add	r3, pc, #100	; (adr r3, 8005294 <Battery_ReadCurrent5V+0x7c>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7ff f9bb 	bl	80045ac <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <Battery_ReadCurrent5V+0x78>)
 8005244:	f7ff fadc 	bl	8004800 <__aeabi_ddiv>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f7ff fc5c 	bl	8004b0c <__aeabi_d2f>
 8005254:	4603      	mov	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff f94f 	bl	80044fc <__aeabi_f2d>
 800525e:	a30a      	add	r3, pc, #40	; (adr r3, 8005288 <Battery_ReadCurrent5V+0x70>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7ff facc 	bl	8004800 <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff fc4c 	bl	8004b0c <__aeabi_d2f>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	f3af 8000 	nop.w
 8005288:	d2f1a9fc 	.word	0xd2f1a9fc
 800528c:	3f60624d 	.word	0x3f60624d
 8005290:	40b00000 	.word	0x40b00000
 8005294:	66666666 	.word	0x66666666
 8005298:	400a6666 	.word	0x400a6666
 800529c:	00000000 	.word	0x00000000

080052a0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff f91d 	bl	80044fc <__aeabi_f2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	a10f      	add	r1, pc, #60	; (adr r1, 8005304 <Battery_RemaningTime+0x64>)
 80052c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052cc:	f7ff fa98 	bl	8004800 <__aeabi_ddiv>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7ff fc18 	bl	8004b0c <__aeabi_d2f>
 80052dc:	4603      	mov	r3, r0
 80052de:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80052e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005300 <Battery_RemaningTime+0x60>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 2a90 	vmov	r2, s15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	4a5bba00 	.word	0x4a5bba00
 8005304:	9999999a 	.word	0x9999999a
 8005308:	40019999 	.word	0x40019999

0800530c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b0b4      	sub	sp, #208	; 0xd0
 8005310:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8005312:	4b63      	ldr	r3, [pc, #396]	; (80054a0 <MX_FREERTOS_Init+0x194>)
 8005314:	9306      	str	r3, [sp, #24]
 8005316:	2302      	movs	r3, #2
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	2301      	movs	r3, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	2304      	movs	r3, #4
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	4b60      	ldr	r3, [pc, #384]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 8005332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005336:	485c      	ldr	r0, [pc, #368]	; (80054a8 <MX_FREERTOS_Init+0x19c>)
 8005338:	f001 ff84 	bl	8007244 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800533c:	495b      	ldr	r1, [pc, #364]	; (80054ac <MX_FREERTOS_Init+0x1a0>)
 800533e:	485c      	ldr	r0, [pc, #368]	; (80054b0 <MX_FREERTOS_Init+0x1a4>)
 8005340:	f000 fdfd 	bl	8005f3e <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800534a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800534e:	4618      	mov	r0, r3
 8005350:	f009 fd10 	bl	800ed74 <osMutexCreate>
 8005354:	4603      	mov	r3, r0
 8005356:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <MX_FREERTOS_Init+0x1a8>)
 8005358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800535a:	2300      	movs	r3, #0
 800535c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f009 fd10 	bl	800ed8c <osSemaphoreCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a52      	ldr	r2, [pc, #328]	; (80054b8 <MX_FREERTOS_Init+0x1ac>)
 8005370:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005378:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f009 fd04 	bl	800ed8c <osSemaphoreCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	4a4d      	ldr	r2, [pc, #308]	; (80054bc <MX_FREERTOS_Init+0x1b0>)
 8005388:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800538a:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <MX_FREERTOS_Init+0x1b4>)
 800538c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8005390:	461d      	mov	r5, r3
 8005392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800539a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f009 fcac 	bl	800ecfe <osThreadCreate>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a46      	ldr	r2, [pc, #280]	; (80054c4 <MX_FREERTOS_Init+0x1b8>)
 80053aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053ac:	4b46      	ldr	r3, [pc, #280]	; (80054c8 <MX_FREERTOS_Init+0x1bc>)
 80053ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80053b2:	461d      	mov	r5, r3
 80053b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f009 fc9b 	bl	800ecfe <osThreadCreate>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4a40      	ldr	r2, [pc, #256]	; (80054cc <MX_FREERTOS_Init+0x1c0>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <MX_FREERTOS_Init+0x1c4>)
 80053d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80053d4:	461d      	mov	r5, r3
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f009 fc8a 	bl	800ecfe <osThreadCreate>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <MX_FREERTOS_Init+0x1c8>)
 80053ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 80053f0:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <MX_FREERTOS_Init+0x1cc>)
 80053f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80053f6:	461d      	mov	r5, r3
 80053f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f009 fc79 	bl	800ecfe <osThreadCreate>
 800540c:	4603      	mov	r3, r0
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <MX_FREERTOS_Init+0x1d0>)
 8005410:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8005412:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <MX_FREERTOS_Init+0x1d4>)
 8005414:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8005418:	461d      	mov	r5, r3
 800541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8005422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f009 fc68 	bl	800ecfe <osThreadCreate>
 800542e:	4603      	mov	r3, r0
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <MX_FREERTOS_Init+0x1d8>)
 8005432:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8005434:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <MX_FREERTOS_Init+0x1dc>)
 8005436:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800543a:	461d      	mov	r5, r3
 800543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8005444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f009 fc57 	bl	800ecfe <osThreadCreate>
 8005450:	4603      	mov	r3, r0
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <MX_FREERTOS_Init+0x1e0>)
 8005454:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <MX_FREERTOS_Init+0x1e4>)
 8005458:	f107 0418 	add.w	r4, r7, #24
 800545c:	461d      	mov	r5, r3
 800545e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8005466:	f107 0318 	add.w	r3, r7, #24
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f009 fc46 	bl	800ecfe <osThreadCreate>
 8005472:	4603      	mov	r3, r0
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <MX_FREERTOS_Init+0x1e8>)
 8005476:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005478:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <MX_FREERTOS_Init+0x1ec>)
 800547a:	1d3c      	adds	r4, r7, #4
 800547c:	461d      	mov	r5, r3
 800547e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f009 fc37 	bl	800ecfe <osThreadCreate>
 8005490:	4603      	mov	r3, r0
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <MX_FREERTOS_Init+0x1f0>)
 8005494:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005496:	bf00      	nop
 8005498:	37b0      	adds	r7, #176	; 0xb0
 800549a:	46bd      	mov	sp, r7
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000804 	.word	0x20000804
 80054a4:	48000400 	.word	0x48000400
 80054a8:	200002bc 	.word	0x200002bc
 80054ac:	20000244 	.word	0x20000244
 80054b0:	200001f8 	.word	0x200001f8
 80054b4:	200001ec 	.word	0x200001ec
 80054b8:	200001f0 	.word	0x200001f0
 80054bc:	200001f4 	.word	0x200001f4
 80054c0:	08011f98 	.word	0x08011f98
 80054c4:	200001cc 	.word	0x200001cc
 80054c8:	08011fb8 	.word	0x08011fb8
 80054cc:	200001d0 	.word	0x200001d0
 80054d0:	08011fd8 	.word	0x08011fd8
 80054d4:	200001d4 	.word	0x200001d4
 80054d8:	08011ff4 	.word	0x08011ff4
 80054dc:	200001d8 	.word	0x200001d8
 80054e0:	08012018 	.word	0x08012018
 80054e4:	200001dc 	.word	0x200001dc
 80054e8:	08012030 	.word	0x08012030
 80054ec:	200001e0 	.word	0x200001e0
 80054f0:	08012050 	.word	0x08012050
 80054f4:	200001e4 	.word	0x200001e4
 80054f8:	08012074 	.word	0x08012074
 80054fc:	200001e8 	.word	0x200001e8

08005500 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800550c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005510:	f004 fb88 	bl	8009c24 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005514:	f241 3088 	movw	r0, #5000	; 0x1388
 8005518:	f00a faa2 	bl	800fa60 <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800551c:	e7f4      	b.n	8005508 <StartLedTask+0x8>
	...

08005520 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005528:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005570 <StartRoll_PID+0x50>
 800552c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005574 <StartRoll_PID+0x54>
 8005530:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005578 <StartRoll_PID+0x58>
 8005534:	4811      	ldr	r0, [pc, #68]	; (800557c <StartRoll_PID+0x5c>)
 8005536:	f001 fc41 	bl	8006dbc <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <StartRoll_PID+0x60>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2119      	movs	r1, #25
 8005540:	4618      	mov	r0, r3
 8005542:	f009 ff4b 	bl	800f3dc <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005546:	490f      	ldr	r1, [pc, #60]	; (8005584 <StartRoll_PID+0x64>)
 8005548:	480f      	ldr	r0, [pc, #60]	; (8005588 <StartRoll_PID+0x68>)
 800554a:	f000 fd53 	bl	8005ff4 <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <StartRoll_PID+0x60>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	2200      	movs	r2, #0
 8005556:	2100      	movs	r1, #0
 8005558:	f009 fdcc 	bl	800f0f4 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <StartRoll_PID+0x6c>)
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <StartRoll_PID+0x64>)
 8005560:	490b      	ldr	r1, [pc, #44]	; (8005590 <StartRoll_PID+0x70>)
 8005562:	4806      	ldr	r0, [pc, #24]	; (800557c <StartRoll_PID+0x5c>)
 8005564:	f001 fc88 	bl	8006e78 <Pid_CompensateRoll>


		vTaskDelay(150);
 8005568:	2096      	movs	r0, #150	; 0x96
 800556a:	f00a fa79 	bl	800fa60 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800556e:	e7e4      	b.n	800553a <StartRoll_PID+0x1a>
 8005570:	bdb15662 	.word	0xbdb15662
 8005574:	bce59984 	.word	0xbce59984
 8005578:	be07bf5a 	.word	0xbe07bf5a
 800557c:	200001a8 	.word	0x200001a8
 8005580:	200001ec 	.word	0x200001ec
 8005584:	20000244 	.word	0x20000244
 8005588:	200001f8 	.word	0x200001f8
 800558c:	200002bc 	.word	0x200002bc
 8005590:	200002a8 	.word	0x200002a8

08005594 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 800559c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80055e4 <StartPitch_PID+0x50>
 80055a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80055e8 <StartPitch_PID+0x54>
 80055a8:	4810      	ldr	r0, [pc, #64]	; (80055ec <StartPitch_PID+0x58>)
 80055aa:	f001 fc07 	bl	8006dbc <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <StartPitch_PID+0x5c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2119      	movs	r1, #25
 80055b4:	4618      	mov	r0, r3
 80055b6:	f009 ff11 	bl	800f3dc <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055ba:	490e      	ldr	r1, [pc, #56]	; (80055f4 <StartPitch_PID+0x60>)
 80055bc:	480e      	ldr	r0, [pc, #56]	; (80055f8 <StartPitch_PID+0x64>)
 80055be:	f000 fd6b 	bl	8006098 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <StartPitch_PID+0x5c>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	2200      	movs	r2, #0
 80055ca:	2100      	movs	r1, #0
 80055cc:	f009 fd92 	bl	800f0f4 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <StartPitch_PID+0x68>)
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <StartPitch_PID+0x60>)
 80055d4:	490a      	ldr	r1, [pc, #40]	; (8005600 <StartPitch_PID+0x6c>)
 80055d6:	4805      	ldr	r0, [pc, #20]	; (80055ec <StartPitch_PID+0x58>)
 80055d8:	f001 fd14 	bl	8007004 <Pid_CompensatePitch>

		vTaskDelay(150);
 80055dc:	2096      	movs	r0, #150	; 0x96
 80055de:	f00a fa3f 	bl	800fa60 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055e2:	e7e4      	b.n	80055ae <StartPitch_PID+0x1a>
 80055e4:	3ccccccd 	.word	0x3ccccccd
 80055e8:	42c80000 	.word	0x42c80000
 80055ec:	20000160 	.word	0x20000160
 80055f0:	200001ec 	.word	0x200001ec
 80055f4:	20000244 	.word	0x20000244
 80055f8:	200001f8 	.word	0x200001f8
 80055fc:	200002bc 	.word	0x200002bc
 8005600:	200002a8 	.word	0x200002a8

08005604 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800560c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005610:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005654 <StartYaw_PID+0x50>
 8005614:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005658 <StartYaw_PID+0x54>
 8005618:	4810      	ldr	r0, [pc, #64]	; (800565c <StartYaw_PID+0x58>)
 800561a:	f001 fbcf 	bl	8006dbc <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <StartYaw_PID+0x5c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2119      	movs	r1, #25
 8005624:	4618      	mov	r0, r3
 8005626:	f009 fed9 	bl	800f3dc <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800562a:	490e      	ldr	r1, [pc, #56]	; (8005664 <StartYaw_PID+0x60>)
 800562c:	480e      	ldr	r0, [pc, #56]	; (8005668 <StartYaw_PID+0x64>)
 800562e:	f000 fd85 	bl	800613c <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <StartYaw_PID+0x5c>)
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	f009 fd5a 	bl	800f0f4 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <StartYaw_PID+0x68>)
 8005642:	4a08      	ldr	r2, [pc, #32]	; (8005664 <StartYaw_PID+0x60>)
 8005644:	490a      	ldr	r1, [pc, #40]	; (8005670 <StartYaw_PID+0x6c>)
 8005646:	4805      	ldr	r0, [pc, #20]	; (800565c <StartYaw_PID+0x58>)
 8005648:	f001 fbd3 	bl	8006df2 <Pid_CompensateYaw>

		vTaskDelay(150);
 800564c:	2096      	movs	r0, #150	; 0x96
 800564e:	f00a fa07 	bl	800fa60 <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005652:	e7e4      	b.n	800561e <StartYaw_PID+0x1a>
 8005654:	3ccccccd 	.word	0x3ccccccd
 8005658:	42c80000 	.word	0x42c80000
 800565c:	20000184 	.word	0x20000184
 8005660:	200001ec 	.word	0x200001ec
 8005664:	20000244 	.word	0x20000244
 8005668:	200001f8 	.word	0x200001f8
 800566c:	200002bc 	.word	0x200002bc
 8005670:	200002a8 	.word	0x200002a8

08005674 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 800567c:	480f      	ldr	r0, [pc, #60]	; (80056bc <StartPressureMonitor+0x48>)
 800567e:	f000 f9d1 	bl	8005a24 <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <StartPressureMonitor+0x4c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <StartPressureMonitor+0x50>)
 800568a:	480c      	ldr	r0, [pc, #48]	; (80056bc <StartPressureMonitor+0x48>)
 800568c:	f000 fa14 	bl	8005ab8 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <StartPressureMonitor+0x4c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	490b      	ldr	r1, [pc, #44]	; (80056c4 <StartPressureMonitor+0x50>)
 8005698:	4808      	ldr	r0, [pc, #32]	; (80056bc <StartPressureMonitor+0x48>)
 800569a:	f000 f95d 	bl	8005958 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <StartPressureMonitor+0x4c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <StartPressureMonitor+0x50>)
 80056a6:	4805      	ldr	r0, [pc, #20]	; (80056bc <StartPressureMonitor+0x48>)
 80056a8:	f000 f8fe 	bl	80058a8 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <StartPressureMonitor+0x50>)
 80056ae:	f000 fa2f 	bl	8005b10 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
		vTaskDelay(500);
 80056b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056b6:	f00a f9d3 	bl	800fa60 <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056ba:	e7e9      	b.n	8005690 <StartPressureMonitor+0x1c>
 80056bc:	200001f8 	.word	0x200001f8
 80056c0:	200001ec 	.word	0x200001ec
 80056c4:	200002ec 	.word	0x200002ec

080056c8 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056d4:	4909      	ldr	r1, [pc, #36]	; (80056fc <StartGPS+0x34>)
 80056d6:	480a      	ldr	r0, [pc, #40]	; (8005700 <StartGPS+0x38>)
 80056d8:	f007 fb58 	bl	800cd8c <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <StartGPS+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4909      	ldr	r1, [pc, #36]	; (8005708 <StartGPS+0x40>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f009 fe7a 	bl	800f3dc <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80056e8:	4908      	ldr	r1, [pc, #32]	; (800570c <StartGPS+0x44>)
 80056ea:	4804      	ldr	r0, [pc, #16]	; (80056fc <StartGPS+0x34>)
 80056ec:	f000 febc 	bl	8006468 <gps_ReadNMEA>
	  vTaskDelay(1000);
 80056f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056f4:	f00a f9b4 	bl	800fa60 <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056f8:	e7ea      	b.n	80056d0 <StartGPS+0x8>
 80056fa:	bf00      	nop
 80056fc:	20000330 	.word	0x20000330
 8005700:	20000850 	.word	0x20000850
 8005704:	200001f0 	.word	0x200001f0
 8005708:	000186a0 	.word	0x000186a0
 800570c:	20000300 	.word	0x20000300

08005710 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMainTask */
	xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005718:	4b14      	ldr	r3, [pc, #80]	; (800576c <StartMainTask+0x5c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4914      	ldr	r1, [pc, #80]	; (8005770 <StartMainTask+0x60>)
 800571e:	4618      	mov	r0, r3
 8005720:	f009 fe5c 	bl	800f3dc <xQueueSemaphoreTake>
	xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005724:	4b11      	ldr	r3, [pc, #68]	; (800576c <StartMainTask+0x5c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4911      	ldr	r1, [pc, #68]	; (8005770 <StartMainTask+0x60>)
 800572a:	4618      	mov	r0, r3
 800572c:	f009 fe56 	bl	800f3dc <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e011      	b.n	800575a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <StartMainTask+0x64>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800573e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005740:	2064      	movs	r0, #100	; 0x64
 8005742:	f00a f98d 	bl	800fa60 <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <StartMainTask+0x64>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800574e:	2064      	movs	r0, #100	; 0x64
 8005750:	f00a f986 	bl	800fa60 <vTaskDelay>
	for(int i=0;i<5;i++){
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b04      	cmp	r3, #4
 800575e:	ddea      	ble.n	8005736 <StartMainTask+0x26>
	}
  /* Infinite loop */
  for(;;)
  {
	  vTaskDelay(1000);
 8005760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005764:	f00a f97c 	bl	800fa60 <vTaskDelay>
 8005768:	e7fa      	b.n	8005760 <StartMainTask+0x50>
 800576a:	bf00      	nop
 800576c:	200001f4 	.word	0x200001f4
 8005770:	6fc0ffff 	.word	0x6fc0ffff
 8005774:	200007b8 	.word	0x200007b8

08005778 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 8005780:	4909      	ldr	r1, [pc, #36]	; (80057a8 <StartBatteryMonitoring+0x30>)
 8005782:	480a      	ldr	r0, [pc, #40]	; (80057ac <StartBatteryMonitoring+0x34>)
 8005784:	f7ff fcd4 	bl	8005130 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 8005788:	4907      	ldr	r1, [pc, #28]	; (80057a8 <StartBatteryMonitoring+0x30>)
 800578a:	4808      	ldr	r0, [pc, #32]	; (80057ac <StartBatteryMonitoring+0x34>)
 800578c:	f7ff fd44 	bl	8005218 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 8005790:	4905      	ldr	r1, [pc, #20]	; (80057a8 <StartBatteryMonitoring+0x30>)
 8005792:	4806      	ldr	r0, [pc, #24]	; (80057ac <StartBatteryMonitoring+0x34>)
 8005794:	f7ff fcfc 	bl	8005190 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 8005798:	4804      	ldr	r0, [pc, #16]	; (80057ac <StartBatteryMonitoring+0x34>)
 800579a:	f7ff fd81 	bl	80052a0 <Battery_RemaningTime>
    vTaskDelay(5000);
 800579e:	f241 3088 	movw	r0, #5000	; 0x1388
 80057a2:	f00a f95d 	bl	800fa60 <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057a6:	e7eb      	b.n	8005780 <StartBatteryMonitoring+0x8>
 80057a8:	20000718 	.word	0x20000718
 80057ac:	20000320 	.word	0x20000320

080057b0 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af04      	add	r7, sp, #16
 80057b6:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80057b8:	230a      	movs	r3, #10
 80057ba:	9302      	str	r3, [sp, #8]
 80057bc:	2301      	movs	r3, #1
 80057be:	9301      	str	r3, [sp, #4]
 80057c0:	f107 030f 	add.w	r3, r7, #15
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	2301      	movs	r3, #1
 80057c8:	221b      	movs	r2, #27
 80057ca:	21ec      	movs	r1, #236	; 0xec
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f004 fc09 	bl	8009fe4 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	f003 0332 	and.w	r3, r3, #50	; 0x32
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80057e0:	230a      	movs	r3, #10
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	2301      	movs	r3, #1
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	f107 030e 	add.w	r3, r7, #14
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2301      	movs	r3, #1
 80057f0:	221b      	movs	r2, #27
 80057f2:	21ec      	movs	r1, #236	; 0xec
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f004 fae1 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 8005802:	b580      	push	{r7, lr}
 8005804:	b088      	sub	sp, #32
 8005806:	af04      	add	r7, sp, #16
 8005808:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800580a:	230a      	movs	r3, #10
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	2301      	movs	r3, #1
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f107 030f 	add.w	r3, r7, #15
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	2301      	movs	r3, #1
 800581a:	221b      	movs	r2, #27
 800581c:	21ec      	movs	r1, #236	; 0xec
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f004 fbe0 	bl	8009fe4 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800582a:	b2db      	uxtb	r3, r3
 800582c:	3301      	adds	r3, #1
 800582e:	b2db      	uxtb	r3, r3
 8005830:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005832:	230a      	movs	r3, #10
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	2301      	movs	r3, #1
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f107 030e 	add.w	r3, r7, #14
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2301      	movs	r3, #1
 8005842:	221b      	movs	r2, #27
 8005844:	21ec      	movs	r1, #236	; 0xec
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f004 fab8 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 800584c:	bf00      	nop
 800584e:	3710      	adds	r7, #16
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 800585c:	230a      	movs	r3, #10
 800585e:	9302      	str	r3, [sp, #8]
 8005860:	2301      	movs	r3, #1
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	f107 030f 	add.w	r3, r7, #15
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2301      	movs	r3, #1
 800586c:	221b      	movs	r2, #27
 800586e:	21ec      	movs	r1, #236	; 0xec
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f004 fbb7 	bl	8009fe4 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	b2db      	uxtb	r3, r3
 800587e:	3330      	adds	r3, #48	; 0x30
 8005880:	b2db      	uxtb	r3, r3
 8005882:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005884:	230a      	movs	r3, #10
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	2301      	movs	r3, #1
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	f107 030e 	add.w	r3, r7, #14
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2301      	movs	r3, #1
 8005894:	221b      	movs	r2, #27
 8005896:	21ec      	movs	r1, #236	; 0xec
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f004 fa8f 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 800589e:	bf00      	nop
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
	...

080058a8 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af04      	add	r7, sp, #16
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 80058b4:	2123      	movs	r1, #35	; 0x23
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f009 fd90 	bl	800f3dc <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 80058bc:	230a      	movs	r3, #10
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	2301      	movs	r3, #1
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	f107 0313 	add.w	r3, r7, #19
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	2301      	movs	r3, #1
 80058cc:	2207      	movs	r2, #7
 80058ce:	21ec      	movs	r1, #236	; 0xec
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f004 fb87 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 80058d6:	230a      	movs	r3, #10
 80058d8:	9302      	str	r3, [sp, #8]
 80058da:	2301      	movs	r3, #1
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	f107 0312 	add.w	r3, r7, #18
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	2301      	movs	r3, #1
 80058e6:	2208      	movs	r2, #8
 80058e8:	21ec      	movs	r1, #236	; 0xec
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f004 fb7a 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 80058f0:	230a      	movs	r3, #10
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	2301      	movs	r3, #1
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	f107 0311 	add.w	r3, r7, #17
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	2301      	movs	r3, #1
 8005900:	2209      	movs	r2, #9
 8005902:	21ec      	movs	r1, #236	; 0xec
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f004 fb6d 	bl	8009fe4 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 800590a:	2300      	movs	r3, #0
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f009 fbef 	bl	800f0f4 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	461a      	mov	r2, r3
 800591a:	7cbb      	ldrb	r3, [r7, #18]
 800591c:	021b      	lsls	r3, r3, #8
 800591e:	441a      	add	r2, r3
 8005920:	7c7b      	ldrb	r3, [r7, #17]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	4413      	add	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <BMP390_ReadTemp+0xa8>)
 800592c:	fba3 1302 	umull	r1, r3, r3, r2
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	0852      	lsrs	r2, r2, #1
 8005934:	4413      	add	r3, r2
 8005936:	0c5b      	lsrs	r3, r3, #17
 8005938:	ee07 3a90 	vmov	s15, r3
 800593c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	04000105 	.word	0x04000105
 8005954:	00000000 	.word	0x00000000

08005958 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	; 0x28
 800595c:	af04      	add	r7, sp, #16
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 8005964:	2123      	movs	r1, #35	; 0x23
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f009 fd38 	bl	800f3dc <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 800596c:	230a      	movs	r3, #10
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2301      	movs	r3, #1
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 0313 	add.w	r3, r7, #19
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	2204      	movs	r2, #4
 800597e:	21ec      	movs	r1, #236	; 0xec
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f004 fb2f 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 8005986:	230a      	movs	r3, #10
 8005988:	9302      	str	r3, [sp, #8]
 800598a:	2301      	movs	r3, #1
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	f107 0312 	add.w	r3, r7, #18
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	2301      	movs	r3, #1
 8005996:	2205      	movs	r2, #5
 8005998:	21ec      	movs	r1, #236	; 0xec
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f004 fb22 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 80059a0:	230a      	movs	r3, #10
 80059a2:	9302      	str	r3, [sp, #8]
 80059a4:	2301      	movs	r3, #1
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	f107 0311 	add.w	r3, r7, #17
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2301      	movs	r3, #1
 80059b0:	2206      	movs	r2, #6
 80059b2:	21ec      	movs	r1, #236	; 0xec
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f004 fb15 	bl	8009fe4 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80059ba:	2300      	movs	r3, #0
 80059bc:	2200      	movs	r2, #0
 80059be:	2100      	movs	r1, #0
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f009 fb97 	bl	800f0f4 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 80059c6:	7cfb      	ldrb	r3, [r7, #19]
 80059c8:	461a      	mov	r2, r3
 80059ca:	7cbb      	ldrb	r3, [r7, #18]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	441a      	add	r2, r3
 80059d0:	7c7b      	ldrb	r3, [r7, #17]
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	4413      	add	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 80059d8:	6978      	ldr	r0, [r7, #20]
 80059da:	f7fe fd6d 	bl	80044b8 <__aeabi_ui2d>
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	4b0f      	ldr	r3, [pc, #60]	; (8005a20 <BMP390_ReadPress+0xc8>)
 80059e4:	f7fe fde2 	bl	80045ac <__aeabi_dmul>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4610      	mov	r0, r2
 80059ee:	4619      	mov	r1, r3
 80059f0:	a309      	add	r3, pc, #36	; (adr r3, 8005a18 <BMP390_ReadPress+0xc0>)
 80059f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f6:	f7fe fc23 	bl	8004240 <__adddf3>
 80059fa:	4602      	mov	r2, r0
 80059fc:	460b      	mov	r3, r1
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7ff f883 	bl	8004b0c <__aeabi_d2f>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	601a      	str	r2, [r3, #0]

}
 8005a0c:	bf00      	nop
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	f3af 8000 	nop.w
 8005a18:	00000000 	.word	0x00000000
 8005a1c:	4072c000 	.word	0x4072c000
 8005a20:	3f0db000 	.word	0x3f0db000

08005a24 <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af04      	add	r7, sp, #16
 8005a2a:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005a30:	230a      	movs	r3, #10
 8005a32:	9302      	str	r3, [sp, #8]
 8005a34:	2301      	movs	r3, #1
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	f107 030e 	add.w	r3, r7, #14
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	2301      	movs	r3, #1
 8005a40:	2200      	movs	r2, #0
 8005a42:	21ec      	movs	r1, #236	; 0xec
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f004 facd 	bl	8009fe4 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b60      	cmp	r3, #96	; 0x60
 8005a4e:	d001      	beq.n	8005a54 <BMP390_Init+0x30>
		res = 1;
 8005a50:	2301      	movs	r3, #1
 8005a52:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005a54:	230a      	movs	r3, #10
 8005a56:	9302      	str	r3, [sp, #8]
 8005a58:	2301      	movs	r3, #1
 8005a5a:	9301      	str	r3, [sp, #4]
 8005a5c:	f107 030e 	add.w	r3, r7, #14
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2301      	movs	r3, #1
 8005a64:	2201      	movs	r2, #1
 8005a66:	21ec      	movs	r1, #236	; 0xec
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f004 fabb 	bl	8009fe4 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005a6e:	7bbb      	ldrb	r3, [r7, #14]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d001      	beq.n	8005a78 <BMP390_Init+0x54>
		res = 1;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f7ff fec2 	bl	8005802 <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7ff fe96 	bl	80057b0 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fee5 	bl	8005854 <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005a8a:	2005      	movs	r0, #5
 8005a8c:	f002 f8f0 	bl	8007c70 <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005a90:	2342      	movs	r3, #66	; 0x42
 8005a92:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005a94:	230a      	movs	r3, #10
 8005a96:	9302      	str	r3, [sp, #8]
 8005a98:	2301      	movs	r3, #1
 8005a9a:	9301      	str	r3, [sp, #4]
 8005a9c:	f107 030e 	add.w	r3, r7, #14
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	2219      	movs	r2, #25
 8005aa6:	21ec      	movs	r1, #236	; 0xec
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f004 f987 	bl	8009dbc <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	e010      	b.n	8005aec <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	f7ff ff42 	bl	8005958 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	edd3 7a00 	vldr	s15, [r3]
 8005ada:	ed97 7a05 	vldr	s14, [r7, #20]
 8005ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae2:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	ddeb      	ble.n	8005aca <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005af2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005af6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b04:	bf00      	nop
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	0000      	movs	r0, r0
	...

08005b10 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	ed93 7a00 	vldr	s14, [r3]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b28:	ee16 0a90 	vmov	r0, s13
 8005b2c:	f7fe fce6 	bl	80044fc <__aeabi_f2d>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005b80 <BMP390_GetRelativeAltitude+0x70>
 8005b38:	ec43 2b10 	vmov	d0, r2, r3
 8005b3c:	f00b fae4 	bl	8011108 <pow>
 8005b40:	ec53 2b10 	vmov	r2, r3, d0
 8005b44:	f04f 0000 	mov.w	r0, #0
 8005b48:	4911      	ldr	r1, [pc, #68]	; (8005b90 <BMP390_GetRelativeAltitude+0x80>)
 8005b4a:	f7fe fb77 	bl	800423c <__aeabi_dsub>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	a30c      	add	r3, pc, #48	; (adr r3, 8005b88 <BMP390_GetRelativeAltitude+0x78>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fe fd26 	bl	80045ac <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	f7fe ffd0 	bl	8004b0c <__aeabi_d2f>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
 8005b80:	1a36e2eb 	.word	0x1a36e2eb
 8005b84:	3fc85bc0 	.word	0x3fc85bc0
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	40e5a540 	.word	0x40e5a540
 8005b90:	3ff00000 	.word	0x3ff00000

08005b94 <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af04      	add	r7, sp, #16
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005ba0:	230a      	movs	r3, #10
 8005ba2:	9302      	str	r3, [sp, #8]
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	1cfb      	adds	r3, r7, #3
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	2301      	movs	r3, #1
 8005bae:	2207      	movs	r2, #7
 8005bb0:	2150      	movs	r1, #80	; 0x50
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f004 f902 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005bce:	7afa      	ldrb	r2, [r7, #11]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005bd6:	230a      	movs	r3, #10
 8005bd8:	9302      	str	r3, [sp, #8]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9301      	str	r3, [sp, #4]
 8005bde:	f107 030b 	add.w	r3, r7, #11
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2301      	movs	r3, #1
 8005be6:	223d      	movs	r2, #61	; 0x3d
 8005be8:	2150      	movs	r1, #80	; 0x50
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f004 f8e6 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af04      	add	r7, sp, #16
 8005bfe:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c00:	2364      	movs	r3, #100	; 0x64
 8005c02:	9302      	str	r3, [sp, #8]
 8005c04:	2301      	movs	r3, #1
 8005c06:	9301      	str	r3, [sp, #4]
 8005c08:	f107 030f 	add.w	r3, r7, #15
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2301      	movs	r3, #1
 8005c10:	223f      	movs	r2, #63	; 0x3f
 8005c12:	2150      	movs	r1, #80	; 0x50
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f004 f9e5 	bl	8009fe4 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af04      	add	r7, sp, #16
 8005c2a:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005c2c:	2364      	movs	r3, #100	; 0x64
 8005c2e:	9302      	str	r3, [sp, #8]
 8005c30:	2301      	movs	r3, #1
 8005c32:	9301      	str	r3, [sp, #4]
 8005c34:	f107 030f 	add.w	r3, r7, #15
 8005c38:	9300      	str	r3, [sp, #0]
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	2237      	movs	r2, #55	; 0x37
 8005c3e:	2150      	movs	r1, #80	; 0x50
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f004 f9cf 	bl	8009fe4 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b088      	sub	sp, #32
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005c58:	2364      	movs	r3, #100	; 0x64
 8005c5a:	9302      	str	r3, [sp, #8]
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	f107 030f 	add.w	r3, r7, #15
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	2301      	movs	r3, #1
 8005c68:	2210      	movs	r2, #16
 8005c6a:	2150      	movs	r1, #80	; 0x50
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f004 f9b9 	bl	8009fe4 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	f043 0320 	orr.w	r3, r3, #32
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005c7c:	230a      	movs	r3, #10
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	2301      	movs	r3, #1
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	f107 030f 	add.w	r3, r7, #15
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	2210      	movs	r2, #16
 8005c8e:	2150      	movs	r1, #80	; 0x50
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f004 f893 	bl	8009dbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005c96:	2364      	movs	r3, #100	; 0x64
 8005c98:	9302      	str	r3, [sp, #8]
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	f107 030f 	add.w	r3, r7, #15
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	220f      	movs	r2, #15
 8005ca8:	2150      	movs	r1, #80	; 0x50
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f004 f99a 	bl	8009fe4 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005cb0:	7bfb      	ldrb	r3, [r7, #15]
 8005cb2:	f043 0320 	orr.w	r3, r3, #32
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005cba:	230a      	movs	r3, #10
 8005cbc:	9302      	str	r3, [sp, #8]
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	f107 030f 	add.w	r3, r7, #15
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	2301      	movs	r3, #1
 8005cca:	220f      	movs	r2, #15
 8005ccc:	2150      	movs	r1, #80	; 0x50
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f004 f874 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af04      	add	r7, sp, #16
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005ce8:	2364      	movs	r3, #100	; 0x64
 8005cea:	9302      	str	r3, [sp, #8]
 8005cec:	2301      	movs	r3, #1
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	f107 030f 	add.w	r3, r7, #15
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	2212      	movs	r2, #18
 8005cfa:	2150      	movs	r1, #80	; 0x50
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f004 f971 	bl	8009fe4 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	2b5a      	cmp	r3, #90	; 0x5a
 8005d06:	d012      	beq.n	8005d2e <BNO055_EnableHighGAcc+0x52>
 8005d08:	2b5a      	cmp	r3, #90	; 0x5a
 8005d0a:	dc16      	bgt.n	8005d3a <BNO055_EnableHighGAcc+0x5e>
 8005d0c:	2b58      	cmp	r3, #88	; 0x58
 8005d0e:	d002      	beq.n	8005d16 <BNO055_EnableHighGAcc+0x3a>
 8005d10:	2b59      	cmp	r3, #89	; 0x59
 8005d12:	d006      	beq.n	8005d22 <BNO055_EnableHighGAcc+0x46>
 8005d14:	e011      	b.n	8005d3a <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	f043 0320 	orr.w	r3, r3, #32
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	73fb      	strb	r3, [r7, #15]
			break;
 8005d20:	e00b      	b.n	8005d3a <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	73fb      	strb	r3, [r7, #15]
			break;
 8005d2c:	e005      	b.n	8005d3a <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	73fb      	strb	r3, [r7, #15]
			break;
 8005d38:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005d3a:	230a      	movs	r3, #10
 8005d3c:	9302      	str	r3, [sp, #8]
 8005d3e:	2301      	movs	r3, #1
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	f107 030f 	add.w	r3, r7, #15
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2301      	movs	r3, #1
 8005d4a:	2212      	movs	r2, #18
 8005d4c:	2150      	movs	r1, #80	; 0x50
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f004 f834 	bl	8009dbc <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d54:	2364      	movs	r3, #100	; 0x64
 8005d56:	9302      	str	r3, [sp, #8]
 8005d58:	2301      	movs	r3, #1
 8005d5a:	9301      	str	r3, [sp, #4]
 8005d5c:	f107 030f 	add.w	r3, r7, #15
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	2301      	movs	r3, #1
 8005d64:	2212      	movs	r2, #18
 8005d66:	2150      	movs	r1, #80	; 0x50
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f004 f93b 	bl	8009fe4 <HAL_I2C_Mem_Read>
}
 8005d6e:	bf00      	nop
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b088      	sub	sp, #32
 8005d7a:	af04      	add	r7, sp, #16
 8005d7c:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005d7e:	2364      	movs	r3, #100	; 0x64
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	2301      	movs	r3, #1
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	f107 030f 	add.w	r3, r7, #15
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	223f      	movs	r2, #63	; 0x3f
 8005d90:	2150      	movs	r1, #80	; 0x50
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f004 f926 	bl	8009fe4 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005da2:	230a      	movs	r3, #10
 8005da4:	9302      	str	r3, [sp, #8]
 8005da6:	2301      	movs	r3, #1
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	f107 030f 	add.w	r3, r7, #15
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2301      	movs	r3, #1
 8005db2:	223f      	movs	r2, #63	; 0x3f
 8005db4:	2150      	movs	r1, #80	; 0x50
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f004 f800 	bl	8009dbc <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff31 	bl	8005c24 <BNO055_ReadITStatus>
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af04      	add	r7, sp, #16
 8005dd0:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7ff ff10 	bl	8005bf8 <BNO055_ReadSystemReg>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	3b80      	subs	r3, #128	; 0x80
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005dea:	230a      	movs	r3, #10
 8005dec:	9302      	str	r3, [sp, #8]
 8005dee:	2301      	movs	r3, #1
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	f107 030e 	add.w	r3, r7, #14
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	223f      	movs	r2, #63	; 0x3f
 8005dfc:	2150      	movs	r1, #80	; 0x50
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f003 ffdc 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af04      	add	r7, sp, #16
 8005e12:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff feef 	bl	8005bf8 <BNO055_ReadSystemReg>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	f023 0301 	bic.w	r3, r3, #1
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e2c:	230a      	movs	r3, #10
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	2301      	movs	r3, #1
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f107 030e 	add.w	r3, r7, #14
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	223f      	movs	r2, #63	; 0x3f
 8005e3e:	2150      	movs	r1, #80	; 0x50
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f003 ffbb 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005e46:	bf00      	nop
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b088      	sub	sp, #32
 8005e52:	af04      	add	r7, sp, #16
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005e5c:	230a      	movs	r3, #10
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	2301      	movs	r3, #1
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	f107 030e 	add.w	r3, r7, #14
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	2236      	movs	r2, #54	; 0x36
 8005e6e:	2150      	movs	r1, #80	; 0x50
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f004 f8b7 	bl	8009fe4 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	f003 030f 	and.w	r3, r3, #15
 8005e7c:	2b0f      	cmp	r3, #15
 8005e7e:	d001      	beq.n	8005e84 <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff ffc1 	bl	8005e0c <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005e8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e8e:	f008 ff5d 	bl	800ed4c <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005e92:	230a      	movs	r3, #10
 8005e94:	9302      	str	r3, [sp, #8]
 8005e96:	2301      	movs	r3, #1
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	f107 030e 	add.w	r3, r7, #14
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	223a      	movs	r2, #58	; 0x3a
 8005ea4:	2150      	movs	r1, #80	; 0x50
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f004 f89c 	bl	8009fe4 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	9302      	str	r3, [sp, #8]
 8005eba:	2301      	movs	r3, #1
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	f107 030e 	add.w	r3, r7, #14
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	2239      	movs	r2, #57	; 0x39
 8005ec8:	2150      	movs	r1, #80	; 0x50
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f004 f88a 	bl	8009fe4 <HAL_I2C_Mem_Read>

	return res;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b088      	sub	sp, #32
 8005ede:	af04      	add	r7, sp, #16
 8005ee0:	6078      	str	r0, [r7, #4]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005ee6:	78fb      	ldrb	r3, [r7, #3]
 8005ee8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005eea:	230a      	movs	r3, #10
 8005eec:	9302      	str	r3, [sp, #8]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9301      	str	r3, [sp, #4]
 8005ef2:	f107 030f 	add.w	r3, r7, #15
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2301      	movs	r3, #1
 8005efa:	2214      	movs	r2, #20
 8005efc:	2150      	movs	r1, #80	; 0x50
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f003 ff5c 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af04      	add	r7, sp, #16
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	460b      	mov	r3, r1
 8005f16:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f1c:	230a      	movs	r3, #10
 8005f1e:	9302      	str	r3, [sp, #8]
 8005f20:	2301      	movs	r3, #1
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	f107 030f 	add.w	r3, r7, #15
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	2213      	movs	r2, #19
 8005f2e:	2150      	movs	r1, #80	; 0x50
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f003 ff43 	bl	8009dbc <HAL_I2C_Mem_Write>
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b088      	sub	sp, #32
 8005f42:	af04      	add	r7, sp, #16
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	661a      	str	r2, [r3, #96]	; 0x60

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fe19 	bl	8005b94 <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f7ff fe74 	bl	8005c50 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005f68:	2158      	movs	r1, #88	; 0x58
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7ff feb6 	bl	8005cdc <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005f70:	2159      	movs	r1, #89	; 0x59
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7ff feb2 	bl	8005cdc <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005f78:	215a      	movs	r1, #90	; 0x5a
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff feae 	bl	8005cdc <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005f80:	2150      	movs	r1, #80	; 0x50
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ffa9 	bl	8005eda <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8005f88:	2140      	movs	r1, #64	; 0x40
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffbe 	bl	8005f0c <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff fdfe 	bl	8005b94 <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff ff16 	bl	8005dca <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8005f9e:	20c8      	movs	r0, #200	; 0xc8
 8005fa0:	f008 fed4 	bl	800ed4c <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7ff ff51 	bl	8005e4e <BNO055_CheckSelfTestResult>
 8005fac:	4603      	mov	r3, r0
 8005fae:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8005fb0:	7bbb      	ldrb	r3, [r7, #14]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <BNO055_Init+0x7c>
		res = 1;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	210c      	movs	r1, #12
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fdfe 	bl	8005bc0 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8005fc4:	230a      	movs	r3, #10
 8005fc6:	9302      	str	r3, [sp, #8]
 8005fc8:	2301      	movs	r3, #1
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	f107 030e 	add.w	r3, r7, #14
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	223d      	movs	r2, #61	; 0x3d
 8005fd6:	2150      	movs	r1, #80	; 0x50
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f004 f803 	bl	8009fe4 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d001      	beq.n	8005fe8 <BNO055_Init+0xaa>
		res = 1;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 8005ffe:	230a      	movs	r3, #10
 8006000:	9302      	str	r3, [sp, #8]
 8006002:	2301      	movs	r3, #1
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f107 030f 	add.w	r3, r7, #15
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2301      	movs	r3, #1
 800600e:	221c      	movs	r2, #28
 8006010:	2150      	movs	r1, #80	; 0x50
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f003 ffe6 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 8006018:	230a      	movs	r3, #10
 800601a:	9302      	str	r3, [sp, #8]
 800601c:	2301      	movs	r3, #1
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	f107 030e 	add.w	r3, r7, #14
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2301      	movs	r3, #1
 8006028:	221d      	movs	r2, #29
 800602a:	2150      	movs	r1, #80	; 0x50
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f003 ffd9 	bl	8009fe4 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_roll = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	461a      	mov	r2, r3
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	4413      	add	r3, r2
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <BNO055_ReadEuler_Roll+0x98>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	ee07 3a90 	vmov	s15, r3
 800604c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006050:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_roll > 2000){
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006060:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006090 <BNO055_ReadEuler_Roll+0x9c>
 8006064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	dc00      	bgt.n	8006070 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
	}
}
 800606e:	e009      	b.n	8006084 <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_roll = BNO055->processed_data.euler_roll - 4096;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006076:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006094 <BNO055_ReadEuler_Roll+0xa0>
 800607a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000000 	.word	0x20000000
 8006090:	44fa0000 	.word	0x44fa0000
 8006094:	45800000 	.word	0x45800000

08006098 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af04      	add	r7, sp, #16
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 80060a2:	230a      	movs	r3, #10
 80060a4:	9302      	str	r3, [sp, #8]
 80060a6:	2301      	movs	r3, #1
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	f107 030f 	add.w	r3, r7, #15
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2301      	movs	r3, #1
 80060b2:	221e      	movs	r2, #30
 80060b4:	2150      	movs	r1, #80	; 0x50
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f003 ff94 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 80060bc:	230a      	movs	r3, #10
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	2301      	movs	r3, #1
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	f107 030e 	add.w	r3, r7, #14
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2301      	movs	r3, #1
 80060cc:	221f      	movs	r2, #31
 80060ce:	2150      	movs	r1, #80	; 0x50
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f003 ff87 	bl	8009fe4 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_pitch = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
 80060d8:	461a      	mov	r2, r3
 80060da:	7bbb      	ldrb	r3, [r7, #14]
 80060dc:	021b      	lsls	r3, r3, #8
 80060de:	4413      	add	r3, r2
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <BNO055_ReadEuler_Pitch+0x98>)
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_pitch > 2000){
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006104:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006134 <BNO055_ReadEuler_Pitch+0x9c>
 8006108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	dc00      	bgt.n	8006114 <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
	}
}
 8006112:	e009      	b.n	8006128 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_pitch = BNO055->processed_data.euler_pitch - 4096;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800611a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8006138 <BNO055_ReadEuler_Pitch+0xa0>
 800611e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000000 	.word	0x20000000
 8006134:	44fa0000 	.word	0x44fa0000
 8006138:	45800000 	.word	0x45800000

0800613c <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af04      	add	r7, sp, #16
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 8006146:	230a      	movs	r3, #10
 8006148:	9302      	str	r3, [sp, #8]
 800614a:	2301      	movs	r3, #1
 800614c:	9301      	str	r3, [sp, #4]
 800614e:	f107 030f 	add.w	r3, r7, #15
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	2301      	movs	r3, #1
 8006156:	221a      	movs	r2, #26
 8006158:	2150      	movs	r1, #80	; 0x50
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f003 ff42 	bl	8009fe4 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006160:	230a      	movs	r3, #10
 8006162:	9302      	str	r3, [sp, #8]
 8006164:	2301      	movs	r3, #1
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f107 030e 	add.w	r3, r7, #14
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	2301      	movs	r3, #1
 8006170:	221b      	movs	r2, #27
 8006172:	2150      	movs	r1, #80	; 0x50
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f003 ff35 	bl	8009fe4 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_heading = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	461a      	mov	r2, r3
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	021b      	lsls	r3, r3, #8
 8006182:	4413      	add	r3, r2
 8006184:	ee07 3a90 	vmov	s15, r3
 8006188:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800618c:	4b07      	ldr	r3, [pc, #28]	; (80061ac <BNO055_ReadEuler_Yaw+0x70>)
 800618e:	881b      	ldrh	r3, [r3, #0]
 8006190:	ee07 3a90 	vmov	s15, r3
 8006194:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000000 	.word	0x20000000

080061b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <MX_DMA_Init+0x50>)
 80061b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ba:	4a11      	ldr	r2, [pc, #68]	; (8006200 <MX_DMA_Init+0x50>)
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	6493      	str	r3, [r2, #72]	; 0x48
 80061c2:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <MX_DMA_Init+0x50>)
 80061c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80061ce:	4b0c      	ldr	r3, [pc, #48]	; (8006200 <MX_DMA_Init+0x50>)
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <MX_DMA_Init+0x50>)
 80061d4:	f043 0301 	orr.w	r3, r3, #1
 80061d8:	6493      	str	r3, [r2, #72]	; 0x48
 80061da:	4b09      	ldr	r3, [pc, #36]	; (8006200 <MX_DMA_Init+0x50>)
 80061dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80061e6:	2200      	movs	r2, #0
 80061e8:	2105      	movs	r1, #5
 80061ea:	200b      	movs	r0, #11
 80061ec:	f003 f826 	bl	800923c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80061f0:	200b      	movs	r0, #11
 80061f2:	f003 f83d 	bl	8009270 <HAL_NVIC_EnableIRQ>

}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	40021000 	.word	0x40021000

08006204 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	; 0x28
 8006208:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800620a:	f107 0314 	add.w	r3, r7, #20
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	609a      	str	r2, [r3, #8]
 8006216:	60da      	str	r2, [r3, #12]
 8006218:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800621a:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <MX_GPIO_Init+0xf4>)
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	4a36      	ldr	r2, [pc, #216]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006226:	4b34      	ldr	r3, [pc, #208]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006232:	4b31      	ldr	r3, [pc, #196]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	4a30      	ldr	r2, [pc, #192]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006238:	f043 0304 	orr.w	r3, r3, #4
 800623c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006242:	f003 0304 	and.w	r3, r3, #4
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800624a:	4b2b      	ldr	r3, [pc, #172]	; (80062f8 <MX_GPIO_Init+0xf4>)
 800624c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800624e:	4a2a      	ldr	r2, [pc, #168]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006256:	4b28      	ldr	r3, [pc, #160]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006262:	4b25      	ldr	r3, [pc, #148]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006266:	4a24      	ldr	r2, [pc, #144]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006268:	f043 0308 	orr.w	r3, r3, #8
 800626c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800626e:	4b22      	ldr	r3, [pc, #136]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	607b      	str	r3, [r7, #4]
 8006278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800627a:	4b1f      	ldr	r3, [pc, #124]	; (80062f8 <MX_GPIO_Init+0xf4>)
 800627c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627e:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006286:	4b1c      	ldr	r3, [pc, #112]	; (80062f8 <MX_GPIO_Init+0xf4>)
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8006292:	2200      	movs	r2, #0
 8006294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629c:	f003 fcaa 	bl	8009bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80062a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062a6:	2301      	movs	r3, #1
 80062a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ae:	2300      	movs	r3, #0
 80062b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80062b2:	f107 0314 	add.w	r3, r7, #20
 80062b6:	4619      	mov	r1, r3
 80062b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062bc:	f003 fb18 	bl	80098f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 80062c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80062ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 80062d0:	f107 0314 	add.w	r3, r7, #20
 80062d4:	4619      	mov	r1, r3
 80062d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062da:	f003 fb09 	bl	80098f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80062de:	2200      	movs	r2, #0
 80062e0:	2105      	movs	r1, #5
 80062e2:	2028      	movs	r0, #40	; 0x28
 80062e4:	f002 ffaa 	bl	800923c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80062e8:	2028      	movs	r0, #40	; 0x28
 80062ea:	f002 ffc1 	bl	8009270 <HAL_NVIC_EnableIRQ>

}
 80062ee:	bf00      	nop
 80062f0:	3728      	adds	r7, #40	; 0x28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40021000 	.word	0x40021000

080062fc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006300:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <MX_I2C2_Init+0x74>)
 8006302:	4a1c      	ldr	r2, [pc, #112]	; (8006374 <MX_I2C2_Init+0x78>)
 8006304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 8006306:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <MX_I2C2_Init+0x74>)
 8006308:	4a1b      	ldr	r2, [pc, #108]	; (8006378 <MX_I2C2_Init+0x7c>)
 800630a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800630c:	4b18      	ldr	r3, [pc, #96]	; (8006370 <MX_I2C2_Init+0x74>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <MX_I2C2_Init+0x74>)
 8006314:	2201      	movs	r2, #1
 8006316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006318:	4b15      	ldr	r3, [pc, #84]	; (8006370 <MX_I2C2_Init+0x74>)
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800631e:	4b14      	ldr	r3, [pc, #80]	; (8006370 <MX_I2C2_Init+0x74>)
 8006320:	2200      	movs	r2, #0
 8006322:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <MX_I2C2_Init+0x74>)
 8006326:	2200      	movs	r2, #0
 8006328:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800632a:	4b11      	ldr	r3, [pc, #68]	; (8006370 <MX_I2C2_Init+0x74>)
 800632c:	2200      	movs	r2, #0
 800632e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <MX_I2C2_Init+0x74>)
 8006332:	2200      	movs	r2, #0
 8006334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006336:	480e      	ldr	r0, [pc, #56]	; (8006370 <MX_I2C2_Init+0x74>)
 8006338:	f003 fcb1 	bl	8009c9e <HAL_I2C_Init>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006342:	f000 fceb 	bl	8006d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006346:	2100      	movs	r1, #0
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <MX_I2C2_Init+0x74>)
 800634a:	f004 fa0b 	bl	800a764 <HAL_I2CEx_ConfigAnalogFilter>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006354:	f000 fce2 	bl	8006d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006358:	2100      	movs	r1, #0
 800635a:	4805      	ldr	r0, [pc, #20]	; (8006370 <MX_I2C2_Init+0x74>)
 800635c:	f004 fa4d 	bl	800a7fa <HAL_I2CEx_ConfigDigitalFilter>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006366:	f000 fcd9 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	200001f8 	.word	0x200001f8
 8006374:	40005800 	.word	0x40005800
 8006378:	20c0edff 	.word	0x20c0edff

0800637c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b0a0      	sub	sp, #128	; 0x80
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006384:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	605a      	str	r2, [r3, #4]
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	60da      	str	r2, [r3, #12]
 8006392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006394:	f107 0318 	add.w	r3, r7, #24
 8006398:	2254      	movs	r2, #84	; 0x54
 800639a:	2100      	movs	r1, #0
 800639c:	4618      	mov	r0, r3
 800639e:	f00a fdc3 	bl	8010f28 <memset>
  if(i2cHandle->Instance==I2C2)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2c      	ldr	r2, [pc, #176]	; (8006458 <HAL_I2C_MspInit+0xdc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d151      	bne.n	8006450 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80063b0:	2300      	movs	r3, #0
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80063b4:	f107 0318 	add.w	r3, r7, #24
 80063b8:	4618      	mov	r0, r3
 80063ba:	f005 f875 	bl	800b4a8 <HAL_RCCEx_PeriphCLKConfig>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80063c4:	f000 fcaa 	bl	8006d1c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063ce:	f043 0320 	orr.w	r3, r3, #32
 80063d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063d4:	4b21      	ldr	r3, [pc, #132]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80063e0:	4b1e      	ldr	r3, [pc, #120]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e4:	4a1d      	ldr	r2, [pc, #116]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063e6:	f043 0304 	orr.w	r3, r3, #4
 80063ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <HAL_I2C_MspInit+0xe0>)
 80063ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80063f8:	2301      	movs	r3, #1
 80063fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063fc:	2312      	movs	r3, #18
 80063fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006400:	2300      	movs	r3, #0
 8006402:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006404:	2300      	movs	r3, #0
 8006406:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006408:	2304      	movs	r3, #4
 800640a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800640c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006410:	4619      	mov	r1, r3
 8006412:	4813      	ldr	r0, [pc, #76]	; (8006460 <HAL_I2C_MspInit+0xe4>)
 8006414:	f003 fa6c 	bl	80098f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006418:	2310      	movs	r3, #16
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800641c:	2312      	movs	r3, #18
 800641e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006420:	2300      	movs	r3, #0
 8006422:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006424:	2300      	movs	r3, #0
 8006426:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006428:	2304      	movs	r3, #4
 800642a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800642c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006430:	4619      	mov	r1, r3
 8006432:	480c      	ldr	r0, [pc, #48]	; (8006464 <HAL_I2C_MspInit+0xe8>)
 8006434:	f003 fa5c 	bl	80098f0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006438:	4b08      	ldr	r3, [pc, #32]	; (800645c <HAL_I2C_MspInit+0xe0>)
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800643c:	4a07      	ldr	r2, [pc, #28]	; (800645c <HAL_I2C_MspInit+0xe0>)
 800643e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006442:	6593      	str	r3, [r2, #88]	; 0x58
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <HAL_I2C_MspInit+0xe0>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006448:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006450:	bf00      	nop
 8006452:	3780      	adds	r7, #128	; 0x80
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40005800 	.word	0x40005800
 800645c:	40021000 	.word	0x40021000
 8006460:	48001400 	.word	0x48001400
 8006464:	48000800 	.word	0x48000800

08006468 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006468:	b580      	push	{r7, lr}
 800646a:	b08e      	sub	sp, #56	; 0x38
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 8006472:	4a70      	ldr	r2, [pc, #448]	; (8006634 <gps_ReadNMEA+0x1cc>)
 8006474:	f107 0318 	add.w	r3, r7, #24
 8006478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800647c:	6018      	str	r0, [r3, #0]
 800647e:	3304      	adds	r3, #4
 8006480:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006488:	2300      	movs	r3, #0
 800648a:	633b      	str	r3, [r7, #48]	; 0x30
 800648c:	e0c8      	b.n	8006620 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b24      	cmp	r3, #36	; 0x24
 8006498:	f040 80bf 	bne.w	800661a <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a0:	e00f      	b.n	80064c2 <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 80064a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	4413      	add	r3, r2
 80064a8:	3301      	adds	r3, #1
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	7819      	ldrb	r1, [r3, #0]
 80064b0:	f107 0220 	add.w	r2, r7, #32
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	4413      	add	r3, r2
 80064b8:	460a      	mov	r2, r1
 80064ba:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	3301      	adds	r3, #1
 80064c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	ddec      	ble.n	80064a2 <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 80064ce:	f107 0218 	add.w	r2, r7, #24
 80064d2:	f107 0320 	add.w	r3, r7, #32
 80064d6:	4611      	mov	r1, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fea1 	bl	8004220 <strcmp>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 809a 	bne.w	800661a <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	3306      	adds	r3, #6
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 80064ec:	2300      	movs	r3, #0
 80064ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80064f0:	e08e      	b.n	8006610 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	3301      	adds	r3, #1
 80064f6:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 8006504:	e013      	b.n	800652e <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	441a      	add	r2, r3
 800650c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006510:	7812      	ldrb	r2, [r2, #0]
 8006512:	3338      	adds	r3, #56	; 0x38
 8006514:	443b      	add	r3, r7
 8006516:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	3301      	adds	r3, #1
 800651e:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	b2da      	uxtb	r2, r3
 8006524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4413      	add	r3, r2
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <gps_ReadNMEA+0xde>
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	4413      	add	r3, r2
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b2c      	cmp	r3, #44	; 0x2c
 8006544:	d1df      	bne.n	8006506 <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 8006546:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800654a:	3301      	adds	r3, #1
 800654c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 8006550:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006554:	3b01      	subs	r3, #1
 8006556:	2b0a      	cmp	r3, #10
 8006558:	d857      	bhi.n	800660a <gps_ReadNMEA+0x1a2>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <gps_ReadNMEA+0xf8>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	0800658d 	.word	0x0800658d
 8006564:	0800659b 	.word	0x0800659b
 8006568:	080065a9 	.word	0x080065a9
 800656c:	080065b7 	.word	0x080065b7
 8006570:	080065c5 	.word	0x080065c5
 8006574:	080065d3 	.word	0x080065d3
 8006578:	080065e1 	.word	0x080065e1
 800657c:	0800660b 	.word	0x0800660b
 8006580:	080065ef 	.word	0x080065ef
 8006584:	0800660b 	.word	0x0800660b
 8006588:	080065fd 	.word	0x080065fd
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 f850 	bl	8006638 <gps_ProcessUTC>
							break;
 8006598:	e037      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 800659a:	f107 030c 	add.w	r3, r7, #12
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 f889 	bl	80066b8 <gps_ProcessLatitude>
							break;
 80065a6:	e030      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 80065a8:	f107 030c 	add.w	r3, r7, #12
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f9fc 	bl	80069ac <gps_ProcessNorthSouth>
							break;
 80065b4:	e029      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f937 	bl	8006830 <gps_ProcessLongitude>
							break;
 80065c2:	e022      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 80065c4:	f107 030c 	add.w	r3, r7, #12
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fa04 	bl	80069d8 <gps_ProcessEastWest>
							break;
 80065d0:	e01b      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 80065d2:	f107 030c 	add.w	r3, r7, #12
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fa13 	bl	8006a04 <gps_ProcessFix>
							break;
 80065de:	e014      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 fa2a 	bl	8006a40 <gps_ProcessSatelliteCount>
							break;
 80065ec:	e00d      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 80065ee:	f107 030c 	add.w	r3, r7, #12
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fa3f 	bl	8006a78 <gps_ProcessAltitude>
							break;
 80065fa:	e006      	b.n	800660a <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 80065fc:	f107 030c 	add.w	r3, r7, #12
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fa94 	bl	8006b30 <gps_ProcessAltitudeCorre>
							break;
 8006608:	bf00      	nop
				for(int k=0;k<12;k++){
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	3301      	adds	r3, #1
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b0b      	cmp	r3, #11
 8006614:	f77f af6d 	ble.w	80064f2 <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006618:	e008      	b.n	800662c <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	3301      	adds	r3, #1
 800661e:	633b      	str	r3, [r7, #48]	; 0x30
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006626:	f6ff af32 	blt.w	800648e <gps_ReadNMEA+0x26>

			}
		}
	}
}
 800662a:	bf00      	nop
 800662c:	bf00      	nop
 800662e:	3738      	adds	r7, #56	; 0x38
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	08012088 	.word	0x08012088

08006638 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	461a      	mov	r2, r3
 8006648:	0092      	lsls	r2, r2, #2
 800664a:	4413      	add	r3, r2
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	b2da      	uxtb	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3301      	adds	r3, #1
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	4413      	add	r3, r2
 8006658:	b2db      	uxtb	r3, r3
 800665a:	3b10      	subs	r3, #16
 800665c:	b2da      	uxtb	r2, r3
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3302      	adds	r3, #2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	4413      	add	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	3303      	adds	r3, #3
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4413      	add	r3, r2
 800667a:	b2db      	uxtb	r3, r3
 800667c:	3b10      	subs	r3, #16
 800667e:	b2da      	uxtb	r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3304      	adds	r3, #4
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	461a      	mov	r2, r3
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4413      	add	r3, r2
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	b2da      	uxtb	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3305      	adds	r3, #5
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	4413      	add	r3, r2
 800669c:	b2db      	uxtb	r3, r3
 800669e:	3b10      	subs	r3, #16
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	769a      	strb	r2, [r3, #26]
}
 80066a6:	bf00      	nop
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	0000      	movs	r0, r0
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 80066b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 80066c8:	f04f 0300 	mov.w	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	3b30      	subs	r3, #48	; 0x30
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	0092      	lsls	r2, r2, #2
 80066da:	4413      	add	r3, r2
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3301      	adds	r3, #1
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4413      	add	r3, r2
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	3b30      	subs	r3, #48	; 0x30
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3302      	adds	r3, #2
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	461a      	mov	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3303      	adds	r3, #3
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	3b30      	subs	r3, #48	; 0x30
 800670c:	4413      	add	r3, r2
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006716:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 800671a:	68b8      	ldr	r0, [r7, #8]
 800671c:	f7fd feee 	bl	80044fc <__aeabi_f2d>
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3305      	adds	r3, #5
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	3b30      	subs	r3, #48	; 0x30
 800672c:	4618      	mov	r0, r3
 800672e:	f7fd fed3 	bl	80044d8 <__aeabi_i2d>
 8006732:	a336      	add	r3, pc, #216	; (adr r3, 800680c <gps_ProcessLatitude+0x154>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7fd ff38 	bl	80045ac <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4690      	mov	r8, r2
 8006742:	4699      	mov	r9, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3306      	adds	r3, #6
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	3b30      	subs	r3, #48	; 0x30
 800674c:	4618      	mov	r0, r3
 800674e:	f7fd fec3 	bl	80044d8 <__aeabi_i2d>
 8006752:	a330      	add	r3, pc, #192	; (adr r3, 8006814 <gps_ProcessLatitude+0x15c>)
 8006754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006758:	f7fd ff28 	bl	80045ac <__aeabi_dmul>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7fd fd6c 	bl	8004240 <__adddf3>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4690      	mov	r8, r2
 800676e:	4699      	mov	r9, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3307      	adds	r3, #7
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	3b30      	subs	r3, #48	; 0x30
 8006778:	4618      	mov	r0, r3
 800677a:	f7fd fead 	bl	80044d8 <__aeabi_i2d>
 800677e:	a327      	add	r3, pc, #156	; (adr r3, 800681c <gps_ProcessLatitude+0x164>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7fd ff12 	bl	80045ac <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7fd fd56 	bl	8004240 <__adddf3>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4690      	mov	r8, r2
 800679a:	4699      	mov	r9, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3308      	adds	r3, #8
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	3b30      	subs	r3, #48	; 0x30
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7fd fe97 	bl	80044d8 <__aeabi_i2d>
 80067aa:	a31e      	add	r3, pc, #120	; (adr r3, 8006824 <gps_ProcessLatitude+0x16c>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7fd fefc 	bl	80045ac <__aeabi_dmul>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4640      	mov	r0, r8
 80067ba:	4649      	mov	r1, r9
 80067bc:	f7fd fd40 	bl	8004240 <__adddf3>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4620      	mov	r0, r4
 80067c6:	4629      	mov	r1, r5
 80067c8:	f7fd fd3a 	bl	8004240 <__adddf3>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4610      	mov	r0, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	f7fe f99a 	bl	8004b0c <__aeabi_d2f>
 80067d8:	4603      	mov	r3, r0
 80067da:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 80067dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067e8:	edd7 6a02 	vldr	s13, [r7, #8]
 80067ec:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006808 <gps_ProcessLatitude+0x150>
 80067f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80067f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	edc3 7a00 	vstr	s15, [r3]
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006808:	42700000 	.word	0x42700000
 800680c:	9999999a 	.word	0x9999999a
 8006810:	3fb99999 	.word	0x3fb99999
 8006814:	47ae147b 	.word	0x47ae147b
 8006818:	3f847ae1 	.word	0x3f847ae1
 800681c:	d2f1a9fc 	.word	0xd2f1a9fc
 8006820:	3f50624d 	.word	0x3f50624d
 8006824:	eb1c432d 	.word	0xeb1c432d
 8006828:	3f1a36e2 	.word	0x3f1a36e2
 800682c:	00000000 	.word	0x00000000

08006830 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	3301      	adds	r3, #1
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	3b30      	subs	r3, #48	; 0x30
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	0092      	lsls	r2, r2, #2
 8006854:	4413      	add	r3, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3302      	adds	r3, #2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	4413      	add	r3, r2
 8006862:	b2db      	uxtb	r3, r3
 8006864:	3b30      	subs	r3, #48	; 0x30
 8006866:	b2db      	uxtb	r3, r3
 8006868:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3303      	adds	r3, #3
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006874:	4613      	mov	r3, r2
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	4413      	add	r3, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	461a      	mov	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3304      	adds	r3, #4
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	3b30      	subs	r3, #48	; 0x30
 8006886:	4413      	add	r3, r2
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006890:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006894:	68b8      	ldr	r0, [r7, #8]
 8006896:	f7fd fe31 	bl	80044fc <__aeabi_f2d>
 800689a:	4604      	mov	r4, r0
 800689c:	460d      	mov	r5, r1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3305      	adds	r3, #5
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	3b30      	subs	r3, #48	; 0x30
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fd fe16 	bl	80044d8 <__aeabi_i2d>
 80068ac:	a337      	add	r3, pc, #220	; (adr r3, 800698c <gps_ProcessLongitude+0x15c>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7fd fe7b 	bl	80045ac <__aeabi_dmul>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4690      	mov	r8, r2
 80068bc:	4699      	mov	r9, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3306      	adds	r3, #6
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	3b30      	subs	r3, #48	; 0x30
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fe06 	bl	80044d8 <__aeabi_i2d>
 80068cc:	a331      	add	r3, pc, #196	; (adr r3, 8006994 <gps_ProcessLongitude+0x164>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7fd fe6b 	bl	80045ac <__aeabi_dmul>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7fd fcaf 	bl	8004240 <__adddf3>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	4690      	mov	r8, r2
 80068e8:	4699      	mov	r9, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	3307      	adds	r3, #7
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	3b30      	subs	r3, #48	; 0x30
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fd fdf0 	bl	80044d8 <__aeabi_i2d>
 80068f8:	a328      	add	r3, pc, #160	; (adr r3, 800699c <gps_ProcessLongitude+0x16c>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7fd fe55 	bl	80045ac <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4640      	mov	r0, r8
 8006908:	4649      	mov	r1, r9
 800690a:	f7fd fc99 	bl	8004240 <__adddf3>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4690      	mov	r8, r2
 8006914:	4699      	mov	r9, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3308      	adds	r3, #8
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	3b30      	subs	r3, #48	; 0x30
 800691e:	4618      	mov	r0, r3
 8006920:	f7fd fdda 	bl	80044d8 <__aeabi_i2d>
 8006924:	a31f      	add	r3, pc, #124	; (adr r3, 80069a4 <gps_ProcessLongitude+0x174>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7fd fe3f 	bl	80045ac <__aeabi_dmul>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4640      	mov	r0, r8
 8006934:	4649      	mov	r1, r9
 8006936:	f7fd fc83 	bl	8004240 <__adddf3>
 800693a:	4602      	mov	r2, r0
 800693c:	460b      	mov	r3, r1
 800693e:	4620      	mov	r0, r4
 8006940:	4629      	mov	r1, r5
 8006942:	f7fd fc7d 	bl	8004240 <__adddf3>
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	f7fe f8dd 	bl	8004b0c <__aeabi_d2f>
 8006952:	4603      	mov	r3, r0
 8006954:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800695a:	ee07 3a90 	vmov	s15, r3
 800695e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006962:	edd7 6a02 	vldr	s13, [r7, #8]
 8006966:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006988 <gps_ProcessLongitude+0x158>
 800696a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800696e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006978:	bf00      	nop
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006982:	bf00      	nop
 8006984:	f3af 8000 	nop.w
 8006988:	42700000 	.word	0x42700000
 800698c:	9999999a 	.word	0x9999999a
 8006990:	3fb99999 	.word	0x3fb99999
 8006994:	47ae147b 	.word	0x47ae147b
 8006998:	3f847ae1 	.word	0x3f847ae1
 800699c:	d2f1a9fc 	.word	0xd2f1a9fc
 80069a0:	3f50624d 	.word	0x3f50624d
 80069a4:	eb1c432d 	.word	0xeb1c432d
 80069a8:	3f1a36e2 	.word	0x3f1a36e2

080069ac <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b4e      	cmp	r3, #78	; 0x4e
 80069bc:	d103      	bne.n	80069c6 <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2200      	movs	r2, #0
 80069c2:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 80069c4:	e002      	b.n	80069cc <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2201      	movs	r2, #1
 80069ca:	741a      	strb	r2, [r3, #16]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b45      	cmp	r3, #69	; 0x45
 80069e8:	d103      	bne.n	80069f2 <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2202      	movs	r2, #2
 80069ee:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 80069f0:	e002      	b.n	80069f8 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2203      	movs	r2, #3
 80069f6:	745a      	strb	r2, [r3, #17]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	2b31      	cmp	r3, #49	; 0x31
 8006a14:	d103      	bne.n	8006a1e <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006a1c:	e00a      	b.n	8006a34 <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b32      	cmp	r3, #50	; 0x32
 8006a24:	d103      	bne.n	8006a2e <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	771a      	strb	r2, [r3, #28]
}
 8006a2c:	e002      	b.n	8006a34 <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	0092      	lsls	r2, r2, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4413      	add	r3, r2
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	3b10      	subs	r3, #16
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	76da      	strb	r2, [r3, #27]
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
	...

08006a78 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e03f      	b.n	8006b12 <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4413      	add	r3, r2
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8006a9c:	d104      	bne.n	8006aa8 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	74fb      	strb	r3, [r7, #19]
			i++;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01b      	beq.n	8006ae6 <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	3b30      	subs	r3, #48	; 0x30
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fd fd0d 	bl	80044d8 <__aeabi_i2d>
 8006abe:	a31a      	add	r3, pc, #104	; (adr r3, 8006b28 <gps_ProcessAltitude+0xb0>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7fd fd72 	bl	80045ac <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f7fe f81c 	bl	8004b0c <__aeabi_d2f>
 8006ad4:	ee07 0a10 	vmov	s14, r0
 8006ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ae0:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006ae4:	e018      	b.n	8006b18 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006aea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006aee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	3b30      	subs	r3, #48	; 0x30
 8006afc:	ee07 3a90 	vmov	s15, r3
 8006b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b08:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d9bc      	bls.n	8006a92 <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	609a      	str	r2, [r3, #8]
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	9999999a 	.word	0x9999999a
 8006b2c:	3fb99999 	.word	0x3fb99999

08006b30 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	e03f      	b.n	8006bca <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	4413      	add	r3, r2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b2e      	cmp	r3, #46	; 0x2e
 8006b54:	d104      	bne.n	8006b60 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006b56:	2301      	movs	r3, #1
 8006b58:	74fb      	strb	r3, [r7, #19]
			i++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006b60:	7cfb      	ldrb	r3, [r7, #19]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01b      	beq.n	8006b9e <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	3b30      	subs	r3, #48	; 0x30
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fd fcb1 	bl	80044d8 <__aeabi_i2d>
 8006b76:	a31a      	add	r3, pc, #104	; (adr r3, 8006be0 <gps_ProcessAltitudeCorre+0xb0>)
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	f7fd fd16 	bl	80045ac <__aeabi_dmul>
 8006b80:	4602      	mov	r2, r0
 8006b82:	460b      	mov	r3, r1
 8006b84:	4610      	mov	r0, r2
 8006b86:	4619      	mov	r1, r3
 8006b88:	f7fd ffc0 	bl	8004b0c <__aeabi_d2f>
 8006b8c:	ee07 0a10 	vmov	s14, r0
 8006b90:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b98:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006b9c:	e018      	b.n	8006bd0 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006b9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ba2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	4413      	add	r3, r2
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	3b30      	subs	r3, #48	; 0x30
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d9bc      	bls.n	8006b4a <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	60da      	str	r2, [r3, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	9999999a 	.word	0x9999999a
 8006be4:	3fb99999 	.word	0x3fb99999

08006be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8006bec:	b662      	cpsie	i
}
 8006bee:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bf0:	f001 f807 	bl	8007c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bf4:	f000 f834 	bl	8006c60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bf8:	f7ff fb04 	bl	8006204 <MX_GPIO_Init>
  MX_DMA_Init();
 8006bfc:	f7ff fad8 	bl	80061b0 <MX_DMA_Init>
  MX_I2C2_Init();
 8006c00:	f7ff fb7c 	bl	80062fc <MX_I2C2_Init>
  MX_TIM2_Init();
 8006c04:	f000 fca6 	bl	8007554 <MX_TIM2_Init>
  MX_TIM3_Init();
 8006c08:	f000 fcfc 	bl	8007604 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006c0c:	f000 fd54 	bl	80076b8 <MX_TIM4_Init>
  MX_UART4_Init();
 8006c10:	f000 fe6a 	bl	80078e8 <MX_UART4_Init>
  MX_UART5_Init();
 8006c14:	f000 feb4 	bl	8007980 <MX_UART5_Init>
  MX_ADC2_Init();
 8006c18:	f7fe f946 	bl	8004ea8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	480c      	ldr	r0, [pc, #48]	; (8006c50 <main+0x68>)
 8006c20:	f004 ffc2 	bl	800bba8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8006c24:	2100      	movs	r1, #0
 8006c26:	480b      	ldr	r0, [pc, #44]	; (8006c54 <main+0x6c>)
 8006c28:	f004 ffbe 	bl	800bba8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8006c2c:	2104      	movs	r1, #4
 8006c2e:	4809      	ldr	r0, [pc, #36]	; (8006c54 <main+0x6c>)
 8006c30:	f004 ffba 	bl	800bba8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8006c34:	210c      	movs	r1, #12
 8006c36:	4807      	ldr	r0, [pc, #28]	; (8006c54 <main+0x6c>)
 8006c38:	f004 ffb6 	bl	800bba8 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	4906      	ldr	r1, [pc, #24]	; (8006c58 <main+0x70>)
 8006c40:	4806      	ldr	r0, [pc, #24]	; (8006c5c <main+0x74>)
 8006c42:	f001 fc1b 	bl	800847c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8006c46:	f7fe fb61 	bl	800530c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8006c4a:	f008 f851 	bl	800ecf0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006c4e:	e7fe      	b.n	8006c4e <main+0x66>
 8006c50:	200007b8 	.word	0x200007b8
 8006c54:	20000804 	.word	0x20000804
 8006c58:	20000718 	.word	0x20000718
 8006c5c:	20000094 	.word	0x20000094

08006c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b094      	sub	sp, #80	; 0x50
 8006c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c66:	f107 0318 	add.w	r3, r7, #24
 8006c6a:	2238      	movs	r2, #56	; 0x38
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f00a f95a 	bl	8010f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c74:	1d3b      	adds	r3, r7, #4
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c82:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c86:	f003 fe05 	bl	800a894 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8006ca4:	234b      	movs	r3, #75	; 0x4b
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006cac:	2302      	movs	r3, #2
 8006cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006cb4:	f107 0318 	add.w	r3, r7, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f003 fe8f 	bl	800a9dc <HAL_RCC_OscConfig>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8006cc4:	f000 f82a 	bl	8006d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cc8:	230f      	movs	r3, #15
 8006cca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006cdc:	1d3b      	adds	r3, r7, #4
 8006cde:	2104      	movs	r1, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f004 f993 	bl	800b00c <HAL_RCC_ClockConfig>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d001      	beq.n	8006cf0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8006cec:	f000 f816 	bl	8006d1c <Error_Handler>
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3750      	adds	r7, #80	; 0x50
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a04      	ldr	r2, [pc, #16]	; (8006d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006d0a:	f000 ff93 	bl	8007c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006d0e:	bf00      	nop
 8006d10:	3708      	adds	r7, #8
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00

08006d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d20:	b672      	cpsid	i
}
 8006d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d24:	e7fe      	b.n	8006d24 <Error_Handler+0x8>

08006d26 <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_pitch)-(command->pitch_angle);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	edd3 7a02 	vldr	s15, [r3, #8]
 8006d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d40:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	ee07 3a90 	vmov	s15, r3
}
 8006d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_heading)-(command->yaw_angle);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d72:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	ee07 3a90 	vmov	s15, r3
}
 8006d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_roll)-(command->roll_angle);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006da4:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	ee07 3a90 	vmov	s15, r3
}
 8006dae:	eeb0 0a67 	vmov.f32	s0, s15
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8006dc8:	edc7 0a01 	vstr	s1, [r7, #4]
 8006dcc:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 8006de2:	2101      	movs	r1, #1
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f00a f881 	bl	8010eec <arm_pid_init_f32>

}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b08a      	sub	sp, #40	; 0x28
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	60f8      	str	r0, [r7, #12]
 8006dfa:	60b9      	str	r1, [r7, #8]
 8006dfc:	607a      	str	r2, [r7, #4]
 8006dfe:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f7ff ffa8 	bl	8006d58 <Pid_CalculateYawError>
 8006e08:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	ed93 7a00 	vldr	s14, [r3]
 8006e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006e32:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	edd3 6a02 	vldr	s13, [r3, #8]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8006e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e54:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8006e6c:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006e6e:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8006e70:	bf00      	nop
 8006e72:	3728      	adds	r7, #40	; 0x28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b08a      	sub	sp, #40	; 0x28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
 8006e84:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	68b8      	ldr	r0, [r7, #8]
 8006e8a:	f7ff ff7e 	bl	8006d8a <Pid_CalculateRollError>
 8006e8e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	61fb      	str	r3, [r7, #28]
 8006e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e98:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	ed93 7a00 	vldr	s14, [r3]
 8006ea0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	edd3 6a01 	vldr	s13, [r3, #4]
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8006eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	edd3 6a02 	vldr	s13, [r3, #8]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ec8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ecc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8006ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eda:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	68da      	ldr	r2, [r3, #12]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	69ba      	ldr	r2, [r7, #24]
 8006eea:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	615a      	str	r2, [r3, #20]
    return (out);
 8006ef2:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8006ef4:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f0a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006ffc <Pid_CompensateRoll+0x184>
 8006f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f16:	dd04      	ble.n	8006f22 <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006f1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f20:	e025      	b.n	8006f6e <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f36:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007000 <Pid_CompensateRoll+0x188>
 8006f3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f42:	d504      	bpl.n	8006f4e <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	f240 5214 	movw	r2, #1300	; 0x514
 8006f4a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f4c:	e00f      	b.n	8006f6e <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f5a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f66:	ee17 2a90 	vmov	r2, s15
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8006f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f82:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006ffc <Pid_CompensateRoll+0x184>
 8006f86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8e:	dd04      	ble.n	8006f9a <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f640 52ac 	movw	r2, #3500	; 0xdac
 8006f96:	629a      	str	r2, [r3, #40]	; 0x28
 8006f98:	e025      	b.n	8006fe6 <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fa6:	edd7 7a08 	vldr	s15, [r7, #32]
 8006faa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007000 <Pid_CompensateRoll+0x188>
 8006fb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fba:	d504      	bpl.n	8006fc6 <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f240 5214 	movw	r2, #1300	; 0x514
 8006fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8006fc4:	e00f      	b.n	8006fe6 <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8006fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fde:	ee17 2a90 	vmov	r2, s15
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8006fe6:	6838      	ldr	r0, [r7, #0]
 8006fe8:	f000 f8f0 	bl	80071cc <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f000 f90b 	bl	8007208 <PropulsionAndControl_UpdateRightFlaps>

}
 8006ff2:	bf00      	nop
 8006ff4:	3728      	adds	r7, #40	; 0x28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	455ac000 	.word	0x455ac000
 8007000:	44a28000 	.word	0x44a28000

08007004 <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	; 0x28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	68b8      	ldr	r0, [r7, #8]
 8007016:	f7ff fe86 	bl	8006d26 <Pid_CalculatePitchError>
 800701a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	61fb      	str	r3, [r7, #28]
 8007022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007024:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	ed93 7a00 	vldr	s14, [r3]
 800702c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007030:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	edd3 6a01 	vldr	s13, [r3, #4]
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007040:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007044:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	edd3 6a02 	vldr	s13, [r3, #8]
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	edd3 7a04 	vldr	s15, [r3, #16]
 8007054:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8007062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007066:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	68da      	ldr	r2, [r3, #12]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	615a      	str	r2, [r3, #20]
    return (out);
 800707e:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007080:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	ee07 3a90 	vmov	s15, r3
 800708a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800708e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007096:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007188 <Pid_CompensatePitch+0x184>
 800709a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a2:	dd04      	ble.n	80070ae <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24
 80070ac:	e025      	b.n	80070fa <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80070be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800718c <Pid_CompensatePitch+0x188>
 80070c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d504      	bpl.n	80070da <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f240 5214 	movw	r2, #1300	; 0x514
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24
 80070d8:	e00f      	b.n	80070fa <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	ee07 3a90 	vmov	s15, r3
 80070e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80070ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f2:	ee17 2a90 	vmov	r2, s15
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007106:	edd7 7a08 	vldr	s15, [r7, #32]
 800710a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800710e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007188 <Pid_CompensatePitch+0x184>
 8007112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	dd04      	ble.n	8007126 <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
 8007124:	e025      	b.n	8007172 <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	ee07 3a90 	vmov	s15, r3
 800712e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007132:	edd7 7a08 	vldr	s15, [r7, #32]
 8007136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800713a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800718c <Pid_CompensatePitch+0x188>
 800713e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007146:	d504      	bpl.n	8007152 <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	f240 5214 	movw	r2, #1300	; 0x514
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
 8007150:	e00f      	b.n	8007172 <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800715e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800716a:	ee17 2a90 	vmov	r2, s15
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007172:	6838      	ldr	r0, [r7, #0]
 8007174:	f000 f82a 	bl	80071cc <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007178:	6838      	ldr	r0, [r7, #0]
 800717a:	f000 f845 	bl	8007208 <PropulsionAndControl_UpdateRightFlaps>

}
 800717e:	bf00      	nop
 8007180:	3728      	adds	r7, #40	; 0x28
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	455ac000 	.word	0x455ac000
 800718c:	44a28000 	.word	0x44a28000

08007190 <PropulsionAndControl_UpdateESC>:
DESCRIPTION - Driver for 2 servo motor and 1 ESC. It generate a pwm at 50hz on 3 different channel
*******************************************************)*/
#include <propulsion_and_control.h>


void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3334      	adds	r3, #52	; 0x34
 80071a0:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7f1b      	ldrb	r3, [r3, #28]
 80071a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071aa:	3b01      	subs	r3, #1
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6a12      	ldr	r2, [r2, #32]
 80071b6:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 80071cc:	b480      	push	{r7}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3334      	adds	r3, #52	; 0x34
 80071dc:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7f5b      	ldrb	r3, [r3, #29]
 80071e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071e6:	3b01      	subs	r3, #1
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071f2:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	699b      	ldr	r3, [r3, #24]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3334      	adds	r3, #52	; 0x34
 8007218:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	7f9b      	ldrb	r3, [r3, #30]
 800721e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007222:	3b01      	subs	r3, #1
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800722e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007238:	bf00      	nop
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	b2da      	uxtb	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	b2da      	uxtb	r2, r3
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a3a      	ldr	r2, [r7, #32]
 8007284:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	osDelay(20);
 8007294:	2014      	movs	r0, #20
 8007296:	f000 fceb 	bl	8007c70 <HAL_Delay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f240 5214 	movw	r2, #1300	; 0x514
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff ff92 	bl	80071cc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f640 52ac 	movw	r2, #3500	; 0xdac
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f7ff ffa9 	bl	8007208 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	osDelay(1500);
 80072b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80072ba:	f000 fcd9 	bl	8007c70 <HAL_Delay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f640 52ac 	movw	r2, #3500	; 0xdac
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f7ff ff80 	bl	80071cc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f240 5214 	movw	r2, #1300	; 0x514
 80072d2:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff ff97 	bl	8007208 <PropulsionAndControl_UpdateRightFlaps>

	osDelay(1500);
 80072da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80072de:	f000 fcc7 	bl	8007c70 <HAL_Delay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff ff6e 	bl	80071cc <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80072f6:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff ff85 	bl	8007208 <PropulsionAndControl_UpdateRightFlaps>
}

 80072fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007302:	f000 fcb5 	bl	8007c70 <HAL_Delay>

 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800730c:	621a      	str	r2, [r3, #32]

 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff3e 	bl	8007190 <PropulsionAndControl_UpdateESC>
void PropulsionAndControl_EscSetValue(PROPULSION_t *propulsion,float esc_power){
 8007314:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007318:	f000 fcaa 	bl	8007c70 <HAL_Delay>
	//esc power represent the esc power in %
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f241 7270 	movw	r2, #6000	; 0x1770
 8007322:	621a      	str	r2, [r3, #32]

 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff ff33 	bl	8007190 <PropulsionAndControl_UpdateESC>
	//Use a quick and easy "triangle rule" --> in french its call "regle de trois" or y = ax+b coeef equal --> Min/100
 800732a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800732e:	f000 fc9f 	bl	8007c70 <HAL_Delay>
	uint32_t timer_value = ((MIN_PROPULSION_LEVEL/100)*esc_power) + MIN_PROPULSION_LEVEL;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007338:	621a      	str	r2, [r3, #32]

 800733a:	68f8      	ldr	r0, [r7, #12]
 800733c:	f7ff ff28 	bl	8007190 <PropulsionAndControl_UpdateESC>
	//Add into the struct the timer value
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <HAL_MspInit+0x4c>)
 8007350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007352:	4a10      	ldr	r2, [pc, #64]	; (8007394 <HAL_MspInit+0x4c>)
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	6613      	str	r3, [r2, #96]	; 0x60
 800735a:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <HAL_MspInit+0x4c>)
 800735c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	607b      	str	r3, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <HAL_MspInit+0x4c>)
 8007368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736a:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <HAL_MspInit+0x4c>)
 800736c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007370:	6593      	str	r3, [r2, #88]	; 0x58
 8007372:	4b08      	ldr	r3, [pc, #32]	; (8007394 <HAL_MspInit+0x4c>)
 8007374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800737a:	603b      	str	r3, [r7, #0]
 800737c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800737e:	2200      	movs	r2, #0
 8007380:	210f      	movs	r1, #15
 8007382:	f06f 0001 	mvn.w	r0, #1
 8007386:	f001 ff59 	bl	800923c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40021000 	.word	0x40021000

08007398 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08c      	sub	sp, #48	; 0x30
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80073a8:	4b2c      	ldr	r3, [pc, #176]	; (800745c <HAL_InitTick+0xc4>)
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	4a2b      	ldr	r2, [pc, #172]	; (800745c <HAL_InitTick+0xc4>)
 80073ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80073b2:	6613      	str	r3, [r2, #96]	; 0x60
 80073b4:	4b29      	ldr	r3, [pc, #164]	; (800745c <HAL_InitTick+0xc4>)
 80073b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80073c0:	f107 020c 	add.w	r2, r7, #12
 80073c4:	f107 0310 	add.w	r3, r7, #16
 80073c8:	4611      	mov	r1, r2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f003 fff4 	bl	800b3b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80073d0:	f003 ffdc 	bl	800b38c <HAL_RCC_GetPCLK2Freq>
 80073d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80073d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d8:	4a21      	ldr	r2, [pc, #132]	; (8007460 <HAL_InitTick+0xc8>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	0c9b      	lsrs	r3, r3, #18
 80073e0:	3b01      	subs	r3, #1
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80073e4:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <HAL_InitTick+0xcc>)
 80073e6:	4a20      	ldr	r2, [pc, #128]	; (8007468 <HAL_InitTick+0xd0>)
 80073e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80073ea:	4b1e      	ldr	r3, [pc, #120]	; (8007464 <HAL_InitTick+0xcc>)
 80073ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80073f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80073f2:	4a1c      	ldr	r2, [pc, #112]	; (8007464 <HAL_InitTick+0xcc>)
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <HAL_InitTick+0xcc>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073fe:	4b19      	ldr	r3, [pc, #100]	; (8007464 <HAL_InitTick+0xcc>)
 8007400:	2200      	movs	r2, #0
 8007402:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007404:	4817      	ldr	r0, [pc, #92]	; (8007464 <HAL_InitTick+0xcc>)
 8007406:	f004 fa9d 	bl	800b944 <HAL_TIM_Base_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007414:	2b00      	cmp	r3, #0
 8007416:	d11b      	bne.n	8007450 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007418:	4812      	ldr	r0, [pc, #72]	; (8007464 <HAL_InitTick+0xcc>)
 800741a:	f004 faf5 	bl	800ba08 <HAL_TIM_Base_Start_IT>
 800741e:	4603      	mov	r3, r0
 8007420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007428:	2b00      	cmp	r3, #0
 800742a:	d111      	bne.n	8007450 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800742c:	2019      	movs	r0, #25
 800742e:	f001 ff1f 	bl	8009270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b0f      	cmp	r3, #15
 8007436:	d808      	bhi.n	800744a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007438:	2200      	movs	r2, #0
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	2019      	movs	r0, #25
 800743e:	f001 fefd 	bl	800923c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007442:	4a0a      	ldr	r2, [pc, #40]	; (800746c <HAL_InitTick+0xd4>)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6013      	str	r3, [r2, #0]
 8007448:	e002      	b.n	8007450 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007454:	4618      	mov	r0, r3
 8007456:	3730      	adds	r7, #48	; 0x30
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40021000 	.word	0x40021000
 8007460:	431bde83 	.word	0x431bde83
 8007464:	20000720 	.word	0x20000720
 8007468:	40012c00 	.word	0x40012c00
 800746c:	20000008 	.word	0x20000008

08007470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <NMI_Handler+0x4>

08007476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800747a:	e7fe      	b.n	800747a <HardFault_Handler+0x4>

0800747c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007480:	e7fe      	b.n	8007480 <MemManage_Handler+0x4>

08007482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007482:	b480      	push	{r7}
 8007484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007486:	e7fe      	b.n	8007486 <BusFault_Handler+0x4>

08007488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800748c:	e7fe      	b.n	800748c <UsageFault_Handler+0x4>

0800748e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007492:	bf00      	nop
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80074a0:	4802      	ldr	r0, [pc, #8]	; (80074ac <DMA1_Channel1_IRQHandler+0x10>)
 80074a2:	f002 f8d6 	bl	8009652 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80074a6:	bf00      	nop
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000100 	.word	0x20000100

080074b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80074b4:	4802      	ldr	r0, [pc, #8]	; (80074c0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80074b6:	f004 fc89 	bl	800bdcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80074ba:	bf00      	nop
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000720 	.word	0x20000720

080074c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 80074c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80074cc:	f002 fbc4 	bl	8009c58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 80074d0:	4805      	ldr	r0, [pc, #20]	; (80074e8 <EXTI15_10_IRQHandler+0x24>)
 80074d2:	f7fe fc50 	bl	8005d76 <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <EXTI15_10_IRQHandler+0x28>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2101      	movs	r1, #1
 80074dc:	4618      	mov	r0, r3
 80074de:	f007 feef 	bl	800f2c0 <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80074e2:	bf00      	nop
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	200001f8 	.word	0x200001f8
 80074ec:	200001f4 	.word	0x200001f4

080074f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80074f4:	4805      	ldr	r0, [pc, #20]	; (800750c <UART4_IRQHandler+0x1c>)
 80074f6:	f005 fc9f 	bl	800ce38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 80074fa:	4b05      	ldr	r3, [pc, #20]	; (8007510 <UART4_IRQHandler+0x20>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2100      	movs	r1, #0
 8007500:	4618      	mov	r0, r3
 8007502:	f007 fedd 	bl	800f2c0 <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007506:	bf00      	nop
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000850 	.word	0x20000850
 8007510:	200001f0 	.word	0x200001f0

08007514 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007518:	4802      	ldr	r0, [pc, #8]	; (8007524 <UART5_IRQHandler+0x10>)
 800751a:	f005 fc8d 	bl	800ce38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800751e:	bf00      	nop
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	200008e0 	.word	0x200008e0

08007528 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800752c:	4b07      	ldr	r3, [pc, #28]	; (800754c <SystemInit+0x24>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	4a06      	ldr	r2, [pc, #24]	; (800754c <SystemInit+0x24>)
 8007534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <SystemInit+0x24>)
 800753e:	4a04      	ldr	r2, [pc, #16]	; (8007550 <SystemInit+0x28>)
 8007540:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007542:	bf00      	nop
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	e000ed00 	.word	0xe000ed00
 8007550:	08004000 	.word	0x08004000

08007554 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08a      	sub	sp, #40	; 0x28
 8007558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800755a:	f107 031c 	add.w	r3, r7, #28
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
 8007562:	605a      	str	r2, [r3, #4]
 8007564:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007566:	463b      	mov	r3, r7
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	611a      	str	r2, [r3, #16]
 8007574:	615a      	str	r2, [r3, #20]
 8007576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007578:	4b20      	ldr	r3, [pc, #128]	; (80075fc <MX_TIM2_Init+0xa8>)
 800757a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800757e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007580:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <MX_TIM2_Init+0xa8>)
 8007582:	2200      	movs	r2, #0
 8007584:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007586:	4b1d      	ldr	r3, [pc, #116]	; (80075fc <MX_TIM2_Init+0xa8>)
 8007588:	2200      	movs	r2, #0
 800758a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 800758c:	4b1b      	ldr	r3, [pc, #108]	; (80075fc <MX_TIM2_Init+0xa8>)
 800758e:	4a1c      	ldr	r2, [pc, #112]	; (8007600 <MX_TIM2_Init+0xac>)
 8007590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007592:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <MX_TIM2_Init+0xa8>)
 8007594:	2200      	movs	r2, #0
 8007596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007598:	4b18      	ldr	r3, [pc, #96]	; (80075fc <MX_TIM2_Init+0xa8>)
 800759a:	2200      	movs	r2, #0
 800759c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800759e:	4817      	ldr	r0, [pc, #92]	; (80075fc <MX_TIM2_Init+0xa8>)
 80075a0:	f004 faaa 	bl	800baf8 <HAL_TIM_PWM_Init>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80075aa:	f7ff fbb7 	bl	8006d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075ae:	2300      	movs	r3, #0
 80075b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075b2:	2300      	movs	r3, #0
 80075b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80075b6:	f107 031c 	add.w	r3, r7, #28
 80075ba:	4619      	mov	r1, r3
 80075bc:	480f      	ldr	r0, [pc, #60]	; (80075fc <MX_TIM2_Init+0xa8>)
 80075be:	f005 fab9 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d001      	beq.n	80075cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80075c8:	f7ff fba8 	bl	8006d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075cc:	2360      	movs	r3, #96	; 0x60
 80075ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80075d0:	2300      	movs	r3, #0
 80075d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80075dc:	463b      	mov	r3, r7
 80075de:	2208      	movs	r2, #8
 80075e0:	4619      	mov	r1, r3
 80075e2:	4806      	ldr	r0, [pc, #24]	; (80075fc <MX_TIM2_Init+0xa8>)
 80075e4:	f004 fd72 	bl	800c0cc <HAL_TIM_PWM_ConfigChannel>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80075ee:	f7ff fb95 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80075f2:	bf00      	nop
 80075f4:	3728      	adds	r7, #40	; 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	2000076c 	.word	0x2000076c
 8007600:	0015f900 	.word	0x0015f900

08007604 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	; 0x28
 8007608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800760a:	f107 031c 	add.w	r3, r7, #28
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
 8007614:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007616:	463b      	mov	r3, r7
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]
 8007624:	615a      	str	r2, [r3, #20]
 8007626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007628:	4b21      	ldr	r3, [pc, #132]	; (80076b0 <MX_TIM3_Init+0xac>)
 800762a:	4a22      	ldr	r2, [pc, #136]	; (80076b4 <MX_TIM3_Init+0xb0>)
 800762c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 800762e:	4b20      	ldr	r3, [pc, #128]	; (80076b0 <MX_TIM3_Init+0xac>)
 8007630:	2232      	movs	r2, #50	; 0x32
 8007632:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007634:	4b1e      	ldr	r3, [pc, #120]	; (80076b0 <MX_TIM3_Init+0xac>)
 8007636:	2200      	movs	r2, #0
 8007638:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 800763a:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <MX_TIM3_Init+0xac>)
 800763c:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8007640:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007642:	4b1b      	ldr	r3, [pc, #108]	; (80076b0 <MX_TIM3_Init+0xac>)
 8007644:	2200      	movs	r2, #0
 8007646:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007648:	4b19      	ldr	r3, [pc, #100]	; (80076b0 <MX_TIM3_Init+0xac>)
 800764a:	2200      	movs	r2, #0
 800764c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800764e:	4818      	ldr	r0, [pc, #96]	; (80076b0 <MX_TIM3_Init+0xac>)
 8007650:	f004 fa52 	bl	800baf8 <HAL_TIM_PWM_Init>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800765a:	f7ff fb5f 	bl	8006d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007662:	2300      	movs	r3, #0
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	4619      	mov	r1, r3
 800766c:	4810      	ldr	r0, [pc, #64]	; (80076b0 <MX_TIM3_Init+0xac>)
 800766e:	f005 fa61 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007678:	f7ff fb50 	bl	8006d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800767c:	2360      	movs	r3, #96	; 0x60
 800767e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007684:	2300      	movs	r3, #0
 8007686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007688:	2300      	movs	r3, #0
 800768a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800768c:	463b      	mov	r3, r7
 800768e:	2200      	movs	r2, #0
 8007690:	4619      	mov	r1, r3
 8007692:	4807      	ldr	r0, [pc, #28]	; (80076b0 <MX_TIM3_Init+0xac>)
 8007694:	f004 fd1a 	bl	800c0cc <HAL_TIM_PWM_ConfigChannel>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800769e:	f7ff fb3d 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80076a2:	4803      	ldr	r0, [pc, #12]	; (80076b0 <MX_TIM3_Init+0xac>)
 80076a4:	f000 f8c2 	bl	800782c <HAL_TIM_MspPostInit>

}
 80076a8:	bf00      	nop
 80076aa:	3728      	adds	r7, #40	; 0x28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	200007b8 	.word	0x200007b8
 80076b4:	40000400 	.word	0x40000400

080076b8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08a      	sub	sp, #40	; 0x28
 80076bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076be:	f107 031c 	add.w	r3, r7, #28
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	605a      	str	r2, [r3, #4]
 80076c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076ca:	463b      	mov	r3, r7
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	609a      	str	r2, [r3, #8]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	611a      	str	r2, [r3, #16]
 80076d8:	615a      	str	r2, [r3, #20]
 80076da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80076dc:	4b2e      	ldr	r3, [pc, #184]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076de:	4a2f      	ldr	r2, [pc, #188]	; (800779c <MX_TIM4_Init+0xe4>)
 80076e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 80076e2:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076e4:	2232      	movs	r2, #50	; 0x32
 80076e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076e8:	4b2b      	ldr	r3, [pc, #172]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 80076ee:	4b2a      	ldr	r3, [pc, #168]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076f0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80076f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076f6:	4b28      	ldr	r3, [pc, #160]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076fc:	4b26      	ldr	r3, [pc, #152]	; (8007798 <MX_TIM4_Init+0xe0>)
 80076fe:	2200      	movs	r2, #0
 8007700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007702:	4825      	ldr	r0, [pc, #148]	; (8007798 <MX_TIM4_Init+0xe0>)
 8007704:	f004 f9f8 	bl	800baf8 <HAL_TIM_PWM_Init>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d001      	beq.n	8007712 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800770e:	f7ff fb05 	bl	8006d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007712:	2300      	movs	r3, #0
 8007714:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007716:	2300      	movs	r3, #0
 8007718:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800771a:	f107 031c 	add.w	r3, r7, #28
 800771e:	4619      	mov	r1, r3
 8007720:	481d      	ldr	r0, [pc, #116]	; (8007798 <MX_TIM4_Init+0xe0>)
 8007722:	f005 fa07 	bl	800cb34 <HAL_TIMEx_MasterConfigSynchronization>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800772c:	f7ff faf6 	bl	8006d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007730:	2360      	movs	r3, #96	; 0x60
 8007732:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8007734:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8007738:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007742:	463b      	mov	r3, r7
 8007744:	2200      	movs	r2, #0
 8007746:	4619      	mov	r1, r3
 8007748:	4813      	ldr	r0, [pc, #76]	; (8007798 <MX_TIM4_Init+0xe0>)
 800774a:	f004 fcbf 	bl	800c0cc <HAL_TIM_PWM_ConfigChannel>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8007754:	f7ff fae2 	bl	8006d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007758:	463b      	mov	r3, r7
 800775a:	2204      	movs	r2, #4
 800775c:	4619      	mov	r1, r3
 800775e:	480e      	ldr	r0, [pc, #56]	; (8007798 <MX_TIM4_Init+0xe0>)
 8007760:	f004 fcb4 	bl	800c0cc <HAL_TIM_PWM_ConfigChannel>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800776a:	f7ff fad7 	bl	8006d1c <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 800776e:	f241 7370 	movw	r3, #6000	; 0x1770
 8007772:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007774:	463b      	mov	r3, r7
 8007776:	220c      	movs	r2, #12
 8007778:	4619      	mov	r1, r3
 800777a:	4807      	ldr	r0, [pc, #28]	; (8007798 <MX_TIM4_Init+0xe0>)
 800777c:	f004 fca6 	bl	800c0cc <HAL_TIM_PWM_ConfigChannel>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8007786:	f7ff fac9 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800778a:	4803      	ldr	r0, [pc, #12]	; (8007798 <MX_TIM4_Init+0xe0>)
 800778c:	f000 f84e 	bl	800782c <HAL_TIM_MspPostInit>

}
 8007790:	bf00      	nop
 8007792:	3728      	adds	r7, #40	; 0x28
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000804 	.word	0x20000804
 800779c:	40000800 	.word	0x40000800

080077a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b0:	d10c      	bne.n	80077cc <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80077b2:	4b1b      	ldr	r3, [pc, #108]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b6:	4a1a      	ldr	r2, [pc, #104]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077b8:	f043 0301 	orr.w	r3, r3, #1
 80077bc:	6593      	str	r3, [r2, #88]	; 0x58
 80077be:	4b18      	ldr	r3, [pc, #96]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80077ca:	e022      	b.n	8007812 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a14      	ldr	r2, [pc, #80]	; (8007824 <HAL_TIM_PWM_MspInit+0x84>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d10c      	bne.n	80077f0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80077d6:	4b12      	ldr	r3, [pc, #72]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077da:	4a11      	ldr	r2, [pc, #68]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077dc:	f043 0302 	orr.w	r3, r3, #2
 80077e0:	6593      	str	r3, [r2, #88]	; 0x58
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
}
 80077ee:	e010      	b.n	8007812 <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <HAL_TIM_PWM_MspInit+0x88>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d10b      	bne.n	8007812 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80077fa:	4b09      	ldr	r3, [pc, #36]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077fe:	4a08      	ldr	r2, [pc, #32]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 8007800:	f043 0304 	orr.w	r3, r3, #4
 8007804:	6593      	str	r3, [r2, #88]	; 0x58
 8007806:	4b06      	ldr	r3, [pc, #24]	; (8007820 <HAL_TIM_PWM_MspInit+0x80>)
 8007808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
}
 8007812:	bf00      	nop
 8007814:	371c      	adds	r7, #28
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	40021000 	.word	0x40021000
 8007824:	40000400 	.word	0x40000400
 8007828:	40000800 	.word	0x40000800

0800782c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007834:	f107 0314 	add.w	r3, r7, #20
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
 800783c:	605a      	str	r2, [r3, #4]
 800783e:	609a      	str	r2, [r3, #8]
 8007840:	60da      	str	r2, [r3, #12]
 8007842:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a22      	ldr	r2, [pc, #136]	; (80078d4 <HAL_TIM_MspPostInit+0xa8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d11c      	bne.n	8007888 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800784e:	4b22      	ldr	r3, [pc, #136]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 8007850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007852:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 8007854:	f043 0304 	orr.w	r3, r3, #4
 8007858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800785a:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 800785c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007866:	2340      	movs	r3, #64	; 0x40
 8007868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800786a:	2302      	movs	r3, #2
 800786c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007872:	2300      	movs	r3, #0
 8007874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007876:	2302      	movs	r3, #2
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800787a:	f107 0314 	add.w	r3, r7, #20
 800787e:	4619      	mov	r1, r3
 8007880:	4816      	ldr	r0, [pc, #88]	; (80078dc <HAL_TIM_MspPostInit+0xb0>)
 8007882:	f002 f835 	bl	80098f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007886:	e021      	b.n	80078cc <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <HAL_TIM_MspPostInit+0xb4>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d11c      	bne.n	80078cc <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007892:	4b11      	ldr	r3, [pc, #68]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	4a10      	ldr	r2, [pc, #64]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 8007898:	f043 0302 	orr.w	r3, r3, #2
 800789c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800789e:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <HAL_TIM_MspPostInit+0xac>)
 80078a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80078aa:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80078ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078b0:	2302      	movs	r3, #2
 80078b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b8:	2300      	movs	r3, #0
 80078ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80078bc:	2302      	movs	r3, #2
 80078be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078c0:	f107 0314 	add.w	r3, r7, #20
 80078c4:	4619      	mov	r1, r3
 80078c6:	4807      	ldr	r0, [pc, #28]	; (80078e4 <HAL_TIM_MspPostInit+0xb8>)
 80078c8:	f002 f812 	bl	80098f0 <HAL_GPIO_Init>
}
 80078cc:	bf00      	nop
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40000400 	.word	0x40000400
 80078d8:	40021000 	.word	0x40021000
 80078dc:	48000800 	.word	0x48000800
 80078e0:	40000800 	.word	0x40000800
 80078e4:	48000400 	.word	0x48000400

080078e8 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <MX_UART4_Init+0x90>)
 80078ee:	4a23      	ldr	r2, [pc, #140]	; (800797c <MX_UART4_Init+0x94>)
 80078f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80078f2:	4b21      	ldr	r3, [pc, #132]	; (8007978 <MX_UART4_Init+0x90>)
 80078f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80078f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80078fa:	4b1f      	ldr	r3, [pc, #124]	; (8007978 <MX_UART4_Init+0x90>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007900:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <MX_UART4_Init+0x90>)
 8007902:	2200      	movs	r2, #0
 8007904:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007906:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <MX_UART4_Init+0x90>)
 8007908:	2200      	movs	r2, #0
 800790a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <MX_UART4_Init+0x90>)
 800790e:	220c      	movs	r2, #12
 8007910:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007912:	4b19      	ldr	r3, [pc, #100]	; (8007978 <MX_UART4_Init+0x90>)
 8007914:	2200      	movs	r2, #0
 8007916:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007918:	4b17      	ldr	r3, [pc, #92]	; (8007978 <MX_UART4_Init+0x90>)
 800791a:	2200      	movs	r2, #0
 800791c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800791e:	4b16      	ldr	r3, [pc, #88]	; (8007978 <MX_UART4_Init+0x90>)
 8007920:	2200      	movs	r2, #0
 8007922:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007924:	4b14      	ldr	r3, [pc, #80]	; (8007978 <MX_UART4_Init+0x90>)
 8007926:	2200      	movs	r2, #0
 8007928:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <MX_UART4_Init+0x90>)
 800792c:	2200      	movs	r2, #0
 800792e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007930:	4811      	ldr	r0, [pc, #68]	; (8007978 <MX_UART4_Init+0x90>)
 8007932:	f005 f9db 	bl	800ccec <HAL_UART_Init>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d001      	beq.n	8007940 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800793c:	f7ff f9ee 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007940:	2100      	movs	r1, #0
 8007942:	480d      	ldr	r0, [pc, #52]	; (8007978 <MX_UART4_Init+0x90>)
 8007944:	f007 f8f1 	bl	800eb2a <HAL_UARTEx_SetTxFifoThreshold>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800794e:	f7ff f9e5 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007952:	2100      	movs	r1, #0
 8007954:	4808      	ldr	r0, [pc, #32]	; (8007978 <MX_UART4_Init+0x90>)
 8007956:	f007 f926 	bl	800eba6 <HAL_UARTEx_SetRxFifoThreshold>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d001      	beq.n	8007964 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007960:	f7ff f9dc 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007964:	4804      	ldr	r0, [pc, #16]	; (8007978 <MX_UART4_Init+0x90>)
 8007966:	f007 f8a7 	bl	800eab8 <HAL_UARTEx_DisableFifoMode>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007970:	f7ff f9d4 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007974:	bf00      	nop
 8007976:	bd80      	pop	{r7, pc}
 8007978:	20000850 	.word	0x20000850
 800797c:	40004c00 	.word	0x40004c00

08007980 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007984:	4b22      	ldr	r3, [pc, #136]	; (8007a10 <MX_UART5_Init+0x90>)
 8007986:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <MX_UART5_Init+0x94>)
 8007988:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800798a:	4b21      	ldr	r3, [pc, #132]	; (8007a10 <MX_UART5_Init+0x90>)
 800798c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007990:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007992:	4b1f      	ldr	r3, [pc, #124]	; (8007a10 <MX_UART5_Init+0x90>)
 8007994:	2200      	movs	r2, #0
 8007996:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007998:	4b1d      	ldr	r3, [pc, #116]	; (8007a10 <MX_UART5_Init+0x90>)
 800799a:	2200      	movs	r2, #0
 800799c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800799e:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <MX_UART5_Init+0x90>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80079a4:	4b1a      	ldr	r3, [pc, #104]	; (8007a10 <MX_UART5_Init+0x90>)
 80079a6:	220c      	movs	r2, #12
 80079a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079aa:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <MX_UART5_Init+0x90>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <MX_UART5_Init+0x90>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079b6:	4b16      	ldr	r3, [pc, #88]	; (8007a10 <MX_UART5_Init+0x90>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80079bc:	4b14      	ldr	r3, [pc, #80]	; (8007a10 <MX_UART5_Init+0x90>)
 80079be:	2200      	movs	r2, #0
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079c2:	4b13      	ldr	r3, [pc, #76]	; (8007a10 <MX_UART5_Init+0x90>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80079c8:	4811      	ldr	r0, [pc, #68]	; (8007a10 <MX_UART5_Init+0x90>)
 80079ca:	f005 f98f 	bl	800ccec <HAL_UART_Init>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80079d4:	f7ff f9a2 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079d8:	2100      	movs	r1, #0
 80079da:	480d      	ldr	r0, [pc, #52]	; (8007a10 <MX_UART5_Init+0x90>)
 80079dc:	f007 f8a5 	bl	800eb2a <HAL_UARTEx_SetTxFifoThreshold>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80079e6:	f7ff f999 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80079ea:	2100      	movs	r1, #0
 80079ec:	4808      	ldr	r0, [pc, #32]	; (8007a10 <MX_UART5_Init+0x90>)
 80079ee:	f007 f8da 	bl	800eba6 <HAL_UARTEx_SetRxFifoThreshold>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80079f8:	f7ff f990 	bl	8006d1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80079fc:	4804      	ldr	r0, [pc, #16]	; (8007a10 <MX_UART5_Init+0x90>)
 80079fe:	f007 f85b 	bl	800eab8 <HAL_UARTEx_DisableFifoMode>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8007a08:	f7ff f988 	bl	8006d1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	200008e0 	.word	0x200008e0
 8007a14:	40005000 	.word	0x40005000

08007a18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b0a2      	sub	sp, #136	; 0x88
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a20:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
 8007a28:	605a      	str	r2, [r3, #4]
 8007a2a:	609a      	str	r2, [r3, #8]
 8007a2c:	60da      	str	r2, [r3, #12]
 8007a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a30:	f107 0320 	add.w	r3, r7, #32
 8007a34:	2254      	movs	r2, #84	; 0x54
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f009 fa75 	bl	8010f28 <memset>
  if(uartHandle->Instance==UART4)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a56      	ldr	r2, [pc, #344]	; (8007b9c <HAL_UART_MspInit+0x184>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d141      	bne.n	8007acc <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007a48:	2308      	movs	r3, #8
 8007a4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a50:	f107 0320 	add.w	r3, r7, #32
 8007a54:	4618      	mov	r0, r3
 8007a56:	f003 fd27 	bl	800b4a8 <HAL_RCCEx_PeriphCLKConfig>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d001      	beq.n	8007a64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007a60:	f7ff f95c 	bl	8006d1c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007a64:	4b4e      	ldr	r3, [pc, #312]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a68:	4a4d      	ldr	r2, [pc, #308]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8007a70:	4b4b      	ldr	r3, [pc, #300]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a78:	61fb      	str	r3, [r7, #28]
 8007a7a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a7c:	4b48      	ldr	r3, [pc, #288]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a80:	4a47      	ldr	r2, [pc, #284]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a82:	f043 0304 	orr.w	r3, r3, #4
 8007a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a88:	4b45      	ldr	r3, [pc, #276]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	61bb      	str	r3, [r7, #24]
 8007a92:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007a94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007a98:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8007aa8:	2305      	movs	r3, #5
 8007aaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007aae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	483b      	ldr	r0, [pc, #236]	; (8007ba4 <HAL_UART_MspInit+0x18c>)
 8007ab6:	f001 ff1b 	bl	80098f0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8007aba:	2200      	movs	r2, #0
 8007abc:	2105      	movs	r1, #5
 8007abe:	2034      	movs	r0, #52	; 0x34
 8007ac0:	f001 fbbc 	bl	800923c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007ac4:	2034      	movs	r0, #52	; 0x34
 8007ac6:	f001 fbd3 	bl	8009270 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8007aca:	e063      	b.n	8007b94 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a35      	ldr	r2, [pc, #212]	; (8007ba8 <HAL_UART_MspInit+0x190>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d15e      	bne.n	8007b94 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007ad6:	2310      	movs	r3, #16
 8007ad8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ade:	f107 0320 	add.w	r3, r7, #32
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f003 fce0 	bl	800b4a8 <HAL_RCCEx_PeriphCLKConfig>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <HAL_UART_MspInit+0xda>
      Error_Handler();
 8007aee:	f7ff f915 	bl	8006d1c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007af2:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af6:	4a2a      	ldr	r2, [pc, #168]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007afc:	6593      	str	r3, [r2, #88]	; 0x58
 8007afe:	4b28      	ldr	r3, [pc, #160]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b0a:	4b25      	ldr	r3, [pc, #148]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0e:	4a24      	ldr	r2, [pc, #144]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b10:	f043 0304 	orr.w	r3, r3, #4
 8007b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b16:	4b22      	ldr	r3, [pc, #136]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b28:	f043 0308 	orr.w	r3, r3, #8
 8007b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <HAL_UART_MspInit+0x188>)
 8007b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b32:	f003 0308 	and.w	r3, r3, #8
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b40:	2302      	movs	r3, #2
 8007b42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007b4e:	2305      	movs	r3, #5
 8007b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007b58:	4619      	mov	r1, r3
 8007b5a:	4812      	ldr	r0, [pc, #72]	; (8007ba4 <HAL_UART_MspInit+0x18c>)
 8007b5c:	f001 fec8 	bl	80098f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007b60:	2304      	movs	r3, #4
 8007b62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b64:	2302      	movs	r3, #2
 8007b66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007b72:	2305      	movs	r3, #5
 8007b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	480b      	ldr	r0, [pc, #44]	; (8007bac <HAL_UART_MspInit+0x194>)
 8007b80:	f001 feb6 	bl	80098f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8007b84:	2200      	movs	r2, #0
 8007b86:	2105      	movs	r1, #5
 8007b88:	2035      	movs	r0, #53	; 0x35
 8007b8a:	f001 fb57 	bl	800923c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007b8e:	2035      	movs	r0, #53	; 0x35
 8007b90:	f001 fb6e 	bl	8009270 <HAL_NVIC_EnableIRQ>
}
 8007b94:	bf00      	nop
 8007b96:	3788      	adds	r7, #136	; 0x88
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	40004c00 	.word	0x40004c00
 8007ba0:	40021000 	.word	0x40021000
 8007ba4:	48000800 	.word	0x48000800
 8007ba8:	40005000 	.word	0x40005000
 8007bac:	48000c00 	.word	0x48000c00

08007bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007bb0:	480d      	ldr	r0, [pc, #52]	; (8007be8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007bb2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007bb4:	480d      	ldr	r0, [pc, #52]	; (8007bec <LoopForever+0x6>)
  ldr r1, =_edata
 8007bb6:	490e      	ldr	r1, [pc, #56]	; (8007bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007bb8:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <LoopForever+0xe>)
  movs r3, #0
 8007bba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007bbc:	e002      	b.n	8007bc4 <LoopCopyDataInit>

08007bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007bc2:	3304      	adds	r3, #4

08007bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007bc8:	d3f9      	bcc.n	8007bbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007bca:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007bcc:	4c0b      	ldr	r4, [pc, #44]	; (8007bfc <LoopForever+0x16>)
  movs r3, #0
 8007bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007bd0:	e001      	b.n	8007bd6 <LoopFillZerobss>

08007bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007bd4:	3204      	adds	r2, #4

08007bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007bd8:	d3fb      	bcc.n	8007bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007bda:	f7ff fca5 	bl	8007528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bde:	f009 fa07 	bl	8010ff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007be2:	f7ff f801 	bl	8006be8 <main>

08007be6 <LoopForever>:

LoopForever:
    b LoopForever
 8007be6:	e7fe      	b.n	8007be6 <LoopForever>
  ldr   r0, =_estack
 8007be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007bf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8007bf4:	08012118 	.word	0x08012118
  ldr r2, =_sbss
 8007bf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8007bfc:	20003c08 	.word	0x20003c08

08007c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007c00:	e7fe      	b.n	8007c00 <ADC1_2_IRQHandler>

08007c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c0c:	2003      	movs	r0, #3
 8007c0e:	f001 fb0a 	bl	8009226 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c12:	200f      	movs	r0, #15
 8007c14:	f7ff fbc0 	bl	8007398 <HAL_InitTick>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	71fb      	strb	r3, [r7, #7]
 8007c22:	e001      	b.n	8007c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007c24:	f7ff fb90 	bl	8007348 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007c28:	79fb      	ldrb	r3, [r7, #7]

}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
	...

08007c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007c34:	b480      	push	{r7}
 8007c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <HAL_IncTick+0x1c>)
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <HAL_IncTick+0x20>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4413      	add	r3, r2
 8007c42:	4a03      	ldr	r2, [pc, #12]	; (8007c50 <HAL_IncTick+0x1c>)
 8007c44:	6013      	str	r3, [r2, #0]
}
 8007c46:	bf00      	nop
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	20000970 	.word	0x20000970
 8007c54:	2000000c 	.word	0x2000000c

08007c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007c5c:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <HAL_GetTick+0x14>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000970 	.word	0x20000970

08007c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007c78:	f7ff ffee 	bl	8007c58 <HAL_GetTick>
 8007c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d004      	beq.n	8007c94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_Delay+0x40>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c94:	bf00      	nop
 8007c96:	f7ff ffdf 	bl	8007c58 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d8f7      	bhi.n	8007c96 <HAL_Delay+0x26>
  {
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	2000000c 	.word	0x2000000c

08007cb4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	bf00      	nop
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	431a      	orrs	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	609a      	str	r2, [r3, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3360      	adds	r3, #96	; 0x60
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4413      	add	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <LL_ADC_SetOffset+0x44>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	430a      	orrs	r2, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007d54:	bf00      	nop
 8007d56:	371c      	adds	r7, #28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	03fff000 	.word	0x03fff000

08007d64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3360      	adds	r3, #96	; 0x60
 8007d72:	461a      	mov	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3360      	adds	r3, #96	; 0x60
 8007da0:	461a      	mov	r2, r3
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	431a      	orrs	r2, r3
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007dba:	bf00      	nop
 8007dbc:	371c      	adds	r7, #28
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b087      	sub	sp, #28
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3360      	adds	r3, #96	; 0x60
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4413      	add	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	431a      	orrs	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3360      	adds	r3, #96	; 0x60
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4413      	add	r3, r2
 8007e14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	615a      	str	r2, [r3, #20]
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	3330      	adds	r3, #48	; 0x30
 8007e8e:	461a      	mov	r2, r3
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	0a1b      	lsrs	r3, r3, #8
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	f003 030c 	and.w	r3, r3, #12
 8007e9a:	4413      	add	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f003 031f 	and.w	r3, r3, #31
 8007ea8:	211f      	movs	r1, #31
 8007eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007eae:	43db      	mvns	r3, r3
 8007eb0:	401a      	ands	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	0e9b      	lsrs	r3, r3, #26
 8007eb6:	f003 011f 	and.w	r1, r3, #31
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007eca:	bf00      	nop
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b087      	sub	sp, #28
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	0e5b      	lsrs	r3, r3, #25
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	4413      	add	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	0d1b      	lsrs	r3, r3, #20
 8007efe:	f003 031f 	and.w	r3, r3, #31
 8007f02:	2107      	movs	r1, #7
 8007f04:	fa01 f303 	lsl.w	r3, r1, r3
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	401a      	ands	r2, r3
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	0d1b      	lsrs	r3, r3, #20
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a0f      	ldr	r2, [pc, #60]	; (8007f78 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d10a      	bne.n	8007f56 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8007f54:	e00a      	b.n	8007f6c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f62:	43db      	mvns	r3, r3
 8007f64:	401a      	ands	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007f6c:	bf00      	nop
 8007f6e:	3714      	adds	r7, #20
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr
 8007f78:	407f0000 	.word	0x407f0000

08007f7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 031f 	and.w	r3, r3, #31
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6093      	str	r3, [r2, #8]
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd0:	d101      	bne.n	8007fd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007ff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800801c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008020:	d101      	bne.n	8008026 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008048:	f043 0201 	orr.w	r2, r3, #1
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d101      	bne.n	8008074 <LL_ADC_IsEnabled+0x18>
 8008070:	2301      	movs	r3, #1
 8008072:	e000      	b.n	8008076 <LL_ADC_IsEnabled+0x1a>
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr

08008082 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008092:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008096:	f043 0204 	orr.w	r2, r3, #4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800809e:	bf00      	nop
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d101      	bne.n	80080c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 0308 	and.w	r3, r3, #8
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d101      	bne.n	80080e8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b089      	sub	sp, #36	; 0x24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008104:	2300      	movs	r3, #0
 8008106:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e1af      	b.n	8008472 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fc ff4b 	bl	8004fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f7ff ff3f 	bl	8007fbc <LL_ADC_IsDeepPowerDownEnabled>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d004      	beq.n	800814e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff ff25 	bl	8007f98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff ff5a 	bl	800800c <LL_ADC_IsInternalRegulatorEnabled>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d115      	bne.n	800818a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff ff3e 	bl	8007fe4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008168:	4b9f      	ldr	r3, [pc, #636]	; (80083e8 <HAL_ADC_Init+0x2f0>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	099b      	lsrs	r3, r3, #6
 800816e:	4a9f      	ldr	r2, [pc, #636]	; (80083ec <HAL_ADC_Init+0x2f4>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	099b      	lsrs	r3, r3, #6
 8008176:	3301      	adds	r3, #1
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800817c:	e002      	b.n	8008184 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f9      	bne.n	800817e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff ff3c 	bl	800800c <LL_ADC_IsInternalRegulatorEnabled>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d10d      	bne.n	80081b6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819e:	f043 0210 	orr.w	r2, r3, #16
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081aa:	f043 0201 	orr.w	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7ff ff75 	bl	80080aa <LL_ADC_REG_IsConversionOngoing>
 80081c0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	f003 0310 	and.w	r3, r3, #16
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f040 8148 	bne.w	8008460 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8144 	bne.w	8008460 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081dc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80081e0:	f043 0202 	orr.w	r2, r3, #2
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff ff35 	bl	800805c <LL_ADC_IsEnabled>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d141      	bne.n	800827c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008200:	d004      	beq.n	800820c <HAL_ADC_Init+0x114>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a7a      	ldr	r2, [pc, #488]	; (80083f0 <HAL_ADC_Init+0x2f8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d10f      	bne.n	800822c <HAL_ADC_Init+0x134>
 800820c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008210:	f7ff ff24 	bl	800805c <LL_ADC_IsEnabled>
 8008214:	4604      	mov	r4, r0
 8008216:	4876      	ldr	r0, [pc, #472]	; (80083f0 <HAL_ADC_Init+0x2f8>)
 8008218:	f7ff ff20 	bl	800805c <LL_ADC_IsEnabled>
 800821c:	4603      	mov	r3, r0
 800821e:	4323      	orrs	r3, r4
 8008220:	2b00      	cmp	r3, #0
 8008222:	bf0c      	ite	eq
 8008224:	2301      	moveq	r3, #1
 8008226:	2300      	movne	r3, #0
 8008228:	b2db      	uxtb	r3, r3
 800822a:	e012      	b.n	8008252 <HAL_ADC_Init+0x15a>
 800822c:	4871      	ldr	r0, [pc, #452]	; (80083f4 <HAL_ADC_Init+0x2fc>)
 800822e:	f7ff ff15 	bl	800805c <LL_ADC_IsEnabled>
 8008232:	4604      	mov	r4, r0
 8008234:	4870      	ldr	r0, [pc, #448]	; (80083f8 <HAL_ADC_Init+0x300>)
 8008236:	f7ff ff11 	bl	800805c <LL_ADC_IsEnabled>
 800823a:	4603      	mov	r3, r0
 800823c:	431c      	orrs	r4, r3
 800823e:	486f      	ldr	r0, [pc, #444]	; (80083fc <HAL_ADC_Init+0x304>)
 8008240:	f7ff ff0c 	bl	800805c <LL_ADC_IsEnabled>
 8008244:	4603      	mov	r3, r0
 8008246:	4323      	orrs	r3, r4
 8008248:	2b00      	cmp	r3, #0
 800824a:	bf0c      	ite	eq
 800824c:	2301      	moveq	r3, #1
 800824e:	2300      	movne	r3, #0
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d012      	beq.n	800827c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800825e:	d004      	beq.n	800826a <HAL_ADC_Init+0x172>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a62      	ldr	r2, [pc, #392]	; (80083f0 <HAL_ADC_Init+0x2f8>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d101      	bne.n	800826e <HAL_ADC_Init+0x176>
 800826a:	4a65      	ldr	r2, [pc, #404]	; (8008400 <HAL_ADC_Init+0x308>)
 800826c:	e000      	b.n	8008270 <HAL_ADC_Init+0x178>
 800826e:	4a65      	ldr	r2, [pc, #404]	; (8008404 <HAL_ADC_Init+0x30c>)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7ff fd1c 	bl	8007cb4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	7f5b      	ldrb	r3, [r3, #29]
 8008280:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008286:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800828c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008292:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800829a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800829c:	4313      	orrs	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d106      	bne.n	80082b8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ae:	3b01      	subs	r3, #1
 80082b0:	045b      	lsls	r3, r3, #17
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d009      	beq.n	80082d4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68da      	ldr	r2, [r3, #12]
 80082da:	4b4b      	ldr	r3, [pc, #300]	; (8008408 <HAL_ADC_Init+0x310>)
 80082dc:	4013      	ands	r3, r2
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	6812      	ldr	r2, [r2, #0]
 80082e2:	69b9      	ldr	r1, [r7, #24]
 80082e4:	430b      	orrs	r3, r1
 80082e6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f7ff fed1 	bl	80080aa <LL_ADC_REG_IsConversionOngoing>
 8008308:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff fede 	bl	80080d0 <LL_ADC_INJ_IsConversionOngoing>
 8008314:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d17f      	bne.n	800841c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d17c      	bne.n	800841c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008326:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800832e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008330:	4313      	orrs	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833e:	f023 0302 	bic.w	r3, r3, #2
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	6812      	ldr	r2, [r2, #0]
 8008346:	69b9      	ldr	r1, [r7, #24]
 8008348:	430b      	orrs	r3, r1
 800834a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d017      	beq.n	8008384 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691a      	ldr	r2, [r3, #16]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008362:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800836c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008370:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6911      	ldr	r1, [r2, #16]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	430b      	orrs	r3, r1
 800837e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008382:	e013      	b.n	80083ac <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008392:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80083a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083a8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d12a      	bne.n	800840c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083c0:	f023 0304 	bic.w	r3, r3, #4
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80083cc:	4311      	orrs	r1, r2
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80083d2:	4311      	orrs	r1, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80083d8:	430a      	orrs	r2, r1
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0201 	orr.w	r2, r2, #1
 80083e4:	611a      	str	r2, [r3, #16]
 80083e6:	e019      	b.n	800841c <HAL_ADC_Init+0x324>
 80083e8:	20000004 	.word	0x20000004
 80083ec:	053e2d63 	.word	0x053e2d63
 80083f0:	50000100 	.word	0x50000100
 80083f4:	50000400 	.word	0x50000400
 80083f8:	50000500 	.word	0x50000500
 80083fc:	50000600 	.word	0x50000600
 8008400:	50000300 	.word	0x50000300
 8008404:	50000700 	.word	0x50000700
 8008408:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 0201 	bic.w	r2, r2, #1
 800841a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d10c      	bne.n	800843e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842a:	f023 010f 	bic.w	r1, r3, #15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	631a      	str	r2, [r3, #48]	; 0x30
 800843c:	e007      	b.n	800844e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 020f 	bic.w	r2, r2, #15
 800844c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008452:	f023 0303 	bic.w	r3, r3, #3
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	65da      	str	r2, [r3, #92]	; 0x5c
 800845e:	e007      	b.n	8008470 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008464:	f043 0210 	orr.w	r2, r3, #16
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008470:	7ffb      	ldrb	r3, [r7, #31]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3724      	adds	r7, #36	; 0x24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}
 800847a:	bf00      	nop

0800847c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008490:	d004      	beq.n	800849c <HAL_ADC_Start_DMA+0x20>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a5a      	ldr	r2, [pc, #360]	; (8008600 <HAL_ADC_Start_DMA+0x184>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d101      	bne.n	80084a0 <HAL_ADC_Start_DMA+0x24>
 800849c:	4b59      	ldr	r3, [pc, #356]	; (8008604 <HAL_ADC_Start_DMA+0x188>)
 800849e:	e000      	b.n	80084a2 <HAL_ADC_Start_DMA+0x26>
 80084a0:	4b59      	ldr	r3, [pc, #356]	; (8008608 <HAL_ADC_Start_DMA+0x18c>)
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fd6a 	bl	8007f7c <LL_ADC_GetMultimode>
 80084a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff fdfb 	bl	80080aa <LL_ADC_REG_IsConversionOngoing>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f040 809b 	bne.w	80085f2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_ADC_Start_DMA+0x4e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e096      	b.n	80085f8 <HAL_ADC_Start_DMA+0x17c>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a4d      	ldr	r2, [pc, #308]	; (800860c <HAL_ADC_Start_DMA+0x190>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d008      	beq.n	80084ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d002      	beq.n	80084ee <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d17a      	bne.n	80085e4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fcf6 	bl	8008ee0 <ADC_Enable>
 80084f4:	4603      	mov	r3, r0
 80084f6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80084f8:	7dfb      	ldrb	r3, [r7, #23]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d16d      	bne.n	80085da <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3a      	ldr	r2, [pc, #232]	; (8008600 <HAL_ADC_Start_DMA+0x184>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d009      	beq.n	8008530 <HAL_ADC_Start_DMA+0xb4>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a3b      	ldr	r2, [pc, #236]	; (8008610 <HAL_ADC_Start_DMA+0x194>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d002      	beq.n	800852c <HAL_ADC_Start_DMA+0xb0>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	e003      	b.n	8008534 <HAL_ADC_Start_DMA+0xb8>
 800852c:	4b39      	ldr	r3, [pc, #228]	; (8008614 <HAL_ADC_Start_DMA+0x198>)
 800852e:	e001      	b.n	8008534 <HAL_ADC_Start_DMA+0xb8>
 8008530:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008534:	68fa      	ldr	r2, [r7, #12]
 8008536:	6812      	ldr	r2, [r2, #0]
 8008538:	4293      	cmp	r3, r2
 800853a:	d002      	beq.n	8008542 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008546:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855e:	f023 0206 	bic.w	r2, r3, #6
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	661a      	str	r2, [r3, #96]	; 0x60
 8008566:	e002      	b.n	800856e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	4a29      	ldr	r2, [pc, #164]	; (8008618 <HAL_ADC_Start_DMA+0x19c>)
 8008574:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857a:	4a28      	ldr	r2, [pc, #160]	; (800861c <HAL_ADC_Start_DMA+0x1a0>)
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008582:	4a27      	ldr	r2, [pc, #156]	; (8008620 <HAL_ADC_Start_DMA+0x1a4>)
 8008584:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	221c      	movs	r2, #28
 800858c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0210 	orr.w	r2, r2, #16
 80085a4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68da      	ldr	r2, [r3, #12]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0201 	orr.w	r2, r2, #1
 80085b4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3340      	adds	r3, #64	; 0x40
 80085c0:	4619      	mov	r1, r3
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f000 ff09 	bl	80093dc <HAL_DMA_Start_IT>
 80085ca:	4603      	mov	r3, r0
 80085cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fd55 	bl	8008082 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80085d8:	e00d      	b.n	80085f6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80085e2:	e008      	b.n	80085f6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80085f0:	e001      	b.n	80085f6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
 80085f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80085f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	50000100 	.word	0x50000100
 8008604:	50000300 	.word	0x50000300
 8008608:	50000700 	.word	0x50000700
 800860c:	50000600 	.word	0x50000600
 8008610:	50000500 	.word	0x50000500
 8008614:	50000400 	.word	0x50000400
 8008618:	08008fa5 	.word	0x08008fa5
 800861c:	0800907d 	.word	0x0800907d
 8008620:	08009099 	.word	0x08009099

08008624 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b0b6      	sub	sp, #216	; 0xd8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800867a:	2b01      	cmp	r3, #1
 800867c:	d102      	bne.n	8008684 <HAL_ADC_ConfigChannel+0x24>
 800867e:	2302      	movs	r3, #2
 8008680:	f000 bc13 	b.w	8008eaa <HAL_ADC_ConfigChannel+0x84a>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff fd0a 	bl	80080aa <LL_ADC_REG_IsConversionOngoing>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 83f3 	bne.w	8008e84 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	6859      	ldr	r1, [r3, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	f7ff fbe7 	bl	8007e7e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f7ff fcf8 	bl	80080aa <LL_ADC_REG_IsConversionOngoing>
 80086ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fd04 	bl	80080d0 <LL_ADC_INJ_IsConversionOngoing>
 80086c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 81d9 	bne.w	8008a88 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80086d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f040 81d4 	bne.w	8008a88 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086e8:	d10f      	bne.n	800870a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2200      	movs	r2, #0
 80086f4:	4619      	mov	r1, r3
 80086f6:	f7ff fbee 	bl	8007ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff fb95 	bl	8007e32 <LL_ADC_SetSamplingTimeCommonConfig>
 8008708:	e00e      	b.n	8008728 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6819      	ldr	r1, [r3, #0]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	461a      	mov	r2, r3
 8008718:	f7ff fbdd 	bl	8007ed6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2100      	movs	r1, #0
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff fb85 	bl	8007e32 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	695a      	ldr	r2, [r3, #20]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	005b      	lsls	r3, r3, #1
 800873a:	fa02 f303 	lsl.w	r3, r2, r3
 800873e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b04      	cmp	r3, #4
 8008748:	d022      	beq.n	8008790 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	6919      	ldr	r1, [r3, #16]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800875a:	f7ff fadf 	bl	8007d1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6919      	ldr	r1, [r3, #16]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	461a      	mov	r2, r3
 800876c:	f7ff fb2b 	bl	8007dc6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	6919      	ldr	r1, [r3, #16]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	7f1b      	ldrb	r3, [r3, #28]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d102      	bne.n	8008786 <HAL_ADC_ConfigChannel+0x126>
 8008780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008784:	e000      	b.n	8008788 <HAL_ADC_ConfigChannel+0x128>
 8008786:	2300      	movs	r3, #0
 8008788:	461a      	mov	r2, r3
 800878a:	f7ff fb37 	bl	8007dfc <LL_ADC_SetOffsetSaturation>
 800878e:	e17b      	b.n	8008a88 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2100      	movs	r1, #0
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fae4 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 800879c:	4603      	mov	r3, r0
 800879e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <HAL_ADC_ConfigChannel+0x15c>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2100      	movs	r1, #0
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fad9 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 80087b2:	4603      	mov	r3, r0
 80087b4:	0e9b      	lsrs	r3, r3, #26
 80087b6:	f003 021f 	and.w	r2, r3, #31
 80087ba:	e01e      	b.n	80087fa <HAL_ADC_ConfigChannel+0x19a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff face 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087d2:	fa93 f3a3 	rbit	r3, r3
 80087d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80087da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80087e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80087ea:	2320      	movs	r3, #32
 80087ec:	e004      	b.n	80087f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80087ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80087f2:	fab3 f383 	clz	r3, r3
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008802:	2b00      	cmp	r3, #0
 8008804:	d105      	bne.n	8008812 <HAL_ADC_ConfigChannel+0x1b2>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	0e9b      	lsrs	r3, r3, #26
 800880c:	f003 031f 	and.w	r3, r3, #31
 8008810:	e018      	b.n	8008844 <HAL_ADC_ConfigChannel+0x1e4>
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800881e:	fa93 f3a3 	rbit	r3, r3
 8008822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800882a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800882e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8008836:	2320      	movs	r3, #32
 8008838:	e004      	b.n	8008844 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800883a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800883e:	fab3 f383 	clz	r3, r3
 8008842:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008844:	429a      	cmp	r2, r3
 8008846:	d106      	bne.n	8008856 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2200      	movs	r2, #0
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff fa9d 	bl	8007d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fa81 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008862:	4603      	mov	r3, r0
 8008864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10a      	bne.n	8008882 <HAL_ADC_ConfigChannel+0x222>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff fa76 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008878:	4603      	mov	r3, r0
 800887a:	0e9b      	lsrs	r3, r3, #26
 800887c:	f003 021f 	and.w	r2, r3, #31
 8008880:	e01e      	b.n	80088c0 <HAL_ADC_ConfigChannel+0x260>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fa6b 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 800888e:	4603      	mov	r3, r0
 8008890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008898:	fa93 f3a3 	rbit	r3, r3
 800889c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80088a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80088a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80088a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80088b0:	2320      	movs	r3, #32
 80088b2:	e004      	b.n	80088be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80088b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088b8:	fab3 f383 	clz	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d105      	bne.n	80088d8 <HAL_ADC_ConfigChannel+0x278>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	0e9b      	lsrs	r3, r3, #26
 80088d2:	f003 031f 	and.w	r3, r3, #31
 80088d6:	e018      	b.n	800890a <HAL_ADC_ConfigChannel+0x2aa>
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80088e4:	fa93 f3a3 	rbit	r3, r3
 80088e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80088ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80088f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80088fc:	2320      	movs	r3, #32
 80088fe:	e004      	b.n	800890a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008900:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008904:	fab3 f383 	clz	r3, r3
 8008908:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800890a:	429a      	cmp	r2, r3
 800890c:	d106      	bne.n	800891c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2200      	movs	r2, #0
 8008914:	2101      	movs	r1, #1
 8008916:	4618      	mov	r0, r3
 8008918:	f7ff fa3a 	bl	8007d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2102      	movs	r1, #2
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fa1e 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008928:	4603      	mov	r3, r0
 800892a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <HAL_ADC_ConfigChannel+0x2e8>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2102      	movs	r1, #2
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff fa13 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 800893e:	4603      	mov	r3, r0
 8008940:	0e9b      	lsrs	r3, r3, #26
 8008942:	f003 021f 	and.w	r2, r3, #31
 8008946:	e01e      	b.n	8008986 <HAL_ADC_ConfigChannel+0x326>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2102      	movs	r1, #2
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fa08 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008954:	4603      	mov	r3, r0
 8008956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800895a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800895e:	fa93 f3a3 	rbit	r3, r3
 8008962:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008966:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800896a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800896e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008976:	2320      	movs	r3, #32
 8008978:	e004      	b.n	8008984 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800897a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800897e:	fab3 f383 	clz	r3, r3
 8008982:	b2db      	uxtb	r3, r3
 8008984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800898e:	2b00      	cmp	r3, #0
 8008990:	d105      	bne.n	800899e <HAL_ADC_ConfigChannel+0x33e>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	0e9b      	lsrs	r3, r3, #26
 8008998:	f003 031f 	and.w	r3, r3, #31
 800899c:	e016      	b.n	80089cc <HAL_ADC_ConfigChannel+0x36c>
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089aa:	fa93 f3a3 	rbit	r3, r3
 80089ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80089b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80089b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80089be:	2320      	movs	r3, #32
 80089c0:	e004      	b.n	80089cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80089c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089c6:	fab3 f383 	clz	r3, r3
 80089ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d106      	bne.n	80089de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	2102      	movs	r1, #2
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff f9d9 	bl	8007d90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2103      	movs	r1, #3
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff f9bd 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 80089ea:	4603      	mov	r3, r0
 80089ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10a      	bne.n	8008a0a <HAL_ADC_ConfigChannel+0x3aa>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2103      	movs	r1, #3
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f9b2 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008a00:	4603      	mov	r3, r0
 8008a02:	0e9b      	lsrs	r3, r3, #26
 8008a04:	f003 021f 	and.w	r2, r3, #31
 8008a08:	e017      	b.n	8008a3a <HAL_ADC_ConfigChannel+0x3da>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2103      	movs	r1, #3
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff f9a7 	bl	8007d64 <LL_ADC_GetOffsetChannel>
 8008a16:	4603      	mov	r3, r0
 8008a18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a1c:	fa93 f3a3 	rbit	r3, r3
 8008a20:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008a22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a24:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d101      	bne.n	8008a30 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008a2c:	2320      	movs	r3, #32
 8008a2e:	e003      	b.n	8008a38 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a32:	fab3 f383 	clz	r3, r3
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d105      	bne.n	8008a52 <HAL_ADC_ConfigChannel+0x3f2>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	0e9b      	lsrs	r3, r3, #26
 8008a4c:	f003 031f 	and.w	r3, r3, #31
 8008a50:	e011      	b.n	8008a76 <HAL_ADC_ConfigChannel+0x416>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a5a:	fa93 f3a3 	rbit	r3, r3
 8008a5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a62:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	e003      	b.n	8008a76 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a70:	fab3 f383 	clz	r3, r3
 8008a74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d106      	bne.n	8008a88 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2103      	movs	r1, #3
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7ff f984 	bl	8007d90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff fae5 	bl	800805c <LL_ADC_IsEnabled>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f040 813d 	bne.w	8008d14 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6819      	ldr	r1, [r3, #0]
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f7ff fa40 	bl	8007f2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	4aa2      	ldr	r2, [pc, #648]	; (8008d3c <HAL_ADC_ConfigChannel+0x6dc>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	f040 812e 	bne.w	8008d14 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10b      	bne.n	8008ae0 <HAL_ADC_ConfigChannel+0x480>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	0e9b      	lsrs	r3, r3, #26
 8008ace:	3301      	adds	r3, #1
 8008ad0:	f003 031f 	and.w	r3, r3, #31
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	bf94      	ite	ls
 8008ad8:	2301      	movls	r3, #1
 8008ada:	2300      	movhi	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	e019      	b.n	8008b14 <HAL_ADC_ConfigChannel+0x4b4>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae8:	fa93 f3a3 	rbit	r3, r3
 8008aec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008aee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008af0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008af8:	2320      	movs	r3, #32
 8008afa:	e003      	b.n	8008b04 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008afe:	fab3 f383 	clz	r3, r3
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	3301      	adds	r3, #1
 8008b06:	f003 031f 	and.w	r3, r3, #31
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	bf94      	ite	ls
 8008b0e:	2301      	movls	r3, #1
 8008b10:	2300      	movhi	r3, #0
 8008b12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d079      	beq.n	8008c0c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d107      	bne.n	8008b34 <HAL_ADC_ConfigChannel+0x4d4>
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	0e9b      	lsrs	r3, r3, #26
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	069b      	lsls	r3, r3, #26
 8008b2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b32:	e015      	b.n	8008b60 <HAL_ADC_ConfigChannel+0x500>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3c:	fa93 f3a3 	rbit	r3, r3
 8008b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b44:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008b4c:	2320      	movs	r3, #32
 8008b4e:	e003      	b.n	8008b58 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b52:	fab3 f383 	clz	r3, r3
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	3301      	adds	r3, #1
 8008b5a:	069b      	lsls	r3, r3, #26
 8008b5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d109      	bne.n	8008b80 <HAL_ADC_ConfigChannel+0x520>
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	0e9b      	lsrs	r3, r3, #26
 8008b72:	3301      	adds	r3, #1
 8008b74:	f003 031f 	and.w	r3, r3, #31
 8008b78:	2101      	movs	r1, #1
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	e017      	b.n	8008bb0 <HAL_ADC_ConfigChannel+0x550>
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b88:	fa93 f3a3 	rbit	r3, r3
 8008b8c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008b98:	2320      	movs	r3, #32
 8008b9a:	e003      	b.n	8008ba4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9e:	fab3 f383 	clz	r3, r3
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	2101      	movs	r1, #1
 8008bac:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb0:	ea42 0103 	orr.w	r1, r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10a      	bne.n	8008bd6 <HAL_ADC_ConfigChannel+0x576>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	0e9b      	lsrs	r3, r3, #26
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	f003 021f 	and.w	r2, r3, #31
 8008bcc:	4613      	mov	r3, r2
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	4413      	add	r3, r2
 8008bd2:	051b      	lsls	r3, r3, #20
 8008bd4:	e018      	b.n	8008c08 <HAL_ADC_ConfigChannel+0x5a8>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bde:	fa93 f3a3 	rbit	r3, r3
 8008be2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8008be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d101      	bne.n	8008bf2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8008bee:	2320      	movs	r3, #32
 8008bf0:	e003      	b.n	8008bfa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf4:	fab3 f383 	clz	r3, r3
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	f003 021f 	and.w	r2, r3, #31
 8008c00:	4613      	mov	r3, r2
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	4413      	add	r3, r2
 8008c06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	e07e      	b.n	8008d0a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <HAL_ADC_ConfigChannel+0x5c8>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	0e9b      	lsrs	r3, r3, #26
 8008c1e:	3301      	adds	r3, #1
 8008c20:	069b      	lsls	r3, r3, #26
 8008c22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c26:	e015      	b.n	8008c54 <HAL_ADC_ConfigChannel+0x5f4>
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	fa93 f3a3 	rbit	r3, r3
 8008c34:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008c40:	2320      	movs	r3, #32
 8008c42:	e003      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	fab3 f383 	clz	r3, r3
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	069b      	lsls	r3, r3, #26
 8008c50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x614>
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	0e9b      	lsrs	r3, r3, #26
 8008c66:	3301      	adds	r3, #1
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c72:	e017      	b.n	8008ca4 <HAL_ADC_ConfigChannel+0x644>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	fa93 f3a3 	rbit	r3, r3
 8008c80:	61fb      	str	r3, [r7, #28]
  return result;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	e003      	b.n	8008c98 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	fab3 f383 	clz	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f003 031f 	and.w	r3, r3, #31
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca4:	ea42 0103 	orr.w	r1, r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10d      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0x670>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	0e9b      	lsrs	r3, r3, #26
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f003 021f 	and.w	r2, r3, #31
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	005b      	lsls	r3, r3, #1
 8008cc4:	4413      	add	r3, r2
 8008cc6:	3b1e      	subs	r3, #30
 8008cc8:	051b      	lsls	r3, r3, #20
 8008cca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cce:	e01b      	b.n	8008d08 <HAL_ADC_ConfigChannel+0x6a8>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	fa93 f3a3 	rbit	r3, r3
 8008cdc:	613b      	str	r3, [r7, #16]
  return result;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d101      	bne.n	8008cec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8008ce8:	2320      	movs	r3, #32
 8008cea:	e003      	b.n	8008cf4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	fab3 f383 	clz	r3, r3
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	f003 021f 	and.w	r2, r3, #31
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	4413      	add	r3, r2
 8008d00:	3b1e      	subs	r3, #30
 8008d02:	051b      	lsls	r3, r3, #20
 8008d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d08:	430b      	orrs	r3, r1
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	6892      	ldr	r2, [r2, #8]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	f7ff f8e1 	bl	8007ed6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	4b09      	ldr	r3, [pc, #36]	; (8008d40 <HAL_ADC_ConfigChannel+0x6e0>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80be 	beq.w	8008e9e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d2a:	d004      	beq.n	8008d36 <HAL_ADC_ConfigChannel+0x6d6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a04      	ldr	r2, [pc, #16]	; (8008d44 <HAL_ADC_ConfigChannel+0x6e4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d10a      	bne.n	8008d4c <HAL_ADC_ConfigChannel+0x6ec>
 8008d36:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <HAL_ADC_ConfigChannel+0x6e8>)
 8008d38:	e009      	b.n	8008d4e <HAL_ADC_ConfigChannel+0x6ee>
 8008d3a:	bf00      	nop
 8008d3c:	407f0000 	.word	0x407f0000
 8008d40:	80080000 	.word	0x80080000
 8008d44:	50000100 	.word	0x50000100
 8008d48:	50000300 	.word	0x50000300
 8008d4c:	4b59      	ldr	r3, [pc, #356]	; (8008eb4 <HAL_ADC_ConfigChannel+0x854>)
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe ffd6 	bl	8007d00 <LL_ADC_GetCommonPathInternalCh>
 8008d54:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a56      	ldr	r2, [pc, #344]	; (8008eb8 <HAL_ADC_ConfigChannel+0x858>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d004      	beq.n	8008d6c <HAL_ADC_ConfigChannel+0x70c>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a55      	ldr	r2, [pc, #340]	; (8008ebc <HAL_ADC_ConfigChannel+0x85c>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d13a      	bne.n	8008de2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008d6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008d70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d134      	bne.n	8008de2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d80:	d005      	beq.n	8008d8e <HAL_ADC_ConfigChannel+0x72e>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a4e      	ldr	r2, [pc, #312]	; (8008ec0 <HAL_ADC_ConfigChannel+0x860>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	f040 8085 	bne.w	8008e98 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d96:	d004      	beq.n	8008da2 <HAL_ADC_ConfigChannel+0x742>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a49      	ldr	r2, [pc, #292]	; (8008ec4 <HAL_ADC_ConfigChannel+0x864>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d101      	bne.n	8008da6 <HAL_ADC_ConfigChannel+0x746>
 8008da2:	4a49      	ldr	r2, [pc, #292]	; (8008ec8 <HAL_ADC_ConfigChannel+0x868>)
 8008da4:	e000      	b.n	8008da8 <HAL_ADC_ConfigChannel+0x748>
 8008da6:	4a43      	ldr	r2, [pc, #268]	; (8008eb4 <HAL_ADC_ConfigChannel+0x854>)
 8008da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008db0:	4619      	mov	r1, r3
 8008db2:	4610      	mov	r0, r2
 8008db4:	f7fe ff91 	bl	8007cda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008db8:	4b44      	ldr	r3, [pc, #272]	; (8008ecc <HAL_ADC_ConfigChannel+0x86c>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	099b      	lsrs	r3, r3, #6
 8008dbe:	4a44      	ldr	r2, [pc, #272]	; (8008ed0 <HAL_ADC_ConfigChannel+0x870>)
 8008dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc4:	099b      	lsrs	r3, r3, #6
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	4613      	mov	r3, r2
 8008dca:	005b      	lsls	r3, r3, #1
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008dd2:	e002      	b.n	8008dda <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1f9      	bne.n	8008dd4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008de0:	e05a      	b.n	8008e98 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a3b      	ldr	r2, [pc, #236]	; (8008ed4 <HAL_ADC_ConfigChannel+0x874>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d125      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0x7d8>
 8008dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11f      	bne.n	8008e38 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a31      	ldr	r2, [pc, #196]	; (8008ec4 <HAL_ADC_ConfigChannel+0x864>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d104      	bne.n	8008e0c <HAL_ADC_ConfigChannel+0x7ac>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a34      	ldr	r2, [pc, #208]	; (8008ed8 <HAL_ADC_ConfigChannel+0x878>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d047      	beq.n	8008e9c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e14:	d004      	beq.n	8008e20 <HAL_ADC_ConfigChannel+0x7c0>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <HAL_ADC_ConfigChannel+0x864>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d101      	bne.n	8008e24 <HAL_ADC_ConfigChannel+0x7c4>
 8008e20:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <HAL_ADC_ConfigChannel+0x868>)
 8008e22:	e000      	b.n	8008e26 <HAL_ADC_ConfigChannel+0x7c6>
 8008e24:	4a23      	ldr	r2, [pc, #140]	; (8008eb4 <HAL_ADC_ConfigChannel+0x854>)
 8008e26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f7fe ff52 	bl	8007cda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e36:	e031      	b.n	8008e9c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a27      	ldr	r2, [pc, #156]	; (8008edc <HAL_ADC_ConfigChannel+0x87c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d12d      	bne.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d127      	bne.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1c      	ldr	r2, [pc, #112]	; (8008ec4 <HAL_ADC_ConfigChannel+0x864>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d022      	beq.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e60:	d004      	beq.n	8008e6c <HAL_ADC_ConfigChannel+0x80c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <HAL_ADC_ConfigChannel+0x864>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d101      	bne.n	8008e70 <HAL_ADC_ConfigChannel+0x810>
 8008e6c:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <HAL_ADC_ConfigChannel+0x868>)
 8008e6e:	e000      	b.n	8008e72 <HAL_ADC_ConfigChannel+0x812>
 8008e70:	4a10      	ldr	r2, [pc, #64]	; (8008eb4 <HAL_ADC_ConfigChannel+0x854>)
 8008e72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008e76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fe ff2c 	bl	8007cda <LL_ADC_SetCommonPathInternalCh>
 8008e82:	e00c      	b.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e88:	f043 0220 	orr.w	r2, r3, #32
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008e90:	2301      	movs	r3, #1
 8008e92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8008e96:	e002      	b.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e98:	bf00      	nop
 8008e9a:	e000      	b.n	8008e9e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008e9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008ea6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	37d8      	adds	r7, #216	; 0xd8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	50000700 	.word	0x50000700
 8008eb8:	c3210000 	.word	0xc3210000
 8008ebc:	90c00010 	.word	0x90c00010
 8008ec0:	50000600 	.word	0x50000600
 8008ec4:	50000100 	.word	0x50000100
 8008ec8:	50000300 	.word	0x50000300
 8008ecc:	20000004 	.word	0x20000004
 8008ed0:	053e2d63 	.word	0x053e2d63
 8008ed4:	c7520000 	.word	0xc7520000
 8008ed8:	50000500 	.word	0x50000500
 8008edc:	cb840000 	.word	0xcb840000

08008ee0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff f8b5 	bl	800805c <LL_ADC_IsEnabled>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d14d      	bne.n	8008f94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	4b28      	ldr	r3, [pc, #160]	; (8008fa0 <ADC_Enable+0xc0>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f0a:	f043 0210 	orr.w	r2, r3, #16
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f16:	f043 0201 	orr.w	r2, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e039      	b.n	8008f96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff f884 	bl	8008034 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008f2c:	f7fe fe94 	bl	8007c58 <HAL_GetTick>
 8008f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f32:	e028      	b.n	8008f86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff f88f 	bl	800805c <LL_ADC_IsEnabled>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7ff f873 	bl	8008034 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008f4e:	f7fe fe83 	bl	8007c58 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d914      	bls.n	8008f86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0301 	and.w	r3, r3, #1
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d00d      	beq.n	8008f86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f6e:	f043 0210 	orr.w	r2, r3, #16
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f7a:	f043 0201 	orr.w	r2, r3, #1
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e007      	b.n	8008f96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0301 	and.w	r3, r3, #1
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d1cf      	bne.n	8008f34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	8000003f 	.word	0x8000003f

08008fa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d14b      	bne.n	8009056 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0308 	and.w	r3, r3, #8
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d021      	beq.n	800901c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fe ff3b 	bl	8007e58 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d032      	beq.n	800904e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d12b      	bne.n	800904e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800900a:	2b00      	cmp	r3, #0
 800900c:	d11f      	bne.n	800904e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009012:	f043 0201 	orr.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	65da      	str	r2, [r3, #92]	; 0x5c
 800901a:	e018      	b.n	800904e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f003 0302 	and.w	r3, r3, #2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d111      	bne.n	800904e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800903a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d105      	bne.n	800904e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009046:	f043 0201 	orr.w	r2, r3, #1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff fae8 	bl	8008624 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009054:	e00e      	b.n	8009074 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800905a:	f003 0310 	and.w	r3, r3, #16
 800905e:	2b00      	cmp	r3, #0
 8009060:	d003      	beq.n	800906a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff faf2 	bl	800864c <HAL_ADC_ErrorCallback>
}
 8009068:	e004      	b.n	8009074 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009088:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f7ff fad4 	bl	8008638 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090b6:	f043 0204 	orr.w	r2, r3, #4
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f7ff fac4 	bl	800864c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80090c4:	bf00      	nop
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <__NVIC_SetPriorityGrouping+0x44>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80090e8:	4013      	ands	r3, r2
 80090ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80090f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090fe:	4a04      	ldr	r2, [pc, #16]	; (8009110 <__NVIC_SetPriorityGrouping+0x44>)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	60d3      	str	r3, [r2, #12]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	e000ed00 	.word	0xe000ed00

08009114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009114:	b480      	push	{r7}
 8009116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009118:	4b04      	ldr	r3, [pc, #16]	; (800912c <__NVIC_GetPriorityGrouping+0x18>)
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	0a1b      	lsrs	r3, r3, #8
 800911e:	f003 0307 	and.w	r3, r3, #7
}
 8009122:	4618      	mov	r0, r3
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr
 800912c:	e000ed00 	.word	0xe000ed00

08009130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800913a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800913e:	2b00      	cmp	r3, #0
 8009140:	db0b      	blt.n	800915a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	f003 021f 	and.w	r2, r3, #31
 8009148:	4907      	ldr	r1, [pc, #28]	; (8009168 <__NVIC_EnableIRQ+0x38>)
 800914a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	2001      	movs	r0, #1
 8009152:	fa00 f202 	lsl.w	r2, r0, r2
 8009156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800915a:	bf00      	nop
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	e000e100 	.word	0xe000e100

0800916c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	6039      	str	r1, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800917c:	2b00      	cmp	r3, #0
 800917e:	db0a      	blt.n	8009196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	b2da      	uxtb	r2, r3
 8009184:	490c      	ldr	r1, [pc, #48]	; (80091b8 <__NVIC_SetPriority+0x4c>)
 8009186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800918a:	0112      	lsls	r2, r2, #4
 800918c:	b2d2      	uxtb	r2, r2
 800918e:	440b      	add	r3, r1
 8009190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009194:	e00a      	b.n	80091ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	b2da      	uxtb	r2, r3
 800919a:	4908      	ldr	r1, [pc, #32]	; (80091bc <__NVIC_SetPriority+0x50>)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	f003 030f 	and.w	r3, r3, #15
 80091a2:	3b04      	subs	r3, #4
 80091a4:	0112      	lsls	r2, r2, #4
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	440b      	add	r3, r1
 80091aa:	761a      	strb	r2, [r3, #24]
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	e000e100 	.word	0xe000e100
 80091bc:	e000ed00 	.word	0xe000ed00

080091c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b089      	sub	sp, #36	; 0x24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f003 0307 	and.w	r3, r3, #7
 80091d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	f1c3 0307 	rsb	r3, r3, #7
 80091da:	2b04      	cmp	r3, #4
 80091dc:	bf28      	it	cs
 80091de:	2304      	movcs	r3, #4
 80091e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	3304      	adds	r3, #4
 80091e6:	2b06      	cmp	r3, #6
 80091e8:	d902      	bls.n	80091f0 <NVIC_EncodePriority+0x30>
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	3b03      	subs	r3, #3
 80091ee:	e000      	b.n	80091f2 <NVIC_EncodePriority+0x32>
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	43da      	mvns	r2, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	401a      	ands	r2, r3
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009208:	f04f 31ff 	mov.w	r1, #4294967295
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	fa01 f303 	lsl.w	r3, r1, r3
 8009212:	43d9      	mvns	r1, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009218:	4313      	orrs	r3, r2
         );
}
 800921a:	4618      	mov	r0, r3
 800921c:	3724      	adds	r7, #36	; 0x24
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr

08009226 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f7ff ff4c 	bl	80090cc <__NVIC_SetPriorityGrouping>
}
 8009234:	bf00      	nop
 8009236:	3708      	adds	r7, #8
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800924a:	f7ff ff63 	bl	8009114 <__NVIC_GetPriorityGrouping>
 800924e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	6978      	ldr	r0, [r7, #20]
 8009256:	f7ff ffb3 	bl	80091c0 <NVIC_EncodePriority>
 800925a:	4602      	mov	r2, r0
 800925c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009260:	4611      	mov	r1, r2
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff ff82 	bl	800916c <__NVIC_SetPriority>
}
 8009268:	bf00      	nop
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}

08009270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800927a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff ff56 	bl	8009130 <__NVIC_EnableIRQ>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e08d      	b.n	80093ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	4b47      	ldr	r3, [pc, #284]	; (80093c4 <HAL_DMA_Init+0x138>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d80f      	bhi.n	80092ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	4b45      	ldr	r3, [pc, #276]	; (80093c8 <HAL_DMA_Init+0x13c>)
 80092b2:	4413      	add	r3, r2
 80092b4:	4a45      	ldr	r2, [pc, #276]	; (80093cc <HAL_DMA_Init+0x140>)
 80092b6:	fba2 2303 	umull	r2, r3, r2, r3
 80092ba:	091b      	lsrs	r3, r3, #4
 80092bc:	009a      	lsls	r2, r3, #2
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	4a42      	ldr	r2, [pc, #264]	; (80093d0 <HAL_DMA_Init+0x144>)
 80092c6:	641a      	str	r2, [r3, #64]	; 0x40
 80092c8:	e00e      	b.n	80092e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	461a      	mov	r2, r3
 80092d0:	4b40      	ldr	r3, [pc, #256]	; (80093d4 <HAL_DMA_Init+0x148>)
 80092d2:	4413      	add	r3, r2
 80092d4:	4a3d      	ldr	r2, [pc, #244]	; (80093cc <HAL_DMA_Init+0x140>)
 80092d6:	fba2 2303 	umull	r2, r3, r2, r3
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	009a      	lsls	r2, r3, #2
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a3c      	ldr	r2, [pc, #240]	; (80093d8 <HAL_DMA_Init+0x14c>)
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800930c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa76 	bl	800982c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009348:	d102      	bne.n	8009350 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009358:	b2d2      	uxtb	r2, r2
 800935a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009364:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d010      	beq.n	8009390 <HAL_DMA_Init+0x104>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b04      	cmp	r3, #4
 8009374:	d80c      	bhi.n	8009390 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fa96 	bl	80098a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009380:	2200      	movs	r2, #0
 8009382:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	e008      	b.n	80093a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40020407 	.word	0x40020407
 80093c8:	bffdfff8 	.word	0xbffdfff8
 80093cc:	cccccccd 	.word	0xcccccccd
 80093d0:	40020000 	.word	0x40020000
 80093d4:	bffdfbf8 	.word	0xbffdfbf8
 80093d8:	40020400 	.word	0x40020400

080093dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d101      	bne.n	80093fc <HAL_DMA_Start_IT+0x20>
 80093f8:	2302      	movs	r3, #2
 80093fa:	e066      	b.n	80094ca <HAL_DMA_Start_IT+0xee>
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b01      	cmp	r3, #1
 800940e:	d155      	bne.n	80094bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2202      	movs	r2, #2
 8009414:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f9bb 	bl	80097b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800943e:	2b00      	cmp	r3, #0
 8009440:	d008      	beq.n	8009454 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 020e 	orr.w	r2, r2, #14
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	e00f      	b.n	8009474 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 0204 	bic.w	r2, r2, #4
 8009462:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 020a 	orr.w	r2, r2, #10
 8009472:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009490:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009496:	2b00      	cmp	r3, #0
 8009498:	d007      	beq.n	80094aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f042 0201 	orr.w	r2, r2, #1
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	e005      	b.n	80094c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80094c4:	2302      	movs	r3, #2
 80094c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b085      	sub	sp, #20
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d005      	beq.n	80094f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2204      	movs	r2, #4
 80094ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	e037      	b.n	8009566 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 020e 	bic.w	r2, r2, #14
 8009504:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009510:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009514:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f022 0201 	bic.w	r2, r2, #1
 8009524:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	f003 021f 	and.w	r2, r3, #31
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	2101      	movs	r1, #1
 8009534:	fa01 f202 	lsl.w	r2, r1, r2
 8009538:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009542:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00c      	beq.n	8009566 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800955a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009564:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d00d      	beq.n	80095b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2204      	movs	r2, #4
 80095a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	73fb      	strb	r3, [r7, #15]
 80095b6:	e047      	b.n	8009648 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 020e 	bic.w	r2, r2, #14
 80095c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0201 	bic.w	r2, r2, #1
 80095d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ec:	f003 021f 	and.w	r2, r3, #31
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f4:	2101      	movs	r1, #1
 80095f6:	fa01 f202 	lsl.w	r2, r1, r2
 80095fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009604:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00c      	beq.n	8009628 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800961c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009626:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
    }
  }
  return status;
 8009648:	7bfb      	ldrb	r3, [r7, #15]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3710      	adds	r7, #16
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b084      	sub	sp, #16
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	2204      	movs	r2, #4
 8009674:	409a      	lsls	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4013      	ands	r3, r2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d026      	beq.n	80096cc <HAL_DMA_IRQHandler+0x7a>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f003 0304 	and.w	r3, r3, #4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d021      	beq.n	80096cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f003 0320 	and.w	r3, r3, #32
 8009692:	2b00      	cmp	r3, #0
 8009694:	d107      	bne.n	80096a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f022 0204 	bic.w	r2, r2, #4
 80096a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096aa:	f003 021f 	and.w	r2, r3, #31
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	2104      	movs	r1, #4
 80096b4:	fa01 f202 	lsl.w	r2, r1, r2
 80096b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d071      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80096ca:	e06c      	b.n	80097a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d0:	f003 031f 	and.w	r3, r3, #31
 80096d4:	2202      	movs	r2, #2
 80096d6:	409a      	lsls	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4013      	ands	r3, r2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d02e      	beq.n	800973e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d029      	beq.n	800973e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0320 	and.w	r3, r3, #32
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10b      	bne.n	8009710 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f022 020a 	bic.w	r2, r2, #10
 8009706:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009714:	f003 021f 	and.w	r2, r3, #31
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	2102      	movs	r1, #2
 800971e:	fa01 f202 	lsl.w	r2, r1, r2
 8009722:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	2b00      	cmp	r3, #0
 8009732:	d038      	beq.n	80097a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800973c:	e033      	b.n	80097a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009742:	f003 031f 	and.w	r3, r3, #31
 8009746:	2208      	movs	r2, #8
 8009748:	409a      	lsls	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	4013      	ands	r3, r2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d02a      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f003 0308 	and.w	r3, r3, #8
 8009758:	2b00      	cmp	r3, #0
 800975a:	d025      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 020e 	bic.w	r2, r2, #14
 800976a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009770:	f003 021f 	and.w	r2, r3, #31
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009778:	2101      	movs	r1, #1
 800977a:	fa01 f202 	lsl.w	r2, r1, r2
 800977e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800979a:	2b00      	cmp	r3, #0
 800979c:	d004      	beq.n	80097a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80097a6:	bf00      	nop
 80097a8:	bf00      	nop
}
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d004      	beq.n	80097da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097de:	f003 021f 	and.w	r2, r3, #31
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e6:	2101      	movs	r1, #1
 80097e8:	fa01 f202 	lsl.w	r2, r1, r2
 80097ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	d108      	bne.n	8009810 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800980e:	e007      	b.n	8009820 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	60da      	str	r2, [r3, #12]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	4b16      	ldr	r3, [pc, #88]	; (8009894 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800983c:	429a      	cmp	r2, r3
 800983e:	d802      	bhi.n	8009846 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009840:	4b15      	ldr	r3, [pc, #84]	; (8009898 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e001      	b.n	800984a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009846:	4b15      	ldr	r3, [pc, #84]	; (800989c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009848:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	b2db      	uxtb	r3, r3
 8009854:	3b08      	subs	r3, #8
 8009856:	4a12      	ldr	r2, [pc, #72]	; (80098a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009858:	fba2 2303 	umull	r2, r3, r2, r3
 800985c:	091b      	lsrs	r3, r3, #4
 800985e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009864:	089b      	lsrs	r3, r3, #2
 8009866:	009a      	lsls	r2, r3, #2
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	4413      	add	r3, r2
 800986c:	461a      	mov	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a0b      	ldr	r2, [pc, #44]	; (80098a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009876:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f003 031f 	and.w	r3, r3, #31
 800987e:	2201      	movs	r2, #1
 8009880:	409a      	lsls	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40020407 	.word	0x40020407
 8009898:	40020800 	.word	0x40020800
 800989c:	40020820 	.word	0x40020820
 80098a0:	cccccccd 	.word	0xcccccccd
 80098a4:	40020880 	.word	0x40020880

080098a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	461a      	mov	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a08      	ldr	r2, [pc, #32]	; (80098ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80098ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	f003 031f 	and.w	r3, r3, #31
 80098d4:	2201      	movs	r2, #1
 80098d6:	409a      	lsls	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80098dc:	bf00      	nop
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	1000823f 	.word	0x1000823f
 80098ec:	40020940 	.word	0x40020940

080098f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80098fe:	e15a      	b.n	8009bb6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	2101      	movs	r1, #1
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	fa01 f303 	lsl.w	r3, r1, r3
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 814c 	beq.w	8009bb0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	2b01      	cmp	r3, #1
 8009922:	d005      	beq.n	8009930 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800992c:	2b02      	cmp	r3, #2
 800992e:	d130      	bne.n	8009992 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	2203      	movs	r2, #3
 800993c:	fa02 f303 	lsl.w	r3, r2, r3
 8009940:	43db      	mvns	r3, r3
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4013      	ands	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	005b      	lsls	r3, r3, #1
 8009950:	fa02 f303 	lsl.w	r3, r2, r3
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009966:	2201      	movs	r2, #1
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	fa02 f303 	lsl.w	r3, r2, r3
 800996e:	43db      	mvns	r3, r3
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4013      	ands	r3, r2
 8009974:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	091b      	lsrs	r3, r3, #4
 800997c:	f003 0201 	and.w	r2, r3, #1
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	fa02 f303 	lsl.w	r3, r2, r3
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	f003 0303 	and.w	r3, r3, #3
 800999a:	2b03      	cmp	r3, #3
 800999c:	d017      	beq.n	80099ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	2203      	movs	r2, #3
 80099aa:	fa02 f303 	lsl.w	r3, r2, r3
 80099ae:	43db      	mvns	r3, r3
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	4013      	ands	r3, r2
 80099b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	689a      	ldr	r2, [r3, #8]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	fa02 f303 	lsl.w	r3, r2, r3
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f003 0303 	and.w	r3, r3, #3
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d123      	bne.n	8009a22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	08da      	lsrs	r2, r3, #3
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3208      	adds	r2, #8
 80099e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	220f      	movs	r2, #15
 80099f2:	fa02 f303 	lsl.w	r3, r2, r3
 80099f6:	43db      	mvns	r3, r3
 80099f8:	693a      	ldr	r2, [r7, #16]
 80099fa:	4013      	ands	r3, r2
 80099fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	691a      	ldr	r2, [r3, #16]
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f003 0307 	and.w	r3, r3, #7
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	08da      	lsrs	r2, r3, #3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3208      	adds	r2, #8
 8009a1c:	6939      	ldr	r1, [r7, #16]
 8009a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a32:	43db      	mvns	r3, r3
 8009a34:	693a      	ldr	r2, [r7, #16]
 8009a36:	4013      	ands	r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f003 0203 	and.w	r2, r3, #3
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 80a6 	beq.w	8009bb0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a64:	4b5b      	ldr	r3, [pc, #364]	; (8009bd4 <HAL_GPIO_Init+0x2e4>)
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	4a5a      	ldr	r2, [pc, #360]	; (8009bd4 <HAL_GPIO_Init+0x2e4>)
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
 8009a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8009a70:	4b58      	ldr	r3, [pc, #352]	; (8009bd4 <HAL_GPIO_Init+0x2e4>)
 8009a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	60bb      	str	r3, [r7, #8]
 8009a7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009a7c:	4a56      	ldr	r2, [pc, #344]	; (8009bd8 <HAL_GPIO_Init+0x2e8>)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	089b      	lsrs	r3, r3, #2
 8009a82:	3302      	adds	r3, #2
 8009a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	f003 0303 	and.w	r3, r3, #3
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	220f      	movs	r2, #15
 8009a94:	fa02 f303 	lsl.w	r3, r2, r3
 8009a98:	43db      	mvns	r3, r3
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009aa6:	d01f      	beq.n	8009ae8 <HAL_GPIO_Init+0x1f8>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a4c      	ldr	r2, [pc, #304]	; (8009bdc <HAL_GPIO_Init+0x2ec>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d019      	beq.n	8009ae4 <HAL_GPIO_Init+0x1f4>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a4b      	ldr	r2, [pc, #300]	; (8009be0 <HAL_GPIO_Init+0x2f0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d013      	beq.n	8009ae0 <HAL_GPIO_Init+0x1f0>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a4a      	ldr	r2, [pc, #296]	; (8009be4 <HAL_GPIO_Init+0x2f4>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d00d      	beq.n	8009adc <HAL_GPIO_Init+0x1ec>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a49      	ldr	r2, [pc, #292]	; (8009be8 <HAL_GPIO_Init+0x2f8>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d007      	beq.n	8009ad8 <HAL_GPIO_Init+0x1e8>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a48      	ldr	r2, [pc, #288]	; (8009bec <HAL_GPIO_Init+0x2fc>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d101      	bne.n	8009ad4 <HAL_GPIO_Init+0x1e4>
 8009ad0:	2305      	movs	r3, #5
 8009ad2:	e00a      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009ad4:	2306      	movs	r3, #6
 8009ad6:	e008      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009ad8:	2304      	movs	r3, #4
 8009ada:	e006      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009adc:	2303      	movs	r3, #3
 8009ade:	e004      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e002      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e000      	b.n	8009aea <HAL_GPIO_Init+0x1fa>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	697a      	ldr	r2, [r7, #20]
 8009aec:	f002 0203 	and.w	r2, r2, #3
 8009af0:	0092      	lsls	r2, r2, #2
 8009af2:	4093      	lsls	r3, r2
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009afa:	4937      	ldr	r1, [pc, #220]	; (8009bd8 <HAL_GPIO_Init+0x2e8>)
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	089b      	lsrs	r3, r3, #2
 8009b00:	3302      	adds	r3, #2
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009b08:	4b39      	ldr	r3, [pc, #228]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	43db      	mvns	r3, r3
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4013      	ands	r3, r2
 8009b16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009b2c:	4a30      	ldr	r2, [pc, #192]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009b32:	4b2f      	ldr	r3, [pc, #188]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	43db      	mvns	r3, r3
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	4013      	ands	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009b56:	4a26      	ldr	r2, [pc, #152]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009b5c:	4b24      	ldr	r3, [pc, #144]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	43db      	mvns	r3, r3
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	4013      	ands	r3, r2
 8009b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d003      	beq.n	8009b80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009b80:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	43db      	mvns	r3, r3
 8009b90:	693a      	ldr	r2, [r7, #16]
 8009b92:	4013      	ands	r3, r2
 8009b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009baa:	4a11      	ldr	r2, [pc, #68]	; (8009bf0 <HAL_GPIO_Init+0x300>)
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f47f ae9d 	bne.w	8009900 <HAL_GPIO_Init+0x10>
  }
}
 8009bc6:	bf00      	nop
 8009bc8:	bf00      	nop
 8009bca:	371c      	adds	r7, #28
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	40021000 	.word	0x40021000
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	48000400 	.word	0x48000400
 8009be0:	48000800 	.word	0x48000800
 8009be4:	48000c00 	.word	0x48000c00
 8009be8:	48001000 	.word	0x48001000
 8009bec:	48001400 	.word	0x48001400
 8009bf0:	40010400 	.word	0x40010400

08009bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
 8009c00:	4613      	mov	r3, r2
 8009c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009c04:	787b      	ldrb	r3, [r7, #1]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009c0a:	887a      	ldrh	r2, [r7, #2]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009c10:	e002      	b.n	8009c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009c12:	887a      	ldrh	r2, [r7, #2]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009c36:	887a      	ldrh	r2, [r7, #2]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	041a      	lsls	r2, r3, #16
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	43d9      	mvns	r1, r3
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	400b      	ands	r3, r1
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	619a      	str	r2, [r3, #24]
}
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	4603      	mov	r3, r0
 8009c60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009c62:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c64:	695a      	ldr	r2, [r3, #20]
 8009c66:	88fb      	ldrh	r3, [r7, #6]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d006      	beq.n	8009c7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009c6e:	4a05      	ldr	r2, [pc, #20]	; (8009c84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009c70:	88fb      	ldrh	r3, [r7, #6]
 8009c72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f806 	bl	8009c88 <HAL_GPIO_EXTI_Callback>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	40010400 	.word	0x40010400

08009c88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	4603      	mov	r3, r0
 8009c90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009c92:	bf00      	nop
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e081      	b.n	8009db4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f7fc fb59 	bl	800637c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2224      	movs	r2, #36	; 0x24
 8009cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	685a      	ldr	r2, [r3, #4]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009cee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	689a      	ldr	r2, [r3, #8]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009cfe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d107      	bne.n	8009d18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d14:	609a      	str	r2, [r3, #8]
 8009d16:	e006      	b.n	8009d26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009d24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d104      	bne.n	8009d38 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	691a      	ldr	r2, [r3, #16]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	69d9      	ldr	r1, [r3, #28]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1a      	ldr	r2, [r3, #32]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	430a      	orrs	r2, r1
 8009d84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f042 0201 	orr.w	r2, r2, #1
 8009d94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009db2:	2300      	movs	r3, #0
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3708      	adds	r7, #8
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b088      	sub	sp, #32
 8009dc0:	af02      	add	r7, sp, #8
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	4608      	mov	r0, r1
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4603      	mov	r3, r0
 8009dcc:	817b      	strh	r3, [r7, #10]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	813b      	strh	r3, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	f040 80f9 	bne.w	8009fd6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <HAL_I2C_Mem_Write+0x34>
 8009dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d105      	bne.n	8009dfc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009df6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e0ed      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_I2C_Mem_Write+0x4e>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e0e6      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009e12:	f7fd ff21 	bl	8007c58 <HAL_GetTick>
 8009e16:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	9300      	str	r3, [sp, #0]
 8009e1c:	2319      	movs	r3, #25
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 fac3 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e0d1      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2221      	movs	r2, #33	; 0x21
 8009e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2240      	movs	r2, #64	; 0x40
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	6a3a      	ldr	r2, [r7, #32]
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e5c:	88f8      	ldrh	r0, [r7, #6]
 8009e5e:	893a      	ldrh	r2, [r7, #8]
 8009e60:	8979      	ldrh	r1, [r7, #10]
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	9301      	str	r3, [sp, #4]
 8009e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 f9d3 	bl	800a218 <I2C_RequestMemoryWrite>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d005      	beq.n	8009e84 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0a9      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	2bff      	cmp	r3, #255	; 0xff
 8009e8c:	d90e      	bls.n	8009eac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	22ff      	movs	r2, #255	; 0xff
 8009e92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	8979      	ldrh	r1, [r7, #10]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	f000 fc2b 	bl	800a700 <I2C_TransferConfig>
 8009eaa:	e00f      	b.n	8009ecc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	8979      	ldrh	r1, [r7, #10]
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ec6:	68f8      	ldr	r0, [r7, #12]
 8009ec8:	f000 fc1a 	bl	800a700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f000 faad 	bl	800a430 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e07b      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee4:	781a      	ldrb	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	1c5a      	adds	r2, r3, #1
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	b29a      	uxth	r2, r3
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d034      	beq.n	8009f84 <HAL_I2C_Mem_Write+0x1c8>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d130      	bne.n	8009f84 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2180      	movs	r1, #128	; 0x80
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 fa3f 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e04d      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	2bff      	cmp	r3, #255	; 0xff
 8009f44:	d90e      	bls.n	8009f64 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	22ff      	movs	r2, #255	; 0xff
 8009f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	8979      	ldrh	r1, [r7, #10]
 8009f54:	2300      	movs	r3, #0
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 fbcf 	bl	800a700 <I2C_TransferConfig>
 8009f62:	e00f      	b.n	8009f84 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	8979      	ldrh	r1, [r7, #10]
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f000 fbbe 	bl	800a700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d19e      	bne.n	8009ecc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f000 fa8c 	bl	800a4b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e01a      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6859      	ldr	r1, [r3, #4]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <HAL_I2C_Mem_Write+0x224>)
 8009fb6:	400b      	ands	r3, r1
 8009fb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	e000      	b.n	8009fd8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009fd6:	2302      	movs	r3, #2
  }
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	fe00e800 	.word	0xfe00e800

08009fe4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b088      	sub	sp, #32
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	817b      	strh	r3, [r7, #10]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	813b      	strh	r3, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b20      	cmp	r3, #32
 800a008:	f040 80fd 	bne.w	800a206 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <HAL_I2C_Mem_Read+0x34>
 800a012:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d105      	bne.n	800a024 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a01e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e0f1      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d101      	bne.n	800a032 <HAL_I2C_Mem_Read+0x4e>
 800a02e:	2302      	movs	r3, #2
 800a030:	e0ea      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a03a:	f7fd fe0d 	bl	8007c58 <HAL_GetTick>
 800a03e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	2319      	movs	r3, #25
 800a046:	2201      	movs	r2, #1
 800a048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f9af 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e0d5      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2222      	movs	r2, #34	; 0x22
 800a060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2240      	movs	r2, #64	; 0x40
 800a068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6a3a      	ldr	r2, [r7, #32]
 800a076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a07c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a084:	88f8      	ldrh	r0, [r7, #6]
 800a086:	893a      	ldrh	r2, [r7, #8]
 800a088:	8979      	ldrh	r1, [r7, #10]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	4603      	mov	r3, r0
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f913 	bl	800a2c0 <I2C_RequestMemoryRead>
 800a09a:	4603      	mov	r3, r0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d005      	beq.n	800a0ac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e0ad      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	2bff      	cmp	r3, #255	; 0xff
 800a0b4:	d90e      	bls.n	800a0d4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	22ff      	movs	r2, #255	; 0xff
 800a0ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	8979      	ldrh	r1, [r7, #10]
 800a0c4:	4b52      	ldr	r3, [pc, #328]	; (800a210 <HAL_I2C_Mem_Read+0x22c>)
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 fb17 	bl	800a700 <I2C_TransferConfig>
 800a0d2:	e00f      	b.n	800a0f4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	8979      	ldrh	r1, [r7, #10]
 800a0e6:	4b4a      	ldr	r3, [pc, #296]	; (800a210 <HAL_I2C_Mem_Read+0x22c>)
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fb06 	bl	800a700 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	2104      	movs	r1, #4
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f956 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e07c      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	b2d2      	uxtb	r2, r2
 800a11a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	1c5a      	adds	r2, r3, #1
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a12a:	3b01      	subs	r3, #1
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a136:	b29b      	uxth	r3, r3
 800a138:	3b01      	subs	r3, #1
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a144:	b29b      	uxth	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d034      	beq.n	800a1b4 <HAL_I2C_Mem_Read+0x1d0>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d130      	bne.n	800a1b4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	9300      	str	r3, [sp, #0]
 800a156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a158:	2200      	movs	r2, #0
 800a15a:	2180      	movs	r1, #128	; 0x80
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f000 f927 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d001      	beq.n	800a16c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e04d      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a170:	b29b      	uxth	r3, r3
 800a172:	2bff      	cmp	r3, #255	; 0xff
 800a174:	d90e      	bls.n	800a194 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	22ff      	movs	r2, #255	; 0xff
 800a17a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a180:	b2da      	uxtb	r2, r3
 800a182:	8979      	ldrh	r1, [r7, #10]
 800a184:	2300      	movs	r3, #0
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f000 fab7 	bl	800a700 <I2C_TransferConfig>
 800a192:	e00f      	b.n	800a1b4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a198:	b29a      	uxth	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a2:	b2da      	uxtb	r2, r3
 800a1a4:	8979      	ldrh	r1, [r7, #10]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 faa6 	bl	800a700 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d19a      	bne.n	800a0f4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f000 f974 	bl	800a4b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e01a      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2220      	movs	r2, #32
 800a1d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6859      	ldr	r1, [r3, #4]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <HAL_I2C_Mem_Read+0x230>)
 800a1e6:	400b      	ands	r3, r1
 800a1e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2220      	movs	r2, #32
 800a1ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	e000      	b.n	800a208 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a206:	2302      	movs	r3, #2
  }
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	80002400 	.word	0x80002400
 800a214:	fe00e800 	.word	0xfe00e800

0800a218 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4603      	mov	r3, r0
 800a228:	817b      	strh	r3, [r7, #10]
 800a22a:	460b      	mov	r3, r1
 800a22c:	813b      	strh	r3, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	b2da      	uxtb	r2, r3
 800a236:	8979      	ldrh	r1, [r7, #10]
 800a238:	4b20      	ldr	r3, [pc, #128]	; (800a2bc <I2C_RequestMemoryWrite+0xa4>)
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 fa5d 	bl	800a700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a246:	69fa      	ldr	r2, [r7, #28]
 800a248:	69b9      	ldr	r1, [r7, #24]
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 f8f0 	bl	800a430 <I2C_WaitOnTXISFlagUntilTimeout>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e02c      	b.n	800a2b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d105      	bne.n	800a26c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a260:	893b      	ldrh	r3, [r7, #8]
 800a262:	b2da      	uxtb	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	629a      	str	r2, [r3, #40]	; 0x28
 800a26a:	e015      	b.n	800a298 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a26c:	893b      	ldrh	r3, [r7, #8]
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	b29b      	uxth	r3, r3
 800a272:	b2da      	uxtb	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a27a:	69fa      	ldr	r2, [r7, #28]
 800a27c:	69b9      	ldr	r1, [r7, #24]
 800a27e:	68f8      	ldr	r0, [r7, #12]
 800a280:	f000 f8d6 	bl	800a430 <I2C_WaitOnTXISFlagUntilTimeout>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e012      	b.n	800a2b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a28e:	893b      	ldrh	r3, [r7, #8]
 800a290:	b2da      	uxtb	r2, r3
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2180      	movs	r1, #128	; 0x80
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f884 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	80002000 	.word	0x80002000

0800a2c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b086      	sub	sp, #24
 800a2c4:	af02      	add	r7, sp, #8
 800a2c6:	60f8      	str	r0, [r7, #12]
 800a2c8:	4608      	mov	r0, r1
 800a2ca:	4611      	mov	r1, r2
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	817b      	strh	r3, [r7, #10]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	813b      	strh	r3, [r7, #8]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	8979      	ldrh	r1, [r7, #10]
 800a2e0:	4b20      	ldr	r3, [pc, #128]	; (800a364 <I2C_RequestMemoryRead+0xa4>)
 800a2e2:	9300      	str	r3, [sp, #0]
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	68f8      	ldr	r0, [r7, #12]
 800a2e8:	f000 fa0a 	bl	800a700 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	69b9      	ldr	r1, [r7, #24]
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 f89d 	bl	800a430 <I2C_WaitOnTXISFlagUntilTimeout>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e02c      	b.n	800a35a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a300:	88fb      	ldrh	r3, [r7, #6]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d105      	bne.n	800a312 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a306:	893b      	ldrh	r3, [r7, #8]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	629a      	str	r2, [r3, #40]	; 0x28
 800a310:	e015      	b.n	800a33e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a312:	893b      	ldrh	r3, [r7, #8]
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	b29b      	uxth	r3, r3
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a320:	69fa      	ldr	r2, [r7, #28]
 800a322:	69b9      	ldr	r1, [r7, #24]
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 f883 	bl	800a430 <I2C_WaitOnTXISFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e012      	b.n	800a35a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a334:	893b      	ldrh	r3, [r7, #8]
 800a336:	b2da      	uxtb	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2200      	movs	r2, #0
 800a346:	2140      	movs	r1, #64	; 0x40
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f831 	bl	800a3b0 <I2C_WaitOnFlagUntilTimeout>
 800a34e:	4603      	mov	r3, r0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d001      	beq.n	800a358 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e000      	b.n	800a35a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	80002000 	.word	0x80002000

0800a368 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d103      	bne.n	800a386 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2200      	movs	r2, #0
 800a384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b01      	cmp	r3, #1
 800a392:	d007      	beq.n	800a3a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699a      	ldr	r2, [r3, #24]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	619a      	str	r2, [r3, #24]
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b084      	sub	sp, #16
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a3c0:	e022      	b.n	800a408 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c8:	d01e      	beq.n	800a408 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3ca:	f7fd fc45 	bl	8007c58 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d302      	bcc.n	800a3e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d113      	bne.n	800a408 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e4:	f043 0220 	orr.w	r2, r3, #32
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e00f      	b.n	800a428 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	699a      	ldr	r2, [r3, #24]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4013      	ands	r3, r2
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	429a      	cmp	r2, r3
 800a416:	bf0c      	ite	eq
 800a418:	2301      	moveq	r3, #1
 800a41a:	2300      	movne	r3, #0
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	429a      	cmp	r2, r3
 800a424:	d0cd      	beq.n	800a3c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a43c:	e02c      	b.n	800a498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 f870 	bl	800a528 <I2C_IsErrorOccurred>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e02a      	b.n	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a458:	d01e      	beq.n	800a498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45a:	f7fd fbfd 	bl	8007c58 <HAL_GetTick>
 800a45e:	4602      	mov	r2, r0
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	1ad3      	subs	r3, r2, r3
 800a464:	68ba      	ldr	r2, [r7, #8]
 800a466:	429a      	cmp	r2, r3
 800a468:	d302      	bcc.n	800a470 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d113      	bne.n	800a498 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a474:	f043 0220 	orr.w	r2, r3, #32
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2220      	movs	r2, #32
 800a480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	e007      	b.n	800a4a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699b      	ldr	r3, [r3, #24]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d1cb      	bne.n	800a43e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a4bc:	e028      	b.n	800a510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	68b9      	ldr	r1, [r7, #8]
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 f830 	bl	800a528 <I2C_IsErrorOccurred>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e026      	b.n	800a520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4d2:	f7fd fbc1 	bl	8007c58 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	68ba      	ldr	r2, [r7, #8]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d302      	bcc.n	800a4e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d113      	bne.n	800a510 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ec:	f043 0220 	orr.w	r2, r3, #32
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2220      	movs	r2, #32
 800a4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e007      	b.n	800a520 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	f003 0320 	and.w	r3, r3, #32
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	d1cf      	bne.n	800a4be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a534:	2300      	movs	r3, #0
 800a536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b00      	cmp	r3, #0
 800a552:	d075      	beq.n	800a640 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2210      	movs	r2, #16
 800a55a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a55c:	e056      	b.n	800a60c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d052      	beq.n	800a60c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a566:	f7fd fb77 	bl	8007c58 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	68ba      	ldr	r2, [r7, #8]
 800a572:	429a      	cmp	r2, r3
 800a574:	d302      	bcc.n	800a57c <I2C_IsErrorOccurred+0x54>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d147      	bne.n	800a60c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a58e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a59a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a59e:	d12e      	bne.n	800a5fe <I2C_IsErrorOccurred+0xd6>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5a6:	d02a      	beq.n	800a5fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a5a8:	7cfb      	ldrb	r3, [r7, #19]
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d027      	beq.n	800a5fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a5be:	f7fd fb4b 	bl	8007c58 <HAL_GetTick>
 800a5c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5c4:	e01b      	b.n	800a5fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a5c6:	f7fd fb47 	bl	8007c58 <HAL_GetTick>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	1ad3      	subs	r3, r2, r3
 800a5d0:	2b19      	cmp	r3, #25
 800a5d2:	d914      	bls.n	800a5fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d8:	f043 0220 	orr.w	r2, r3, #32
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b20      	cmp	r3, #32
 800a60a:	d1dc      	bne.n	800a5c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	699b      	ldr	r3, [r3, #24]
 800a612:	f003 0320 	and.w	r3, r3, #32
 800a616:	2b20      	cmp	r3, #32
 800a618:	d003      	beq.n	800a622 <I2C_IsErrorOccurred+0xfa>
 800a61a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d09d      	beq.n	800a55e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2220      	movs	r2, #32
 800a630:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	f043 0304 	orr.w	r3, r3, #4
 800a638:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00b      	beq.n	800a66a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	f043 0301 	orr.w	r3, r3, #1
 800a658:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a662:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a674:	6a3b      	ldr	r3, [r7, #32]
 800a676:	f043 0308 	orr.w	r3, r3, #8
 800a67a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	f043 0302 	orr.w	r3, r3, #2
 800a69c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d01c      	beq.n	800a6f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fe56 	bl	800a368 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	; (800a6fc <I2C_IsErrorOccurred+0x1d4>)
 800a6c8:	400b      	ands	r3, r1
 800a6ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6d0:	6a3b      	ldr	r3, [r7, #32]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2220      	movs	r2, #32
 800a6dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a6f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3728      	adds	r7, #40	; 0x28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	fe00e800 	.word	0xfe00e800

0800a700 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	607b      	str	r3, [r7, #4]
 800a70a:	460b      	mov	r3, r1
 800a70c:	817b      	strh	r3, [r7, #10]
 800a70e:	4613      	mov	r3, r2
 800a710:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a712:	897b      	ldrh	r3, [r7, #10]
 800a714:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a718:	7a7b      	ldrb	r3, [r7, #9]
 800a71a:	041b      	lsls	r3, r3, #16
 800a71c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a720:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	4313      	orrs	r3, r2
 800a72a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a72e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	0d5b      	lsrs	r3, r3, #21
 800a73a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <I2C_TransferConfig+0x60>)
 800a740:	430b      	orrs	r3, r1
 800a742:	43db      	mvns	r3, r3
 800a744:	ea02 0103 	and.w	r1, r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	430a      	orrs	r2, r1
 800a750:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a752:	bf00      	nop
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	03ff63ff 	.word	0x03ff63ff

0800a764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b20      	cmp	r3, #32
 800a778:	d138      	bne.n	800a7ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a780:	2b01      	cmp	r3, #1
 800a782:	d101      	bne.n	800a788 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a784:	2302      	movs	r3, #2
 800a786:	e032      	b.n	800a7ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2224      	movs	r2, #36	; 0x24
 800a794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0201 	bic.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a7b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	683a      	ldr	r2, [r7, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0201 	orr.w	r2, r2, #1
 800a7d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	e000      	b.n	800a7ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a7ec:	2302      	movs	r3, #2
  }
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b20      	cmp	r3, #32
 800a80e:	d139      	bne.n	800a884 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a816:	2b01      	cmp	r3, #1
 800a818:	d101      	bne.n	800a81e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a81a:	2302      	movs	r3, #2
 800a81c:	e033      	b.n	800a886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2224      	movs	r2, #36	; 0x24
 800a82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f022 0201 	bic.w	r2, r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a84c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	021b      	lsls	r3, r3, #8
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4313      	orrs	r3, r2
 800a856:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0201 	orr.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a880:	2300      	movs	r3, #0
 800a882:	e000      	b.n	800a886 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a884:	2302      	movs	r3, #2
  }
}
 800a886:	4618      	mov	r0, r3
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
	...

0800a894 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d141      	bne.n	800a926 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a8a2:	4b4b      	ldr	r3, [pc, #300]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ae:	d131      	bne.n	800a914 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a8b0:	4b47      	ldr	r3, [pc, #284]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8b6:	4a46      	ldr	r2, [pc, #280]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a8c0:	4b43      	ldr	r3, [pc, #268]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a8c8:	4a41      	ldr	r2, [pc, #260]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a8d0:	4b40      	ldr	r3, [pc, #256]	; (800a9d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2232      	movs	r2, #50	; 0x32
 800a8d6:	fb02 f303 	mul.w	r3, r2, r3
 800a8da:	4a3f      	ldr	r2, [pc, #252]	; (800a9d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e0:	0c9b      	lsrs	r3, r3, #18
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8e6:	e002      	b.n	800a8ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a8ee:	4b38      	ldr	r3, [pc, #224]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8fa:	d102      	bne.n	800a902 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1f2      	bne.n	800a8e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a902:	4b33      	ldr	r3, [pc, #204]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a90a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a90e:	d158      	bne.n	800a9c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e057      	b.n	800a9c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a914:	4b2e      	ldr	r3, [pc, #184]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a91a:	4a2d      	ldr	r2, [pc, #180]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a91c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a924:	e04d      	b.n	800a9c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a92c:	d141      	bne.n	800a9b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a92e:	4b28      	ldr	r3, [pc, #160]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a93a:	d131      	bne.n	800a9a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a93c:	4b24      	ldr	r3, [pc, #144]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a93e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a942:	4a23      	ldr	r2, [pc, #140]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a94c:	4b20      	ldr	r3, [pc, #128]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a954:	4a1e      	ldr	r2, [pc, #120]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a95a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a95c:	4b1d      	ldr	r3, [pc, #116]	; (800a9d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2232      	movs	r2, #50	; 0x32
 800a962:	fb02 f303 	mul.w	r3, r2, r3
 800a966:	4a1c      	ldr	r2, [pc, #112]	; (800a9d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a968:	fba2 2303 	umull	r2, r3, r2, r3
 800a96c:	0c9b      	lsrs	r3, r3, #18
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a972:	e002      	b.n	800a97a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3b01      	subs	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a97a:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a986:	d102      	bne.n	800a98e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1f2      	bne.n	800a974 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a98e:	4b10      	ldr	r3, [pc, #64]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a990:	695b      	ldr	r3, [r3, #20]
 800a992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a99a:	d112      	bne.n	800a9c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e011      	b.n	800a9c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9a6:	4a0a      	ldr	r2, [pc, #40]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a9b0:	e007      	b.n	800a9c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a9b2:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a9ba:	4a05      	ldr	r2, [pc, #20]	; (800a9d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a9bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a9c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	40007000 	.word	0x40007000
 800a9d4:	20000004 	.word	0x20000004
 800a9d8:	431bde83 	.word	0x431bde83

0800a9dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e306      	b.n	800affc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d075      	beq.n	800aae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a9fa:	4b97      	ldr	r3, [pc, #604]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f003 030c 	and.w	r3, r3, #12
 800aa02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aa04:	4b94      	ldr	r3, [pc, #592]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	f003 0303 	and.w	r3, r3, #3
 800aa0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	2b0c      	cmp	r3, #12
 800aa12:	d102      	bne.n	800aa1a <HAL_RCC_OscConfig+0x3e>
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d002      	beq.n	800aa20 <HAL_RCC_OscConfig+0x44>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d10b      	bne.n	800aa38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa20:	4b8d      	ldr	r3, [pc, #564]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d05b      	beq.n	800aae4 <HAL_RCC_OscConfig+0x108>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d157      	bne.n	800aae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e2e1      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa40:	d106      	bne.n	800aa50 <HAL_RCC_OscConfig+0x74>
 800aa42:	4b85      	ldr	r3, [pc, #532]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a84      	ldr	r2, [pc, #528]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa4c:	6013      	str	r3, [r2, #0]
 800aa4e:	e01d      	b.n	800aa8c <HAL_RCC_OscConfig+0xb0>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa58:	d10c      	bne.n	800aa74 <HAL_RCC_OscConfig+0x98>
 800aa5a:	4b7f      	ldr	r3, [pc, #508]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a7e      	ldr	r2, [pc, #504]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa64:	6013      	str	r3, [r2, #0]
 800aa66:	4b7c      	ldr	r3, [pc, #496]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a7b      	ldr	r2, [pc, #492]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	e00b      	b.n	800aa8c <HAL_RCC_OscConfig+0xb0>
 800aa74:	4b78      	ldr	r3, [pc, #480]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a77      	ldr	r2, [pc, #476]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	4b75      	ldr	r3, [pc, #468]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a74      	ldr	r2, [pc, #464]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aa86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d013      	beq.n	800aabc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa94:	f7fd f8e0 	bl	8007c58 <HAL_GetTick>
 800aa98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aa9a:	e008      	b.n	800aaae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa9c:	f7fd f8dc 	bl	8007c58 <HAL_GetTick>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	1ad3      	subs	r3, r2, r3
 800aaa6:	2b64      	cmp	r3, #100	; 0x64
 800aaa8:	d901      	bls.n	800aaae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e2a6      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aaae:	4b6a      	ldr	r3, [pc, #424]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f0      	beq.n	800aa9c <HAL_RCC_OscConfig+0xc0>
 800aaba:	e014      	b.n	800aae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aabc:	f7fd f8cc 	bl	8007c58 <HAL_GetTick>
 800aac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aac2:	e008      	b.n	800aad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aac4:	f7fd f8c8 	bl	8007c58 <HAL_GetTick>
 800aac8:	4602      	mov	r2, r0
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	2b64      	cmp	r3, #100	; 0x64
 800aad0:	d901      	bls.n	800aad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e292      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aad6:	4b60      	ldr	r3, [pc, #384]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1f0      	bne.n	800aac4 <HAL_RCC_OscConfig+0xe8>
 800aae2:	e000      	b.n	800aae6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d075      	beq.n	800abde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aaf2:	4b59      	ldr	r3, [pc, #356]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f003 030c 	and.w	r3, r3, #12
 800aafa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800aafc:	4b56      	ldr	r3, [pc, #344]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f003 0303 	and.w	r3, r3, #3
 800ab04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ab06:	69bb      	ldr	r3, [r7, #24]
 800ab08:	2b0c      	cmp	r3, #12
 800ab0a:	d102      	bne.n	800ab12 <HAL_RCC_OscConfig+0x136>
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d002      	beq.n	800ab18 <HAL_RCC_OscConfig+0x13c>
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d11f      	bne.n	800ab58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ab18:	4b4f      	ldr	r3, [pc, #316]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_RCC_OscConfig+0x154>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e265      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab30:	4b49      	ldr	r3, [pc, #292]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	691b      	ldr	r3, [r3, #16]
 800ab3c:	061b      	lsls	r3, r3, #24
 800ab3e:	4946      	ldr	r1, [pc, #280]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab40:	4313      	orrs	r3, r2
 800ab42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ab44:	4b45      	ldr	r3, [pc, #276]	; (800ac5c <HAL_RCC_OscConfig+0x280>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fc fc25 	bl	8007398 <HAL_InitTick>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d043      	beq.n	800abdc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e251      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d023      	beq.n	800aba8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab60:	4b3d      	ldr	r3, [pc, #244]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a3c      	ldr	r2, [pc, #240]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab6c:	f7fd f874 	bl	8007c58 <HAL_GetTick>
 800ab70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab72:	e008      	b.n	800ab86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab74:	f7fd f870 	bl	8007c58 <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d901      	bls.n	800ab86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e23a      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab86:	4b34      	ldr	r3, [pc, #208]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0f0      	beq.n	800ab74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab92:	4b31      	ldr	r3, [pc, #196]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	061b      	lsls	r3, r3, #24
 800aba0:	492d      	ldr	r1, [pc, #180]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	604b      	str	r3, [r1, #4]
 800aba6:	e01a      	b.n	800abde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aba8:	4b2b      	ldr	r3, [pc, #172]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4a2a      	ldr	r2, [pc, #168]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800abae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abb4:	f7fd f850 	bl	8007c58 <HAL_GetTick>
 800abb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abba:	e008      	b.n	800abce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abbc:	f7fd f84c 	bl	8007c58 <HAL_GetTick>
 800abc0:	4602      	mov	r2, r0
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d901      	bls.n	800abce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800abca:	2303      	movs	r3, #3
 800abcc:	e216      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800abce:	4b22      	ldr	r3, [pc, #136]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1f0      	bne.n	800abbc <HAL_RCC_OscConfig+0x1e0>
 800abda:	e000      	b.n	800abde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d041      	beq.n	800ac6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	695b      	ldr	r3, [r3, #20]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d01c      	beq.n	800ac2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abf2:	4b19      	ldr	r3, [pc, #100]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800abf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abf8:	4a17      	ldr	r2, [pc, #92]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800abfa:	f043 0301 	orr.w	r3, r3, #1
 800abfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac02:	f7fd f829 	bl	8007c58 <HAL_GetTick>
 800ac06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ac08:	e008      	b.n	800ac1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac0a:	f7fd f825 	bl	8007c58 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	2b02      	cmp	r3, #2
 800ac16:	d901      	bls.n	800ac1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e1ef      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ac1c:	4b0e      	ldr	r3, [pc, #56]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ac1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0ef      	beq.n	800ac0a <HAL_RCC_OscConfig+0x22e>
 800ac2a:	e020      	b.n	800ac6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac2c:	4b0a      	ldr	r3, [pc, #40]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ac2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac32:	4a09      	ldr	r2, [pc, #36]	; (800ac58 <HAL_RCC_OscConfig+0x27c>)
 800ac34:	f023 0301 	bic.w	r3, r3, #1
 800ac38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac3c:	f7fd f80c 	bl	8007c58 <HAL_GetTick>
 800ac40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac42:	e00d      	b.n	800ac60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac44:	f7fd f808 	bl	8007c58 <HAL_GetTick>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d906      	bls.n	800ac60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ac52:	2303      	movs	r3, #3
 800ac54:	e1d2      	b.n	800affc <HAL_RCC_OscConfig+0x620>
 800ac56:	bf00      	nop
 800ac58:	40021000 	.word	0x40021000
 800ac5c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ac60:	4b8c      	ldr	r3, [pc, #560]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ac62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac66:	f003 0302 	and.w	r3, r3, #2
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1ea      	bne.n	800ac44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f000 80a6 	beq.w	800adc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ac80:	4b84      	ldr	r3, [pc, #528]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ac82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d101      	bne.n	800ac90 <HAL_RCC_OscConfig+0x2b4>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <HAL_RCC_OscConfig+0x2b6>
 800ac90:	2300      	movs	r3, #0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00d      	beq.n	800acb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac96:	4b7f      	ldr	r3, [pc, #508]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9a:	4a7e      	ldr	r2, [pc, #504]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ac9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca0:	6593      	str	r3, [r2, #88]	; 0x58
 800aca2:	4b7c      	ldr	r3, [pc, #496]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800aca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800acae:	2301      	movs	r3, #1
 800acb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acb2:	4b79      	ldr	r3, [pc, #484]	; (800ae98 <HAL_RCC_OscConfig+0x4bc>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d118      	bne.n	800acf0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acbe:	4b76      	ldr	r3, [pc, #472]	; (800ae98 <HAL_RCC_OscConfig+0x4bc>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a75      	ldr	r2, [pc, #468]	; (800ae98 <HAL_RCC_OscConfig+0x4bc>)
 800acc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800acca:	f7fc ffc5 	bl	8007c58 <HAL_GetTick>
 800acce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800acd0:	e008      	b.n	800ace4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acd2:	f7fc ffc1 	bl	8007c58 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d901      	bls.n	800ace4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e18b      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ace4:	4b6c      	ldr	r3, [pc, #432]	; (800ae98 <HAL_RCC_OscConfig+0x4bc>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acec:	2b00      	cmp	r3, #0
 800acee:	d0f0      	beq.n	800acd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d108      	bne.n	800ad0a <HAL_RCC_OscConfig+0x32e>
 800acf8:	4b66      	ldr	r3, [pc, #408]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800acfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acfe:	4a65      	ldr	r2, [pc, #404]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad00:	f043 0301 	orr.w	r3, r3, #1
 800ad04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad08:	e024      	b.n	800ad54 <HAL_RCC_OscConfig+0x378>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	2b05      	cmp	r3, #5
 800ad10:	d110      	bne.n	800ad34 <HAL_RCC_OscConfig+0x358>
 800ad12:	4b60      	ldr	r3, [pc, #384]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad18:	4a5e      	ldr	r2, [pc, #376]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad1a:	f043 0304 	orr.w	r3, r3, #4
 800ad1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad22:	4b5c      	ldr	r3, [pc, #368]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad28:	4a5a      	ldr	r2, [pc, #360]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad2a:	f043 0301 	orr.w	r3, r3, #1
 800ad2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad32:	e00f      	b.n	800ad54 <HAL_RCC_OscConfig+0x378>
 800ad34:	4b57      	ldr	r3, [pc, #348]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3a:	4a56      	ldr	r2, [pc, #344]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad3c:	f023 0301 	bic.w	r3, r3, #1
 800ad40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ad44:	4b53      	ldr	r3, [pc, #332]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4a:	4a52      	ldr	r2, [pc, #328]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad4c:	f023 0304 	bic.w	r3, r3, #4
 800ad50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d016      	beq.n	800ad8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad5c:	f7fc ff7c 	bl	8007c58 <HAL_GetTick>
 800ad60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad62:	e00a      	b.n	800ad7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad64:	f7fc ff78 	bl	8007c58 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d901      	bls.n	800ad7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e140      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad7a:	4b46      	ldr	r3, [pc, #280]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ad7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0ed      	beq.n	800ad64 <HAL_RCC_OscConfig+0x388>
 800ad88:	e015      	b.n	800adb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad8a:	f7fc ff65 	bl	8007c58 <HAL_GetTick>
 800ad8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ad90:	e00a      	b.n	800ada8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad92:	f7fc ff61 	bl	8007c58 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d901      	bls.n	800ada8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e129      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ada8:	4b3a      	ldr	r3, [pc, #232]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800adaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adae:	f003 0302 	and.w	r3, r3, #2
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1ed      	bne.n	800ad92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800adb6:	7ffb      	ldrb	r3, [r7, #31]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d105      	bne.n	800adc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800adbc:	4b35      	ldr	r3, [pc, #212]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800adbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc0:	4a34      	ldr	r2, [pc, #208]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800adc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0320 	and.w	r3, r3, #32
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03c      	beq.n	800ae4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01c      	beq.n	800ae16 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800addc:	4b2d      	ldr	r3, [pc, #180]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800adde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ade2:	4a2c      	ldr	r2, [pc, #176]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ade4:	f043 0301 	orr.w	r3, r3, #1
 800ade8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adec:	f7fc ff34 	bl	8007c58 <HAL_GetTick>
 800adf0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800adf2:	e008      	b.n	800ae06 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800adf4:	f7fc ff30 	bl	8007c58 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e0fa      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ae06:	4b23      	ldr	r3, [pc, #140]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0ef      	beq.n	800adf4 <HAL_RCC_OscConfig+0x418>
 800ae14:	e01b      	b.n	800ae4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae16:	4b1f      	ldr	r3, [pc, #124]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae1c:	4a1d      	ldr	r2, [pc, #116]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae1e:	f023 0301 	bic.w	r3, r3, #1
 800ae22:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae26:	f7fc ff17 	bl	8007c58 <HAL_GetTick>
 800ae2a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ae2c:	e008      	b.n	800ae40 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae2e:	f7fc ff13 	bl	8007c58 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d901      	bls.n	800ae40 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e0dd      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ae40:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ae46:	f003 0302 	and.w	r3, r3, #2
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1ef      	bne.n	800ae2e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 80d1 	beq.w	800affa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae58:	4b0e      	ldr	r3, [pc, #56]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	f003 030c 	and.w	r3, r3, #12
 800ae60:	2b0c      	cmp	r3, #12
 800ae62:	f000 808b 	beq.w	800af7c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	69db      	ldr	r3, [r3, #28]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d15e      	bne.n	800af2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <HAL_RCC_OscConfig+0x4b8>)
 800ae74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae7a:	f7fc feed 	bl	8007c58 <HAL_GetTick>
 800ae7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae80:	e00c      	b.n	800ae9c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae82:	f7fc fee9 	bl	8007c58 <HAL_GetTick>
 800ae86:	4602      	mov	r2, r0
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d905      	bls.n	800ae9c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e0b3      	b.n	800affc <HAL_RCC_OscConfig+0x620>
 800ae94:	40021000 	.word	0x40021000
 800ae98:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae9c:	4b59      	ldr	r3, [pc, #356]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1ec      	bne.n	800ae82 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aea8:	4b56      	ldr	r3, [pc, #344]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	4b56      	ldr	r3, [pc, #344]	; (800b008 <HAL_RCC_OscConfig+0x62c>)
 800aeae:	4013      	ands	r3, r2
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6a11      	ldr	r1, [r2, #32]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aeb8:	3a01      	subs	r2, #1
 800aeba:	0112      	lsls	r2, r2, #4
 800aebc:	4311      	orrs	r1, r2
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aec2:	0212      	lsls	r2, r2, #8
 800aec4:	4311      	orrs	r1, r2
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aeca:	0852      	lsrs	r2, r2, #1
 800aecc:	3a01      	subs	r2, #1
 800aece:	0552      	lsls	r2, r2, #21
 800aed0:	4311      	orrs	r1, r2
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800aed6:	0852      	lsrs	r2, r2, #1
 800aed8:	3a01      	subs	r2, #1
 800aeda:	0652      	lsls	r2, r2, #25
 800aedc:	4311      	orrs	r1, r2
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800aee2:	06d2      	lsls	r2, r2, #27
 800aee4:	430a      	orrs	r2, r1
 800aee6:	4947      	ldr	r1, [pc, #284]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aeec:	4b45      	ldr	r3, [pc, #276]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a44      	ldr	r2, [pc, #272]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aef6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800aef8:	4b42      	ldr	r3, [pc, #264]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	4a41      	ldr	r2, [pc, #260]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800aefe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800af02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af04:	f7fc fea8 	bl	8007c58 <HAL_GetTick>
 800af08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af0c:	f7fc fea4 	bl	8007c58 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	693b      	ldr	r3, [r7, #16]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e06e      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800af1e:	4b39      	ldr	r3, [pc, #228]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d0f0      	beq.n	800af0c <HAL_RCC_OscConfig+0x530>
 800af2a:	e066      	b.n	800affa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800af2c:	4b35      	ldr	r3, [pc, #212]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a34      	ldr	r2, [pc, #208]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800af38:	4b32      	ldr	r3, [pc, #200]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af3a:	68db      	ldr	r3, [r3, #12]
 800af3c:	4a31      	ldr	r2, [pc, #196]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af3e:	f023 0303 	bic.w	r3, r3, #3
 800af42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800af44:	4b2f      	ldr	r3, [pc, #188]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	4a2e      	ldr	r2, [pc, #184]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800af4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af54:	f7fc fe80 	bl	8007c58 <HAL_GetTick>
 800af58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800af5c:	f7fc fe7c 	bl	8007c58 <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e046      	b.n	800affc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800af6e:	4b25      	ldr	r3, [pc, #148]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1f0      	bne.n	800af5c <HAL_RCC_OscConfig+0x580>
 800af7a:	e03e      	b.n	800affa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d101      	bne.n	800af88 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	e039      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800af88:	4b1e      	ldr	r3, [pc, #120]	; (800b004 <HAL_RCC_OscConfig+0x628>)
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f003 0203 	and.w	r2, r3, #3
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a1b      	ldr	r3, [r3, #32]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d12c      	bne.n	800aff6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa6:	3b01      	subs	r3, #1
 800afa8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800afaa:	429a      	cmp	r2, r3
 800afac:	d123      	bne.n	800aff6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afb8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800afba:	429a      	cmp	r2, r3
 800afbc:	d11b      	bne.n	800aff6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800afca:	429a      	cmp	r2, r3
 800afcc:	d113      	bne.n	800aff6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd8:	085b      	lsrs	r3, r3, #1
 800afda:	3b01      	subs	r3, #1
 800afdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800afde:	429a      	cmp	r2, r3
 800afe0:	d109      	bne.n	800aff6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afec:	085b      	lsrs	r3, r3, #1
 800afee:	3b01      	subs	r3, #1
 800aff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d001      	beq.n	800affa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800affa:	2300      	movs	r3, #0
}
 800affc:	4618      	mov	r0, r3
 800affe:	3720      	adds	r7, #32
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	40021000 	.word	0x40021000
 800b008:	019f800c 	.word	0x019f800c

0800b00c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e11e      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b024:	4b91      	ldr	r3, [pc, #580]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 030f 	and.w	r3, r3, #15
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d910      	bls.n	800b054 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b032:	4b8e      	ldr	r3, [pc, #568]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f023 020f 	bic.w	r2, r3, #15
 800b03a:	498c      	ldr	r1, [pc, #560]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	4313      	orrs	r3, r2
 800b040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b042:	4b8a      	ldr	r3, [pc, #552]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 030f 	and.w	r3, r3, #15
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d001      	beq.n	800b054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	e106      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d073      	beq.n	800b148 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	2b03      	cmp	r3, #3
 800b066:	d129      	bne.n	800b0bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b068:	4b81      	ldr	r3, [pc, #516]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e0f4      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b078:	f000 f9d0 	bl	800b41c <RCC_GetSysClockFreqFromPLLSource>
 800b07c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	4a7c      	ldr	r2, [pc, #496]	; (800b274 <HAL_RCC_ClockConfig+0x268>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d93f      	bls.n	800b106 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b086:	4b7a      	ldr	r3, [pc, #488]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d009      	beq.n	800b0a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d033      	beq.n	800b106 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d12f      	bne.n	800b106 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b0a6:	4b72      	ldr	r3, [pc, #456]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0ae:	4a70      	ldr	r2, [pc, #448]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b0b6:	2380      	movs	r3, #128	; 0x80
 800b0b8:	617b      	str	r3, [r7, #20]
 800b0ba:	e024      	b.n	800b106 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d107      	bne.n	800b0d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0c4:	4b6a      	ldr	r3, [pc, #424]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d109      	bne.n	800b0e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e0c6      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0d4:	4b66      	ldr	r3, [pc, #408]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d101      	bne.n	800b0e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e0be      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b0e4:	f000 f8ce 	bl	800b284 <HAL_RCC_GetSysClockFreq>
 800b0e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	4a61      	ldr	r2, [pc, #388]	; (800b274 <HAL_RCC_ClockConfig+0x268>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d909      	bls.n	800b106 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b0f2:	4b5f      	ldr	r3, [pc, #380]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0fa:	4a5d      	ldr	r2, [pc, #372]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b102:	2380      	movs	r3, #128	; 0x80
 800b104:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b106:	4b5a      	ldr	r3, [pc, #360]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f023 0203 	bic.w	r2, r3, #3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	4957      	ldr	r1, [pc, #348]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b114:	4313      	orrs	r3, r2
 800b116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b118:	f7fc fd9e 	bl	8007c58 <HAL_GetTick>
 800b11c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b11e:	e00a      	b.n	800b136 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b120:	f7fc fd9a 	bl	8007c58 <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b12e:	4293      	cmp	r3, r2
 800b130:	d901      	bls.n	800b136 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e095      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b136:	4b4e      	ldr	r3, [pc, #312]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 020c 	and.w	r2, r3, #12
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	429a      	cmp	r2, r3
 800b146:	d1eb      	bne.n	800b120 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0302 	and.w	r3, r3, #2
 800b150:	2b00      	cmp	r3, #0
 800b152:	d023      	beq.n	800b19c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d005      	beq.n	800b16c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b160:	4b43      	ldr	r3, [pc, #268]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	4a42      	ldr	r2, [pc, #264]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b166:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b16a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0308 	and.w	r3, r3, #8
 800b174:	2b00      	cmp	r3, #0
 800b176:	d007      	beq.n	800b188 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b178:	4b3d      	ldr	r3, [pc, #244]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b180:	4a3b      	ldr	r2, [pc, #236]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b188:	4b39      	ldr	r3, [pc, #228]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689b      	ldr	r3, [r3, #8]
 800b194:	4936      	ldr	r1, [pc, #216]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b196:	4313      	orrs	r3, r2
 800b198:	608b      	str	r3, [r1, #8]
 800b19a:	e008      	b.n	800b1ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2b80      	cmp	r3, #128	; 0x80
 800b1a0:	d105      	bne.n	800b1ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b1a2:	4b33      	ldr	r3, [pc, #204]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	4a32      	ldr	r2, [pc, #200]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b1a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b1ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b1ae:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d21d      	bcs.n	800b1f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1bc:	4b2b      	ldr	r3, [pc, #172]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f023 020f 	bic.w	r2, r3, #15
 800b1c4:	4929      	ldr	r1, [pc, #164]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b1cc:	f7fc fd44 	bl	8007c58 <HAL_GetTick>
 800b1d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1d2:	e00a      	b.n	800b1ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b1d4:	f7fc fd40 	bl	8007c58 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d901      	bls.n	800b1ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	e03b      	b.n	800b262 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ea:	4b20      	ldr	r3, [pc, #128]	; (800b26c <HAL_RCC_ClockConfig+0x260>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d1ed      	bne.n	800b1d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b00      	cmp	r3, #0
 800b202:	d008      	beq.n	800b216 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b204:	4b1a      	ldr	r3, [pc, #104]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	4917      	ldr	r1, [pc, #92]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b212:	4313      	orrs	r3, r2
 800b214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d009      	beq.n	800b236 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	00db      	lsls	r3, r3, #3
 800b230:	490f      	ldr	r1, [pc, #60]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b232:	4313      	orrs	r3, r2
 800b234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b236:	f000 f825 	bl	800b284 <HAL_RCC_GetSysClockFreq>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <HAL_RCC_ClockConfig+0x264>)
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	091b      	lsrs	r3, r3, #4
 800b242:	f003 030f 	and.w	r3, r3, #15
 800b246:	490c      	ldr	r1, [pc, #48]	; (800b278 <HAL_RCC_ClockConfig+0x26c>)
 800b248:	5ccb      	ldrb	r3, [r1, r3]
 800b24a:	f003 031f 	and.w	r3, r3, #31
 800b24e:	fa22 f303 	lsr.w	r3, r2, r3
 800b252:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <HAL_RCC_ClockConfig+0x270>)
 800b254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b256:	4b0a      	ldr	r3, [pc, #40]	; (800b280 <HAL_RCC_ClockConfig+0x274>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fc f89c 	bl	8007398 <HAL_InitTick>
 800b260:	4603      	mov	r3, r0
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	40022000 	.word	0x40022000
 800b270:	40021000 	.word	0x40021000
 800b274:	04c4b400 	.word	0x04c4b400
 800b278:	08012098 	.word	0x08012098
 800b27c:	20000004 	.word	0x20000004
 800b280:	20000008 	.word	0x20000008

0800b284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b284:	b480      	push	{r7}
 800b286:	b087      	sub	sp, #28
 800b288:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b28a:	4b2c      	ldr	r3, [pc, #176]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 030c 	and.w	r3, r3, #12
 800b292:	2b04      	cmp	r3, #4
 800b294:	d102      	bne.n	800b29c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b296:	4b2a      	ldr	r3, [pc, #168]	; (800b340 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b298:	613b      	str	r3, [r7, #16]
 800b29a:	e047      	b.n	800b32c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b29c:	4b27      	ldr	r3, [pc, #156]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f003 030c 	and.w	r3, r3, #12
 800b2a4:	2b08      	cmp	r3, #8
 800b2a6:	d102      	bne.n	800b2ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b2a8:	4b26      	ldr	r3, [pc, #152]	; (800b344 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b2aa:	613b      	str	r3, [r7, #16]
 800b2ac:	e03e      	b.n	800b32c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b2ae:	4b23      	ldr	r3, [pc, #140]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2b0:	689b      	ldr	r3, [r3, #8]
 800b2b2:	f003 030c 	and.w	r3, r3, #12
 800b2b6:	2b0c      	cmp	r3, #12
 800b2b8:	d136      	bne.n	800b328 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b2ba:	4b20      	ldr	r3, [pc, #128]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	f003 0303 	and.w	r3, r3, #3
 800b2c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b2c4:	4b1d      	ldr	r3, [pc, #116]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	091b      	lsrs	r3, r3, #4
 800b2ca:	f003 030f 	and.w	r3, r3, #15
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2b03      	cmp	r3, #3
 800b2d6:	d10c      	bne.n	800b2f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2d8:	4a1a      	ldr	r2, [pc, #104]	; (800b344 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e0:	4a16      	ldr	r2, [pc, #88]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2e2:	68d2      	ldr	r2, [r2, #12]
 800b2e4:	0a12      	lsrs	r2, r2, #8
 800b2e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	617b      	str	r3, [r7, #20]
      break;
 800b2f0:	e00c      	b.n	800b30c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b2f2:	4a13      	ldr	r2, [pc, #76]	; (800b340 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2fa:	4a10      	ldr	r2, [pc, #64]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b2fc:	68d2      	ldr	r2, [r2, #12]
 800b2fe:	0a12      	lsrs	r2, r2, #8
 800b300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b304:	fb02 f303 	mul.w	r3, r2, r3
 800b308:	617b      	str	r3, [r7, #20]
      break;
 800b30a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b30c:	4b0b      	ldr	r3, [pc, #44]	; (800b33c <HAL_RCC_GetSysClockFreq+0xb8>)
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	0e5b      	lsrs	r3, r3, #25
 800b312:	f003 0303 	and.w	r3, r3, #3
 800b316:	3301      	adds	r3, #1
 800b318:	005b      	lsls	r3, r3, #1
 800b31a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	fbb2 f3f3 	udiv	r3, r2, r3
 800b324:	613b      	str	r3, [r7, #16]
 800b326:	e001      	b.n	800b32c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b328:	2300      	movs	r3, #0
 800b32a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b32c:	693b      	ldr	r3, [r7, #16]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	371c      	adds	r7, #28
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	40021000 	.word	0x40021000
 800b340:	00f42400 	.word	0x00f42400
 800b344:	007a1200 	.word	0x007a1200

0800b348 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b348:	b480      	push	{r7}
 800b34a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b34c:	4b03      	ldr	r3, [pc, #12]	; (800b35c <HAL_RCC_GetHCLKFreq+0x14>)
 800b34e:	681b      	ldr	r3, [r3, #0]
}
 800b350:	4618      	mov	r0, r3
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	20000004 	.word	0x20000004

0800b360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b364:	f7ff fff0 	bl	800b348 <HAL_RCC_GetHCLKFreq>
 800b368:	4602      	mov	r2, r0
 800b36a:	4b06      	ldr	r3, [pc, #24]	; (800b384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	0a1b      	lsrs	r3, r3, #8
 800b370:	f003 0307 	and.w	r3, r3, #7
 800b374:	4904      	ldr	r1, [pc, #16]	; (800b388 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b376:	5ccb      	ldrb	r3, [r1, r3]
 800b378:	f003 031f 	and.w	r3, r3, #31
 800b37c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b380:	4618      	mov	r0, r3
 800b382:	bd80      	pop	{r7, pc}
 800b384:	40021000 	.word	0x40021000
 800b388:	080120a8 	.word	0x080120a8

0800b38c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b390:	f7ff ffda 	bl	800b348 <HAL_RCC_GetHCLKFreq>
 800b394:	4602      	mov	r2, r0
 800b396:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	0adb      	lsrs	r3, r3, #11
 800b39c:	f003 0307 	and.w	r3, r3, #7
 800b3a0:	4904      	ldr	r1, [pc, #16]	; (800b3b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b3a2:	5ccb      	ldrb	r3, [r1, r3]
 800b3a4:	f003 031f 	and.w	r3, r3, #31
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40021000 	.word	0x40021000
 800b3b4:	080120a8 	.word	0x080120a8

0800b3b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	220f      	movs	r2, #15
 800b3c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b3c8:	4b12      	ldr	r3, [pc, #72]	; (800b414 <HAL_RCC_GetClockConfig+0x5c>)
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0203 	and.w	r2, r3, #3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b3d4:	4b0f      	ldr	r3, [pc, #60]	; (800b414 <HAL_RCC_GetClockConfig+0x5c>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b3e0:	4b0c      	ldr	r3, [pc, #48]	; (800b414 <HAL_RCC_GetClockConfig+0x5c>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <HAL_RCC_GetClockConfig+0x5c>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	08db      	lsrs	r3, r3, #3
 800b3f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b3fa:	4b07      	ldr	r3, [pc, #28]	; (800b418 <HAL_RCC_GetClockConfig+0x60>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 020f 	and.w	r2, r3, #15
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	601a      	str	r2, [r3, #0]
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	40021000 	.word	0x40021000
 800b418:	40022000 	.word	0x40022000

0800b41c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b087      	sub	sp, #28
 800b420:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b422:	4b1e      	ldr	r3, [pc, #120]	; (800b49c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b42c:	4b1b      	ldr	r3, [pc, #108]	; (800b49c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	091b      	lsrs	r3, r3, #4
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	3301      	adds	r3, #1
 800b438:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d10c      	bne.n	800b45a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b440:	4a17      	ldr	r2, [pc, #92]	; (800b4a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	fbb2 f3f3 	udiv	r3, r2, r3
 800b448:	4a14      	ldr	r2, [pc, #80]	; (800b49c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b44a:	68d2      	ldr	r2, [r2, #12]
 800b44c:	0a12      	lsrs	r2, r2, #8
 800b44e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b452:	fb02 f303 	mul.w	r3, r2, r3
 800b456:	617b      	str	r3, [r7, #20]
    break;
 800b458:	e00c      	b.n	800b474 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b45a:	4a12      	ldr	r2, [pc, #72]	; (800b4a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b462:	4a0e      	ldr	r2, [pc, #56]	; (800b49c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b464:	68d2      	ldr	r2, [r2, #12]
 800b466:	0a12      	lsrs	r2, r2, #8
 800b468:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b46c:	fb02 f303 	mul.w	r3, r2, r3
 800b470:	617b      	str	r3, [r7, #20]
    break;
 800b472:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b474:	4b09      	ldr	r3, [pc, #36]	; (800b49c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	0e5b      	lsrs	r3, r3, #25
 800b47a:	f003 0303 	and.w	r3, r3, #3
 800b47e:	3301      	adds	r3, #1
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b484:	697a      	ldr	r2, [r7, #20]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	fbb2 f3f3 	udiv	r3, r2, r3
 800b48c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b48e:	687b      	ldr	r3, [r7, #4]
}
 800b490:	4618      	mov	r0, r3
 800b492:	371c      	adds	r7, #28
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	40021000 	.word	0x40021000
 800b4a0:	007a1200 	.word	0x007a1200
 800b4a4:	00f42400 	.word	0x00f42400

0800b4a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b086      	sub	sp, #24
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 8098 	beq.w	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4ca:	4b43      	ldr	r3, [pc, #268]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10d      	bne.n	800b4f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4d6:	4b40      	ldr	r3, [pc, #256]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4da:	4a3f      	ldr	r2, [pc, #252]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b4dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4e0:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e2:	4b3d      	ldr	r3, [pc, #244]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ea:	60bb      	str	r3, [r7, #8]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4f2:	4b3a      	ldr	r3, [pc, #232]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a39      	ldr	r2, [pc, #228]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b4f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4fe:	f7fc fbab 	bl	8007c58 <HAL_GetTick>
 800b502:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b504:	e009      	b.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b506:	f7fc fba7 	bl	8007c58 <HAL_GetTick>
 800b50a:	4602      	mov	r2, r0
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d902      	bls.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	74fb      	strb	r3, [r7, #19]
        break;
 800b518:	e005      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b51a:	4b30      	ldr	r3, [pc, #192]	; (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0ef      	beq.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b526:	7cfb      	ldrb	r3, [r7, #19]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d159      	bne.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b52c:	4b2a      	ldr	r3, [pc, #168]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b536:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01e      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b542:	697a      	ldr	r2, [r7, #20]
 800b544:	429a      	cmp	r2, r3
 800b546:	d019      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b548:	4b23      	ldr	r3, [pc, #140]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b54e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b554:	4b20      	ldr	r3, [pc, #128]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b55a:	4a1f      	ldr	r2, [pc, #124]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b564:	4b1c      	ldr	r3, [pc, #112]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b56a:	4a1b      	ldr	r2, [pc, #108]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b56c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b574:	4a18      	ldr	r2, [pc, #96]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	d016      	beq.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b586:	f7fc fb67 	bl	8007c58 <HAL_GetTick>
 800b58a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b58c:	e00b      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b58e:	f7fc fb63 	bl	8007c58 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d902      	bls.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	74fb      	strb	r3, [r7, #19]
            break;
 800b5a4:	e006      	b.n	800b5b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b5a6:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5ac:	f003 0302 	and.w	r3, r3, #2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0ec      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b5b4:	7cfb      	ldrb	r3, [r7, #19]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ba:	4b07      	ldr	r3, [pc, #28]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c8:	4903      	ldr	r1, [pc, #12]	; (800b5d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b5d2:	7cfb      	ldrb	r3, [r7, #19]
 800b5d4:	74bb      	strb	r3, [r7, #18]
 800b5d6:	e005      	b.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b5d8:	40021000 	.word	0x40021000
 800b5dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5e0:	7cfb      	ldrb	r3, [r7, #19]
 800b5e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b5e4:	7c7b      	ldrb	r3, [r7, #17]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d105      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5ea:	4ba7      	ldr	r3, [pc, #668]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b5ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ee:	4aa6      	ldr	r2, [pc, #664]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b5f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00a      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b602:	4ba1      	ldr	r3, [pc, #644]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b608:	f023 0203 	bic.w	r2, r3, #3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	499d      	ldr	r1, [pc, #628]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0302 	and.w	r3, r3, #2
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b624:	4b98      	ldr	r3, [pc, #608]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b62a:	f023 020c 	bic.w	r2, r3, #12
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	4995      	ldr	r1, [pc, #596]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b634:	4313      	orrs	r3, r2
 800b636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0304 	and.w	r3, r3, #4
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00a      	beq.n	800b65c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b646:	4b90      	ldr	r3, [pc, #576]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b64c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	498c      	ldr	r1, [pc, #560]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b656:	4313      	orrs	r3, r2
 800b658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0308 	and.w	r3, r3, #8
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00a      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b668:	4b87      	ldr	r3, [pc, #540]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b66a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b66e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	4984      	ldr	r1, [pc, #528]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b678:	4313      	orrs	r3, r2
 800b67a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0310 	and.w	r3, r3, #16
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b68a:	4b7f      	ldr	r3, [pc, #508]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	497b      	ldr	r1, [pc, #492]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b69a:	4313      	orrs	r3, r2
 800b69c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b6ac:	4b76      	ldr	r3, [pc, #472]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b6ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	4973      	ldr	r1, [pc, #460]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00a      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b6ce:	4b6e      	ldr	r3, [pc, #440]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	69db      	ldr	r3, [r3, #28]
 800b6dc:	496a      	ldr	r1, [pc, #424]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00a      	beq.n	800b706 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b6f0:	4b65      	ldr	r3, [pc, #404]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	4962      	ldr	r1, [pc, #392]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00a      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b712:	4b5d      	ldr	r3, [pc, #372]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b718:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b720:	4959      	ldr	r1, [pc, #356]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b722:	4313      	orrs	r3, r2
 800b724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b734:	4b54      	ldr	r3, [pc, #336]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b73a:	f023 0203 	bic.w	r2, r3, #3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	4951      	ldr	r1, [pc, #324]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b744:	4313      	orrs	r3, r2
 800b746:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00a      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b756:	4b4c      	ldr	r3, [pc, #304]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b75c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	4948      	ldr	r1, [pc, #288]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b766:	4313      	orrs	r3, r2
 800b768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b774:	2b00      	cmp	r3, #0
 800b776:	d015      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b778:	4b43      	ldr	r3, [pc, #268]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b77e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b786:	4940      	ldr	r1, [pc, #256]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b788:	4313      	orrs	r3, r2
 800b78a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b796:	d105      	bne.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b798:	4b3b      	ldr	r3, [pc, #236]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	4a3a      	ldr	r2, [pc, #232]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b79e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d015      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b7b0:	4b35      	ldr	r3, [pc, #212]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7be:	4932      	ldr	r1, [pc, #200]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7ce:	d105      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b7d0:	4b2d      	ldr	r3, [pc, #180]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d015      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7e8:	4b27      	ldr	r3, [pc, #156]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	4924      	ldr	r1, [pc, #144]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b806:	d105      	bne.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b808:	4b1f      	ldr	r3, [pc, #124]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4a1e      	ldr	r2, [pc, #120]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b80e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b812:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d015      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b820:	4b19      	ldr	r3, [pc, #100]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	4916      	ldr	r1, [pc, #88]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b830:	4313      	orrs	r3, r2
 800b832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b83e:	d105      	bne.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b840:	4b11      	ldr	r3, [pc, #68]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	4a10      	ldr	r2, [pc, #64]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b84a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d019      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b858:	4b0b      	ldr	r3, [pc, #44]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b85a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b85e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	4908      	ldr	r1, [pc, #32]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b868:	4313      	orrs	r3, r2
 800b86a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b876:	d109      	bne.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b878:	4b03      	ldr	r3, [pc, #12]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	4a02      	ldr	r2, [pc, #8]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800b87e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b882:	60d3      	str	r3, [r2, #12]
 800b884:	e002      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b886:	bf00      	nop
 800b888:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d015      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b898:	4b29      	ldr	r3, [pc, #164]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b89e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8a6:	4926      	ldr	r1, [pc, #152]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8b6:	d105      	bne.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b8b8:	4b21      	ldr	r3, [pc, #132]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	4a20      	ldr	r2, [pc, #128]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d015      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b8d0:	4b1b      	ldr	r3, [pc, #108]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8de:	4918      	ldr	r1, [pc, #96]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ee:	d105      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b8f0:	4b13      	ldr	r3, [pc, #76]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	4a12      	ldr	r2, [pc, #72]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b8f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b904:	2b00      	cmp	r3, #0
 800b906:	d015      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b908:	4b0d      	ldr	r3, [pc, #52]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b90a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b90e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	490a      	ldr	r1, [pc, #40]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b918:	4313      	orrs	r3, r2
 800b91a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b926:	d105      	bne.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	4a04      	ldr	r2, [pc, #16]	; (800b940 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800b92e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b932:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b934:	7cbb      	ldrb	r3, [r7, #18]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3718      	adds	r7, #24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	40021000 	.word	0x40021000

0800b944 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e049      	b.n	800b9ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b95c:	b2db      	uxtb	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f841 	bl	800b9f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	3304      	adds	r3, #4
 800b980:	4619      	mov	r1, r3
 800b982:	4610      	mov	r0, r2
 800b984:	f000 fcde 	bl	800c344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
	...

0800ba08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b085      	sub	sp, #20
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d001      	beq.n	800ba20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e054      	b.n	800baca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2202      	movs	r2, #2
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68da      	ldr	r2, [r3, #12]
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f042 0201 	orr.w	r2, r2, #1
 800ba36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a26      	ldr	r2, [pc, #152]	; (800bad8 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d022      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba4a:	d01d      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a22      	ldr	r2, [pc, #136]	; (800badc <HAL_TIM_Base_Start_IT+0xd4>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d018      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a21      	ldr	r2, [pc, #132]	; (800bae0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d013      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a1f      	ldr	r2, [pc, #124]	; (800bae4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d00e      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4a1e      	ldr	r2, [pc, #120]	; (800bae8 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d009      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a1c      	ldr	r2, [pc, #112]	; (800baec <HAL_TIM_Base_Start_IT+0xe4>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d004      	beq.n	800ba88 <HAL_TIM_Base_Start_IT+0x80>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4a1b      	ldr	r2, [pc, #108]	; (800baf0 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d115      	bne.n	800bab4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	689a      	ldr	r2, [r3, #8]
 800ba8e:	4b19      	ldr	r3, [pc, #100]	; (800baf4 <HAL_TIM_Base_Start_IT+0xec>)
 800ba90:	4013      	ands	r3, r2
 800ba92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b06      	cmp	r3, #6
 800ba98:	d015      	beq.n	800bac6 <HAL_TIM_Base_Start_IT+0xbe>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa0:	d011      	beq.n	800bac6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f042 0201 	orr.w	r2, r2, #1
 800bab0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bab2:	e008      	b.n	800bac6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0201 	orr.w	r2, r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e000      	b.n	800bac8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bac6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3714      	adds	r7, #20
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	40012c00 	.word	0x40012c00
 800badc:	40000400 	.word	0x40000400
 800bae0:	40000800 	.word	0x40000800
 800bae4:	40000c00 	.word	0x40000c00
 800bae8:	40013400 	.word	0x40013400
 800baec:	40014000 	.word	0x40014000
 800baf0:	40015000 	.word	0x40015000
 800baf4:	00010007 	.word	0x00010007

0800baf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e049      	b.n	800bb9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f7fb fe3e 	bl	80077a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2202      	movs	r2, #2
 800bb28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	3304      	adds	r3, #4
 800bb34:	4619      	mov	r1, r3
 800bb36:	4610      	mov	r0, r2
 800bb38:	f000 fc04 	bl	800c344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2201      	movs	r2, #1
 800bb50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d109      	bne.n	800bbcc <HAL_TIM_PWM_Start+0x24>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	bf14      	ite	ne
 800bbc4:	2301      	movne	r3, #1
 800bbc6:	2300      	moveq	r3, #0
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	e03c      	b.n	800bc46 <HAL_TIM_PWM_Start+0x9e>
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d109      	bne.n	800bbe6 <HAL_TIM_PWM_Start+0x3e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	2b01      	cmp	r3, #1
 800bbdc:	bf14      	ite	ne
 800bbde:	2301      	movne	r3, #1
 800bbe0:	2300      	moveq	r3, #0
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	e02f      	b.n	800bc46 <HAL_TIM_PWM_Start+0x9e>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	d109      	bne.n	800bc00 <HAL_TIM_PWM_Start+0x58>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	bf14      	ite	ne
 800bbf8:	2301      	movne	r3, #1
 800bbfa:	2300      	moveq	r3, #0
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	e022      	b.n	800bc46 <HAL_TIM_PWM_Start+0x9e>
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b0c      	cmp	r3, #12
 800bc04:	d109      	bne.n	800bc1a <HAL_TIM_PWM_Start+0x72>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	bf14      	ite	ne
 800bc12:	2301      	movne	r3, #1
 800bc14:	2300      	moveq	r3, #0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	e015      	b.n	800bc46 <HAL_TIM_PWM_Start+0x9e>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b10      	cmp	r3, #16
 800bc1e:	d109      	bne.n	800bc34 <HAL_TIM_PWM_Start+0x8c>
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	bf14      	ite	ne
 800bc2c:	2301      	movne	r3, #1
 800bc2e:	2300      	moveq	r3, #0
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	e008      	b.n	800bc46 <HAL_TIM_PWM_Start+0x9e>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b01      	cmp	r3, #1
 800bc3e:	bf14      	ite	ne
 800bc40:	2301      	movne	r3, #1
 800bc42:	2300      	moveq	r3, #0
 800bc44:	b2db      	uxtb	r3, r3
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d001      	beq.n	800bc4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e0a6      	b.n	800bd9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <HAL_TIM_PWM_Start+0xb6>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc5c:	e023      	b.n	800bca6 <HAL_TIM_PWM_Start+0xfe>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b04      	cmp	r3, #4
 800bc62:	d104      	bne.n	800bc6e <HAL_TIM_PWM_Start+0xc6>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc6c:	e01b      	b.n	800bca6 <HAL_TIM_PWM_Start+0xfe>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	2b08      	cmp	r3, #8
 800bc72:	d104      	bne.n	800bc7e <HAL_TIM_PWM_Start+0xd6>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2202      	movs	r2, #2
 800bc78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc7c:	e013      	b.n	800bca6 <HAL_TIM_PWM_Start+0xfe>
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b0c      	cmp	r3, #12
 800bc82:	d104      	bne.n	800bc8e <HAL_TIM_PWM_Start+0xe6>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2202      	movs	r2, #2
 800bc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc8c:	e00b      	b.n	800bca6 <HAL_TIM_PWM_Start+0xfe>
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	2b10      	cmp	r3, #16
 800bc92:	d104      	bne.n	800bc9e <HAL_TIM_PWM_Start+0xf6>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2202      	movs	r2, #2
 800bc98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc9c:	e003      	b.n	800bca6 <HAL_TIM_PWM_Start+0xfe>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2202      	movs	r2, #2
 800bca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f000 ff1a 	bl	800cae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a3a      	ldr	r2, [pc, #232]	; (800bda4 <HAL_TIM_PWM_Start+0x1fc>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d018      	beq.n	800bcf0 <HAL_TIM_PWM_Start+0x148>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a39      	ldr	r2, [pc, #228]	; (800bda8 <HAL_TIM_PWM_Start+0x200>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d013      	beq.n	800bcf0 <HAL_TIM_PWM_Start+0x148>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a37      	ldr	r2, [pc, #220]	; (800bdac <HAL_TIM_PWM_Start+0x204>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d00e      	beq.n	800bcf0 <HAL_TIM_PWM_Start+0x148>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a36      	ldr	r2, [pc, #216]	; (800bdb0 <HAL_TIM_PWM_Start+0x208>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d009      	beq.n	800bcf0 <HAL_TIM_PWM_Start+0x148>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a34      	ldr	r2, [pc, #208]	; (800bdb4 <HAL_TIM_PWM_Start+0x20c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d004      	beq.n	800bcf0 <HAL_TIM_PWM_Start+0x148>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a33      	ldr	r2, [pc, #204]	; (800bdb8 <HAL_TIM_PWM_Start+0x210>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d101      	bne.n	800bcf4 <HAL_TIM_PWM_Start+0x14c>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e000      	b.n	800bcf6 <HAL_TIM_PWM_Start+0x14e>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d007      	beq.n	800bd0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a25      	ldr	r2, [pc, #148]	; (800bda4 <HAL_TIM_PWM_Start+0x1fc>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d022      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1c:	d01d      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a26      	ldr	r2, [pc, #152]	; (800bdbc <HAL_TIM_PWM_Start+0x214>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d018      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a24      	ldr	r2, [pc, #144]	; (800bdc0 <HAL_TIM_PWM_Start+0x218>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d013      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a23      	ldr	r2, [pc, #140]	; (800bdc4 <HAL_TIM_PWM_Start+0x21c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d00e      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a19      	ldr	r2, [pc, #100]	; (800bda8 <HAL_TIM_PWM_Start+0x200>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d009      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a18      	ldr	r2, [pc, #96]	; (800bdac <HAL_TIM_PWM_Start+0x204>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d004      	beq.n	800bd5a <HAL_TIM_PWM_Start+0x1b2>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a18      	ldr	r2, [pc, #96]	; (800bdb8 <HAL_TIM_PWM_Start+0x210>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d115      	bne.n	800bd86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <HAL_TIM_PWM_Start+0x220>)
 800bd62:	4013      	ands	r3, r2
 800bd64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b06      	cmp	r3, #6
 800bd6a:	d015      	beq.n	800bd98 <HAL_TIM_PWM_Start+0x1f0>
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd72:	d011      	beq.n	800bd98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f042 0201 	orr.w	r2, r2, #1
 800bd82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd84:	e008      	b.n	800bd98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681a      	ldr	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f042 0201 	orr.w	r2, r2, #1
 800bd94:	601a      	str	r2, [r3, #0]
 800bd96:	e000      	b.n	800bd9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	40012c00 	.word	0x40012c00
 800bda8:	40013400 	.word	0x40013400
 800bdac:	40014000 	.word	0x40014000
 800bdb0:	40014400 	.word	0x40014400
 800bdb4:	40014800 	.word	0x40014800
 800bdb8:	40015000 	.word	0x40015000
 800bdbc:	40000400 	.word	0x40000400
 800bdc0:	40000800 	.word	0x40000800
 800bdc4:	40000c00 	.word	0x40000c00
 800bdc8:	00010007 	.word	0x00010007

0800bdcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d122      	bne.n	800be28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f003 0302 	and.w	r3, r3, #2
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d11b      	bne.n	800be28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f06f 0202 	mvn.w	r2, #2
 800bdf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	f003 0303 	and.w	r3, r3, #3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 fa7a 	bl	800c308 <HAL_TIM_IC_CaptureCallback>
 800be14:	e005      	b.n	800be22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 fa6c 	bl	800c2f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fa7d 	bl	800c31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b04      	cmp	r3, #4
 800be34:	d122      	bne.n	800be7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b04      	cmp	r3, #4
 800be42:	d11b      	bne.n	800be7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f06f 0204 	mvn.w	r2, #4
 800be4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2202      	movs	r2, #2
 800be52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa50 	bl	800c308 <HAL_TIM_IC_CaptureCallback>
 800be68:	e005      	b.n	800be76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa42 	bl	800c2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 fa53 	bl	800c31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0308 	and.w	r3, r3, #8
 800be86:	2b08      	cmp	r3, #8
 800be88:	d122      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f003 0308 	and.w	r3, r3, #8
 800be94:	2b08      	cmp	r3, #8
 800be96:	d11b      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f06f 0208 	mvn.w	r2, #8
 800bea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2204      	movs	r2, #4
 800bea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fa26 	bl	800c308 <HAL_TIM_IC_CaptureCallback>
 800bebc:	e005      	b.n	800beca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fa18 	bl	800c2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fa29 	bl	800c31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f003 0310 	and.w	r3, r3, #16
 800beda:	2b10      	cmp	r3, #16
 800bedc:	d122      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b10      	cmp	r3, #16
 800beea:	d11b      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0210 	mvn.w	r2, #16
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2208      	movs	r2, #8
 800befa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f9fc 	bl	800c308 <HAL_TIM_IC_CaptureCallback>
 800bf10:	e005      	b.n	800bf1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f9ee 	bl	800c2f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f9ff 	bl	800c31c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d10e      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d107      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0201 	mvn.w	r2, #1
 800bf48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7fa fed4 	bl	8006cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d10e      	bne.n	800bf7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d107      	bne.n	800bf7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fe7c 	bl	800cc74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8a:	d10e      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf96:	2b80      	cmp	r3, #128	; 0x80
 800bf98:	d107      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fe6f 	bl	800cc88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d10e      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b40      	cmp	r3, #64	; 0x40
 800bfc4:	d107      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f9ad 	bl	800c330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d10e      	bne.n	800c002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d107      	bne.n	800c002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f06f 0220 	mvn.w	r2, #32
 800bffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fe2f 	bl	800cc60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	691b      	ldr	r3, [r3, #16]
 800c008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c00c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c010:	d10f      	bne.n	800c032 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c01c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c020:	d107      	bne.n	800c032 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c02a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fe35 	bl	800cc9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c03c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c040:	d10f      	bne.n	800c062 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68db      	ldr	r3, [r3, #12]
 800c048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c04c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c050:	d107      	bne.n	800c062 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c05a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fe27 	bl	800ccb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c06c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c070:	d10f      	bne.n	800c092 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c07c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c080:	d107      	bne.n	800c092 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c08a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 fe19 	bl	800ccc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c09c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0a0:	d10f      	bne.n	800c0c2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68db      	ldr	r3, [r3, #12]
 800c0a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0b0:	d107      	bne.n	800c0c2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c0ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fe0b 	bl	800ccd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d101      	bne.n	800c0ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0e6:	2302      	movs	r3, #2
 800c0e8:	e0ff      	b.n	800c2ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2b14      	cmp	r3, #20
 800c0f6:	f200 80f0 	bhi.w	800c2da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0fa:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c2db 	.word	0x0800c2db
 800c108:	0800c2db 	.word	0x0800c2db
 800c10c:	0800c2db 	.word	0x0800c2db
 800c110:	0800c195 	.word	0x0800c195
 800c114:	0800c2db 	.word	0x0800c2db
 800c118:	0800c2db 	.word	0x0800c2db
 800c11c:	0800c2db 	.word	0x0800c2db
 800c120:	0800c1d7 	.word	0x0800c1d7
 800c124:	0800c2db 	.word	0x0800c2db
 800c128:	0800c2db 	.word	0x0800c2db
 800c12c:	0800c2db 	.word	0x0800c2db
 800c130:	0800c217 	.word	0x0800c217
 800c134:	0800c2db 	.word	0x0800c2db
 800c138:	0800c2db 	.word	0x0800c2db
 800c13c:	0800c2db 	.word	0x0800c2db
 800c140:	0800c259 	.word	0x0800c259
 800c144:	0800c2db 	.word	0x0800c2db
 800c148:	0800c2db 	.word	0x0800c2db
 800c14c:	0800c2db 	.word	0x0800c2db
 800c150:	0800c299 	.word	0x0800c299
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68b9      	ldr	r1, [r7, #8]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 f99a 	bl	800c494 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	699a      	ldr	r2, [r3, #24]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f042 0208 	orr.w	r2, r2, #8
 800c16e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	699a      	ldr	r2, [r3, #24]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f022 0204 	bic.w	r2, r2, #4
 800c17e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	6999      	ldr	r1, [r3, #24]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691a      	ldr	r2, [r3, #16]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	430a      	orrs	r2, r1
 800c190:	619a      	str	r2, [r3, #24]
      break;
 800c192:	e0a5      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	68b9      	ldr	r1, [r7, #8]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fa14 	bl	800c5c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	699a      	ldr	r2, [r3, #24]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6999      	ldr	r1, [r3, #24]
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	021a      	lsls	r2, r3, #8
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	619a      	str	r2, [r3, #24]
      break;
 800c1d4:	e084      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	68b9      	ldr	r1, [r7, #8]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f000 fa87 	bl	800c6f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69da      	ldr	r2, [r3, #28]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f042 0208 	orr.w	r2, r2, #8
 800c1f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69da      	ldr	r2, [r3, #28]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f022 0204 	bic.w	r2, r2, #4
 800c200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	69d9      	ldr	r1, [r3, #28]
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	430a      	orrs	r2, r1
 800c212:	61da      	str	r2, [r3, #28]
      break;
 800c214:	e064      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f000 faf9 	bl	800c814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	69da      	ldr	r2, [r3, #28]
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	69da      	ldr	r2, [r3, #28]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69d9      	ldr	r1, [r3, #28]
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	021a      	lsls	r2, r3, #8
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	430a      	orrs	r2, r1
 800c254:	61da      	str	r2, [r3, #28]
      break;
 800c256:	e043      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68b9      	ldr	r1, [r7, #8]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fb6c 	bl	800c93c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f042 0208 	orr.w	r2, r2, #8
 800c272:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f022 0204 	bic.w	r2, r2, #4
 800c282:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	691a      	ldr	r2, [r3, #16]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	430a      	orrs	r2, r1
 800c294:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c296:	e023      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f000 fbb6 	bl	800ca10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c2c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	021a      	lsls	r2, r3, #8
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c2d8:	e002      	b.n	800c2e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	75fb      	strb	r3, [r7, #23]
      break;
 800c2de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop

0800c2f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c310:	bf00      	nop
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c330:	b480      	push	{r7}
 800c332:	b083      	sub	sp, #12
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c338:	bf00      	nop
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a46      	ldr	r2, [pc, #280]	; (800c470 <TIM_Base_SetConfig+0x12c>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d017      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c362:	d013      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a43      	ldr	r2, [pc, #268]	; (800c474 <TIM_Base_SetConfig+0x130>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d00f      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a42      	ldr	r2, [pc, #264]	; (800c478 <TIM_Base_SetConfig+0x134>)
 800c370:	4293      	cmp	r3, r2
 800c372:	d00b      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	4a41      	ldr	r2, [pc, #260]	; (800c47c <TIM_Base_SetConfig+0x138>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d007      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	4a40      	ldr	r2, [pc, #256]	; (800c480 <TIM_Base_SetConfig+0x13c>)
 800c380:	4293      	cmp	r3, r2
 800c382:	d003      	beq.n	800c38c <TIM_Base_SetConfig+0x48>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a3f      	ldr	r2, [pc, #252]	; (800c484 <TIM_Base_SetConfig+0x140>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d108      	bne.n	800c39e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a33      	ldr	r2, [pc, #204]	; (800c470 <TIM_Base_SetConfig+0x12c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d023      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c3ac:	d01f      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a30      	ldr	r2, [pc, #192]	; (800c474 <TIM_Base_SetConfig+0x130>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d01b      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a2f      	ldr	r2, [pc, #188]	; (800c478 <TIM_Base_SetConfig+0x134>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d017      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a2e      	ldr	r2, [pc, #184]	; (800c47c <TIM_Base_SetConfig+0x138>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d013      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a2d      	ldr	r2, [pc, #180]	; (800c480 <TIM_Base_SetConfig+0x13c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d00f      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4a2d      	ldr	r2, [pc, #180]	; (800c488 <TIM_Base_SetConfig+0x144>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d00b      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4a2c      	ldr	r2, [pc, #176]	; (800c48c <TIM_Base_SetConfig+0x148>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d007      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4a2b      	ldr	r2, [pc, #172]	; (800c490 <TIM_Base_SetConfig+0x14c>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d003      	beq.n	800c3ee <TIM_Base_SetConfig+0xaa>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4a26      	ldr	r2, [pc, #152]	; (800c484 <TIM_Base_SetConfig+0x140>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d108      	bne.n	800c400 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	695b      	ldr	r3, [r3, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a12      	ldr	r2, [pc, #72]	; (800c470 <TIM_Base_SetConfig+0x12c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d013      	beq.n	800c454 <TIM_Base_SetConfig+0x110>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a14      	ldr	r2, [pc, #80]	; (800c480 <TIM_Base_SetConfig+0x13c>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00f      	beq.n	800c454 <TIM_Base_SetConfig+0x110>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a14      	ldr	r2, [pc, #80]	; (800c488 <TIM_Base_SetConfig+0x144>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00b      	beq.n	800c454 <TIM_Base_SetConfig+0x110>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a13      	ldr	r2, [pc, #76]	; (800c48c <TIM_Base_SetConfig+0x148>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d007      	beq.n	800c454 <TIM_Base_SetConfig+0x110>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a12      	ldr	r2, [pc, #72]	; (800c490 <TIM_Base_SetConfig+0x14c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d003      	beq.n	800c454 <TIM_Base_SetConfig+0x110>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a0d      	ldr	r2, [pc, #52]	; (800c484 <TIM_Base_SetConfig+0x140>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d103      	bne.n	800c45c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	691a      	ldr	r2, [r3, #16]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	615a      	str	r2, [r3, #20]
}
 800c462:	bf00      	nop
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	40012c00 	.word	0x40012c00
 800c474:	40000400 	.word	0x40000400
 800c478:	40000800 	.word	0x40000800
 800c47c:	40000c00 	.word	0x40000c00
 800c480:	40013400 	.word	0x40013400
 800c484:	40015000 	.word	0x40015000
 800c488:	40014000 	.word	0x40014000
 800c48c:	40014400 	.word	0x40014400
 800c490:	40014800 	.word	0x40014800

0800c494 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	f023 0201 	bic.w	r2, r3, #1
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6a1b      	ldr	r3, [r3, #32]
 800c4ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	699b      	ldr	r3, [r3, #24]
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 0303 	bic.w	r3, r3, #3
 800c4ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f023 0302 	bic.w	r3, r3, #2
 800c4e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	4a30      	ldr	r2, [pc, #192]	; (800c5b0 <TIM_OC1_SetConfig+0x11c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d013      	beq.n	800c51c <TIM_OC1_SetConfig+0x88>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a2f      	ldr	r2, [pc, #188]	; (800c5b4 <TIM_OC1_SetConfig+0x120>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d00f      	beq.n	800c51c <TIM_OC1_SetConfig+0x88>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a2e      	ldr	r2, [pc, #184]	; (800c5b8 <TIM_OC1_SetConfig+0x124>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d00b      	beq.n	800c51c <TIM_OC1_SetConfig+0x88>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a2d      	ldr	r2, [pc, #180]	; (800c5bc <TIM_OC1_SetConfig+0x128>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d007      	beq.n	800c51c <TIM_OC1_SetConfig+0x88>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a2c      	ldr	r2, [pc, #176]	; (800c5c0 <TIM_OC1_SetConfig+0x12c>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d003      	beq.n	800c51c <TIM_OC1_SetConfig+0x88>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a2b      	ldr	r2, [pc, #172]	; (800c5c4 <TIM_OC1_SetConfig+0x130>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d10c      	bne.n	800c536 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c51c:	697b      	ldr	r3, [r7, #20]
 800c51e:	f023 0308 	bic.w	r3, r3, #8
 800c522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	f023 0304 	bic.w	r3, r3, #4
 800c534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a1d      	ldr	r2, [pc, #116]	; (800c5b0 <TIM_OC1_SetConfig+0x11c>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d013      	beq.n	800c566 <TIM_OC1_SetConfig+0xd2>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a1c      	ldr	r2, [pc, #112]	; (800c5b4 <TIM_OC1_SetConfig+0x120>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d00f      	beq.n	800c566 <TIM_OC1_SetConfig+0xd2>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a1b      	ldr	r2, [pc, #108]	; (800c5b8 <TIM_OC1_SetConfig+0x124>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00b      	beq.n	800c566 <TIM_OC1_SetConfig+0xd2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a1a      	ldr	r2, [pc, #104]	; (800c5bc <TIM_OC1_SetConfig+0x128>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d007      	beq.n	800c566 <TIM_OC1_SetConfig+0xd2>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a19      	ldr	r2, [pc, #100]	; (800c5c0 <TIM_OC1_SetConfig+0x12c>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d003      	beq.n	800c566 <TIM_OC1_SetConfig+0xd2>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a18      	ldr	r2, [pc, #96]	; (800c5c4 <TIM_OC1_SetConfig+0x130>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d111      	bne.n	800c58a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c56c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	4313      	orrs	r3, r2
 800c588:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	697a      	ldr	r2, [r7, #20]
 800c5a2:	621a      	str	r2, [r3, #32]
}
 800c5a4:	bf00      	nop
 800c5a6:	371c      	adds	r7, #28
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	40012c00 	.word	0x40012c00
 800c5b4:	40013400 	.word	0x40013400
 800c5b8:	40014000 	.word	0x40014000
 800c5bc:	40014400 	.word	0x40014400
 800c5c0:	40014800 	.word	0x40014800
 800c5c4:	40015000 	.word	0x40015000

0800c5c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b087      	sub	sp, #28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6a1b      	ldr	r3, [r3, #32]
 800c5d6:	f023 0210 	bic.w	r2, r3, #16
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c5f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	021b      	lsls	r3, r3, #8
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	f023 0320 	bic.w	r3, r3, #32
 800c616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	011b      	lsls	r3, r3, #4
 800c61e:	697a      	ldr	r2, [r7, #20]
 800c620:	4313      	orrs	r3, r2
 800c622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a2c      	ldr	r2, [pc, #176]	; (800c6d8 <TIM_OC2_SetConfig+0x110>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d007      	beq.n	800c63c <TIM_OC2_SetConfig+0x74>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a2b      	ldr	r2, [pc, #172]	; (800c6dc <TIM_OC2_SetConfig+0x114>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d003      	beq.n	800c63c <TIM_OC2_SetConfig+0x74>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a2a      	ldr	r2, [pc, #168]	; (800c6e0 <TIM_OC2_SetConfig+0x118>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d10d      	bne.n	800c658 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	011b      	lsls	r3, r3, #4
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a1f      	ldr	r2, [pc, #124]	; (800c6d8 <TIM_OC2_SetConfig+0x110>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d013      	beq.n	800c688 <TIM_OC2_SetConfig+0xc0>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a1e      	ldr	r2, [pc, #120]	; (800c6dc <TIM_OC2_SetConfig+0x114>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d00f      	beq.n	800c688 <TIM_OC2_SetConfig+0xc0>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a1e      	ldr	r2, [pc, #120]	; (800c6e4 <TIM_OC2_SetConfig+0x11c>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d00b      	beq.n	800c688 <TIM_OC2_SetConfig+0xc0>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a1d      	ldr	r2, [pc, #116]	; (800c6e8 <TIM_OC2_SetConfig+0x120>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d007      	beq.n	800c688 <TIM_OC2_SetConfig+0xc0>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a1c      	ldr	r2, [pc, #112]	; (800c6ec <TIM_OC2_SetConfig+0x124>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d003      	beq.n	800c688 <TIM_OC2_SetConfig+0xc0>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a17      	ldr	r2, [pc, #92]	; (800c6e0 <TIM_OC2_SetConfig+0x118>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d113      	bne.n	800c6b0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c68e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	695b      	ldr	r3, [r3, #20]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	693a      	ldr	r2, [r7, #16]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	699b      	ldr	r3, [r3, #24]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	693a      	ldr	r2, [r7, #16]
 800c6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	621a      	str	r2, [r3, #32]
}
 800c6ca:	bf00      	nop
 800c6cc:	371c      	adds	r7, #28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	40012c00 	.word	0x40012c00
 800c6dc:	40013400 	.word	0x40013400
 800c6e0:	40015000 	.word	0x40015000
 800c6e4:	40014000 	.word	0x40014000
 800c6e8:	40014400 	.word	0x40014400
 800c6ec:	40014800 	.word	0x40014800

0800c6f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b087      	sub	sp, #28
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a1b      	ldr	r3, [r3, #32]
 800c6fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6a1b      	ldr	r3, [r3, #32]
 800c70a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c71e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	4313      	orrs	r3, r2
 800c734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c73c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	689b      	ldr	r3, [r3, #8]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	4313      	orrs	r3, r2
 800c748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	4a2b      	ldr	r2, [pc, #172]	; (800c7fc <TIM_OC3_SetConfig+0x10c>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d007      	beq.n	800c762 <TIM_OC3_SetConfig+0x72>
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a2a      	ldr	r2, [pc, #168]	; (800c800 <TIM_OC3_SetConfig+0x110>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d003      	beq.n	800c762 <TIM_OC3_SetConfig+0x72>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a29      	ldr	r2, [pc, #164]	; (800c804 <TIM_OC3_SetConfig+0x114>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d10d      	bne.n	800c77e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	021b      	lsls	r3, r3, #8
 800c770:	697a      	ldr	r2, [r7, #20]
 800c772:	4313      	orrs	r3, r2
 800c774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c77c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4a1e      	ldr	r2, [pc, #120]	; (800c7fc <TIM_OC3_SetConfig+0x10c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d013      	beq.n	800c7ae <TIM_OC3_SetConfig+0xbe>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a1d      	ldr	r2, [pc, #116]	; (800c800 <TIM_OC3_SetConfig+0x110>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d00f      	beq.n	800c7ae <TIM_OC3_SetConfig+0xbe>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a1d      	ldr	r2, [pc, #116]	; (800c808 <TIM_OC3_SetConfig+0x118>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d00b      	beq.n	800c7ae <TIM_OC3_SetConfig+0xbe>
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4a1c      	ldr	r2, [pc, #112]	; (800c80c <TIM_OC3_SetConfig+0x11c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d007      	beq.n	800c7ae <TIM_OC3_SetConfig+0xbe>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4a1b      	ldr	r2, [pc, #108]	; (800c810 <TIM_OC3_SetConfig+0x120>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d003      	beq.n	800c7ae <TIM_OC3_SetConfig+0xbe>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	4a16      	ldr	r2, [pc, #88]	; (800c804 <TIM_OC3_SetConfig+0x114>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d113      	bne.n	800c7d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c7bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	695b      	ldr	r3, [r3, #20]
 800c7c2:	011b      	lsls	r3, r3, #4
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	699b      	ldr	r3, [r3, #24]
 800c7ce:	011b      	lsls	r3, r3, #4
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	685a      	ldr	r2, [r3, #4]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	621a      	str	r2, [r3, #32]
}
 800c7f0:	bf00      	nop
 800c7f2:	371c      	adds	r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	40012c00 	.word	0x40012c00
 800c800:	40013400 	.word	0x40013400
 800c804:	40015000 	.word	0x40015000
 800c808:	40014000 	.word	0x40014000
 800c80c:	40014400 	.word	0x40014400
 800c810:	40014800 	.word	0x40014800

0800c814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6a1b      	ldr	r3, [r3, #32]
 800c822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	69db      	ldr	r3, [r3, #28]
 800c83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	031b      	lsls	r3, r3, #12
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a2c      	ldr	r2, [pc, #176]	; (800c924 <TIM_OC4_SetConfig+0x110>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d007      	beq.n	800c888 <TIM_OC4_SetConfig+0x74>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a2b      	ldr	r2, [pc, #172]	; (800c928 <TIM_OC4_SetConfig+0x114>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d003      	beq.n	800c888 <TIM_OC4_SetConfig+0x74>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a2a      	ldr	r2, [pc, #168]	; (800c92c <TIM_OC4_SetConfig+0x118>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d10d      	bne.n	800c8a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c88e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	031b      	lsls	r3, r3, #12
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	4313      	orrs	r3, r2
 800c89a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4a1f      	ldr	r2, [pc, #124]	; (800c924 <TIM_OC4_SetConfig+0x110>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d013      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xc0>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	4a1e      	ldr	r2, [pc, #120]	; (800c928 <TIM_OC4_SetConfig+0x114>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d00f      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xc0>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	4a1e      	ldr	r2, [pc, #120]	; (800c930 <TIM_OC4_SetConfig+0x11c>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d00b      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xc0>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	4a1d      	ldr	r2, [pc, #116]	; (800c934 <TIM_OC4_SetConfig+0x120>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d007      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xc0>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a1c      	ldr	r2, [pc, #112]	; (800c938 <TIM_OC4_SetConfig+0x124>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d003      	beq.n	800c8d4 <TIM_OC4_SetConfig+0xc0>
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4a17      	ldr	r2, [pc, #92]	; (800c92c <TIM_OC4_SetConfig+0x118>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d113      	bne.n	800c8fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c8da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	019b      	lsls	r3, r3, #6
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	019b      	lsls	r3, r3, #6
 800c8f6:	693a      	ldr	r2, [r7, #16]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	693a      	ldr	r2, [r7, #16]
 800c900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	685a      	ldr	r2, [r3, #4]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	621a      	str	r2, [r3, #32]
}
 800c916:	bf00      	nop
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	40012c00 	.word	0x40012c00
 800c928:	40013400 	.word	0x40013400
 800c92c:	40015000 	.word	0x40015000
 800c930:	40014000 	.word	0x40014000
 800c934:	40014400 	.word	0x40014400
 800c938:	40014800 	.word	0x40014800

0800c93c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a1b      	ldr	r3, [r3, #32]
 800c956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c96e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4313      	orrs	r3, r2
 800c978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	041b      	lsls	r3, r3, #16
 800c988:	693a      	ldr	r2, [r7, #16]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4a19      	ldr	r2, [pc, #100]	; (800c9f8 <TIM_OC5_SetConfig+0xbc>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d013      	beq.n	800c9be <TIM_OC5_SetConfig+0x82>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4a18      	ldr	r2, [pc, #96]	; (800c9fc <TIM_OC5_SetConfig+0xc0>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d00f      	beq.n	800c9be <TIM_OC5_SetConfig+0x82>
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4a17      	ldr	r2, [pc, #92]	; (800ca00 <TIM_OC5_SetConfig+0xc4>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d00b      	beq.n	800c9be <TIM_OC5_SetConfig+0x82>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <TIM_OC5_SetConfig+0xc8>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d007      	beq.n	800c9be <TIM_OC5_SetConfig+0x82>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4a15      	ldr	r2, [pc, #84]	; (800ca08 <TIM_OC5_SetConfig+0xcc>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d003      	beq.n	800c9be <TIM_OC5_SetConfig+0x82>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a14      	ldr	r2, [pc, #80]	; (800ca0c <TIM_OC5_SetConfig+0xd0>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d109      	bne.n	800c9d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c9c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	695b      	ldr	r3, [r3, #20]
 800c9ca:	021b      	lsls	r3, r3, #8
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	621a      	str	r2, [r3, #32]
}
 800c9ec:	bf00      	nop
 800c9ee:	371c      	adds	r7, #28
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	40012c00 	.word	0x40012c00
 800c9fc:	40013400 	.word	0x40013400
 800ca00:	40014000 	.word	0x40014000
 800ca04:	40014400 	.word	0x40014400
 800ca08:	40014800 	.word	0x40014800
 800ca0c:	40015000 	.word	0x40015000

0800ca10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b087      	sub	sp, #28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6a1b      	ldr	r3, [r3, #32]
 800ca2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	021b      	lsls	r3, r3, #8
 800ca4a:	68fa      	ldr	r2, [r7, #12]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	051b      	lsls	r3, r3, #20
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	4313      	orrs	r3, r2
 800ca62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a1a      	ldr	r2, [pc, #104]	; (800cad0 <TIM_OC6_SetConfig+0xc0>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d013      	beq.n	800ca94 <TIM_OC6_SetConfig+0x84>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a19      	ldr	r2, [pc, #100]	; (800cad4 <TIM_OC6_SetConfig+0xc4>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00f      	beq.n	800ca94 <TIM_OC6_SetConfig+0x84>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <TIM_OC6_SetConfig+0xc8>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d00b      	beq.n	800ca94 <TIM_OC6_SetConfig+0x84>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a17      	ldr	r2, [pc, #92]	; (800cadc <TIM_OC6_SetConfig+0xcc>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d007      	beq.n	800ca94 <TIM_OC6_SetConfig+0x84>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a16      	ldr	r2, [pc, #88]	; (800cae0 <TIM_OC6_SetConfig+0xd0>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d003      	beq.n	800ca94 <TIM_OC6_SetConfig+0x84>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <TIM_OC6_SetConfig+0xd4>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d109      	bne.n	800caa8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	029b      	lsls	r3, r3, #10
 800caa2:	697a      	ldr	r2, [r7, #20]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	693a      	ldr	r2, [r7, #16]
 800cac0:	621a      	str	r2, [r3, #32]
}
 800cac2:	bf00      	nop
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	40012c00 	.word	0x40012c00
 800cad4:	40013400 	.word	0x40013400
 800cad8:	40014000 	.word	0x40014000
 800cadc:	40014400 	.word	0x40014400
 800cae0:	40014800 	.word	0x40014800
 800cae4:	40015000 	.word	0x40015000

0800cae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cae8:	b480      	push	{r7}
 800caea:	b087      	sub	sp, #28
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f003 031f 	and.w	r3, r3, #31
 800cafa:	2201      	movs	r2, #1
 800cafc:	fa02 f303 	lsl.w	r3, r2, r3
 800cb00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	6a1a      	ldr	r2, [r3, #32]
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	43db      	mvns	r3, r3
 800cb0a:	401a      	ands	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	6a1a      	ldr	r2, [r3, #32]
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f003 031f 	and.w	r3, r3, #31
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb20:	431a      	orrs	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	621a      	str	r2, [r3, #32]
}
 800cb26:	bf00      	nop
 800cb28:	371c      	adds	r7, #28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d101      	bne.n	800cb4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e074      	b.n	800cc36 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2202      	movs	r2, #2
 800cb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a34      	ldr	r2, [pc, #208]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d009      	beq.n	800cb8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4a33      	ldr	r2, [pc, #204]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d004      	beq.n	800cb8a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	4a31      	ldr	r2, [pc, #196]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d108      	bne.n	800cb9c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	68fa      	ldr	r2, [r7, #12]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68fa      	ldr	r2, [r7, #12]
 800cbb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a21      	ldr	r2, [pc, #132]	; (800cc44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d022      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbcc:	d01d      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	4a1f      	ldr	r2, [pc, #124]	; (800cc50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d018      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	4a1d      	ldr	r2, [pc, #116]	; (800cc54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d013      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a1c      	ldr	r2, [pc, #112]	; (800cc58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	d00e      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a15      	ldr	r2, [pc, #84]	; (800cc48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d009      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a18      	ldr	r2, [pc, #96]	; (800cc5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d004      	beq.n	800cc0a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a11      	ldr	r2, [pc, #68]	; (800cc4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d10c      	bne.n	800cc24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	40012c00 	.word	0x40012c00
 800cc48:	40013400 	.word	0x40013400
 800cc4c:	40015000 	.word	0x40015000
 800cc50:	40000400 	.word	0x40000400
 800cc54:	40000800 	.word	0x40000800
 800cc58:	40000c00 	.word	0x40000c00
 800cc5c:	40014000 	.word	0x40014000

0800cc60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc68:	bf00      	nop
 800cc6a:	370c      	adds	r7, #12
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc7c:	bf00      	nop
 800cc7e:	370c      	adds	r7, #12
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc90:	bf00      	nop
 800cc92:	370c      	adds	r7, #12
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr

0800cc9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cca4:	bf00      	nop
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cccc:	bf00      	nop
 800ccce:	370c      	adds	r7, #12
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cce0:	bf00      	nop
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e042      	b.n	800cd84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d106      	bne.n	800cd16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f7fa fe81 	bl	8007a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2224      	movs	r2, #36	; 0x24
 800cd1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f022 0201 	bic.w	r2, r2, #1
 800cd2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fbc4 	bl	800d4bc <UART_SetConfig>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d101      	bne.n	800cd3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e022      	b.n	800cd84 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d002      	beq.n	800cd4c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 feb4 	bl	800dab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	689a      	ldr	r2, [r3, #8]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0201 	orr.w	r2, r2, #1
 800cd7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 ff3b 	bl	800dbf8 <UART_CheckIdleState>
 800cd82:	4603      	mov	r3, r0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08a      	sub	sp, #40	; 0x28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	4613      	mov	r3, r2
 800cd98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cda0:	2b20      	cmp	r3, #32
 800cda2:	d142      	bne.n	800ce2a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d002      	beq.n	800cdb0 <HAL_UART_Receive_IT+0x24>
 800cdaa:	88fb      	ldrh	r3, [r7, #6]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e03b      	b.n	800ce2c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <HAL_UART_Receive_IT+0x36>
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	e034      	b.n	800ce2c <HAL_UART_Receive_IT+0xa0>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a17      	ldr	r2, [pc, #92]	; (800ce34 <HAL_UART_Receive_IT+0xa8>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d01f      	beq.n	800ce1a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	685b      	ldr	r3, [r3, #4]
 800cde0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d018      	beq.n	800ce1a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	e853 3f00 	ldrex	r3, [r3]
 800cdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cdfc:	627b      	str	r3, [r7, #36]	; 0x24
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	461a      	mov	r2, r3
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	623b      	str	r3, [r7, #32]
 800ce08:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce0a:	69f9      	ldr	r1, [r7, #28]
 800ce0c:	6a3a      	ldr	r2, [r7, #32]
 800ce0e:	e841 2300 	strex	r3, r2, [r1]
 800ce12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1e6      	bne.n	800cde8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ce1a:	88fb      	ldrh	r3, [r7, #6]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 fffd 	bl	800de20 <UART_Start_Receive_IT>
 800ce26:	4603      	mov	r3, r0
 800ce28:	e000      	b.n	800ce2c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce2a:	2302      	movs	r3, #2
  }
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3728      	adds	r7, #40	; 0x28
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	40008000 	.word	0x40008000

0800ce38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b0ba      	sub	sp, #232	; 0xe8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	689b      	ldr	r3, [r3, #8]
 800ce5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce62:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce66:	4013      	ands	r3, r2
 800ce68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d11b      	bne.n	800ceac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0320 	and.w	r3, r3, #32
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d015      	beq.n	800ceac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d009      	beq.n	800ceac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 82d6 	beq.w	800d44e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	4798      	blx	r3
      }
      return;
 800ceaa:	e2d0      	b.n	800d44e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ceac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 811f 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ceb6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceba:	4b8b      	ldr	r3, [pc, #556]	; (800d0e8 <HAL_UART_IRQHandler+0x2b0>)
 800cebc:	4013      	ands	r3, r2
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d106      	bne.n	800ced0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cec2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cec6:	4b89      	ldr	r3, [pc, #548]	; (800d0ec <HAL_UART_IRQHandler+0x2b4>)
 800cec8:	4013      	ands	r3, r2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8112 	beq.w	800d0f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	f003 0301 	and.w	r3, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d011      	beq.n	800cf00 <HAL_UART_IRQHandler+0xc8>
 800cedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00b      	beq.n	800cf00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2201      	movs	r2, #1
 800ceee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef6:	f043 0201 	orr.w	r2, r3, #1
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf04:	f003 0302 	and.w	r3, r3, #2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d011      	beq.n	800cf30 <HAL_UART_IRQHandler+0xf8>
 800cf0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf10:	f003 0301 	and.w	r3, r3, #1
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00b      	beq.n	800cf30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf26:	f043 0204 	orr.w	r2, r3, #4
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d011      	beq.n	800cf60 <HAL_UART_IRQHandler+0x128>
 800cf3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2204      	movs	r2, #4
 800cf4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf56:	f043 0202 	orr.w	r2, r3, #2
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf64:	f003 0308 	and.w	r3, r3, #8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d017      	beq.n	800cf9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf70:	f003 0320 	and.w	r3, r3, #32
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d105      	bne.n	800cf84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf7c:	4b5a      	ldr	r3, [pc, #360]	; (800d0e8 <HAL_UART_IRQHandler+0x2b0>)
 800cf7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d00b      	beq.n	800cf9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2208      	movs	r2, #8
 800cf8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf92:	f043 0208 	orr.w	r2, r3, #8
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d012      	beq.n	800cfce <HAL_UART_IRQHandler+0x196>
 800cfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00c      	beq.n	800cfce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc4:	f043 0220 	orr.w	r2, r3, #32
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f000 823c 	beq.w	800d452 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cfda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfde:	f003 0320 	and.w	r3, r3, #32
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d013      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cfe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d105      	bne.n	800cffe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d007      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d002:	2b00      	cmp	r3, #0
 800d004:	d003      	beq.n	800d00e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d014:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	689b      	ldr	r3, [r3, #8]
 800d01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d022:	2b40      	cmp	r3, #64	; 0x40
 800d024:	d005      	beq.n	800d032 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d02a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d04f      	beq.n	800d0d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f001 f81e 	bl	800e074 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d042:	2b40      	cmp	r3, #64	; 0x40
 800d044:	d141      	bne.n	800d0ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3308      	adds	r3, #8
 800d04c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d050:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d05c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	3308      	adds	r3, #8
 800d06e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d072:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d076:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d07e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1d9      	bne.n	800d046 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d096:	2b00      	cmp	r3, #0
 800d098:	d013      	beq.n	800d0c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09e:	4a14      	ldr	r2, [pc, #80]	; (800d0f0 <HAL_UART_IRQHandler+0x2b8>)
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fc fa6c 	bl	8009584 <HAL_DMA_Abort_IT>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d017      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d0bc:	4610      	mov	r0, r2
 800d0be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c0:	e00f      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f9e4 	bl	800d490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c8:	e00b      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f9e0 	bl	800d490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0d0:	e007      	b.n	800d0e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 f9dc 	bl	800d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d0e0:	e1b7      	b.n	800d452 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e2:	bf00      	nop
    return;
 800d0e4:	e1b5      	b.n	800d452 <HAL_UART_IRQHandler+0x61a>
 800d0e6:	bf00      	nop
 800d0e8:	10000001 	.word	0x10000001
 800d0ec:	04000120 	.word	0x04000120
 800d0f0:	0800e141 	.word	0x0800e141

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	f040 814a 	bne.w	800d392 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d102:	f003 0310 	and.w	r3, r3, #16
 800d106:	2b00      	cmp	r3, #0
 800d108:	f000 8143 	beq.w	800d392 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d10c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d110:	f003 0310 	and.w	r3, r3, #16
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 813c 	beq.w	800d392 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	2210      	movs	r2, #16
 800d120:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d12c:	2b40      	cmp	r3, #64	; 0x40
 800d12e:	f040 80b5 	bne.w	800d29c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d13e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d142:	2b00      	cmp	r3, #0
 800d144:	f000 8187 	beq.w	800d456 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d14e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d152:	429a      	cmp	r2, r3
 800d154:	f080 817f 	bcs.w	800d456 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d15e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 0320 	and.w	r3, r3, #32
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 8086 	bne.w	800d280 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d180:	e853 3f00 	ldrex	r3, [r3]
 800d184:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d18c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	461a      	mov	r2, r3
 800d19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d19e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1da      	bne.n	800d174 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1d0:	f023 0301 	bic.w	r3, r3, #1
 800d1d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1ee:	e841 2300 	strex	r3, r2, [r1]
 800d1f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d1e1      	bne.n	800d1be <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	3308      	adds	r3, #8
 800d200:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d20a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d20c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	3308      	adds	r3, #8
 800d21a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d21e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d220:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d224:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d22c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e3      	bne.n	800d1fa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2220      	movs	r2, #32
 800d236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d24e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d250:	f023 0310 	bic.w	r3, r3, #16
 800d254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	461a      	mov	r2, r3
 800d25e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d262:	65bb      	str	r3, [r7, #88]	; 0x58
 800d264:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d266:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d268:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d26a:	e841 2300 	strex	r3, r2, [r1]
 800d26e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e4      	bne.n	800d240 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fc f929 	bl	80094d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d28c:	b29b      	uxth	r3, r3
 800d28e:	1ad3      	subs	r3, r2, r3
 800d290:	b29b      	uxth	r3, r3
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f905 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d29a:	e0dc      	b.n	800d456 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f000 80ce 	beq.w	800d45a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d2be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 80c9 	beq.w	800d45a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	e853 3f00 	ldrex	r3, [r3]
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800d2ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e4      	bne.n	800d2c8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3308      	adds	r3, #8
 800d304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d308:	e853 3f00 	ldrex	r3, [r3]
 800d30c:	623b      	str	r3, [r7, #32]
   return(result);
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d314:	f023 0301 	bic.w	r3, r3, #1
 800d318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	3308      	adds	r3, #8
 800d322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d326:	633a      	str	r2, [r7, #48]	; 0x30
 800d328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e1      	bne.n	800d2fe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2220      	movs	r2, #32
 800d33e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2200      	movs	r2, #0
 800d34c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f023 0310 	bic.w	r3, r3, #16
 800d362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d370:	61fb      	str	r3, [r7, #28]
 800d372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	69b9      	ldr	r1, [r7, #24]
 800d376:	69fa      	ldr	r2, [r7, #28]
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	617b      	str	r3, [r7, #20]
   return(result);
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e4      	bne.n	800d34e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 f88a 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d390:	e063      	b.n	800d45a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d00e      	beq.n	800d3bc <HAL_UART_IRQHandler+0x584>
 800d39e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d008      	beq.n	800d3bc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 fb61 	bl	800ea7c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3ba:	e051      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d014      	beq.n	800d3f2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d3c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d105      	bne.n	800d3e0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d3d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d008      	beq.n	800d3f2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d03a      	beq.n	800d45e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	4798      	blx	r3
    }
    return;
 800d3f0:	e035      	b.n	800d45e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d3f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d009      	beq.n	800d412 <HAL_UART_IRQHandler+0x5da>
 800d3fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 feae 	bl	800e16c <UART_EndTransmit_IT>
    return;
 800d410:	e026      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d009      	beq.n	800d432 <HAL_UART_IRQHandler+0x5fa>
 800d41e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d422:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d003      	beq.n	800d432 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f001 fb3a 	bl	800eaa4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d430:	e016      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d010      	beq.n	800d460 <HAL_UART_IRQHandler+0x628>
 800d43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d442:	2b00      	cmp	r3, #0
 800d444:	da0c      	bge.n	800d460 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fb22 	bl	800ea90 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44c:	e008      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
      return;
 800d44e:	bf00      	nop
 800d450:	e006      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
    return;
 800d452:	bf00      	nop
 800d454:	e004      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
      return;
 800d456:	bf00      	nop
 800d458:	e002      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
      return;
 800d45a:	bf00      	nop
 800d45c:	e000      	b.n	800d460 <HAL_UART_IRQHandler+0x628>
    return;
 800d45e:	bf00      	nop
  }
}
 800d460:	37e8      	adds	r7, #232	; 0xe8
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop

0800d468 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d490:	b480      	push	{r7}
 800d492:	b083      	sub	sp, #12
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b083      	sub	sp, #12
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4c0:	b08c      	sub	sp, #48	; 0x30
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	431a      	orrs	r2, r3
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	69db      	ldr	r3, [r3, #28]
 800d4e0:	4313      	orrs	r3, r2
 800d4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	681a      	ldr	r2, [r3, #0]
 800d4ea:	4baa      	ldr	r3, [pc, #680]	; (800d794 <UART_SetConfig+0x2d8>)
 800d4ec:	4013      	ands	r3, r2
 800d4ee:	697a      	ldr	r2, [r7, #20]
 800d4f0:	6812      	ldr	r2, [r2, #0]
 800d4f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4f4:	430b      	orrs	r3, r1
 800d4f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d50e:	697b      	ldr	r3, [r7, #20]
 800d510:	699b      	ldr	r3, [r3, #24]
 800d512:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a9f      	ldr	r2, [pc, #636]	; (800d798 <UART_SetConfig+0x2dc>)
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d004      	beq.n	800d528 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	6a1b      	ldr	r3, [r3, #32]
 800d522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d524:	4313      	orrs	r3, r2
 800d526:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d532:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	6812      	ldr	r2, [r2, #0]
 800d53a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d53c:	430b      	orrs	r3, r1
 800d53e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d546:	f023 010f 	bic.w	r1, r3, #15
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	430a      	orrs	r2, r1
 800d554:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4a90      	ldr	r2, [pc, #576]	; (800d79c <UART_SetConfig+0x2e0>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d125      	bne.n	800d5ac <UART_SetConfig+0xf0>
 800d560:	4b8f      	ldr	r3, [pc, #572]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d566:	f003 0303 	and.w	r3, r3, #3
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	d81a      	bhi.n	800d5a4 <UART_SetConfig+0xe8>
 800d56e:	a201      	add	r2, pc, #4	; (adr r2, 800d574 <UART_SetConfig+0xb8>)
 800d570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d574:	0800d585 	.word	0x0800d585
 800d578:	0800d595 	.word	0x0800d595
 800d57c:	0800d58d 	.word	0x0800d58d
 800d580:	0800d59d 	.word	0x0800d59d
 800d584:	2301      	movs	r3, #1
 800d586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d58a:	e116      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d58c:	2302      	movs	r3, #2
 800d58e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d592:	e112      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d594:	2304      	movs	r3, #4
 800d596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d59a:	e10e      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d59c:	2308      	movs	r3, #8
 800d59e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d5a2:	e10a      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d5a4:	2310      	movs	r3, #16
 800d5a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d5aa:	e106      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4a7c      	ldr	r2, [pc, #496]	; (800d7a4 <UART_SetConfig+0x2e8>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d138      	bne.n	800d628 <UART_SetConfig+0x16c>
 800d5b6:	4b7a      	ldr	r3, [pc, #488]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5bc:	f003 030c 	and.w	r3, r3, #12
 800d5c0:	2b0c      	cmp	r3, #12
 800d5c2:	d82d      	bhi.n	800d620 <UART_SetConfig+0x164>
 800d5c4:	a201      	add	r2, pc, #4	; (adr r2, 800d5cc <UART_SetConfig+0x110>)
 800d5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ca:	bf00      	nop
 800d5cc:	0800d601 	.word	0x0800d601
 800d5d0:	0800d621 	.word	0x0800d621
 800d5d4:	0800d621 	.word	0x0800d621
 800d5d8:	0800d621 	.word	0x0800d621
 800d5dc:	0800d611 	.word	0x0800d611
 800d5e0:	0800d621 	.word	0x0800d621
 800d5e4:	0800d621 	.word	0x0800d621
 800d5e8:	0800d621 	.word	0x0800d621
 800d5ec:	0800d609 	.word	0x0800d609
 800d5f0:	0800d621 	.word	0x0800d621
 800d5f4:	0800d621 	.word	0x0800d621
 800d5f8:	0800d621 	.word	0x0800d621
 800d5fc:	0800d619 	.word	0x0800d619
 800d600:	2300      	movs	r3, #0
 800d602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d606:	e0d8      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d608:	2302      	movs	r3, #2
 800d60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d60e:	e0d4      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d610:	2304      	movs	r3, #4
 800d612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d616:	e0d0      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d618:	2308      	movs	r3, #8
 800d61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d61e:	e0cc      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d620:	2310      	movs	r3, #16
 800d622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d626:	e0c8      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a5e      	ldr	r2, [pc, #376]	; (800d7a8 <UART_SetConfig+0x2ec>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d125      	bne.n	800d67e <UART_SetConfig+0x1c2>
 800d632:	4b5b      	ldr	r3, [pc, #364]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d638:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d63c:	2b30      	cmp	r3, #48	; 0x30
 800d63e:	d016      	beq.n	800d66e <UART_SetConfig+0x1b2>
 800d640:	2b30      	cmp	r3, #48	; 0x30
 800d642:	d818      	bhi.n	800d676 <UART_SetConfig+0x1ba>
 800d644:	2b20      	cmp	r3, #32
 800d646:	d00a      	beq.n	800d65e <UART_SetConfig+0x1a2>
 800d648:	2b20      	cmp	r3, #32
 800d64a:	d814      	bhi.n	800d676 <UART_SetConfig+0x1ba>
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <UART_SetConfig+0x19a>
 800d650:	2b10      	cmp	r3, #16
 800d652:	d008      	beq.n	800d666 <UART_SetConfig+0x1aa>
 800d654:	e00f      	b.n	800d676 <UART_SetConfig+0x1ba>
 800d656:	2300      	movs	r3, #0
 800d658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d65c:	e0ad      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d65e:	2302      	movs	r3, #2
 800d660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d664:	e0a9      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d666:	2304      	movs	r3, #4
 800d668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d66c:	e0a5      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d66e:	2308      	movs	r3, #8
 800d670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d674:	e0a1      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d676:	2310      	movs	r3, #16
 800d678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d67c:	e09d      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a4a      	ldr	r2, [pc, #296]	; (800d7ac <UART_SetConfig+0x2f0>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d125      	bne.n	800d6d4 <UART_SetConfig+0x218>
 800d688:	4b45      	ldr	r3, [pc, #276]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d68a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d68e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d692:	2bc0      	cmp	r3, #192	; 0xc0
 800d694:	d016      	beq.n	800d6c4 <UART_SetConfig+0x208>
 800d696:	2bc0      	cmp	r3, #192	; 0xc0
 800d698:	d818      	bhi.n	800d6cc <UART_SetConfig+0x210>
 800d69a:	2b80      	cmp	r3, #128	; 0x80
 800d69c:	d00a      	beq.n	800d6b4 <UART_SetConfig+0x1f8>
 800d69e:	2b80      	cmp	r3, #128	; 0x80
 800d6a0:	d814      	bhi.n	800d6cc <UART_SetConfig+0x210>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <UART_SetConfig+0x1f0>
 800d6a6:	2b40      	cmp	r3, #64	; 0x40
 800d6a8:	d008      	beq.n	800d6bc <UART_SetConfig+0x200>
 800d6aa:	e00f      	b.n	800d6cc <UART_SetConfig+0x210>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6b2:	e082      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ba:	e07e      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d6bc:	2304      	movs	r3, #4
 800d6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6c2:	e07a      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d6c4:	2308      	movs	r3, #8
 800d6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6ca:	e076      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d6cc:	2310      	movs	r3, #16
 800d6ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d6d2:	e072      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a35      	ldr	r2, [pc, #212]	; (800d7b0 <UART_SetConfig+0x2f4>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d12a      	bne.n	800d734 <UART_SetConfig+0x278>
 800d6de:	4b30      	ldr	r3, [pc, #192]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d6e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6ec:	d01a      	beq.n	800d724 <UART_SetConfig+0x268>
 800d6ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6f2:	d81b      	bhi.n	800d72c <UART_SetConfig+0x270>
 800d6f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6f8:	d00c      	beq.n	800d714 <UART_SetConfig+0x258>
 800d6fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6fe:	d815      	bhi.n	800d72c <UART_SetConfig+0x270>
 800d700:	2b00      	cmp	r3, #0
 800d702:	d003      	beq.n	800d70c <UART_SetConfig+0x250>
 800d704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d708:	d008      	beq.n	800d71c <UART_SetConfig+0x260>
 800d70a:	e00f      	b.n	800d72c <UART_SetConfig+0x270>
 800d70c:	2300      	movs	r3, #0
 800d70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d712:	e052      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d714:	2302      	movs	r3, #2
 800d716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d71a:	e04e      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d71c:	2304      	movs	r3, #4
 800d71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d722:	e04a      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d724:	2308      	movs	r3, #8
 800d726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d72a:	e046      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d72c:	2310      	movs	r3, #16
 800d72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d732:	e042      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a17      	ldr	r2, [pc, #92]	; (800d798 <UART_SetConfig+0x2dc>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d13a      	bne.n	800d7b4 <UART_SetConfig+0x2f8>
 800d73e:	4b18      	ldr	r3, [pc, #96]	; (800d7a0 <UART_SetConfig+0x2e4>)
 800d740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d74c:	d01a      	beq.n	800d784 <UART_SetConfig+0x2c8>
 800d74e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d752:	d81b      	bhi.n	800d78c <UART_SetConfig+0x2d0>
 800d754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d758:	d00c      	beq.n	800d774 <UART_SetConfig+0x2b8>
 800d75a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d75e:	d815      	bhi.n	800d78c <UART_SetConfig+0x2d0>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <UART_SetConfig+0x2b0>
 800d764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d768:	d008      	beq.n	800d77c <UART_SetConfig+0x2c0>
 800d76a:	e00f      	b.n	800d78c <UART_SetConfig+0x2d0>
 800d76c:	2300      	movs	r3, #0
 800d76e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d772:	e022      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d774:	2302      	movs	r3, #2
 800d776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d77a:	e01e      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d77c:	2304      	movs	r3, #4
 800d77e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d782:	e01a      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d784:	2308      	movs	r3, #8
 800d786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d78a:	e016      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d78c:	2310      	movs	r3, #16
 800d78e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d792:	e012      	b.n	800d7ba <UART_SetConfig+0x2fe>
 800d794:	cfff69f3 	.word	0xcfff69f3
 800d798:	40008000 	.word	0x40008000
 800d79c:	40013800 	.word	0x40013800
 800d7a0:	40021000 	.word	0x40021000
 800d7a4:	40004400 	.word	0x40004400
 800d7a8:	40004800 	.word	0x40004800
 800d7ac:	40004c00 	.word	0x40004c00
 800d7b0:	40005000 	.word	0x40005000
 800d7b4:	2310      	movs	r3, #16
 800d7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4aae      	ldr	r2, [pc, #696]	; (800da78 <UART_SetConfig+0x5bc>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	f040 8097 	bne.w	800d8f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7ca:	2b08      	cmp	r3, #8
 800d7cc:	d823      	bhi.n	800d816 <UART_SetConfig+0x35a>
 800d7ce:	a201      	add	r2, pc, #4	; (adr r2, 800d7d4 <UART_SetConfig+0x318>)
 800d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d4:	0800d7f9 	.word	0x0800d7f9
 800d7d8:	0800d817 	.word	0x0800d817
 800d7dc:	0800d801 	.word	0x0800d801
 800d7e0:	0800d817 	.word	0x0800d817
 800d7e4:	0800d807 	.word	0x0800d807
 800d7e8:	0800d817 	.word	0x0800d817
 800d7ec:	0800d817 	.word	0x0800d817
 800d7f0:	0800d817 	.word	0x0800d817
 800d7f4:	0800d80f 	.word	0x0800d80f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7f8:	f7fd fdb2 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800d7fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d7fe:	e010      	b.n	800d822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d800:	4b9e      	ldr	r3, [pc, #632]	; (800da7c <UART_SetConfig+0x5c0>)
 800d802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d804:	e00d      	b.n	800d822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d806:	f7fd fd3d 	bl	800b284 <HAL_RCC_GetSysClockFreq>
 800d80a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d80c:	e009      	b.n	800d822 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d80e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d814:	e005      	b.n	800d822 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d816:	2300      	movs	r3, #0
 800d818:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d81a:	2301      	movs	r3, #1
 800d81c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8130 	beq.w	800da8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82e:	4a94      	ldr	r2, [pc, #592]	; (800da80 <UART_SetConfig+0x5c4>)
 800d830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d834:	461a      	mov	r2, r3
 800d836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d838:	fbb3 f3f2 	udiv	r3, r3, r2
 800d83c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	685a      	ldr	r2, [r3, #4]
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d305      	bcc.n	800d85a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	429a      	cmp	r2, r3
 800d858:	d903      	bls.n	800d862 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d860:	e113      	b.n	800da8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d864:	2200      	movs	r2, #0
 800d866:	60bb      	str	r3, [r7, #8]
 800d868:	60fa      	str	r2, [r7, #12]
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d86e:	4a84      	ldr	r2, [pc, #528]	; (800da80 <UART_SetConfig+0x5c4>)
 800d870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d874:	b29b      	uxth	r3, r3
 800d876:	2200      	movs	r2, #0
 800d878:	603b      	str	r3, [r7, #0]
 800d87a:	607a      	str	r2, [r7, #4]
 800d87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d884:	f7f7 f992 	bl	8004bac <__aeabi_uldivmod>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4610      	mov	r0, r2
 800d88e:	4619      	mov	r1, r3
 800d890:	f04f 0200 	mov.w	r2, #0
 800d894:	f04f 0300 	mov.w	r3, #0
 800d898:	020b      	lsls	r3, r1, #8
 800d89a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d89e:	0202      	lsls	r2, r0, #8
 800d8a0:	6979      	ldr	r1, [r7, #20]
 800d8a2:	6849      	ldr	r1, [r1, #4]
 800d8a4:	0849      	lsrs	r1, r1, #1
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	460c      	mov	r4, r1
 800d8aa:	4605      	mov	r5, r0
 800d8ac:	eb12 0804 	adds.w	r8, r2, r4
 800d8b0:	eb43 0905 	adc.w	r9, r3, r5
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	469a      	mov	sl, r3
 800d8bc:	4693      	mov	fp, r2
 800d8be:	4652      	mov	r2, sl
 800d8c0:	465b      	mov	r3, fp
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f7 f971 	bl	8004bac <__aeabi_uldivmod>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8d2:	6a3b      	ldr	r3, [r7, #32]
 800d8d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8d8:	d308      	bcc.n	800d8ec <UART_SetConfig+0x430>
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8e0:	d204      	bcs.n	800d8ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6a3a      	ldr	r2, [r7, #32]
 800d8e8:	60da      	str	r2, [r3, #12]
 800d8ea:	e0ce      	b.n	800da8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d8f2:	e0ca      	b.n	800da8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8fc:	d166      	bne.n	800d9cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d8fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d902:	2b08      	cmp	r3, #8
 800d904:	d827      	bhi.n	800d956 <UART_SetConfig+0x49a>
 800d906:	a201      	add	r2, pc, #4	; (adr r2, 800d90c <UART_SetConfig+0x450>)
 800d908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90c:	0800d931 	.word	0x0800d931
 800d910:	0800d939 	.word	0x0800d939
 800d914:	0800d941 	.word	0x0800d941
 800d918:	0800d957 	.word	0x0800d957
 800d91c:	0800d947 	.word	0x0800d947
 800d920:	0800d957 	.word	0x0800d957
 800d924:	0800d957 	.word	0x0800d957
 800d928:	0800d957 	.word	0x0800d957
 800d92c:	0800d94f 	.word	0x0800d94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d930:	f7fd fd16 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800d934:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d936:	e014      	b.n	800d962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d938:	f7fd fd28 	bl	800b38c <HAL_RCC_GetPCLK2Freq>
 800d93c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d93e:	e010      	b.n	800d962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d940:	4b4e      	ldr	r3, [pc, #312]	; (800da7c <UART_SetConfig+0x5c0>)
 800d942:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d944:	e00d      	b.n	800d962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d946:	f7fd fc9d 	bl	800b284 <HAL_RCC_GetSysClockFreq>
 800d94a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d94c:	e009      	b.n	800d962 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d954:	e005      	b.n	800d962 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d956:	2300      	movs	r3, #0
 800d958:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 8090 	beq.w	800da8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96e:	4a44      	ldr	r2, [pc, #272]	; (800da80 <UART_SetConfig+0x5c4>)
 800d970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d974:	461a      	mov	r2, r3
 800d976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d978:	fbb3 f3f2 	udiv	r3, r3, r2
 800d97c:	005a      	lsls	r2, r3, #1
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	085b      	lsrs	r3, r3, #1
 800d984:	441a      	add	r2, r3
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d98e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d990:	6a3b      	ldr	r3, [r7, #32]
 800d992:	2b0f      	cmp	r3, #15
 800d994:	d916      	bls.n	800d9c4 <UART_SetConfig+0x508>
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d99c:	d212      	bcs.n	800d9c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d99e:	6a3b      	ldr	r3, [r7, #32]
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	f023 030f 	bic.w	r3, r3, #15
 800d9a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9a8:	6a3b      	ldr	r3, [r7, #32]
 800d9aa:	085b      	lsrs	r3, r3, #1
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	8bfb      	ldrh	r3, [r7, #30]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	8bfa      	ldrh	r2, [r7, #30]
 800d9c0:	60da      	str	r2, [r3, #12]
 800d9c2:	e062      	b.n	800da8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d9ca:	e05e      	b.n	800da8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d9cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9d0:	2b08      	cmp	r3, #8
 800d9d2:	d828      	bhi.n	800da26 <UART_SetConfig+0x56a>
 800d9d4:	a201      	add	r2, pc, #4	; (adr r2, 800d9dc <UART_SetConfig+0x520>)
 800d9d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9da:	bf00      	nop
 800d9dc:	0800da01 	.word	0x0800da01
 800d9e0:	0800da09 	.word	0x0800da09
 800d9e4:	0800da11 	.word	0x0800da11
 800d9e8:	0800da27 	.word	0x0800da27
 800d9ec:	0800da17 	.word	0x0800da17
 800d9f0:	0800da27 	.word	0x0800da27
 800d9f4:	0800da27 	.word	0x0800da27
 800d9f8:	0800da27 	.word	0x0800da27
 800d9fc:	0800da1f 	.word	0x0800da1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da00:	f7fd fcae 	bl	800b360 <HAL_RCC_GetPCLK1Freq>
 800da04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da06:	e014      	b.n	800da32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da08:	f7fd fcc0 	bl	800b38c <HAL_RCC_GetPCLK2Freq>
 800da0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da0e:	e010      	b.n	800da32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da10:	4b1a      	ldr	r3, [pc, #104]	; (800da7c <UART_SetConfig+0x5c0>)
 800da12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800da14:	e00d      	b.n	800da32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da16:	f7fd fc35 	bl	800b284 <HAL_RCC_GetSysClockFreq>
 800da1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800da1c:	e009      	b.n	800da32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800da24:	e005      	b.n	800da32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800da26:	2300      	movs	r3, #0
 800da28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800da30:	bf00      	nop
    }

    if (pclk != 0U)
 800da32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da34:	2b00      	cmp	r3, #0
 800da36:	d028      	beq.n	800da8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3c:	4a10      	ldr	r2, [pc, #64]	; (800da80 <UART_SetConfig+0x5c4>)
 800da3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da42:	461a      	mov	r2, r3
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	fbb3 f2f2 	udiv	r2, r3, r2
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	085b      	lsrs	r3, r3, #1
 800da50:	441a      	add	r2, r3
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	fbb2 f3f3 	udiv	r3, r2, r3
 800da5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da5c:	6a3b      	ldr	r3, [r7, #32]
 800da5e:	2b0f      	cmp	r3, #15
 800da60:	d910      	bls.n	800da84 <UART_SetConfig+0x5c8>
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da68:	d20c      	bcs.n	800da84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da6a:	6a3b      	ldr	r3, [r7, #32]
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	60da      	str	r2, [r3, #12]
 800da74:	e009      	b.n	800da8a <UART_SetConfig+0x5ce>
 800da76:	bf00      	nop
 800da78:	40008000 	.word	0x40008000
 800da7c:	00f42400 	.word	0x00f42400
 800da80:	080120b0 	.word	0x080120b0
      }
      else
      {
        ret = HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	2201      	movs	r2, #1
 800da8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2201      	movs	r2, #1
 800da96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	2200      	movs	r2, #0
 800da9e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	2200      	movs	r2, #0
 800daa4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800daa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3730      	adds	r7, #48	; 0x30
 800daae:	46bd      	mov	sp, r7
 800dab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dab4:	b480      	push	{r7}
 800dab6:	b083      	sub	sp, #12
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac0:	f003 0301 	and.w	r3, r3, #1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00a      	beq.n	800dade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dae2:	f003 0302 	and.w	r3, r3, #2
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d00a      	beq.n	800db00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	430a      	orrs	r2, r1
 800dafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db04:	f003 0304 	and.w	r3, r3, #4
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00a      	beq.n	800db22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	430a      	orrs	r2, r1
 800db20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db26:	f003 0308 	and.w	r3, r3, #8
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00a      	beq.n	800db44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	430a      	orrs	r2, r1
 800db42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db48:	f003 0310 	and.w	r3, r3, #16
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00a      	beq.n	800db66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	430a      	orrs	r2, r1
 800db64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6a:	f003 0320 	and.w	r3, r3, #32
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	430a      	orrs	r2, r1
 800db86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db90:	2b00      	cmp	r3, #0
 800db92:	d01a      	beq.n	800dbca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	430a      	orrs	r2, r1
 800dba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbb2:	d10a      	bne.n	800dbca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00a      	beq.n	800dbec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	430a      	orrs	r2, r1
 800dbea:	605a      	str	r2, [r3, #4]
  }
}
 800dbec:	bf00      	nop
 800dbee:	370c      	adds	r7, #12
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf6:	4770      	bx	lr

0800dbf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b086      	sub	sp, #24
 800dbfc:	af02      	add	r7, sp, #8
 800dbfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc08:	f7fa f826 	bl	8007c58 <HAL_GetTick>
 800dc0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d10e      	bne.n	800dc3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc20:	9300      	str	r3, [sp, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f82f 	bl	800dc8e <UART_WaitOnFlagUntilTimeout>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc36:	2303      	movs	r3, #3
 800dc38:	e025      	b.n	800dc86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	f003 0304 	and.w	r3, r3, #4
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d10e      	bne.n	800dc66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 f819 	bl	800dc8e <UART_WaitOnFlagUntilTimeout>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dc62:	2303      	movs	r3, #3
 800dc64:	e00f      	b.n	800dc86 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2220      	movs	r2, #32
 800dc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2220      	movs	r2, #32
 800dc72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc84:	2300      	movs	r3, #0
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b09c      	sub	sp, #112	; 0x70
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	603b      	str	r3, [r7, #0]
 800dc9a:	4613      	mov	r3, r2
 800dc9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc9e:	e0a9      	b.n	800ddf4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca6:	f000 80a5 	beq.w	800ddf4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcaa:	f7f9 ffd5 	bl	8007c58 <HAL_GetTick>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	1ad3      	subs	r3, r2, r3
 800dcb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d302      	bcc.n	800dcc0 <UART_WaitOnFlagUntilTimeout+0x32>
 800dcba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d140      	bne.n	800dd42 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc8:	e853 3f00 	ldrex	r3, [r3]
 800dccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dcce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dcd4:	667b      	str	r3, [r7, #100]	; 0x64
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	461a      	mov	r2, r3
 800dcdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcde:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dce0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dce6:	e841 2300 	strex	r3, r2, [r1]
 800dcea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800dcec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d1e6      	bne.n	800dcc0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	3308      	adds	r3, #8
 800dcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcfc:	e853 3f00 	ldrex	r3, [r3]
 800dd00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd04:	f023 0301 	bic.w	r3, r3, #1
 800dd08:	663b      	str	r3, [r7, #96]	; 0x60
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	3308      	adds	r3, #8
 800dd10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dd12:	64ba      	str	r2, [r7, #72]	; 0x48
 800dd14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dd18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd1a:	e841 2300 	strex	r3, r2, [r1]
 800dd1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d1e5      	bne.n	800dcf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2220      	movs	r2, #32
 800dd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2220      	movs	r2, #32
 800dd32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	e069      	b.n	800de16 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f003 0304 	and.w	r3, r3, #4
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d051      	beq.n	800ddf4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	69db      	ldr	r3, [r3, #28]
 800dd56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd5e:	d149      	bne.n	800ddf4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd68:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	e853 3f00 	ldrex	r3, [r3]
 800dd76:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800dd7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd88:	637b      	str	r3, [r7, #52]	; 0x34
 800dd8a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dd8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd90:	e841 2300 	strex	r3, r2, [r1]
 800dd94:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d1e6      	bne.n	800dd6a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3308      	adds	r3, #8
 800dda2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda4:	697b      	ldr	r3, [r7, #20]
 800dda6:	e853 3f00 	ldrex	r3, [r3]
 800ddaa:	613b      	str	r3, [r7, #16]
   return(result);
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	f023 0301 	bic.w	r3, r3, #1
 800ddb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3308      	adds	r3, #8
 800ddba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ddbc:	623a      	str	r2, [r7, #32]
 800ddbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	69f9      	ldr	r1, [r7, #28]
 800ddc2:	6a3a      	ldr	r2, [r7, #32]
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e5      	bne.n	800dd9c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2220      	movs	r2, #32
 800ddd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2220      	movs	r2, #32
 800dddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2220      	movs	r2, #32
 800dde4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	e010      	b.n	800de16 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	69da      	ldr	r2, [r3, #28]
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	429a      	cmp	r2, r3
 800de02:	bf0c      	ite	eq
 800de04:	2301      	moveq	r3, #1
 800de06:	2300      	movne	r3, #0
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	461a      	mov	r2, r3
 800de0c:	79fb      	ldrb	r3, [r7, #7]
 800de0e:	429a      	cmp	r2, r3
 800de10:	f43f af46 	beq.w	800dca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3770      	adds	r7, #112	; 0x70
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
	...

0800de20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de20:	b480      	push	{r7}
 800de22:	b0a3      	sub	sp, #140	; 0x8c
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	4613      	mov	r3, r2
 800de2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	88fa      	ldrh	r2, [r7, #6]
 800de38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	88fa      	ldrh	r2, [r7, #6]
 800de40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	689b      	ldr	r3, [r3, #8]
 800de4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de52:	d10e      	bne.n	800de72 <UART_Start_Receive_IT+0x52>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	691b      	ldr	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d105      	bne.n	800de68 <UART_Start_Receive_IT+0x48>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800de62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de66:	e02d      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	22ff      	movs	r2, #255	; 0xff
 800de6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de70:	e028      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10d      	bne.n	800de96 <UART_Start_Receive_IT+0x76>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	691b      	ldr	r3, [r3, #16]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d104      	bne.n	800de8c <UART_Start_Receive_IT+0x6c>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	22ff      	movs	r2, #255	; 0xff
 800de86:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de8a:	e01b      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	227f      	movs	r2, #127	; 0x7f
 800de90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800de94:	e016      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de9e:	d10d      	bne.n	800debc <UART_Start_Receive_IT+0x9c>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	691b      	ldr	r3, [r3, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d104      	bne.n	800deb2 <UART_Start_Receive_IT+0x92>
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	227f      	movs	r2, #127	; 0x7f
 800deac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800deb0:	e008      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	223f      	movs	r2, #63	; 0x3f
 800deb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800deba:	e003      	b.n	800dec4 <UART_Start_Receive_IT+0xa4>
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2222      	movs	r2, #34	; 0x22
 800ded0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	3308      	adds	r3, #8
 800deda:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dedc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dede:	e853 3f00 	ldrex	r3, [r3]
 800dee2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800dee4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dee6:	f043 0301 	orr.w	r3, r3, #1
 800deea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	3308      	adds	r3, #8
 800def4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800def8:	673a      	str	r2, [r7, #112]	; 0x70
 800defa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800defe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800df06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e3      	bne.n	800ded4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df14:	d153      	bne.n	800dfbe <UART_Start_Receive_IT+0x19e>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df1c:	88fa      	ldrh	r2, [r7, #6]
 800df1e:	429a      	cmp	r2, r3
 800df20:	d34d      	bcc.n	800dfbe <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df2a:	d107      	bne.n	800df3c <UART_Start_Receive_IT+0x11c>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	691b      	ldr	r3, [r3, #16]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d103      	bne.n	800df3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4a4b      	ldr	r2, [pc, #300]	; (800e064 <UART_Start_Receive_IT+0x244>)
 800df38:	671a      	str	r2, [r3, #112]	; 0x70
 800df3a:	e002      	b.n	800df42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4a4a      	ldr	r2, [pc, #296]	; (800e068 <UART_Start_Receive_IT+0x248>)
 800df40:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d01a      	beq.n	800df88 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800df60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df74:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df76:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800df7a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df7c:	e841 2300 	strex	r3, r2, [r1]
 800df80:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800df82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1e4      	bne.n	800df52 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	3308      	adds	r3, #8
 800df8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df92:	e853 3f00 	ldrex	r3, [r3]
 800df96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800dfa8:	64ba      	str	r2, [r7, #72]	; 0x48
 800dfaa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dfb0:	e841 2300 	strex	r3, r2, [r1]
 800dfb4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800dfb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d1e5      	bne.n	800df88 <UART_Start_Receive_IT+0x168>
 800dfbc:	e04a      	b.n	800e054 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfc6:	d107      	bne.n	800dfd8 <UART_Start_Receive_IT+0x1b8>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d103      	bne.n	800dfd8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	4a26      	ldr	r2, [pc, #152]	; (800e06c <UART_Start_Receive_IT+0x24c>)
 800dfd4:	671a      	str	r2, [r3, #112]	; 0x70
 800dfd6:	e002      	b.n	800dfde <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	4a25      	ldr	r2, [pc, #148]	; (800e070 <UART_Start_Receive_IT+0x250>)
 800dfdc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	691b      	ldr	r3, [r3, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d019      	beq.n	800e022 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	e853 3f00 	ldrex	r3, [r3]
 800dffa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e002:	677b      	str	r3, [r7, #116]	; 0x74
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	461a      	mov	r2, r3
 800e00a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e00c:	637b      	str	r3, [r7, #52]	; 0x34
 800e00e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e010:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e014:	e841 2300 	strex	r3, r2, [r1]
 800e018:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e6      	bne.n	800dfee <UART_Start_Receive_IT+0x1ce>
 800e020:	e018      	b.n	800e054 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	e853 3f00 	ldrex	r3, [r3]
 800e02e:	613b      	str	r3, [r7, #16]
   return(result);
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	f043 0320 	orr.w	r3, r3, #32
 800e036:	67bb      	str	r3, [r7, #120]	; 0x78
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	461a      	mov	r2, r3
 800e03e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e040:	623b      	str	r3, [r7, #32]
 800e042:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e044:	69f9      	ldr	r1, [r7, #28]
 800e046:	6a3a      	ldr	r2, [r7, #32]
 800e048:	e841 2300 	strex	r3, r2, [r1]
 800e04c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d1e6      	bne.n	800e022 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	378c      	adds	r7, #140	; 0x8c
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	0800e77d 	.word	0x0800e77d
 800e068:	0800e485 	.word	0x0800e485
 800e06c:	0800e323 	.word	0x0800e323
 800e070:	0800e1c3 	.word	0x0800e1c3

0800e074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b095      	sub	sp, #84	; 0x54
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e084:	e853 3f00 	ldrex	r3, [r3]
 800e088:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e090:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	461a      	mov	r2, r3
 800e098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e09a:	643b      	str	r3, [r7, #64]	; 0x40
 800e09c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e09e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e0a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0a2:	e841 2300 	strex	r3, r2, [r1]
 800e0a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1e6      	bne.n	800e07c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	3308      	adds	r3, #8
 800e0b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	e853 3f00 	ldrex	r3, [r3]
 800e0bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0be:	69fb      	ldr	r3, [r7, #28]
 800e0c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e0c4:	f023 0301 	bic.w	r3, r3, #1
 800e0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e0d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e0d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e0d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0da:	e841 2300 	strex	r3, r2, [r1]
 800e0de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1e3      	bne.n	800e0ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d118      	bne.n	800e120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	e853 3f00 	ldrex	r3, [r3]
 800e0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	f023 0310 	bic.w	r3, r3, #16
 800e102:	647b      	str	r3, [r7, #68]	; 0x44
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e10c:	61bb      	str	r3, [r7, #24]
 800e10e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e110:	6979      	ldr	r1, [r7, #20]
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	e841 2300 	strex	r3, r2, [r1]
 800e118:	613b      	str	r3, [r7, #16]
   return(result);
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1e6      	bne.n	800e0ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e134:	bf00      	nop
 800e136:	3754      	adds	r7, #84	; 0x54
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr

0800e140 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e14c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff f996 	bl	800d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e164:	bf00      	nop
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}

0800e16c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b088      	sub	sp, #32
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	e853 3f00 	ldrex	r3, [r3]
 800e180:	60bb      	str	r3, [r7, #8]
   return(result);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e188:	61fb      	str	r3, [r7, #28]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	461a      	mov	r2, r3
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	61bb      	str	r3, [r7, #24]
 800e194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e196:	6979      	ldr	r1, [r7, #20]
 800e198:	69ba      	ldr	r2, [r7, #24]
 800e19a:	e841 2300 	strex	r3, r2, [r1]
 800e19e:	613b      	str	r3, [r7, #16]
   return(result);
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d1e6      	bne.n	800e174 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2220      	movs	r2, #32
 800e1aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f7ff f957 	bl	800d468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e1ba:	bf00      	nop
 800e1bc:	3720      	adds	r7, #32
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b096      	sub	sp, #88	; 0x58
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e1d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1da:	2b22      	cmp	r3, #34	; 0x22
 800e1dc:	f040 8095 	bne.w	800e30a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e1ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e1ee:	b2d9      	uxtb	r1, r3
 800e1f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1fa:	400a      	ands	r2, r1
 800e1fc:	b2d2      	uxtb	r2, r2
 800e1fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e204:	1c5a      	adds	r2, r3, #1
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e210:	b29b      	uxth	r3, r3
 800e212:	3b01      	subs	r3, #1
 800e214:	b29a      	uxth	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e222:	b29b      	uxth	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	d178      	bne.n	800e31a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e230:	e853 3f00 	ldrex	r3, [r3]
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e23c:	653b      	str	r3, [r7, #80]	; 0x50
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e246:	647b      	str	r3, [r7, #68]	; 0x44
 800e248:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e24a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e24c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e24e:	e841 2300 	strex	r3, r2, [r1]
 800e252:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e256:	2b00      	cmp	r3, #0
 800e258:	d1e6      	bne.n	800e228 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	3308      	adds	r3, #8
 800e260:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	e853 3f00 	ldrex	r3, [r3]
 800e268:	623b      	str	r3, [r7, #32]
   return(result);
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	f023 0301 	bic.w	r3, r3, #1
 800e270:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	3308      	adds	r3, #8
 800e278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e27a:	633a      	str	r2, [r7, #48]	; 0x30
 800e27c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e282:	e841 2300 	strex	r3, r2, [r1]
 800e286:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1e5      	bne.n	800e25a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2220      	movs	r2, #32
 800e292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2200      	movs	r2, #0
 800e29a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	d12e      	bne.n	800e302 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	e853 3f00 	ldrex	r3, [r3]
 800e2b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f023 0310 	bic.w	r3, r3, #16
 800e2be:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2c8:	61fb      	str	r3, [r7, #28]
 800e2ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2cc:	69b9      	ldr	r1, [r7, #24]
 800e2ce:	69fa      	ldr	r2, [r7, #28]
 800e2d0:	e841 2300 	strex	r3, r2, [r1]
 800e2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1e6      	bne.n	800e2aa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	69db      	ldr	r3, [r3, #28]
 800e2e2:	f003 0310 	and.w	r3, r3, #16
 800e2e6:	2b10      	cmp	r3, #16
 800e2e8:	d103      	bne.n	800e2f2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff f8d2 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e300:	e00b      	b.n	800e31a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff f8ba 	bl	800d47c <HAL_UART_RxCpltCallback>
}
 800e308:	e007      	b.n	800e31a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	699a      	ldr	r2, [r3, #24]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f042 0208 	orr.w	r2, r2, #8
 800e318:	619a      	str	r2, [r3, #24]
}
 800e31a:	bf00      	nop
 800e31c:	3758      	adds	r7, #88	; 0x58
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}

0800e322 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e322:	b580      	push	{r7, lr}
 800e324:	b096      	sub	sp, #88	; 0x58
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e330:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e33a:	2b22      	cmp	r3, #34	; 0x22
 800e33c:	f040 8095 	bne.w	800e46a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e346:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e34e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e350:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e354:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e358:	4013      	ands	r3, r2
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e35e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e364:	1c9a      	adds	r2, r3, #2
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e370:	b29b      	uxth	r3, r3
 800e372:	3b01      	subs	r3, #1
 800e374:	b29a      	uxth	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e382:	b29b      	uxth	r3, r3
 800e384:	2b00      	cmp	r3, #0
 800e386:	d178      	bne.n	800e47a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e390:	e853 3f00 	ldrex	r3, [r3]
 800e394:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e398:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e39c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	461a      	mov	r2, r3
 800e3a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e3a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ae:	e841 2300 	strex	r3, r2, [r1]
 800e3b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1e6      	bne.n	800e388 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	e853 3f00 	ldrex	r3, [r3]
 800e3c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	f023 0301 	bic.w	r3, r3, #1
 800e3d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	3308      	adds	r3, #8
 800e3d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3da:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3e2:	e841 2300 	strex	r3, r2, [r1]
 800e3e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d1e5      	bne.n	800e3ba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2220      	movs	r2, #32
 800e3f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e400:	2b01      	cmp	r3, #1
 800e402:	d12e      	bne.n	800e462 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2200      	movs	r2, #0
 800e408:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	e853 3f00 	ldrex	r3, [r3]
 800e416:	60bb      	str	r3, [r7, #8]
   return(result);
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	f023 0310 	bic.w	r3, r3, #16
 800e41e:	647b      	str	r3, [r7, #68]	; 0x44
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	461a      	mov	r2, r3
 800e426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e428:	61bb      	str	r3, [r7, #24]
 800e42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42c:	6979      	ldr	r1, [r7, #20]
 800e42e:	69ba      	ldr	r2, [r7, #24]
 800e430:	e841 2300 	strex	r3, r2, [r1]
 800e434:	613b      	str	r3, [r7, #16]
   return(result);
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d1e6      	bne.n	800e40a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	69db      	ldr	r3, [r3, #28]
 800e442:	f003 0310 	and.w	r3, r3, #16
 800e446:	2b10      	cmp	r3, #16
 800e448:	d103      	bne.n	800e452 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2210      	movs	r2, #16
 800e450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7ff f822 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e460:	e00b      	b.n	800e47a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7ff f80a 	bl	800d47c <HAL_UART_RxCpltCallback>
}
 800e468:	e007      	b.n	800e47a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	699a      	ldr	r2, [r3, #24]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f042 0208 	orr.w	r2, r2, #8
 800e478:	619a      	str	r2, [r3, #24]
}
 800e47a:	bf00      	nop
 800e47c:	3758      	adds	r7, #88	; 0x58
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}
	...

0800e484 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b0a6      	sub	sp, #152	; 0x98
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e492:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	689b      	ldr	r3, [r3, #8]
 800e4b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ba:	2b22      	cmp	r3, #34	; 0x22
 800e4bc:	f040 814f 	bne.w	800e75e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e4c6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e4ca:	e0f6      	b.n	800e6ba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e4d6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e4da:	b2d9      	uxtb	r1, r3
 800e4dc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e4e0:	b2da      	uxtb	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4e6:	400a      	ands	r2, r1
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	3b01      	subs	r3, #1
 800e500:	b29a      	uxth	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	69db      	ldr	r3, [r3, #28]
 800e50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e516:	f003 0307 	and.w	r3, r3, #7
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d053      	beq.n	800e5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e51e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	d011      	beq.n	800e54e <UART_RxISR_8BIT_FIFOEN+0xca>
 800e52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00b      	beq.n	800e54e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2201      	movs	r2, #1
 800e53c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e544:	f043 0201 	orr.w	r2, r3, #1
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e54e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e552:	f003 0302 	and.w	r3, r3, #2
 800e556:	2b00      	cmp	r3, #0
 800e558:	d011      	beq.n	800e57e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e55a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00b      	beq.n	800e57e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2202      	movs	r2, #2
 800e56c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e574:	f043 0204 	orr.w	r2, r3, #4
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e57e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e582:	f003 0304 	and.w	r3, r3, #4
 800e586:	2b00      	cmp	r3, #0
 800e588:	d011      	beq.n	800e5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e58a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00b      	beq.n	800e5ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2204      	movs	r2, #4
 800e59c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5a4:	f043 0202 	orr.w	r2, r3, #2
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d006      	beq.n	800e5c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7fe ff69 	bl	800d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d173      	bne.n	800e6ba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5da:	e853 3f00 	ldrex	r3, [r3]
 800e5de:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800e5e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e5e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5f6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e5fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5fc:	e841 2300 	strex	r3, r2, [r1]
 800e600:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e604:	2b00      	cmp	r3, #0
 800e606:	d1e4      	bne.n	800e5d2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3308      	adds	r3, #8
 800e60e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e612:	e853 3f00 	ldrex	r3, [r3]
 800e616:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e61a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e61e:	f023 0301 	bic.w	r3, r3, #1
 800e622:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3308      	adds	r3, #8
 800e62a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e62c:	657a      	str	r2, [r7, #84]	; 0x54
 800e62e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e630:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e634:	e841 2300 	strex	r3, r2, [r1]
 800e638:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1e3      	bne.n	800e608 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2220      	movs	r2, #32
 800e644:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e652:	2b01      	cmp	r3, #1
 800e654:	d12e      	bne.n	800e6b4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2200      	movs	r2, #0
 800e65a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	f023 0310 	bic.w	r3, r3, #16
 800e670:	67bb      	str	r3, [r7, #120]	; 0x78
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e67a:	643b      	str	r3, [r7, #64]	; 0x40
 800e67c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e682:	e841 2300 	strex	r3, r2, [r1]
 800e686:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e6      	bne.n	800e65c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	69db      	ldr	r3, [r3, #28]
 800e694:	f003 0310 	and.w	r3, r3, #16
 800e698:	2b10      	cmp	r3, #16
 800e69a:	d103      	bne.n	800e6a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	2210      	movs	r2, #16
 800e6a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7fe fef9 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
 800e6b2:	e002      	b.n	800e6ba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f7fe fee1 	bl	800d47c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d006      	beq.n	800e6d0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800e6c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e6c6:	f003 0320 	and.w	r3, r3, #32
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f47f aefe 	bne.w	800e4cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e6d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e6da:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d045      	beq.n	800e76e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e6e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d23e      	bcs.n	800e76e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	e853 3f00 	ldrex	r3, [r3]
 800e6fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e706:	673b      	str	r3, [r7, #112]	; 0x70
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	3308      	adds	r3, #8
 800e70e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e710:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e718:	e841 2300 	strex	r3, r2, [r1]
 800e71c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1e5      	bne.n	800e6f0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	4a14      	ldr	r2, [pc, #80]	; (800e778 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800e728:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	e853 3f00 	ldrex	r3, [r3]
 800e736:	60bb      	str	r3, [r7, #8]
   return(result);
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f043 0320 	orr.w	r3, r3, #32
 800e73e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e748:	61bb      	str	r3, [r7, #24]
 800e74a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74c:	6979      	ldr	r1, [r7, #20]
 800e74e:	69ba      	ldr	r2, [r7, #24]
 800e750:	e841 2300 	strex	r3, r2, [r1]
 800e754:	613b      	str	r3, [r7, #16]
   return(result);
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1e6      	bne.n	800e72a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e75c:	e007      	b.n	800e76e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	699a      	ldr	r2, [r3, #24]
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f042 0208 	orr.w	r2, r2, #8
 800e76c:	619a      	str	r2, [r3, #24]
}
 800e76e:	bf00      	nop
 800e770:	3798      	adds	r7, #152	; 0x98
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	0800e1c3 	.word	0x0800e1c3

0800e77c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b0a8      	sub	sp, #160	; 0xa0
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e78a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	69db      	ldr	r3, [r3, #28]
 800e794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7b2:	2b22      	cmp	r3, #34	; 0x22
 800e7b4:	f040 8153 	bne.w	800ea5e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e7be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e7c2:	e0fa      	b.n	800e9ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800e7d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800e7da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800e7de:	4013      	ands	r3, r2
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e7e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7ec:	1c9a      	adds	r2, r3, #2
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	69db      	ldr	r3, [r3, #28]
 800e80a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e80e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e812:	f003 0307 	and.w	r3, r3, #7
 800e816:	2b00      	cmp	r3, #0
 800e818:	d053      	beq.n	800e8c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e81a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e81e:	f003 0301 	and.w	r3, r3, #1
 800e822:	2b00      	cmp	r3, #0
 800e824:	d011      	beq.n	800e84a <UART_RxISR_16BIT_FIFOEN+0xce>
 800e826:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00b      	beq.n	800e84a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2201      	movs	r2, #1
 800e838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e840:	f043 0201 	orr.w	r2, r3, #1
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e84a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e84e:	f003 0302 	and.w	r3, r3, #2
 800e852:	2b00      	cmp	r3, #0
 800e854:	d011      	beq.n	800e87a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e856:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e85a:	f003 0301 	and.w	r3, r3, #1
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00b      	beq.n	800e87a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	2202      	movs	r2, #2
 800e868:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e870:	f043 0204 	orr.w	r2, r3, #4
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e87a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e87e:	f003 0304 	and.w	r3, r3, #4
 800e882:	2b00      	cmp	r3, #0
 800e884:	d011      	beq.n	800e8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e886:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00b      	beq.n	800e8aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2204      	movs	r2, #4
 800e898:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8a0:	f043 0202 	orr.w	r2, r3, #2
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d006      	beq.n	800e8c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7fe fdeb 	bl	800d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d175      	bne.n	800e9ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8d6:	e853 3f00 	ldrex	r3, [r3]
 800e8da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e8f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e8f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8f8:	e841 2300 	strex	r3, r2, [r1]
 800e8fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e8fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1e4      	bne.n	800e8ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3308      	adds	r3, #8
 800e90a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e90e:	e853 3f00 	ldrex	r3, [r3]
 800e912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e91a:	f023 0301 	bic.w	r3, r3, #1
 800e91e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3308      	adds	r3, #8
 800e928:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e92c:	65ba      	str	r2, [r7, #88]	; 0x58
 800e92e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e934:	e841 2300 	strex	r3, r2, [r1]
 800e938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d1e1      	bne.n	800e904 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2220      	movs	r2, #32
 800e944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e952:	2b01      	cmp	r3, #1
 800e954:	d12e      	bne.n	800e9b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e964:	e853 3f00 	ldrex	r3, [r3]
 800e968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e96c:	f023 0310 	bic.w	r3, r3, #16
 800e970:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e97a:	647b      	str	r3, [r7, #68]	; 0x44
 800e97c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e6      	bne.n	800e95c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	69db      	ldr	r3, [r3, #28]
 800e994:	f003 0310 	and.w	r3, r3, #16
 800e998:	2b10      	cmp	r3, #16
 800e99a:	d103      	bne.n	800e9a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2210      	movs	r2, #16
 800e9a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f7fe fd79 	bl	800d4a4 <HAL_UARTEx_RxEventCallback>
 800e9b2:	e002      	b.n	800e9ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7fe fd61 	bl	800d47c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e9ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d006      	beq.n	800e9d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 800e9c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e9c6:	f003 0320 	and.w	r3, r3, #32
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	f47f aefa 	bne.w	800e7c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e9da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d045      	beq.n	800ea6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e9e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d23e      	bcs.n	800ea6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	3308      	adds	r3, #8
 800e9f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fa:	e853 3f00 	ldrex	r3, [r3]
 800e9fe:	623b      	str	r3, [r7, #32]
   return(result);
 800ea00:	6a3b      	ldr	r3, [r7, #32]
 800ea02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea06:	677b      	str	r3, [r7, #116]	; 0x74
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	3308      	adds	r3, #8
 800ea0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ea10:	633a      	str	r2, [r7, #48]	; 0x30
 800ea12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea18:	e841 2300 	strex	r3, r2, [r1]
 800ea1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d1e5      	bne.n	800e9f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a14      	ldr	r2, [pc, #80]	; (800ea78 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ea28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	e853 3f00 	ldrex	r3, [r3]
 800ea36:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f043 0320 	orr.w	r3, r3, #32
 800ea3e:	673b      	str	r3, [r7, #112]	; 0x70
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	461a      	mov	r2, r3
 800ea46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea48:	61fb      	str	r3, [r7, #28]
 800ea4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea4c:	69b9      	ldr	r1, [r7, #24]
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	e841 2300 	strex	r3, r2, [r1]
 800ea54:	617b      	str	r3, [r7, #20]
   return(result);
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1e6      	bne.n	800ea2a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ea5c:	e007      	b.n	800ea6e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	699a      	ldr	r2, [r3, #24]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f042 0208 	orr.w	r2, r2, #8
 800ea6c:	619a      	str	r2, [r3, #24]
}
 800ea6e:	bf00      	nop
 800ea70:	37a0      	adds	r7, #160	; 0xa0
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	0800e323 	.word	0x0800e323

0800ea7c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b083      	sub	sp, #12
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ea84:	bf00      	nop
 800ea86:	370c      	adds	r7, #12
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea90:	b480      	push	{r7}
 800ea92:	b083      	sub	sp, #12
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea98:	bf00      	nop
 800ea9a:	370c      	adds	r7, #12
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b085      	sub	sp, #20
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d101      	bne.n	800eace <HAL_UARTEx_DisableFifoMode+0x16>
 800eaca:	2302      	movs	r3, #2
 800eacc:	e027      	b.n	800eb1e <HAL_UARTEx_DisableFifoMode+0x66>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2224      	movs	r2, #36	; 0x24
 800eada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f022 0201 	bic.w	r2, r2, #1
 800eaf4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eafc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2200      	movs	r2, #0
 800eb02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	68fa      	ldr	r2, [r7, #12]
 800eb0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2220      	movs	r2, #32
 800eb10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3714      	adds	r7, #20
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
 800eb32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d101      	bne.n	800eb42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb3e:	2302      	movs	r3, #2
 800eb40:	e02d      	b.n	800eb9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2224      	movs	r2, #36	; 0x24
 800eb4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f022 0201 	bic.w	r2, r2, #1
 800eb68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	683a      	ldr	r2, [r7, #0]
 800eb7a:	430a      	orrs	r2, r1
 800eb7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f850 	bl	800ec24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2220      	movs	r2, #32
 800eb90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb9c:	2300      	movs	r3, #0
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d101      	bne.n	800ebbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ebba:	2302      	movs	r3, #2
 800ebbc:	e02d      	b.n	800ec1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2201      	movs	r2, #1
 800ebc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2224      	movs	r2, #36	; 0x24
 800ebca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f022 0201 	bic.w	r2, r2, #1
 800ebe4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	430a      	orrs	r2, r1
 800ebf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f000 f812 	bl	800ec24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2220      	movs	r2, #32
 800ec0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3710      	adds	r7, #16
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
	...

0800ec24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d108      	bne.n	800ec46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2201      	movs	r2, #1
 800ec38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec44:	e031      	b.n	800ecaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec46:	2308      	movs	r3, #8
 800ec48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec4a:	2308      	movs	r3, #8
 800ec4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	0e5b      	lsrs	r3, r3, #25
 800ec56:	b2db      	uxtb	r3, r3
 800ec58:	f003 0307 	and.w	r3, r3, #7
 800ec5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	0f5b      	lsrs	r3, r3, #29
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	f003 0307 	and.w	r3, r3, #7
 800ec6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec6e:	7bbb      	ldrb	r3, [r7, #14]
 800ec70:	7b3a      	ldrb	r2, [r7, #12]
 800ec72:	4911      	ldr	r1, [pc, #68]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ec74:	5c8a      	ldrb	r2, [r1, r2]
 800ec76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ec7a:	7b3a      	ldrb	r2, [r7, #12]
 800ec7c:	490f      	ldr	r1, [pc, #60]	; (800ecbc <UARTEx_SetNbDataToProcess+0x98>)
 800ec7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ec80:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec84:	b29a      	uxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	7b7a      	ldrb	r2, [r7, #13]
 800ec90:	4909      	ldr	r1, [pc, #36]	; (800ecb8 <UARTEx_SetNbDataToProcess+0x94>)
 800ec92:	5c8a      	ldrb	r2, [r1, r2]
 800ec94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec98:	7b7a      	ldrb	r2, [r7, #13]
 800ec9a:	4908      	ldr	r1, [pc, #32]	; (800ecbc <UARTEx_SetNbDataToProcess+0x98>)
 800ec9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ecaa:	bf00      	nop
 800ecac:	3714      	adds	r7, #20
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr
 800ecb6:	bf00      	nop
 800ecb8:	080120c8 	.word	0x080120c8
 800ecbc:	080120d0 	.word	0x080120d0

0800ecc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ecce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ecd2:	2b84      	cmp	r3, #132	; 0x84
 800ecd4:	d005      	beq.n	800ece2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ecd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	4413      	add	r3, r2
 800ecde:	3303      	adds	r3, #3
 800ece0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ece2:	68fb      	ldr	r3, [r7, #12]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3714      	adds	r7, #20
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr

0800ecf0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ecf4:	f000 fee8 	bl	800fac8 <vTaskStartScheduler>
  
  return osOK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ecfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed00:	b087      	sub	sp, #28
 800ed02:	af02      	add	r7, sp, #8
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	685c      	ldr	r4, [r3, #4]
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed14:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7ff ffcf 	bl	800ecc0 <makeFreeRtosPriority>
 800ed22:	4602      	mov	r2, r0
 800ed24:	f107 030c 	add.w	r3, r7, #12
 800ed28:	9301      	str	r3, [sp, #4]
 800ed2a:	9200      	str	r2, [sp, #0]
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	4632      	mov	r2, r6
 800ed30:	4629      	mov	r1, r5
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 fd54 	bl	800f7e0 <xTaskCreate>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d001      	beq.n	800ed42 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	e000      	b.n	800ed44 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800ed42:	68fb      	ldr	r3, [r7, #12]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed4c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b084      	sub	sp, #16
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <osDelay+0x16>
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	e000      	b.n	800ed64 <osDelay+0x18>
 800ed62:	2301      	movs	r3, #1
 800ed64:	4618      	mov	r0, r3
 800ed66:	f000 fe7b 	bl	800fa60 <vTaskDelay>
  
  return osOK;
 800ed6a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b082      	sub	sp, #8
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f000 f9a1 	bl	800f0c4 <xQueueCreateMutex>
 800ed82:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b01      	cmp	r3, #1
 800ed9a:	d110      	bne.n	800edbe <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800ed9c:	2203      	movs	r2, #3
 800ed9e:	2100      	movs	r1, #0
 800eda0:	2001      	movs	r0, #1
 800eda2:	f000 f920 	bl	800efe6 <xQueueGenericCreate>
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d005      	beq.n	800edba <osSemaphoreCreate+0x2e>
 800edae:	2300      	movs	r3, #0
 800edb0:	2200      	movs	r2, #0
 800edb2:	2100      	movs	r1, #0
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 f99d 	bl	800f0f4 <xQueueGenericSend>
    return sema;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	e000      	b.n	800edc0 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800edbe:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3710      	adds	r7, #16
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f103 0208 	add.w	r2, r3, #8
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f04f 32ff 	mov.w	r2, #4294967295
 800ede0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f103 0208 	add.w	r2, r3, #8
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f103 0208 	add.w	r2, r3, #8
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr

0800ee22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee22:	b480      	push	{r7}
 800ee24:	b085      	sub	sp, #20
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	68fa      	ldr	r2, [r7, #12]
 800ee36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	689a      	ldr	r2, [r3, #8]
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	683a      	ldr	r2, [r7, #0]
 800ee46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	1c5a      	adds	r2, r3, #1
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	601a      	str	r2, [r3, #0]
}
 800ee5e:	bf00      	nop
 800ee60:	3714      	adds	r7, #20
 800ee62:	46bd      	mov	sp, r7
 800ee64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee68:	4770      	bx	lr

0800ee6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b085      	sub	sp, #20
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
 800ee72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee80:	d103      	bne.n	800ee8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	691b      	ldr	r3, [r3, #16]
 800ee86:	60fb      	str	r3, [r7, #12]
 800ee88:	e00c      	b.n	800eea4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	3308      	adds	r3, #8
 800ee8e:	60fb      	str	r3, [r7, #12]
 800ee90:	e002      	b.n	800ee98 <vListInsert+0x2e>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68ba      	ldr	r2, [r7, #8]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d2f6      	bcs.n	800ee92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	685a      	ldr	r2, [r3, #4]
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	685b      	ldr	r3, [r3, #4]
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	68fa      	ldr	r2, [r7, #12]
 800eeb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	601a      	str	r2, [r3, #0]
}
 800eed0:	bf00      	nop
 800eed2:	3714      	adds	r7, #20
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr

0800eedc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	6892      	ldr	r2, [r2, #8]
 800eef2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	689b      	ldr	r3, [r3, #8]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	6852      	ldr	r2, [r2, #4]
 800eefc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d103      	bne.n	800ef10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	1e5a      	subs	r2, r3, #1
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr

0800ef30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
 800ef38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d10a      	bne.n	800ef5a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ef44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef48:	f383 8811 	msr	BASEPRI, r3
 800ef4c:	f3bf 8f6f 	isb	sy
 800ef50:	f3bf 8f4f 	dsb	sy
 800ef54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ef56:	bf00      	nop
 800ef58:	e7fe      	b.n	800ef58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ef5a:	f001 fcbb 	bl	80108d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef66:	68f9      	ldr	r1, [r7, #12]
 800ef68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef6a:	fb01 f303 	mul.w	r3, r1, r3
 800ef6e:	441a      	add	r2, r3
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	68f9      	ldr	r1, [r7, #12]
 800ef8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef90:	fb01 f303 	mul.w	r3, r1, r3
 800ef94:	441a      	add	r2, r3
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	22ff      	movs	r2, #255	; 0xff
 800ef9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	22ff      	movs	r2, #255	; 0xff
 800efa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d109      	bne.n	800efc4 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00f      	beq.n	800efd8 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3310      	adds	r3, #16
 800efbc:	4618      	mov	r0, r3
 800efbe:	f000 ff8b 	bl	800fed8 <xTaskRemoveFromEventList>
 800efc2:	e009      	b.n	800efd8 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3310      	adds	r3, #16
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff fefd 	bl	800edc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3324      	adds	r3, #36	; 0x24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fef8 	bl	800edc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800efd8:	f001 fcac 	bl	8010934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800efdc:	2301      	movs	r3, #1
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b08a      	sub	sp, #40	; 0x28
 800efea:	af02      	add	r7, sp, #8
 800efec:	60f8      	str	r0, [r7, #12]
 800efee:	60b9      	str	r1, [r7, #8]
 800eff0:	4613      	mov	r3, r2
 800eff2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d10a      	bne.n	800f010 <xQueueGenericCreate+0x2a>
	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	613b      	str	r3, [r7, #16]
}
 800f00c:	bf00      	nop
 800f00e:	e7fe      	b.n	800f00e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	68ba      	ldr	r2, [r7, #8]
 800f014:	fb02 f303 	mul.w	r3, r2, r3
 800f018:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f01a:	69fb      	ldr	r3, [r7, #28]
 800f01c:	3348      	adds	r3, #72	; 0x48
 800f01e:	4618      	mov	r0, r3
 800f020:	f001 fd7a 	bl	8010b18 <pvPortMalloc>
 800f024:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f026:	69bb      	ldr	r3, [r7, #24]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d00d      	beq.n	800f048 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	3348      	adds	r3, #72	; 0x48
 800f034:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f036:	79fa      	ldrb	r2, [r7, #7]
 800f038:	69bb      	ldr	r3, [r7, #24]
 800f03a:	9300      	str	r3, [sp, #0]
 800f03c:	4613      	mov	r3, r2
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	68b9      	ldr	r1, [r7, #8]
 800f042:	68f8      	ldr	r0, [r7, #12]
 800f044:	f000 f805 	bl	800f052 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f048:	69bb      	ldr	r3, [r7, #24]
	}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3720      	adds	r7, #32
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b084      	sub	sp, #16
 800f056:	af00      	add	r7, sp, #0
 800f058:	60f8      	str	r0, [r7, #12]
 800f05a:	60b9      	str	r1, [r7, #8]
 800f05c:	607a      	str	r2, [r7, #4]
 800f05e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d103      	bne.n	800f06e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	69ba      	ldr	r2, [r7, #24]
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	e002      	b.n	800f074 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f074:	69bb      	ldr	r3, [r7, #24]
 800f076:	68fa      	ldr	r2, [r7, #12]
 800f078:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f080:	2101      	movs	r1, #1
 800f082:	69b8      	ldr	r0, [r7, #24]
 800f084:	f7ff ff54 	bl	800ef30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f088:	bf00      	nop
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00e      	beq.n	800f0bc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	2100      	movs	r1, #0
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 f81c 	bl	800f0f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b086      	sub	sp, #24
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	617b      	str	r3, [r7, #20]
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f0d6:	79fb      	ldrb	r3, [r7, #7]
 800f0d8:	461a      	mov	r2, r3
 800f0da:	6939      	ldr	r1, [r7, #16]
 800f0dc:	6978      	ldr	r0, [r7, #20]
 800f0de:	f7ff ff82 	bl	800efe6 <xQueueGenericCreate>
 800f0e2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f0e4:	68f8      	ldr	r0, [r7, #12]
 800f0e6:	f7ff ffd3 	bl	800f090 <prvInitialiseMutex>

		return xNewQueue;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
	}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08e      	sub	sp, #56	; 0x38
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f102:	2300      	movs	r3, #0
 800f104:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10a      	bne.n	800f126 <xQueueGenericSend+0x32>
	__asm volatile
 800f110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f114:	f383 8811 	msr	BASEPRI, r3
 800f118:	f3bf 8f6f 	isb	sy
 800f11c:	f3bf 8f4f 	dsb	sy
 800f120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f122:	bf00      	nop
 800f124:	e7fe      	b.n	800f124 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d103      	bne.n	800f134 <xQueueGenericSend+0x40>
 800f12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <xQueueGenericSend+0x44>
 800f134:	2301      	movs	r3, #1
 800f136:	e000      	b.n	800f13a <xQueueGenericSend+0x46>
 800f138:	2300      	movs	r3, #0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10a      	bne.n	800f154 <xQueueGenericSend+0x60>
	__asm volatile
 800f13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f142:	f383 8811 	msr	BASEPRI, r3
 800f146:	f3bf 8f6f 	isb	sy
 800f14a:	f3bf 8f4f 	dsb	sy
 800f14e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f150:	bf00      	nop
 800f152:	e7fe      	b.n	800f152 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	2b02      	cmp	r3, #2
 800f158:	d103      	bne.n	800f162 <xQueueGenericSend+0x6e>
 800f15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d101      	bne.n	800f166 <xQueueGenericSend+0x72>
 800f162:	2301      	movs	r3, #1
 800f164:	e000      	b.n	800f168 <xQueueGenericSend+0x74>
 800f166:	2300      	movs	r3, #0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d10a      	bne.n	800f182 <xQueueGenericSend+0x8e>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	623b      	str	r3, [r7, #32]
}
 800f17e:	bf00      	nop
 800f180:	e7fe      	b.n	800f180 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f182:	f001 f855 	bl	8010230 <xTaskGetSchedulerState>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <xQueueGenericSend+0x9e>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d101      	bne.n	800f196 <xQueueGenericSend+0xa2>
 800f192:	2301      	movs	r3, #1
 800f194:	e000      	b.n	800f198 <xQueueGenericSend+0xa4>
 800f196:	2300      	movs	r3, #0
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d10a      	bne.n	800f1b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a0:	f383 8811 	msr	BASEPRI, r3
 800f1a4:	f3bf 8f6f 	isb	sy
 800f1a8:	f3bf 8f4f 	dsb	sy
 800f1ac:	61fb      	str	r3, [r7, #28]
}
 800f1ae:	bf00      	nop
 800f1b0:	e7fe      	b.n	800f1b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f1b2:	f001 fb8f 	bl	80108d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d302      	bcc.n	800f1c8 <xQueueGenericSend+0xd4>
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b02      	cmp	r3, #2
 800f1c6:	d112      	bne.n	800f1ee <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1c8:	683a      	ldr	r2, [r7, #0]
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1ce:	f000 fa1d 	bl	800f60c <prvCopyDataToQueue>
 800f1d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1de:	3324      	adds	r3, #36	; 0x24
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f000 fe79 	bl	800fed8 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f1e6:	f001 fba5 	bl	8010934 <vPortExitCritical>
				return pdPASS;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e062      	b.n	800f2b4 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d103      	bne.n	800f1fc <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f1f4:	f001 fb9e 	bl	8010934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	e05b      	b.n	800f2b4 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d106      	bne.n	800f210 <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f202:	f107 0314 	add.w	r3, r7, #20
 800f206:	4618      	mov	r0, r3
 800f208:	f000 fec8 	bl	800ff9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f20c:	2301      	movs	r3, #1
 800f20e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f210:	f001 fb90 	bl	8010934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f214:	f000 fca8 	bl	800fb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f218:	f001 fb5c 	bl	80108d4 <vPortEnterCritical>
 800f21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f222:	b25b      	sxtb	r3, r3
 800f224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f228:	d103      	bne.n	800f232 <xQueueGenericSend+0x13e>
 800f22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22c:	2200      	movs	r2, #0
 800f22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f238:	b25b      	sxtb	r3, r3
 800f23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f23e:	d103      	bne.n	800f248 <xQueueGenericSend+0x154>
 800f240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f242:	2200      	movs	r2, #0
 800f244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f248:	f001 fb74 	bl	8010934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f24c:	1d3a      	adds	r2, r7, #4
 800f24e:	f107 0314 	add.w	r3, r7, #20
 800f252:	4611      	mov	r1, r2
 800f254:	4618      	mov	r0, r3
 800f256:	f000 feb7 	bl	800ffc8 <xTaskCheckForTimeOut>
 800f25a:	4603      	mov	r3, r0
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d123      	bne.n	800f2a8 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f262:	f000 faa5 	bl	800f7b0 <prvIsQueueFull>
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d017      	beq.n	800f29c <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26e:	3310      	adds	r3, #16
 800f270:	687a      	ldr	r2, [r7, #4]
 800f272:	4611      	mov	r1, r2
 800f274:	4618      	mov	r0, r3
 800f276:	f000 fe0b 	bl	800fe90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f27a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f27c:	f000 fa30 	bl	800f6e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f280:	f000 fc80 	bl	800fb84 <xTaskResumeAll>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	d193      	bne.n	800f1b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f28a:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <xQueueGenericSend+0x1c8>)
 800f28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	f3bf 8f4f 	dsb	sy
 800f296:	f3bf 8f6f 	isb	sy
 800f29a:	e78a      	b.n	800f1b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f29c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f29e:	f000 fa1f 	bl	800f6e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f2a2:	f000 fc6f 	bl	800fb84 <xTaskResumeAll>
 800f2a6:	e784      	b.n	800f1b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f2a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2aa:	f000 fa19 	bl	800f6e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f2ae:	f000 fc69 	bl	800fb84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f2b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3738      	adds	r7, #56	; 0x38
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	e000ed04 	.word	0xe000ed04

0800f2c0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b08e      	sub	sp, #56	; 0x38
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10a      	bne.n	800f2ea <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d8:	f383 8811 	msr	BASEPRI, r3
 800f2dc:	f3bf 8f6f 	isb	sy
 800f2e0:	f3bf 8f4f 	dsb	sy
 800f2e4:	623b      	str	r3, [r7, #32]
}
 800f2e6:	bf00      	nop
 800f2e8:	e7fe      	b.n	800f2e8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00a      	beq.n	800f308 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f6:	f383 8811 	msr	BASEPRI, r3
 800f2fa:	f3bf 8f6f 	isb	sy
 800f2fe:	f3bf 8f4f 	dsb	sy
 800f302:	61fb      	str	r3, [r7, #28]
}
 800f304:	bf00      	nop
 800f306:	e7fe      	b.n	800f306 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d103      	bne.n	800f318 <xQueueGiveFromISR+0x58>
 800f310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d101      	bne.n	800f31c <xQueueGiveFromISR+0x5c>
 800f318:	2301      	movs	r3, #1
 800f31a:	e000      	b.n	800f31e <xQueueGiveFromISR+0x5e>
 800f31c:	2300      	movs	r3, #0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10a      	bne.n	800f338 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	61bb      	str	r3, [r7, #24]
}
 800f334:	bf00      	nop
 800f336:	e7fe      	b.n	800f336 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f338:	f001 fbae 	bl	8010a98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f33c:	f3ef 8211 	mrs	r2, BASEPRI
 800f340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f344:	f383 8811 	msr	BASEPRI, r3
 800f348:	f3bf 8f6f 	isb	sy
 800f34c:	f3bf 8f4f 	dsb	sy
 800f350:	617a      	str	r2, [r7, #20]
 800f352:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f354:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f356:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f35c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f364:	429a      	cmp	r2, r3
 800f366:	d22b      	bcs.n	800f3c0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f36e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	1c5a      	adds	r2, r3, #1
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f37a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f382:	d112      	bne.n	800f3aa <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d016      	beq.n	800f3ba <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	3324      	adds	r3, #36	; 0x24
 800f390:	4618      	mov	r0, r3
 800f392:	f000 fda1 	bl	800fed8 <xTaskRemoveFromEventList>
 800f396:	4603      	mov	r3, r0
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00e      	beq.n	800f3ba <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d00b      	beq.n	800f3ba <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2201      	movs	r2, #1
 800f3a6:	601a      	str	r2, [r3, #0]
 800f3a8:	e007      	b.n	800f3ba <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	b2db      	uxtb	r3, r3
 800f3b2:	b25a      	sxtb	r2, r3
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800f3be:	e001      	b.n	800f3c4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	637b      	str	r3, [r7, #52]	; 0x34
 800f3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f3ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3738      	adds	r7, #56	; 0x38
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
	...

0800f3dc <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08e      	sub	sp, #56	; 0x38
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d10a      	bne.n	800f40e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fc:	f383 8811 	msr	BASEPRI, r3
 800f400:	f3bf 8f6f 	isb	sy
 800f404:	f3bf 8f4f 	dsb	sy
 800f408:	623b      	str	r3, [r7, #32]
}
 800f40a:	bf00      	nop
 800f40c:	e7fe      	b.n	800f40c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00a      	beq.n	800f42c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41a:	f383 8811 	msr	BASEPRI, r3
 800f41e:	f3bf 8f6f 	isb	sy
 800f422:	f3bf 8f4f 	dsb	sy
 800f426:	61fb      	str	r3, [r7, #28]
}
 800f428:	bf00      	nop
 800f42a:	e7fe      	b.n	800f42a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f42c:	f000 ff00 	bl	8010230 <xTaskGetSchedulerState>
 800f430:	4603      	mov	r3, r0
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <xQueueSemaphoreTake+0x60>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <xQueueSemaphoreTake+0x64>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e000      	b.n	800f442 <xQueueSemaphoreTake+0x66>
 800f440:	2300      	movs	r3, #0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10a      	bne.n	800f45c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	61bb      	str	r3, [r7, #24]
}
 800f458:	bf00      	nop
 800f45a:	e7fe      	b.n	800f45a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f45c:	f001 fa3a 	bl	80108d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f464:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d019      	beq.n	800f4a0 <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	1e5a      	subs	r2, r3, #1
 800f470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f472:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f47c:	f001 f880 	bl	8010580 <pvTaskIncrementMutexHeldCount>
 800f480:	4602      	mov	r2, r0
 800f482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f484:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d004      	beq.n	800f498 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f490:	3310      	adds	r3, #16
 800f492:	4618      	mov	r0, r3
 800f494:	f000 fd20 	bl	800fed8 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f498:	f001 fa4c 	bl	8010934 <vPortExitCritical>
				return pdPASS;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e097      	b.n	800f5d0 <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d111      	bne.n	800f4ca <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00a      	beq.n	800f4c2 <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800f4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b0:	f383 8811 	msr	BASEPRI, r3
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	f3bf 8f4f 	dsb	sy
 800f4bc:	617b      	str	r3, [r7, #20]
}
 800f4be:	bf00      	nop
 800f4c0:	e7fe      	b.n	800f4c0 <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f4c2:	f001 fa37 	bl	8010934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	e082      	b.n	800f5d0 <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d106      	bne.n	800f4de <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4d0:	f107 030c 	add.w	r3, r7, #12
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fd61 	bl	800ff9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4de:	f001 fa29 	bl	8010934 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4e2:	f000 fb41 	bl	800fb68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4e6:	f001 f9f5 	bl	80108d4 <vPortEnterCritical>
 800f4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4f0:	b25b      	sxtb	r3, r3
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f6:	d103      	bne.n	800f500 <xQueueSemaphoreTake+0x124>
 800f4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f506:	b25b      	sxtb	r3, r3
 800f508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50c:	d103      	bne.n	800f516 <xQueueSemaphoreTake+0x13a>
 800f50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f510:	2200      	movs	r2, #0
 800f512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f516:	f001 fa0d 	bl	8010934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f51a:	463a      	mov	r2, r7
 800f51c:	f107 030c 	add.w	r3, r7, #12
 800f520:	4611      	mov	r1, r2
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fd50 	bl	800ffc8 <xTaskCheckForTimeOut>
 800f528:	4603      	mov	r3, r0
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d132      	bne.n	800f594 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f530:	f000 f928 	bl	800f784 <prvIsQueueEmpty>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d026      	beq.n	800f588 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d109      	bne.n	800f556 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800f542:	f001 f9c7 	bl	80108d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	4618      	mov	r0, r3
 800f54c:	f000 fe8e 	bl	801026c <xTaskPriorityInherit>
 800f550:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f552:	f001 f9ef 	bl	8010934 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f558:	3324      	adds	r3, #36	; 0x24
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	4611      	mov	r1, r2
 800f55e:	4618      	mov	r0, r3
 800f560:	f000 fc96 	bl	800fe90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f564:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f566:	f000 f8bb 	bl	800f6e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f56a:	f000 fb0b 	bl	800fb84 <xTaskResumeAll>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	f47f af73 	bne.w	800f45c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f576:	4b18      	ldr	r3, [pc, #96]	; (800f5d8 <xQueueSemaphoreTake+0x1fc>)
 800f578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f57c:	601a      	str	r2, [r3, #0]
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	f3bf 8f6f 	isb	sy
 800f586:	e769      	b.n	800f45c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f58a:	f000 f8a9 	bl	800f6e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f58e:	f000 faf9 	bl	800fb84 <xTaskResumeAll>
 800f592:	e763      	b.n	800f45c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f596:	f000 f8a3 	bl	800f6e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f59a:	f000 faf3 	bl	800fb84 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f59e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5a0:	f000 f8f0 	bl	800f784 <prvIsQueueEmpty>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f43f af58 	beq.w	800f45c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00d      	beq.n	800f5ce <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800f5b2:	f001 f98f 	bl	80108d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f5b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f5b8:	f000 f810 	bl	800f5dc <prvGetDisinheritPriorityAfterTimeout>
 800f5bc:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f000 ff4d 	bl	8010464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f5ca:	f001 f9b3 	bl	8010934 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f5ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3738      	adds	r7, #56	; 0x38
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	e000ed04 	.word	0xe000ed04

0800f5dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d006      	beq.n	800f5fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f1c3 0307 	rsb	r3, r3, #7
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	e001      	b.n	800f5fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
	}
 800f600:	4618      	mov	r0, r3
 800f602:	3714      	adds	r7, #20
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr

0800f60c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f618:	2300      	movs	r3, #0
 800f61a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f620:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f626:	2b00      	cmp	r3, #0
 800f628:	d10d      	bne.n	800f646 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d14d      	bne.n	800f6ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	689b      	ldr	r3, [r3, #8]
 800f636:	4618      	mov	r0, r3
 800f638:	f000 fe8e 	bl	8010358 <xTaskPriorityDisinherit>
 800f63c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2200      	movs	r2, #0
 800f642:	609a      	str	r2, [r3, #8]
 800f644:	e043      	b.n	800f6ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d119      	bne.n	800f680 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6858      	ldr	r0, [r3, #4]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f654:	461a      	mov	r2, r3
 800f656:	68b9      	ldr	r1, [r7, #8]
 800f658:	f001 fcf0 	bl	801103c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f664:	441a      	add	r2, r3
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	685a      	ldr	r2, [r3, #4]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	429a      	cmp	r2, r3
 800f674:	d32b      	bcc.n	800f6ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	605a      	str	r2, [r3, #4]
 800f67e:	e026      	b.n	800f6ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68d8      	ldr	r0, [r3, #12]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f688:	461a      	mov	r2, r3
 800f68a:	68b9      	ldr	r1, [r7, #8]
 800f68c:	f001 fcd6 	bl	801103c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	68da      	ldr	r2, [r3, #12]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f698:	425b      	negs	r3, r3
 800f69a:	441a      	add	r2, r3
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68da      	ldr	r2, [r3, #12]
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d207      	bcs.n	800f6bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	689a      	ldr	r2, [r3, #8]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6b4:	425b      	negs	r3, r3
 800f6b6:	441a      	add	r2, r3
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b02      	cmp	r3, #2
 800f6c0:	d105      	bne.n	800f6ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	3b01      	subs	r3, #1
 800f6cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	1c5a      	adds	r2, r3, #1
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f6d6:	697b      	ldr	r3, [r7, #20]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3718      	adds	r7, #24
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f6e8:	f001 f8f4 	bl	80108d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6f4:	e011      	b.n	800f71a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d012      	beq.n	800f724 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	3324      	adds	r3, #36	; 0x24
 800f702:	4618      	mov	r0, r3
 800f704:	f000 fbe8 	bl	800fed8 <xTaskRemoveFromEventList>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f70e:	f000 fccd 	bl	80100ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f712:	7bfb      	ldrb	r3, [r7, #15]
 800f714:	3b01      	subs	r3, #1
 800f716:	b2db      	uxtb	r3, r3
 800f718:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dce9      	bgt.n	800f6f6 <prvUnlockQueue+0x16>
 800f722:	e000      	b.n	800f726 <prvUnlockQueue+0x46>
					break;
 800f724:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	22ff      	movs	r2, #255	; 0xff
 800f72a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f72e:	f001 f901 	bl	8010934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f732:	f001 f8cf 	bl	80108d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f73c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f73e:	e011      	b.n	800f764 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	691b      	ldr	r3, [r3, #16]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d012      	beq.n	800f76e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3310      	adds	r3, #16
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 fbc3 	bl	800fed8 <xTaskRemoveFromEventList>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f758:	f000 fca8 	bl	80100ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f75c:	7bbb      	ldrb	r3, [r7, #14]
 800f75e:	3b01      	subs	r3, #1
 800f760:	b2db      	uxtb	r3, r3
 800f762:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f764:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	dce9      	bgt.n	800f740 <prvUnlockQueue+0x60>
 800f76c:	e000      	b.n	800f770 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f76e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	22ff      	movs	r2, #255	; 0xff
 800f774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f778:	f001 f8dc 	bl	8010934 <vPortExitCritical>
}
 800f77c:	bf00      	nop
 800f77e:	3710      	adds	r7, #16
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f78c:	f001 f8a2 	bl	80108d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f794:	2b00      	cmp	r3, #0
 800f796:	d102      	bne.n	800f79e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f798:	2301      	movs	r3, #1
 800f79a:	60fb      	str	r3, [r7, #12]
 800f79c:	e001      	b.n	800f7a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f7a2:	f001 f8c7 	bl	8010934 <vPortExitCritical>

	return xReturn;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f7b8:	f001 f88c 	bl	80108d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d102      	bne.n	800f7ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	60fb      	str	r3, [r7, #12]
 800f7cc:	e001      	b.n	800f7d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f7d2:	f001 f8af 	bl	8010934 <vPortExitCritical>

	return xReturn;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08c      	sub	sp, #48	; 0x30
 800f7e4:	af04      	add	r7, sp, #16
 800f7e6:	60f8      	str	r0, [r7, #12]
 800f7e8:	60b9      	str	r1, [r7, #8]
 800f7ea:	603b      	str	r3, [r7, #0]
 800f7ec:	4613      	mov	r3, r2
 800f7ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7f0:	88fb      	ldrh	r3, [r7, #6]
 800f7f2:	009b      	lsls	r3, r3, #2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f001 f98f 	bl	8010b18 <pvPortMalloc>
 800f7fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d00e      	beq.n	800f820 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f802:	20a0      	movs	r0, #160	; 0xa0
 800f804:	f001 f988 	bl	8010b18 <pvPortMalloc>
 800f808:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	697a      	ldr	r2, [r7, #20]
 800f814:	631a      	str	r2, [r3, #48]	; 0x30
 800f816:	e005      	b.n	800f824 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f818:	6978      	ldr	r0, [r7, #20]
 800f81a:	f001 fa49 	bl	8010cb0 <vPortFree>
 800f81e:	e001      	b.n	800f824 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f820:	2300      	movs	r3, #0
 800f822:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d013      	beq.n	800f852 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f82a:	88fa      	ldrh	r2, [r7, #6]
 800f82c:	2300      	movs	r3, #0
 800f82e:	9303      	str	r3, [sp, #12]
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	9302      	str	r3, [sp, #8]
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	9301      	str	r3, [sp, #4]
 800f838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f83a:	9300      	str	r3, [sp, #0]
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	68b9      	ldr	r1, [r7, #8]
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f000 f80f 	bl	800f864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f846:	69f8      	ldr	r0, [r7, #28]
 800f848:	f000 f8ae 	bl	800f9a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f84c:	2301      	movs	r3, #1
 800f84e:	61bb      	str	r3, [r7, #24]
 800f850:	e002      	b.n	800f858 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f852:	f04f 33ff 	mov.w	r3, #4294967295
 800f856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f858:	69bb      	ldr	r3, [r7, #24]
	}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3720      	adds	r7, #32
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
	...

0800f864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b088      	sub	sp, #32
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f87c:	3b01      	subs	r3, #1
 800f87e:	009b      	lsls	r3, r3, #2
 800f880:	4413      	add	r3, r2
 800f882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	f023 0307 	bic.w	r3, r3, #7
 800f88a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	f003 0307 	and.w	r3, r3, #7
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00a      	beq.n	800f8ac <prvInitialiseNewTask+0x48>
	__asm volatile
 800f896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89a:	f383 8811 	msr	BASEPRI, r3
 800f89e:	f3bf 8f6f 	isb	sy
 800f8a2:	f3bf 8f4f 	dsb	sy
 800f8a6:	617b      	str	r3, [r7, #20]
}
 800f8a8:	bf00      	nop
 800f8aa:	e7fe      	b.n	800f8aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d01f      	beq.n	800f8f2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	61fb      	str	r3, [r7, #28]
 800f8b6:	e012      	b.n	800f8de <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	4413      	add	r3, r2
 800f8be:	7819      	ldrb	r1, [r3, #0]
 800f8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	3334      	adds	r3, #52	; 0x34
 800f8c8:	460a      	mov	r2, r1
 800f8ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f8cc:	68ba      	ldr	r2, [r7, #8]
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d006      	beq.n	800f8e6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	61fb      	str	r3, [r7, #28]
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	2b0f      	cmp	r3, #15
 800f8e2:	d9e9      	bls.n	800f8b8 <prvInitialiseNewTask+0x54>
 800f8e4:	e000      	b.n	800f8e8 <prvInitialiseNewTask+0x84>
			{
				break;
 800f8e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8f0:	e003      	b.n	800f8fa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	2b06      	cmp	r3, #6
 800f8fe:	d901      	bls.n	800f904 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f900:	2306      	movs	r3, #6
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f90e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f912:	2200      	movs	r2, #0
 800f914:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	3304      	adds	r3, #4
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7ff fa74 	bl	800ee08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f922:	3318      	adds	r3, #24
 800f924:	4618      	mov	r0, r3
 800f926:	f7ff fa6f 	bl	800ee08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f92e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f932:	f1c3 0207 	rsb	r2, r3, #7
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f93e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f942:	2200      	movs	r2, #0
 800f944:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f952:	334c      	adds	r3, #76	; 0x4c
 800f954:	224c      	movs	r2, #76	; 0x4c
 800f956:	2100      	movs	r1, #0
 800f958:	4618      	mov	r0, r3
 800f95a:	f001 fae5 	bl	8010f28 <memset>
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	4a0e      	ldr	r2, [pc, #56]	; (800f99c <prvInitialiseNewTask+0x138>)
 800f962:	651a      	str	r2, [r3, #80]	; 0x50
 800f964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f966:	4a0e      	ldr	r2, [pc, #56]	; (800f9a0 <prvInitialiseNewTask+0x13c>)
 800f968:	655a      	str	r2, [r3, #84]	; 0x54
 800f96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96c:	4a0d      	ldr	r2, [pc, #52]	; (800f9a4 <prvInitialiseNewTask+0x140>)
 800f96e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800f970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f972:	2200      	movs	r2, #0
 800f974:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f978:	683a      	ldr	r2, [r7, #0]
 800f97a:	68f9      	ldr	r1, [r7, #12]
 800f97c:	69b8      	ldr	r0, [r7, #24]
 800f97e:	f000 fe7d 	bl	801067c <pxPortInitialiseStack>
 800f982:	4602      	mov	r2, r0
 800f984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f986:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d002      	beq.n	800f994 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f992:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f994:	bf00      	nop
 800f996:	3720      	adds	r7, #32
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20003ac8 	.word	0x20003ac8
 800f9a0:	20003b30 	.word	0x20003b30
 800f9a4:	20003b98 	.word	0x20003b98

0800f9a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9b0:	f000 ff90 	bl	80108d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9b4:	4b24      	ldr	r3, [pc, #144]	; (800fa48 <prvAddNewTaskToReadyList+0xa0>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	4a23      	ldr	r2, [pc, #140]	; (800fa48 <prvAddNewTaskToReadyList+0xa0>)
 800f9bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9be:	4b23      	ldr	r3, [pc, #140]	; (800fa4c <prvAddNewTaskToReadyList+0xa4>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f9c6:	4a21      	ldr	r2, [pc, #132]	; (800fa4c <prvAddNewTaskToReadyList+0xa4>)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f9cc:	4b1e      	ldr	r3, [pc, #120]	; (800fa48 <prvAddNewTaskToReadyList+0xa0>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d110      	bne.n	800f9f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f9d4:	f000 fb88 	bl	80100e8 <prvInitialiseTaskLists>
 800f9d8:	e00d      	b.n	800f9f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f9da:	4b1d      	ldr	r3, [pc, #116]	; (800fa50 <prvAddNewTaskToReadyList+0xa8>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d109      	bne.n	800f9f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f9e2:	4b1a      	ldr	r3, [pc, #104]	; (800fa4c <prvAddNewTaskToReadyList+0xa4>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d802      	bhi.n	800f9f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f9f0:	4a16      	ldr	r2, [pc, #88]	; (800fa4c <prvAddNewTaskToReadyList+0xa4>)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f9f6:	4b17      	ldr	r3, [pc, #92]	; (800fa54 <prvAddNewTaskToReadyList+0xac>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	4a15      	ldr	r2, [pc, #84]	; (800fa54 <prvAddNewTaskToReadyList+0xac>)
 800f9fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa04:	2201      	movs	r2, #1
 800fa06:	409a      	lsls	r2, r3
 800fa08:	4b13      	ldr	r3, [pc, #76]	; (800fa58 <prvAddNewTaskToReadyList+0xb0>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	4a12      	ldr	r2, [pc, #72]	; (800fa58 <prvAddNewTaskToReadyList+0xb0>)
 800fa10:	6013      	str	r3, [r2, #0]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa16:	4613      	mov	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	4413      	add	r3, r2
 800fa1c:	009b      	lsls	r3, r3, #2
 800fa1e:	4a0f      	ldr	r2, [pc, #60]	; (800fa5c <prvAddNewTaskToReadyList+0xb4>)
 800fa20:	441a      	add	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3304      	adds	r3, #4
 800fa26:	4619      	mov	r1, r3
 800fa28:	4610      	mov	r0, r2
 800fa2a:	f7ff f9fa 	bl	800ee22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa2e:	f000 ff81 	bl	8010934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa32:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <prvAddNewTaskToReadyList+0xa8>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d001      	beq.n	800fa3e <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa3a:	4b04      	ldr	r3, [pc, #16]	; (800fa4c <prvAddNewTaskToReadyList+0xa4>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa3e:	bf00      	nop
 800fa40:	3708      	adds	r7, #8
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd80      	pop	{r7, pc}
 800fa46:	bf00      	nop
 800fa48:	20000a74 	.word	0x20000a74
 800fa4c:	20000974 	.word	0x20000974
 800fa50:	20000a80 	.word	0x20000a80
 800fa54:	20000a90 	.word	0x20000a90
 800fa58:	20000a7c 	.word	0x20000a7c
 800fa5c:	20000978 	.word	0x20000978

0800fa60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d017      	beq.n	800faa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa72:	4b13      	ldr	r3, [pc, #76]	; (800fac0 <vTaskDelay+0x60>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00a      	beq.n	800fa90 <vTaskDelay+0x30>
	__asm volatile
 800fa7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa7e:	f383 8811 	msr	BASEPRI, r3
 800fa82:	f3bf 8f6f 	isb	sy
 800fa86:	f3bf 8f4f 	dsb	sy
 800fa8a:	60bb      	str	r3, [r7, #8]
}
 800fa8c:	bf00      	nop
 800fa8e:	e7fe      	b.n	800fa8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa90:	f000 f86a 	bl	800fb68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa94:	2100      	movs	r1, #0
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fd86 	bl	80105a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa9c:	f000 f872 	bl	800fb84 <xTaskResumeAll>
 800faa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d107      	bne.n	800fab8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800faa8:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <vTaskDelay+0x64>)
 800faaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faae:	601a      	str	r2, [r3, #0]
 800fab0:	f3bf 8f4f 	dsb	sy
 800fab4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fab8:	bf00      	nop
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}
 800fac0:	20000a9c 	.word	0x20000a9c
 800fac4:	e000ed04 	.word	0xe000ed04

0800fac8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800face:	4b1e      	ldr	r3, [pc, #120]	; (800fb48 <vTaskStartScheduler+0x80>)
 800fad0:	9301      	str	r3, [sp, #4]
 800fad2:	2300      	movs	r3, #0
 800fad4:	9300      	str	r3, [sp, #0]
 800fad6:	2300      	movs	r3, #0
 800fad8:	2280      	movs	r2, #128	; 0x80
 800fada:	491c      	ldr	r1, [pc, #112]	; (800fb4c <vTaskStartScheduler+0x84>)
 800fadc:	481c      	ldr	r0, [pc, #112]	; (800fb50 <vTaskStartScheduler+0x88>)
 800fade:	f7ff fe7f 	bl	800f7e0 <xTaskCreate>
 800fae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2b01      	cmp	r3, #1
 800fae8:	d11b      	bne.n	800fb22 <vTaskStartScheduler+0x5a>
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	60bb      	str	r3, [r7, #8]
}
 800fafc:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fafe:	4b15      	ldr	r3, [pc, #84]	; (800fb54 <vTaskStartScheduler+0x8c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	334c      	adds	r3, #76	; 0x4c
 800fb04:	4a14      	ldr	r2, [pc, #80]	; (800fb58 <vTaskStartScheduler+0x90>)
 800fb06:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb08:	4b14      	ldr	r3, [pc, #80]	; (800fb5c <vTaskStartScheduler+0x94>)
 800fb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb10:	4b13      	ldr	r3, [pc, #76]	; (800fb60 <vTaskStartScheduler+0x98>)
 800fb12:	2201      	movs	r2, #1
 800fb14:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb16:	4b13      	ldr	r3, [pc, #76]	; (800fb64 <vTaskStartScheduler+0x9c>)
 800fb18:	2200      	movs	r2, #0
 800fb1a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb1c:	f000 fe38 	bl	8010790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb20:	e00e      	b.n	800fb40 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb28:	d10a      	bne.n	800fb40 <vTaskStartScheduler+0x78>
	__asm volatile
 800fb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2e:	f383 8811 	msr	BASEPRI, r3
 800fb32:	f3bf 8f6f 	isb	sy
 800fb36:	f3bf 8f4f 	dsb	sy
 800fb3a:	607b      	str	r3, [r7, #4]
}
 800fb3c:	bf00      	nop
 800fb3e:	e7fe      	b.n	800fb3e <vTaskStartScheduler+0x76>
}
 800fb40:	bf00      	nop
 800fb42:	3710      	adds	r7, #16
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}
 800fb48:	20000a98 	.word	0x20000a98
 800fb4c:	08012090 	.word	0x08012090
 800fb50:	080100c5 	.word	0x080100c5
 800fb54:	20000974 	.word	0x20000974
 800fb58:	20000060 	.word	0x20000060
 800fb5c:	20000a94 	.word	0x20000a94
 800fb60:	20000a80 	.word	0x20000a80
 800fb64:	20000a78 	.word	0x20000a78

0800fb68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb68:	b480      	push	{r7}
 800fb6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb6c:	4b04      	ldr	r3, [pc, #16]	; (800fb80 <vTaskSuspendAll+0x18>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	3301      	adds	r3, #1
 800fb72:	4a03      	ldr	r2, [pc, #12]	; (800fb80 <vTaskSuspendAll+0x18>)
 800fb74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb76:	bf00      	nop
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	20000a9c 	.word	0x20000a9c

0800fb84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b084      	sub	sp, #16
 800fb88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb8e:	2300      	movs	r3, #0
 800fb90:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb92:	4b3b      	ldr	r3, [pc, #236]	; (800fc80 <xTaskResumeAll+0xfc>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10a      	bne.n	800fbb0 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	f383 8811 	msr	BASEPRI, r3
 800fba2:	f3bf 8f6f 	isb	sy
 800fba6:	f3bf 8f4f 	dsb	sy
 800fbaa:	603b      	str	r3, [r7, #0]
}
 800fbac:	bf00      	nop
 800fbae:	e7fe      	b.n	800fbae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbb0:	f000 fe90 	bl	80108d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbb4:	4b32      	ldr	r3, [pc, #200]	; (800fc80 <xTaskResumeAll+0xfc>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	3b01      	subs	r3, #1
 800fbba:	4a31      	ldr	r2, [pc, #196]	; (800fc80 <xTaskResumeAll+0xfc>)
 800fbbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbbe:	4b30      	ldr	r3, [pc, #192]	; (800fc80 <xTaskResumeAll+0xfc>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d155      	bne.n	800fc72 <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbc6:	4b2f      	ldr	r3, [pc, #188]	; (800fc84 <xTaskResumeAll+0x100>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d051      	beq.n	800fc72 <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbce:	e02e      	b.n	800fc2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbd0:	4b2d      	ldr	r3, [pc, #180]	; (800fc88 <xTaskResumeAll+0x104>)
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	3318      	adds	r3, #24
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7ff f97d 	bl	800eedc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7ff f978 	bl	800eedc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf0:	2201      	movs	r2, #1
 800fbf2:	409a      	lsls	r2, r3
 800fbf4:	4b25      	ldr	r3, [pc, #148]	; (800fc8c <xTaskResumeAll+0x108>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	4313      	orrs	r3, r2
 800fbfa:	4a24      	ldr	r2, [pc, #144]	; (800fc8c <xTaskResumeAll+0x108>)
 800fbfc:	6013      	str	r3, [r2, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc02:	4613      	mov	r3, r2
 800fc04:	009b      	lsls	r3, r3, #2
 800fc06:	4413      	add	r3, r2
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	4a21      	ldr	r2, [pc, #132]	; (800fc90 <xTaskResumeAll+0x10c>)
 800fc0c:	441a      	add	r2, r3
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	3304      	adds	r3, #4
 800fc12:	4619      	mov	r1, r3
 800fc14:	4610      	mov	r0, r2
 800fc16:	f7ff f904 	bl	800ee22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc1e:	4b1d      	ldr	r3, [pc, #116]	; (800fc94 <xTaskResumeAll+0x110>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d302      	bcc.n	800fc2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fc28:	4b1b      	ldr	r3, [pc, #108]	; (800fc98 <xTaskResumeAll+0x114>)
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc2e:	4b16      	ldr	r3, [pc, #88]	; (800fc88 <xTaskResumeAll+0x104>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d1cc      	bne.n	800fbd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc3c:	f000 fad8 	bl	80101f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc40:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <xTaskResumeAll+0x118>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d010      	beq.n	800fc6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc4c:	f000 f828 	bl	800fca0 <xTaskIncrementTick>
 800fc50:	4603      	mov	r3, r0
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d002      	beq.n	800fc5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fc56:	4b10      	ldr	r3, [pc, #64]	; (800fc98 <xTaskResumeAll+0x114>)
 800fc58:	2201      	movs	r2, #1
 800fc5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1f1      	bne.n	800fc4c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fc68:	4b0c      	ldr	r3, [pc, #48]	; (800fc9c <xTaskResumeAll+0x118>)
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc6e:	4b0a      	ldr	r3, [pc, #40]	; (800fc98 <xTaskResumeAll+0x114>)
 800fc70:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc72:	f000 fe5f 	bl	8010934 <vPortExitCritical>

	return xAlreadyYielded;
 800fc76:	687b      	ldr	r3, [r7, #4]
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	20000a9c 	.word	0x20000a9c
 800fc84:	20000a74 	.word	0x20000a74
 800fc88:	20000a34 	.word	0x20000a34
 800fc8c:	20000a7c 	.word	0x20000a7c
 800fc90:	20000978 	.word	0x20000978
 800fc94:	20000974 	.word	0x20000974
 800fc98:	20000a88 	.word	0x20000a88
 800fc9c:	20000a84 	.word	0x20000a84

0800fca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fca6:	2300      	movs	r3, #0
 800fca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcaa:	4b3f      	ldr	r3, [pc, #252]	; (800fda8 <xTaskIncrementTick+0x108>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d16f      	bne.n	800fd92 <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fcb2:	4b3e      	ldr	r3, [pc, #248]	; (800fdac <xTaskIncrementTick+0x10c>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fcba:	4a3c      	ldr	r2, [pc, #240]	; (800fdac <xTaskIncrementTick+0x10c>)
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d120      	bne.n	800fd08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcc6:	4b3a      	ldr	r3, [pc, #232]	; (800fdb0 <xTaskIncrementTick+0x110>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00a      	beq.n	800fce6 <xTaskIncrementTick+0x46>
	__asm volatile
 800fcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcd4:	f383 8811 	msr	BASEPRI, r3
 800fcd8:	f3bf 8f6f 	isb	sy
 800fcdc:	f3bf 8f4f 	dsb	sy
 800fce0:	603b      	str	r3, [r7, #0]
}
 800fce2:	bf00      	nop
 800fce4:	e7fe      	b.n	800fce4 <xTaskIncrementTick+0x44>
 800fce6:	4b32      	ldr	r3, [pc, #200]	; (800fdb0 <xTaskIncrementTick+0x110>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	60fb      	str	r3, [r7, #12]
 800fcec:	4b31      	ldr	r3, [pc, #196]	; (800fdb4 <xTaskIncrementTick+0x114>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4a2f      	ldr	r2, [pc, #188]	; (800fdb0 <xTaskIncrementTick+0x110>)
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	4a2f      	ldr	r2, [pc, #188]	; (800fdb4 <xTaskIncrementTick+0x114>)
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	6013      	str	r3, [r2, #0]
 800fcfa:	4b2f      	ldr	r3, [pc, #188]	; (800fdb8 <xTaskIncrementTick+0x118>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	4a2d      	ldr	r2, [pc, #180]	; (800fdb8 <xTaskIncrementTick+0x118>)
 800fd02:	6013      	str	r3, [r2, #0]
 800fd04:	f000 fa74 	bl	80101f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd08:	4b2c      	ldr	r3, [pc, #176]	; (800fdbc <xTaskIncrementTick+0x11c>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	693a      	ldr	r2, [r7, #16]
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d344      	bcc.n	800fd9c <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd12:	4b27      	ldr	r3, [pc, #156]	; (800fdb0 <xTaskIncrementTick+0x110>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d104      	bne.n	800fd26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd1c:	4b27      	ldr	r3, [pc, #156]	; (800fdbc <xTaskIncrementTick+0x11c>)
 800fd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd22:	601a      	str	r2, [r3, #0]
					break;
 800fd24:	e03a      	b.n	800fd9c <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd26:	4b22      	ldr	r3, [pc, #136]	; (800fdb0 <xTaskIncrementTick+0x110>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	68db      	ldr	r3, [r3, #12]
 800fd2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	685b      	ldr	r3, [r3, #4]
 800fd34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd36:	693a      	ldr	r2, [r7, #16]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d203      	bcs.n	800fd46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd3e:	4a1f      	ldr	r2, [pc, #124]	; (800fdbc <xTaskIncrementTick+0x11c>)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd44:	e02a      	b.n	800fd9c <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	3304      	adds	r3, #4
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f7ff f8c6 	bl	800eedc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d004      	beq.n	800fd62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	3318      	adds	r3, #24
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	f7ff f8bd 	bl	800eedc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd66:	2201      	movs	r2, #1
 800fd68:	409a      	lsls	r2, r3
 800fd6a:	4b15      	ldr	r3, [pc, #84]	; (800fdc0 <xTaskIncrementTick+0x120>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4313      	orrs	r3, r2
 800fd70:	4a13      	ldr	r2, [pc, #76]	; (800fdc0 <xTaskIncrementTick+0x120>)
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd78:	4613      	mov	r3, r2
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	4413      	add	r3, r2
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	4a10      	ldr	r2, [pc, #64]	; (800fdc4 <xTaskIncrementTick+0x124>)
 800fd82:	441a      	add	r2, r3
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	3304      	adds	r3, #4
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4610      	mov	r0, r2
 800fd8c:	f7ff f849 	bl	800ee22 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd90:	e7bf      	b.n	800fd12 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fd92:	4b0d      	ldr	r3, [pc, #52]	; (800fdc8 <xTaskIncrementTick+0x128>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	3301      	adds	r3, #1
 800fd98:	4a0b      	ldr	r2, [pc, #44]	; (800fdc8 <xTaskIncrementTick+0x128>)
 800fd9a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fd9c:	697b      	ldr	r3, [r7, #20]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	20000a9c 	.word	0x20000a9c
 800fdac:	20000a78 	.word	0x20000a78
 800fdb0:	20000a2c 	.word	0x20000a2c
 800fdb4:	20000a30 	.word	0x20000a30
 800fdb8:	20000a8c 	.word	0x20000a8c
 800fdbc:	20000a94 	.word	0x20000a94
 800fdc0:	20000a7c 	.word	0x20000a7c
 800fdc4:	20000978 	.word	0x20000978
 800fdc8:	20000a84 	.word	0x20000a84

0800fdcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b087      	sub	sp, #28
 800fdd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdd2:	4b29      	ldr	r3, [pc, #164]	; (800fe78 <vTaskSwitchContext+0xac>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d003      	beq.n	800fde2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fdda:	4b28      	ldr	r3, [pc, #160]	; (800fe7c <vTaskSwitchContext+0xb0>)
 800fddc:	2201      	movs	r2, #1
 800fdde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fde0:	e044      	b.n	800fe6c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fde2:	4b26      	ldr	r3, [pc, #152]	; (800fe7c <vTaskSwitchContext+0xb0>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fde8:	4b25      	ldr	r3, [pc, #148]	; (800fe80 <vTaskSwitchContext+0xb4>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	fab3 f383 	clz	r3, r3
 800fdf4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fdf6:	7afb      	ldrb	r3, [r7, #11]
 800fdf8:	f1c3 031f 	rsb	r3, r3, #31
 800fdfc:	617b      	str	r3, [r7, #20]
 800fdfe:	4921      	ldr	r1, [pc, #132]	; (800fe84 <vTaskSwitchContext+0xb8>)
 800fe00:	697a      	ldr	r2, [r7, #20]
 800fe02:	4613      	mov	r3, r2
 800fe04:	009b      	lsls	r3, r3, #2
 800fe06:	4413      	add	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	440b      	add	r3, r1
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d10a      	bne.n	800fe28 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fe12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe16:	f383 8811 	msr	BASEPRI, r3
 800fe1a:	f3bf 8f6f 	isb	sy
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	607b      	str	r3, [r7, #4]
}
 800fe24:	bf00      	nop
 800fe26:	e7fe      	b.n	800fe26 <vTaskSwitchContext+0x5a>
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4a14      	ldr	r2, [pc, #80]	; (800fe84 <vTaskSwitchContext+0xb8>)
 800fe34:	4413      	add	r3, r2
 800fe36:	613b      	str	r3, [r7, #16]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	685a      	ldr	r2, [r3, #4]
 800fe3e:	693b      	ldr	r3, [r7, #16]
 800fe40:	605a      	str	r2, [r3, #4]
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	685a      	ldr	r2, [r3, #4]
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	3308      	adds	r3, #8
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d104      	bne.n	800fe58 <vTaskSwitchContext+0x8c>
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	685b      	ldr	r3, [r3, #4]
 800fe52:	685a      	ldr	r2, [r3, #4]
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	605a      	str	r2, [r3, #4]
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	4a0a      	ldr	r2, [pc, #40]	; (800fe88 <vTaskSwitchContext+0xbc>)
 800fe60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fe62:	4b09      	ldr	r3, [pc, #36]	; (800fe88 <vTaskSwitchContext+0xbc>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	334c      	adds	r3, #76	; 0x4c
 800fe68:	4a08      	ldr	r2, [pc, #32]	; (800fe8c <vTaskSwitchContext+0xc0>)
 800fe6a:	6013      	str	r3, [r2, #0]
}
 800fe6c:	bf00      	nop
 800fe6e:	371c      	adds	r7, #28
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr
 800fe78:	20000a9c 	.word	0x20000a9c
 800fe7c:	20000a88 	.word	0x20000a88
 800fe80:	20000a7c 	.word	0x20000a7c
 800fe84:	20000978 	.word	0x20000978
 800fe88:	20000974 	.word	0x20000974
 800fe8c:	20000060 	.word	0x20000060

0800fe90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10a      	bne.n	800feb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	60fb      	str	r3, [r7, #12]
}
 800feb2:	bf00      	nop
 800feb4:	e7fe      	b.n	800feb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800feb6:	4b07      	ldr	r3, [pc, #28]	; (800fed4 <vTaskPlaceOnEventList+0x44>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	3318      	adds	r3, #24
 800febc:	4619      	mov	r1, r3
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7fe ffd3 	bl	800ee6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fec4:	2101      	movs	r1, #1
 800fec6:	6838      	ldr	r0, [r7, #0]
 800fec8:	f000 fb6e 	bl	80105a8 <prvAddCurrentTaskToDelayedList>
}
 800fecc:	bf00      	nop
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	20000974 	.word	0x20000974

0800fed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	68db      	ldr	r3, [r3, #12]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fee8:	693b      	ldr	r3, [r7, #16]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d10a      	bne.n	800ff04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800feee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	60fb      	str	r3, [r7, #12]
}
 800ff00:	bf00      	nop
 800ff02:	e7fe      	b.n	800ff02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	3318      	adds	r3, #24
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fe ffe7 	bl	800eedc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff0e:	4b1d      	ldr	r3, [pc, #116]	; (800ff84 <xTaskRemoveFromEventList+0xac>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d11c      	bne.n	800ff50 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	3304      	adds	r3, #4
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe ffde 	bl	800eedc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff24:	2201      	movs	r2, #1
 800ff26:	409a      	lsls	r2, r3
 800ff28:	4b17      	ldr	r3, [pc, #92]	; (800ff88 <xTaskRemoveFromEventList+0xb0>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	4a16      	ldr	r2, [pc, #88]	; (800ff88 <xTaskRemoveFromEventList+0xb0>)
 800ff30:	6013      	str	r3, [r2, #0]
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff36:	4613      	mov	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	4413      	add	r3, r2
 800ff3c:	009b      	lsls	r3, r3, #2
 800ff3e:	4a13      	ldr	r2, [pc, #76]	; (800ff8c <xTaskRemoveFromEventList+0xb4>)
 800ff40:	441a      	add	r2, r3
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	3304      	adds	r3, #4
 800ff46:	4619      	mov	r1, r3
 800ff48:	4610      	mov	r0, r2
 800ff4a:	f7fe ff6a 	bl	800ee22 <vListInsertEnd>
 800ff4e:	e005      	b.n	800ff5c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	3318      	adds	r3, #24
 800ff54:	4619      	mov	r1, r3
 800ff56:	480e      	ldr	r0, [pc, #56]	; (800ff90 <xTaskRemoveFromEventList+0xb8>)
 800ff58:	f7fe ff63 	bl	800ee22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff60:	4b0c      	ldr	r3, [pc, #48]	; (800ff94 <xTaskRemoveFromEventList+0xbc>)
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d905      	bls.n	800ff76 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ff6e:	4b0a      	ldr	r3, [pc, #40]	; (800ff98 <xTaskRemoveFromEventList+0xc0>)
 800ff70:	2201      	movs	r2, #1
 800ff72:	601a      	str	r2, [r3, #0]
 800ff74:	e001      	b.n	800ff7a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ff76:	2300      	movs	r3, #0
 800ff78:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ff7a:	697b      	ldr	r3, [r7, #20]
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3718      	adds	r7, #24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20000a9c 	.word	0x20000a9c
 800ff88:	20000a7c 	.word	0x20000a7c
 800ff8c:	20000978 	.word	0x20000978
 800ff90:	20000a34 	.word	0x20000a34
 800ff94:	20000974 	.word	0x20000974
 800ff98:	20000a88 	.word	0x20000a88

0800ff9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffa4:	4b06      	ldr	r3, [pc, #24]	; (800ffc0 <vTaskInternalSetTimeOutState+0x24>)
 800ffa6:	681a      	ldr	r2, [r3, #0]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffac:	4b05      	ldr	r3, [pc, #20]	; (800ffc4 <vTaskInternalSetTimeOutState+0x28>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	605a      	str	r2, [r3, #4]
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	20000a8c 	.word	0x20000a8c
 800ffc4:	20000a78 	.word	0x20000a78

0800ffc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d10a      	bne.n	800ffee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ffd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffdc:	f383 8811 	msr	BASEPRI, r3
 800ffe0:	f3bf 8f6f 	isb	sy
 800ffe4:	f3bf 8f4f 	dsb	sy
 800ffe8:	613b      	str	r3, [r7, #16]
}
 800ffea:	bf00      	nop
 800ffec:	e7fe      	b.n	800ffec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d10a      	bne.n	801000a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800fff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff8:	f383 8811 	msr	BASEPRI, r3
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f3bf 8f4f 	dsb	sy
 8010004:	60fb      	str	r3, [r7, #12]
}
 8010006:	bf00      	nop
 8010008:	e7fe      	b.n	8010008 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801000a:	f000 fc63 	bl	80108d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801000e:	4b24      	ldr	r3, [pc, #144]	; (80100a0 <xTaskCheckForTimeOut+0xd8>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	69ba      	ldr	r2, [r7, #24]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 801001e:	4b21      	ldr	r3, [pc, #132]	; (80100a4 <xTaskCheckForTimeOut+0xdc>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010026:	2b00      	cmp	r3, #0
 8010028:	d007      	beq.n	801003a <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 801002a:	4b1e      	ldr	r3, [pc, #120]	; (80100a4 <xTaskCheckForTimeOut+0xdc>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2200      	movs	r2, #0
 8010030:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 8010034:	2301      	movs	r3, #1
 8010036:	61fb      	str	r3, [r7, #28]
 8010038:	e02b      	b.n	8010092 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010042:	d102      	bne.n	801004a <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010044:	2300      	movs	r3, #0
 8010046:	61fb      	str	r3, [r7, #28]
 8010048:	e023      	b.n	8010092 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681a      	ldr	r2, [r3, #0]
 801004e:	4b16      	ldr	r3, [pc, #88]	; (80100a8 <xTaskCheckForTimeOut+0xe0>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	429a      	cmp	r2, r3
 8010054:	d007      	beq.n	8010066 <xTaskCheckForTimeOut+0x9e>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	69ba      	ldr	r2, [r7, #24]
 801005c:	429a      	cmp	r2, r3
 801005e:	d302      	bcc.n	8010066 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010060:	2301      	movs	r3, #1
 8010062:	61fb      	str	r3, [r7, #28]
 8010064:	e015      	b.n	8010092 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	429a      	cmp	r2, r3
 801006e:	d20b      	bcs.n	8010088 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	1ad2      	subs	r2, r2, r3
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f7ff ff8d 	bl	800ff9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010082:	2300      	movs	r3, #0
 8010084:	61fb      	str	r3, [r7, #28]
 8010086:	e004      	b.n	8010092 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2200      	movs	r2, #0
 801008c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801008e:	2301      	movs	r3, #1
 8010090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010092:	f000 fc4f 	bl	8010934 <vPortExitCritical>

	return xReturn;
 8010096:	69fb      	ldr	r3, [r7, #28]
}
 8010098:	4618      	mov	r0, r3
 801009a:	3720      	adds	r7, #32
 801009c:	46bd      	mov	sp, r7
 801009e:	bd80      	pop	{r7, pc}
 80100a0:	20000a78 	.word	0x20000a78
 80100a4:	20000974 	.word	0x20000974
 80100a8:	20000a8c 	.word	0x20000a8c

080100ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100ac:	b480      	push	{r7}
 80100ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100b0:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <vTaskMissedYield+0x14>)
 80100b2:	2201      	movs	r2, #1
 80100b4:	601a      	str	r2, [r3, #0]
}
 80100b6:	bf00      	nop
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	20000a88 	.word	0x20000a88

080100c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80100cc:	f000 f84c 	bl	8010168 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80100d0:	4b04      	ldr	r3, [pc, #16]	; (80100e4 <prvIdleTask+0x20>)
 80100d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d6:	601a      	str	r2, [r3, #0]
 80100d8:	f3bf 8f4f 	dsb	sy
 80100dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80100e0:	e7f4      	b.n	80100cc <prvIdleTask+0x8>
 80100e2:	bf00      	nop
 80100e4:	e000ed04 	.word	0xe000ed04

080100e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80100ee:	2300      	movs	r3, #0
 80100f0:	607b      	str	r3, [r7, #4]
 80100f2:	e00c      	b.n	801010e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80100f4:	687a      	ldr	r2, [r7, #4]
 80100f6:	4613      	mov	r3, r2
 80100f8:	009b      	lsls	r3, r3, #2
 80100fa:	4413      	add	r3, r2
 80100fc:	009b      	lsls	r3, r3, #2
 80100fe:	4a12      	ldr	r2, [pc, #72]	; (8010148 <prvInitialiseTaskLists+0x60>)
 8010100:	4413      	add	r3, r2
 8010102:	4618      	mov	r0, r3
 8010104:	f7fe fe60 	bl	800edc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	3301      	adds	r3, #1
 801010c:	607b      	str	r3, [r7, #4]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	2b06      	cmp	r3, #6
 8010112:	d9ef      	bls.n	80100f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010114:	480d      	ldr	r0, [pc, #52]	; (801014c <prvInitialiseTaskLists+0x64>)
 8010116:	f7fe fe57 	bl	800edc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801011a:	480d      	ldr	r0, [pc, #52]	; (8010150 <prvInitialiseTaskLists+0x68>)
 801011c:	f7fe fe54 	bl	800edc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010120:	480c      	ldr	r0, [pc, #48]	; (8010154 <prvInitialiseTaskLists+0x6c>)
 8010122:	f7fe fe51 	bl	800edc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010126:	480c      	ldr	r0, [pc, #48]	; (8010158 <prvInitialiseTaskLists+0x70>)
 8010128:	f7fe fe4e 	bl	800edc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801012c:	480b      	ldr	r0, [pc, #44]	; (801015c <prvInitialiseTaskLists+0x74>)
 801012e:	f7fe fe4b 	bl	800edc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010132:	4b0b      	ldr	r3, [pc, #44]	; (8010160 <prvInitialiseTaskLists+0x78>)
 8010134:	4a05      	ldr	r2, [pc, #20]	; (801014c <prvInitialiseTaskLists+0x64>)
 8010136:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010138:	4b0a      	ldr	r3, [pc, #40]	; (8010164 <prvInitialiseTaskLists+0x7c>)
 801013a:	4a05      	ldr	r2, [pc, #20]	; (8010150 <prvInitialiseTaskLists+0x68>)
 801013c:	601a      	str	r2, [r3, #0]
}
 801013e:	bf00      	nop
 8010140:	3708      	adds	r7, #8
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}
 8010146:	bf00      	nop
 8010148:	20000978 	.word	0x20000978
 801014c:	20000a04 	.word	0x20000a04
 8010150:	20000a18 	.word	0x20000a18
 8010154:	20000a34 	.word	0x20000a34
 8010158:	20000a48 	.word	0x20000a48
 801015c:	20000a60 	.word	0x20000a60
 8010160:	20000a2c 	.word	0x20000a2c
 8010164:	20000a30 	.word	0x20000a30

08010168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010168:	b580      	push	{r7, lr}
 801016a:	b082      	sub	sp, #8
 801016c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801016e:	e019      	b.n	80101a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010170:	f000 fbb0 	bl	80108d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010174:	4b10      	ldr	r3, [pc, #64]	; (80101b8 <prvCheckTasksWaitingTermination+0x50>)
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	3304      	adds	r3, #4
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe feab 	bl	800eedc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010186:	4b0d      	ldr	r3, [pc, #52]	; (80101bc <prvCheckTasksWaitingTermination+0x54>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	3b01      	subs	r3, #1
 801018c:	4a0b      	ldr	r2, [pc, #44]	; (80101bc <prvCheckTasksWaitingTermination+0x54>)
 801018e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010190:	4b0b      	ldr	r3, [pc, #44]	; (80101c0 <prvCheckTasksWaitingTermination+0x58>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	3b01      	subs	r3, #1
 8010196:	4a0a      	ldr	r2, [pc, #40]	; (80101c0 <prvCheckTasksWaitingTermination+0x58>)
 8010198:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801019a:	f000 fbcb 	bl	8010934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 f810 	bl	80101c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101a4:	4b06      	ldr	r3, [pc, #24]	; (80101c0 <prvCheckTasksWaitingTermination+0x58>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d1e1      	bne.n	8010170 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80101ac:	bf00      	nop
 80101ae:	bf00      	nop
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	20000a48 	.word	0x20000a48
 80101bc:	20000a74 	.word	0x20000a74
 80101c0:	20000a5c 	.word	0x20000a5c

080101c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	334c      	adds	r3, #76	; 0x4c
 80101d0:	4618      	mov	r0, r3
 80101d2:	f000 feb1 	bl	8010f38 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101da:	4618      	mov	r0, r3
 80101dc:	f000 fd68 	bl	8010cb0 <vPortFree>
			vPortFree( pxTCB );
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f000 fd65 	bl	8010cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80101e6:	bf00      	nop
 80101e8:	3708      	adds	r7, #8
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
	...

080101f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101f6:	4b0c      	ldr	r3, [pc, #48]	; (8010228 <prvResetNextTaskUnblockTime+0x38>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d104      	bne.n	801020a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010200:	4b0a      	ldr	r3, [pc, #40]	; (801022c <prvResetNextTaskUnblockTime+0x3c>)
 8010202:	f04f 32ff 	mov.w	r2, #4294967295
 8010206:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010208:	e008      	b.n	801021c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801020a:	4b07      	ldr	r3, [pc, #28]	; (8010228 <prvResetNextTaskUnblockTime+0x38>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	4a04      	ldr	r2, [pc, #16]	; (801022c <prvResetNextTaskUnblockTime+0x3c>)
 801021a:	6013      	str	r3, [r2, #0]
}
 801021c:	bf00      	nop
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr
 8010228:	20000a2c 	.word	0x20000a2c
 801022c:	20000a94 	.word	0x20000a94

08010230 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010236:	4b0b      	ldr	r3, [pc, #44]	; (8010264 <xTaskGetSchedulerState+0x34>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d102      	bne.n	8010244 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801023e:	2301      	movs	r3, #1
 8010240:	607b      	str	r3, [r7, #4]
 8010242:	e008      	b.n	8010256 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010244:	4b08      	ldr	r3, [pc, #32]	; (8010268 <xTaskGetSchedulerState+0x38>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d102      	bne.n	8010252 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801024c:	2302      	movs	r3, #2
 801024e:	607b      	str	r3, [r7, #4]
 8010250:	e001      	b.n	8010256 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010252:	2300      	movs	r3, #0
 8010254:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010256:	687b      	ldr	r3, [r7, #4]
	}
 8010258:	4618      	mov	r0, r3
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr
 8010264:	20000a80 	.word	0x20000a80
 8010268:	20000a9c 	.word	0x20000a9c

0801026c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010278:	2300      	movs	r3, #0
 801027a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d05e      	beq.n	8010340 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010286:	4b31      	ldr	r3, [pc, #196]	; (801034c <xTaskPriorityInherit+0xe0>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028c:	429a      	cmp	r2, r3
 801028e:	d24e      	bcs.n	801032e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	db06      	blt.n	80102a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010298:	4b2c      	ldr	r3, [pc, #176]	; (801034c <xTaskPriorityInherit+0xe0>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801029e:	f1c3 0207 	rsb	r2, r3, #7
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	6959      	ldr	r1, [r3, #20]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ae:	4613      	mov	r3, r2
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	4413      	add	r3, r2
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	4a26      	ldr	r2, [pc, #152]	; (8010350 <xTaskPriorityInherit+0xe4>)
 80102b8:	4413      	add	r3, r2
 80102ba:	4299      	cmp	r1, r3
 80102bc:	d12f      	bne.n	801031e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	3304      	adds	r3, #4
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fe fe0a 	bl	800eedc <uxListRemove>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10a      	bne.n	80102e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d2:	2201      	movs	r2, #1
 80102d4:	fa02 f303 	lsl.w	r3, r2, r3
 80102d8:	43da      	mvns	r2, r3
 80102da:	4b1e      	ldr	r3, [pc, #120]	; (8010354 <xTaskPriorityInherit+0xe8>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4013      	ands	r3, r2
 80102e0:	4a1c      	ldr	r2, [pc, #112]	; (8010354 <xTaskPriorityInherit+0xe8>)
 80102e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102e4:	4b19      	ldr	r3, [pc, #100]	; (801034c <xTaskPriorityInherit+0xe0>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f2:	2201      	movs	r2, #1
 80102f4:	409a      	lsls	r2, r3
 80102f6:	4b17      	ldr	r3, [pc, #92]	; (8010354 <xTaskPriorityInherit+0xe8>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	4a15      	ldr	r2, [pc, #84]	; (8010354 <xTaskPriorityInherit+0xe8>)
 80102fe:	6013      	str	r3, [r2, #0]
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010304:	4613      	mov	r3, r2
 8010306:	009b      	lsls	r3, r3, #2
 8010308:	4413      	add	r3, r2
 801030a:	009b      	lsls	r3, r3, #2
 801030c:	4a10      	ldr	r2, [pc, #64]	; (8010350 <xTaskPriorityInherit+0xe4>)
 801030e:	441a      	add	r2, r3
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	3304      	adds	r3, #4
 8010314:	4619      	mov	r1, r3
 8010316:	4610      	mov	r0, r2
 8010318:	f7fe fd83 	bl	800ee22 <vListInsertEnd>
 801031c:	e004      	b.n	8010328 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801031e:	4b0b      	ldr	r3, [pc, #44]	; (801034c <xTaskPriorityInherit+0xe0>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010328:	2301      	movs	r3, #1
 801032a:	60fb      	str	r3, [r7, #12]
 801032c:	e008      	b.n	8010340 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010332:	4b06      	ldr	r3, [pc, #24]	; (801034c <xTaskPriorityInherit+0xe0>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010338:	429a      	cmp	r2, r3
 801033a:	d201      	bcs.n	8010340 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801033c:	2301      	movs	r3, #1
 801033e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010340:	68fb      	ldr	r3, [r7, #12]
	}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	20000974 	.word	0x20000974
 8010350:	20000978 	.word	0x20000978
 8010354:	20000a7c 	.word	0x20000a7c

08010358 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010364:	2300      	movs	r3, #0
 8010366:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d06e      	beq.n	801044c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801036e:	4b3a      	ldr	r3, [pc, #232]	; (8010458 <xTaskPriorityDisinherit+0x100>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	693a      	ldr	r2, [r7, #16]
 8010374:	429a      	cmp	r2, r3
 8010376:	d00a      	beq.n	801038e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010378:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	60fb      	str	r3, [r7, #12]
}
 801038a:	bf00      	nop
 801038c:	e7fe      	b.n	801038c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010392:	2b00      	cmp	r3, #0
 8010394:	d10a      	bne.n	80103ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039a:	f383 8811 	msr	BASEPRI, r3
 801039e:	f3bf 8f6f 	isb	sy
 80103a2:	f3bf 8f4f 	dsb	sy
 80103a6:	60bb      	str	r3, [r7, #8]
}
 80103a8:	bf00      	nop
 80103aa:	e7fe      	b.n	80103aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103b0:	1e5a      	subs	r2, r3, #1
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103be:	429a      	cmp	r2, r3
 80103c0:	d044      	beq.n	801044c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d140      	bne.n	801044c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	3304      	adds	r3, #4
 80103ce:	4618      	mov	r0, r3
 80103d0:	f7fe fd84 	bl	800eedc <uxListRemove>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d115      	bne.n	8010406 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103de:	491f      	ldr	r1, [pc, #124]	; (801045c <xTaskPriorityDisinherit+0x104>)
 80103e0:	4613      	mov	r3, r2
 80103e2:	009b      	lsls	r3, r3, #2
 80103e4:	4413      	add	r3, r2
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	440b      	add	r3, r1
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d10a      	bne.n	8010406 <xTaskPriorityDisinherit+0xae>
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f4:	2201      	movs	r2, #1
 80103f6:	fa02 f303 	lsl.w	r3, r2, r3
 80103fa:	43da      	mvns	r2, r3
 80103fc:	4b18      	ldr	r3, [pc, #96]	; (8010460 <xTaskPriorityDisinherit+0x108>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	4013      	ands	r3, r2
 8010402:	4a17      	ldr	r2, [pc, #92]	; (8010460 <xTaskPriorityDisinherit+0x108>)
 8010404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010412:	f1c3 0207 	rsb	r2, r3, #7
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041e:	2201      	movs	r2, #1
 8010420:	409a      	lsls	r2, r3
 8010422:	4b0f      	ldr	r3, [pc, #60]	; (8010460 <xTaskPriorityDisinherit+0x108>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	4313      	orrs	r3, r2
 8010428:	4a0d      	ldr	r2, [pc, #52]	; (8010460 <xTaskPriorityDisinherit+0x108>)
 801042a:	6013      	str	r3, [r2, #0]
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010430:	4613      	mov	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4a08      	ldr	r2, [pc, #32]	; (801045c <xTaskPriorityDisinherit+0x104>)
 801043a:	441a      	add	r2, r3
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	3304      	adds	r3, #4
 8010440:	4619      	mov	r1, r3
 8010442:	4610      	mov	r0, r2
 8010444:	f7fe fced 	bl	800ee22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010448:	2301      	movs	r3, #1
 801044a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801044c:	697b      	ldr	r3, [r7, #20]
	}
 801044e:	4618      	mov	r0, r3
 8010450:	3718      	adds	r7, #24
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20000974 	.word	0x20000974
 801045c:	20000978 	.word	0x20000978
 8010460:	20000a7c 	.word	0x20000a7c

08010464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010472:	2301      	movs	r3, #1
 8010474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d077      	beq.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010480:	2b00      	cmp	r3, #0
 8010482:	d10a      	bne.n	801049a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010488:	f383 8811 	msr	BASEPRI, r3
 801048c:	f3bf 8f6f 	isb	sy
 8010490:	f3bf 8f4f 	dsb	sy
 8010494:	60fb      	str	r3, [r7, #12]
}
 8010496:	bf00      	nop
 8010498:	e7fe      	b.n	8010498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801049a:	69bb      	ldr	r3, [r7, #24]
 801049c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d902      	bls.n	80104aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	e002      	b.n	80104b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104aa:	69bb      	ldr	r3, [r7, #24]
 80104ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b4:	69fa      	ldr	r2, [r7, #28]
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d058      	beq.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104be:	697a      	ldr	r2, [r7, #20]
 80104c0:	429a      	cmp	r2, r3
 80104c2:	d153      	bne.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80104c4:	4b2b      	ldr	r3, [pc, #172]	; (8010574 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	69ba      	ldr	r2, [r7, #24]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d10a      	bne.n	80104e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80104ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	60bb      	str	r3, [r7, #8]
}
 80104e0:	bf00      	nop
 80104e2:	e7fe      	b.n	80104e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80104ea:	69bb      	ldr	r3, [r7, #24]
 80104ec:	69fa      	ldr	r2, [r7, #28]
 80104ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	699b      	ldr	r3, [r3, #24]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	db04      	blt.n	8010502 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	f1c3 0207 	rsb	r2, r3, #7
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010502:	69bb      	ldr	r3, [r7, #24]
 8010504:	6959      	ldr	r1, [r3, #20]
 8010506:	693a      	ldr	r2, [r7, #16]
 8010508:	4613      	mov	r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4413      	add	r3, r2
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4a19      	ldr	r2, [pc, #100]	; (8010578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010512:	4413      	add	r3, r2
 8010514:	4299      	cmp	r1, r3
 8010516:	d129      	bne.n	801056c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010518:	69bb      	ldr	r3, [r7, #24]
 801051a:	3304      	adds	r3, #4
 801051c:	4618      	mov	r0, r3
 801051e:	f7fe fcdd 	bl	800eedc <uxListRemove>
 8010522:	4603      	mov	r3, r0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d10a      	bne.n	801053e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801052c:	2201      	movs	r2, #1
 801052e:	fa02 f303 	lsl.w	r3, r2, r3
 8010532:	43da      	mvns	r2, r3
 8010534:	4b11      	ldr	r3, [pc, #68]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	4013      	ands	r3, r2
 801053a:	4a10      	ldr	r2, [pc, #64]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801053c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010542:	2201      	movs	r2, #1
 8010544:	409a      	lsls	r2, r3
 8010546:	4b0d      	ldr	r3, [pc, #52]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4313      	orrs	r3, r2
 801054c:	4a0b      	ldr	r2, [pc, #44]	; (801057c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801054e:	6013      	str	r3, [r2, #0]
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010554:	4613      	mov	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	4a06      	ldr	r2, [pc, #24]	; (8010578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801055e:	441a      	add	r2, r3
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	3304      	adds	r3, #4
 8010564:	4619      	mov	r1, r3
 8010566:	4610      	mov	r0, r2
 8010568:	f7fe fc5b 	bl	800ee22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801056c:	bf00      	nop
 801056e:	3720      	adds	r7, #32
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20000974 	.word	0x20000974
 8010578:	20000978 	.word	0x20000978
 801057c:	20000a7c 	.word	0x20000a7c

08010580 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010584:	4b07      	ldr	r3, [pc, #28]	; (80105a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d004      	beq.n	8010596 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801058c:	4b05      	ldr	r3, [pc, #20]	; (80105a4 <pvTaskIncrementMutexHeldCount+0x24>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010592:	3201      	adds	r2, #1
 8010594:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010596:	4b03      	ldr	r3, [pc, #12]	; (80105a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8010598:	681b      	ldr	r3, [r3, #0]
	}
 801059a:	4618      	mov	r0, r3
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	20000974 	.word	0x20000974

080105a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b084      	sub	sp, #16
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105b2:	4b2b      	ldr	r3, [pc, #172]	; (8010660 <prvAddCurrentTaskToDelayedList+0xb8>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80105b8:	4b2a      	ldr	r3, [pc, #168]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	2200      	movs	r2, #0
 80105be:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105c2:	4b28      	ldr	r3, [pc, #160]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7fe fc87 	bl	800eedc <uxListRemove>
 80105ce:	4603      	mov	r3, r0
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d10b      	bne.n	80105ec <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80105d4:	4b23      	ldr	r3, [pc, #140]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105da:	2201      	movs	r2, #1
 80105dc:	fa02 f303 	lsl.w	r3, r2, r3
 80105e0:	43da      	mvns	r2, r3
 80105e2:	4b21      	ldr	r3, [pc, #132]	; (8010668 <prvAddCurrentTaskToDelayedList+0xc0>)
 80105e4:	681b      	ldr	r3, [r3, #0]
 80105e6:	4013      	ands	r3, r2
 80105e8:	4a1f      	ldr	r2, [pc, #124]	; (8010668 <prvAddCurrentTaskToDelayedList+0xc0>)
 80105ea:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d10a      	bne.n	801060a <prvAddCurrentTaskToDelayedList+0x62>
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d007      	beq.n	801060a <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105fa:	4b1a      	ldr	r3, [pc, #104]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3304      	adds	r3, #4
 8010600:	4619      	mov	r1, r3
 8010602:	481a      	ldr	r0, [pc, #104]	; (801066c <prvAddCurrentTaskToDelayedList+0xc4>)
 8010604:	f7fe fc0d 	bl	800ee22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010608:	e026      	b.n	8010658 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	4413      	add	r3, r2
 8010610:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010612:	4b14      	ldr	r3, [pc, #80]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	68ba      	ldr	r2, [r7, #8]
 8010618:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	d209      	bcs.n	8010636 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010622:	4b13      	ldr	r3, [pc, #76]	; (8010670 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010624:	681a      	ldr	r2, [r3, #0]
 8010626:	4b0f      	ldr	r3, [pc, #60]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	3304      	adds	r3, #4
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fe fc1b 	bl	800ee6a <vListInsert>
}
 8010634:	e010      	b.n	8010658 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010636:	4b0f      	ldr	r3, [pc, #60]	; (8010674 <prvAddCurrentTaskToDelayedList+0xcc>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <prvAddCurrentTaskToDelayedList+0xbc>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3304      	adds	r3, #4
 8010640:	4619      	mov	r1, r3
 8010642:	4610      	mov	r0, r2
 8010644:	f7fe fc11 	bl	800ee6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010648:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <prvAddCurrentTaskToDelayedList+0xd0>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	68ba      	ldr	r2, [r7, #8]
 801064e:	429a      	cmp	r2, r3
 8010650:	d202      	bcs.n	8010658 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8010652:	4a09      	ldr	r2, [pc, #36]	; (8010678 <prvAddCurrentTaskToDelayedList+0xd0>)
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	6013      	str	r3, [r2, #0]
}
 8010658:	bf00      	nop
 801065a:	3710      	adds	r7, #16
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20000a78 	.word	0x20000a78
 8010664:	20000974 	.word	0x20000974
 8010668:	20000a7c 	.word	0x20000a7c
 801066c:	20000a60 	.word	0x20000a60
 8010670:	20000a30 	.word	0x20000a30
 8010674:	20000a2c 	.word	0x20000a2c
 8010678:	20000a94 	.word	0x20000a94

0801067c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3b04      	subs	r3, #4
 801068c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	3b04      	subs	r3, #4
 801069a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f023 0201 	bic.w	r2, r3, #1
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	3b04      	subs	r3, #4
 80106aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106ac:	4a0c      	ldr	r2, [pc, #48]	; (80106e0 <pxPortInitialiseStack+0x64>)
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3b14      	subs	r3, #20
 80106b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80106b8:	687a      	ldr	r2, [r7, #4]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	3b04      	subs	r3, #4
 80106c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f06f 0202 	mvn.w	r2, #2
 80106ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	3b20      	subs	r3, #32
 80106d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80106d2:	68fb      	ldr	r3, [r7, #12]
}
 80106d4:	4618      	mov	r0, r3
 80106d6:	3714      	adds	r7, #20
 80106d8:	46bd      	mov	sp, r7
 80106da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106de:	4770      	bx	lr
 80106e0:	080106e5 	.word	0x080106e5

080106e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80106ea:	2300      	movs	r3, #0
 80106ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80106ee:	4b12      	ldr	r3, [pc, #72]	; (8010738 <prvTaskExitError+0x54>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f6:	d00a      	beq.n	801070e <prvTaskExitError+0x2a>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	f383 8811 	msr	BASEPRI, r3
 8010700:	f3bf 8f6f 	isb	sy
 8010704:	f3bf 8f4f 	dsb	sy
 8010708:	60fb      	str	r3, [r7, #12]
}
 801070a:	bf00      	nop
 801070c:	e7fe      	b.n	801070c <prvTaskExitError+0x28>
	__asm volatile
 801070e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010712:	f383 8811 	msr	BASEPRI, r3
 8010716:	f3bf 8f6f 	isb	sy
 801071a:	f3bf 8f4f 	dsb	sy
 801071e:	60bb      	str	r3, [r7, #8]
}
 8010720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010722:	bf00      	nop
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d0fc      	beq.n	8010724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801072a:	bf00      	nop
 801072c:	bf00      	nop
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr
 8010738:	20000010 	.word	0x20000010
 801073c:	00000000 	.word	0x00000000

08010740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010740:	4b07      	ldr	r3, [pc, #28]	; (8010760 <pxCurrentTCBConst2>)
 8010742:	6819      	ldr	r1, [r3, #0]
 8010744:	6808      	ldr	r0, [r1, #0]
 8010746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801074a:	f380 8809 	msr	PSP, r0
 801074e:	f3bf 8f6f 	isb	sy
 8010752:	f04f 0000 	mov.w	r0, #0
 8010756:	f380 8811 	msr	BASEPRI, r0
 801075a:	4770      	bx	lr
 801075c:	f3af 8000 	nop.w

08010760 <pxCurrentTCBConst2>:
 8010760:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010768:	4808      	ldr	r0, [pc, #32]	; (801078c <prvPortStartFirstTask+0x24>)
 801076a:	6800      	ldr	r0, [r0, #0]
 801076c:	6800      	ldr	r0, [r0, #0]
 801076e:	f380 8808 	msr	MSP, r0
 8010772:	f04f 0000 	mov.w	r0, #0
 8010776:	f380 8814 	msr	CONTROL, r0
 801077a:	b662      	cpsie	i
 801077c:	b661      	cpsie	f
 801077e:	f3bf 8f4f 	dsb	sy
 8010782:	f3bf 8f6f 	isb	sy
 8010786:	df00      	svc	0
 8010788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801078a:	bf00      	nop
 801078c:	e000ed08 	.word	0xe000ed08

08010790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b086      	sub	sp, #24
 8010794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010796:	4b46      	ldr	r3, [pc, #280]	; (80108b0 <xPortStartScheduler+0x120>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	4a46      	ldr	r2, [pc, #280]	; (80108b4 <xPortStartScheduler+0x124>)
 801079c:	4293      	cmp	r3, r2
 801079e:	d10a      	bne.n	80107b6 <xPortStartScheduler+0x26>
	__asm volatile
 80107a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a4:	f383 8811 	msr	BASEPRI, r3
 80107a8:	f3bf 8f6f 	isb	sy
 80107ac:	f3bf 8f4f 	dsb	sy
 80107b0:	613b      	str	r3, [r7, #16]
}
 80107b2:	bf00      	nop
 80107b4:	e7fe      	b.n	80107b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80107b6:	4b3e      	ldr	r3, [pc, #248]	; (80108b0 <xPortStartScheduler+0x120>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4a3f      	ldr	r2, [pc, #252]	; (80108b8 <xPortStartScheduler+0x128>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d10a      	bne.n	80107d6 <xPortStartScheduler+0x46>
	__asm volatile
 80107c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	60fb      	str	r3, [r7, #12]
}
 80107d2:	bf00      	nop
 80107d4:	e7fe      	b.n	80107d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80107d6:	4b39      	ldr	r3, [pc, #228]	; (80108bc <xPortStartScheduler+0x12c>)
 80107d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	22ff      	movs	r2, #255	; 0xff
 80107e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	781b      	ldrb	r3, [r3, #0]
 80107ec:	b2db      	uxtb	r3, r3
 80107ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80107f0:	78fb      	ldrb	r3, [r7, #3]
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80107f8:	b2da      	uxtb	r2, r3
 80107fa:	4b31      	ldr	r3, [pc, #196]	; (80108c0 <xPortStartScheduler+0x130>)
 80107fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80107fe:	4b31      	ldr	r3, [pc, #196]	; (80108c4 <xPortStartScheduler+0x134>)
 8010800:	2207      	movs	r2, #7
 8010802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010804:	e009      	b.n	801081a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010806:	4b2f      	ldr	r3, [pc, #188]	; (80108c4 <xPortStartScheduler+0x134>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	3b01      	subs	r3, #1
 801080c:	4a2d      	ldr	r2, [pc, #180]	; (80108c4 <xPortStartScheduler+0x134>)
 801080e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010810:	78fb      	ldrb	r3, [r7, #3]
 8010812:	b2db      	uxtb	r3, r3
 8010814:	005b      	lsls	r3, r3, #1
 8010816:	b2db      	uxtb	r3, r3
 8010818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801081a:	78fb      	ldrb	r3, [r7, #3]
 801081c:	b2db      	uxtb	r3, r3
 801081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010822:	2b80      	cmp	r3, #128	; 0x80
 8010824:	d0ef      	beq.n	8010806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010826:	4b27      	ldr	r3, [pc, #156]	; (80108c4 <xPortStartScheduler+0x134>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f1c3 0307 	rsb	r3, r3, #7
 801082e:	2b04      	cmp	r3, #4
 8010830:	d00a      	beq.n	8010848 <xPortStartScheduler+0xb8>
	__asm volatile
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	f383 8811 	msr	BASEPRI, r3
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	60bb      	str	r3, [r7, #8]
}
 8010844:	bf00      	nop
 8010846:	e7fe      	b.n	8010846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010848:	4b1e      	ldr	r3, [pc, #120]	; (80108c4 <xPortStartScheduler+0x134>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	021b      	lsls	r3, r3, #8
 801084e:	4a1d      	ldr	r2, [pc, #116]	; (80108c4 <xPortStartScheduler+0x134>)
 8010850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010852:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <xPortStartScheduler+0x134>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801085a:	4a1a      	ldr	r2, [pc, #104]	; (80108c4 <xPortStartScheduler+0x134>)
 801085c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	b2da      	uxtb	r2, r3
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010866:	4b18      	ldr	r3, [pc, #96]	; (80108c8 <xPortStartScheduler+0x138>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4a17      	ldr	r2, [pc, #92]	; (80108c8 <xPortStartScheduler+0x138>)
 801086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010872:	4b15      	ldr	r3, [pc, #84]	; (80108c8 <xPortStartScheduler+0x138>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	4a14      	ldr	r2, [pc, #80]	; (80108c8 <xPortStartScheduler+0x138>)
 8010878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801087c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801087e:	f000 f8dd 	bl	8010a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010882:	4b12      	ldr	r3, [pc, #72]	; (80108cc <xPortStartScheduler+0x13c>)
 8010884:	2200      	movs	r2, #0
 8010886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010888:	f000 f8fc 	bl	8010a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801088c:	4b10      	ldr	r3, [pc, #64]	; (80108d0 <xPortStartScheduler+0x140>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a0f      	ldr	r2, [pc, #60]	; (80108d0 <xPortStartScheduler+0x140>)
 8010892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010898:	f7ff ff66 	bl	8010768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801089c:	f7ff fa96 	bl	800fdcc <vTaskSwitchContext>
	prvTaskExitError();
 80108a0:	f7ff ff20 	bl	80106e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	e000ed00 	.word	0xe000ed00
 80108b4:	410fc271 	.word	0x410fc271
 80108b8:	410fc270 	.word	0x410fc270
 80108bc:	e000e400 	.word	0xe000e400
 80108c0:	20000aa0 	.word	0x20000aa0
 80108c4:	20000aa4 	.word	0x20000aa4
 80108c8:	e000ed20 	.word	0xe000ed20
 80108cc:	20000010 	.word	0x20000010
 80108d0:	e000ef34 	.word	0xe000ef34

080108d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80108d4:	b480      	push	{r7}
 80108d6:	b083      	sub	sp, #12
 80108d8:	af00      	add	r7, sp, #0
	__asm volatile
 80108da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108de:	f383 8811 	msr	BASEPRI, r3
 80108e2:	f3bf 8f6f 	isb	sy
 80108e6:	f3bf 8f4f 	dsb	sy
 80108ea:	607b      	str	r3, [r7, #4]
}
 80108ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80108ee:	4b0f      	ldr	r3, [pc, #60]	; (801092c <vPortEnterCritical+0x58>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3301      	adds	r3, #1
 80108f4:	4a0d      	ldr	r2, [pc, #52]	; (801092c <vPortEnterCritical+0x58>)
 80108f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80108f8:	4b0c      	ldr	r3, [pc, #48]	; (801092c <vPortEnterCritical+0x58>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	d10f      	bne.n	8010920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010900:	4b0b      	ldr	r3, [pc, #44]	; (8010930 <vPortEnterCritical+0x5c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00a      	beq.n	8010920 <vPortEnterCritical+0x4c>
	__asm volatile
 801090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	603b      	str	r3, [r7, #0]
}
 801091c:	bf00      	nop
 801091e:	e7fe      	b.n	801091e <vPortEnterCritical+0x4a>
	}
}
 8010920:	bf00      	nop
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	20000010 	.word	0x20000010
 8010930:	e000ed04 	.word	0xe000ed04

08010934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010934:	b480      	push	{r7}
 8010936:	b083      	sub	sp, #12
 8010938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801093a:	4b12      	ldr	r3, [pc, #72]	; (8010984 <vPortExitCritical+0x50>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10a      	bne.n	8010958 <vPortExitCritical+0x24>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	607b      	str	r3, [r7, #4]
}
 8010954:	bf00      	nop
 8010956:	e7fe      	b.n	8010956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010958:	4b0a      	ldr	r3, [pc, #40]	; (8010984 <vPortExitCritical+0x50>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	3b01      	subs	r3, #1
 801095e:	4a09      	ldr	r2, [pc, #36]	; (8010984 <vPortExitCritical+0x50>)
 8010960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010962:	4b08      	ldr	r3, [pc, #32]	; (8010984 <vPortExitCritical+0x50>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d105      	bne.n	8010976 <vPortExitCritical+0x42>
 801096a:	2300      	movs	r3, #0
 801096c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	f383 8811 	msr	BASEPRI, r3
}
 8010974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010976:	bf00      	nop
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop
 8010984:	20000010 	.word	0x20000010
	...

08010990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010990:	f3ef 8009 	mrs	r0, PSP
 8010994:	f3bf 8f6f 	isb	sy
 8010998:	4b15      	ldr	r3, [pc, #84]	; (80109f0 <pxCurrentTCBConst>)
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	f01e 0f10 	tst.w	lr, #16
 80109a0:	bf08      	it	eq
 80109a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109aa:	6010      	str	r0, [r2, #0]
 80109ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80109b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80109b4:	f380 8811 	msr	BASEPRI, r0
 80109b8:	f3bf 8f4f 	dsb	sy
 80109bc:	f3bf 8f6f 	isb	sy
 80109c0:	f7ff fa04 	bl	800fdcc <vTaskSwitchContext>
 80109c4:	f04f 0000 	mov.w	r0, #0
 80109c8:	f380 8811 	msr	BASEPRI, r0
 80109cc:	bc09      	pop	{r0, r3}
 80109ce:	6819      	ldr	r1, [r3, #0]
 80109d0:	6808      	ldr	r0, [r1, #0]
 80109d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109d6:	f01e 0f10 	tst.w	lr, #16
 80109da:	bf08      	it	eq
 80109dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80109e0:	f380 8809 	msr	PSP, r0
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	f3af 8000 	nop.w

080109f0 <pxCurrentTCBConst>:
 80109f0:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80109f4:	bf00      	nop
 80109f6:	bf00      	nop

080109f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
	__asm volatile
 80109fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a02:	f383 8811 	msr	BASEPRI, r3
 8010a06:	f3bf 8f6f 	isb	sy
 8010a0a:	f3bf 8f4f 	dsb	sy
 8010a0e:	607b      	str	r3, [r7, #4]
}
 8010a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a12:	f7ff f945 	bl	800fca0 <xTaskIncrementTick>
 8010a16:	4603      	mov	r3, r0
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a1c:	4b06      	ldr	r3, [pc, #24]	; (8010a38 <SysTick_Handler+0x40>)
 8010a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a22:	601a      	str	r2, [r3, #0]
 8010a24:	2300      	movs	r3, #0
 8010a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	f383 8811 	msr	BASEPRI, r3
}
 8010a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a30:	bf00      	nop
 8010a32:	3708      	adds	r7, #8
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	e000ed04 	.word	0xe000ed04

08010a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a40:	4b0b      	ldr	r3, [pc, #44]	; (8010a70 <vPortSetupTimerInterrupt+0x34>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a46:	4b0b      	ldr	r3, [pc, #44]	; (8010a74 <vPortSetupTimerInterrupt+0x38>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a4c:	4b0a      	ldr	r3, [pc, #40]	; (8010a78 <vPortSetupTimerInterrupt+0x3c>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4a0a      	ldr	r2, [pc, #40]	; (8010a7c <vPortSetupTimerInterrupt+0x40>)
 8010a52:	fba2 2303 	umull	r2, r3, r2, r3
 8010a56:	099b      	lsrs	r3, r3, #6
 8010a58:	4a09      	ldr	r2, [pc, #36]	; (8010a80 <vPortSetupTimerInterrupt+0x44>)
 8010a5a:	3b01      	subs	r3, #1
 8010a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010a5e:	4b04      	ldr	r3, [pc, #16]	; (8010a70 <vPortSetupTimerInterrupt+0x34>)
 8010a60:	2207      	movs	r2, #7
 8010a62:	601a      	str	r2, [r3, #0]
}
 8010a64:	bf00      	nop
 8010a66:	46bd      	mov	sp, r7
 8010a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6c:	4770      	bx	lr
 8010a6e:	bf00      	nop
 8010a70:	e000e010 	.word	0xe000e010
 8010a74:	e000e018 	.word	0xe000e018
 8010a78:	20000004 	.word	0x20000004
 8010a7c:	10624dd3 	.word	0x10624dd3
 8010a80:	e000e014 	.word	0xe000e014

08010a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a94 <vPortEnableVFP+0x10>
 8010a88:	6801      	ldr	r1, [r0, #0]
 8010a8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a8e:	6001      	str	r1, [r0, #0]
 8010a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a92:	bf00      	nop
 8010a94:	e000ed88 	.word	0xe000ed88

08010a98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010a9e:	f3ef 8305 	mrs	r3, IPSR
 8010aa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2b0f      	cmp	r3, #15
 8010aa8:	d914      	bls.n	8010ad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010aaa:	4a17      	ldr	r2, [pc, #92]	; (8010b08 <vPortValidateInterruptPriority+0x70>)
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	4413      	add	r3, r2
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ab4:	4b15      	ldr	r3, [pc, #84]	; (8010b0c <vPortValidateInterruptPriority+0x74>)
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	7afa      	ldrb	r2, [r7, #11]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d20a      	bcs.n	8010ad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	607b      	str	r3, [r7, #4]
}
 8010ad0:	bf00      	nop
 8010ad2:	e7fe      	b.n	8010ad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010ad4:	4b0e      	ldr	r3, [pc, #56]	; (8010b10 <vPortValidateInterruptPriority+0x78>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010adc:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <vPortValidateInterruptPriority+0x7c>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d90a      	bls.n	8010afa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	603b      	str	r3, [r7, #0]
}
 8010af6:	bf00      	nop
 8010af8:	e7fe      	b.n	8010af8 <vPortValidateInterruptPriority+0x60>
	}
 8010afa:	bf00      	nop
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
 8010b06:	bf00      	nop
 8010b08:	e000e3f0 	.word	0xe000e3f0
 8010b0c:	20000aa0 	.word	0x20000aa0
 8010b10:	e000ed0c 	.word	0xe000ed0c
 8010b14:	20000aa4 	.word	0x20000aa4

08010b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b08a      	sub	sp, #40	; 0x28
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b20:	2300      	movs	r3, #0
 8010b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b24:	f7ff f820 	bl	800fb68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b28:	4b5b      	ldr	r3, [pc, #364]	; (8010c98 <pvPortMalloc+0x180>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b30:	f000 f920 	bl	8010d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b34:	4b59      	ldr	r3, [pc, #356]	; (8010c9c <pvPortMalloc+0x184>)
 8010b36:	681a      	ldr	r2, [r3, #0]
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4013      	ands	r3, r2
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	f040 8093 	bne.w	8010c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d01d      	beq.n	8010b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010b48:	2208      	movs	r2, #8
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4413      	add	r3, r2
 8010b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f003 0307 	and.w	r3, r3, #7
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d014      	beq.n	8010b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f023 0307 	bic.w	r3, r3, #7
 8010b60:	3308      	adds	r3, #8
 8010b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f003 0307 	and.w	r3, r3, #7
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00a      	beq.n	8010b84 <pvPortMalloc+0x6c>
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	617b      	str	r3, [r7, #20]
}
 8010b80:	bf00      	nop
 8010b82:	e7fe      	b.n	8010b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d06e      	beq.n	8010c68 <pvPortMalloc+0x150>
 8010b8a:	4b45      	ldr	r3, [pc, #276]	; (8010ca0 <pvPortMalloc+0x188>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d869      	bhi.n	8010c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b94:	4b43      	ldr	r3, [pc, #268]	; (8010ca4 <pvPortMalloc+0x18c>)
 8010b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b98:	4b42      	ldr	r3, [pc, #264]	; (8010ca4 <pvPortMalloc+0x18c>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b9e:	e004      	b.n	8010baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bac:	685b      	ldr	r3, [r3, #4]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	d903      	bls.n	8010bbc <pvPortMalloc+0xa4>
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1f1      	bne.n	8010ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010bbc:	4b36      	ldr	r3, [pc, #216]	; (8010c98 <pvPortMalloc+0x180>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d050      	beq.n	8010c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010bc6:	6a3b      	ldr	r3, [r7, #32]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2208      	movs	r2, #8
 8010bcc:	4413      	add	r3, r2
 8010bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd2:	681a      	ldr	r2, [r3, #0]
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	685a      	ldr	r2, [r3, #4]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	1ad2      	subs	r2, r2, r3
 8010be0:	2308      	movs	r3, #8
 8010be2:	005b      	lsls	r3, r3, #1
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d91f      	bls.n	8010c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4413      	add	r3, r2
 8010bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	f003 0307 	and.w	r3, r3, #7
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00a      	beq.n	8010c10 <pvPortMalloc+0xf8>
	__asm volatile
 8010bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfe:	f383 8811 	msr	BASEPRI, r3
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	f3bf 8f4f 	dsb	sy
 8010c0a:	613b      	str	r3, [r7, #16]
}
 8010c0c:	bf00      	nop
 8010c0e:	e7fe      	b.n	8010c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	685a      	ldr	r2, [r3, #4]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	1ad2      	subs	r2, r2, r3
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c22:	69b8      	ldr	r0, [r7, #24]
 8010c24:	f000 f908 	bl	8010e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c28:	4b1d      	ldr	r3, [pc, #116]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	4a1b      	ldr	r2, [pc, #108]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c36:	4b1a      	ldr	r3, [pc, #104]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	4b1b      	ldr	r3, [pc, #108]	; (8010ca8 <pvPortMalloc+0x190>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d203      	bcs.n	8010c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c42:	4b17      	ldr	r3, [pc, #92]	; (8010ca0 <pvPortMalloc+0x188>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4a18      	ldr	r2, [pc, #96]	; (8010ca8 <pvPortMalloc+0x190>)
 8010c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	685a      	ldr	r2, [r3, #4]
 8010c4e:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <pvPortMalloc+0x184>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	431a      	orrs	r2, r3
 8010c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010c5e:	4b13      	ldr	r3, [pc, #76]	; (8010cac <pvPortMalloc+0x194>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3301      	adds	r3, #1
 8010c64:	4a11      	ldr	r2, [pc, #68]	; (8010cac <pvPortMalloc+0x194>)
 8010c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010c68:	f7fe ff8c 	bl	800fb84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	f003 0307 	and.w	r3, r3, #7
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00a      	beq.n	8010c8c <pvPortMalloc+0x174>
	__asm volatile
 8010c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7a:	f383 8811 	msr	BASEPRI, r3
 8010c7e:	f3bf 8f6f 	isb	sy
 8010c82:	f3bf 8f4f 	dsb	sy
 8010c86:	60fb      	str	r3, [r7, #12]
}
 8010c88:	bf00      	nop
 8010c8a:	e7fe      	b.n	8010c8a <pvPortMalloc+0x172>
	return pvReturn;
 8010c8c:	69fb      	ldr	r3, [r7, #28]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3728      	adds	r7, #40	; 0x28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	20003ab0 	.word	0x20003ab0
 8010c9c:	20003ac4 	.word	0x20003ac4
 8010ca0:	20003ab4 	.word	0x20003ab4
 8010ca4:	20003aa8 	.word	0x20003aa8
 8010ca8:	20003ab8 	.word	0x20003ab8
 8010cac:	20003abc 	.word	0x20003abc

08010cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d04d      	beq.n	8010d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010cc2:	2308      	movs	r3, #8
 8010cc4:	425b      	negs	r3, r3
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	4413      	add	r3, r2
 8010cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	685a      	ldr	r2, [r3, #4]
 8010cd4:	4b24      	ldr	r3, [pc, #144]	; (8010d68 <vPortFree+0xb8>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	4013      	ands	r3, r2
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10a      	bne.n	8010cf4 <vPortFree+0x44>
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	60fb      	str	r3, [r7, #12]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <vPortFree+0x62>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	f383 8811 	msr	BASEPRI, r3
 8010d04:	f3bf 8f6f 	isb	sy
 8010d08:	f3bf 8f4f 	dsb	sy
 8010d0c:	60bb      	str	r3, [r7, #8]
}
 8010d0e:	bf00      	nop
 8010d10:	e7fe      	b.n	8010d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	4b14      	ldr	r3, [pc, #80]	; (8010d68 <vPortFree+0xb8>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	4013      	ands	r3, r2
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d01e      	beq.n	8010d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d11a      	bne.n	8010d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <vPortFree+0xb8>)
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	43db      	mvns	r3, r3
 8010d32:	401a      	ands	r2, r3
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d38:	f7fe ff16 	bl	800fb68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	685a      	ldr	r2, [r3, #4]
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <vPortFree+0xbc>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <vPortFree+0xbc>)
 8010d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d4a:	6938      	ldr	r0, [r7, #16]
 8010d4c:	f000 f874 	bl	8010e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010d50:	4b07      	ldr	r3, [pc, #28]	; (8010d70 <vPortFree+0xc0>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3301      	adds	r3, #1
 8010d56:	4a06      	ldr	r2, [pc, #24]	; (8010d70 <vPortFree+0xc0>)
 8010d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010d5a:	f7fe ff13 	bl	800fb84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010d5e:	bf00      	nop
 8010d60:	3718      	adds	r7, #24
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	20003ac4 	.word	0x20003ac4
 8010d6c:	20003ab4 	.word	0x20003ab4
 8010d70:	20003ac0 	.word	0x20003ac0

08010d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d7a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8010d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d80:	4b27      	ldr	r3, [pc, #156]	; (8010e20 <prvHeapInit+0xac>)
 8010d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f003 0307 	and.w	r3, r3, #7
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00c      	beq.n	8010da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	3307      	adds	r3, #7
 8010d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	f023 0307 	bic.w	r3, r3, #7
 8010d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	4a1f      	ldr	r2, [pc, #124]	; (8010e20 <prvHeapInit+0xac>)
 8010da4:	4413      	add	r3, r2
 8010da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dac:	4a1d      	ldr	r2, [pc, #116]	; (8010e24 <prvHeapInit+0xb0>)
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010db2:	4b1c      	ldr	r3, [pc, #112]	; (8010e24 <prvHeapInit+0xb0>)
 8010db4:	2200      	movs	r2, #0
 8010db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	68ba      	ldr	r2, [r7, #8]
 8010dbc:	4413      	add	r3, r2
 8010dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010dc0:	2208      	movs	r2, #8
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	1a9b      	subs	r3, r3, r2
 8010dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f023 0307 	bic.w	r3, r3, #7
 8010dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	4a15      	ldr	r2, [pc, #84]	; (8010e28 <prvHeapInit+0xb4>)
 8010dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010dd6:	4b14      	ldr	r3, [pc, #80]	; (8010e28 <prvHeapInit+0xb4>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010dde:	4b12      	ldr	r3, [pc, #72]	; (8010e28 <prvHeapInit+0xb4>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	1ad2      	subs	r2, r2, r3
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010df4:	4b0c      	ldr	r3, [pc, #48]	; (8010e28 <prvHeapInit+0xb4>)
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4a0a      	ldr	r2, [pc, #40]	; (8010e2c <prvHeapInit+0xb8>)
 8010e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	4a09      	ldr	r2, [pc, #36]	; (8010e30 <prvHeapInit+0xbc>)
 8010e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e0c:	4b09      	ldr	r3, [pc, #36]	; (8010e34 <prvHeapInit+0xc0>)
 8010e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e12:	601a      	str	r2, [r3, #0]
}
 8010e14:	bf00      	nop
 8010e16:	3714      	adds	r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr
 8010e20:	20000aa8 	.word	0x20000aa8
 8010e24:	20003aa8 	.word	0x20003aa8
 8010e28:	20003ab0 	.word	0x20003ab0
 8010e2c:	20003ab8 	.word	0x20003ab8
 8010e30:	20003ab4 	.word	0x20003ab4
 8010e34:	20003ac4 	.word	0x20003ac4

08010e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e40:	4b28      	ldr	r3, [pc, #160]	; (8010ee4 <prvInsertBlockIntoFreeList+0xac>)
 8010e42:	60fb      	str	r3, [r7, #12]
 8010e44:	e002      	b.n	8010e4c <prvInsertBlockIntoFreeList+0x14>
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	60fb      	str	r3, [r7, #12]
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	429a      	cmp	r2, r3
 8010e54:	d8f7      	bhi.n	8010e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	4413      	add	r3, r2
 8010e62:	687a      	ldr	r2, [r7, #4]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d108      	bne.n	8010e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	441a      	add	r2, r3
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	68ba      	ldr	r2, [r7, #8]
 8010e84:	441a      	add	r2, r3
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d118      	bne.n	8010ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	4b15      	ldr	r3, [pc, #84]	; (8010ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d00d      	beq.n	8010eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	441a      	add	r2, r3
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	601a      	str	r2, [r3, #0]
 8010eb4:	e008      	b.n	8010ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010eb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8010eb8:	681a      	ldr	r2, [r3, #0]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	601a      	str	r2, [r3, #0]
 8010ebe:	e003      	b.n	8010ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d002      	beq.n	8010ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	687a      	ldr	r2, [r7, #4]
 8010ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ed6:	bf00      	nop
 8010ed8:	3714      	adds	r7, #20
 8010eda:	46bd      	mov	sp, r7
 8010edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee0:	4770      	bx	lr
 8010ee2:	bf00      	nop
 8010ee4:	20003aa8 	.word	0x20003aa8
 8010ee8:	20003ab0 	.word	0x20003ab0

08010eec <arm_pid_init_f32>:
 8010eec:	edd0 6a08 	vldr	s13, [r0, #32]
 8010ef0:	edd0 7a06 	vldr	s15, [r0, #24]
 8010ef4:	ed90 7a07 	vldr	s14, [r0, #28]
 8010ef8:	edc0 6a02 	vstr	s13, [r0, #8]
 8010efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f00:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8010f04:	eef1 7a67 	vneg.f32	s15, s15
 8010f08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010f0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010f10:	ed80 7a00 	vstr	s14, [r0]
 8010f14:	edc0 7a01 	vstr	s15, [r0, #4]
 8010f18:	b901      	cbnz	r1, 8010f1c <arm_pid_init_f32+0x30>
 8010f1a:	4770      	bx	lr
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	60c3      	str	r3, [r0, #12]
 8010f20:	6103      	str	r3, [r0, #16]
 8010f22:	6143      	str	r3, [r0, #20]
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop

08010f28 <memset>:
 8010f28:	4402      	add	r2, r0
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d100      	bne.n	8010f32 <memset+0xa>
 8010f30:	4770      	bx	lr
 8010f32:	f803 1b01 	strb.w	r1, [r3], #1
 8010f36:	e7f9      	b.n	8010f2c <memset+0x4>

08010f38 <_reclaim_reent>:
 8010f38:	4b29      	ldr	r3, [pc, #164]	; (8010fe0 <_reclaim_reent+0xa8>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	4283      	cmp	r3, r0
 8010f3e:	b570      	push	{r4, r5, r6, lr}
 8010f40:	4604      	mov	r4, r0
 8010f42:	d04b      	beq.n	8010fdc <_reclaim_reent+0xa4>
 8010f44:	69c3      	ldr	r3, [r0, #28]
 8010f46:	b143      	cbz	r3, 8010f5a <_reclaim_reent+0x22>
 8010f48:	68db      	ldr	r3, [r3, #12]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d144      	bne.n	8010fd8 <_reclaim_reent+0xa0>
 8010f4e:	69e3      	ldr	r3, [r4, #28]
 8010f50:	6819      	ldr	r1, [r3, #0]
 8010f52:	b111      	cbz	r1, 8010f5a <_reclaim_reent+0x22>
 8010f54:	4620      	mov	r0, r4
 8010f56:	f000 f87f 	bl	8011058 <_free_r>
 8010f5a:	6961      	ldr	r1, [r4, #20]
 8010f5c:	b111      	cbz	r1, 8010f64 <_reclaim_reent+0x2c>
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 f87a 	bl	8011058 <_free_r>
 8010f64:	69e1      	ldr	r1, [r4, #28]
 8010f66:	b111      	cbz	r1, 8010f6e <_reclaim_reent+0x36>
 8010f68:	4620      	mov	r0, r4
 8010f6a:	f000 f875 	bl	8011058 <_free_r>
 8010f6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f70:	b111      	cbz	r1, 8010f78 <_reclaim_reent+0x40>
 8010f72:	4620      	mov	r0, r4
 8010f74:	f000 f870 	bl	8011058 <_free_r>
 8010f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f7a:	b111      	cbz	r1, 8010f82 <_reclaim_reent+0x4a>
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	f000 f86b 	bl	8011058 <_free_r>
 8010f82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f84:	b111      	cbz	r1, 8010f8c <_reclaim_reent+0x54>
 8010f86:	4620      	mov	r0, r4
 8010f88:	f000 f866 	bl	8011058 <_free_r>
 8010f8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010f8e:	b111      	cbz	r1, 8010f96 <_reclaim_reent+0x5e>
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 f861 	bl	8011058 <_free_r>
 8010f96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8010f98:	b111      	cbz	r1, 8010fa0 <_reclaim_reent+0x68>
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f000 f85c 	bl	8011058 <_free_r>
 8010fa0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010fa2:	b111      	cbz	r1, 8010faa <_reclaim_reent+0x72>
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	f000 f857 	bl	8011058 <_free_r>
 8010faa:	6a23      	ldr	r3, [r4, #32]
 8010fac:	b1b3      	cbz	r3, 8010fdc <_reclaim_reent+0xa4>
 8010fae:	4620      	mov	r0, r4
 8010fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fb4:	4718      	bx	r3
 8010fb6:	5949      	ldr	r1, [r1, r5]
 8010fb8:	b941      	cbnz	r1, 8010fcc <_reclaim_reent+0x94>
 8010fba:	3504      	adds	r5, #4
 8010fbc:	69e3      	ldr	r3, [r4, #28]
 8010fbe:	2d80      	cmp	r5, #128	; 0x80
 8010fc0:	68d9      	ldr	r1, [r3, #12]
 8010fc2:	d1f8      	bne.n	8010fb6 <_reclaim_reent+0x7e>
 8010fc4:	4620      	mov	r0, r4
 8010fc6:	f000 f847 	bl	8011058 <_free_r>
 8010fca:	e7c0      	b.n	8010f4e <_reclaim_reent+0x16>
 8010fcc:	680e      	ldr	r6, [r1, #0]
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f000 f842 	bl	8011058 <_free_r>
 8010fd4:	4631      	mov	r1, r6
 8010fd6:	e7ef      	b.n	8010fb8 <_reclaim_reent+0x80>
 8010fd8:	2500      	movs	r5, #0
 8010fda:	e7ef      	b.n	8010fbc <_reclaim_reent+0x84>
 8010fdc:	bd70      	pop	{r4, r5, r6, pc}
 8010fde:	bf00      	nop
 8010fe0:	20000060 	.word	0x20000060

08010fe4 <__errno>:
 8010fe4:	4b01      	ldr	r3, [pc, #4]	; (8010fec <__errno+0x8>)
 8010fe6:	6818      	ldr	r0, [r3, #0]
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	20000060 	.word	0x20000060

08010ff0 <__libc_init_array>:
 8010ff0:	b570      	push	{r4, r5, r6, lr}
 8010ff2:	4d0d      	ldr	r5, [pc, #52]	; (8011028 <__libc_init_array+0x38>)
 8010ff4:	4c0d      	ldr	r4, [pc, #52]	; (801102c <__libc_init_array+0x3c>)
 8010ff6:	1b64      	subs	r4, r4, r5
 8010ff8:	10a4      	asrs	r4, r4, #2
 8010ffa:	2600      	movs	r6, #0
 8010ffc:	42a6      	cmp	r6, r4
 8010ffe:	d109      	bne.n	8011014 <__libc_init_array+0x24>
 8011000:	4d0b      	ldr	r5, [pc, #44]	; (8011030 <__libc_init_array+0x40>)
 8011002:	4c0c      	ldr	r4, [pc, #48]	; (8011034 <__libc_init_array+0x44>)
 8011004:	f000 ffb8 	bl	8011f78 <_init>
 8011008:	1b64      	subs	r4, r4, r5
 801100a:	10a4      	asrs	r4, r4, #2
 801100c:	2600      	movs	r6, #0
 801100e:	42a6      	cmp	r6, r4
 8011010:	d105      	bne.n	801101e <__libc_init_array+0x2e>
 8011012:	bd70      	pop	{r4, r5, r6, pc}
 8011014:	f855 3b04 	ldr.w	r3, [r5], #4
 8011018:	4798      	blx	r3
 801101a:	3601      	adds	r6, #1
 801101c:	e7ee      	b.n	8010ffc <__libc_init_array+0xc>
 801101e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011022:	4798      	blx	r3
 8011024:	3601      	adds	r6, #1
 8011026:	e7f2      	b.n	801100e <__libc_init_array+0x1e>
 8011028:	08012110 	.word	0x08012110
 801102c:	08012110 	.word	0x08012110
 8011030:	08012110 	.word	0x08012110
 8011034:	08012114 	.word	0x08012114

08011038 <__retarget_lock_acquire_recursive>:
 8011038:	4770      	bx	lr

0801103a <__retarget_lock_release_recursive>:
 801103a:	4770      	bx	lr

0801103c <memcpy>:
 801103c:	440a      	add	r2, r1
 801103e:	4291      	cmp	r1, r2
 8011040:	f100 33ff 	add.w	r3, r0, #4294967295
 8011044:	d100      	bne.n	8011048 <memcpy+0xc>
 8011046:	4770      	bx	lr
 8011048:	b510      	push	{r4, lr}
 801104a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801104e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011052:	4291      	cmp	r1, r2
 8011054:	d1f9      	bne.n	801104a <memcpy+0xe>
 8011056:	bd10      	pop	{r4, pc}

08011058 <_free_r>:
 8011058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801105a:	2900      	cmp	r1, #0
 801105c:	d044      	beq.n	80110e8 <_free_r+0x90>
 801105e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011062:	9001      	str	r0, [sp, #4]
 8011064:	2b00      	cmp	r3, #0
 8011066:	f1a1 0404 	sub.w	r4, r1, #4
 801106a:	bfb8      	it	lt
 801106c:	18e4      	addlt	r4, r4, r3
 801106e:	f000 f83f 	bl	80110f0 <__malloc_lock>
 8011072:	4a1e      	ldr	r2, [pc, #120]	; (80110ec <_free_r+0x94>)
 8011074:	9801      	ldr	r0, [sp, #4]
 8011076:	6813      	ldr	r3, [r2, #0]
 8011078:	b933      	cbnz	r3, 8011088 <_free_r+0x30>
 801107a:	6063      	str	r3, [r4, #4]
 801107c:	6014      	str	r4, [r2, #0]
 801107e:	b003      	add	sp, #12
 8011080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011084:	f000 b83a 	b.w	80110fc <__malloc_unlock>
 8011088:	42a3      	cmp	r3, r4
 801108a:	d908      	bls.n	801109e <_free_r+0x46>
 801108c:	6825      	ldr	r5, [r4, #0]
 801108e:	1961      	adds	r1, r4, r5
 8011090:	428b      	cmp	r3, r1
 8011092:	bf01      	itttt	eq
 8011094:	6819      	ldreq	r1, [r3, #0]
 8011096:	685b      	ldreq	r3, [r3, #4]
 8011098:	1949      	addeq	r1, r1, r5
 801109a:	6021      	streq	r1, [r4, #0]
 801109c:	e7ed      	b.n	801107a <_free_r+0x22>
 801109e:	461a      	mov	r2, r3
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	b10b      	cbz	r3, 80110a8 <_free_r+0x50>
 80110a4:	42a3      	cmp	r3, r4
 80110a6:	d9fa      	bls.n	801109e <_free_r+0x46>
 80110a8:	6811      	ldr	r1, [r2, #0]
 80110aa:	1855      	adds	r5, r2, r1
 80110ac:	42a5      	cmp	r5, r4
 80110ae:	d10b      	bne.n	80110c8 <_free_r+0x70>
 80110b0:	6824      	ldr	r4, [r4, #0]
 80110b2:	4421      	add	r1, r4
 80110b4:	1854      	adds	r4, r2, r1
 80110b6:	42a3      	cmp	r3, r4
 80110b8:	6011      	str	r1, [r2, #0]
 80110ba:	d1e0      	bne.n	801107e <_free_r+0x26>
 80110bc:	681c      	ldr	r4, [r3, #0]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	6053      	str	r3, [r2, #4]
 80110c2:	440c      	add	r4, r1
 80110c4:	6014      	str	r4, [r2, #0]
 80110c6:	e7da      	b.n	801107e <_free_r+0x26>
 80110c8:	d902      	bls.n	80110d0 <_free_r+0x78>
 80110ca:	230c      	movs	r3, #12
 80110cc:	6003      	str	r3, [r0, #0]
 80110ce:	e7d6      	b.n	801107e <_free_r+0x26>
 80110d0:	6825      	ldr	r5, [r4, #0]
 80110d2:	1961      	adds	r1, r4, r5
 80110d4:	428b      	cmp	r3, r1
 80110d6:	bf04      	itt	eq
 80110d8:	6819      	ldreq	r1, [r3, #0]
 80110da:	685b      	ldreq	r3, [r3, #4]
 80110dc:	6063      	str	r3, [r4, #4]
 80110de:	bf04      	itt	eq
 80110e0:	1949      	addeq	r1, r1, r5
 80110e2:	6021      	streq	r1, [r4, #0]
 80110e4:	6054      	str	r4, [r2, #4]
 80110e6:	e7ca      	b.n	801107e <_free_r+0x26>
 80110e8:	b003      	add	sp, #12
 80110ea:	bd30      	pop	{r4, r5, pc}
 80110ec:	20003c04 	.word	0x20003c04

080110f0 <__malloc_lock>:
 80110f0:	4801      	ldr	r0, [pc, #4]	; (80110f8 <__malloc_lock+0x8>)
 80110f2:	f7ff bfa1 	b.w	8011038 <__retarget_lock_acquire_recursive>
 80110f6:	bf00      	nop
 80110f8:	20003c00 	.word	0x20003c00

080110fc <__malloc_unlock>:
 80110fc:	4801      	ldr	r0, [pc, #4]	; (8011104 <__malloc_unlock+0x8>)
 80110fe:	f7ff bf9c 	b.w	801103a <__retarget_lock_release_recursive>
 8011102:	bf00      	nop
 8011104:	20003c00 	.word	0x20003c00

08011108 <pow>:
 8011108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110a:	ed2d 8b02 	vpush	{d8}
 801110e:	eeb0 8a40 	vmov.f32	s16, s0
 8011112:	eef0 8a60 	vmov.f32	s17, s1
 8011116:	ec55 4b11 	vmov	r4, r5, d1
 801111a:	f000 f871 	bl	8011200 <__ieee754_pow>
 801111e:	4622      	mov	r2, r4
 8011120:	462b      	mov	r3, r5
 8011122:	4620      	mov	r0, r4
 8011124:	4629      	mov	r1, r5
 8011126:	ec57 6b10 	vmov	r6, r7, d0
 801112a:	f7f3 fcd9 	bl	8004ae0 <__aeabi_dcmpun>
 801112e:	2800      	cmp	r0, #0
 8011130:	d13b      	bne.n	80111aa <pow+0xa2>
 8011132:	ec51 0b18 	vmov	r0, r1, d8
 8011136:	2200      	movs	r2, #0
 8011138:	2300      	movs	r3, #0
 801113a:	f7f3 fc9f 	bl	8004a7c <__aeabi_dcmpeq>
 801113e:	b1b8      	cbz	r0, 8011170 <pow+0x68>
 8011140:	2200      	movs	r2, #0
 8011142:	2300      	movs	r3, #0
 8011144:	4620      	mov	r0, r4
 8011146:	4629      	mov	r1, r5
 8011148:	f7f3 fc98 	bl	8004a7c <__aeabi_dcmpeq>
 801114c:	2800      	cmp	r0, #0
 801114e:	d146      	bne.n	80111de <pow+0xd6>
 8011150:	ec45 4b10 	vmov	d0, r4, r5
 8011154:	f000 f848 	bl	80111e8 <finite>
 8011158:	b338      	cbz	r0, 80111aa <pow+0xa2>
 801115a:	2200      	movs	r2, #0
 801115c:	2300      	movs	r3, #0
 801115e:	4620      	mov	r0, r4
 8011160:	4629      	mov	r1, r5
 8011162:	f7f3 fc95 	bl	8004a90 <__aeabi_dcmplt>
 8011166:	b300      	cbz	r0, 80111aa <pow+0xa2>
 8011168:	f7ff ff3c 	bl	8010fe4 <__errno>
 801116c:	2322      	movs	r3, #34	; 0x22
 801116e:	e01b      	b.n	80111a8 <pow+0xa0>
 8011170:	ec47 6b10 	vmov	d0, r6, r7
 8011174:	f000 f838 	bl	80111e8 <finite>
 8011178:	b9e0      	cbnz	r0, 80111b4 <pow+0xac>
 801117a:	eeb0 0a48 	vmov.f32	s0, s16
 801117e:	eef0 0a68 	vmov.f32	s1, s17
 8011182:	f000 f831 	bl	80111e8 <finite>
 8011186:	b1a8      	cbz	r0, 80111b4 <pow+0xac>
 8011188:	ec45 4b10 	vmov	d0, r4, r5
 801118c:	f000 f82c 	bl	80111e8 <finite>
 8011190:	b180      	cbz	r0, 80111b4 <pow+0xac>
 8011192:	4632      	mov	r2, r6
 8011194:	463b      	mov	r3, r7
 8011196:	4630      	mov	r0, r6
 8011198:	4639      	mov	r1, r7
 801119a:	f7f3 fca1 	bl	8004ae0 <__aeabi_dcmpun>
 801119e:	2800      	cmp	r0, #0
 80111a0:	d0e2      	beq.n	8011168 <pow+0x60>
 80111a2:	f7ff ff1f 	bl	8010fe4 <__errno>
 80111a6:	2321      	movs	r3, #33	; 0x21
 80111a8:	6003      	str	r3, [r0, #0]
 80111aa:	ecbd 8b02 	vpop	{d8}
 80111ae:	ec47 6b10 	vmov	d0, r6, r7
 80111b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111b4:	2200      	movs	r2, #0
 80111b6:	2300      	movs	r3, #0
 80111b8:	4630      	mov	r0, r6
 80111ba:	4639      	mov	r1, r7
 80111bc:	f7f3 fc5e 	bl	8004a7c <__aeabi_dcmpeq>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d0f2      	beq.n	80111aa <pow+0xa2>
 80111c4:	eeb0 0a48 	vmov.f32	s0, s16
 80111c8:	eef0 0a68 	vmov.f32	s1, s17
 80111cc:	f000 f80c 	bl	80111e8 <finite>
 80111d0:	2800      	cmp	r0, #0
 80111d2:	d0ea      	beq.n	80111aa <pow+0xa2>
 80111d4:	ec45 4b10 	vmov	d0, r4, r5
 80111d8:	f000 f806 	bl	80111e8 <finite>
 80111dc:	e7c3      	b.n	8011166 <pow+0x5e>
 80111de:	4f01      	ldr	r7, [pc, #4]	; (80111e4 <pow+0xdc>)
 80111e0:	2600      	movs	r6, #0
 80111e2:	e7e2      	b.n	80111aa <pow+0xa2>
 80111e4:	3ff00000 	.word	0x3ff00000

080111e8 <finite>:
 80111e8:	b082      	sub	sp, #8
 80111ea:	ed8d 0b00 	vstr	d0, [sp]
 80111ee:	9801      	ldr	r0, [sp, #4]
 80111f0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80111f4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80111f8:	0fc0      	lsrs	r0, r0, #31
 80111fa:	b002      	add	sp, #8
 80111fc:	4770      	bx	lr
	...

08011200 <__ieee754_pow>:
 8011200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011204:	ed2d 8b06 	vpush	{d8-d10}
 8011208:	b089      	sub	sp, #36	; 0x24
 801120a:	ed8d 1b00 	vstr	d1, [sp]
 801120e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011216:	ea58 0102 	orrs.w	r1, r8, r2
 801121a:	ec57 6b10 	vmov	r6, r7, d0
 801121e:	d115      	bne.n	801124c <__ieee754_pow+0x4c>
 8011220:	19b3      	adds	r3, r6, r6
 8011222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011226:	4152      	adcs	r2, r2
 8011228:	4299      	cmp	r1, r3
 801122a:	4b89      	ldr	r3, [pc, #548]	; (8011450 <__ieee754_pow+0x250>)
 801122c:	4193      	sbcs	r3, r2
 801122e:	f080 84d1 	bcs.w	8011bd4 <__ieee754_pow+0x9d4>
 8011232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011236:	4630      	mov	r0, r6
 8011238:	4639      	mov	r1, r7
 801123a:	f7f3 f801 	bl	8004240 <__adddf3>
 801123e:	ec41 0b10 	vmov	d0, r0, r1
 8011242:	b009      	add	sp, #36	; 0x24
 8011244:	ecbd 8b06 	vpop	{d8-d10}
 8011248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124c:	4b81      	ldr	r3, [pc, #516]	; (8011454 <__ieee754_pow+0x254>)
 801124e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011252:	429c      	cmp	r4, r3
 8011254:	ee10 aa10 	vmov	sl, s0
 8011258:	463d      	mov	r5, r7
 801125a:	dc06      	bgt.n	801126a <__ieee754_pow+0x6a>
 801125c:	d101      	bne.n	8011262 <__ieee754_pow+0x62>
 801125e:	2e00      	cmp	r6, #0
 8011260:	d1e7      	bne.n	8011232 <__ieee754_pow+0x32>
 8011262:	4598      	cmp	r8, r3
 8011264:	dc01      	bgt.n	801126a <__ieee754_pow+0x6a>
 8011266:	d10f      	bne.n	8011288 <__ieee754_pow+0x88>
 8011268:	b172      	cbz	r2, 8011288 <__ieee754_pow+0x88>
 801126a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801126e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8011272:	ea55 050a 	orrs.w	r5, r5, sl
 8011276:	d1dc      	bne.n	8011232 <__ieee754_pow+0x32>
 8011278:	e9dd 3200 	ldrd	r3, r2, [sp]
 801127c:	18db      	adds	r3, r3, r3
 801127e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8011282:	4152      	adcs	r2, r2
 8011284:	429d      	cmp	r5, r3
 8011286:	e7d0      	b.n	801122a <__ieee754_pow+0x2a>
 8011288:	2d00      	cmp	r5, #0
 801128a:	da3b      	bge.n	8011304 <__ieee754_pow+0x104>
 801128c:	4b72      	ldr	r3, [pc, #456]	; (8011458 <__ieee754_pow+0x258>)
 801128e:	4598      	cmp	r8, r3
 8011290:	dc51      	bgt.n	8011336 <__ieee754_pow+0x136>
 8011292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011296:	4598      	cmp	r8, r3
 8011298:	f340 84ab 	ble.w	8011bf2 <__ieee754_pow+0x9f2>
 801129c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80112a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80112a4:	2b14      	cmp	r3, #20
 80112a6:	dd0f      	ble.n	80112c8 <__ieee754_pow+0xc8>
 80112a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80112ac:	fa22 f103 	lsr.w	r1, r2, r3
 80112b0:	fa01 f303 	lsl.w	r3, r1, r3
 80112b4:	4293      	cmp	r3, r2
 80112b6:	f040 849c 	bne.w	8011bf2 <__ieee754_pow+0x9f2>
 80112ba:	f001 0101 	and.w	r1, r1, #1
 80112be:	f1c1 0302 	rsb	r3, r1, #2
 80112c2:	9304      	str	r3, [sp, #16]
 80112c4:	b182      	cbz	r2, 80112e8 <__ieee754_pow+0xe8>
 80112c6:	e05f      	b.n	8011388 <__ieee754_pow+0x188>
 80112c8:	2a00      	cmp	r2, #0
 80112ca:	d15b      	bne.n	8011384 <__ieee754_pow+0x184>
 80112cc:	f1c3 0314 	rsb	r3, r3, #20
 80112d0:	fa48 f103 	asr.w	r1, r8, r3
 80112d4:	fa01 f303 	lsl.w	r3, r1, r3
 80112d8:	4543      	cmp	r3, r8
 80112da:	f040 8487 	bne.w	8011bec <__ieee754_pow+0x9ec>
 80112de:	f001 0101 	and.w	r1, r1, #1
 80112e2:	f1c1 0302 	rsb	r3, r1, #2
 80112e6:	9304      	str	r3, [sp, #16]
 80112e8:	4b5c      	ldr	r3, [pc, #368]	; (801145c <__ieee754_pow+0x25c>)
 80112ea:	4598      	cmp	r8, r3
 80112ec:	d132      	bne.n	8011354 <__ieee754_pow+0x154>
 80112ee:	f1b9 0f00 	cmp.w	r9, #0
 80112f2:	f280 8477 	bge.w	8011be4 <__ieee754_pow+0x9e4>
 80112f6:	4959      	ldr	r1, [pc, #356]	; (801145c <__ieee754_pow+0x25c>)
 80112f8:	4632      	mov	r2, r6
 80112fa:	463b      	mov	r3, r7
 80112fc:	2000      	movs	r0, #0
 80112fe:	f7f3 fa7f 	bl	8004800 <__aeabi_ddiv>
 8011302:	e79c      	b.n	801123e <__ieee754_pow+0x3e>
 8011304:	2300      	movs	r3, #0
 8011306:	9304      	str	r3, [sp, #16]
 8011308:	2a00      	cmp	r2, #0
 801130a:	d13d      	bne.n	8011388 <__ieee754_pow+0x188>
 801130c:	4b51      	ldr	r3, [pc, #324]	; (8011454 <__ieee754_pow+0x254>)
 801130e:	4598      	cmp	r8, r3
 8011310:	d1ea      	bne.n	80112e8 <__ieee754_pow+0xe8>
 8011312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801131a:	ea53 030a 	orrs.w	r3, r3, sl
 801131e:	f000 8459 	beq.w	8011bd4 <__ieee754_pow+0x9d4>
 8011322:	4b4f      	ldr	r3, [pc, #316]	; (8011460 <__ieee754_pow+0x260>)
 8011324:	429c      	cmp	r4, r3
 8011326:	dd08      	ble.n	801133a <__ieee754_pow+0x13a>
 8011328:	f1b9 0f00 	cmp.w	r9, #0
 801132c:	f2c0 8456 	blt.w	8011bdc <__ieee754_pow+0x9dc>
 8011330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011334:	e783      	b.n	801123e <__ieee754_pow+0x3e>
 8011336:	2302      	movs	r3, #2
 8011338:	e7e5      	b.n	8011306 <__ieee754_pow+0x106>
 801133a:	f1b9 0f00 	cmp.w	r9, #0
 801133e:	f04f 0000 	mov.w	r0, #0
 8011342:	f04f 0100 	mov.w	r1, #0
 8011346:	f6bf af7a 	bge.w	801123e <__ieee754_pow+0x3e>
 801134a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801134e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011352:	e774      	b.n	801123e <__ieee754_pow+0x3e>
 8011354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011358:	d106      	bne.n	8011368 <__ieee754_pow+0x168>
 801135a:	4632      	mov	r2, r6
 801135c:	463b      	mov	r3, r7
 801135e:	4630      	mov	r0, r6
 8011360:	4639      	mov	r1, r7
 8011362:	f7f3 f923 	bl	80045ac <__aeabi_dmul>
 8011366:	e76a      	b.n	801123e <__ieee754_pow+0x3e>
 8011368:	4b3e      	ldr	r3, [pc, #248]	; (8011464 <__ieee754_pow+0x264>)
 801136a:	4599      	cmp	r9, r3
 801136c:	d10c      	bne.n	8011388 <__ieee754_pow+0x188>
 801136e:	2d00      	cmp	r5, #0
 8011370:	db0a      	blt.n	8011388 <__ieee754_pow+0x188>
 8011372:	ec47 6b10 	vmov	d0, r6, r7
 8011376:	b009      	add	sp, #36	; 0x24
 8011378:	ecbd 8b06 	vpop	{d8-d10}
 801137c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011380:	f000 bd20 	b.w	8011dc4 <__ieee754_sqrt>
 8011384:	2300      	movs	r3, #0
 8011386:	9304      	str	r3, [sp, #16]
 8011388:	ec47 6b10 	vmov	d0, r6, r7
 801138c:	f000 fc62 	bl	8011c54 <fabs>
 8011390:	ec51 0b10 	vmov	r0, r1, d0
 8011394:	f1ba 0f00 	cmp.w	sl, #0
 8011398:	d129      	bne.n	80113ee <__ieee754_pow+0x1ee>
 801139a:	b124      	cbz	r4, 80113a6 <__ieee754_pow+0x1a6>
 801139c:	4b2f      	ldr	r3, [pc, #188]	; (801145c <__ieee754_pow+0x25c>)
 801139e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d123      	bne.n	80113ee <__ieee754_pow+0x1ee>
 80113a6:	f1b9 0f00 	cmp.w	r9, #0
 80113aa:	da05      	bge.n	80113b8 <__ieee754_pow+0x1b8>
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	2000      	movs	r0, #0
 80113b2:	492a      	ldr	r1, [pc, #168]	; (801145c <__ieee754_pow+0x25c>)
 80113b4:	f7f3 fa24 	bl	8004800 <__aeabi_ddiv>
 80113b8:	2d00      	cmp	r5, #0
 80113ba:	f6bf af40 	bge.w	801123e <__ieee754_pow+0x3e>
 80113be:	9b04      	ldr	r3, [sp, #16]
 80113c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80113c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80113c8:	431c      	orrs	r4, r3
 80113ca:	d108      	bne.n	80113de <__ieee754_pow+0x1de>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	4610      	mov	r0, r2
 80113d2:	4619      	mov	r1, r3
 80113d4:	f7f2 ff32 	bl	800423c <__aeabi_dsub>
 80113d8:	4602      	mov	r2, r0
 80113da:	460b      	mov	r3, r1
 80113dc:	e78f      	b.n	80112fe <__ieee754_pow+0xfe>
 80113de:	9b04      	ldr	r3, [sp, #16]
 80113e0:	2b01      	cmp	r3, #1
 80113e2:	f47f af2c 	bne.w	801123e <__ieee754_pow+0x3e>
 80113e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113ea:	4619      	mov	r1, r3
 80113ec:	e727      	b.n	801123e <__ieee754_pow+0x3e>
 80113ee:	0feb      	lsrs	r3, r5, #31
 80113f0:	3b01      	subs	r3, #1
 80113f2:	9306      	str	r3, [sp, #24]
 80113f4:	9a06      	ldr	r2, [sp, #24]
 80113f6:	9b04      	ldr	r3, [sp, #16]
 80113f8:	4313      	orrs	r3, r2
 80113fa:	d102      	bne.n	8011402 <__ieee754_pow+0x202>
 80113fc:	4632      	mov	r2, r6
 80113fe:	463b      	mov	r3, r7
 8011400:	e7e6      	b.n	80113d0 <__ieee754_pow+0x1d0>
 8011402:	4b19      	ldr	r3, [pc, #100]	; (8011468 <__ieee754_pow+0x268>)
 8011404:	4598      	cmp	r8, r3
 8011406:	f340 80fb 	ble.w	8011600 <__ieee754_pow+0x400>
 801140a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801140e:	4598      	cmp	r8, r3
 8011410:	4b13      	ldr	r3, [pc, #76]	; (8011460 <__ieee754_pow+0x260>)
 8011412:	dd0c      	ble.n	801142e <__ieee754_pow+0x22e>
 8011414:	429c      	cmp	r4, r3
 8011416:	dc0f      	bgt.n	8011438 <__ieee754_pow+0x238>
 8011418:	f1b9 0f00 	cmp.w	r9, #0
 801141c:	da0f      	bge.n	801143e <__ieee754_pow+0x23e>
 801141e:	2000      	movs	r0, #0
 8011420:	b009      	add	sp, #36	; 0x24
 8011422:	ecbd 8b06 	vpop	{d8-d10}
 8011426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801142a:	f000 bcc2 	b.w	8011db2 <__math_oflow>
 801142e:	429c      	cmp	r4, r3
 8011430:	dbf2      	blt.n	8011418 <__ieee754_pow+0x218>
 8011432:	4b0a      	ldr	r3, [pc, #40]	; (801145c <__ieee754_pow+0x25c>)
 8011434:	429c      	cmp	r4, r3
 8011436:	dd19      	ble.n	801146c <__ieee754_pow+0x26c>
 8011438:	f1b9 0f00 	cmp.w	r9, #0
 801143c:	dcef      	bgt.n	801141e <__ieee754_pow+0x21e>
 801143e:	2000      	movs	r0, #0
 8011440:	b009      	add	sp, #36	; 0x24
 8011442:	ecbd 8b06 	vpop	{d8-d10}
 8011446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801144a:	f000 bca9 	b.w	8011da0 <__math_uflow>
 801144e:	bf00      	nop
 8011450:	fff00000 	.word	0xfff00000
 8011454:	7ff00000 	.word	0x7ff00000
 8011458:	433fffff 	.word	0x433fffff
 801145c:	3ff00000 	.word	0x3ff00000
 8011460:	3fefffff 	.word	0x3fefffff
 8011464:	3fe00000 	.word	0x3fe00000
 8011468:	41e00000 	.word	0x41e00000
 801146c:	4b60      	ldr	r3, [pc, #384]	; (80115f0 <__ieee754_pow+0x3f0>)
 801146e:	2200      	movs	r2, #0
 8011470:	f7f2 fee4 	bl	800423c <__aeabi_dsub>
 8011474:	a354      	add	r3, pc, #336	; (adr r3, 80115c8 <__ieee754_pow+0x3c8>)
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	4604      	mov	r4, r0
 801147c:	460d      	mov	r5, r1
 801147e:	f7f3 f895 	bl	80045ac <__aeabi_dmul>
 8011482:	a353      	add	r3, pc, #332	; (adr r3, 80115d0 <__ieee754_pow+0x3d0>)
 8011484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011488:	4606      	mov	r6, r0
 801148a:	460f      	mov	r7, r1
 801148c:	4620      	mov	r0, r4
 801148e:	4629      	mov	r1, r5
 8011490:	f7f3 f88c 	bl	80045ac <__aeabi_dmul>
 8011494:	4b57      	ldr	r3, [pc, #348]	; (80115f4 <__ieee754_pow+0x3f4>)
 8011496:	4682      	mov	sl, r0
 8011498:	468b      	mov	fp, r1
 801149a:	2200      	movs	r2, #0
 801149c:	4620      	mov	r0, r4
 801149e:	4629      	mov	r1, r5
 80114a0:	f7f3 f884 	bl	80045ac <__aeabi_dmul>
 80114a4:	4602      	mov	r2, r0
 80114a6:	460b      	mov	r3, r1
 80114a8:	a14b      	add	r1, pc, #300	; (adr r1, 80115d8 <__ieee754_pow+0x3d8>)
 80114aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80114ae:	f7f2 fec5 	bl	800423c <__aeabi_dsub>
 80114b2:	4622      	mov	r2, r4
 80114b4:	462b      	mov	r3, r5
 80114b6:	f7f3 f879 	bl	80045ac <__aeabi_dmul>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	2000      	movs	r0, #0
 80114c0:	494d      	ldr	r1, [pc, #308]	; (80115f8 <__ieee754_pow+0x3f8>)
 80114c2:	f7f2 febb 	bl	800423c <__aeabi_dsub>
 80114c6:	4622      	mov	r2, r4
 80114c8:	4680      	mov	r8, r0
 80114ca:	4689      	mov	r9, r1
 80114cc:	462b      	mov	r3, r5
 80114ce:	4620      	mov	r0, r4
 80114d0:	4629      	mov	r1, r5
 80114d2:	f7f3 f86b 	bl	80045ac <__aeabi_dmul>
 80114d6:	4602      	mov	r2, r0
 80114d8:	460b      	mov	r3, r1
 80114da:	4640      	mov	r0, r8
 80114dc:	4649      	mov	r1, r9
 80114de:	f7f3 f865 	bl	80045ac <__aeabi_dmul>
 80114e2:	a33f      	add	r3, pc, #252	; (adr r3, 80115e0 <__ieee754_pow+0x3e0>)
 80114e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e8:	f7f3 f860 	bl	80045ac <__aeabi_dmul>
 80114ec:	4602      	mov	r2, r0
 80114ee:	460b      	mov	r3, r1
 80114f0:	4650      	mov	r0, sl
 80114f2:	4659      	mov	r1, fp
 80114f4:	f7f2 fea2 	bl	800423c <__aeabi_dsub>
 80114f8:	4602      	mov	r2, r0
 80114fa:	460b      	mov	r3, r1
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	4630      	mov	r0, r6
 8011502:	4639      	mov	r1, r7
 8011504:	f7f2 fe9c 	bl	8004240 <__adddf3>
 8011508:	2000      	movs	r0, #0
 801150a:	4632      	mov	r2, r6
 801150c:	463b      	mov	r3, r7
 801150e:	4604      	mov	r4, r0
 8011510:	460d      	mov	r5, r1
 8011512:	f7f2 fe93 	bl	800423c <__aeabi_dsub>
 8011516:	4602      	mov	r2, r0
 8011518:	460b      	mov	r3, r1
 801151a:	4640      	mov	r0, r8
 801151c:	4649      	mov	r1, r9
 801151e:	f7f2 fe8d 	bl	800423c <__aeabi_dsub>
 8011522:	9b04      	ldr	r3, [sp, #16]
 8011524:	9a06      	ldr	r2, [sp, #24]
 8011526:	3b01      	subs	r3, #1
 8011528:	4313      	orrs	r3, r2
 801152a:	4682      	mov	sl, r0
 801152c:	468b      	mov	fp, r1
 801152e:	f040 81e7 	bne.w	8011900 <__ieee754_pow+0x700>
 8011532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80115e8 <__ieee754_pow+0x3e8>
 8011536:	eeb0 8a47 	vmov.f32	s16, s14
 801153a:	eef0 8a67 	vmov.f32	s17, s15
 801153e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011542:	2600      	movs	r6, #0
 8011544:	4632      	mov	r2, r6
 8011546:	463b      	mov	r3, r7
 8011548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801154c:	f7f2 fe76 	bl	800423c <__aeabi_dsub>
 8011550:	4622      	mov	r2, r4
 8011552:	462b      	mov	r3, r5
 8011554:	f7f3 f82a 	bl	80045ac <__aeabi_dmul>
 8011558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801155c:	4680      	mov	r8, r0
 801155e:	4689      	mov	r9, r1
 8011560:	4650      	mov	r0, sl
 8011562:	4659      	mov	r1, fp
 8011564:	f7f3 f822 	bl	80045ac <__aeabi_dmul>
 8011568:	4602      	mov	r2, r0
 801156a:	460b      	mov	r3, r1
 801156c:	4640      	mov	r0, r8
 801156e:	4649      	mov	r1, r9
 8011570:	f7f2 fe66 	bl	8004240 <__adddf3>
 8011574:	4632      	mov	r2, r6
 8011576:	463b      	mov	r3, r7
 8011578:	4680      	mov	r8, r0
 801157a:	4689      	mov	r9, r1
 801157c:	4620      	mov	r0, r4
 801157e:	4629      	mov	r1, r5
 8011580:	f7f3 f814 	bl	80045ac <__aeabi_dmul>
 8011584:	460b      	mov	r3, r1
 8011586:	4604      	mov	r4, r0
 8011588:	460d      	mov	r5, r1
 801158a:	4602      	mov	r2, r0
 801158c:	4649      	mov	r1, r9
 801158e:	4640      	mov	r0, r8
 8011590:	f7f2 fe56 	bl	8004240 <__adddf3>
 8011594:	4b19      	ldr	r3, [pc, #100]	; (80115fc <__ieee754_pow+0x3fc>)
 8011596:	4299      	cmp	r1, r3
 8011598:	ec45 4b19 	vmov	d9, r4, r5
 801159c:	4606      	mov	r6, r0
 801159e:	460f      	mov	r7, r1
 80115a0:	468b      	mov	fp, r1
 80115a2:	f340 82f0 	ble.w	8011b86 <__ieee754_pow+0x986>
 80115a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80115aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80115ae:	4303      	orrs	r3, r0
 80115b0:	f000 81e4 	beq.w	801197c <__ieee754_pow+0x77c>
 80115b4:	ec51 0b18 	vmov	r0, r1, d8
 80115b8:	2200      	movs	r2, #0
 80115ba:	2300      	movs	r3, #0
 80115bc:	f7f3 fa68 	bl	8004a90 <__aeabi_dcmplt>
 80115c0:	3800      	subs	r0, #0
 80115c2:	bf18      	it	ne
 80115c4:	2001      	movne	r0, #1
 80115c6:	e72b      	b.n	8011420 <__ieee754_pow+0x220>
 80115c8:	60000000 	.word	0x60000000
 80115cc:	3ff71547 	.word	0x3ff71547
 80115d0:	f85ddf44 	.word	0xf85ddf44
 80115d4:	3e54ae0b 	.word	0x3e54ae0b
 80115d8:	55555555 	.word	0x55555555
 80115dc:	3fd55555 	.word	0x3fd55555
 80115e0:	652b82fe 	.word	0x652b82fe
 80115e4:	3ff71547 	.word	0x3ff71547
 80115e8:	00000000 	.word	0x00000000
 80115ec:	bff00000 	.word	0xbff00000
 80115f0:	3ff00000 	.word	0x3ff00000
 80115f4:	3fd00000 	.word	0x3fd00000
 80115f8:	3fe00000 	.word	0x3fe00000
 80115fc:	408fffff 	.word	0x408fffff
 8011600:	4bd5      	ldr	r3, [pc, #852]	; (8011958 <__ieee754_pow+0x758>)
 8011602:	402b      	ands	r3, r5
 8011604:	2200      	movs	r2, #0
 8011606:	b92b      	cbnz	r3, 8011614 <__ieee754_pow+0x414>
 8011608:	4bd4      	ldr	r3, [pc, #848]	; (801195c <__ieee754_pow+0x75c>)
 801160a:	f7f2 ffcf 	bl	80045ac <__aeabi_dmul>
 801160e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011612:	460c      	mov	r4, r1
 8011614:	1523      	asrs	r3, r4, #20
 8011616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801161a:	4413      	add	r3, r2
 801161c:	9305      	str	r3, [sp, #20]
 801161e:	4bd0      	ldr	r3, [pc, #832]	; (8011960 <__ieee754_pow+0x760>)
 8011620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011628:	429c      	cmp	r4, r3
 801162a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801162e:	dd08      	ble.n	8011642 <__ieee754_pow+0x442>
 8011630:	4bcc      	ldr	r3, [pc, #816]	; (8011964 <__ieee754_pow+0x764>)
 8011632:	429c      	cmp	r4, r3
 8011634:	f340 8162 	ble.w	80118fc <__ieee754_pow+0x6fc>
 8011638:	9b05      	ldr	r3, [sp, #20]
 801163a:	3301      	adds	r3, #1
 801163c:	9305      	str	r3, [sp, #20]
 801163e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011642:	2400      	movs	r4, #0
 8011644:	00e3      	lsls	r3, r4, #3
 8011646:	9307      	str	r3, [sp, #28]
 8011648:	4bc7      	ldr	r3, [pc, #796]	; (8011968 <__ieee754_pow+0x768>)
 801164a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801164e:	ed93 7b00 	vldr	d7, [r3]
 8011652:	4629      	mov	r1, r5
 8011654:	ec53 2b17 	vmov	r2, r3, d7
 8011658:	eeb0 9a47 	vmov.f32	s18, s14
 801165c:	eef0 9a67 	vmov.f32	s19, s15
 8011660:	4682      	mov	sl, r0
 8011662:	f7f2 fdeb 	bl	800423c <__aeabi_dsub>
 8011666:	4652      	mov	r2, sl
 8011668:	4606      	mov	r6, r0
 801166a:	460f      	mov	r7, r1
 801166c:	462b      	mov	r3, r5
 801166e:	ec51 0b19 	vmov	r0, r1, d9
 8011672:	f7f2 fde5 	bl	8004240 <__adddf3>
 8011676:	4602      	mov	r2, r0
 8011678:	460b      	mov	r3, r1
 801167a:	2000      	movs	r0, #0
 801167c:	49bb      	ldr	r1, [pc, #748]	; (801196c <__ieee754_pow+0x76c>)
 801167e:	f7f3 f8bf 	bl	8004800 <__aeabi_ddiv>
 8011682:	ec41 0b1a 	vmov	d10, r0, r1
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	4630      	mov	r0, r6
 801168c:	4639      	mov	r1, r7
 801168e:	f7f2 ff8d 	bl	80045ac <__aeabi_dmul>
 8011692:	2300      	movs	r3, #0
 8011694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011698:	9302      	str	r3, [sp, #8]
 801169a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801169e:	46ab      	mov	fp, r5
 80116a0:	106d      	asrs	r5, r5, #1
 80116a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80116a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80116aa:	ec41 0b18 	vmov	d8, r0, r1
 80116ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80116b2:	2200      	movs	r2, #0
 80116b4:	4640      	mov	r0, r8
 80116b6:	4649      	mov	r1, r9
 80116b8:	4614      	mov	r4, r2
 80116ba:	461d      	mov	r5, r3
 80116bc:	f7f2 ff76 	bl	80045ac <__aeabi_dmul>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	f7f2 fdb8 	bl	800423c <__aeabi_dsub>
 80116cc:	ec53 2b19 	vmov	r2, r3, d9
 80116d0:	4606      	mov	r6, r0
 80116d2:	460f      	mov	r7, r1
 80116d4:	4620      	mov	r0, r4
 80116d6:	4629      	mov	r1, r5
 80116d8:	f7f2 fdb0 	bl	800423c <__aeabi_dsub>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4650      	mov	r0, sl
 80116e2:	4659      	mov	r1, fp
 80116e4:	f7f2 fdaa 	bl	800423c <__aeabi_dsub>
 80116e8:	4642      	mov	r2, r8
 80116ea:	464b      	mov	r3, r9
 80116ec:	f7f2 ff5e 	bl	80045ac <__aeabi_dmul>
 80116f0:	4602      	mov	r2, r0
 80116f2:	460b      	mov	r3, r1
 80116f4:	4630      	mov	r0, r6
 80116f6:	4639      	mov	r1, r7
 80116f8:	f7f2 fda0 	bl	800423c <__aeabi_dsub>
 80116fc:	ec53 2b1a 	vmov	r2, r3, d10
 8011700:	f7f2 ff54 	bl	80045ac <__aeabi_dmul>
 8011704:	ec53 2b18 	vmov	r2, r3, d8
 8011708:	ec41 0b19 	vmov	d9, r0, r1
 801170c:	ec51 0b18 	vmov	r0, r1, d8
 8011710:	f7f2 ff4c 	bl	80045ac <__aeabi_dmul>
 8011714:	a37c      	add	r3, pc, #496	; (adr r3, 8011908 <__ieee754_pow+0x708>)
 8011716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171a:	4604      	mov	r4, r0
 801171c:	460d      	mov	r5, r1
 801171e:	f7f2 ff45 	bl	80045ac <__aeabi_dmul>
 8011722:	a37b      	add	r3, pc, #492	; (adr r3, 8011910 <__ieee754_pow+0x710>)
 8011724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011728:	f7f2 fd8a 	bl	8004240 <__adddf3>
 801172c:	4622      	mov	r2, r4
 801172e:	462b      	mov	r3, r5
 8011730:	f7f2 ff3c 	bl	80045ac <__aeabi_dmul>
 8011734:	a378      	add	r3, pc, #480	; (adr r3, 8011918 <__ieee754_pow+0x718>)
 8011736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801173a:	f7f2 fd81 	bl	8004240 <__adddf3>
 801173e:	4622      	mov	r2, r4
 8011740:	462b      	mov	r3, r5
 8011742:	f7f2 ff33 	bl	80045ac <__aeabi_dmul>
 8011746:	a376      	add	r3, pc, #472	; (adr r3, 8011920 <__ieee754_pow+0x720>)
 8011748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174c:	f7f2 fd78 	bl	8004240 <__adddf3>
 8011750:	4622      	mov	r2, r4
 8011752:	462b      	mov	r3, r5
 8011754:	f7f2 ff2a 	bl	80045ac <__aeabi_dmul>
 8011758:	a373      	add	r3, pc, #460	; (adr r3, 8011928 <__ieee754_pow+0x728>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	f7f2 fd6f 	bl	8004240 <__adddf3>
 8011762:	4622      	mov	r2, r4
 8011764:	462b      	mov	r3, r5
 8011766:	f7f2 ff21 	bl	80045ac <__aeabi_dmul>
 801176a:	a371      	add	r3, pc, #452	; (adr r3, 8011930 <__ieee754_pow+0x730>)
 801176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011770:	f7f2 fd66 	bl	8004240 <__adddf3>
 8011774:	4622      	mov	r2, r4
 8011776:	4606      	mov	r6, r0
 8011778:	460f      	mov	r7, r1
 801177a:	462b      	mov	r3, r5
 801177c:	4620      	mov	r0, r4
 801177e:	4629      	mov	r1, r5
 8011780:	f7f2 ff14 	bl	80045ac <__aeabi_dmul>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4630      	mov	r0, r6
 801178a:	4639      	mov	r1, r7
 801178c:	f7f2 ff0e 	bl	80045ac <__aeabi_dmul>
 8011790:	4642      	mov	r2, r8
 8011792:	4604      	mov	r4, r0
 8011794:	460d      	mov	r5, r1
 8011796:	464b      	mov	r3, r9
 8011798:	ec51 0b18 	vmov	r0, r1, d8
 801179c:	f7f2 fd50 	bl	8004240 <__adddf3>
 80117a0:	ec53 2b19 	vmov	r2, r3, d9
 80117a4:	f7f2 ff02 	bl	80045ac <__aeabi_dmul>
 80117a8:	4622      	mov	r2, r4
 80117aa:	462b      	mov	r3, r5
 80117ac:	f7f2 fd48 	bl	8004240 <__adddf3>
 80117b0:	4642      	mov	r2, r8
 80117b2:	4682      	mov	sl, r0
 80117b4:	468b      	mov	fp, r1
 80117b6:	464b      	mov	r3, r9
 80117b8:	4640      	mov	r0, r8
 80117ba:	4649      	mov	r1, r9
 80117bc:	f7f2 fef6 	bl	80045ac <__aeabi_dmul>
 80117c0:	4b6b      	ldr	r3, [pc, #428]	; (8011970 <__ieee754_pow+0x770>)
 80117c2:	2200      	movs	r2, #0
 80117c4:	4606      	mov	r6, r0
 80117c6:	460f      	mov	r7, r1
 80117c8:	f7f2 fd3a 	bl	8004240 <__adddf3>
 80117cc:	4652      	mov	r2, sl
 80117ce:	465b      	mov	r3, fp
 80117d0:	f7f2 fd36 	bl	8004240 <__adddf3>
 80117d4:	2000      	movs	r0, #0
 80117d6:	4604      	mov	r4, r0
 80117d8:	460d      	mov	r5, r1
 80117da:	4602      	mov	r2, r0
 80117dc:	460b      	mov	r3, r1
 80117de:	4640      	mov	r0, r8
 80117e0:	4649      	mov	r1, r9
 80117e2:	f7f2 fee3 	bl	80045ac <__aeabi_dmul>
 80117e6:	4b62      	ldr	r3, [pc, #392]	; (8011970 <__ieee754_pow+0x770>)
 80117e8:	4680      	mov	r8, r0
 80117ea:	4689      	mov	r9, r1
 80117ec:	2200      	movs	r2, #0
 80117ee:	4620      	mov	r0, r4
 80117f0:	4629      	mov	r1, r5
 80117f2:	f7f2 fd23 	bl	800423c <__aeabi_dsub>
 80117f6:	4632      	mov	r2, r6
 80117f8:	463b      	mov	r3, r7
 80117fa:	f7f2 fd1f 	bl	800423c <__aeabi_dsub>
 80117fe:	4602      	mov	r2, r0
 8011800:	460b      	mov	r3, r1
 8011802:	4650      	mov	r0, sl
 8011804:	4659      	mov	r1, fp
 8011806:	f7f2 fd19 	bl	800423c <__aeabi_dsub>
 801180a:	ec53 2b18 	vmov	r2, r3, d8
 801180e:	f7f2 fecd 	bl	80045ac <__aeabi_dmul>
 8011812:	4622      	mov	r2, r4
 8011814:	4606      	mov	r6, r0
 8011816:	460f      	mov	r7, r1
 8011818:	462b      	mov	r3, r5
 801181a:	ec51 0b19 	vmov	r0, r1, d9
 801181e:	f7f2 fec5 	bl	80045ac <__aeabi_dmul>
 8011822:	4602      	mov	r2, r0
 8011824:	460b      	mov	r3, r1
 8011826:	4630      	mov	r0, r6
 8011828:	4639      	mov	r1, r7
 801182a:	f7f2 fd09 	bl	8004240 <__adddf3>
 801182e:	4606      	mov	r6, r0
 8011830:	460f      	mov	r7, r1
 8011832:	4602      	mov	r2, r0
 8011834:	460b      	mov	r3, r1
 8011836:	4640      	mov	r0, r8
 8011838:	4649      	mov	r1, r9
 801183a:	f7f2 fd01 	bl	8004240 <__adddf3>
 801183e:	a33e      	add	r3, pc, #248	; (adr r3, 8011938 <__ieee754_pow+0x738>)
 8011840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011844:	2000      	movs	r0, #0
 8011846:	4604      	mov	r4, r0
 8011848:	460d      	mov	r5, r1
 801184a:	f7f2 feaf 	bl	80045ac <__aeabi_dmul>
 801184e:	4642      	mov	r2, r8
 8011850:	ec41 0b18 	vmov	d8, r0, r1
 8011854:	464b      	mov	r3, r9
 8011856:	4620      	mov	r0, r4
 8011858:	4629      	mov	r1, r5
 801185a:	f7f2 fcef 	bl	800423c <__aeabi_dsub>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	4630      	mov	r0, r6
 8011864:	4639      	mov	r1, r7
 8011866:	f7f2 fce9 	bl	800423c <__aeabi_dsub>
 801186a:	a335      	add	r3, pc, #212	; (adr r3, 8011940 <__ieee754_pow+0x740>)
 801186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011870:	f7f2 fe9c 	bl	80045ac <__aeabi_dmul>
 8011874:	a334      	add	r3, pc, #208	; (adr r3, 8011948 <__ieee754_pow+0x748>)
 8011876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187a:	4606      	mov	r6, r0
 801187c:	460f      	mov	r7, r1
 801187e:	4620      	mov	r0, r4
 8011880:	4629      	mov	r1, r5
 8011882:	f7f2 fe93 	bl	80045ac <__aeabi_dmul>
 8011886:	4602      	mov	r2, r0
 8011888:	460b      	mov	r3, r1
 801188a:	4630      	mov	r0, r6
 801188c:	4639      	mov	r1, r7
 801188e:	f7f2 fcd7 	bl	8004240 <__adddf3>
 8011892:	9a07      	ldr	r2, [sp, #28]
 8011894:	4b37      	ldr	r3, [pc, #220]	; (8011974 <__ieee754_pow+0x774>)
 8011896:	4413      	add	r3, r2
 8011898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189c:	f7f2 fcd0 	bl	8004240 <__adddf3>
 80118a0:	4682      	mov	sl, r0
 80118a2:	9805      	ldr	r0, [sp, #20]
 80118a4:	468b      	mov	fp, r1
 80118a6:	f7f2 fe17 	bl	80044d8 <__aeabi_i2d>
 80118aa:	9a07      	ldr	r2, [sp, #28]
 80118ac:	4b32      	ldr	r3, [pc, #200]	; (8011978 <__ieee754_pow+0x778>)
 80118ae:	4413      	add	r3, r2
 80118b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80118b4:	4606      	mov	r6, r0
 80118b6:	460f      	mov	r7, r1
 80118b8:	4652      	mov	r2, sl
 80118ba:	465b      	mov	r3, fp
 80118bc:	ec51 0b18 	vmov	r0, r1, d8
 80118c0:	f7f2 fcbe 	bl	8004240 <__adddf3>
 80118c4:	4642      	mov	r2, r8
 80118c6:	464b      	mov	r3, r9
 80118c8:	f7f2 fcba 	bl	8004240 <__adddf3>
 80118cc:	4632      	mov	r2, r6
 80118ce:	463b      	mov	r3, r7
 80118d0:	f7f2 fcb6 	bl	8004240 <__adddf3>
 80118d4:	2000      	movs	r0, #0
 80118d6:	4632      	mov	r2, r6
 80118d8:	463b      	mov	r3, r7
 80118da:	4604      	mov	r4, r0
 80118dc:	460d      	mov	r5, r1
 80118de:	f7f2 fcad 	bl	800423c <__aeabi_dsub>
 80118e2:	4642      	mov	r2, r8
 80118e4:	464b      	mov	r3, r9
 80118e6:	f7f2 fca9 	bl	800423c <__aeabi_dsub>
 80118ea:	ec53 2b18 	vmov	r2, r3, d8
 80118ee:	f7f2 fca5 	bl	800423c <__aeabi_dsub>
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	4650      	mov	r0, sl
 80118f8:	4659      	mov	r1, fp
 80118fa:	e610      	b.n	801151e <__ieee754_pow+0x31e>
 80118fc:	2401      	movs	r4, #1
 80118fe:	e6a1      	b.n	8011644 <__ieee754_pow+0x444>
 8011900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011950 <__ieee754_pow+0x750>
 8011904:	e617      	b.n	8011536 <__ieee754_pow+0x336>
 8011906:	bf00      	nop
 8011908:	4a454eef 	.word	0x4a454eef
 801190c:	3fca7e28 	.word	0x3fca7e28
 8011910:	93c9db65 	.word	0x93c9db65
 8011914:	3fcd864a 	.word	0x3fcd864a
 8011918:	a91d4101 	.word	0xa91d4101
 801191c:	3fd17460 	.word	0x3fd17460
 8011920:	518f264d 	.word	0x518f264d
 8011924:	3fd55555 	.word	0x3fd55555
 8011928:	db6fabff 	.word	0xdb6fabff
 801192c:	3fdb6db6 	.word	0x3fdb6db6
 8011930:	33333303 	.word	0x33333303
 8011934:	3fe33333 	.word	0x3fe33333
 8011938:	e0000000 	.word	0xe0000000
 801193c:	3feec709 	.word	0x3feec709
 8011940:	dc3a03fd 	.word	0xdc3a03fd
 8011944:	3feec709 	.word	0x3feec709
 8011948:	145b01f5 	.word	0x145b01f5
 801194c:	be3e2fe0 	.word	0xbe3e2fe0
 8011950:	00000000 	.word	0x00000000
 8011954:	3ff00000 	.word	0x3ff00000
 8011958:	7ff00000 	.word	0x7ff00000
 801195c:	43400000 	.word	0x43400000
 8011960:	0003988e 	.word	0x0003988e
 8011964:	000bb679 	.word	0x000bb679
 8011968:	080120d8 	.word	0x080120d8
 801196c:	3ff00000 	.word	0x3ff00000
 8011970:	40080000 	.word	0x40080000
 8011974:	080120f8 	.word	0x080120f8
 8011978:	080120e8 	.word	0x080120e8
 801197c:	a3b3      	add	r3, pc, #716	; (adr r3, 8011c4c <__ieee754_pow+0xa4c>)
 801197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011982:	4640      	mov	r0, r8
 8011984:	4649      	mov	r1, r9
 8011986:	f7f2 fc5b 	bl	8004240 <__adddf3>
 801198a:	4622      	mov	r2, r4
 801198c:	ec41 0b1a 	vmov	d10, r0, r1
 8011990:	462b      	mov	r3, r5
 8011992:	4630      	mov	r0, r6
 8011994:	4639      	mov	r1, r7
 8011996:	f7f2 fc51 	bl	800423c <__aeabi_dsub>
 801199a:	4602      	mov	r2, r0
 801199c:	460b      	mov	r3, r1
 801199e:	ec51 0b1a 	vmov	r0, r1, d10
 80119a2:	f7f3 f893 	bl	8004acc <__aeabi_dcmpgt>
 80119a6:	2800      	cmp	r0, #0
 80119a8:	f47f ae04 	bne.w	80115b4 <__ieee754_pow+0x3b4>
 80119ac:	4aa2      	ldr	r2, [pc, #648]	; (8011c38 <__ieee754_pow+0xa38>)
 80119ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80119b2:	4293      	cmp	r3, r2
 80119b4:	f340 8107 	ble.w	8011bc6 <__ieee754_pow+0x9c6>
 80119b8:	151b      	asrs	r3, r3, #20
 80119ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80119be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80119c2:	fa4a fa03 	asr.w	sl, sl, r3
 80119c6:	44da      	add	sl, fp
 80119c8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80119cc:	489b      	ldr	r0, [pc, #620]	; (8011c3c <__ieee754_pow+0xa3c>)
 80119ce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80119d2:	4108      	asrs	r0, r1
 80119d4:	ea00 030a 	and.w	r3, r0, sl
 80119d8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80119dc:	f1c1 0114 	rsb	r1, r1, #20
 80119e0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80119e4:	fa4a fa01 	asr.w	sl, sl, r1
 80119e8:	f1bb 0f00 	cmp.w	fp, #0
 80119ec:	f04f 0200 	mov.w	r2, #0
 80119f0:	4620      	mov	r0, r4
 80119f2:	4629      	mov	r1, r5
 80119f4:	bfb8      	it	lt
 80119f6:	f1ca 0a00 	rsblt	sl, sl, #0
 80119fa:	f7f2 fc1f 	bl	800423c <__aeabi_dsub>
 80119fe:	ec41 0b19 	vmov	d9, r0, r1
 8011a02:	4642      	mov	r2, r8
 8011a04:	464b      	mov	r3, r9
 8011a06:	ec51 0b19 	vmov	r0, r1, d9
 8011a0a:	f7f2 fc19 	bl	8004240 <__adddf3>
 8011a0e:	a37a      	add	r3, pc, #488	; (adr r3, 8011bf8 <__ieee754_pow+0x9f8>)
 8011a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a14:	2000      	movs	r0, #0
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	f7f2 fdc7 	bl	80045ac <__aeabi_dmul>
 8011a1e:	ec53 2b19 	vmov	r2, r3, d9
 8011a22:	4606      	mov	r6, r0
 8011a24:	460f      	mov	r7, r1
 8011a26:	4620      	mov	r0, r4
 8011a28:	4629      	mov	r1, r5
 8011a2a:	f7f2 fc07 	bl	800423c <__aeabi_dsub>
 8011a2e:	4602      	mov	r2, r0
 8011a30:	460b      	mov	r3, r1
 8011a32:	4640      	mov	r0, r8
 8011a34:	4649      	mov	r1, r9
 8011a36:	f7f2 fc01 	bl	800423c <__aeabi_dsub>
 8011a3a:	a371      	add	r3, pc, #452	; (adr r3, 8011c00 <__ieee754_pow+0xa00>)
 8011a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a40:	f7f2 fdb4 	bl	80045ac <__aeabi_dmul>
 8011a44:	a370      	add	r3, pc, #448	; (adr r3, 8011c08 <__ieee754_pow+0xa08>)
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	4680      	mov	r8, r0
 8011a4c:	4689      	mov	r9, r1
 8011a4e:	4620      	mov	r0, r4
 8011a50:	4629      	mov	r1, r5
 8011a52:	f7f2 fdab 	bl	80045ac <__aeabi_dmul>
 8011a56:	4602      	mov	r2, r0
 8011a58:	460b      	mov	r3, r1
 8011a5a:	4640      	mov	r0, r8
 8011a5c:	4649      	mov	r1, r9
 8011a5e:	f7f2 fbef 	bl	8004240 <__adddf3>
 8011a62:	4604      	mov	r4, r0
 8011a64:	460d      	mov	r5, r1
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	4639      	mov	r1, r7
 8011a6e:	f7f2 fbe7 	bl	8004240 <__adddf3>
 8011a72:	4632      	mov	r2, r6
 8011a74:	463b      	mov	r3, r7
 8011a76:	4680      	mov	r8, r0
 8011a78:	4689      	mov	r9, r1
 8011a7a:	f7f2 fbdf 	bl	800423c <__aeabi_dsub>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	4620      	mov	r0, r4
 8011a84:	4629      	mov	r1, r5
 8011a86:	f7f2 fbd9 	bl	800423c <__aeabi_dsub>
 8011a8a:	4642      	mov	r2, r8
 8011a8c:	4606      	mov	r6, r0
 8011a8e:	460f      	mov	r7, r1
 8011a90:	464b      	mov	r3, r9
 8011a92:	4640      	mov	r0, r8
 8011a94:	4649      	mov	r1, r9
 8011a96:	f7f2 fd89 	bl	80045ac <__aeabi_dmul>
 8011a9a:	a35d      	add	r3, pc, #372	; (adr r3, 8011c10 <__ieee754_pow+0xa10>)
 8011a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa0:	4604      	mov	r4, r0
 8011aa2:	460d      	mov	r5, r1
 8011aa4:	f7f2 fd82 	bl	80045ac <__aeabi_dmul>
 8011aa8:	a35b      	add	r3, pc, #364	; (adr r3, 8011c18 <__ieee754_pow+0xa18>)
 8011aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aae:	f7f2 fbc5 	bl	800423c <__aeabi_dsub>
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	462b      	mov	r3, r5
 8011ab6:	f7f2 fd79 	bl	80045ac <__aeabi_dmul>
 8011aba:	a359      	add	r3, pc, #356	; (adr r3, 8011c20 <__ieee754_pow+0xa20>)
 8011abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac0:	f7f2 fbbe 	bl	8004240 <__adddf3>
 8011ac4:	4622      	mov	r2, r4
 8011ac6:	462b      	mov	r3, r5
 8011ac8:	f7f2 fd70 	bl	80045ac <__aeabi_dmul>
 8011acc:	a356      	add	r3, pc, #344	; (adr r3, 8011c28 <__ieee754_pow+0xa28>)
 8011ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad2:	f7f2 fbb3 	bl	800423c <__aeabi_dsub>
 8011ad6:	4622      	mov	r2, r4
 8011ad8:	462b      	mov	r3, r5
 8011ada:	f7f2 fd67 	bl	80045ac <__aeabi_dmul>
 8011ade:	a354      	add	r3, pc, #336	; (adr r3, 8011c30 <__ieee754_pow+0xa30>)
 8011ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae4:	f7f2 fbac 	bl	8004240 <__adddf3>
 8011ae8:	4622      	mov	r2, r4
 8011aea:	462b      	mov	r3, r5
 8011aec:	f7f2 fd5e 	bl	80045ac <__aeabi_dmul>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4640      	mov	r0, r8
 8011af6:	4649      	mov	r1, r9
 8011af8:	f7f2 fba0 	bl	800423c <__aeabi_dsub>
 8011afc:	4604      	mov	r4, r0
 8011afe:	460d      	mov	r5, r1
 8011b00:	4602      	mov	r2, r0
 8011b02:	460b      	mov	r3, r1
 8011b04:	4640      	mov	r0, r8
 8011b06:	4649      	mov	r1, r9
 8011b08:	f7f2 fd50 	bl	80045ac <__aeabi_dmul>
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	ec41 0b19 	vmov	d9, r0, r1
 8011b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011b16:	4620      	mov	r0, r4
 8011b18:	4629      	mov	r1, r5
 8011b1a:	f7f2 fb8f 	bl	800423c <__aeabi_dsub>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	460b      	mov	r3, r1
 8011b22:	ec51 0b19 	vmov	r0, r1, d9
 8011b26:	f7f2 fe6b 	bl	8004800 <__aeabi_ddiv>
 8011b2a:	4632      	mov	r2, r6
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	460d      	mov	r5, r1
 8011b30:	463b      	mov	r3, r7
 8011b32:	4640      	mov	r0, r8
 8011b34:	4649      	mov	r1, r9
 8011b36:	f7f2 fd39 	bl	80045ac <__aeabi_dmul>
 8011b3a:	4632      	mov	r2, r6
 8011b3c:	463b      	mov	r3, r7
 8011b3e:	f7f2 fb7f 	bl	8004240 <__adddf3>
 8011b42:	4602      	mov	r2, r0
 8011b44:	460b      	mov	r3, r1
 8011b46:	4620      	mov	r0, r4
 8011b48:	4629      	mov	r1, r5
 8011b4a:	f7f2 fb77 	bl	800423c <__aeabi_dsub>
 8011b4e:	4642      	mov	r2, r8
 8011b50:	464b      	mov	r3, r9
 8011b52:	f7f2 fb73 	bl	800423c <__aeabi_dsub>
 8011b56:	460b      	mov	r3, r1
 8011b58:	4602      	mov	r2, r0
 8011b5a:	4939      	ldr	r1, [pc, #228]	; (8011c40 <__ieee754_pow+0xa40>)
 8011b5c:	2000      	movs	r0, #0
 8011b5e:	f7f2 fb6d 	bl	800423c <__aeabi_dsub>
 8011b62:	ec41 0b10 	vmov	d0, r0, r1
 8011b66:	ee10 3a90 	vmov	r3, s1
 8011b6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b72:	da2b      	bge.n	8011bcc <__ieee754_pow+0x9cc>
 8011b74:	4650      	mov	r0, sl
 8011b76:	f000 f877 	bl	8011c68 <scalbn>
 8011b7a:	ec51 0b10 	vmov	r0, r1, d0
 8011b7e:	ec53 2b18 	vmov	r2, r3, d8
 8011b82:	f7ff bbee 	b.w	8011362 <__ieee754_pow+0x162>
 8011b86:	4b2f      	ldr	r3, [pc, #188]	; (8011c44 <__ieee754_pow+0xa44>)
 8011b88:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011b8c:	429e      	cmp	r6, r3
 8011b8e:	f77f af0d 	ble.w	80119ac <__ieee754_pow+0x7ac>
 8011b92:	4b2d      	ldr	r3, [pc, #180]	; (8011c48 <__ieee754_pow+0xa48>)
 8011b94:	440b      	add	r3, r1
 8011b96:	4303      	orrs	r3, r0
 8011b98:	d009      	beq.n	8011bae <__ieee754_pow+0x9ae>
 8011b9a:	ec51 0b18 	vmov	r0, r1, d8
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f7f2 ff75 	bl	8004a90 <__aeabi_dcmplt>
 8011ba6:	3800      	subs	r0, #0
 8011ba8:	bf18      	it	ne
 8011baa:	2001      	movne	r0, #1
 8011bac:	e448      	b.n	8011440 <__ieee754_pow+0x240>
 8011bae:	4622      	mov	r2, r4
 8011bb0:	462b      	mov	r3, r5
 8011bb2:	f7f2 fb43 	bl	800423c <__aeabi_dsub>
 8011bb6:	4642      	mov	r2, r8
 8011bb8:	464b      	mov	r3, r9
 8011bba:	f7f2 ff7d 	bl	8004ab8 <__aeabi_dcmpge>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	f43f aef4 	beq.w	80119ac <__ieee754_pow+0x7ac>
 8011bc4:	e7e9      	b.n	8011b9a <__ieee754_pow+0x99a>
 8011bc6:	f04f 0a00 	mov.w	sl, #0
 8011bca:	e71a      	b.n	8011a02 <__ieee754_pow+0x802>
 8011bcc:	ec51 0b10 	vmov	r0, r1, d0
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	e7d4      	b.n	8011b7e <__ieee754_pow+0x97e>
 8011bd4:	491a      	ldr	r1, [pc, #104]	; (8011c40 <__ieee754_pow+0xa40>)
 8011bd6:	2000      	movs	r0, #0
 8011bd8:	f7ff bb31 	b.w	801123e <__ieee754_pow+0x3e>
 8011bdc:	2000      	movs	r0, #0
 8011bde:	2100      	movs	r1, #0
 8011be0:	f7ff bb2d 	b.w	801123e <__ieee754_pow+0x3e>
 8011be4:	4630      	mov	r0, r6
 8011be6:	4639      	mov	r1, r7
 8011be8:	f7ff bb29 	b.w	801123e <__ieee754_pow+0x3e>
 8011bec:	9204      	str	r2, [sp, #16]
 8011bee:	f7ff bb7b 	b.w	80112e8 <__ieee754_pow+0xe8>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	f7ff bb65 	b.w	80112c2 <__ieee754_pow+0xc2>
 8011bf8:	00000000 	.word	0x00000000
 8011bfc:	3fe62e43 	.word	0x3fe62e43
 8011c00:	fefa39ef 	.word	0xfefa39ef
 8011c04:	3fe62e42 	.word	0x3fe62e42
 8011c08:	0ca86c39 	.word	0x0ca86c39
 8011c0c:	be205c61 	.word	0xbe205c61
 8011c10:	72bea4d0 	.word	0x72bea4d0
 8011c14:	3e663769 	.word	0x3e663769
 8011c18:	c5d26bf1 	.word	0xc5d26bf1
 8011c1c:	3ebbbd41 	.word	0x3ebbbd41
 8011c20:	af25de2c 	.word	0xaf25de2c
 8011c24:	3f11566a 	.word	0x3f11566a
 8011c28:	16bebd93 	.word	0x16bebd93
 8011c2c:	3f66c16c 	.word	0x3f66c16c
 8011c30:	5555553e 	.word	0x5555553e
 8011c34:	3fc55555 	.word	0x3fc55555
 8011c38:	3fe00000 	.word	0x3fe00000
 8011c3c:	fff00000 	.word	0xfff00000
 8011c40:	3ff00000 	.word	0x3ff00000
 8011c44:	4090cbff 	.word	0x4090cbff
 8011c48:	3f6f3400 	.word	0x3f6f3400
 8011c4c:	652b82fe 	.word	0x652b82fe
 8011c50:	3c971547 	.word	0x3c971547

08011c54 <fabs>:
 8011c54:	ec51 0b10 	vmov	r0, r1, d0
 8011c58:	ee10 2a10 	vmov	r2, s0
 8011c5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c60:	ec43 2b10 	vmov	d0, r2, r3
 8011c64:	4770      	bx	lr
	...

08011c68 <scalbn>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	ec55 4b10 	vmov	r4, r5, d0
 8011c6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011c72:	4606      	mov	r6, r0
 8011c74:	462b      	mov	r3, r5
 8011c76:	b999      	cbnz	r1, 8011ca0 <scalbn+0x38>
 8011c78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011c7c:	4323      	orrs	r3, r4
 8011c7e:	d03f      	beq.n	8011d00 <scalbn+0x98>
 8011c80:	4b35      	ldr	r3, [pc, #212]	; (8011d58 <scalbn+0xf0>)
 8011c82:	4629      	mov	r1, r5
 8011c84:	ee10 0a10 	vmov	r0, s0
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f7f2 fc8f 	bl	80045ac <__aeabi_dmul>
 8011c8e:	4b33      	ldr	r3, [pc, #204]	; (8011d5c <scalbn+0xf4>)
 8011c90:	429e      	cmp	r6, r3
 8011c92:	4604      	mov	r4, r0
 8011c94:	460d      	mov	r5, r1
 8011c96:	da10      	bge.n	8011cba <scalbn+0x52>
 8011c98:	a327      	add	r3, pc, #156	; (adr r3, 8011d38 <scalbn+0xd0>)
 8011c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9e:	e01f      	b.n	8011ce0 <scalbn+0x78>
 8011ca0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011ca4:	4291      	cmp	r1, r2
 8011ca6:	d10c      	bne.n	8011cc2 <scalbn+0x5a>
 8011ca8:	ee10 2a10 	vmov	r2, s0
 8011cac:	4620      	mov	r0, r4
 8011cae:	4629      	mov	r1, r5
 8011cb0:	f7f2 fac6 	bl	8004240 <__adddf3>
 8011cb4:	4604      	mov	r4, r0
 8011cb6:	460d      	mov	r5, r1
 8011cb8:	e022      	b.n	8011d00 <scalbn+0x98>
 8011cba:	460b      	mov	r3, r1
 8011cbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011cc0:	3936      	subs	r1, #54	; 0x36
 8011cc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011cc6:	4296      	cmp	r6, r2
 8011cc8:	dd0d      	ble.n	8011ce6 <scalbn+0x7e>
 8011cca:	2d00      	cmp	r5, #0
 8011ccc:	a11c      	add	r1, pc, #112	; (adr r1, 8011d40 <scalbn+0xd8>)
 8011cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cd2:	da02      	bge.n	8011cda <scalbn+0x72>
 8011cd4:	a11c      	add	r1, pc, #112	; (adr r1, 8011d48 <scalbn+0xe0>)
 8011cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cda:	a319      	add	r3, pc, #100	; (adr r3, 8011d40 <scalbn+0xd8>)
 8011cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce0:	f7f2 fc64 	bl	80045ac <__aeabi_dmul>
 8011ce4:	e7e6      	b.n	8011cb4 <scalbn+0x4c>
 8011ce6:	1872      	adds	r2, r6, r1
 8011ce8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011cec:	428a      	cmp	r2, r1
 8011cee:	dcec      	bgt.n	8011cca <scalbn+0x62>
 8011cf0:	2a00      	cmp	r2, #0
 8011cf2:	dd08      	ble.n	8011d06 <scalbn+0x9e>
 8011cf4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011cf8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011cfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d00:	ec45 4b10 	vmov	d0, r4, r5
 8011d04:	bd70      	pop	{r4, r5, r6, pc}
 8011d06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011d0a:	da08      	bge.n	8011d1e <scalbn+0xb6>
 8011d0c:	2d00      	cmp	r5, #0
 8011d0e:	a10a      	add	r1, pc, #40	; (adr r1, 8011d38 <scalbn+0xd0>)
 8011d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d14:	dac0      	bge.n	8011c98 <scalbn+0x30>
 8011d16:	a10e      	add	r1, pc, #56	; (adr r1, 8011d50 <scalbn+0xe8>)
 8011d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d1c:	e7bc      	b.n	8011c98 <scalbn+0x30>
 8011d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011d22:	3236      	adds	r2, #54	; 0x36
 8011d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011d28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	4b0c      	ldr	r3, [pc, #48]	; (8011d60 <scalbn+0xf8>)
 8011d30:	2200      	movs	r2, #0
 8011d32:	e7d5      	b.n	8011ce0 <scalbn+0x78>
 8011d34:	f3af 8000 	nop.w
 8011d38:	c2f8f359 	.word	0xc2f8f359
 8011d3c:	01a56e1f 	.word	0x01a56e1f
 8011d40:	8800759c 	.word	0x8800759c
 8011d44:	7e37e43c 	.word	0x7e37e43c
 8011d48:	8800759c 	.word	0x8800759c
 8011d4c:	fe37e43c 	.word	0xfe37e43c
 8011d50:	c2f8f359 	.word	0xc2f8f359
 8011d54:	81a56e1f 	.word	0x81a56e1f
 8011d58:	43500000 	.word	0x43500000
 8011d5c:	ffff3cb0 	.word	0xffff3cb0
 8011d60:	3c900000 	.word	0x3c900000

08011d64 <with_errno>:
 8011d64:	b570      	push	{r4, r5, r6, lr}
 8011d66:	4604      	mov	r4, r0
 8011d68:	460d      	mov	r5, r1
 8011d6a:	4616      	mov	r6, r2
 8011d6c:	f7ff f93a 	bl	8010fe4 <__errno>
 8011d70:	4629      	mov	r1, r5
 8011d72:	6006      	str	r6, [r0, #0]
 8011d74:	4620      	mov	r0, r4
 8011d76:	bd70      	pop	{r4, r5, r6, pc}

08011d78 <xflow>:
 8011d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d7a:	4614      	mov	r4, r2
 8011d7c:	461d      	mov	r5, r3
 8011d7e:	b108      	cbz	r0, 8011d84 <xflow+0xc>
 8011d80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d84:	e9cd 2300 	strd	r2, r3, [sp]
 8011d88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	f7f2 fc0c 	bl	80045ac <__aeabi_dmul>
 8011d94:	2222      	movs	r2, #34	; 0x22
 8011d96:	b003      	add	sp, #12
 8011d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d9c:	f7ff bfe2 	b.w	8011d64 <with_errno>

08011da0 <__math_uflow>:
 8011da0:	b508      	push	{r3, lr}
 8011da2:	2200      	movs	r2, #0
 8011da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011da8:	f7ff ffe6 	bl	8011d78 <xflow>
 8011dac:	ec41 0b10 	vmov	d0, r0, r1
 8011db0:	bd08      	pop	{r3, pc}

08011db2 <__math_oflow>:
 8011db2:	b508      	push	{r3, lr}
 8011db4:	2200      	movs	r2, #0
 8011db6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011dba:	f7ff ffdd 	bl	8011d78 <xflow>
 8011dbe:	ec41 0b10 	vmov	d0, r0, r1
 8011dc2:	bd08      	pop	{r3, pc}

08011dc4 <__ieee754_sqrt>:
 8011dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dc8:	ec55 4b10 	vmov	r4, r5, d0
 8011dcc:	4e67      	ldr	r6, [pc, #412]	; (8011f6c <__ieee754_sqrt+0x1a8>)
 8011dce:	43ae      	bics	r6, r5
 8011dd0:	ee10 0a10 	vmov	r0, s0
 8011dd4:	ee10 2a10 	vmov	r2, s0
 8011dd8:	4629      	mov	r1, r5
 8011dda:	462b      	mov	r3, r5
 8011ddc:	d10d      	bne.n	8011dfa <__ieee754_sqrt+0x36>
 8011dde:	f7f2 fbe5 	bl	80045ac <__aeabi_dmul>
 8011de2:	4602      	mov	r2, r0
 8011de4:	460b      	mov	r3, r1
 8011de6:	4620      	mov	r0, r4
 8011de8:	4629      	mov	r1, r5
 8011dea:	f7f2 fa29 	bl	8004240 <__adddf3>
 8011dee:	4604      	mov	r4, r0
 8011df0:	460d      	mov	r5, r1
 8011df2:	ec45 4b10 	vmov	d0, r4, r5
 8011df6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	2d00      	cmp	r5, #0
 8011dfc:	dc0b      	bgt.n	8011e16 <__ieee754_sqrt+0x52>
 8011dfe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011e02:	4326      	orrs	r6, r4
 8011e04:	d0f5      	beq.n	8011df2 <__ieee754_sqrt+0x2e>
 8011e06:	b135      	cbz	r5, 8011e16 <__ieee754_sqrt+0x52>
 8011e08:	f7f2 fa18 	bl	800423c <__aeabi_dsub>
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	f7f2 fcf6 	bl	8004800 <__aeabi_ddiv>
 8011e14:	e7eb      	b.n	8011dee <__ieee754_sqrt+0x2a>
 8011e16:	1509      	asrs	r1, r1, #20
 8011e18:	f000 808d 	beq.w	8011f36 <__ieee754_sqrt+0x172>
 8011e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e20:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e28:	07c9      	lsls	r1, r1, #31
 8011e2a:	bf5c      	itt	pl
 8011e2c:	005b      	lslpl	r3, r3, #1
 8011e2e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011e32:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011e36:	bf58      	it	pl
 8011e38:	0052      	lslpl	r2, r2, #1
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e40:	1076      	asrs	r6, r6, #1
 8011e42:	0052      	lsls	r2, r2, #1
 8011e44:	f04f 0e16 	mov.w	lr, #22
 8011e48:	46ac      	mov	ip, r5
 8011e4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e4e:	eb0c 0001 	add.w	r0, ip, r1
 8011e52:	4298      	cmp	r0, r3
 8011e54:	bfde      	ittt	le
 8011e56:	1a1b      	suble	r3, r3, r0
 8011e58:	eb00 0c01 	addle.w	ip, r0, r1
 8011e5c:	186d      	addle	r5, r5, r1
 8011e5e:	005b      	lsls	r3, r3, #1
 8011e60:	f1be 0e01 	subs.w	lr, lr, #1
 8011e64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e68:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011e6c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011e70:	d1ed      	bne.n	8011e4e <__ieee754_sqrt+0x8a>
 8011e72:	4674      	mov	r4, lr
 8011e74:	2720      	movs	r7, #32
 8011e76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011e7a:	4563      	cmp	r3, ip
 8011e7c:	eb01 000e 	add.w	r0, r1, lr
 8011e80:	dc02      	bgt.n	8011e88 <__ieee754_sqrt+0xc4>
 8011e82:	d113      	bne.n	8011eac <__ieee754_sqrt+0xe8>
 8011e84:	4290      	cmp	r0, r2
 8011e86:	d811      	bhi.n	8011eac <__ieee754_sqrt+0xe8>
 8011e88:	2800      	cmp	r0, #0
 8011e8a:	eb00 0e01 	add.w	lr, r0, r1
 8011e8e:	da57      	bge.n	8011f40 <__ieee754_sqrt+0x17c>
 8011e90:	f1be 0f00 	cmp.w	lr, #0
 8011e94:	db54      	blt.n	8011f40 <__ieee754_sqrt+0x17c>
 8011e96:	f10c 0801 	add.w	r8, ip, #1
 8011e9a:	eba3 030c 	sub.w	r3, r3, ip
 8011e9e:	4290      	cmp	r0, r2
 8011ea0:	bf88      	it	hi
 8011ea2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011ea6:	1a12      	subs	r2, r2, r0
 8011ea8:	440c      	add	r4, r1
 8011eaa:	46c4      	mov	ip, r8
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	3f01      	subs	r7, #1
 8011eb0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011eb4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011eb8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011ebc:	d1dd      	bne.n	8011e7a <__ieee754_sqrt+0xb6>
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	d01b      	beq.n	8011efa <__ieee754_sqrt+0x136>
 8011ec2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011f70 <__ieee754_sqrt+0x1ac>
 8011ec6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011f74 <__ieee754_sqrt+0x1b0>
 8011eca:	e9da 0100 	ldrd	r0, r1, [sl]
 8011ece:	e9db 2300 	ldrd	r2, r3, [fp]
 8011ed2:	f7f2 f9b3 	bl	800423c <__aeabi_dsub>
 8011ed6:	e9da 8900 	ldrd	r8, r9, [sl]
 8011eda:	4602      	mov	r2, r0
 8011edc:	460b      	mov	r3, r1
 8011ede:	4640      	mov	r0, r8
 8011ee0:	4649      	mov	r1, r9
 8011ee2:	f7f2 fddf 	bl	8004aa4 <__aeabi_dcmple>
 8011ee6:	b140      	cbz	r0, 8011efa <__ieee754_sqrt+0x136>
 8011ee8:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011eec:	e9da 0100 	ldrd	r0, r1, [sl]
 8011ef0:	e9db 2300 	ldrd	r2, r3, [fp]
 8011ef4:	d126      	bne.n	8011f44 <__ieee754_sqrt+0x180>
 8011ef6:	3501      	adds	r5, #1
 8011ef8:	463c      	mov	r4, r7
 8011efa:	106a      	asrs	r2, r5, #1
 8011efc:	0863      	lsrs	r3, r4, #1
 8011efe:	07e9      	lsls	r1, r5, #31
 8011f00:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011f04:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011f08:	bf48      	it	mi
 8011f0a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011f0e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011f12:	461c      	mov	r4, r3
 8011f14:	e76d      	b.n	8011df2 <__ieee754_sqrt+0x2e>
 8011f16:	0ad3      	lsrs	r3, r2, #11
 8011f18:	3815      	subs	r0, #21
 8011f1a:	0552      	lsls	r2, r2, #21
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d0fa      	beq.n	8011f16 <__ieee754_sqrt+0x152>
 8011f20:	02dc      	lsls	r4, r3, #11
 8011f22:	d50a      	bpl.n	8011f3a <__ieee754_sqrt+0x176>
 8011f24:	f1c1 0420 	rsb	r4, r1, #32
 8011f28:	fa22 f404 	lsr.w	r4, r2, r4
 8011f2c:	1e4d      	subs	r5, r1, #1
 8011f2e:	408a      	lsls	r2, r1
 8011f30:	4323      	orrs	r3, r4
 8011f32:	1b41      	subs	r1, r0, r5
 8011f34:	e772      	b.n	8011e1c <__ieee754_sqrt+0x58>
 8011f36:	4608      	mov	r0, r1
 8011f38:	e7f0      	b.n	8011f1c <__ieee754_sqrt+0x158>
 8011f3a:	005b      	lsls	r3, r3, #1
 8011f3c:	3101      	adds	r1, #1
 8011f3e:	e7ef      	b.n	8011f20 <__ieee754_sqrt+0x15c>
 8011f40:	46e0      	mov	r8, ip
 8011f42:	e7aa      	b.n	8011e9a <__ieee754_sqrt+0xd6>
 8011f44:	f7f2 f97c 	bl	8004240 <__adddf3>
 8011f48:	e9da 8900 	ldrd	r8, r9, [sl]
 8011f4c:	4602      	mov	r2, r0
 8011f4e:	460b      	mov	r3, r1
 8011f50:	4640      	mov	r0, r8
 8011f52:	4649      	mov	r1, r9
 8011f54:	f7f2 fd9c 	bl	8004a90 <__aeabi_dcmplt>
 8011f58:	b120      	cbz	r0, 8011f64 <__ieee754_sqrt+0x1a0>
 8011f5a:	1ca0      	adds	r0, r4, #2
 8011f5c:	bf08      	it	eq
 8011f5e:	3501      	addeq	r5, #1
 8011f60:	3402      	adds	r4, #2
 8011f62:	e7ca      	b.n	8011efa <__ieee754_sqrt+0x136>
 8011f64:	3401      	adds	r4, #1
 8011f66:	f024 0401 	bic.w	r4, r4, #1
 8011f6a:	e7c6      	b.n	8011efa <__ieee754_sqrt+0x136>
 8011f6c:	7ff00000 	.word	0x7ff00000
 8011f70:	20000068 	.word	0x20000068
 8011f74:	20000070 	.word	0x20000070

08011f78 <_init>:
 8011f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7a:	bf00      	nop
 8011f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f7e:	bc08      	pop	{r3}
 8011f80:	469e      	mov	lr, r3
 8011f82:	4770      	bx	lr

08011f84 <_fini>:
 8011f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f86:	bf00      	nop
 8011f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f8a:	bc08      	pop	{r3}
 8011f8c:	469e      	mov	lr, r3
 8011f8e:	4770      	bx	lr
