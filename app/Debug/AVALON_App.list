
AVALON_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1e0  080041e0  080041e0  000041e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080123c0  080123c0  000123c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012538  08012538  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08012538  08012538  00012538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012540  08012540  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012540  08012540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012544  08012544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08012548  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b90  20000078  080125c0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003c08  080125c0  00023c08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028a8a  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005679  00000000  00000000  00048bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f60  00000000  00000000  0004e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182e  00000000  00000000  000501c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e828  00000000  00000000  000519f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002aa3c  00000000  00000000  0008021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012092c  00000000  00000000  000aac5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008ad4  00000000  00000000  001cb588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001d405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_ranges 00000010  00000000  00000000  001d40ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080041e0 <__do_global_dtors_aux>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4c05      	ldr	r4, [pc, #20]	; (80041f8 <__do_global_dtors_aux+0x18>)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	b933      	cbnz	r3, 80041f6 <__do_global_dtors_aux+0x16>
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__do_global_dtors_aux+0x1c>)
 80041ea:	b113      	cbz	r3, 80041f2 <__do_global_dtors_aux+0x12>
 80041ec:	4804      	ldr	r0, [pc, #16]	; (8004200 <__do_global_dtors_aux+0x20>)
 80041ee:	f3af 8000 	nop.w
 80041f2:	2301      	movs	r3, #1
 80041f4:	7023      	strb	r3, [r4, #0]
 80041f6:	bd10      	pop	{r4, pc}
 80041f8:	20000078 	.word	0x20000078
 80041fc:	00000000 	.word	0x00000000
 8004200:	080123a8 	.word	0x080123a8

08004204 <frame_dummy>:
 8004204:	b508      	push	{r3, lr}
 8004206:	4b03      	ldr	r3, [pc, #12]	; (8004214 <frame_dummy+0x10>)
 8004208:	b11b      	cbz	r3, 8004212 <frame_dummy+0xe>
 800420a:	4903      	ldr	r1, [pc, #12]	; (8004218 <frame_dummy+0x14>)
 800420c:	4803      	ldr	r0, [pc, #12]	; (800421c <frame_dummy+0x18>)
 800420e:	f3af 8000 	nop.w
 8004212:	bd08      	pop	{r3, pc}
 8004214:	00000000 	.word	0x00000000
 8004218:	2000007c 	.word	0x2000007c
 800421c:	080123a8 	.word	0x080123a8

08004220 <strcmp>:
 8004220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004228:	2a01      	cmp	r2, #1
 800422a:	bf28      	it	cs
 800422c:	429a      	cmpcs	r2, r3
 800422e:	d0f7      	beq.n	8004220 <strcmp>
 8004230:	1ad0      	subs	r0, r2, r3
 8004232:	4770      	bx	lr

08004234 <__aeabi_drsub>:
 8004234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004238:	e002      	b.n	8004240 <__adddf3>
 800423a:	bf00      	nop

0800423c <__aeabi_dsub>:
 800423c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08004240 <__adddf3>:
 8004240:	b530      	push	{r4, r5, lr}
 8004242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800424a:	ea94 0f05 	teq	r4, r5
 800424e:	bf08      	it	eq
 8004250:	ea90 0f02 	teqeq	r0, r2
 8004254:	bf1f      	itttt	ne
 8004256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800425a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800425e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8004262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004266:	f000 80e2 	beq.w	800442e <__adddf3+0x1ee>
 800426a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800426e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8004272:	bfb8      	it	lt
 8004274:	426d      	neglt	r5, r5
 8004276:	dd0c      	ble.n	8004292 <__adddf3+0x52>
 8004278:	442c      	add	r4, r5
 800427a:	ea80 0202 	eor.w	r2, r0, r2
 800427e:	ea81 0303 	eor.w	r3, r1, r3
 8004282:	ea82 0000 	eor.w	r0, r2, r0
 8004286:	ea83 0101 	eor.w	r1, r3, r1
 800428a:	ea80 0202 	eor.w	r2, r0, r2
 800428e:	ea81 0303 	eor.w	r3, r1, r3
 8004292:	2d36      	cmp	r5, #54	; 0x36
 8004294:	bf88      	it	hi
 8004296:	bd30      	pophi	{r4, r5, pc}
 8004298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800429c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042a8:	d002      	beq.n	80042b0 <__adddf3+0x70>
 80042aa:	4240      	negs	r0, r0
 80042ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042bc:	d002      	beq.n	80042c4 <__adddf3+0x84>
 80042be:	4252      	negs	r2, r2
 80042c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80042c4:	ea94 0f05 	teq	r4, r5
 80042c8:	f000 80a7 	beq.w	800441a <__adddf3+0x1da>
 80042cc:	f1a4 0401 	sub.w	r4, r4, #1
 80042d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80042d4:	db0d      	blt.n	80042f2 <__adddf3+0xb2>
 80042d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80042da:	fa22 f205 	lsr.w	r2, r2, r5
 80042de:	1880      	adds	r0, r0, r2
 80042e0:	f141 0100 	adc.w	r1, r1, #0
 80042e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80042e8:	1880      	adds	r0, r0, r2
 80042ea:	fa43 f305 	asr.w	r3, r3, r5
 80042ee:	4159      	adcs	r1, r3
 80042f0:	e00e      	b.n	8004310 <__adddf3+0xd0>
 80042f2:	f1a5 0520 	sub.w	r5, r5, #32
 80042f6:	f10e 0e20 	add.w	lr, lr, #32
 80042fa:	2a01      	cmp	r2, #1
 80042fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8004300:	bf28      	it	cs
 8004302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004306:	fa43 f305 	asr.w	r3, r3, r5
 800430a:	18c0      	adds	r0, r0, r3
 800430c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8004310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004314:	d507      	bpl.n	8004326 <__adddf3+0xe6>
 8004316:	f04f 0e00 	mov.w	lr, #0
 800431a:	f1dc 0c00 	rsbs	ip, ip, #0
 800431e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8004322:	eb6e 0101 	sbc.w	r1, lr, r1
 8004326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800432a:	d31b      	bcc.n	8004364 <__adddf3+0x124>
 800432c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8004330:	d30c      	bcc.n	800434c <__adddf3+0x10c>
 8004332:	0849      	lsrs	r1, r1, #1
 8004334:	ea5f 0030 	movs.w	r0, r0, rrx
 8004338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800433c:	f104 0401 	add.w	r4, r4, #1
 8004340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004348:	f080 809a 	bcs.w	8004480 <__adddf3+0x240>
 800434c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8004350:	bf08      	it	eq
 8004352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004356:	f150 0000 	adcs.w	r0, r0, #0
 800435a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800435e:	ea41 0105 	orr.w	r1, r1, r5
 8004362:	bd30      	pop	{r4, r5, pc}
 8004364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004368:	4140      	adcs	r0, r0
 800436a:	eb41 0101 	adc.w	r1, r1, r1
 800436e:	3c01      	subs	r4, #1
 8004370:	bf28      	it	cs
 8004372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8004376:	d2e9      	bcs.n	800434c <__adddf3+0x10c>
 8004378:	f091 0f00 	teq	r1, #0
 800437c:	bf04      	itt	eq
 800437e:	4601      	moveq	r1, r0
 8004380:	2000      	moveq	r0, #0
 8004382:	fab1 f381 	clz	r3, r1
 8004386:	bf08      	it	eq
 8004388:	3320      	addeq	r3, #32
 800438a:	f1a3 030b 	sub.w	r3, r3, #11
 800438e:	f1b3 0220 	subs.w	r2, r3, #32
 8004392:	da0c      	bge.n	80043ae <__adddf3+0x16e>
 8004394:	320c      	adds	r2, #12
 8004396:	dd08      	ble.n	80043aa <__adddf3+0x16a>
 8004398:	f102 0c14 	add.w	ip, r2, #20
 800439c:	f1c2 020c 	rsb	r2, r2, #12
 80043a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80043a4:	fa21 f102 	lsr.w	r1, r1, r2
 80043a8:	e00c      	b.n	80043c4 <__adddf3+0x184>
 80043aa:	f102 0214 	add.w	r2, r2, #20
 80043ae:	bfd8      	it	le
 80043b0:	f1c2 0c20 	rsble	ip, r2, #32
 80043b4:	fa01 f102 	lsl.w	r1, r1, r2
 80043b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043bc:	bfdc      	itt	le
 80043be:	ea41 010c 	orrle.w	r1, r1, ip
 80043c2:	4090      	lslle	r0, r2
 80043c4:	1ae4      	subs	r4, r4, r3
 80043c6:	bfa2      	ittt	ge
 80043c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80043cc:	4329      	orrge	r1, r5
 80043ce:	bd30      	popge	{r4, r5, pc}
 80043d0:	ea6f 0404 	mvn.w	r4, r4
 80043d4:	3c1f      	subs	r4, #31
 80043d6:	da1c      	bge.n	8004412 <__adddf3+0x1d2>
 80043d8:	340c      	adds	r4, #12
 80043da:	dc0e      	bgt.n	80043fa <__adddf3+0x1ba>
 80043dc:	f104 0414 	add.w	r4, r4, #20
 80043e0:	f1c4 0220 	rsb	r2, r4, #32
 80043e4:	fa20 f004 	lsr.w	r0, r0, r4
 80043e8:	fa01 f302 	lsl.w	r3, r1, r2
 80043ec:	ea40 0003 	orr.w	r0, r0, r3
 80043f0:	fa21 f304 	lsr.w	r3, r1, r4
 80043f4:	ea45 0103 	orr.w	r1, r5, r3
 80043f8:	bd30      	pop	{r4, r5, pc}
 80043fa:	f1c4 040c 	rsb	r4, r4, #12
 80043fe:	f1c4 0220 	rsb	r2, r4, #32
 8004402:	fa20 f002 	lsr.w	r0, r0, r2
 8004406:	fa01 f304 	lsl.w	r3, r1, r4
 800440a:	ea40 0003 	orr.w	r0, r0, r3
 800440e:	4629      	mov	r1, r5
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	fa21 f004 	lsr.w	r0, r1, r4
 8004416:	4629      	mov	r1, r5
 8004418:	bd30      	pop	{r4, r5, pc}
 800441a:	f094 0f00 	teq	r4, #0
 800441e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8004422:	bf06      	itte	eq
 8004424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004428:	3401      	addeq	r4, #1
 800442a:	3d01      	subne	r5, #1
 800442c:	e74e      	b.n	80042cc <__adddf3+0x8c>
 800442e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004432:	bf18      	it	ne
 8004434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004438:	d029      	beq.n	800448e <__adddf3+0x24e>
 800443a:	ea94 0f05 	teq	r4, r5
 800443e:	bf08      	it	eq
 8004440:	ea90 0f02 	teqeq	r0, r2
 8004444:	d005      	beq.n	8004452 <__adddf3+0x212>
 8004446:	ea54 0c00 	orrs.w	ip, r4, r0
 800444a:	bf04      	itt	eq
 800444c:	4619      	moveq	r1, r3
 800444e:	4610      	moveq	r0, r2
 8004450:	bd30      	pop	{r4, r5, pc}
 8004452:	ea91 0f03 	teq	r1, r3
 8004456:	bf1e      	ittt	ne
 8004458:	2100      	movne	r1, #0
 800445a:	2000      	movne	r0, #0
 800445c:	bd30      	popne	{r4, r5, pc}
 800445e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8004462:	d105      	bne.n	8004470 <__adddf3+0x230>
 8004464:	0040      	lsls	r0, r0, #1
 8004466:	4149      	adcs	r1, r1
 8004468:	bf28      	it	cs
 800446a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800446e:	bd30      	pop	{r4, r5, pc}
 8004470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8004474:	bf3c      	itt	cc
 8004476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800447a:	bd30      	popcc	{r4, r5, pc}
 800447c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8004484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004488:	f04f 0000 	mov.w	r0, #0
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8004492:	bf1a      	itte	ne
 8004494:	4619      	movne	r1, r3
 8004496:	4610      	movne	r0, r2
 8004498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800449c:	bf1c      	itt	ne
 800449e:	460b      	movne	r3, r1
 80044a0:	4602      	movne	r2, r0
 80044a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044a6:	bf06      	itte	eq
 80044a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044ac:	ea91 0f03 	teqeq	r1, r3
 80044b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044b4:	bd30      	pop	{r4, r5, pc}
 80044b6:	bf00      	nop

080044b8 <__aeabi_ui2d>:
 80044b8:	f090 0f00 	teq	r0, #0
 80044bc:	bf04      	itt	eq
 80044be:	2100      	moveq	r1, #0
 80044c0:	4770      	bxeq	lr
 80044c2:	b530      	push	{r4, r5, lr}
 80044c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	e750      	b.n	8004378 <__adddf3+0x138>
 80044d6:	bf00      	nop

080044d8 <__aeabi_i2d>:
 80044d8:	f090 0f00 	teq	r0, #0
 80044dc:	bf04      	itt	eq
 80044de:	2100      	moveq	r1, #0
 80044e0:	4770      	bxeq	lr
 80044e2:	b530      	push	{r4, r5, lr}
 80044e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80044e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80044ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80044f0:	bf48      	it	mi
 80044f2:	4240      	negmi	r0, r0
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	e73e      	b.n	8004378 <__adddf3+0x138>
 80044fa:	bf00      	nop

080044fc <__aeabi_f2d>:
 80044fc:	0042      	lsls	r2, r0, #1
 80044fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8004502:	ea4f 0131 	mov.w	r1, r1, rrx
 8004506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800450a:	bf1f      	itttt	ne
 800450c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8004510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004518:	4770      	bxne	lr
 800451a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800451e:	bf08      	it	eq
 8004520:	4770      	bxeq	lr
 8004522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004526:	bf04      	itt	eq
 8004528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800452c:	4770      	bxeq	lr
 800452e:	b530      	push	{r4, r5, lr}
 8004530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800453c:	e71c      	b.n	8004378 <__adddf3+0x138>
 800453e:	bf00      	nop

08004540 <__aeabi_ul2d>:
 8004540:	ea50 0201 	orrs.w	r2, r0, r1
 8004544:	bf08      	it	eq
 8004546:	4770      	bxeq	lr
 8004548:	b530      	push	{r4, r5, lr}
 800454a:	f04f 0500 	mov.w	r5, #0
 800454e:	e00a      	b.n	8004566 <__aeabi_l2d+0x16>

08004550 <__aeabi_l2d>:
 8004550:	ea50 0201 	orrs.w	r2, r0, r1
 8004554:	bf08      	it	eq
 8004556:	4770      	bxeq	lr
 8004558:	b530      	push	{r4, r5, lr}
 800455a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800455e:	d502      	bpl.n	8004566 <__aeabi_l2d+0x16>
 8004560:	4240      	negs	r0, r0
 8004562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800456a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800456e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8004572:	f43f aed8 	beq.w	8004326 <__adddf3+0xe6>
 8004576:	f04f 0203 	mov.w	r2, #3
 800457a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800457e:	bf18      	it	ne
 8004580:	3203      	addne	r2, #3
 8004582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8004586:	bf18      	it	ne
 8004588:	3203      	addne	r2, #3
 800458a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800458e:	f1c2 0320 	rsb	r3, r2, #32
 8004592:	fa00 fc03 	lsl.w	ip, r0, r3
 8004596:	fa20 f002 	lsr.w	r0, r0, r2
 800459a:	fa01 fe03 	lsl.w	lr, r1, r3
 800459e:	ea40 000e 	orr.w	r0, r0, lr
 80045a2:	fa21 f102 	lsr.w	r1, r1, r2
 80045a6:	4414      	add	r4, r2
 80045a8:	e6bd      	b.n	8004326 <__adddf3+0xe6>
 80045aa:	bf00      	nop

080045ac <__aeabi_dmul>:
 80045ac:	b570      	push	{r4, r5, r6, lr}
 80045ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80045b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80045b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80045ba:	bf1d      	ittte	ne
 80045bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80045c0:	ea94 0f0c 	teqne	r4, ip
 80045c4:	ea95 0f0c 	teqne	r5, ip
 80045c8:	f000 f8de 	bleq	8004788 <__aeabi_dmul+0x1dc>
 80045cc:	442c      	add	r4, r5
 80045ce:	ea81 0603 	eor.w	r6, r1, r3
 80045d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80045d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80045da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80045de:	bf18      	it	ne
 80045e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80045e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80045e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ec:	d038      	beq.n	8004660 <__aeabi_dmul+0xb4>
 80045ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80045f2:	f04f 0500 	mov.w	r5, #0
 80045f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80045fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80045fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800460a:	f09c 0f00 	teq	ip, #0
 800460e:	bf18      	it	ne
 8004610:	f04e 0e01 	orrne.w	lr, lr, #1
 8004614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8004618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800461c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8004620:	d204      	bcs.n	800462c <__aeabi_dmul+0x80>
 8004622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004626:	416d      	adcs	r5, r5
 8004628:	eb46 0606 	adc.w	r6, r6, r6
 800462c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8004630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800463c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8004640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004644:	bf88      	it	hi
 8004646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800464a:	d81e      	bhi.n	800468a <__aeabi_dmul+0xde>
 800464c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8004650:	bf08      	it	eq
 8004652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004656:	f150 0000 	adcs.w	r0, r0, #0
 800465a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8004664:	ea46 0101 	orr.w	r1, r6, r1
 8004668:	ea40 0002 	orr.w	r0, r0, r2
 800466c:	ea81 0103 	eor.w	r1, r1, r3
 8004670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8004674:	bfc2      	ittt	gt
 8004676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800467a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800467e:	bd70      	popgt	{r4, r5, r6, pc}
 8004680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004684:	f04f 0e00 	mov.w	lr, #0
 8004688:	3c01      	subs	r4, #1
 800468a:	f300 80ab 	bgt.w	80047e4 <__aeabi_dmul+0x238>
 800468e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8004692:	bfde      	ittt	le
 8004694:	2000      	movle	r0, #0
 8004696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800469a:	bd70      	pople	{r4, r5, r6, pc}
 800469c:	f1c4 0400 	rsb	r4, r4, #0
 80046a0:	3c20      	subs	r4, #32
 80046a2:	da35      	bge.n	8004710 <__aeabi_dmul+0x164>
 80046a4:	340c      	adds	r4, #12
 80046a6:	dc1b      	bgt.n	80046e0 <__aeabi_dmul+0x134>
 80046a8:	f104 0414 	add.w	r4, r4, #20
 80046ac:	f1c4 0520 	rsb	r5, r4, #32
 80046b0:	fa00 f305 	lsl.w	r3, r0, r5
 80046b4:	fa20 f004 	lsr.w	r0, r0, r4
 80046b8:	fa01 f205 	lsl.w	r2, r1, r5
 80046bc:	ea40 0002 	orr.w	r0, r0, r2
 80046c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80046c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80046c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80046cc:	fa21 f604 	lsr.w	r6, r1, r4
 80046d0:	eb42 0106 	adc.w	r1, r2, r6
 80046d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80046d8:	bf08      	it	eq
 80046da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80046de:	bd70      	pop	{r4, r5, r6, pc}
 80046e0:	f1c4 040c 	rsb	r4, r4, #12
 80046e4:	f1c4 0520 	rsb	r5, r4, #32
 80046e8:	fa00 f304 	lsl.w	r3, r0, r4
 80046ec:	fa20 f005 	lsr.w	r0, r0, r5
 80046f0:	fa01 f204 	lsl.w	r2, r1, r4
 80046f4:	ea40 0002 	orr.w	r0, r0, r2
 80046f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8004700:	f141 0100 	adc.w	r1, r1, #0
 8004704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004708:	bf08      	it	eq
 800470a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f1c4 0520 	rsb	r5, r4, #32
 8004714:	fa00 f205 	lsl.w	r2, r0, r5
 8004718:	ea4e 0e02 	orr.w	lr, lr, r2
 800471c:	fa20 f304 	lsr.w	r3, r0, r4
 8004720:	fa01 f205 	lsl.w	r2, r1, r5
 8004724:	ea43 0302 	orr.w	r3, r3, r2
 8004728:	fa21 f004 	lsr.w	r0, r1, r4
 800472c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004730:	fa21 f204 	lsr.w	r2, r1, r4
 8004734:	ea20 0002 	bic.w	r0, r0, r2
 8004738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800473c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004740:	bf08      	it	eq
 8004742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f094 0f00 	teq	r4, #0
 800474c:	d10f      	bne.n	800476e <__aeabi_dmul+0x1c2>
 800474e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8004752:	0040      	lsls	r0, r0, #1
 8004754:	eb41 0101 	adc.w	r1, r1, r1
 8004758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800475c:	bf08      	it	eq
 800475e:	3c01      	subeq	r4, #1
 8004760:	d0f7      	beq.n	8004752 <__aeabi_dmul+0x1a6>
 8004762:	ea41 0106 	orr.w	r1, r1, r6
 8004766:	f095 0f00 	teq	r5, #0
 800476a:	bf18      	it	ne
 800476c:	4770      	bxne	lr
 800476e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8004772:	0052      	lsls	r2, r2, #1
 8004774:	eb43 0303 	adc.w	r3, r3, r3
 8004778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800477c:	bf08      	it	eq
 800477e:	3d01      	subeq	r5, #1
 8004780:	d0f7      	beq.n	8004772 <__aeabi_dmul+0x1c6>
 8004782:	ea43 0306 	orr.w	r3, r3, r6
 8004786:	4770      	bx	lr
 8004788:	ea94 0f0c 	teq	r4, ip
 800478c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004790:	bf18      	it	ne
 8004792:	ea95 0f0c 	teqne	r5, ip
 8004796:	d00c      	beq.n	80047b2 <__aeabi_dmul+0x206>
 8004798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800479c:	bf18      	it	ne
 800479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047a2:	d1d1      	bne.n	8004748 <__aeabi_dmul+0x19c>
 80047a4:	ea81 0103 	eor.w	r1, r1, r3
 80047a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047ac:	f04f 0000 	mov.w	r0, #0
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80047b6:	bf06      	itte	eq
 80047b8:	4610      	moveq	r0, r2
 80047ba:	4619      	moveq	r1, r3
 80047bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80047c0:	d019      	beq.n	80047f6 <__aeabi_dmul+0x24a>
 80047c2:	ea94 0f0c 	teq	r4, ip
 80047c6:	d102      	bne.n	80047ce <__aeabi_dmul+0x222>
 80047c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80047cc:	d113      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047ce:	ea95 0f0c 	teq	r5, ip
 80047d2:	d105      	bne.n	80047e0 <__aeabi_dmul+0x234>
 80047d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80047d8:	bf1c      	itt	ne
 80047da:	4610      	movne	r0, r2
 80047dc:	4619      	movne	r1, r3
 80047de:	d10a      	bne.n	80047f6 <__aeabi_dmul+0x24a>
 80047e0:	ea81 0103 	eor.w	r1, r1, r3
 80047e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80047e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80047f0:	f04f 0000 	mov.w	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80047fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80047fe:	bd70      	pop	{r4, r5, r6, pc}

08004800 <__aeabi_ddiv>:
 8004800:	b570      	push	{r4, r5, r6, lr}
 8004802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800480a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800480e:	bf1d      	ittte	ne
 8004810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004814:	ea94 0f0c 	teqne	r4, ip
 8004818:	ea95 0f0c 	teqne	r5, ip
 800481c:	f000 f8a7 	bleq	800496e <__aeabi_ddiv+0x16e>
 8004820:	eba4 0405 	sub.w	r4, r4, r5
 8004824:	ea81 0e03 	eor.w	lr, r1, r3
 8004828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800482c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8004830:	f000 8088 	beq.w	8004944 <__aeabi_ddiv+0x144>
 8004834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800483c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8004840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800484c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8004850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004858:	429d      	cmp	r5, r3
 800485a:	bf08      	it	eq
 800485c:	4296      	cmpeq	r6, r2
 800485e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8004862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004866:	d202      	bcs.n	800486e <__aeabi_ddiv+0x6e>
 8004868:	085b      	lsrs	r3, r3, #1
 800486a:	ea4f 0232 	mov.w	r2, r2, rrx
 800486e:	1ab6      	subs	r6, r6, r2
 8004870:	eb65 0503 	sbc.w	r5, r5, r3
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	ea4f 0232 	mov.w	r2, r2, rrx
 800487a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800487e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8004882:	ebb6 0e02 	subs.w	lr, r6, r2
 8004886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800488a:	bf22      	ittt	cs
 800488c:	1ab6      	subcs	r6, r6, r2
 800488e:	4675      	movcs	r5, lr
 8004890:	ea40 000c 	orrcs.w	r0, r0, ip
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	ea4f 0232 	mov.w	r2, r2, rrx
 800489a:	ebb6 0e02 	subs.w	lr, r6, r2
 800489e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048a2:	bf22      	ittt	cs
 80048a4:	1ab6      	subcs	r6, r6, r2
 80048a6:	4675      	movcs	r5, lr
 80048a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80048b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80048b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048ba:	bf22      	ittt	cs
 80048bc:	1ab6      	subcs	r6, r6, r2
 80048be:	4675      	movcs	r5, lr
 80048c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80048ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80048ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80048d2:	bf22      	ittt	cs
 80048d4:	1ab6      	subcs	r6, r6, r2
 80048d6:	4675      	movcs	r5, lr
 80048d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80048dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80048e0:	d018      	beq.n	8004914 <__aeabi_ddiv+0x114>
 80048e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80048e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80048ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80048ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80048f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80048f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80048fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80048fe:	d1c0      	bne.n	8004882 <__aeabi_ddiv+0x82>
 8004900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004904:	d10b      	bne.n	800491e <__aeabi_ddiv+0x11e>
 8004906:	ea41 0100 	orr.w	r1, r1, r0
 800490a:	f04f 0000 	mov.w	r0, #0
 800490e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004912:	e7b6      	b.n	8004882 <__aeabi_ddiv+0x82>
 8004914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004918:	bf04      	itt	eq
 800491a:	4301      	orreq	r1, r0
 800491c:	2000      	moveq	r0, #0
 800491e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8004922:	bf88      	it	hi
 8004924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8004928:	f63f aeaf 	bhi.w	800468a <__aeabi_dmul+0xde>
 800492c:	ebb5 0c03 	subs.w	ip, r5, r3
 8004930:	bf04      	itt	eq
 8004932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800493a:	f150 0000 	adcs.w	r0, r0, #0
 800493e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8004948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800494c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8004950:	bfc2      	ittt	gt
 8004952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800495a:	bd70      	popgt	{r4, r5, r6, pc}
 800495c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004960:	f04f 0e00 	mov.w	lr, #0
 8004964:	3c01      	subs	r4, #1
 8004966:	e690      	b.n	800468a <__aeabi_dmul+0xde>
 8004968:	ea45 0e06 	orr.w	lr, r5, r6
 800496c:	e68d      	b.n	800468a <__aeabi_dmul+0xde>
 800496e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8004972:	ea94 0f0c 	teq	r4, ip
 8004976:	bf08      	it	eq
 8004978:	ea95 0f0c 	teqeq	r5, ip
 800497c:	f43f af3b 	beq.w	80047f6 <__aeabi_dmul+0x24a>
 8004980:	ea94 0f0c 	teq	r4, ip
 8004984:	d10a      	bne.n	800499c <__aeabi_ddiv+0x19c>
 8004986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800498a:	f47f af34 	bne.w	80047f6 <__aeabi_dmul+0x24a>
 800498e:	ea95 0f0c 	teq	r5, ip
 8004992:	f47f af25 	bne.w	80047e0 <__aeabi_dmul+0x234>
 8004996:	4610      	mov	r0, r2
 8004998:	4619      	mov	r1, r3
 800499a:	e72c      	b.n	80047f6 <__aeabi_dmul+0x24a>
 800499c:	ea95 0f0c 	teq	r5, ip
 80049a0:	d106      	bne.n	80049b0 <__aeabi_ddiv+0x1b0>
 80049a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80049a6:	f43f aefd 	beq.w	80047a4 <__aeabi_dmul+0x1f8>
 80049aa:	4610      	mov	r0, r2
 80049ac:	4619      	mov	r1, r3
 80049ae:	e722      	b.n	80047f6 <__aeabi_dmul+0x24a>
 80049b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80049b4:	bf18      	it	ne
 80049b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80049ba:	f47f aec5 	bne.w	8004748 <__aeabi_dmul+0x19c>
 80049be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80049c2:	f47f af0d 	bne.w	80047e0 <__aeabi_dmul+0x234>
 80049c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80049ca:	f47f aeeb 	bne.w	80047a4 <__aeabi_dmul+0x1f8>
 80049ce:	e712      	b.n	80047f6 <__aeabi_dmul+0x24a>

080049d0 <__gedf2>:
 80049d0:	f04f 3cff 	mov.w	ip, #4294967295
 80049d4:	e006      	b.n	80049e4 <__cmpdf2+0x4>
 80049d6:	bf00      	nop

080049d8 <__ledf2>:
 80049d8:	f04f 0c01 	mov.w	ip, #1
 80049dc:	e002      	b.n	80049e4 <__cmpdf2+0x4>
 80049de:	bf00      	nop

080049e0 <__cmpdf2>:
 80049e0:	f04f 0c01 	mov.w	ip, #1
 80049e4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80049e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80049ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80049f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80049f4:	bf18      	it	ne
 80049f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80049fa:	d01b      	beq.n	8004a34 <__cmpdf2+0x54>
 80049fc:	b001      	add	sp, #4
 80049fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004a02:	bf0c      	ite	eq
 8004a04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004a08:	ea91 0f03 	teqne	r1, r3
 8004a0c:	bf02      	ittt	eq
 8004a0e:	ea90 0f02 	teqeq	r0, r2
 8004a12:	2000      	moveq	r0, #0
 8004a14:	4770      	bxeq	lr
 8004a16:	f110 0f00 	cmn.w	r0, #0
 8004a1a:	ea91 0f03 	teq	r1, r3
 8004a1e:	bf58      	it	pl
 8004a20:	4299      	cmppl	r1, r3
 8004a22:	bf08      	it	eq
 8004a24:	4290      	cmpeq	r0, r2
 8004a26:	bf2c      	ite	cs
 8004a28:	17d8      	asrcs	r0, r3, #31
 8004a2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004a2e:	f040 0001 	orr.w	r0, r0, #1
 8004a32:	4770      	bx	lr
 8004a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a3c:	d102      	bne.n	8004a44 <__cmpdf2+0x64>
 8004a3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a42:	d107      	bne.n	8004a54 <__cmpdf2+0x74>
 8004a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a4c:	d1d6      	bne.n	80049fc <__cmpdf2+0x1c>
 8004a4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a52:	d0d3      	beq.n	80049fc <__cmpdf2+0x1c>
 8004a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop

08004a5c <__aeabi_cdrcmple>:
 8004a5c:	4684      	mov	ip, r0
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4662      	mov	r2, ip
 8004a62:	468c      	mov	ip, r1
 8004a64:	4619      	mov	r1, r3
 8004a66:	4663      	mov	r3, ip
 8004a68:	e000      	b.n	8004a6c <__aeabi_cdcmpeq>
 8004a6a:	bf00      	nop

08004a6c <__aeabi_cdcmpeq>:
 8004a6c:	b501      	push	{r0, lr}
 8004a6e:	f7ff ffb7 	bl	80049e0 <__cmpdf2>
 8004a72:	2800      	cmp	r0, #0
 8004a74:	bf48      	it	mi
 8004a76:	f110 0f00 	cmnmi.w	r0, #0
 8004a7a:	bd01      	pop	{r0, pc}

08004a7c <__aeabi_dcmpeq>:
 8004a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a80:	f7ff fff4 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a84:	bf0c      	ite	eq
 8004a86:	2001      	moveq	r0, #1
 8004a88:	2000      	movne	r0, #0
 8004a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a8e:	bf00      	nop

08004a90 <__aeabi_dcmplt>:
 8004a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004a94:	f7ff ffea 	bl	8004a6c <__aeabi_cdcmpeq>
 8004a98:	bf34      	ite	cc
 8004a9a:	2001      	movcc	r0, #1
 8004a9c:	2000      	movcs	r0, #0
 8004a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aa2:	bf00      	nop

08004aa4 <__aeabi_dcmple>:
 8004aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004aa8:	f7ff ffe0 	bl	8004a6c <__aeabi_cdcmpeq>
 8004aac:	bf94      	ite	ls
 8004aae:	2001      	movls	r0, #1
 8004ab0:	2000      	movhi	r0, #0
 8004ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ab6:	bf00      	nop

08004ab8 <__aeabi_dcmpge>:
 8004ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004abc:	f7ff ffce 	bl	8004a5c <__aeabi_cdrcmple>
 8004ac0:	bf94      	ite	ls
 8004ac2:	2001      	movls	r0, #1
 8004ac4:	2000      	movhi	r0, #0
 8004ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8004aca:	bf00      	nop

08004acc <__aeabi_dcmpgt>:
 8004acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ad0:	f7ff ffc4 	bl	8004a5c <__aeabi_cdrcmple>
 8004ad4:	bf34      	ite	cc
 8004ad6:	2001      	movcc	r0, #1
 8004ad8:	2000      	movcs	r0, #0
 8004ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ade:	bf00      	nop

08004ae0 <__aeabi_dcmpun>:
 8004ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004ae8:	d102      	bne.n	8004af0 <__aeabi_dcmpun+0x10>
 8004aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004aee:	d10a      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004af8:	d102      	bne.n	8004b00 <__aeabi_dcmpun+0x20>
 8004afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004afe:	d102      	bne.n	8004b06 <__aeabi_dcmpun+0x26>
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	f04f 0001 	mov.w	r0, #1
 8004b0a:	4770      	bx	lr

08004b0c <__aeabi_d2f>:
 8004b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004b14:	bf24      	itt	cs
 8004b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004b1e:	d90d      	bls.n	8004b3c <__aeabi_d2f+0x30>
 8004b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004b34:	bf08      	it	eq
 8004b36:	f020 0001 	biceq.w	r0, r0, #1
 8004b3a:	4770      	bx	lr
 8004b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004b40:	d121      	bne.n	8004b86 <__aeabi_d2f+0x7a>
 8004b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004b46:	bfbc      	itt	lt
 8004b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004b4c:	4770      	bxlt	lr
 8004b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004b56:	f1c2 0218 	rsb	r2, r2, #24
 8004b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8004b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8004b62:	fa20 f002 	lsr.w	r0, r0, r2
 8004b66:	bf18      	it	ne
 8004b68:	f040 0001 	orrne.w	r0, r0, #1
 8004b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004b78:	ea40 000c 	orr.w	r0, r0, ip
 8004b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8004b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004b84:	e7cc      	b.n	8004b20 <__aeabi_d2f+0x14>
 8004b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004b8a:	d107      	bne.n	8004b9c <__aeabi_d2f+0x90>
 8004b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8004b90:	bf1e      	ittt	ne
 8004b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004b9a:	4770      	bxne	lr
 8004b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8004ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <__aeabi_uldivmod>:
 8004bac:	b953      	cbnz	r3, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bae:	b94a      	cbnz	r2, 8004bc4 <__aeabi_uldivmod+0x18>
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	bf08      	it	eq
 8004bb4:	2800      	cmpeq	r0, #0
 8004bb6:	bf1c      	itt	ne
 8004bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8004bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8004bc0:	f000 b970 	b.w	8004ea4 <__aeabi_idiv0>
 8004bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8004bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004bcc:	f000 f806 	bl	8004bdc <__udivmoddi4>
 8004bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bd8:	b004      	add	sp, #16
 8004bda:	4770      	bx	lr

08004bdc <__udivmoddi4>:
 8004bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	9e08      	ldr	r6, [sp, #32]
 8004be2:	460d      	mov	r5, r1
 8004be4:	4604      	mov	r4, r0
 8004be6:	460f      	mov	r7, r1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d14a      	bne.n	8004c82 <__udivmoddi4+0xa6>
 8004bec:	428a      	cmp	r2, r1
 8004bee:	4694      	mov	ip, r2
 8004bf0:	d965      	bls.n	8004cbe <__udivmoddi4+0xe2>
 8004bf2:	fab2 f382 	clz	r3, r2
 8004bf6:	b143      	cbz	r3, 8004c0a <__udivmoddi4+0x2e>
 8004bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8004bfc:	f1c3 0220 	rsb	r2, r3, #32
 8004c00:	409f      	lsls	r7, r3
 8004c02:	fa20 f202 	lsr.w	r2, r0, r2
 8004c06:	4317      	orrs	r7, r2
 8004c08:	409c      	lsls	r4, r3
 8004c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004c0e:	fa1f f58c 	uxth.w	r5, ip
 8004c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8004c16:	0c22      	lsrs	r2, r4, #16
 8004c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8004c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c20:	fb01 f005 	mul.w	r0, r1, r5
 8004c24:	4290      	cmp	r0, r2
 8004c26:	d90a      	bls.n	8004c3e <__udivmoddi4+0x62>
 8004c28:	eb1c 0202 	adds.w	r2, ip, r2
 8004c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8004c30:	f080 811c 	bcs.w	8004e6c <__udivmoddi4+0x290>
 8004c34:	4290      	cmp	r0, r2
 8004c36:	f240 8119 	bls.w	8004e6c <__udivmoddi4+0x290>
 8004c3a:	3902      	subs	r1, #2
 8004c3c:	4462      	add	r2, ip
 8004c3e:	1a12      	subs	r2, r2, r0
 8004c40:	b2a4      	uxth	r4, r4
 8004c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8004c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8004c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004c4e:	fb00 f505 	mul.w	r5, r0, r5
 8004c52:	42a5      	cmp	r5, r4
 8004c54:	d90a      	bls.n	8004c6c <__udivmoddi4+0x90>
 8004c56:	eb1c 0404 	adds.w	r4, ip, r4
 8004c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8004c5e:	f080 8107 	bcs.w	8004e70 <__udivmoddi4+0x294>
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	f240 8104 	bls.w	8004e70 <__udivmoddi4+0x294>
 8004c68:	4464      	add	r4, ip
 8004c6a:	3802      	subs	r0, #2
 8004c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8004c70:	1b64      	subs	r4, r4, r5
 8004c72:	2100      	movs	r1, #0
 8004c74:	b11e      	cbz	r6, 8004c7e <__udivmoddi4+0xa2>
 8004c76:	40dc      	lsrs	r4, r3
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	428b      	cmp	r3, r1
 8004c84:	d908      	bls.n	8004c98 <__udivmoddi4+0xbc>
 8004c86:	2e00      	cmp	r6, #0
 8004c88:	f000 80ed 	beq.w	8004e66 <__udivmoddi4+0x28a>
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8004c92:	4608      	mov	r0, r1
 8004c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c98:	fab3 f183 	clz	r1, r3
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	d149      	bne.n	8004d34 <__udivmoddi4+0x158>
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	d302      	bcc.n	8004caa <__udivmoddi4+0xce>
 8004ca4:	4282      	cmp	r2, r0
 8004ca6:	f200 80f8 	bhi.w	8004e9a <__udivmoddi4+0x2be>
 8004caa:	1a84      	subs	r4, r0, r2
 8004cac:	eb65 0203 	sbc.w	r2, r5, r3
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	4617      	mov	r7, r2
 8004cb4:	2e00      	cmp	r6, #0
 8004cb6:	d0e2      	beq.n	8004c7e <__udivmoddi4+0xa2>
 8004cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8004cbc:	e7df      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004cbe:	b902      	cbnz	r2, 8004cc2 <__udivmoddi4+0xe6>
 8004cc0:	deff      	udf	#255	; 0xff
 8004cc2:	fab2 f382 	clz	r3, r2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f040 8090 	bne.w	8004dec <__udivmoddi4+0x210>
 8004ccc:	1a8a      	subs	r2, r1, r2
 8004cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004cd2:	fa1f fe8c 	uxth.w	lr, ip
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8004cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8004ce0:	0c22      	lsrs	r2, r4, #16
 8004ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004ce6:	fb0e f005 	mul.w	r0, lr, r5
 8004cea:	4290      	cmp	r0, r2
 8004cec:	d908      	bls.n	8004d00 <__udivmoddi4+0x124>
 8004cee:	eb1c 0202 	adds.w	r2, ip, r2
 8004cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8004cf6:	d202      	bcs.n	8004cfe <__udivmoddi4+0x122>
 8004cf8:	4290      	cmp	r0, r2
 8004cfa:	f200 80cb 	bhi.w	8004e94 <__udivmoddi4+0x2b8>
 8004cfe:	4645      	mov	r5, r8
 8004d00:	1a12      	subs	r2, r2, r0
 8004d02:	b2a4      	uxth	r4, r4
 8004d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8004d08:	fb07 2210 	mls	r2, r7, r0, r2
 8004d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004d10:	fb0e fe00 	mul.w	lr, lr, r0
 8004d14:	45a6      	cmp	lr, r4
 8004d16:	d908      	bls.n	8004d2a <__udivmoddi4+0x14e>
 8004d18:	eb1c 0404 	adds.w	r4, ip, r4
 8004d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8004d20:	d202      	bcs.n	8004d28 <__udivmoddi4+0x14c>
 8004d22:	45a6      	cmp	lr, r4
 8004d24:	f200 80bb 	bhi.w	8004e9e <__udivmoddi4+0x2c2>
 8004d28:	4610      	mov	r0, r2
 8004d2a:	eba4 040e 	sub.w	r4, r4, lr
 8004d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8004d32:	e79f      	b.n	8004c74 <__udivmoddi4+0x98>
 8004d34:	f1c1 0720 	rsb	r7, r1, #32
 8004d38:	408b      	lsls	r3, r1
 8004d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8004d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8004d42:	fa05 f401 	lsl.w	r4, r5, r1
 8004d46:	fa20 f307 	lsr.w	r3, r0, r7
 8004d4a:	40fd      	lsrs	r5, r7
 8004d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8004d50:	4323      	orrs	r3, r4
 8004d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8004d56:	fa1f fe8c 	uxth.w	lr, ip
 8004d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8004d5e:	0c1c      	lsrs	r4, r3, #16
 8004d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004d64:	fb08 f50e 	mul.w	r5, r8, lr
 8004d68:	42a5      	cmp	r5, r4
 8004d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8004d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8004d72:	d90b      	bls.n	8004d8c <__udivmoddi4+0x1b0>
 8004d74:	eb1c 0404 	adds.w	r4, ip, r4
 8004d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d7c:	f080 8088 	bcs.w	8004e90 <__udivmoddi4+0x2b4>
 8004d80:	42a5      	cmp	r5, r4
 8004d82:	f240 8085 	bls.w	8004e90 <__udivmoddi4+0x2b4>
 8004d86:	f1a8 0802 	sub.w	r8, r8, #2
 8004d8a:	4464      	add	r4, ip
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	b29d      	uxth	r5, r3
 8004d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8004d94:	fb09 4413 	mls	r4, r9, r3, r4
 8004d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8004da0:	45a6      	cmp	lr, r4
 8004da2:	d908      	bls.n	8004db6 <__udivmoddi4+0x1da>
 8004da4:	eb1c 0404 	adds.w	r4, ip, r4
 8004da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8004dac:	d26c      	bcs.n	8004e88 <__udivmoddi4+0x2ac>
 8004dae:	45a6      	cmp	lr, r4
 8004db0:	d96a      	bls.n	8004e88 <__udivmoddi4+0x2ac>
 8004db2:	3b02      	subs	r3, #2
 8004db4:	4464      	add	r4, ip
 8004db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004dba:	fba3 9502 	umull	r9, r5, r3, r2
 8004dbe:	eba4 040e 	sub.w	r4, r4, lr
 8004dc2:	42ac      	cmp	r4, r5
 8004dc4:	46c8      	mov	r8, r9
 8004dc6:	46ae      	mov	lr, r5
 8004dc8:	d356      	bcc.n	8004e78 <__udivmoddi4+0x29c>
 8004dca:	d053      	beq.n	8004e74 <__udivmoddi4+0x298>
 8004dcc:	b156      	cbz	r6, 8004de4 <__udivmoddi4+0x208>
 8004dce:	ebb0 0208 	subs.w	r2, r0, r8
 8004dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8004dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8004dda:	40ca      	lsrs	r2, r1
 8004ddc:	40cc      	lsrs	r4, r1
 8004dde:	4317      	orrs	r7, r2
 8004de0:	e9c6 7400 	strd	r7, r4, [r6]
 8004de4:	4618      	mov	r0, r3
 8004de6:	2100      	movs	r1, #0
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	f1c3 0120 	rsb	r1, r3, #32
 8004df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8004df4:	fa20 f201 	lsr.w	r2, r0, r1
 8004df8:	fa25 f101 	lsr.w	r1, r5, r1
 8004dfc:	409d      	lsls	r5, r3
 8004dfe:	432a      	orrs	r2, r5
 8004e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8004e04:	fa1f fe8c 	uxth.w	lr, ip
 8004e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8004e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8004e10:	0c11      	lsrs	r1, r2, #16
 8004e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e16:	fb00 f50e 	mul.w	r5, r0, lr
 8004e1a:	428d      	cmp	r5, r1
 8004e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8004e20:	d908      	bls.n	8004e34 <__udivmoddi4+0x258>
 8004e22:	eb1c 0101 	adds.w	r1, ip, r1
 8004e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8004e2a:	d22f      	bcs.n	8004e8c <__udivmoddi4+0x2b0>
 8004e2c:	428d      	cmp	r5, r1
 8004e2e:	d92d      	bls.n	8004e8c <__udivmoddi4+0x2b0>
 8004e30:	3802      	subs	r0, #2
 8004e32:	4461      	add	r1, ip
 8004e34:	1b49      	subs	r1, r1, r5
 8004e36:	b292      	uxth	r2, r2
 8004e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8004e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8004e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e44:	fb05 f10e 	mul.w	r1, r5, lr
 8004e48:	4291      	cmp	r1, r2
 8004e4a:	d908      	bls.n	8004e5e <__udivmoddi4+0x282>
 8004e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8004e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8004e54:	d216      	bcs.n	8004e84 <__udivmoddi4+0x2a8>
 8004e56:	4291      	cmp	r1, r2
 8004e58:	d914      	bls.n	8004e84 <__udivmoddi4+0x2a8>
 8004e5a:	3d02      	subs	r5, #2
 8004e5c:	4462      	add	r2, ip
 8004e5e:	1a52      	subs	r2, r2, r1
 8004e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004e64:	e738      	b.n	8004cd8 <__udivmoddi4+0xfc>
 8004e66:	4631      	mov	r1, r6
 8004e68:	4630      	mov	r0, r6
 8004e6a:	e708      	b.n	8004c7e <__udivmoddi4+0xa2>
 8004e6c:	4639      	mov	r1, r7
 8004e6e:	e6e6      	b.n	8004c3e <__udivmoddi4+0x62>
 8004e70:	4610      	mov	r0, r2
 8004e72:	e6fb      	b.n	8004c6c <__udivmoddi4+0x90>
 8004e74:	4548      	cmp	r0, r9
 8004e76:	d2a9      	bcs.n	8004dcc <__udivmoddi4+0x1f0>
 8004e78:	ebb9 0802 	subs.w	r8, r9, r2
 8004e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8004e80:	3b01      	subs	r3, #1
 8004e82:	e7a3      	b.n	8004dcc <__udivmoddi4+0x1f0>
 8004e84:	4645      	mov	r5, r8
 8004e86:	e7ea      	b.n	8004e5e <__udivmoddi4+0x282>
 8004e88:	462b      	mov	r3, r5
 8004e8a:	e794      	b.n	8004db6 <__udivmoddi4+0x1da>
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	e7d1      	b.n	8004e34 <__udivmoddi4+0x258>
 8004e90:	46d0      	mov	r8, sl
 8004e92:	e77b      	b.n	8004d8c <__udivmoddi4+0x1b0>
 8004e94:	3d02      	subs	r5, #2
 8004e96:	4462      	add	r2, ip
 8004e98:	e732      	b.n	8004d00 <__udivmoddi4+0x124>
 8004e9a:	4608      	mov	r0, r1
 8004e9c:	e70a      	b.n	8004cb4 <__udivmoddi4+0xd8>
 8004e9e:	4464      	add	r4, ip
 8004ea0:	3802      	subs	r0, #2
 8004ea2:	e742      	b.n	8004d2a <__udivmoddi4+0x14e>

08004ea4 <__aeabi_idiv0>:
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop

08004ea8 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004eae:	463b      	mov	r3, r7
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00c fa4f 	bl	8011358 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004eba:	4b3a      	ldr	r3, [pc, #232]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <MX_ADC2_Init+0x100>)
 8004ebe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8004ec0:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ec2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8004ec6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004ec8:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ece:	4b35      	ldr	r3, [pc, #212]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004ed4:	4b33      	ldr	r3, [pc, #204]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004eda:	4b32      	ldr	r3, [pc, #200]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004ee6:	4b2f      	ldr	r3, [pc, #188]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004eec:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 3;
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ef8:	4b2a      	ldr	r3, [pc, #168]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f06:	4b27      	ldr	r3, [pc, #156]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8004f1c:	4b21      	ldr	r3, [pc, #132]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004f24:	481f      	ldr	r0, [pc, #124]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f26:	f003 fafd 	bl	8008524 <HAL_ADC_Init>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8004f30:	f002 f948 	bl	80071c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004f34:	4b1d      	ldr	r3, [pc, #116]	; (8004fac <MX_ADC2_Init+0x104>)
 8004f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f38:	2306      	movs	r3, #6
 8004f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <MX_ADC2_Init+0x108>)
 8004f42:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004f44:	2304      	movs	r3, #4
 8004f46:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f4c:	463b      	mov	r3, r7
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4814      	ldr	r0, [pc, #80]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f52:	f003 fd9b 	bl	8008a8c <HAL_ADC_ConfigChannel>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d001      	beq.n	8004f60 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8004f5c:	f002 f932 	bl	80071c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <MX_ADC2_Init+0x10c>)
 8004f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004f64:	230c      	movs	r3, #12
 8004f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f68:	463b      	mov	r3, r7
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f6e:	f003 fd8d 	bl	8008a8c <HAL_ADC_ConfigChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8004f78:	f002 f924 	bl	80071c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004f7c:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <MX_ADC2_Init+0x110>)
 8004f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004f80:	2312      	movs	r3, #18
 8004f82:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004f84:	237f      	movs	r3, #127	; 0x7f
 8004f86:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004f88:	463b      	mov	r3, r7
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <MX_ADC2_Init+0xfc>)
 8004f8e:	f003 fd7d 	bl	8008a8c <HAL_ADC_ConfigChannel>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <MX_ADC2_Init+0xf4>
  {
    Error_Handler();
 8004f98:	f002 f914 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004f9c:	bf00      	nop
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000094 	.word	0x20000094
 8004fa8:	50000100 	.word	0x50000100
 8004fac:	04300002 	.word	0x04300002
 8004fb0:	407f0000 	.word	0x407f0000
 8004fb4:	19200040 	.word	0x19200040
 8004fb8:	2a000400 	.word	0x2a000400

08004fbc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b0a0      	sub	sp, #128	; 0x80
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	609a      	str	r2, [r3, #8]
 8004fd0:	60da      	str	r2, [r3, #12]
 8004fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fd4:	f107 0318 	add.w	r3, r7, #24
 8004fd8:	2254      	movs	r2, #84	; 0x54
 8004fda:	2100      	movs	r1, #0
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f00c f9bb 	bl	8011358 <memset>
  if(adcHandle->Instance==ADC2)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a4c      	ldr	r2, [pc, #304]	; (8005118 <HAL_ADC_MspInit+0x15c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8090 	bne.w	800510e <HAL_ADC_MspInit+0x152>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ff4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ffa:	f107 0318 	add.w	r3, r7, #24
 8004ffe:	4618      	mov	r0, r3
 8005000:	f006 fc68 	bl	800b8d4 <HAL_RCCEx_PeriphCLKConfig>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800500a:	f002 f8db 	bl	80071c4 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800500e:	4b43      	ldr	r3, [pc, #268]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	4a42      	ldr	r2, [pc, #264]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_ADC_MspInit+0x160>)
 800501c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005026:	4b3d      	ldr	r3, [pc, #244]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502a:	4a3c      	ldr	r2, [pc, #240]	; (800511c <HAL_ADC_MspInit+0x160>)
 800502c:	f043 0320 	orr.w	r3, r3, #32
 8005030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005032:	4b3a      	ldr	r3, [pc, #232]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	4a36      	ldr	r2, [pc, #216]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005044:	f043 0304 	orr.w	r3, r3, #4
 8005048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800504a:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_ADC_MspInit+0x160>)
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505a:	4a30      	ldr	r2, [pc, #192]	; (800511c <HAL_ADC_MspInit+0x160>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005062:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_ADC_MspInit+0x160>)
 8005064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    PA1     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800506e:	2302      	movs	r3, #2
 8005070:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005072:	2303      	movs	r3, #3
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005076:	2300      	movs	r3, #0
 8005078:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800507a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800507e:	4619      	mov	r1, r3
 8005080:	4827      	ldr	r0, [pc, #156]	; (8005120 <HAL_ADC_MspInit+0x164>)
 8005082:	f004 fe4b 	bl	8009d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005086:	2303      	movs	r3, #3
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800508a:	2303      	movs	r3, #3
 800508c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508e:	2300      	movs	r3, #0
 8005090:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005092:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005096:	4619      	mov	r1, r3
 8005098:	4822      	ldr	r0, [pc, #136]	; (8005124 <HAL_ADC_MspInit+0x168>)
 800509a:	f004 fe3f 	bl	8009d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800509e:	2303      	movs	r3, #3
 80050a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050a2:	2303      	movs	r3, #3
 80050a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050aa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80050ae:	4619      	mov	r1, r3
 80050b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050b4:	f004 fe32 	bl	8009d1c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_ADC_MspInit+0x170>)
 80050bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c0:	2224      	movs	r2, #36	; 0x24
 80050c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050c4:	4b18      	ldr	r3, [pc, #96]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80050ca:	4b17      	ldr	r3, [pc, #92]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80050d0:	4b15      	ldr	r3, [pc, #84]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d2:	2280      	movs	r2, #128	; 0x80
 80050d4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050dc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050e4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80050e6:	4b10      	ldr	r3, [pc, #64]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050e8:	2220      	movs	r2, #32
 80050ea:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80050ec:	4b0e      	ldr	r3, [pc, #56]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80050f2:	480d      	ldr	r0, [pc, #52]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 80050f4:	f004 fae0 	bl	80096b8 <HAL_DMA_Init>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 80050fe:	f002 f861 	bl	80071c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 8005106:	655a      	str	r2, [r3, #84]	; 0x54
 8005108:	4a07      	ldr	r2, [pc, #28]	; (8005128 <HAL_ADC_MspInit+0x16c>)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800510e:	bf00      	nop
 8005110:	3780      	adds	r7, #128	; 0x80
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	50000100 	.word	0x50000100
 800511c:	40021000 	.word	0x40021000
 8005120:	48001400 	.word	0x48001400
 8005124:	48000800 	.word	0x48000800
 8005128:	20000100 	.word	0x20000100
 800512c:	40020008 	.word	0x40020008

08005130 <Battery_ReadBatteryVoltage>:

#include "adc_voltage_current_measurement.h"



void Battery_ReadBatteryVoltage(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
	battery_struct->BatteryVoltage = (BatteryMonitoringData[BATTERY_VOLTAGE_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff f9c9 	bl	80044d8 <__aeabi_i2d>
 8005146:	a30f      	add	r3, pc, #60	; (adr r3, 8005184 <Battery_ReadBatteryVoltage+0x54>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7ff fa2e 	bl	80045ac <__aeabi_dmul>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4610      	mov	r0, r2
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	4b08      	ldr	r3, [pc, #32]	; (8005180 <Battery_ReadBatteryVoltage+0x50>)
 800515e:	f7ff fb4f 	bl	8004800 <__aeabi_ddiv>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4610      	mov	r0, r2
 8005168:	4619      	mov	r1, r3
 800516a:	f7ff fccf 	bl	8004b0c <__aeabi_d2f>
 800516e:	4602      	mov	r2, r0
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
}
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	f3af 8000 	nop.w
 8005180:	40b00000 	.word	0x40b00000
 8005184:	66666666 	.word	0x66666666
 8005188:	400a6666 	.word	0x400a6666
 800518c:	00000000 	.word	0x00000000

08005190 <Battery_ReadCurrent3V3>:

void Battery_ReadCurrent3V3(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_3V3CURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	3302      	adds	r3, #2
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff f999 	bl	80044d8 <__aeabi_i2d>
 80051a6:	a319      	add	r3, pc, #100	; (adr r3, 800520c <Battery_ReadCurrent3V3+0x7c>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7ff f9fe 	bl	80045ac <__aeabi_dmul>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4610      	mov	r0, r2
 80051b6:	4619      	mov	r1, r3
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <Battery_ReadCurrent3V3+0x78>)
 80051be:	f7ff fb1f 	bl	8004800 <__aeabi_ddiv>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7ff fc9f 	bl	8004b0c <__aeabi_d2f>
 80051ce:	4603      	mov	r3, r0
 80051d0:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption3V3 = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff f992 	bl	80044fc <__aeabi_f2d>
 80051d8:	a309      	add	r3, pc, #36	; (adr r3, 8005200 <Battery_ReadCurrent3V3+0x70>)
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f7ff fb0f 	bl	8004800 <__aeabi_ddiv>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	4610      	mov	r0, r2
 80051e8:	4619      	mov	r1, r3
 80051ea:	f7ff fc8f 	bl	8004b0c <__aeabi_d2f>
 80051ee:	4602      	mov	r2, r0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	605a      	str	r2, [r3, #4]
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	f3af 8000 	nop.w
 8005200:	d2f1a9fc 	.word	0xd2f1a9fc
 8005204:	3f60624d 	.word	0x3f60624d
 8005208:	40b00000 	.word	0x40b00000
 800520c:	66666666 	.word	0x66666666
 8005210:	400a6666 	.word	0x400a6666
 8005214:	00000000 	.word	0x00000000

08005218 <Battery_ReadCurrent5V>:

void Battery_ReadCurrent5V(Battery_t * battery_struct,uint16_t BatteryMonitoringData[]){
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
	float32_t shunt_resistor_voltage = (BatteryMonitoringData[BATTERY_5VCURR_RANK]*ADC_VOLTAGE_REF)/ADC_BIT_VALUE;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff f956 	bl	80044d8 <__aeabi_i2d>
 800522c:	a319      	add	r3, pc, #100	; (adr r3, 8005294 <Battery_ReadCurrent5V+0x7c>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7ff f9bb 	bl	80045ac <__aeabi_dmul>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4610      	mov	r0, r2
 800523c:	4619      	mov	r1, r3
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	4b13      	ldr	r3, [pc, #76]	; (8005290 <Battery_ReadCurrent5V+0x78>)
 8005244:	f7ff fadc 	bl	8004800 <__aeabi_ddiv>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	f7ff fc5c 	bl	8004b0c <__aeabi_d2f>
 8005254:	4603      	mov	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]
	battery_struct->CurrentConsumption5V = shunt_resistor_voltage/SHUNT_RESISTOR_VALUE;
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff f94f 	bl	80044fc <__aeabi_f2d>
 800525e:	a30a      	add	r3, pc, #40	; (adr r3, 8005288 <Battery_ReadCurrent5V+0x70>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7ff facc 	bl	8004800 <__aeabi_ddiv>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff fc4c 	bl	8004b0c <__aeabi_d2f>
 8005274:	4602      	mov	r2, r0
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	609a      	str	r2, [r3, #8]
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	f3af 8000 	nop.w
 8005288:	d2f1a9fc 	.word	0xd2f1a9fc
 800528c:	3f60624d 	.word	0x3f60624d
 8005290:	40b00000 	.word	0x40b00000
 8005294:	66666666 	.word	0x66666666
 8005298:	400a6666 	.word	0x400a6666
 800529c:	00000000 	.word	0x00000000

080052a0 <Battery_RemaningTime>:

void Battery_RemaningTime(Battery_t * battery_struct){
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

	float32_t current_average = battery_struct->CurrentConsumption3V3 + battery_struct->CurrentConsumption5V;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80052b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]
	float32_t battery_remaining_hour = BATTERRY_CAPACITY/current_average;
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff f91d 	bl	80044fc <__aeabi_f2d>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	a10f      	add	r1, pc, #60	; (adr r1, 8005304 <Battery_RemaningTime+0x64>)
 80052c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052cc:	f7ff fa98 	bl	8004800 <__aeabi_ddiv>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4610      	mov	r0, r2
 80052d6:	4619      	mov	r1, r3
 80052d8:	f7ff fc18 	bl	8004b0c <__aeabi_d2f>
 80052dc:	4603      	mov	r3, r0
 80052de:	60bb      	str	r3, [r7, #8]
	battery_struct->battery_left_ms = (battery_remaining_hour*3600000);
 80052e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80052e4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005300 <Battery_RemaningTime+0x60>
 80052e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052f0:	ee17 2a90 	vmov	r2, s15
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	60da      	str	r2, [r3, #12]
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	4a5bba00 	.word	0x4a5bba00
 8005304:	9999999a 	.word	0x9999999a
 8005308:	40019999 	.word	0x40019999

0800530c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b0b4      	sub	sp, #208	; 0xd0
 8005310:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Init */

	/*Configure output for timer*/
	PropulsionAndControl_Init(&HDW_CONTROLLER_struct, ESC_GPIO_PIN, ESC_GPIO_PORT, SERVO_LEFT_GPIO_PIN, SERVO_LEFT_GPIO_PORT, SERVO_RIGHT_GPIO_PIN, SERVO_RIGHT_GPIO_PORT, ESC_TIMER_CHANNEL_NBR, SERVO_LEFT_TIMER_CHANNEL_NBR, SERVO_RIGHT_TIMER_CHANNEL_NBR, &htim4);
 8005312:	4b63      	ldr	r3, [pc, #396]	; (80054a0 <MX_FREERTOS_Init+0x194>)
 8005314:	9306      	str	r3, [sp, #24]
 8005316:	2302      	movs	r3, #2
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	2301      	movs	r3, #1
 800531c:	9304      	str	r3, [sp, #16]
 800531e:	2304      	movs	r3, #4
 8005320:	9303      	str	r3, [sp, #12]
 8005322:	4b60      	ldr	r3, [pc, #384]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 8005324:	9302      	str	r3, [sp, #8]
 8005326:	2380      	movs	r3, #128	; 0x80
 8005328:	9301      	str	r3, [sp, #4]
 800532a:	4b5e      	ldr	r3, [pc, #376]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	2340      	movs	r3, #64	; 0x40
 8005330:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <MX_FREERTOS_Init+0x198>)
 8005332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005336:	485c      	ldr	r0, [pc, #368]	; (80054a8 <MX_FREERTOS_Init+0x19c>)
 8005338:	f002 f9ba 	bl	80076b0 <PropulsionAndControl_Init>

	/*Init for IMU sensors*/
	BNO055_Init(&hi2c2, &IMU_BNO055_struct);
 800533c:	495b      	ldr	r1, [pc, #364]	; (80054ac <MX_FREERTOS_Init+0x1a0>)
 800533e:	485c      	ldr	r0, [pc, #368]	; (80054b0 <MX_FREERTOS_Init+0x1a4>)
 8005340:	f000 fe11 	bl	8005f66 <BNO055_Init>


  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of I2C_Controller */
  osMutexDef(I2C_Controller);
 8005344:	2300      	movs	r3, #0
 8005346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  I2C_ControllerHandle = osMutexCreate(osMutex(I2C_Controller));
 800534a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800534e:	4618      	mov	r0, r3
 8005350:	f009 ff26 	bl	800f1a0 <osMutexCreate>
 8005354:	4603      	mov	r3, r0
 8005356:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <MX_FREERTOS_Init+0x1a8>)
 8005358:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of GPS_UART_Semaphore */
  osSemaphoreDef(GPS_UART_Semaphore);
 800535a:	2300      	movs	r3, #0
 800535c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  GPS_UART_SemaphoreHandle = osSemaphoreCreate(osSemaphore(GPS_UART_Semaphore), 1);
 8005360:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8005364:	2101      	movs	r1, #1
 8005366:	4618      	mov	r0, r3
 8005368:	f009 ff26 	bl	800f1b8 <osSemaphoreCreate>
 800536c:	4603      	mov	r3, r0
 800536e:	4a52      	ldr	r2, [pc, #328]	; (80054b8 <MX_FREERTOS_Init+0x1ac>)
 8005370:	6013      	str	r3, [r2, #0]

  /* definition and creation of HG_PROTECTION_SEM */
  osSemaphoreDef(HG_PROTECTION_SEM);
 8005372:	2300      	movs	r3, #0
 8005374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  HG_PROTECTION_SEMHandle = osSemaphoreCreate(osSemaphore(HG_PROTECTION_SEM), 1);
 8005378:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800537c:	2101      	movs	r1, #1
 800537e:	4618      	mov	r0, r3
 8005380:	f009 ff1a 	bl	800f1b8 <osSemaphoreCreate>
 8005384:	4603      	mov	r3, r0
 8005386:	4a4d      	ldr	r2, [pc, #308]	; (80054bc <MX_FREERTOS_Init+0x1b0>)
 8005388:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LedTask */
  osThreadDef(LedTask, StartLedTask, osPriorityNormal, 0, 128);
 800538a:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <MX_FREERTOS_Init+0x1b4>)
 800538c:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8005390:	461d      	mov	r5, r3
 8005392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	6023      	str	r3, [r4, #0]
  LedTaskHandle = osThreadCreate(osThread(LedTask), NULL);
 800539a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f009 fec2 	bl	800f12a <osThreadCreate>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a46      	ldr	r2, [pc, #280]	; (80054c4 <MX_FREERTOS_Init+0x1b8>)
 80053aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of Roll_PID */
  osThreadDef(Roll_PID, StartRoll_PID, osPriorityLow, 0, 128);
 80053ac:	4b46      	ldr	r3, [pc, #280]	; (80054c8 <MX_FREERTOS_Init+0x1bc>)
 80053ae:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80053b2:	461d      	mov	r5, r3
 80053b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	6023      	str	r3, [r4, #0]
  Roll_PIDHandle = osThreadCreate(osThread(Roll_PID), NULL);
 80053bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80053c0:	2100      	movs	r1, #0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f009 feb1 	bl	800f12a <osThreadCreate>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4a40      	ldr	r2, [pc, #256]	; (80054cc <MX_FREERTOS_Init+0x1c0>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* definition and creation of Pitch_PID */
  osThreadDef(Pitch_PID, StartPitch_PID, osPriorityLow, 0, 128);
 80053ce:	4b40      	ldr	r3, [pc, #256]	; (80054d0 <MX_FREERTOS_Init+0x1c4>)
 80053d0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80053d4:	461d      	mov	r5, r3
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	6023      	str	r3, [r4, #0]
  Pitch_PIDHandle = osThreadCreate(osThread(Pitch_PID), NULL);
 80053de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80053e2:	2100      	movs	r1, #0
 80053e4:	4618      	mov	r0, r3
 80053e6:	f009 fea0 	bl	800f12a <osThreadCreate>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <MX_FREERTOS_Init+0x1c8>)
 80053ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of Yaw_PID */
  osThreadDef(Yaw_PID, StartYaw_PID, osPriorityLow, 0, 128);
 80053f0:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <MX_FREERTOS_Init+0x1cc>)
 80053f2:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80053f6:	461d      	mov	r5, r3
 80053f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	6023      	str	r3, [r4, #0]
  Yaw_PIDHandle = osThreadCreate(osThread(Yaw_PID), NULL);
 8005400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005404:	2100      	movs	r1, #0
 8005406:	4618      	mov	r0, r3
 8005408:	f009 fe8f 	bl	800f12a <osThreadCreate>
 800540c:	4603      	mov	r3, r0
 800540e:	4a33      	ldr	r2, [pc, #204]	; (80054dc <MX_FREERTOS_Init+0x1d0>)
 8005410:	6013      	str	r3, [r2, #0]

  /* definition and creation of PressureMonitor */
  osThreadDef(PressureMonitor, StartPressureMonitor, osPriorityLow, 0, 128);
 8005412:	4b33      	ldr	r3, [pc, #204]	; (80054e0 <MX_FREERTOS_Init+0x1d4>)
 8005414:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8005418:	461d      	mov	r5, r3
 800541a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800541c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	6023      	str	r3, [r4, #0]
  PressureMonitorHandle = osThreadCreate(osThread(PressureMonitor), NULL);
 8005422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005426:	2100      	movs	r1, #0
 8005428:	4618      	mov	r0, r3
 800542a:	f009 fe7e 	bl	800f12a <osThreadCreate>
 800542e:	4603      	mov	r3, r0
 8005430:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <MX_FREERTOS_Init+0x1d8>)
 8005432:	6013      	str	r3, [r2, #0]

  /* definition and creation of GPS */
  osThreadDef(GPS, StartGPS, osPriorityLow, 0, 128);
 8005434:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <MX_FREERTOS_Init+0x1dc>)
 8005436:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800543a:	461d      	mov	r5, r3
 800543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	6023      	str	r3, [r4, #0]
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 8005444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f009 fe6d 	bl	800f12a <osThreadCreate>
 8005450:	4603      	mov	r3, r0
 8005452:	4a26      	ldr	r2, [pc, #152]	; (80054ec <MX_FREERTOS_Init+0x1e0>)
 8005454:	6013      	str	r3, [r2, #0]

  /* definition and creation of MainTask */
  osThreadDef(MainTask, StartMainTask, osPriorityLow, 0, 256);
 8005456:	4b26      	ldr	r3, [pc, #152]	; (80054f0 <MX_FREERTOS_Init+0x1e4>)
 8005458:	f107 0418 	add.w	r4, r7, #24
 800545c:	461d      	mov	r5, r3
 800545e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005462:	682b      	ldr	r3, [r5, #0]
 8005464:	6023      	str	r3, [r4, #0]
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8005466:	f107 0318 	add.w	r3, r7, #24
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f009 fe5c 	bl	800f12a <osThreadCreate>
 8005472:	4603      	mov	r3, r0
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <MX_FREERTOS_Init+0x1e8>)
 8005476:	6013      	str	r3, [r2, #0]

  /* definition and creation of BatteryMonitori */
  osThreadDef(BatteryMonitori, StartBatteryMonitoring, osPriorityLow, 0, 128);
 8005478:	4b1f      	ldr	r3, [pc, #124]	; (80054f8 <MX_FREERTOS_Init+0x1ec>)
 800547a:	1d3c      	adds	r4, r7, #4
 800547c:	461d      	mov	r5, r3
 800547e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	6023      	str	r3, [r4, #0]
  BatteryMonitoriHandle = osThreadCreate(osThread(BatteryMonitori), NULL);
 8005486:	1d3b      	adds	r3, r7, #4
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f009 fe4d 	bl	800f12a <osThreadCreate>
 8005490:	4603      	mov	r3, r0
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <MX_FREERTOS_Init+0x1f0>)
 8005494:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8005496:	bf00      	nop
 8005498:	37b0      	adds	r7, #176	; 0xb0
 800549a:	46bd      	mov	sp, r7
 800549c:	bdb0      	pop	{r4, r5, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20000804 	.word	0x20000804
 80054a4:	48000400 	.word	0x48000400
 80054a8:	200002bc 	.word	0x200002bc
 80054ac:	20000244 	.word	0x20000244
 80054b0:	200001f8 	.word	0x200001f8
 80054b4:	200001ec 	.word	0x200001ec
 80054b8:	200001f0 	.word	0x200001f0
 80054bc:	200001f4 	.word	0x200001f4
 80054c0:	080123c8 	.word	0x080123c8
 80054c4:	200001cc 	.word	0x200001cc
 80054c8:	080123e8 	.word	0x080123e8
 80054cc:	200001d0 	.word	0x200001d0
 80054d0:	08012408 	.word	0x08012408
 80054d4:	200001d4 	.word	0x200001d4
 80054d8:	08012424 	.word	0x08012424
 80054dc:	200001d8 	.word	0x200001d8
 80054e0:	08012448 	.word	0x08012448
 80054e4:	200001dc 	.word	0x200001dc
 80054e8:	08012460 	.word	0x08012460
 80054ec:	200001e0 	.word	0x200001e0
 80054f0:	08012480 	.word	0x08012480
 80054f4:	200001e4 	.word	0x200001e4
 80054f8:	080124a4 	.word	0x080124a4
 80054fc:	200001e8 	.word	0x200001e8

08005500 <StartLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	/*htim3.Instance->CCR1 = 1000;
	vTaskDelay(100);
	htim3.Instance->CCR1 = 0;*/
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800550c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005510:	f004 fd9e 	bl	800a050 <HAL_GPIO_TogglePin>
    vTaskDelay(5000);
 8005514:	f241 3088 	movw	r0, #5000	; 0x1388
 8005518:	f00a fcb8 	bl	800fe8c <vTaskDelay>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800551c:	e7f4      	b.n	8005508 <StartLedTask+0x8>
	...

08005520 <StartRoll_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRoll_PID */
void StartRoll_PID(void const * argument)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRoll_PID */


	/*PID factor init*/
	Pid_Init(&hpid_roll, PID_KP_ROLL, PID_KI_ROLL, PID_KD_ROLL);
 8005528:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005570 <StartRoll_PID+0x50>
 800552c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005574 <StartRoll_PID+0x54>
 8005530:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005578 <StartRoll_PID+0x58>
 8005534:	4811      	ldr	r0, [pc, #68]	; (800557c <StartRoll_PID+0x5c>)
 8005536:	f001 fe95 	bl	8007264 <Pid_Init>

  /* Infinite loop */
	for(;;)
	{	/*Read roll axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <StartRoll_PID+0x60>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2119      	movs	r1, #25
 8005540:	4618      	mov	r0, r3
 8005542:	f00a f961 	bl	800f808 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Roll(&hi2c2, &IMU_BNO055_struct);
 8005546:	490f      	ldr	r1, [pc, #60]	; (8005584 <StartRoll_PID+0x64>)
 8005548:	480f      	ldr	r0, [pc, #60]	; (8005588 <StartRoll_PID+0x68>)
 800554a:	f000 ffa7 	bl	800649c <BNO055_ReadEuler_Roll>
		xSemaphoreGive(I2C_ControllerHandle);
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <StartRoll_PID+0x60>)
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	2300      	movs	r3, #0
 8005554:	2200      	movs	r2, #0
 8005556:	2100      	movs	r1, #0
 8005558:	f009 ffe2 	bl	800f520 <xQueueGenericSend>

		/*Compensate PID*/
		Pid_CompensateRoll(&hpid_roll, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 800555c:	4b0b      	ldr	r3, [pc, #44]	; (800558c <StartRoll_PID+0x6c>)
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <StartRoll_PID+0x64>)
 8005560:	490b      	ldr	r1, [pc, #44]	; (8005590 <StartRoll_PID+0x70>)
 8005562:	4806      	ldr	r0, [pc, #24]	; (800557c <StartRoll_PID+0x5c>)
 8005564:	f001 fedc 	bl	8007320 <Pid_CompensateRoll>


		vTaskDelay(150);
 8005568:	2096      	movs	r0, #150	; 0x96
 800556a:	f00a fc8f 	bl	800fe8c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 800556e:	e7e4      	b.n	800553a <StartRoll_PID+0x1a>
 8005570:	bdb15662 	.word	0xbdb15662
 8005574:	bce59984 	.word	0xbce59984
 8005578:	be07bf5a 	.word	0xbe07bf5a
 800557c:	200001a8 	.word	0x200001a8
 8005580:	200001ec 	.word	0x200001ec
 8005584:	20000244 	.word	0x20000244
 8005588:	200001f8 	.word	0x200001f8
 800558c:	200002bc 	.word	0x200002bc
 8005590:	200002a8 	.word	0x200002a8

08005594 <StartPitch_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPitch_PID */
void StartPitch_PID(void const * argument)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPitch_PID */
	Pid_Init(&hpid_pitch, PID_KP_PITCH, PID_KI_PITCH, PID_KD_PITCH);
 800559c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80055a0:	eddf 0a10 	vldr	s1, [pc, #64]	; 80055e4 <StartPitch_PID+0x50>
 80055a4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80055e8 <StartPitch_PID+0x54>
 80055a8:	4810      	ldr	r0, [pc, #64]	; (80055ec <StartPitch_PID+0x58>)
 80055aa:	f001 fe5b 	bl	8007264 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read pitch axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055ae:	4b10      	ldr	r3, [pc, #64]	; (80055f0 <StartPitch_PID+0x5c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2119      	movs	r1, #25
 80055b4:	4618      	mov	r0, r3
 80055b6:	f00a f927 	bl	800f808 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Pitch(&hi2c2, &IMU_BNO055_struct);
 80055ba:	490e      	ldr	r1, [pc, #56]	; (80055f4 <StartPitch_PID+0x60>)
 80055bc:	480e      	ldr	r0, [pc, #56]	; (80055f8 <StartPitch_PID+0x64>)
 80055be:	f000 ffbf 	bl	8006540 <BNO055_ReadEuler_Pitch>
		xSemaphoreGive(I2C_ControllerHandle);
 80055c2:	4b0b      	ldr	r3, [pc, #44]	; (80055f0 <StartPitch_PID+0x5c>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	2200      	movs	r2, #0
 80055ca:	2100      	movs	r1, #0
 80055cc:	f009 ffa8 	bl	800f520 <xQueueGenericSend>

		/*Compensate PID */
		Pid_CompensatePitch(&hpid_pitch, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 80055d0:	4b0a      	ldr	r3, [pc, #40]	; (80055fc <StartPitch_PID+0x68>)
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <StartPitch_PID+0x60>)
 80055d4:	490a      	ldr	r1, [pc, #40]	; (8005600 <StartPitch_PID+0x6c>)
 80055d6:	4805      	ldr	r0, [pc, #20]	; (80055ec <StartPitch_PID+0x58>)
 80055d8:	f001 ff68 	bl	80074ac <Pid_CompensatePitch>

		vTaskDelay(150);
 80055dc:	2096      	movs	r0, #150	; 0x96
 80055de:	f00a fc55 	bl	800fe8c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 80055e2:	e7e4      	b.n	80055ae <StartPitch_PID+0x1a>
 80055e4:	3ccccccd 	.word	0x3ccccccd
 80055e8:	42c80000 	.word	0x42c80000
 80055ec:	20000160 	.word	0x20000160
 80055f0:	200001ec 	.word	0x200001ec
 80055f4:	20000244 	.word	0x20000244
 80055f8:	200001f8 	.word	0x200001f8
 80055fc:	200002bc 	.word	0x200002bc
 8005600:	200002a8 	.word	0x200002a8

08005604 <StartYaw_PID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartYaw_PID */
void StartYaw_PID(void const * argument)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartYaw_PID */
	Pid_Init(&hpid_yaw, PID_KP_YAW, PID_KI_YAW, PID_KD_YAW);
 800560c:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 8005610:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005654 <StartYaw_PID+0x50>
 8005614:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005658 <StartYaw_PID+0x54>
 8005618:	4810      	ldr	r0, [pc, #64]	; (800565c <StartYaw_PID+0x58>)
 800561a:	f001 fe23 	bl	8007264 <Pid_Init>
  /* Infinite loop */
  for(;;)
  {
	  	/*Read yaw axis data*/
		xSemaphoreTake(I2C_ControllerHandle,25);
 800561e:	4b10      	ldr	r3, [pc, #64]	; (8005660 <StartYaw_PID+0x5c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2119      	movs	r1, #25
 8005624:	4618      	mov	r0, r3
 8005626:	f00a f8ef 	bl	800f808 <xQueueSemaphoreTake>
		BNO055_ReadEuler_Yaw(&hi2c2, &IMU_BNO055_struct);
 800562a:	490e      	ldr	r1, [pc, #56]	; (8005664 <StartYaw_PID+0x60>)
 800562c:	480e      	ldr	r0, [pc, #56]	; (8005668 <StartYaw_PID+0x64>)
 800562e:	f000 ffd9 	bl	80065e4 <BNO055_ReadEuler_Yaw>
		xSemaphoreGive(I2C_ControllerHandle);
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <StartYaw_PID+0x5c>)
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	2300      	movs	r3, #0
 8005638:	2200      	movs	r2, #0
 800563a:	2100      	movs	r1, #0
 800563c:	f009 ff70 	bl	800f520 <xQueueGenericSend>

		/*Compensate PID step 1 - error calculation */
		Pid_CompensateYaw(&hpid_yaw, &COMMAND_struct, &IMU_BNO055_struct, &HDW_CONTROLLER_struct);
 8005640:	4b0a      	ldr	r3, [pc, #40]	; (800566c <StartYaw_PID+0x68>)
 8005642:	4a08      	ldr	r2, [pc, #32]	; (8005664 <StartYaw_PID+0x60>)
 8005644:	490a      	ldr	r1, [pc, #40]	; (8005670 <StartYaw_PID+0x6c>)
 8005646:	4805      	ldr	r0, [pc, #20]	; (800565c <StartYaw_PID+0x58>)
 8005648:	f001 fe27 	bl	800729a <Pid_CompensateYaw>

		vTaskDelay(150);
 800564c:	2096      	movs	r0, #150	; 0x96
 800564e:	f00a fc1d 	bl	800fe8c <vTaskDelay>
		xSemaphoreTake(I2C_ControllerHandle,25);
 8005652:	e7e4      	b.n	800561e <StartYaw_PID+0x1a>
 8005654:	3ccccccd 	.word	0x3ccccccd
 8005658:	42c80000 	.word	0x42c80000
 800565c:	20000184 	.word	0x20000184
 8005660:	200001ec 	.word	0x200001ec
 8005664:	20000244 	.word	0x20000244
 8005668:	200001f8 	.word	0x200001f8
 800566c:	200002bc 	.word	0x200002bc
 8005670:	200002a8 	.word	0x200002a8

08005674 <StartPressureMonitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPressureMonitor */
void StartPressureMonitor(void const * argument)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPressureMonitor */
	BMP390_Init(&hi2c2);
 800567c:	480f      	ldr	r0, [pc, #60]	; (80056bc <StartPressureMonitor+0x48>)
 800567e:	f000 f9e5 	bl	8005a4c <BMP390_Init>

	/*Barometer calibration*/
	BMP390_GetP0Pressure(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 8005682:	4b0f      	ldr	r3, [pc, #60]	; (80056c0 <StartPressureMonitor+0x4c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	461a      	mov	r2, r3
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <StartPressureMonitor+0x50>)
 800568a:	480c      	ldr	r0, [pc, #48]	; (80056bc <StartPressureMonitor+0x48>)
 800568c:	f000 fa28 	bl	8005ae0 <BMP390_GetP0Pressure>

  /* Infinite loop */
  for(;;)
  {
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 8005690:	4b0b      	ldr	r3, [pc, #44]	; (80056c0 <StartPressureMonitor+0x4c>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	490b      	ldr	r1, [pc, #44]	; (80056c4 <StartPressureMonitor+0x50>)
 8005698:	4808      	ldr	r0, [pc, #32]	; (80056bc <StartPressureMonitor+0x48>)
 800569a:	f000 f971 	bl	8005980 <BMP390_ReadPress>
	  BMP390_ReadTemp(&hi2c2, &ALTIMETER_struct, I2C_ControllerHandle);
 800569e:	4b08      	ldr	r3, [pc, #32]	; (80056c0 <StartPressureMonitor+0x4c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	461a      	mov	r2, r3
 80056a4:	4907      	ldr	r1, [pc, #28]	; (80056c4 <StartPressureMonitor+0x50>)
 80056a6:	4805      	ldr	r0, [pc, #20]	; (80056bc <StartPressureMonitor+0x48>)
 80056a8:	f000 f912 	bl	80058d0 <BMP390_ReadTemp>
	  BMP390_GetRelativeAltitude(&ALTIMETER_struct);
 80056ac:	4805      	ldr	r0, [pc, #20]	; (80056c4 <StartPressureMonitor+0x50>)
 80056ae:	f000 fa43 	bl	8005b38 <BMP390_GetRelativeAltitude>
	  /*Recalibrate sensor if gps data move too much*/
		vTaskDelay(500);
 80056b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80056b6:	f00a fbe9 	bl	800fe8c <vTaskDelay>
	  BMP390_ReadPress(&hi2c2,&ALTIMETER_struct, I2C_ControllerHandle);
 80056ba:	e7e9      	b.n	8005690 <StartPressureMonitor+0x1c>
 80056bc:	200001f8 	.word	0x200001f8
 80056c0:	200001ec 	.word	0x200001ec
 80056c4:	200002ec 	.word	0x200002ec

080056c8 <StartGPS>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGPS */
void StartGPS(void const * argument)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  /*TO BE DONE marche pas trop */
	  /*When UART IT then block task until IT*/
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056d4:	4909      	ldr	r1, [pc, #36]	; (80056fc <StartGPS+0x34>)
 80056d6:	480a      	ldr	r0, [pc, #40]	; (8005700 <StartGPS+0x38>)
 80056d8:	f007 fd6e 	bl	800d1b8 <HAL_UART_Receive_IT>
	  xSemaphoreTake(GPS_UART_SemaphoreHandle,100000);
 80056dc:	4b09      	ldr	r3, [pc, #36]	; (8005704 <StartGPS+0x3c>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4909      	ldr	r1, [pc, #36]	; (8005708 <StartGPS+0x40>)
 80056e2:	4618      	mov	r0, r3
 80056e4:	f00a f890 	bl	800f808 <xQueueSemaphoreTake>
	  gps_ReadNMEA(gps_receive_rx,&GPS_struct);
 80056e8:	4908      	ldr	r1, [pc, #32]	; (800570c <StartGPS+0x44>)
 80056ea:	4804      	ldr	r0, [pc, #16]	; (80056fc <StartGPS+0x34>)
 80056ec:	f001 f910 	bl	8006910 <gps_ReadNMEA>
	  vTaskDelay(1000);
 80056f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056f4:	f00a fbca 	bl	800fe8c <vTaskDelay>
	  HAL_UART_Receive_IT(&huart4, &gps_receive_rx, BUFFER_SIZE_NMEA);
 80056f8:	e7ea      	b.n	80056d0 <StartGPS+0x8>
 80056fa:	bf00      	nop
 80056fc:	20000330 	.word	0x20000330
 8005700:	20000850 	.word	0x20000850
 8005704:	200001f0 	.word	0x200001f0
 8005708:	000186a0 	.word	0x000186a0
 800570c:	20000300 	.word	0x20000300

08005710 <StartMainTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMainTask */
	xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <StartMainTask+0x78>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	491b      	ldr	r1, [pc, #108]	; (800578c <StartMainTask+0x7c>)
 800571e:	4618      	mov	r0, r3
 8005720:	f00a f872 	bl	800f808 <xQueueSemaphoreTake>
	xSemaphoreTake(HG_PROTECTION_SEMHandle,9999999999999999);
 8005724:	4b18      	ldr	r3, [pc, #96]	; (8005788 <StartMainTask+0x78>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4918      	ldr	r1, [pc, #96]	; (800578c <StartMainTask+0x7c>)
 800572a:	4618      	mov	r0, r3
 800572c:	f00a f86c 	bl	800f808 <xQueueSemaphoreTake>
	for(int i=0;i<5;i++){
 8005730:	2300      	movs	r3, #0
 8005732:	60fb      	str	r3, [r7, #12]
 8005734:	e011      	b.n	800575a <StartMainTask+0x4a>
		htim3.Instance->CCR1 = 1000;
 8005736:	4b16      	ldr	r3, [pc, #88]	; (8005790 <StartMainTask+0x80>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800573e:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 8005740:	2064      	movs	r0, #100	; 0x64
 8005742:	f00a fba3 	bl	800fe8c <vTaskDelay>
		htim3.Instance->CCR1 = 0;
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <StartMainTask+0x80>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	635a      	str	r2, [r3, #52]	; 0x34
		vTaskDelay(100);
 800574e:	2064      	movs	r0, #100	; 0x64
 8005750:	f00a fb9c 	bl	800fe8c <vTaskDelay>
	for(int i=0;i<5;i++){
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b04      	cmp	r3, #4
 800575e:	ddea      	ble.n	8005736 <StartMainTask+0x26>
	}
  /* Infinite loop */
  for(;;)
  {
	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8005760:	4b0c      	ldr	r3, [pc, #48]	; (8005794 <StartMainTask+0x84>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	490c      	ldr	r1, [pc, #48]	; (8005798 <StartMainTask+0x88>)
 8005768:	480c      	ldr	r0, [pc, #48]	; (800579c <StartMainTask+0x8c>)
 800576a:	f000 fd79 	bl	8006260 <BNO055_ReadLina>
	  BNO055_ReadAccel(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <StartMainTask+0x84>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	4908      	ldr	r1, [pc, #32]	; (8005798 <StartMainTask+0x88>)
 8005776:	4809      	ldr	r0, [pc, #36]	; (800579c <StartMainTask+0x8c>)
 8005778:	f000 fc52 	bl	8006020 <BNO055_ReadAccel>

	  vTaskDelay(1000);
 800577c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005780:	f00a fb84 	bl	800fe8c <vTaskDelay>
	  BNO055_ReadLina(&hi2c2, &IMU_BNO055_struct, I2C_ControllerHandle);
 8005784:	e7ec      	b.n	8005760 <StartMainTask+0x50>
 8005786:	bf00      	nop
 8005788:	200001f4 	.word	0x200001f4
 800578c:	6fc0ffff 	.word	0x6fc0ffff
 8005790:	200007b8 	.word	0x200007b8
 8005794:	200001ec 	.word	0x200001ec
 8005798:	20000244 	.word	0x20000244
 800579c:	200001f8 	.word	0x200001f8

080057a0 <StartBatteryMonitoring>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBatteryMonitoring */
void StartBatteryMonitoring(void const * argument)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBatteryMonitoring */
  /* Infinite loop */
  for(;;)
  {
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057a8:	4909      	ldr	r1, [pc, #36]	; (80057d0 <StartBatteryMonitoring+0x30>)
 80057aa:	480a      	ldr	r0, [pc, #40]	; (80057d4 <StartBatteryMonitoring+0x34>)
 80057ac:	f7ff fcc0 	bl	8005130 <Battery_ReadBatteryVoltage>
	Battery_ReadCurrent5V(&BATTERY_Struct, BatteryMonitoringData);
 80057b0:	4907      	ldr	r1, [pc, #28]	; (80057d0 <StartBatteryMonitoring+0x30>)
 80057b2:	4808      	ldr	r0, [pc, #32]	; (80057d4 <StartBatteryMonitoring+0x34>)
 80057b4:	f7ff fd30 	bl	8005218 <Battery_ReadCurrent5V>
	Battery_ReadCurrent3V3(&BATTERY_Struct, BatteryMonitoringData);
 80057b8:	4905      	ldr	r1, [pc, #20]	; (80057d0 <StartBatteryMonitoring+0x30>)
 80057ba:	4806      	ldr	r0, [pc, #24]	; (80057d4 <StartBatteryMonitoring+0x34>)
 80057bc:	f7ff fce8 	bl	8005190 <Battery_ReadCurrent3V3>
	Battery_RemaningTime(&BATTERY_Struct);
 80057c0:	4804      	ldr	r0, [pc, #16]	; (80057d4 <StartBatteryMonitoring+0x34>)
 80057c2:	f7ff fd6d 	bl	80052a0 <Battery_RemaningTime>
    vTaskDelay(5000);
 80057c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80057ca:	f00a fb5f 	bl	800fe8c <vTaskDelay>
	Battery_ReadBatteryVoltage(&BATTERY_Struct,BatteryMonitoringData);
 80057ce:	e7eb      	b.n	80057a8 <StartBatteryMonitoring+0x8>
 80057d0:	20000718 	.word	0x20000718
 80057d4:	20000320 	.word	0x20000320

080057d8 <BMP390_EnablePressureSensor>:
	//Clearing the register is done by reading it
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, STATUS_REG, 1, &data, 1, 10);
}

void BMP390_EnablePressureSensor(I2C_HandleTypeDef *I2C){
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af04      	add	r7, sp, #16
 80057de:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 80057e0:	230a      	movs	r3, #10
 80057e2:	9302      	str	r3, [sp, #8]
 80057e4:	2301      	movs	r3, #1
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	f107 030f 	add.w	r3, r7, #15
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	2301      	movs	r3, #1
 80057f0:	221b      	movs	r2, #27
 80057f2:	21ec      	movs	r1, #236	; 0xec
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f004 fe0b 	bl	800a410 <HAL_I2C_Mem_Read>
	data = (reg_value&0x32) + 0x01;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
 80057fc:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8005800:	b2db      	uxtb	r3, r3
 8005802:	3301      	adds	r3, #1
 8005804:	b2db      	uxtb	r3, r3
 8005806:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 8005808:	230a      	movs	r3, #10
 800580a:	9302      	str	r3, [sp, #8]
 800580c:	2301      	movs	r3, #1
 800580e:	9301      	str	r3, [sp, #4]
 8005810:	f107 030e 	add.w	r3, r7, #14
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	2301      	movs	r3, #1
 8005818:	221b      	movs	r2, #27
 800581a:	21ec      	movs	r1, #236	; 0xec
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f004 fce3 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <BMP390_EnableTempSensor>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x31);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_EnableTempSensor(I2C_HandleTypeDef *I2C){
 800582a:	b580      	push	{r7, lr}
 800582c:	b088      	sub	sp, #32
 800582e:	af04      	add	r7, sp, #16
 8005830:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005832:	230a      	movs	r3, #10
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	2301      	movs	r3, #1
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	f107 030f 	add.w	r3, r7, #15
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2301      	movs	r3, #1
 8005842:	221b      	movs	r2, #27
 8005844:	21ec      	movs	r1, #236	; 0xec
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f004 fde2 	bl	800a410 <HAL_I2C_Mem_Read>
	data = (reg_value&0x31) + 0x01;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	f003 0331 	and.w	r3, r3, #49	; 0x31
 8005852:	b2db      	uxtb	r3, r3
 8005854:	3301      	adds	r3, #1
 8005856:	b2db      	uxtb	r3, r3
 8005858:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 800585a:	230a      	movs	r3, #10
 800585c:	9302      	str	r3, [sp, #8]
 800585e:	2301      	movs	r3, #1
 8005860:	9301      	str	r3, [sp, #4]
 8005862:	f107 030e 	add.w	r3, r7, #14
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	2301      	movs	r3, #1
 800586a:	221b      	movs	r2, #27
 800586c:	21ec      	movs	r1, #236	; 0xec
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f004 fcba 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <BMP390_WakeUp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x03);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
}

void BMP390_WakeUp(I2C_HandleTypeDef *I2C){
 800587c:	b580      	push	{r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af04      	add	r7, sp, #16
 8005882:	6078      	str	r0, [r7, #4]
	uint8_t reg_value;
	uint8_t data;
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &reg_value, 1, 10);
 8005884:	230a      	movs	r3, #10
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	2301      	movs	r3, #1
 800588a:	9301      	str	r3, [sp, #4]
 800588c:	f107 030f 	add.w	r3, r7, #15
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2301      	movs	r3, #1
 8005894:	221b      	movs	r2, #27
 8005896:	21ec      	movs	r1, #236	; 0xec
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f004 fdb9 	bl	800a410 <HAL_I2C_Mem_Read>
	data = (reg_value&0x03) + 0x30;
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	f003 0303 	and.w	r3, r3, #3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	3330      	adds	r3, #48	; 0x30
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, PWR_CTRL_REG, 1, &data, 1, 10);
 80058ac:	230a      	movs	r3, #10
 80058ae:	9302      	str	r3, [sp, #8]
 80058b0:	2301      	movs	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	f107 030e 	add.w	r3, r7, #14
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2301      	movs	r3, #1
 80058bc:	221b      	movs	r2, #27
 80058be:	21ec      	movs	r1, #236	; 0xec
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f004 fc91 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <BMP390_ReadTemp>:
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CONFIG_REG, 1, &reg_value, 1, 10);
	data = (reg_value&0x01) + (value<<1);
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, OSR_REG, 1, &data, 1, 10);
}

void BMP390_ReadTemp(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af04      	add	r7, sp, #16
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t temp;

	xSemaphoreTake(I2CControllerProtect, 35);
 80058dc:	2123      	movs	r1, #35	; 0x23
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f009 ff92 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_XLSB_REG, 1, &XLSB, 1, 10);
 80058e4:	230a      	movs	r3, #10
 80058e6:	9302      	str	r3, [sp, #8]
 80058e8:	2301      	movs	r3, #1
 80058ea:	9301      	str	r3, [sp, #4]
 80058ec:	f107 0313 	add.w	r3, r7, #19
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	2301      	movs	r3, #1
 80058f4:	2207      	movs	r2, #7
 80058f6:	21ec      	movs	r1, #236	; 0xec
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f004 fd89 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_LSB_REG, 1, &LSB, 1, 10);
 80058fe:	230a      	movs	r3, #10
 8005900:	9302      	str	r3, [sp, #8]
 8005902:	2301      	movs	r3, #1
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	f107 0312 	add.w	r3, r7, #18
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2301      	movs	r3, #1
 800590e:	2208      	movs	r2, #8
 8005910:	21ec      	movs	r1, #236	; 0xec
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f004 fd7c 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, TEMP_MSB_REG, 1, &MSB, 1, 10);
 8005918:	230a      	movs	r3, #10
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	2301      	movs	r3, #1
 800591e:	9301      	str	r3, [sp, #4]
 8005920:	f107 0311 	add.w	r3, r7, #17
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	2301      	movs	r3, #1
 8005928:	2209      	movs	r2, #9
 800592a:	21ec      	movs	r1, #236	; 0xec
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f004 fd6f 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8005932:	2300      	movs	r3, #0
 8005934:	2200      	movs	r2, #0
 8005936:	2100      	movs	r1, #0
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f009 fdf1 	bl	800f520 <xQueueGenericSend>
	temp = XLSB + (LSB<<8) + (MSB<<16);
 800593e:	7cfb      	ldrb	r3, [r7, #19]
 8005940:	461a      	mov	r2, r3
 8005942:	7cbb      	ldrb	r3, [r7, #18]
 8005944:	021b      	lsls	r3, r3, #8
 8005946:	441a      	add	r2, r3
 8005948:	7c7b      	ldrb	r3, [r7, #17]
 800594a:	041b      	lsls	r3, r3, #16
 800594c:	4413      	add	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
	altimeter->temp_data = (temp/258111);
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <BMP390_ReadTemp+0xa8>)
 8005954:	fba3 1302 	umull	r1, r3, r3, r2
 8005958:	1ad2      	subs	r2, r2, r3
 800595a:	0852      	lsrs	r2, r2, #1
 800595c:	4413      	add	r3, r2
 800595e:	0c5b      	lsrs	r3, r3, #17
 8005960:	ee07 3a90 	vmov	s15, r3
 8005964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800596e:	bf00      	nop
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	04000105 	.word	0x04000105
 800597c:	00000000 	.word	0x00000000

08005980 <BMP390_ReadPress>:

void BMP390_ReadPress(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005980:	b580      	push	{r7, lr}
 8005982:	b08a      	sub	sp, #40	; 0x28
 8005984:	af04      	add	r7, sp, #16
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
	uint8_t XLSB;
	uint8_t LSB;
	uint8_t MSB;
	uint32_t press;

	xSemaphoreTake(I2CControllerProtect, 35);
 800598c:	2123      	movs	r1, #35	; 0x23
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f009 ff3a 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_XLSB_REG, 1, &XLSB, 1, 10);
 8005994:	230a      	movs	r3, #10
 8005996:	9302      	str	r3, [sp, #8]
 8005998:	2301      	movs	r3, #1
 800599a:	9301      	str	r3, [sp, #4]
 800599c:	f107 0313 	add.w	r3, r7, #19
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	2301      	movs	r3, #1
 80059a4:	2204      	movs	r2, #4
 80059a6:	21ec      	movs	r1, #236	; 0xec
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f004 fd31 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_LSB_REG, 1, &LSB, 1, 10);
 80059ae:	230a      	movs	r3, #10
 80059b0:	9302      	str	r3, [sp, #8]
 80059b2:	2301      	movs	r3, #1
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f107 0312 	add.w	r3, r7, #18
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	2301      	movs	r3, #1
 80059be:	2205      	movs	r2, #5
 80059c0:	21ec      	movs	r1, #236	; 0xec
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f004 fd24 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, PRESS_MSB_REG, 1, &MSB, 1, 10);
 80059c8:	230a      	movs	r3, #10
 80059ca:	9302      	str	r3, [sp, #8]
 80059cc:	2301      	movs	r3, #1
 80059ce:	9301      	str	r3, [sp, #4]
 80059d0:	f107 0311 	add.w	r3, r7, #17
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	2301      	movs	r3, #1
 80059d8:	2206      	movs	r2, #6
 80059da:	21ec      	movs	r1, #236	; 0xec
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f004 fd17 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80059e2:	2300      	movs	r3, #0
 80059e4:	2200      	movs	r2, #0
 80059e6:	2100      	movs	r1, #0
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f009 fd99 	bl	800f520 <xQueueGenericSend>
	press = XLSB + (LSB<<8) + (MSB<<16);
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	461a      	mov	r2, r3
 80059f2:	7cbb      	ldrb	r3, [r7, #18]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	441a      	add	r2, r3
 80059f8:	7c7b      	ldrb	r3, [r7, #17]
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	4413      	add	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
	altimeter->pressure_hpa = (press*PRESS_STEP)+300;
 8005a00:	6978      	ldr	r0, [r7, #20]
 8005a02:	f7fe fd59 	bl	80044b8 <__aeabi_ui2d>
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <BMP390_ReadPress+0xc8>)
 8005a0c:	f7fe fdce 	bl	80045ac <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4610      	mov	r0, r2
 8005a16:	4619      	mov	r1, r3
 8005a18:	a309      	add	r3, pc, #36	; (adr r3, 8005a40 <BMP390_ReadPress+0xc0>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fe fc0f 	bl	8004240 <__adddf3>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4610      	mov	r0, r2
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f7ff f86f 	bl	8004b0c <__aeabi_d2f>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	601a      	str	r2, [r3, #0]

}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	f3af 8000 	nop.w
 8005a40:	00000000 	.word	0x00000000
 8005a44:	4072c000 	.word	0x4072c000
 8005a48:	3f0db000 	.word	0x3f0db000

08005a4c <BMP390_Init>:
	xSemaphoreGive(I2CControllerProtect);
	time = XLSB + (LSB<<8) + (MSB<<16);
	altimeter->time_data = time;
}

uint8_t BMP390_Init(I2C_HandleTypeDef *I2C){
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af04      	add	r7, sp, #16
 8005a52:	6078      	str	r0, [r7, #4]

	uint8_t data;
	uint8_t res = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	73fb      	strb	r3, [r7, #15]

	//Start by checking dev ID and REV iD
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, CHIP_ID_REG, 1, &data, 1, 10);
 8005a58:	230a      	movs	r3, #10
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	9301      	str	r3, [sp, #4]
 8005a60:	f107 030e 	add.w	r3, r7, #14
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	2301      	movs	r3, #1
 8005a68:	2200      	movs	r2, #0
 8005a6a:	21ec      	movs	r1, #236	; 0xec
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f004 fccf 	bl	800a410 <HAL_I2C_Mem_Read>
	if(data!=0x60){
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d001      	beq.n	8005a7c <BMP390_Init+0x30>
		res = 1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BMP390_I2C_ADDR, REV_ID_REG, 1, &data, 1, 10);
 8005a7c:	230a      	movs	r3, #10
 8005a7e:	9302      	str	r3, [sp, #8]
 8005a80:	2301      	movs	r3, #1
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	f107 030e 	add.w	r3, r7, #14
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	21ec      	movs	r1, #236	; 0xec
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f004 fcbd 	bl	800a410 <HAL_I2C_Mem_Read>
	if(data!=0x01){
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <BMP390_Init+0x54>
		res = 1;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
	}

	//Enable all sensors
	BMP390_EnableTempSensor(I2C);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff fec2 	bl	800582a <BMP390_EnableTempSensor>
	BMP390_EnablePressureSensor(I2C);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff fe96 	bl	80057d8 <BMP390_EnablePressureSensor>

	BMP390_WakeUp(I2C);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fee5 	bl	800587c <BMP390_WakeUp>
	/*Wait until sensor wake up */
	HAL_Delay(5);
 8005ab2:	2005      	movs	r0, #5
 8005ab4:	f002 faf2 	bl	800809c <HAL_Delay>

	//Set the IT pin on high level and enable with pressure/temp sensor
	data = 0x42;
 8005ab8:	2342      	movs	r3, #66	; 0x42
 8005aba:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BMP390_I2C_ADDR, INT_CTRL_REG, 1, &data, 1, 10);
 8005abc:	230a      	movs	r3, #10
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	f107 030e 	add.w	r3, r7, #14
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	2301      	movs	r3, #1
 8005acc:	2219      	movs	r2, #25
 8005ace:	21ec      	movs	r1, #236	; 0xec
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f004 fb89 	bl	800a1e8 <HAL_I2C_Mem_Write>

	//Set Filter value
	//BMP390_SetFilter(I2C, 0x02);


	return res;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <BMP390_GetP0Pressure>:

void BMP390_GetP0Pressure(I2C_HandleTypeDef *I2C,ALTIMETER_t *altimeter,osMutexId I2CControllerProtect){
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
	float P0;
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	e010      	b.n	8005b14 <BMP390_GetP0Pressure+0x34>
		BMP390_ReadPress(I2C, altimeter, I2CControllerProtect);
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff ff42 	bl	8005980 <BMP390_ReadPress>
		P0 += altimeter->pressure_hpa;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	edd3 7a00 	vldr	s15, [r3]
 8005b02:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b0a:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<STARTUP_PRESSURE_AVERAGE_COUNT;i++){
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	3301      	adds	r3, #1
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b09      	cmp	r3, #9
 8005b18:	ddeb      	ble.n	8005af2 <BMP390_GetP0Pressure+0x12>
	}
	altimeter->calibration_pressure = (P0/STARTUP_PRESSURE_AVERAGE_COUNT);
 8005b1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b1e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8005b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005b2c:	bf00      	nop
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	0000      	movs	r0, r0
	...

08005b38 <BMP390_GetRelativeAltitude>:

/*Function use to calculate relative altitude. In order to work properly it should'nt be call before a calibration*/
void BMP390_GetRelativeAltitude(ALTIMETER_t *altimeter){
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	altimeter->differential_altitude = 44330.0 * (1.0 - pow(altimeter->pressure_hpa / altimeter->calibration_pressure, 0.1903));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	ed93 7a00 	vldr	s14, [r3]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005b50:	ee16 0a90 	vmov	r0, s13
 8005b54:	f7fe fcd2 	bl	80044fc <__aeabi_f2d>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8005ba8 <BMP390_GetRelativeAltitude+0x70>
 8005b60:	ec43 2b10 	vmov	d0, r2, r3
 8005b64:	f00b fce8 	bl	8011538 <pow>
 8005b68:	ec53 2b10 	vmov	r2, r3, d0
 8005b6c:	f04f 0000 	mov.w	r0, #0
 8005b70:	4911      	ldr	r1, [pc, #68]	; (8005bb8 <BMP390_GetRelativeAltitude+0x80>)
 8005b72:	f7fe fb63 	bl	800423c <__aeabi_dsub>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	a30c      	add	r3, pc, #48	; (adr r3, 8005bb0 <BMP390_GetRelativeAltitude+0x78>)
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fe fd12 	bl	80045ac <__aeabi_dmul>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4619      	mov	r1, r3
 8005b90:	f7fe ffbc 	bl	8004b0c <__aeabi_d2f>
 8005b94:	4602      	mov	r2, r0
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	611a      	str	r2, [r3, #16]
}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	f3af 8000 	nop.w
 8005ba8:	1a36e2eb 	.word	0x1a36e2eb
 8005bac:	3fc85bc0 	.word	0x3fc85bc0
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	40e5a540 	.word	0x40e5a540
 8005bb8:	3ff00000 	.word	0x3ff00000

08005bbc <BNO055_SetPage>:
 * Method use to switch page in IMU memory
 * param: I2C --> pointer on I2C handle struct
 * param: page --> integer value range 0 to 1 include
 * note: If a page value is bigger than 1 then no error will be raise so be carefull
 */
void BNO055_SetPage(I2C_HandleTypeDef *I2C,uint8_t page){
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af04      	add	r7, sp, #16
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_PAGE_ID, 1, &page, 1, 10);
 8005bc8:	230a      	movs	r3, #10
 8005bca:	9302      	str	r3, [sp, #8]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	1cfb      	adds	r3, r7, #3
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	2150      	movs	r1, #80	; 0x50
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f004 fb04 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005be0:	bf00      	nop
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <BNO055_SetOperationMode>:
 * Method use to switch operation mode of IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: mode --> operation mode already define in <bno055.h>
 */
void BNO055_SetOperationMode(I2C_HandleTypeDef *I2C,bno055_opmode_t mode,BNO055_t *BNO055){
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af04      	add	r7, sp, #16
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	72fb      	strb	r3, [r7, #11]
	BNO055->operational_mode = mode;
 8005bf6:	7afa      	ldrb	r2, [r7, #11]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &mode, 1, 10);
 8005bfe:	230a      	movs	r3, #10
 8005c00:	9302      	str	r3, [sp, #8]
 8005c02:	2301      	movs	r3, #1
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f107 030b 	add.w	r3, r7, #11
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	223d      	movs	r2, #61	; 0x3d
 8005c10:	2150      	movs	r1, #80	; 0x50
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f004 fae8 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005c18:	bf00      	nop
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <BNO055_ReadSystemReg>:

/*
 * Function use read the system register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadSystemReg(I2C_HandleTypeDef *I2C){
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af04      	add	r7, sp, #16
 8005c26:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005c28:	2364      	movs	r3, #100	; 0x64
 8005c2a:	9302      	str	r3, [sp, #8]
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	f107 030f 	add.w	r3, r7, #15
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	2301      	movs	r3, #1
 8005c38:	223f      	movs	r2, #63	; 0x3f
 8005c3a:	2150      	movs	r1, #80	; 0x50
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f004 fbe7 	bl	800a410 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <BNO055_ReadITStatus>:

/*
 * Function use to read interrupt register
 * param: I2C --> pointer on I2C handle struct
 */
uint8_t BNO055_ReadITStatus(I2C_HandleTypeDef * I2C){
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af04      	add	r7, sp, #16
 8005c52:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_STATUS, 1, &system_reg, 1, 100);
 8005c54:	2364      	movs	r3, #100	; 0x64
 8005c56:	9302      	str	r3, [sp, #8]
 8005c58:	2301      	movs	r3, #1
 8005c5a:	9301      	str	r3, [sp, #4]
 8005c5c:	f107 030f 	add.w	r3, r7, #15
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	2301      	movs	r3, #1
 8005c64:	2237      	movs	r2, #55	; 0x37
 8005c66:	2150      	movs	r1, #80	; 0x50
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f004 fbd1 	bl	800a410 <HAL_I2C_Mem_Read>
	return system_reg;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <BNO055_EnableAccHighG>:
/*
 * Method use to set high G acceleration interrupt
 * param: I2C --> pointer on I2C handle struct
 * note: This method should only be call after a SetPage(1)
 */
void BNO055_EnableAccHighG(I2C_HandleTypeDef *I2C){
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af04      	add	r7, sp, #16
 8005c7e:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 100);
 8005c80:	2364      	movs	r3, #100	; 0x64
 8005c82:	9302      	str	r3, [sp, #8]
 8005c84:	2301      	movs	r3, #1
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	f107 030f 	add.w	r3, r7, #15
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	2301      	movs	r3, #1
 8005c90:	2210      	movs	r2, #16
 8005c92:	2150      	movs	r1, #80	; 0x50
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f004 fbbb 	bl	800a410 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	f043 0320 	orr.w	r3, r3, #32
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_EN, 1, &system_reg, 1, 10);
 8005ca4:	230a      	movs	r3, #10
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	2301      	movs	r3, #1
 8005caa:	9301      	str	r3, [sp, #4]
 8005cac:	f107 030f 	add.w	r3, r7, #15
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	2210      	movs	r2, #16
 8005cb6:	2150      	movs	r1, #80	; 0x50
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f004 fa95 	bl	800a1e8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 100);
 8005cbe:	2364      	movs	r3, #100	; 0x64
 8005cc0:	9302      	str	r3, [sp, #8]
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	f107 030f 	add.w	r3, r7, #15
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	2301      	movs	r3, #1
 8005cce:	220f      	movs	r2, #15
 8005cd0:	2150      	movs	r1, #80	; 0x50
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f004 fb9c 	bl	800a410 <HAL_I2C_Mem_Read>
	system_reg|=1<<5;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	f043 0320 	orr.w	r3, r3, #32
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_INT_MSK, 1, &system_reg, 1, 10);
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	f107 030f 	add.w	r3, r7, #15
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	2150      	movs	r1, #80	; 0x50
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f004 fa76 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <BNO055_EnableHighGAcc>:
/*
 * Method use to set high G acceleration interrupt for each axis
 * param: I2C --> pointer on I2C handle struct
 * axis: --> char use to define an axis Eg: 'X' or 'Y' or 'Z'
 */
void BNO055_EnableHighGAcc(I2C_HandleTypeDef *I2C,char axis){
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af04      	add	r7, sp, #16
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d10:	2364      	movs	r3, #100	; 0x64
 8005d12:	9302      	str	r3, [sp, #8]
 8005d14:	2301      	movs	r3, #1
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	f107 030f 	add.w	r3, r7, #15
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	2301      	movs	r3, #1
 8005d20:	2212      	movs	r2, #18
 8005d22:	2150      	movs	r1, #80	; 0x50
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f004 fb73 	bl	800a410 <HAL_I2C_Mem_Read>
	switch (axis) {
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2b5a      	cmp	r3, #90	; 0x5a
 8005d2e:	d012      	beq.n	8005d56 <BNO055_EnableHighGAcc+0x52>
 8005d30:	2b5a      	cmp	r3, #90	; 0x5a
 8005d32:	dc16      	bgt.n	8005d62 <BNO055_EnableHighGAcc+0x5e>
 8005d34:	2b58      	cmp	r3, #88	; 0x58
 8005d36:	d002      	beq.n	8005d3e <BNO055_EnableHighGAcc+0x3a>
 8005d38:	2b59      	cmp	r3, #89	; 0x59
 8005d3a:	d006      	beq.n	8005d4a <BNO055_EnableHighGAcc+0x46>
 8005d3c:	e011      	b.n	8005d62 <BNO055_EnableHighGAcc+0x5e>
		case 'X':
			system_reg|=1<<5;
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	f043 0320 	orr.w	r3, r3, #32
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	73fb      	strb	r3, [r7, #15]
			break;
 8005d48:	e00b      	b.n	8005d62 <BNO055_EnableHighGAcc+0x5e>
		case 'Y':
			system_reg|=1<<6;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	73fb      	strb	r3, [r7, #15]
			break;
 8005d54:	e005      	b.n	8005d62 <BNO055_EnableHighGAcc+0x5e>
		case 'Z':
			system_reg|=1<<7;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	73fb      	strb	r3, [r7, #15]
			break;
 8005d60:	bf00      	nop
	}
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 10);
 8005d62:	230a      	movs	r3, #10
 8005d64:	9302      	str	r3, [sp, #8]
 8005d66:	2301      	movs	r3, #1
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	f107 030f 	add.w	r3, r7, #15
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2301      	movs	r3, #1
 8005d72:	2212      	movs	r2, #18
 8005d74:	2150      	movs	r1, #80	; 0x50
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f004 fa36 	bl	800a1e8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_INT_SETTINGS, 1, &system_reg, 1, 100);
 8005d7c:	2364      	movs	r3, #100	; 0x64
 8005d7e:	9302      	str	r3, [sp, #8]
 8005d80:	2301      	movs	r3, #1
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	f107 030f 	add.w	r3, r7, #15
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	2212      	movs	r2, #18
 8005d8e:	2150      	movs	r1, #80	; 0x50
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f004 fb3d 	bl	800a410 <HAL_I2C_Mem_Read>
}
 8005d96:	bf00      	nop
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <BNO055_ClearIntFlag>:
/*
 * Method use to clear interrupt flag set by hardware
 * param: I2C --> pointer on I2C handle struct
 * note: if call in interrupt, you can find SPI pointer in IMU struct
 */
void BNO055_ClearIntFlag(I2C_HandleTypeDef *I2C){
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af04      	add	r7, sp, #16
 8005da4:	6078      	str	r0, [r7, #4]
	uint8_t system_reg;
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 100);
 8005da6:	2364      	movs	r3, #100	; 0x64
 8005da8:	9302      	str	r3, [sp, #8]
 8005daa:	2301      	movs	r3, #1
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	f107 030f 	add.w	r3, r7, #15
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	2301      	movs	r3, #1
 8005db6:	223f      	movs	r2, #63	; 0x3f
 8005db8:	2150      	movs	r1, #80	; 0x50
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f004 fb28 	bl	800a410 <HAL_I2C_Mem_Read>
	system_reg|=1<<6;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &system_reg, 1, 10);
 8005dca:	230a      	movs	r3, #10
 8005dcc:	9302      	str	r3, [sp, #8]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	f107 030f 	add.w	r3, r7, #15
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	223f      	movs	r2, #63	; 0x3f
 8005ddc:	2150      	movs	r1, #80	; 0x50
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f004 fa02 	bl	800a1e8 <HAL_I2C_Mem_Write>
	BNO055_ReadITStatus(I2C);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f7ff ff31 	bl	8005c4c <BNO055_ReadITStatus>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <BNO055_EnableExtClock>:
/*
 * Method use to enable external clock for IMU
 * param: I2C --> pointer on I2C handle struct
 * note: If not clock selected then work with LSI else LSE
 */
void BNO055_EnableExtClock(I2C_HandleTypeDef *I2C){
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b088      	sub	sp, #32
 8005df6:	af04      	add	r7, sp, #16
 8005df8:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff ff10 	bl	8005c20 <BNO055_ReadSystemReg>
 8005e00:	4603      	mov	r3, r0
 8005e02:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0x7F) + (0x01<<7);
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	3b80      	subs	r3, #128	; 0x80
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e12:	230a      	movs	r3, #10
 8005e14:	9302      	str	r3, [sp, #8]
 8005e16:	2301      	movs	r3, #1
 8005e18:	9301      	str	r3, [sp, #4]
 8005e1a:	f107 030e 	add.w	r3, r7, #14
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	2301      	movs	r3, #1
 8005e22:	223f      	movs	r2, #63	; 0x3f
 8005e24:	2150      	movs	r1, #80	; 0x50
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f004 f9de 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005e2c:	bf00      	nop
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <BNO055_TriggerSelfTest>:

/*
 * Method use to start a self test
 * param: I2C --> pointer on I2C handle struct
 */
void BNO055_TriggerSelfTest(I2C_HandleTypeDef *I2C){
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af04      	add	r7, sp, #16
 8005e3a:	6078      	str	r0, [r7, #4]
	uint8_t actual_reg_value = BNO055_ReadSystemReg(I2C);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff feef 	bl	8005c20 <BNO055_ReadSystemReg>
 8005e42:	4603      	mov	r3, r0
 8005e44:	73fb      	strb	r3, [r7, #15]
	//Change the 7th bit of this reg --> activate external clock
	uint8_t sys_reg_value = (actual_reg_value&0xFE) + 0x01;
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_SYS_TRIGGER, 1, &sys_reg_value, 1, 10);
 8005e54:	230a      	movs	r3, #10
 8005e56:	9302      	str	r3, [sp, #8]
 8005e58:	2301      	movs	r3, #1
 8005e5a:	9301      	str	r3, [sp, #4]
 8005e5c:	f107 030e 	add.w	r3, r7, #14
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2301      	movs	r3, #1
 8005e64:	223f      	movs	r2, #63	; 0x3f
 8005e66:	2150      	movs	r1, #80	; 0x50
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f004 f9bd 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005e6e:	bf00      	nop
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <BNO055_CheckSelfTestResult>:
/*
 * Method use to check self test result
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_CheckSelfTestResult(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af04      	add	r7, sp, #16
 8005e7c:	6078      	str	r0, [r7, #4]
 8005e7e:	6039      	str	r1, [r7, #0]
	uint8_t res = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_value;
	//Checking all self power on test result
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ST_RESULT, 1, &reg_value, 1, 10);
 8005e84:	230a      	movs	r3, #10
 8005e86:	9302      	str	r3, [sp, #8]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	f107 030e 	add.w	r3, r7, #14
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	2301      	movs	r3, #1
 8005e94:	2236      	movs	r2, #54	; 0x36
 8005e96:	2150      	movs	r1, #80	; 0x50
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f004 fab9 	bl	800a410 <HAL_I2C_Mem_Read>
	if((reg_value&0x0F)!=0x0F){
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d001      	beq.n	8005eac <BNO055_CheckSelfTestResult+0x36>
		res = 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	73fb      	strb	r3, [r7, #15]
	}
	//Trigger a test to ensure sensor is working properly
	BNO055_TriggerSelfTest(I2C);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ffc1 	bl	8005e34 <BNO055_TriggerSelfTest>
	//Wait some time to ensure test is done (made with hal delay because task hasn't started yet)
	osDelay(500);
 8005eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eb6:	f009 f95f 	bl	800f178 <osDelay>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_ERR, 1, &reg_value, 1, 10);
 8005eba:	230a      	movs	r3, #10
 8005ebc:	9302      	str	r3, [sp, #8]
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f107 030e 	add.w	r3, r7, #14
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	2301      	movs	r3, #1
 8005eca:	223a      	movs	r2, #58	; 0x3a
 8005ecc:	2150      	movs	r1, #80	; 0x50
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f004 fa9e 	bl	800a410 <HAL_I2C_Mem_Read>
	if(reg_value!=0x00){
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <BNO055_CheckSelfTestResult+0x68>
		res = 1;
 8005eda:	2301      	movs	r3, #1
 8005edc:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_SYS_STATUS, 1, &reg_value, 1, 10);
 8005ede:	230a      	movs	r3, #10
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	f107 030e 	add.w	r3, r7, #14
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2301      	movs	r3, #1
 8005eee:	2239      	movs	r2, #57	; 0x39
 8005ef0:	2150      	movs	r1, #80	; 0x50
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f004 fa8c 	bl	800a410 <HAL_I2C_Mem_Read>

	return res;
 8005ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <BNO055_SetHighGThreshold>:
 * Method use to set the high g interrupt threshold
 * param: I2C --> pointer on I2C handle struct
 * param: threshold --> threshold in LSB (15.81mg = 1LSB)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGThreshold(I2C_HandleTypeDef *I2C,uint8_t threshold){
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b088      	sub	sp, #32
 8005f06:	af04      	add	r7, sp, #16
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = threshold;
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_THRESH, 1, &system_reg, 1, 10);
 8005f12:	230a      	movs	r3, #10
 8005f14:	9302      	str	r3, [sp, #8]
 8005f16:	2301      	movs	r3, #1
 8005f18:	9301      	str	r3, [sp, #4]
 8005f1a:	f107 030f 	add.w	r3, r7, #15
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2301      	movs	r3, #1
 8005f22:	2214      	movs	r2, #20
 8005f24:	2150      	movs	r1, #80	; 0x50
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f004 f95e 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <BNO055_SetHighGDuration>:
 * Method use to set the high g interrupt duration
 * param: I2C --> pointer on I2C handle struct
 * param: duration --> duration in ms (1LSB = 2ms)
 *  * note: need to be call after page(1)
 */
void BNO055_SetHighGDuration(I2C_HandleTypeDef *I2C,uint8_t duration){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b088      	sub	sp, #32
 8005f38:	af04      	add	r7, sp, #16
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
	uint8_t system_reg;
	system_reg = duration;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(I2C, BNO055_I2C_ADDR, BNO055_ACC_HG_DURATION, 1, &system_reg, 1, 10);
 8005f44:	230a      	movs	r3, #10
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	2301      	movs	r3, #1
 8005f4a:	9301      	str	r3, [sp, #4]
 8005f4c:	f107 030f 	add.w	r3, r7, #15
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	2301      	movs	r3, #1
 8005f54:	2213      	movs	r2, #19
 8005f56:	2150      	movs	r1, #80	; 0x50
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f004 f945 	bl	800a1e8 <HAL_I2C_Mem_Write>
}
 8005f5e:	bf00      	nop
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <BNO055_Init>:
/*
 * Init function for IMU, it enable it run self test
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 */
uint8_t BNO055_Init(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af04      	add	r7, sp, #16
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]

	uint8_t res = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	73fb      	strb	r3, [r7, #15]
	uint8_t reg;

	//Reset the IMU error counter
	BNO055->self_test_error = 0;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

	//Add pointer into IMU struct
	BNO055->I2C_pt = I2C;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	661a      	str	r2, [r3, #96]	; 0x60

	//We need to select the page 1
	BNO055_SetPage(I2C,1);
 8005f82:	2101      	movs	r1, #1
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fe19 	bl	8005bbc <BNO055_SetPage>

	//Enable High G accelerometer interrupt
	BNO055_EnableAccHighG(I2C);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fe74 	bl	8005c78 <BNO055_EnableAccHighG>

	//Enable HIGH G for axis X/Y/Z
	BNO055_EnableHighGAcc(I2C, 'X');
 8005f90:	2158      	movs	r1, #88	; 0x58
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff feb6 	bl	8005d04 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Y');
 8005f98:	2159      	movs	r1, #89	; 0x59
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff feb2 	bl	8005d04 <BNO055_EnableHighGAcc>
	BNO055_EnableHighGAcc(I2C, 'Z');
 8005fa0:	215a      	movs	r1, #90	; 0x5a
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff feae 	bl	8005d04 <BNO055_EnableHighGAcc>

	//Set threshold
	BNO055_SetHighGThreshold(I2C, BNO055_HG_THRESHOLD);
 8005fa8:	2150      	movs	r1, #80	; 0x50
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7ff ffa9 	bl	8005f02 <BNO055_SetHighGThreshold>

	//Set the duration
	BNO055_SetHighGDuration(I2C, BNO055_HG_DURATION);
 8005fb0:	2140      	movs	r1, #64	; 0x40
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7ff ffbe 	bl	8005f34 <BNO055_SetHighGDuration>

	//We need to select the page 0
	BNO055_SetPage(I2C,0);
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fdfe 	bl	8005bbc <BNO055_SetPage>

	//As the board have external 32.756 khz clock we use it
	BNO055_EnableExtClock(I2C);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7ff ff16 	bl	8005df2 <BNO055_EnableExtClock>
	/*Make BIST and power up test*/
	osDelay(200);
 8005fc6:	20c8      	movs	r0, #200	; 0xc8
 8005fc8:	f009 f8d6 	bl	800f178 <osDelay>
	reg = BNO055_CheckSelfTestResult(I2C, BNO055);
 8005fcc:	6839      	ldr	r1, [r7, #0]
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7ff ff51 	bl	8005e76 <BNO055_CheckSelfTestResult>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	73bb      	strb	r3, [r7, #14]
	if(reg != 0x00){
 8005fd8:	7bbb      	ldrb	r3, [r7, #14]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <BNO055_Init+0x7c>
		res = 1;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
	}

	//Select the operation mode (the NDOF use all 3 sensor and will calculate data using absolute orientation (USE BNO055_OPERATION_MODE_IMU if you want to have relative orientation)
	BNO055_SetOperationMode(I2C, BNO055_OPERATION_MODE_NDOF, BNO055);
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	210c      	movs	r1, #12
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7ff fdfe 	bl	8005be8 <BNO055_SetOperationMode>

	/*Check for writing problem of OPR_MODE_REG*/
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_OPR_MODE, 1, &reg, 1, 10);
 8005fec:	230a      	movs	r3, #10
 8005fee:	9302      	str	r3, [sp, #8]
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	9301      	str	r3, [sp, #4]
 8005ff4:	f107 030e 	add.w	r3, r7, #14
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	223d      	movs	r2, #61	; 0x3d
 8005ffe:	2150      	movs	r1, #80	; 0x50
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f004 fa05 	bl	800a410 <HAL_I2C_Mem_Read>
	if( reg != BNO055_OPERATION_MODE_NDOF){
 8006006:	7bbb      	ldrb	r3, [r7, #14]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d001      	beq.n	8006010 <BNO055_Init+0xaa>
		res = 1;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	0000      	movs	r0, r0
 800601c:	0000      	movs	r0, r0
	...

08006020 <BNO055_ReadAccel>:
 * Function use to read accelerometer data from IMU
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadAccel(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af04      	add	r7, sp, #16
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;


	xSemaphoreTake(I2CControllerProtect,25);
 800602c:	2119      	movs	r1, #25
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f009 fbea 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8006034:	230a      	movs	r3, #10
 8006036:	9302      	str	r3, [sp, #8]
 8006038:	2301      	movs	r3, #1
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	f107 0317 	add.w	r3, r7, #23
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	2301      	movs	r3, #1
 8006044:	2208      	movs	r2, #8
 8006046:	2150      	movs	r1, #80	; 0x50
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f004 f9e1 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800604e:	230a      	movs	r3, #10
 8006050:	9302      	str	r3, [sp, #8]
 8006052:	2301      	movs	r3, #1
 8006054:	9301      	str	r3, [sp, #4]
 8006056:	f107 0316 	add.w	r3, r7, #22
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2301      	movs	r3, #1
 800605e:	2209      	movs	r2, #9
 8006060:	2150      	movs	r1, #80	; 0x50
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f004 f9d4 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006068:	2300      	movs	r3, #0
 800606a:	2200      	movs	r2, #0
 800606c:	2100      	movs	r1, #0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f009 fa56 	bl	800f520 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);	//The minus sign is only use to sync axis value to board schematic
 8006074:	7dfb      	ldrb	r3, [r7, #23]
 8006076:	461a      	mov	r2, r3
 8006078:	7dbb      	ldrb	r3, [r7, #22]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	4413      	add	r3, r2
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006086:	4b74      	ldr	r3, [pc, #464]	; (8006258 <BNO055_ReadAccel+0x238>)
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	edc3 7a03 	vstr	s15, [r3, #12]

	/*In order to scale the acceleration correclty on -327m/s^2 to +327m/s^2*/
	if(BNO055->raw_data.accelerometer.x > 327.68){
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fe fa2b 	bl	80044fc <__aeabi_f2d>
 80060a6:	a368      	add	r3, pc, #416	; (adr r3, 8006248 <BNO055_ReadAccel+0x228>)
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fe fd0e 	bl	8004acc <__aeabi_dcmpgt>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d012      	beq.n	80060dc <BNO055_ReadAccel+0xbc>
		BNO055->raw_data.accelerometer.x = BNO055->raw_data.accelerometer.x - 655.36;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fa1e 	bl	80044fc <__aeabi_f2d>
 80060c0:	a363      	add	r3, pc, #396	; (adr r3, 8006250 <BNO055_ReadAccel+0x230>)
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f7fe f8b9 	bl	800423c <__aeabi_dsub>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fe fd1b 	bl	8004b0c <__aeabi_d2f>
 80060d6:	4602      	mov	r2, r0
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	60da      	str	r2, [r3, #12]
	}

	xSemaphoreTake(I2CControllerProtect,25);
 80060dc:	2119      	movs	r1, #25
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f009 fb92 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 80060e4:	230a      	movs	r3, #10
 80060e6:	9302      	str	r3, [sp, #8]
 80060e8:	2301      	movs	r3, #1
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	f107 0317 	add.w	r3, r7, #23
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	2301      	movs	r3, #1
 80060f4:	220a      	movs	r2, #10
 80060f6:	2150      	movs	r1, #80	; 0x50
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f004 f989 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 80060fe:	230a      	movs	r3, #10
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	2301      	movs	r3, #1
 8006104:	9301      	str	r3, [sp, #4]
 8006106:	f107 0316 	add.w	r3, r7, #22
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2301      	movs	r3, #1
 800610e:	220b      	movs	r2, #11
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f004 f97c 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006118:	2300      	movs	r3, #0
 800611a:	2200      	movs	r2, #0
 800611c:	2100      	movs	r1, #0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f009 f9fe 	bl	800f520 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	461a      	mov	r2, r3
 8006128:	7dbb      	ldrb	r3, [r7, #22]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	4413      	add	r3, r2
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006136:	4b48      	ldr	r3, [pc, #288]	; (8006258 <BNO055_ReadAccel+0x238>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	edc3 7a04 	vstr	s15, [r3, #16]

	if(BNO055->raw_data.accelerometer.y > 327.68){
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	4618      	mov	r0, r3
 8006152:	f7fe f9d3 	bl	80044fc <__aeabi_f2d>
 8006156:	a33c      	add	r3, pc, #240	; (adr r3, 8006248 <BNO055_ReadAccel+0x228>)
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fe fcb6 	bl	8004acc <__aeabi_dcmpgt>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d012      	beq.n	800618c <BNO055_ReadAccel+0x16c>
		BNO055->raw_data.accelerometer.y = BNO055->raw_data.accelerometer.y - 655.36;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe f9c6 	bl	80044fc <__aeabi_f2d>
 8006170:	a337      	add	r3, pc, #220	; (adr r3, 8006250 <BNO055_ReadAccel+0x230>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fe f861 	bl	800423c <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4610      	mov	r0, r2
 8006180:	4619      	mov	r1, r3
 8006182:	f7fe fcc3 	bl	8004b0c <__aeabi_d2f>
 8006186:	4602      	mov	r2, r0
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	611a      	str	r2, [r3, #16]
	}


	xSemaphoreTake(I2CControllerProtect,25);
 800618c:	2119      	movs	r1, #25
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f009 fb3a 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 8006194:	230a      	movs	r3, #10
 8006196:	9302      	str	r3, [sp, #8]
 8006198:	2301      	movs	r3, #1
 800619a:	9301      	str	r3, [sp, #4]
 800619c:	f107 0317 	add.w	r3, r7, #23
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	2301      	movs	r3, #1
 80061a4:	220c      	movs	r2, #12
 80061a6:	2150      	movs	r1, #80	; 0x50
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f004 f931 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_ACC_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80061ae:	230a      	movs	r3, #10
 80061b0:	9302      	str	r3, [sp, #8]
 80061b2:	2301      	movs	r3, #1
 80061b4:	9301      	str	r3, [sp, #4]
 80061b6:	f107 0316 	add.w	r3, r7, #22
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2301      	movs	r3, #1
 80061be:	220d      	movs	r2, #13
 80061c0:	2150      	movs	r1, #80	; 0x50
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f004 f924 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80061c8:	2300      	movs	r3, #0
 80061ca:	2200      	movs	r2, #0
 80061cc:	2100      	movs	r1, #0
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f009 f9a6 	bl	800f520 <xQueueGenericSend>
	BNO055->raw_data.accelerometer.z = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	461a      	mov	r2, r3
 80061d8:	7dbb      	ldrb	r3, [r7, #22]
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	4413      	add	r3, r2
 80061de:	ee07 3a90 	vmov	s15, r3
 80061e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80061e6:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <BNO055_ReadAccel+0x238>)
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	edc3 7a05 	vstr	s15, [r3, #20]

	if(BNO055->raw_data.accelerometer.z > 327.68){
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe f97b 	bl	80044fc <__aeabi_f2d>
 8006206:	a310      	add	r3, pc, #64	; (adr r3, 8006248 <BNO055_ReadAccel+0x228>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f7fe fc5e 	bl	8004acc <__aeabi_dcmpgt>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d100      	bne.n	8006218 <BNO055_ReadAccel+0x1f8>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
	}
}
 8006216:	e012      	b.n	800623e <BNO055_ReadAccel+0x21e>
		BNO055->raw_data.accelerometer.z = BNO055->raw_data.accelerometer.z - 655.36;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe f96d 	bl	80044fc <__aeabi_f2d>
 8006222:	a30b      	add	r3, pc, #44	; (adr r3, 8006250 <BNO055_ReadAccel+0x230>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7fe f808 	bl	800423c <__aeabi_dsub>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	4610      	mov	r0, r2
 8006232:	4619      	mov	r1, r3
 8006234:	f7fe fc6a 	bl	8004b0c <__aeabi_d2f>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	615a      	str	r2, [r3, #20]
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	47ae147b 	.word	0x47ae147b
 800624c:	40747ae1 	.word	0x40747ae1
 8006250:	47ae147b 	.word	0x47ae147b
 8006254:	40847ae1 	.word	0x40847ae1
 8006258:	20000000 	.word	0x20000000
 800625c:	00000000 	.word	0x00000000

08006260 <BNO055_ReadLina>:
 * Function use to read linear acceleration data from IMU (from fusion sensor)
 * param: I2C --> pointer on I2C handle struct
 * param: BNO055 --> pointer on IMU struct
 * param: I2CControllerProtect --> Semaphore use to protect I2C hardware from being modified by more than one task at the same time
 */
void BNO055_ReadLina(I2C_HandleTypeDef *I2C,BNO055_t *BNO055,osMutexId I2CControllerProtect){
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	; 0x28
 8006264:	af04      	add	r7, sp, #16
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
	//Read gyroscope value
	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	xSemaphoreTake(I2CControllerProtect,25);
 800626c:	2119      	movs	r1, #25
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f009 faca 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_X_LSB, 1, &reg_value_lsb, 1, 10);
 8006274:	230a      	movs	r3, #10
 8006276:	9302      	str	r3, [sp, #8]
 8006278:	2301      	movs	r3, #1
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	f107 0317 	add.w	r3, r7, #23
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	2301      	movs	r3, #1
 8006284:	2228      	movs	r2, #40	; 0x28
 8006286:	2150      	movs	r1, #80	; 0x50
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f004 f8c1 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_X_MSB, 1, &reg_value_msb, 1, 10);
 800628e:	230a      	movs	r3, #10
 8006290:	9302      	str	r3, [sp, #8]
 8006292:	2301      	movs	r3, #1
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	f107 0316 	add.w	r3, r7, #22
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	2301      	movs	r3, #1
 800629e:	2229      	movs	r2, #41	; 0x29
 80062a0:	2150      	movs	r1, #80	; 0x50
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f004 f8b4 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 80062a8:	2300      	movs	r3, #0
 80062aa:	2200      	movs	r2, #0
 80062ac:	2100      	movs	r1, #0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f009 f936 	bl	800f520 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.x = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	461a      	mov	r2, r3
 80062b8:	7dbb      	ldrb	r3, [r7, #22]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	4413      	add	r3, r2
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80062c6:	4b74      	ldr	r3, [pc, #464]	; (8006498 <BNO055_ReadLina+0x238>)
 80062c8:	881b      	ldrh	r3, [r3, #0]
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	if(BNO055->processed_data.linear_acceleration.x > 327.68){
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe f90b 	bl	80044fc <__aeabi_f2d>
 80062e6:	a368      	add	r3, pc, #416	; (adr r3, 8006488 <BNO055_ReadLina+0x228>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7fe fbee 	bl	8004acc <__aeabi_dcmpgt>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d012      	beq.n	800631c <BNO055_ReadLina+0xbc>
		BNO055->processed_data.linear_acceleration.x = BNO055->processed_data.linear_acceleration.x - 655.36;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe f8fe 	bl	80044fc <__aeabi_f2d>
 8006300:	a363      	add	r3, pc, #396	; (adr r3, 8006490 <BNO055_ReadLina+0x230>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fd ff99 	bl	800423c <__aeabi_dsub>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4610      	mov	r0, r2
 8006310:	4619      	mov	r1, r3
 8006312:	f7fe fbfb 	bl	8004b0c <__aeabi_d2f>
 8006316:	4602      	mov	r2, r0
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	645a      	str	r2, [r3, #68]	; 0x44
	}


	xSemaphoreTake(I2CControllerProtect,25);
 800631c:	2119      	movs	r1, #25
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f009 fa72 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Y_LSB, 1, &reg_value_lsb, 1, 10);
 8006324:	230a      	movs	r3, #10
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	2301      	movs	r3, #1
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	f107 0317 	add.w	r3, r7, #23
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	2301      	movs	r3, #1
 8006334:	222a      	movs	r2, #42	; 0x2a
 8006336:	2150      	movs	r1, #80	; 0x50
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f004 f869 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Y_MSB, 1, &reg_value_msb, 1, 10);
 800633e:	230a      	movs	r3, #10
 8006340:	9302      	str	r3, [sp, #8]
 8006342:	2301      	movs	r3, #1
 8006344:	9301      	str	r3, [sp, #4]
 8006346:	f107 0316 	add.w	r3, r7, #22
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2301      	movs	r3, #1
 800634e:	222b      	movs	r2, #43	; 0x2b
 8006350:	2150      	movs	r1, #80	; 0x50
 8006352:	68f8      	ldr	r0, [r7, #12]
 8006354:	f004 f85c 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	2100      	movs	r1, #0
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f009 f8de 	bl	800f520 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.y = ((float)(reg_value_lsb + (reg_value_msb<<8))/ (float) accelScale);
 8006364:	7dfb      	ldrb	r3, [r7, #23]
 8006366:	461a      	mov	r2, r3
 8006368:	7dbb      	ldrb	r3, [r7, #22]
 800636a:	021b      	lsls	r3, r3, #8
 800636c:	4413      	add	r3, r2
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006376:	4b48      	ldr	r3, [pc, #288]	; (8006498 <BNO055_ReadLina+0x238>)
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if(BNO055->processed_data.linear_acceleration.y > 327.68){
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe f8b3 	bl	80044fc <__aeabi_f2d>
 8006396:	a33c      	add	r3, pc, #240	; (adr r3, 8006488 <BNO055_ReadLina+0x228>)
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f7fe fb96 	bl	8004acc <__aeabi_dcmpgt>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d012      	beq.n	80063cc <BNO055_ReadLina+0x16c>
		BNO055->processed_data.linear_acceleration.y = BNO055->processed_data.linear_acceleration.y - 655.36;
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe f8a6 	bl	80044fc <__aeabi_f2d>
 80063b0:	a337      	add	r3, pc, #220	; (adr r3, 8006490 <BNO055_ReadLina+0x230>)
 80063b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b6:	f7fd ff41 	bl	800423c <__aeabi_dsub>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4610      	mov	r0, r2
 80063c0:	4619      	mov	r1, r3
 80063c2:	f7fe fba3 	bl	8004b0c <__aeabi_d2f>
 80063c6:	4602      	mov	r2, r0
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	649a      	str	r2, [r3, #72]	; 0x48
	}

	xSemaphoreTake(I2CControllerProtect,25);
 80063cc:	2119      	movs	r1, #25
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f009 fa1a 	bl	800f808 <xQueueSemaphoreTake>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Z_LSB, 1, &reg_value_lsb, 1, 10);
 80063d4:	230a      	movs	r3, #10
 80063d6:	9302      	str	r3, [sp, #8]
 80063d8:	2301      	movs	r3, #1
 80063da:	9301      	str	r3, [sp, #4]
 80063dc:	f107 0317 	add.w	r3, r7, #23
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	2301      	movs	r3, #1
 80063e4:	222c      	movs	r2, #44	; 0x2c
 80063e6:	2150      	movs	r1, #80	; 0x50
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f004 f811 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_LIA_DATA_Z_MSB, 1, &reg_value_msb, 1, 10);
 80063ee:	230a      	movs	r3, #10
 80063f0:	9302      	str	r3, [sp, #8]
 80063f2:	2301      	movs	r3, #1
 80063f4:	9301      	str	r3, [sp, #4]
 80063f6:	f107 0316 	add.w	r3, r7, #22
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	2301      	movs	r3, #1
 80063fe:	222d      	movs	r2, #45	; 0x2d
 8006400:	2150      	movs	r1, #80	; 0x50
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f004 f804 	bl	800a410 <HAL_I2C_Mem_Read>
	xSemaphoreGive(I2CControllerProtect);
 8006408:	2300      	movs	r3, #0
 800640a:	2200      	movs	r2, #0
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f009 f886 	bl	800f520 <xQueueGenericSend>
	BNO055->processed_data.linear_acceleration.z = ((float)(reg_value_lsb + (reg_value_msb<<8)) / (float) accelScale);
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	461a      	mov	r2, r3
 8006418:	7dbb      	ldrb	r3, [r7, #22]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	4413      	add	r3, r2
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006426:	4b1c      	ldr	r3, [pc, #112]	; (8006498 <BNO055_ReadLina+0x238>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	if(BNO055->processed_data.linear_acceleration.z > 327.68){
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe f85b 	bl	80044fc <__aeabi_f2d>
 8006446:	a310      	add	r3, pc, #64	; (adr r3, 8006488 <BNO055_ReadLina+0x228>)
 8006448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644c:	f7fe fb3e 	bl	8004acc <__aeabi_dcmpgt>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d100      	bne.n	8006458 <BNO055_ReadLina+0x1f8>
		BNO055->processed_data.linear_acceleration.z = BNO055->processed_data.linear_acceleration.z - 655.36;
	}

}
 8006456:	e012      	b.n	800647e <BNO055_ReadLina+0x21e>
		BNO055->processed_data.linear_acceleration.z = BNO055->processed_data.linear_acceleration.z - 655.36;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800645c:	4618      	mov	r0, r3
 800645e:	f7fe f84d 	bl	80044fc <__aeabi_f2d>
 8006462:	a30b      	add	r3, pc, #44	; (adr r3, 8006490 <BNO055_ReadLina+0x230>)
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f7fd fee8 	bl	800423c <__aeabi_dsub>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	4610      	mov	r0, r2
 8006472:	4619      	mov	r1, r3
 8006474:	f7fe fb4a 	bl	8004b0c <__aeabi_d2f>
 8006478:	4602      	mov	r2, r0
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800647e:	bf00      	nop
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	47ae147b 	.word	0x47ae147b
 800648c:	40747ae1 	.word	0x40747ae1
 8006490:	47ae147b 	.word	0x47ae147b
 8006494:	40847ae1 	.word	0x40847ae1
 8006498:	20000000 	.word	0x20000000

0800649c <BNO055_ReadEuler_Roll>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Roll(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af04      	add	r7, sp, #16
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_LSB, 1, &reg_value_lsb, 1, 10);
 80064a6:	230a      	movs	r3, #10
 80064a8:	9302      	str	r3, [sp, #8]
 80064aa:	2301      	movs	r3, #1
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	f107 030f 	add.w	r3, r7, #15
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2301      	movs	r3, #1
 80064b6:	221c      	movs	r2, #28
 80064b8:	2150      	movs	r1, #80	; 0x50
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f003 ffa8 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_ROLL_MSB, 1, &reg_value_msb, 1, 10);
 80064c0:	230a      	movs	r3, #10
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	2301      	movs	r3, #1
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	f107 030e 	add.w	r3, r7, #14
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	2301      	movs	r3, #1
 80064d0:	221d      	movs	r2, #29
 80064d2:	2150      	movs	r1, #80	; 0x50
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f003 ff9b 	bl	800a410 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.y = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	461a      	mov	r2, r3
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	4413      	add	r3, r2
 80064e4:	ee07 3a90 	vmov	s15, r3
 80064e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064ec:	4b11      	ldr	r3, [pc, #68]	; (8006534 <BNO055_ReadEuler_Roll+0x98>)
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.y > 2000){
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006508:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006538 <BNO055_ReadEuler_Roll+0x9c>
 800650c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006514:	dc00      	bgt.n	8006518 <BNO055_ReadEuler_Roll+0x7c>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
	}
}
 8006516:	e009      	b.n	800652c <BNO055_ReadEuler_Roll+0x90>
		BNO055->processed_data.euler_angles.y = BNO055->processed_data.euler_angles.y - 4096;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800651e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800653c <BNO055_ReadEuler_Roll+0xa0>
 8006522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800652c:	bf00      	nop
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	20000002 	.word	0x20000002
 8006538:	44fa0000 	.word	0x44fa0000
 800653c:	45800000 	.word	0x45800000

08006540 <BNO055_ReadEuler_Pitch>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Pitch(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af04      	add	r7, sp, #16
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_LSB, 1, &reg_value_lsb, 1, 10);
 800654a:	230a      	movs	r3, #10
 800654c:	9302      	str	r3, [sp, #8]
 800654e:	2301      	movs	r3, #1
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	f107 030f 	add.w	r3, r7, #15
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2301      	movs	r3, #1
 800655a:	221e      	movs	r2, #30
 800655c:	2150      	movs	r1, #80	; 0x50
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f003 ff56 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_PITCH_MSB, 1, &reg_value_msb, 1, 10);
 8006564:	230a      	movs	r3, #10
 8006566:	9302      	str	r3, [sp, #8]
 8006568:	2301      	movs	r3, #1
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	f107 030e 	add.w	r3, r7, #14
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	2301      	movs	r3, #1
 8006574:	221f      	movs	r2, #31
 8006576:	2150      	movs	r1, #80	; 0x50
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f003 ff49 	bl	800a410 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.x = (float) ((reg_value_lsb + (reg_value_msb<<8))/(float) eulerScale);
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	461a      	mov	r2, r3
 8006582:	7bbb      	ldrb	r3, [r7, #14]
 8006584:	021b      	lsls	r3, r3, #8
 8006586:	4413      	add	r3, r2
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006590:	4b11      	ldr	r3, [pc, #68]	; (80065d8 <BNO055_ReadEuler_Pitch+0x98>)
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*Make sure the data are rotating clockwise*/
	if(BNO055->processed_data.euler_angles.x > 2000){
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80065ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80065dc <BNO055_ReadEuler_Pitch+0x9c>
 80065b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b8:	dc00      	bgt.n	80065bc <BNO055_ReadEuler_Pitch+0x7c>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
	}
}
 80065ba:	e009      	b.n	80065d0 <BNO055_ReadEuler_Pitch+0x90>
		BNO055->processed_data.euler_angles.x = BNO055->processed_data.euler_angles.x - 4096;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80065c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80065e0 <BNO055_ReadEuler_Pitch+0xa0>
 80065c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80065d0:	bf00      	nop
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000002 	.word	0x20000002
 80065dc:	44fa0000 	.word	0x44fa0000
 80065e0:	45800000 	.word	0x45800000

080065e4 <BNO055_ReadEuler_Yaw>:
 * @INPUT - I2C interface struct
 * @INPUT - IMU struc
 * @OUTPUT - None
 * @INFORMATIONS - If use with freertos or other reeltime os please use a semaphore/mutex to protect I2C interface
 */
void BNO055_ReadEuler_Yaw(I2C_HandleTypeDef *I2C,BNO055_t *BNO055){
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b088      	sub	sp, #32
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]

	uint8_t reg_value_lsb;
	uint8_t reg_value_msb;

	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_LSB, 1, &reg_value_lsb, 1, 10);
 80065ee:	230a      	movs	r3, #10
 80065f0:	9302      	str	r3, [sp, #8]
 80065f2:	2301      	movs	r3, #1
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	f107 030f 	add.w	r3, r7, #15
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	2301      	movs	r3, #1
 80065fe:	221a      	movs	r2, #26
 8006600:	2150      	movs	r1, #80	; 0x50
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f003 ff04 	bl	800a410 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(I2C, BNO055_I2C_ADDR, BNO055_EUL_HEADING_MSB, 1, &reg_value_msb, 1, 10);
 8006608:	230a      	movs	r3, #10
 800660a:	9302      	str	r3, [sp, #8]
 800660c:	2301      	movs	r3, #1
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	f107 030e 	add.w	r3, r7, #14
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	2301      	movs	r3, #1
 8006618:	221b      	movs	r2, #27
 800661a:	2150      	movs	r1, #80	; 0x50
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f003 fef7 	bl	800a410 <HAL_I2C_Mem_Read>
	BNO055->processed_data.euler_angles.z = (float) ((reg_value_lsb + (reg_value_msb<<8))/ (float) eulerScale);
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	461a      	mov	r2, r3
 8006626:	7bbb      	ldrb	r3, [r7, #14]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	4413      	add	r3, r2
 800662c:	ee07 3a90 	vmov	s15, r3
 8006630:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <BNO055_ReadEuler_Yaw+0x70>)
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20000002 	.word	0x20000002

08006658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <MX_DMA_Init+0x50>)
 8006660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006662:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <MX_DMA_Init+0x50>)
 8006664:	f043 0304 	orr.w	r3, r3, #4
 8006668:	6493      	str	r3, [r2, #72]	; 0x48
 800666a:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <MX_DMA_Init+0x50>)
 800666c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666e:	f003 0304 	and.w	r3, r3, #4
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <MX_DMA_Init+0x50>)
 8006678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800667a:	4a0b      	ldr	r2, [pc, #44]	; (80066a8 <MX_DMA_Init+0x50>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6493      	str	r3, [r2, #72]	; 0x48
 8006682:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <MX_DMA_Init+0x50>)
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	603b      	str	r3, [r7, #0]
 800668c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800668e:	2200      	movs	r2, #0
 8006690:	2105      	movs	r1, #5
 8006692:	200b      	movs	r0, #11
 8006694:	f002 ffe8 	bl	8009668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006698:	200b      	movs	r0, #11
 800669a:	f002 ffff 	bl	800969c <HAL_NVIC_EnableIRQ>

}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	40021000 	.word	0x40021000

080066ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066b2:	f107 0314 	add.w	r3, r7, #20
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	609a      	str	r2, [r3, #8]
 80066be:	60da      	str	r2, [r3, #12]
 80066c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80066c2:	4b37      	ldr	r3, [pc, #220]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	4a36      	ldr	r2, [pc, #216]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066c8:	f043 0320 	orr.w	r3, r3, #32
 80066cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066ce:	4b34      	ldr	r3, [pc, #208]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066da:	4b31      	ldr	r3, [pc, #196]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066de:	4a30      	ldr	r2, [pc, #192]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066e0:	f043 0304 	orr.w	r3, r3, #4
 80066e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f2:	4b2b      	ldr	r3, [pc, #172]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066f6:	4a2a      	ldr	r2, [pc, #168]	; (80067a0 <MX_GPIO_Init+0xf4>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066fe:	4b28      	ldr	r3, [pc, #160]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800670a:	4b25      	ldr	r3, [pc, #148]	; (80067a0 <MX_GPIO_Init+0xf4>)
 800670c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670e:	4a24      	ldr	r2, [pc, #144]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006710:	f043 0308 	orr.w	r3, r3, #8
 8006714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006716:	4b22      	ldr	r3, [pc, #136]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	607b      	str	r3, [r7, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006722:	4b1f      	ldr	r3, [pc, #124]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006726:	4a1e      	ldr	r2, [pc, #120]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006728:	f043 0302 	orr.w	r3, r3, #2
 800672c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <MX_GPIO_Init+0xf4>)
 8006730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800673a:	2200      	movs	r2, #0
 800673c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006744:	f003 fc6c 	bl	800a020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8006748:	f44f 7300 	mov.w	r3, #512	; 0x200
 800674c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800674e:	2301      	movs	r3, #1
 8006750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800675a:	f107 0314 	add.w	r3, r7, #20
 800675e:	4619      	mov	r1, r3
 8006760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006764:	f003 fada 	bl	8009d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_IT_Pin;
 8006768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800676c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800676e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_IT_GPIO_Port, &GPIO_InitStruct);
 8006778:	f107 0314 	add.w	r3, r7, #20
 800677c:	4619      	mov	r1, r3
 800677e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006782:	f003 facb 	bl	8009d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006786:	2200      	movs	r2, #0
 8006788:	2105      	movs	r1, #5
 800678a:	2028      	movs	r0, #40	; 0x28
 800678c:	f002 ff6c 	bl	8009668 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006790:	2028      	movs	r0, #40	; 0x28
 8006792:	f002 ff83 	bl	800969c <HAL_NVIC_EnableIRQ>

}
 8006796:	bf00      	nop
 8006798:	3728      	adds	r7, #40	; 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	40021000 	.word	0x40021000

080067a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <MX_I2C2_Init+0x74>)
 80067aa:	4a1c      	ldr	r2, [pc, #112]	; (800681c <MX_I2C2_Init+0x78>)
 80067ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20C0EDFF;
 80067ae:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <MX_I2C2_Init+0x74>)
 80067b0:	4a1b      	ldr	r2, [pc, #108]	; (8006820 <MX_I2C2_Init+0x7c>)
 80067b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80067b4:	4b18      	ldr	r3, [pc, #96]	; (8006818 <MX_I2C2_Init+0x74>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80067ba:	4b17      	ldr	r3, [pc, #92]	; (8006818 <MX_I2C2_Init+0x74>)
 80067bc:	2201      	movs	r2, #1
 80067be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80067c0:	4b15      	ldr	r3, [pc, #84]	; (8006818 <MX_I2C2_Init+0x74>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <MX_I2C2_Init+0x74>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80067cc:	4b12      	ldr	r3, [pc, #72]	; (8006818 <MX_I2C2_Init+0x74>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80067d2:	4b11      	ldr	r3, [pc, #68]	; (8006818 <MX_I2C2_Init+0x74>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067d8:	4b0f      	ldr	r3, [pc, #60]	; (8006818 <MX_I2C2_Init+0x74>)
 80067da:	2200      	movs	r2, #0
 80067dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80067de:	480e      	ldr	r0, [pc, #56]	; (8006818 <MX_I2C2_Init+0x74>)
 80067e0:	f003 fc73 	bl	800a0ca <HAL_I2C_Init>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80067ea:	f000 fceb 	bl	80071c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80067ee:	2100      	movs	r1, #0
 80067f0:	4809      	ldr	r0, [pc, #36]	; (8006818 <MX_I2C2_Init+0x74>)
 80067f2:	f004 f9cd 	bl	800ab90 <HAL_I2CEx_ConfigAnalogFilter>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80067fc:	f000 fce2 	bl	80071c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006800:	2100      	movs	r1, #0
 8006802:	4805      	ldr	r0, [pc, #20]	; (8006818 <MX_I2C2_Init+0x74>)
 8006804:	f004 fa0f 	bl	800ac26 <HAL_I2CEx_ConfigDigitalFilter>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800680e:	f000 fcd9 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006812:	bf00      	nop
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200001f8 	.word	0x200001f8
 800681c:	40005800 	.word	0x40005800
 8006820:	20c0edff 	.word	0x20c0edff

08006824 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b0a0      	sub	sp, #128	; 0x80
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800682c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	605a      	str	r2, [r3, #4]
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	60da      	str	r2, [r3, #12]
 800683a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800683c:	f107 0318 	add.w	r3, r7, #24
 8006840:	2254      	movs	r2, #84	; 0x54
 8006842:	2100      	movs	r1, #0
 8006844:	4618      	mov	r0, r3
 8006846:	f00a fd87 	bl	8011358 <memset>
  if(i2cHandle->Instance==I2C2)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2c      	ldr	r2, [pc, #176]	; (8006900 <HAL_I2C_MspInit+0xdc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d151      	bne.n	80068f8 <HAL_I2C_MspInit+0xd4>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006854:	2380      	movs	r3, #128	; 0x80
 8006856:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006858:	2300      	movs	r3, #0
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800685c:	f107 0318 	add.w	r3, r7, #24
 8006860:	4618      	mov	r0, r3
 8006862:	f005 f837 	bl	800b8d4 <HAL_RCCEx_PeriphCLKConfig>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800686c:	f000 fcaa 	bl	80071c4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006870:	4b24      	ldr	r3, [pc, #144]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 8006872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006874:	4a23      	ldr	r2, [pc, #140]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 8006876:	f043 0320 	orr.w	r3, r3, #32
 800687a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800687c:	4b21      	ldr	r3, [pc, #132]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 800687e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006880:	f003 0320 	and.w	r3, r3, #32
 8006884:	617b      	str	r3, [r7, #20]
 8006886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 800688a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688c:	4a1d      	ldr	r2, [pc, #116]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0-OSC_IN     ------> I2C2_SDA
    PC4     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80068a0:	2301      	movs	r3, #1
 80068a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068a4:	2312      	movs	r3, #18
 80068a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068ac:	2300      	movs	r3, #0
 80068ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80068b0:	2304      	movs	r3, #4
 80068b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80068b8:	4619      	mov	r1, r3
 80068ba:	4813      	ldr	r0, [pc, #76]	; (8006908 <HAL_I2C_MspInit+0xe4>)
 80068bc:	f003 fa2e 	bl	8009d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80068c0:	2310      	movs	r3, #16
 80068c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80068c4:	2312      	movs	r3, #18
 80068c6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c8:	2300      	movs	r3, #0
 80068ca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068cc:	2300      	movs	r3, #0
 80068ce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80068d0:	2304      	movs	r3, #4
 80068d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80068d8:	4619      	mov	r1, r3
 80068da:	480c      	ldr	r0, [pc, #48]	; (800690c <HAL_I2C_MspInit+0xe8>)
 80068dc:	f003 fa1e 	bl	8009d1c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 80068e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e4:	4a07      	ldr	r2, [pc, #28]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 80068e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068ea:	6593      	str	r3, [r2, #88]	; 0x58
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <HAL_I2C_MspInit+0xe0>)
 80068ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80068f8:	bf00      	nop
 80068fa:	3780      	adds	r7, #128	; 0x80
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	40005800 	.word	0x40005800
 8006904:	40021000 	.word	0x40021000
 8006908:	48001400 	.word	0x48001400
 800690c:	48000800 	.word	0x48000800

08006910 <gps_ReadNMEA>:
 */

#include "l80-m39.h"


void gps_ReadNMEA(uint8_t nmea_data[],GPS_t *gps_struct){
 8006910:	b580      	push	{r7, lr}
 8006912:	b08e      	sub	sp, #56	; 0x38
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]

	uint8_t string_nmea[6];
	uint8_t gpgga_nmea[6] = "GPGGA\0";
 800691a:	4a70      	ldr	r2, [pc, #448]	; (8006adc <gps_ReadNMEA+0x1cc>)
 800691c:	f107 0318 	add.w	r3, r7, #24
 8006920:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006924:	6018      	str	r0, [r3, #0]
 8006926:	3304      	adds	r3, #4
 8006928:	8019      	strh	r1, [r3, #0]
	uint8_t readed_data[12];
	uint8_t delta;
	uint8_t begin_offset;
	uint8_t processing_offset = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	//Loop for all the nmea data
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006930:	2300      	movs	r3, #0
 8006932:	633b      	str	r3, [r7, #48]	; 0x30
 8006934:	e0c8      	b.n	8006ac8 <gps_ReadNMEA+0x1b8>
		/*only look for a data beginin symbol = $ */
		if(nmea_data[i] == '$'){
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	4413      	add	r3, r2
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	2b24      	cmp	r3, #36	; 0x24
 8006940:	f040 80bf 	bne.w	8006ac2 <gps_ReadNMEA+0x1b2>
			/*Check if we have $GPGGA*/
			for(int j=0;j<5;j++){
 8006944:	2300      	movs	r3, #0
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006948:	e00f      	b.n	800696a <gps_ReadNMEA+0x5a>
				string_nmea[j] = nmea_data[(i+j+1)];
 800694a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	4413      	add	r3, r2
 8006950:	3301      	adds	r3, #1
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4413      	add	r3, r2
 8006956:	7819      	ldrb	r1, [r3, #0]
 8006958:	f107 0220 	add.w	r2, r7, #32
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	4413      	add	r3, r2
 8006960:	460a      	mov	r2, r1
 8006962:	701a      	strb	r2, [r3, #0]
			for(int j=0;j<5;j++){
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	3301      	adds	r3, #1
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2b04      	cmp	r3, #4
 800696e:	ddec      	ble.n	800694a <gps_ReadNMEA+0x3a>
			}
			string_nmea[5] = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			/*Be aware that input string of strcmp need to end on \0 If not the result will probably be random value*/
			if(strcmp(string_nmea,gpgga_nmea) == 0){
 8006976:	f107 0218 	add.w	r2, r7, #24
 800697a:	f107 0320 	add.w	r3, r7, #32
 800697e:	4611      	mov	r1, r2
 8006980:	4618      	mov	r0, r3
 8006982:	f7fd fc4d 	bl	8004220 <strcmp>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	f040 809a 	bne.w	8006ac2 <gps_ReadNMEA+0x1b2>
				i+=6;	/*Skip GPGGA,*/
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	3306      	adds	r3, #6
 8006992:	633b      	str	r3, [r7, #48]	; 0x30
				for(int k=0;k<12;k++){
 8006994:	2300      	movs	r3, #0
 8006996:	62bb      	str	r3, [r7, #40]	; 0x28
 8006998:	e08e      	b.n	8006ab8 <gps_ReadNMEA+0x1a8>

					/*Read a part of the incomming data*/
					i++;	/*skip ','*/
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	3301      	adds	r3, #1
 800699e:	633b      	str	r3, [r7, #48]	; 0x30
					begin_offset = i;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					delta = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 80069ac:	e013      	b.n	80069d6 <gps_ReadNMEA+0xc6>
						readed_data[delta] = nmea_data[i];
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	441a      	add	r2, r3
 80069b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	3338      	adds	r3, #56	; 0x38
 80069bc:	443b      	add	r3, r7
 80069be:	f803 2c2c 	strb.w	r2, [r3, #-44]
						i++;
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	3301      	adds	r3, #1
 80069c6:	633b      	str	r3, [r7, #48]	; 0x30
						delta = i - begin_offset;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					while((nmea_data[i] !='\0' )&&( nmea_data[i] != ',')){
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <gps_ReadNMEA+0xde>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	4413      	add	r3, r2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b2c      	cmp	r3, #44	; 0x2c
 80069ec:	d1df      	bne.n	80069ae <gps_ReadNMEA+0x9e>
					}
					processing_offset++;
 80069ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80069f2:	3301      	adds	r3, #1
 80069f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					/*Process incomming data*/
					switch (processing_offset) {
 80069f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80069fc:	3b01      	subs	r3, #1
 80069fe:	2b0a      	cmp	r3, #10
 8006a00:	d857      	bhi.n	8006ab2 <gps_ReadNMEA+0x1a2>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <gps_ReadNMEA+0xf8>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a51 	.word	0x08006a51
 8006a14:	08006a5f 	.word	0x08006a5f
 8006a18:	08006a6d 	.word	0x08006a6d
 8006a1c:	08006a7b 	.word	0x08006a7b
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006ab3 	.word	0x08006ab3
 8006a28:	08006a97 	.word	0x08006a97
 8006a2c:	08006ab3 	.word	0x08006ab3
 8006a30:	08006aa5 	.word	0x08006aa5
						/*UTC*/
						case 1:
							gps_ProcessUTC(readed_data, gps_struct);
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 f850 	bl	8006ae0 <gps_ProcessUTC>
							break;
 8006a40:	e037      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*LATITUDE*/
						case 2:
							gps_ProcessLatitude(readed_data, gps_struct);
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f889 	bl	8006b60 <gps_ProcessLatitude>
							break;
 8006a4e:	e030      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*NORTH - SOUTH*/
						case 3:
							gps_ProcessNorthSouth(readed_data, gps_struct);
 8006a50:	f107 030c 	add.w	r3, r7, #12
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f9fc 	bl	8006e54 <gps_ProcessNorthSouth>
							break;
 8006a5c:	e029      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*LONGITUDE*/
						case 4:
							gps_ProcessLongitude(readed_data, gps_struct);
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 f937 	bl	8006cd8 <gps_ProcessLongitude>
							break;
 8006a6a:	e022      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*EAST - WEST*/
						case 5:
							gps_ProcessEastWest(readed_data,gps_struct);
 8006a6c:	f107 030c 	add.w	r3, r7, #12
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fa04 	bl	8006e80 <gps_ProcessEastWest>
							break;
 8006a78:	e01b      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*FIX QUALIFICATION*/
						case 6:
							gps_ProcessFix(readed_data, gps_struct);
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fa13 	bl	8006eac <gps_ProcessFix>
							break;
 8006a86:	e014      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*SATELLITES COUNT */
						case 7:
							gps_ProcessSatelliteCount(readed_data, gps_struct);
 8006a88:	f107 030c 	add.w	r3, r7, #12
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fa2a 	bl	8006ee8 <gps_ProcessSatelliteCount>
							break;
 8006a94:	e00d      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*MSL ALTITUDE*/
						case 9:
							gps_ProcessAltitude(readed_data, gps_struct);
 8006a96:	f107 030c 	add.w	r3, r7, #12
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fa3f 	bl	8006f20 <gps_ProcessAltitude>
							break;
 8006aa2:	e006      	b.n	8006ab2 <gps_ReadNMEA+0x1a2>

						/*ELLIPTICAL CORRECTION */
						case 11:
							gps_ProcessAltitudeCorre(readed_data, gps_struct);	//Can be use to process altitude correction as well
 8006aa4:	f107 030c 	add.w	r3, r7, #12
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fa94 	bl	8006fd8 <gps_ProcessAltitudeCorre>
							break;
 8006ab0:	bf00      	nop
				for(int k=0;k<12;k++){
 8006ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aba:	2b0b      	cmp	r3, #11
 8006abc:	f77f af6d 	ble.w	800699a <gps_ReadNMEA+0x8a>
					}
				}
				/*After the first $GPGGA read we need to quit the current reading process*/
				break;
 8006ac0:	e008      	b.n	8006ad4 <gps_ReadNMEA+0x1c4>
	for(int i=0;i<BUFFER_SIZE_NMEA;i++){
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ace:	f6ff af32 	blt.w	8006936 <gps_ReadNMEA+0x26>

			}
		}
	}
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	080124b8 	.word	0x080124b8

08006ae0 <gps_ProcessUTC>:

void gps_ProcessUTC(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
	gps_struct->utc_time.hour = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	0092      	lsls	r2, r2, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3301      	adds	r3, #1
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	4413      	add	r3, r2
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	3b10      	subs	r3, #16
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	761a      	strb	r2, [r3, #24]
	gps_struct->utc_time.minute = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3302      	adds	r3, #2
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	461a      	mov	r2, r3
 8006b12:	0092      	lsls	r2, r2, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	005b      	lsls	r3, r3, #1
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3303      	adds	r3, #3
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	4413      	add	r3, r2
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	3b10      	subs	r3, #16
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	765a      	strb	r2, [r3, #25]
	gps_struct->utc_time.second = ((utc_incomming[4] - '0')*10) + (utc_incomming[5] - '0');
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	0092      	lsls	r2, r2, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3305      	adds	r3, #5
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	4413      	add	r3, r2
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3b10      	subs	r3, #16
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	769a      	strb	r2, [r3, #26]
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	0000      	movs	r0, r0
 8006b5c:	0000      	movs	r0, r0
	...

08006b60 <gps_ProcessLatitude>:

void gps_ProcessLatitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006b60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	3b30      	subs	r3, #48	; 0x30
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	0092      	lsls	r2, r2, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4413      	add	r3, r2
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	3b30      	subs	r3, #48	; 0x30
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[2] - '0')*10) + (utc_incomming[3] - '0');
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3303      	adds	r3, #3
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	3b30      	subs	r3, #48	; 0x30
 8006bb4:	4413      	add	r3, r2
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bbe:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006bc2:	68b8      	ldr	r0, [r7, #8]
 8006bc4:	f7fd fc9a 	bl	80044fc <__aeabi_f2d>
 8006bc8:	4604      	mov	r4, r0
 8006bca:	460d      	mov	r5, r1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	3305      	adds	r3, #5
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	3b30      	subs	r3, #48	; 0x30
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fd fc7f 	bl	80044d8 <__aeabi_i2d>
 8006bda:	a336      	add	r3, pc, #216	; (adr r3, 8006cb4 <gps_ProcessLatitude+0x154>)
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7fd fce4 	bl	80045ac <__aeabi_dmul>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4690      	mov	r8, r2
 8006bea:	4699      	mov	r9, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3306      	adds	r3, #6
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	3b30      	subs	r3, #48	; 0x30
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fd fc6f 	bl	80044d8 <__aeabi_i2d>
 8006bfa:	a330      	add	r3, pc, #192	; (adr r3, 8006cbc <gps_ProcessLatitude+0x15c>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7fd fcd4 	bl	80045ac <__aeabi_dmul>
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	4640      	mov	r0, r8
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	f7fd fb18 	bl	8004240 <__adddf3>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4690      	mov	r8, r2
 8006c16:	4699      	mov	r9, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	3b30      	subs	r3, #48	; 0x30
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fd fc59 	bl	80044d8 <__aeabi_i2d>
 8006c26:	a327      	add	r3, pc, #156	; (adr r3, 8006cc4 <gps_ProcessLatitude+0x164>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f7fd fcbe 	bl	80045ac <__aeabi_dmul>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4640      	mov	r0, r8
 8006c36:	4649      	mov	r1, r9
 8006c38:	f7fd fb02 	bl	8004240 <__adddf3>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	460b      	mov	r3, r1
 8006c40:	4690      	mov	r8, r2
 8006c42:	4699      	mov	r9, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3308      	adds	r3, #8
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	3b30      	subs	r3, #48	; 0x30
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fd fc43 	bl	80044d8 <__aeabi_i2d>
 8006c52:	a31e      	add	r3, pc, #120	; (adr r3, 8006ccc <gps_ProcessLatitude+0x16c>)
 8006c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c58:	f7fd fca8 	bl	80045ac <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4640      	mov	r0, r8
 8006c62:	4649      	mov	r1, r9
 8006c64:	f7fd faec 	bl	8004240 <__adddf3>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7fd fae6 	bl	8004240 <__adddf3>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4610      	mov	r0, r2
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	f7fd ff46 	bl	8004b0c <__aeabi_d2f>
 8006c80:	4603      	mov	r3, r0
 8006c82:	60bb      	str	r3, [r7, #8]

	gps_struct->latitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c90:	edd7 6a02 	vldr	s13, [r7, #8]
 8006c94:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8006cb0 <gps_ProcessLatitude+0x150>
 8006c98:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	edc3 7a00 	vstr	s15, [r3]
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006cb0:	42700000 	.word	0x42700000
 8006cb4:	9999999a 	.word	0x9999999a
 8006cb8:	3fb99999 	.word	0x3fb99999
 8006cbc:	47ae147b 	.word	0x47ae147b
 8006cc0:	3f847ae1 	.word	0x3f847ae1
 8006cc4:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cc8:	3f50624d 	.word	0x3f50624d
 8006ccc:	eb1c432d 	.word	0xeb1c432d
 8006cd0:	3f1a36e2 	.word	0x3f1a36e2
 8006cd4:	00000000 	.word	0x00000000

08006cd8 <gps_ProcessLongitude>:

void gps_ProcessLongitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006cd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	6039      	str	r1, [r7, #0]

	int8_t degree_DMm = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
	float minute_DMm = 0;
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]

	/*Add reader degree*/
	degree_DMm = ((utc_incomming[1] - '0')*10) + (utc_incomming[2] - '0');
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	3b30      	subs	r3, #48	; 0x30
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	0092      	lsls	r2, r2, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	005b      	lsls	r3, r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3302      	adds	r3, #2
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4413      	add	r3, r2
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	3b30      	subs	r3, #48	; 0x30
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	73fb      	strb	r3, [r7, #15]
	/*Add first part of minutes*/
	minute_DMm = ((utc_incomming[3] - '0')*10) + (utc_incomming[4] - '0');
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3303      	adds	r3, #3
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	461a      	mov	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	3b30      	subs	r3, #48	; 0x30
 8006d2e:	4413      	add	r3, r2
 8006d30:	ee07 3a90 	vmov	s15, r3
 8006d34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d38:	edc7 7a02 	vstr	s15, [r7, #8]
	minute_DMm += ((utc_incomming[5] - '0')*0.1) + ((utc_incomming[6] - '0')*0.01) + ((utc_incomming[7] - '0')*0.001) + ((utc_incomming[8] - '0')*0.0001);
 8006d3c:	68b8      	ldr	r0, [r7, #8]
 8006d3e:	f7fd fbdd 	bl	80044fc <__aeabi_f2d>
 8006d42:	4604      	mov	r4, r0
 8006d44:	460d      	mov	r5, r1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3305      	adds	r3, #5
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	3b30      	subs	r3, #48	; 0x30
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd fbc2 	bl	80044d8 <__aeabi_i2d>
 8006d54:	a337      	add	r3, pc, #220	; (adr r3, 8006e34 <gps_ProcessLongitude+0x15c>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7fd fc27 	bl	80045ac <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4690      	mov	r8, r2
 8006d64:	4699      	mov	r9, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3306      	adds	r3, #6
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	3b30      	subs	r3, #48	; 0x30
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fd fbb2 	bl	80044d8 <__aeabi_i2d>
 8006d74:	a331      	add	r3, pc, #196	; (adr r3, 8006e3c <gps_ProcessLongitude+0x164>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7fd fc17 	bl	80045ac <__aeabi_dmul>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7fd fa5b 	bl	8004240 <__adddf3>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4690      	mov	r8, r2
 8006d90:	4699      	mov	r9, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3307      	adds	r3, #7
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	3b30      	subs	r3, #48	; 0x30
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fd fb9c 	bl	80044d8 <__aeabi_i2d>
 8006da0:	a328      	add	r3, pc, #160	; (adr r3, 8006e44 <gps_ProcessLongitude+0x16c>)
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f7fd fc01 	bl	80045ac <__aeabi_dmul>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4640      	mov	r0, r8
 8006db0:	4649      	mov	r1, r9
 8006db2:	f7fd fa45 	bl	8004240 <__adddf3>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4690      	mov	r8, r2
 8006dbc:	4699      	mov	r9, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	3b30      	subs	r3, #48	; 0x30
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fd fb86 	bl	80044d8 <__aeabi_i2d>
 8006dcc:	a31f      	add	r3, pc, #124	; (adr r3, 8006e4c <gps_ProcessLongitude+0x174>)
 8006dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd2:	f7fd fbeb 	bl	80045ac <__aeabi_dmul>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7fd fa2f 	bl	8004240 <__adddf3>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4620      	mov	r0, r4
 8006de8:	4629      	mov	r1, r5
 8006dea:	f7fd fa29 	bl	8004240 <__adddf3>
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	f7fd fe89 	bl	8004b0c <__aeabi_d2f>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	60bb      	str	r3, [r7, #8]

	gps_struct->longitude_deg_s = (degree_DMm + (minute_DMm/60));
 8006dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8006e0e:	ed9f 6a08 	vldr	s12, [pc, #32]	; 8006e30 <gps_ProcessLongitude+0x158>
 8006e12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8006e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e2a:	bf00      	nop
 8006e2c:	f3af 8000 	nop.w
 8006e30:	42700000 	.word	0x42700000
 8006e34:	9999999a 	.word	0x9999999a
 8006e38:	3fb99999 	.word	0x3fb99999
 8006e3c:	47ae147b 	.word	0x47ae147b
 8006e40:	3f847ae1 	.word	0x3f847ae1
 8006e44:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e48:	3f50624d 	.word	0x3f50624d
 8006e4c:	eb1c432d 	.word	0xeb1c432d
 8006e50:	3f1a36e2 	.word	0x3f1a36e2

08006e54 <gps_ProcessNorthSouth>:

void gps_ProcessNorthSouth(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'N'){
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	2b4e      	cmp	r3, #78	; 0x4e
 8006e64:	d103      	bne.n	8006e6e <gps_ProcessNorthSouth+0x1a>
		gps_struct->north_south = north;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	741a      	strb	r2, [r3, #16]
	}
	else{
		gps_struct->north_south = south;
	}
}
 8006e6c:	e002      	b.n	8006e74 <gps_ProcessNorthSouth+0x20>
		gps_struct->north_south = south;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2201      	movs	r2, #1
 8006e72:	741a      	strb	r2, [r3, #16]
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <gps_ProcessEastWest>:

void gps_ProcessEastWest(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == 'E'){
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b45      	cmp	r3, #69	; 0x45
 8006e90:	d103      	bne.n	8006e9a <gps_ProcessEastWest+0x1a>
		gps_struct->east_west = east;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2202      	movs	r2, #2
 8006e96:	745a      	strb	r2, [r3, #17]
	}
	else{
		gps_struct->east_west = west;
	}
}
 8006e98:	e002      	b.n	8006ea0 <gps_ProcessEastWest+0x20>
		gps_struct->east_west = west;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2203      	movs	r2, #3
 8006e9e:	745a      	strb	r2, [r3, #17]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <gps_ProcessFix>:

void gps_ProcessFix(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]

	if(utc_incomming[0] == '1'){
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b31      	cmp	r3, #49	; 0x31
 8006ebc:	d103      	bne.n	8006ec6 <gps_ProcessFix+0x1a>
		gps_struct->qualification = fix_gps;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	771a      	strb	r2, [r3, #28]
		}
		else{
			gps_struct->qualification = unvalid;
		}
	}
}
 8006ec4:	e00a      	b.n	8006edc <gps_ProcessFix+0x30>
		if(utc_incomming[0] == '2'){
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b32      	cmp	r3, #50	; 0x32
 8006ecc:	d103      	bne.n	8006ed6 <gps_ProcessFix+0x2a>
			gps_struct->qualification = fix_dgps;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	771a      	strb	r2, [r3, #28]
}
 8006ed4:	e002      	b.n	8006edc <gps_ProcessFix+0x30>
			gps_struct->qualification = unvalid;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	771a      	strb	r2, [r3, #28]
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <gps_ProcessSatelliteCount>:

void gps_ProcessSatelliteCount(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]

	gps_struct->satelite_number = ((utc_incomming[0] - '0')*10) + (utc_incomming[1] - '0');
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	0092      	lsls	r2, r2, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	b2da      	uxtb	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	3301      	adds	r3, #1
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	4413      	add	r3, r2
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	3b10      	subs	r3, #16
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	76da      	strb	r2, [r3, #27]
}
 8006f12:	bf00      	nop
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <gps_ProcessAltitude>:

void gps_ProcessAltitude(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006f30:	2300      	movs	r3, #0
 8006f32:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e03f      	b.n	8006fba <gps_ProcessAltitude+0x9a>

		if(utc_incomming[i] == '.'){
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	4413      	add	r3, r2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b2e      	cmp	r3, #46	; 0x2e
 8006f44:	d104      	bne.n	8006f50 <gps_ProcessAltitude+0x30>
			dot_find = 1;
 8006f46:	2301      	movs	r3, #1
 8006f48:	74fb      	strb	r3, [r7, #19]
			i++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8006f50:	7cfb      	ldrb	r3, [r7, #19]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d01b      	beq.n	8006f8e <gps_ProcessAltitude+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	3b30      	subs	r3, #48	; 0x30
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fd fab9 	bl	80044d8 <__aeabi_i2d>
 8006f66:	a31a      	add	r3, pc, #104	; (adr r3, 8006fd0 <gps_ProcessAltitude+0xb0>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7fd fb1e 	bl	80045ac <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4610      	mov	r0, r2
 8006f76:	4619      	mov	r1, r3
 8006f78:	f7fd fdc8 	bl	8004b0c <__aeabi_d2f>
 8006f7c:	ee07 0a10 	vmov	s14, r0
 8006f80:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f88:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8006f8c:	e018      	b.n	8006fc0 <gps_ProcessAltitude+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8006f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	3b30      	subs	r3, #48	; 0x30
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fb0:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d9bc      	bls.n	8006f3a <gps_ProcessAltitude+0x1a>
		}

	}
	gps_struct->altitude_deg_s = altitude;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	609a      	str	r2, [r3, #8]
}
 8006fc6:	bf00      	nop
 8006fc8:	3718      	adds	r7, #24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	9999999a 	.word	0x9999999a
 8006fd4:	3fb99999 	.word	0x3fb99999

08006fd8 <gps_ProcessAltitudeCorre>:

void gps_ProcessAltitudeCorre(uint8_t utc_incomming[],GPS_t *gps_struct){
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

	float altitude = 0;
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	617b      	str	r3, [r7, #20]
	uint8_t dot_find = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	74fb      	strb	r3, [r7, #19]
	for(int i=0;i<sizeof(utc_incomming);i++){
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e03f      	b.n	8007072 <gps_ProcessAltitudeCorre+0x9a>

		if(utc_incomming[i] == '.'){
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b2e      	cmp	r3, #46	; 0x2e
 8006ffc:	d104      	bne.n	8007008 <gps_ProcessAltitudeCorre+0x30>
			dot_find = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	74fb      	strb	r3, [r7, #19]
			i++;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3301      	adds	r3, #1
 8007006:	60fb      	str	r3, [r7, #12]
		}

		if(dot_find){
 8007008:	7cfb      	ldrb	r3, [r7, #19]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01b      	beq.n	8007046 <gps_ProcessAltitudeCorre+0x6e>
			altitude +=  (float)((utc_incomming[i] - '0')*0.1);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	4413      	add	r3, r2
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	3b30      	subs	r3, #48	; 0x30
 8007018:	4618      	mov	r0, r3
 800701a:	f7fd fa5d 	bl	80044d8 <__aeabi_i2d>
 800701e:	a31a      	add	r3, pc, #104	; (adr r3, 8007088 <gps_ProcessAltitudeCorre+0xb0>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7fd fac2 	bl	80045ac <__aeabi_dmul>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4610      	mov	r0, r2
 800702e:	4619      	mov	r1, r3
 8007030:	f7fd fd6c 	bl	8004b0c <__aeabi_d2f>
 8007034:	ee07 0a10 	vmov	s14, r0
 8007038:	edd7 7a05 	vldr	s15, [r7, #20]
 800703c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007040:	edc7 7a05 	vstr	s15, [r7, #20]
			break;
 8007044:	e018      	b.n	8007078 <gps_ProcessAltitudeCorre+0xa0>

		}
		else{
			altitude = (altitude*10) + (utc_incomming[i] - '0');
 8007046:	edd7 7a05 	vldr	s15, [r7, #20]
 800704a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800704e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	4413      	add	r3, r2
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	3b30      	subs	r3, #48	; 0x30
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007068:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i=0;i<sizeof(utc_incomming);i++){
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3301      	adds	r3, #1
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2b03      	cmp	r3, #3
 8007076:	d9bc      	bls.n	8006ff2 <gps_ProcessAltitudeCorre+0x1a>
		}

	}
	gps_struct->altitude_correction = altitude;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	60da      	str	r2, [r3, #12]
}
 800707e:	bf00      	nop
 8007080:	3718      	adds	r7, #24
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	9999999a 	.word	0x9999999a
 800708c:	3fb99999 	.word	0x3fb99999

08007090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8007094:	b662      	cpsie	i
}
 8007096:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007098:	f000 ffc9 	bl	800802e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800709c:	f000 f834 	bl	8007108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80070a0:	f7ff fb04 	bl	80066ac <MX_GPIO_Init>
  MX_DMA_Init();
 80070a4:	f7ff fad8 	bl	8006658 <MX_DMA_Init>
  MX_I2C2_Init();
 80070a8:	f7ff fb7c 	bl	80067a4 <MX_I2C2_Init>
  MX_TIM2_Init();
 80070ac:	f000 fc68 	bl	8007980 <MX_TIM2_Init>
  MX_TIM3_Init();
 80070b0:	f000 fcbe 	bl	8007a30 <MX_TIM3_Init>
  MX_TIM4_Init();
 80070b4:	f000 fd16 	bl	8007ae4 <MX_TIM4_Init>
  MX_UART4_Init();
 80070b8:	f000 fe2c 	bl	8007d14 <MX_UART4_Init>
  MX_UART5_Init();
 80070bc:	f000 fe76 	bl	8007dac <MX_UART5_Init>
  MX_ADC2_Init();
 80070c0:	f7fd fef2 	bl	8004ea8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  /*Timer start flaps and throttle + buzzer*/
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80070c4:	2100      	movs	r1, #0
 80070c6:	480c      	ldr	r0, [pc, #48]	; (80070f8 <main+0x68>)
 80070c8:	f004 ff84 	bl	800bfd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80070cc:	2100      	movs	r1, #0
 80070ce:	480b      	ldr	r0, [pc, #44]	; (80070fc <main+0x6c>)
 80070d0:	f004 ff80 	bl	800bfd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80070d4:	2104      	movs	r1, #4
 80070d6:	4809      	ldr	r0, [pc, #36]	; (80070fc <main+0x6c>)
 80070d8:	f004 ff7c 	bl	800bfd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80070dc:	210c      	movs	r1, #12
 80070de:	4807      	ldr	r0, [pc, #28]	; (80070fc <main+0x6c>)
 80070e0:	f004 ff78 	bl	800bfd4 <HAL_TIM_PWM_Start>

  /*Start ADC conversion with DMA request*/
  HAL_ADC_Start_DMA(&hadc2, &BatteryMonitoringData, CONVERSION_COUNT);
 80070e4:	2203      	movs	r2, #3
 80070e6:	4906      	ldr	r1, [pc, #24]	; (8007100 <main+0x70>)
 80070e8:	4806      	ldr	r0, [pc, #24]	; (8007104 <main+0x74>)
 80070ea:	f001 fbdd 	bl	80088a8 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80070ee:	f7fe f90d 	bl	800530c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80070f2:	f008 f813 	bl	800f11c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80070f6:	e7fe      	b.n	80070f6 <main+0x66>
 80070f8:	200007b8 	.word	0x200007b8
 80070fc:	20000804 	.word	0x20000804
 8007100:	20000718 	.word	0x20000718
 8007104:	20000094 	.word	0x20000094

08007108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b094      	sub	sp, #80	; 0x50
 800710c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800710e:	f107 0318 	add.w	r3, r7, #24
 8007112:	2238      	movs	r2, #56	; 0x38
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f00a f91e 	bl	8011358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800711c:	1d3b      	adds	r3, r7, #4
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	609a      	str	r2, [r3, #8]
 8007126:	60da      	str	r2, [r3, #12]
 8007128:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800712a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800712e:	f003 fdc7 	bl	800acc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007132:	2302      	movs	r3, #2
 8007134:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800713a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007140:	2302      	movs	r3, #2
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007144:	2302      	movs	r3, #2
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8007148:	2304      	movs	r3, #4
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800714c:	234b      	movs	r3, #75	; 0x4b
 800714e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007150:	2302      	movs	r3, #2
 8007152:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007154:	2302      	movs	r3, #2
 8007156:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007158:	2302      	movs	r3, #2
 800715a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800715c:	f107 0318 	add.w	r3, r7, #24
 8007160:	4618      	mov	r0, r3
 8007162:	f003 fe51 	bl	800ae08 <HAL_RCC_OscConfig>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800716c:	f000 f82a 	bl	80071c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007170:	230f      	movs	r3, #15
 8007172:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007174:	2303      	movs	r3, #3
 8007176:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	2104      	movs	r1, #4
 8007188:	4618      	mov	r0, r3
 800718a:	f004 f955 	bl	800b438 <HAL_RCC_ClockConfig>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8007194:	f000 f816 	bl	80071c4 <Error_Handler>
  }
}
 8007198:	bf00      	nop
 800719a:	3750      	adds	r7, #80	; 0x50
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80071b2:	f000 ff55 	bl	8008060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	40012c00 	.word	0x40012c00

080071c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80071c8:	b672      	cpsid	i
}
 80071ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80071cc:	e7fe      	b.n	80071cc <Error_Handler+0x8>

080071ce <Pid_CalculatePitchError>:
DESCRIPTION - Basic driver for the mpu6050 accelerometer.
*******************************************************)*/
#include "main.h"

//As the gyro got the front at x axis then rotation on X mean roll / rotation on Y mean pitch and rotation on Z mean yaw
float32_t Pid_CalculatePitchError(COMMAND_t *command,BNO055_t *Accelerometer){
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.x)-(command->pitch_angle);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80071e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071e8:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	ee07 3a90 	vmov	s15, r3
}
 80071f2:	eeb0 0a67 	vmov.f32	s0, s15
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <Pid_CalculateYawError>:

float32_t Pid_CalculateYawError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.z)-(command->yaw_angle);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	edd3 7a03 	vldr	s15, [r3, #12]
 8007216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800721a:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	ee07 3a90 	vmov	s15, r3
}
 8007224:	eeb0 0a67 	vmov.f32	s0, s15
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <Pid_CalculateRollError>:

float32_t Pid_CalculateRollError(COMMAND_t *command,BNO055_t *Accelerometer){
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
	float32_t res = (Accelerometer->processed_data.euler_angles.y)-(command->roll_angle);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	edd3 7a04 	vldr	s15, [r3, #16]
 8007248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800724c:	edc7 7a03 	vstr	s15, [r7, #12]
	return res;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	ee07 3a90 	vmov	s15, r3
}
 8007256:	eeb0 0a67 	vmov.f32	s0, s15
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <Pid_Init>:

void Pid_Init(arm_pid_instance_f32 *PID,float32_t KP,float32_t KI,float32_t KD){
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007270:	edc7 0a01 	vstr	s1, [r7, #4]
 8007274:	ed87 1a00 	vstr	s2, [r7]

	//Set PID gain
	PID->Kp = KP;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	619a      	str	r2, [r3, #24]
	PID->Ki = KI;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	61da      	str	r2, [r3, #28]
	PID->Kd = KD;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	621a      	str	r2, [r3, #32]

	//Set the PID
	arm_pid_init_f32(PID, 1);
 800728a:	2101      	movs	r1, #1
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f00a f845 	bl	801131c <arm_pid_init_f32>

}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <Pid_CompensateYaw>:

//Function use to compensate a roatation on yaw axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateYaw(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 800729a:	b580      	push	{r7, lr}
 800729c:	b08a      	sub	sp, #40	; 0x28
 800729e:	af00      	add	r7, sp, #0
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	60b9      	str	r1, [r7, #8]
 80072a4:	607a      	str	r2, [r7, #4]
 80072a6:	603b      	str	r3, [r7, #0]
	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateYawError(command, Accelerometer);
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	68b8      	ldr	r0, [r7, #8]
 80072ac:	f7ff ffa8 	bl	8007200 <Pid_CalculateYawError>
 80072b0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	61bb      	str	r3, [r7, #24]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	ed93 7a00 	vldr	s14, [r3]
 80072c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80072c6:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80072d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80072da:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80072ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80072ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80072f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072fc:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Update state */
    S->state[1] = S->state[0];
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8007314:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007316:	623b      	str	r3, [r7, #32]

	//Ase the plane is a fixed wing we can't compensate move on yaw axis ...
	//If you have different plane make sure to create a thing to do here
}
 8007318:	bf00      	nop
 800731a:	3728      	adds	r7, #40	; 0x28
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <Pid_CompensateRoll>:

//Function use to compensate a roatation on Roll axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensateRoll(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 8007320:	b580      	push	{r7, lr}
 8007322:	b08a      	sub	sp, #40	; 0x28
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculateRollError(command, Accelerometer);
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	68b8      	ldr	r0, [r7, #8]
 8007332:	f7ff ff7e 	bl	8007232 <Pid_CalculateRollError>
 8007336:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	ed93 7a00 	vldr	s14, [r3]
 8007348:	edd7 7a06 	vldr	s15, [r7, #24]
 800734c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	edd3 6a01 	vldr	s13, [r3, #4]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	edd3 7a03 	vldr	s15, [r3, #12]
 800735c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8007360:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	edd3 6a02 	vldr	s13, [r3, #8]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800737e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007382:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	615a      	str	r2, [r3, #20]
    return (out);
 800739a:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 800739c:	623b      	str	r3, [r7, #32]

	/*Left flaps up and right flaps down*/


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80073ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073b2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80074a4 <Pid_CompensateRoll+0x184>
 80073b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073be:	dd04      	ble.n	80073ca <Pid_CompensateRoll+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	f640 52ac 	movw	r2, #3500	; 0xdac
 80073c6:	625a      	str	r2, [r3, #36]	; 0x24
 80073c8:	e025      	b.n	8007416 <Pid_CompensateRoll+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80073da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073de:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80074a8 <Pid_CompensateRoll+0x188>
 80073e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ea:	d504      	bpl.n	80073f6 <Pid_CompensateRoll+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f240 5214 	movw	r2, #1300	; 0x514
 80073f2:	625a      	str	r2, [r3, #36]	; 0x24
 80073f4:	e00f      	b.n	8007416 <Pid_CompensateRoll+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	ee07 3a90 	vmov	s15, r3
 80073fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007402:	edd7 7a08 	vldr	s15, [r7, #32]
 8007406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800740a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val -= pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val + pid_value)>MIN_RIGHT_EXTENSION){
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007422:	edd7 7a08 	vldr	s15, [r7, #32]
 8007426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800742a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80074a4 <Pid_CompensateRoll+0x184>
 800742e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	dd04      	ble.n	8007442 <Pid_CompensateRoll+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f640 52ac 	movw	r2, #3500	; 0xdac
 800743e:	629a      	str	r2, [r3, #40]	; 0x28
 8007440:	e025      	b.n	800748e <Pid_CompensateRoll+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val + pid_value)<MAX_RIGHT_EXTENSION){
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800744e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007456:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80074a8 <Pid_CompensateRoll+0x188>
 800745a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800745e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007462:	d504      	bpl.n	800746e <Pid_CompensateRoll+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	f240 5214 	movw	r2, #1300	; 0x514
 800746a:	629a      	str	r2, [r3, #40]	; 0x28
 800746c:	e00f      	b.n	800748e <Pid_CompensateRoll+0x16e>
		}
		else{
			propulsion->servo_right_timer_val += pid_value;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800747a:	edd7 7a08 	vldr	s15, [r7, #32]
 800747e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007486:	ee17 2a90 	vmov	r2, s15
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	629a      	str	r2, [r3, #40]	; 0x28
			propulsion->servo_left_timer_val -= pid_value;
		}
	}
#endif

	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800748e:	6838      	ldr	r0, [r7, #0]
 8007490:	f000 f8d2 	bl	8007638 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007494:	6838      	ldr	r0, [r7, #0]
 8007496:	f000 f8ed 	bl	8007674 <PropulsionAndControl_UpdateRightFlaps>

}
 800749a:	bf00      	nop
 800749c:	3728      	adds	r7, #40	; 0x28
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	455ac000 	.word	0x455ac000
 80074a8:	44a28000 	.word	0x44a28000

080074ac <Pid_CompensatePitch>:
//Function use to compensate a roatation on Pitch axis --> make sure to update accelerometer before reading and compensate
void Pid_CompensatePitch(arm_pid_instance_f32 *PID,COMMAND_t *command,BNO055_t *Accelerometer,PROPULSION_t *propulsion){
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	; 0x28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]

	float32_t error;
	float32_t pid_value;
	//Calculate the erro in °/s around yaw/z axis
	error = Pid_CalculatePitchError(command, Accelerometer);
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f7ff fe86 	bl	80071ce <Pid_CalculatePitchError>
 80074c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074cc:	61bb      	str	r3, [r7, #24]
    out = (S->A0 * in) +
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	ed93 7a00 	vldr	s14, [r3]
 80074d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80074d8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	edd3 6a01 	vldr	s13, [r3, #4]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80074e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80074ec:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80074fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800750a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800750e:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	615a      	str	r2, [r3, #20]
    return (out);
 8007526:	697b      	ldr	r3, [r7, #20]
	//calculate the amount of mouve needed to force back the plane
	pid_value = arm_pid_f32(PID, error);
 8007528:	623b      	str	r3, [r7, #32]


#ifndef SERVO_LEFT_REVERSED
	if((propulsion->servo_left_timer_val + pid_value)>MAX_LEFT_EXTENSION){
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007536:	edd7 7a08 	vldr	s15, [r7, #32]
 800753a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800753e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007630 <Pid_CompensatePitch+0x184>
 8007542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	dd04      	ble.n	8007556 <Pid_CompensatePitch+0xaa>
		propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007552:	625a      	str	r2, [r3, #36]	; 0x24
 8007554:	e025      	b.n	80075a2 <Pid_CompensatePitch+0xf6>
	}
	else{
		if((propulsion->servo_left_timer_val + pid_value)<MIN_LEFT_EXTENSION){
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007562:	edd7 7a08 	vldr	s15, [r7, #32]
 8007566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800756a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007634 <Pid_CompensatePitch+0x188>
 800756e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007576:	d504      	bpl.n	8007582 <Pid_CompensatePitch+0xd6>
			propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f240 5214 	movw	r2, #1300	; 0x514
 800757e:	625a      	str	r2, [r3, #36]	; 0x24
 8007580:	e00f      	b.n	80075a2 <Pid_CompensatePitch+0xf6>
		}
		else{
			propulsion->servo_left_timer_val += pid_value;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800758e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800759a:	ee17 2a90 	vmov	r2, s15
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	625a      	str	r2, [r3, #36]	; 0x24
			propulsion->servo_right_timer_val += pid_value;
		}
	}
#endif
#ifdef SERVO_RIGHT_REVERSED
	if((propulsion->servo_right_timer_val - pid_value)>MIN_RIGHT_EXTENSION){
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80075b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007630 <Pid_CompensatePitch+0x184>
 80075ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	dd04      	ble.n	80075ce <Pid_CompensatePitch+0x122>
		propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80075ca:	629a      	str	r2, [r3, #40]	; 0x28
 80075cc:	e025      	b.n	800761a <Pid_CompensatePitch+0x16e>
	}
	else{
		if((propulsion->servo_right_timer_val - pid_value)<MAX_RIGHT_EXTENSION){
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80075da:	edd7 7a08 	vldr	s15, [r7, #32]
 80075de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007634 <Pid_CompensatePitch+0x188>
 80075e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ee:	d504      	bpl.n	80075fa <Pid_CompensatePitch+0x14e>
			propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	f240 5214 	movw	r2, #1300	; 0x514
 80075f6:	629a      	str	r2, [r3, #40]	; 0x28
 80075f8:	e00f      	b.n	800761a <Pid_CompensatePitch+0x16e>
		}
		else{
			propulsion->servo_right_timer_val -= pid_value;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007606:	edd7 7a08 	vldr	s15, [r7, #32]
 800760a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800760e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007612:	ee17 2a90 	vmov	r2, s15
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	629a      	str	r2, [r3, #40]	; 0x28
		}
	}
#endif


	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800761a:	6838      	ldr	r0, [r7, #0]
 800761c:	f000 f80c 	bl	8007638 <PropulsionAndControl_UpdateLeftFlaps>
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007620:	6838      	ldr	r0, [r7, #0]
 8007622:	f000 f827 	bl	8007674 <PropulsionAndControl_UpdateRightFlaps>

}
 8007626:	bf00      	nop
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	455ac000 	.word	0x455ac000
 8007634:	44a28000 	.word	0x44a28000

08007638 <PropulsionAndControl_UpdateLeftFlaps>:
void PropulsionAndControl_UpdateESC(PROPULSION_t *propulsion){
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
	*(timer_base_addr_ptr + ((propulsion->esc_timer_channel-1))) = propulsion->esc_timer_val;
	propulsion->update_timer = 0x01;
}
void PropulsionAndControl_UpdateLeftFlaps(PROPULSION_t *propulsion){
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3334      	adds	r3, #52	; 0x34
 8007648:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_left_timer_channel-1))) = propulsion->servo_left_timer_val;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	7f5b      	ldrb	r3, [r3, #29]
 800764e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007652:	3b01      	subs	r3, #1
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800765e:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <PropulsionAndControl_UpdateRightFlaps>:
void PropulsionAndControl_UpdateRightFlaps(PROPULSION_t *propulsion){
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	uint32_t * timer_base_addr_ptr = &(propulsion->timer->Instance->CCR1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3334      	adds	r3, #52	; 0x34
 8007684:	60fb      	str	r3, [r7, #12]
	*(timer_base_addr_ptr + ((propulsion->servo_right_timer_channel-1))) = propulsion->servo_right_timer_val;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7f9b      	ldrb	r3, [r3, #30]
 800768a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800768e:	3b01      	subs	r3, #1
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800769a:	601a      	str	r2, [r3, #0]
	propulsion->update_timer = 0x01;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80076a4:	bf00      	nop
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <PropulsionAndControl_Init>:

void PropulsionAndControl_Init(PROPULSION_t *propulsion,uint32_t esc_pin,GPIO_TypeDef *esc_port,uint32_t servo_left_pin,GPIO_TypeDef *servo_left_port,uint32_t servo_right_pin,GPIO_TypeDef *servo_right_port,uint32_t esc_channel,uint32_t servo_left_channel,uint32_t servo_right_channel,TIM_HandleTypeDef *timer_entity){
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]

	//Store all pins into the struct
	propulsion->esc_pin = esc_pin;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	611a      	str	r2, [r3, #16]
	propulsion->esc_port = esc_port;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	615a      	str	r2, [r3, #20]
	propulsion->esc_timer_channel = esc_channel;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	771a      	strb	r2, [r3, #28]

	propulsion->servo_left_pin = servo_left_pin;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	601a      	str	r2, [r3, #0]
	propulsion->servo_left_port = servo_left_port;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	605a      	str	r2, [r3, #4]
	propulsion->servo_left_timer_channel = servo_left_channel;
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	775a      	strb	r2, [r3, #29]

	propulsion->servo_right_pin = servo_right_pin;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	609a      	str	r2, [r3, #8]
	propulsion->servo_right_port = servo_right_port;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a3a      	ldr	r2, [r7, #32]
 80076f0:	60da      	str	r2, [r3, #12]
	propulsion->servo_right_timer_channel = servo_right_channel;
 80076f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	779a      	strb	r2, [r3, #30]

	propulsion->timer = timer_entity;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076fe:	619a      	str	r2, [r3, #24]

	//put the flaps at minimum
	osDelay(20);
 8007700:	2014      	movs	r0, #20
 8007702:	f007 fd39 	bl	800f178 <osDelay>
	propulsion->servo_left_timer_val = MIN_LEFT_EXTENSION;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f240 5214 	movw	r2, #1300	; 0x514
 800770c:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f7ff ff92 	bl	8007638 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = MIN_RIGHT_EXTENSION;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f640 52ac 	movw	r2, #3500	; 0xdac
 800771a:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	f7ff ffa9 	bl	8007674 <PropulsionAndControl_UpdateRightFlaps>

	//put the flaps at maximum
	osDelay(1500);
 8007722:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007726:	f007 fd27 	bl	800f178 <osDelay>
	propulsion->servo_left_timer_val = MAX_LEFT_EXTENSION;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8007730:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f7ff ff80 	bl	8007638 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at maximum
	propulsion->servo_right_timer_val = MAX_RIGHT_EXTENSION;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f240 5214 	movw	r2, #1300	; 0x514
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff ff97 	bl	8007674 <PropulsionAndControl_UpdateRightFlaps>

	osDelay(1500);
 8007746:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800774a:	f007 fd15 	bl	800f178 <osDelay>
	propulsion->servo_left_timer_val = (MAX_LEFT_EXTENSION+MIN_LEFT_EXTENSION)/2;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007754:	625a      	str	r2, [r3, #36]	; 0x24
	PropulsionAndControl_UpdateLeftFlaps(propulsion);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff ff6e 	bl	8007638 <PropulsionAndControl_UpdateLeftFlaps>

	//put the flaps at minimum
	propulsion->servo_right_timer_val = (MAX_RIGHT_EXTENSION+MIN_RIGHT_EXTENSION)/2;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8007762:	629a      	str	r2, [r3, #40]	; 0x28
	PropulsionAndControl_UpdateRightFlaps(propulsion);
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff ff85 	bl	8007674 <PropulsionAndControl_UpdateRightFlaps>
}
 800776a:	bf00      	nop
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <HAL_MspInit+0x4c>)
 800777c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777e:	4a10      	ldr	r2, [pc, #64]	; (80077c0 <HAL_MspInit+0x4c>)
 8007780:	f043 0301 	orr.w	r3, r3, #1
 8007784:	6613      	str	r3, [r2, #96]	; 0x60
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <HAL_MspInit+0x4c>)
 8007788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	607b      	str	r3, [r7, #4]
 8007790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <HAL_MspInit+0x4c>)
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <HAL_MspInit+0x4c>)
 8007798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800779c:	6593      	str	r3, [r2, #88]	; 0x58
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <HAL_MspInit+0x4c>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80077aa:	2200      	movs	r2, #0
 80077ac:	210f      	movs	r1, #15
 80077ae:	f06f 0001 	mvn.w	r0, #1
 80077b2:	f001 ff59 	bl	8009668 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	40021000 	.word	0x40021000

080077c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08c      	sub	sp, #48	; 0x30
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80077cc:	2300      	movs	r3, #0
 80077ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80077d4:	4b2c      	ldr	r3, [pc, #176]	; (8007888 <HAL_InitTick+0xc4>)
 80077d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d8:	4a2b      	ldr	r2, [pc, #172]	; (8007888 <HAL_InitTick+0xc4>)
 80077da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80077de:	6613      	str	r3, [r2, #96]	; 0x60
 80077e0:	4b29      	ldr	r3, [pc, #164]	; (8007888 <HAL_InitTick+0xc4>)
 80077e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80077ec:	f107 020c 	add.w	r2, r7, #12
 80077f0:	f107 0310 	add.w	r3, r7, #16
 80077f4:	4611      	mov	r1, r2
 80077f6:	4618      	mov	r0, r3
 80077f8:	f003 fff4 	bl	800b7e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80077fc:	f003 ffdc 	bl	800b7b8 <HAL_RCC_GetPCLK2Freq>
 8007800:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	4a21      	ldr	r2, [pc, #132]	; (800788c <HAL_InitTick+0xc8>)
 8007806:	fba2 2303 	umull	r2, r3, r2, r3
 800780a:	0c9b      	lsrs	r3, r3, #18
 800780c:	3b01      	subs	r3, #1
 800780e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007810:	4b1f      	ldr	r3, [pc, #124]	; (8007890 <HAL_InitTick+0xcc>)
 8007812:	4a20      	ldr	r2, [pc, #128]	; (8007894 <HAL_InitTick+0xd0>)
 8007814:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007816:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <HAL_InitTick+0xcc>)
 8007818:	f240 32e7 	movw	r2, #999	; 0x3e7
 800781c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800781e:	4a1c      	ldr	r2, [pc, #112]	; (8007890 <HAL_InitTick+0xcc>)
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <HAL_InitTick+0xcc>)
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800782a:	4b19      	ldr	r3, [pc, #100]	; (8007890 <HAL_InitTick+0xcc>)
 800782c:	2200      	movs	r2, #0
 800782e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8007830:	4817      	ldr	r0, [pc, #92]	; (8007890 <HAL_InitTick+0xcc>)
 8007832:	f004 fa9d 	bl	800bd70 <HAL_TIM_Base_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800783c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007840:	2b00      	cmp	r3, #0
 8007842:	d11b      	bne.n	800787c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007844:	4812      	ldr	r0, [pc, #72]	; (8007890 <HAL_InitTick+0xcc>)
 8007846:	f004 faf5 	bl	800be34 <HAL_TIM_Base_Start_IT>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007854:	2b00      	cmp	r3, #0
 8007856:	d111      	bne.n	800787c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007858:	2019      	movs	r0, #25
 800785a:	f001 ff1f 	bl	800969c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d808      	bhi.n	8007876 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8007864:	2200      	movs	r2, #0
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	2019      	movs	r0, #25
 800786a:	f001 fefd 	bl	8009668 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800786e:	4a0a      	ldr	r2, [pc, #40]	; (8007898 <HAL_InitTick+0xd4>)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e002      	b.n	800787c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800787c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007880:	4618      	mov	r0, r3
 8007882:	3730      	adds	r7, #48	; 0x30
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40021000 	.word	0x40021000
 800788c:	431bde83 	.word	0x431bde83
 8007890:	20000720 	.word	0x20000720
 8007894:	40012c00 	.word	0x40012c00
 8007898:	20000008 	.word	0x20000008

0800789c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80078a0:	e7fe      	b.n	80078a0 <NMI_Handler+0x4>

080078a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078a2:	b480      	push	{r7}
 80078a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078a6:	e7fe      	b.n	80078a6 <HardFault_Handler+0x4>

080078a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078ac:	e7fe      	b.n	80078ac <MemManage_Handler+0x4>

080078ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078ae:	b480      	push	{r7}
 80078b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078b2:	e7fe      	b.n	80078b2 <BusFault_Handler+0x4>

080078b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078b8:	e7fe      	b.n	80078b8 <UsageFault_Handler+0x4>

080078ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078ba:	b480      	push	{r7}
 80078bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078be:	bf00      	nop
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80078cc:	4802      	ldr	r0, [pc, #8]	; (80078d8 <DMA1_Channel1_IRQHandler+0x10>)
 80078ce:	f002 f8d6 	bl	8009a7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80078d2:	bf00      	nop
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20000100 	.word	0x20000100

080078dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80078e0:	4802      	ldr	r0, [pc, #8]	; (80078ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80078e2:	f004 fc89 	bl	800c1f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000720 	.word	0x20000720

080078f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_IT_Pin);
 80078f4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80078f8:	f002 fbc4 	bl	800a084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  BNO055_ClearIntFlag(&hi2c2);
 80078fc:	4805      	ldr	r0, [pc, #20]	; (8007914 <EXTI15_10_IRQHandler+0x24>)
 80078fe:	f7fe fa4e 	bl	8005d9e <BNO055_ClearIntFlag>
  xSemaphoreGiveFromISR(HG_PROTECTION_SEMHandle,1);
 8007902:	4b05      	ldr	r3, [pc, #20]	; (8007918 <EXTI15_10_IRQHandler+0x28>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f007 feef 	bl	800f6ec <xQueueGiveFromISR>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800790e:	bf00      	nop
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200001f8 	.word	0x200001f8
 8007918:	200001f4 	.word	0x200001f4

0800791c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007920:	4805      	ldr	r0, [pc, #20]	; (8007938 <UART4_IRQHandler+0x1c>)
 8007922:	f005 fc9f 	bl	800d264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */
  xSemaphoreGiveFromISR(GPS_UART_SemaphoreHandle,pdFALSE);
 8007926:	4b05      	ldr	r3, [pc, #20]	; (800793c <UART4_IRQHandler+0x20>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2100      	movs	r1, #0
 800792c:	4618      	mov	r0, r3
 800792e:	f007 fedd 	bl	800f6ec <xQueueGiveFromISR>

  /* USER CODE END UART4_IRQn 1 */
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20000850 	.word	0x20000850
 800793c:	200001f0 	.word	0x200001f0

08007940 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8007944:	4802      	ldr	r0, [pc, #8]	; (8007950 <UART5_IRQHandler+0x10>)
 8007946:	f005 fc8d 	bl	800d264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800794a:	bf00      	nop
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	200008e0 	.word	0x200008e0

08007954 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007958:	4b07      	ldr	r3, [pc, #28]	; (8007978 <SystemInit+0x24>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795e:	4a06      	ldr	r2, [pc, #24]	; (8007978 <SystemInit+0x24>)
 8007960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <SystemInit+0x24>)
 800796a:	4a04      	ldr	r2, [pc, #16]	; (800797c <SystemInit+0x28>)
 800796c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800796e:	bf00      	nop
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	e000ed00 	.word	0xe000ed00
 800797c:	08004000 	.word	0x08004000

08007980 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007986:	f107 031c 	add.w	r3, r7, #28
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	605a      	str	r2, [r3, #4]
 8007990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007992:	463b      	mov	r3, r7
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	60da      	str	r2, [r3, #12]
 800799e:	611a      	str	r2, [r3, #16]
 80079a0:	615a      	str	r2, [r3, #20]
 80079a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80079a4:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80079ac:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079b2:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1440000;
 80079b8:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079ba:	4a1c      	ldr	r2, [pc, #112]	; (8007a2c <MX_TIM2_Init+0xac>)
 80079bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079be:	4b1a      	ldr	r3, [pc, #104]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079c4:	4b18      	ldr	r3, [pc, #96]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80079ca:	4817      	ldr	r0, [pc, #92]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079cc:	f004 faaa 	bl	800bf24 <HAL_TIM_PWM_Init>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80079d6:	f7ff fbf5 	bl	80071c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079de:	2300      	movs	r3, #0
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079e2:	f107 031c 	add.w	r3, r7, #28
 80079e6:	4619      	mov	r1, r3
 80079e8:	480f      	ldr	r0, [pc, #60]	; (8007a28 <MX_TIM2_Init+0xa8>)
 80079ea:	f005 fab9 	bl	800cf60 <HAL_TIMEx_MasterConfigSynchronization>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80079f4:	f7ff fbe6 	bl	80071c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80079f8:	2360      	movs	r3, #96	; 0x60
 80079fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a00:	2300      	movs	r3, #0
 8007a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007a08:	463b      	mov	r3, r7
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4806      	ldr	r0, [pc, #24]	; (8007a28 <MX_TIM2_Init+0xa8>)
 8007a10:	f004 fd72 	bl	800c4f8 <HAL_TIM_PWM_ConfigChannel>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007a1a:	f7ff fbd3 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007a1e:	bf00      	nop
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	2000076c 	.word	0x2000076c
 8007a2c:	0015f900 	.word	0x0015f900

08007a30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a36:	f107 031c 	add.w	r3, r7, #28
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
 8007a3e:	605a      	str	r2, [r3, #4]
 8007a40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007a42:	463b      	mov	r3, r7
 8007a44:	2200      	movs	r2, #0
 8007a46:	601a      	str	r2, [r3, #0]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	609a      	str	r2, [r3, #8]
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	611a      	str	r2, [r3, #16]
 8007a50:	615a      	str	r2, [r3, #20]
 8007a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007a54:	4b21      	ldr	r3, [pc, #132]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a56:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <MX_TIM3_Init+0xb0>)
 8007a58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 50;
 8007a5a:	4b20      	ldr	r3, [pc, #128]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a5c:	2232      	movs	r2, #50	; 0x32
 8007a5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a60:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200;
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a68:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8007a6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a70:	2200      	movs	r2, #0
 8007a72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a74:	4b19      	ldr	r3, [pc, #100]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a76:	2200      	movs	r2, #0
 8007a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8007a7a:	4818      	ldr	r0, [pc, #96]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a7c:	f004 fa52 	bl	800bf24 <HAL_TIM_PWM_Init>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8007a86:	f7ff fb9d 	bl	80071c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007a92:	f107 031c 	add.w	r3, r7, #28
 8007a96:	4619      	mov	r1, r3
 8007a98:	4810      	ldr	r0, [pc, #64]	; (8007adc <MX_TIM3_Init+0xac>)
 8007a9a:	f005 fa61 	bl	800cf60 <HAL_TIMEx_MasterConfigSynchronization>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8007aa4:	f7ff fb8e 	bl	80071c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007aa8:	2360      	movs	r3, #96	; 0x60
 8007aaa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ab8:	463b      	mov	r3, r7
 8007aba:	2200      	movs	r2, #0
 8007abc:	4619      	mov	r1, r3
 8007abe:	4807      	ldr	r0, [pc, #28]	; (8007adc <MX_TIM3_Init+0xac>)
 8007ac0:	f004 fd1a 	bl	800c4f8 <HAL_TIM_PWM_ConfigChannel>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8007aca:	f7ff fb7b 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007ace:	4803      	ldr	r0, [pc, #12]	; (8007adc <MX_TIM3_Init+0xac>)
 8007ad0:	f000 f8c2 	bl	8007c58 <HAL_TIM_MspPostInit>

}
 8007ad4:	bf00      	nop
 8007ad6:	3728      	adds	r7, #40	; 0x28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200007b8 	.word	0x200007b8
 8007ae0:	40000400 	.word	0x40000400

08007ae4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007aea:	f107 031c 	add.w	r3, r7, #28
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	605a      	str	r2, [r3, #4]
 8007af4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007af6:	463b      	mov	r3, r7
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	611a      	str	r2, [r3, #16]
 8007b04:	615a      	str	r2, [r3, #20]
 8007b06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007b08:	4b2e      	ldr	r3, [pc, #184]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b0a:	4a2f      	ldr	r2, [pc, #188]	; (8007bc8 <MX_TIM4_Init+0xe4>)
 8007b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50;
 8007b0e:	4b2d      	ldr	r3, [pc, #180]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b10:	2232      	movs	r2, #50	; 0x32
 8007b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b14:	4b2b      	ldr	r3, [pc, #172]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000;
 8007b1a:	4b2a      	ldr	r3, [pc, #168]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b1c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b22:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b28:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007b2e:	4825      	ldr	r0, [pc, #148]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b30:	f004 f9f8 	bl	800bf24 <HAL_TIM_PWM_Init>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8007b3a:	f7ff fb43 	bl	80071c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007b46:	f107 031c 	add.w	r3, r7, #28
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	481d      	ldr	r0, [pc, #116]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b4e:	f005 fa07 	bl	800cf60 <HAL_TIMEx_MasterConfigSynchronization>
 8007b52:	4603      	mov	r3, r0
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d001      	beq.n	8007b5c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8007b58:	f7ff fb34 	bl	80071c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b5c:	2360      	movs	r3, #96	; 0x60
 8007b5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2880;
 8007b60:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8007b64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b66:	2300      	movs	r3, #0
 8007b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b6e:	463b      	mov	r3, r7
 8007b70:	2200      	movs	r2, #0
 8007b72:	4619      	mov	r1, r3
 8007b74:	4813      	ldr	r0, [pc, #76]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b76:	f004 fcbf 	bl	800c4f8 <HAL_TIM_PWM_ConfigChannel>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d001      	beq.n	8007b84 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8007b80:	f7ff fb20 	bl	80071c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007b84:	463b      	mov	r3, r7
 8007b86:	2204      	movs	r2, #4
 8007b88:	4619      	mov	r1, r3
 8007b8a:	480e      	ldr	r0, [pc, #56]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007b8c:	f004 fcb4 	bl	800c4f8 <HAL_TIM_PWM_ConfigChannel>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8007b96:	f7ff fb15 	bl	80071c4 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8007b9a:	f241 7370 	movw	r3, #6000	; 0x1770
 8007b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	220c      	movs	r2, #12
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4807      	ldr	r0, [pc, #28]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007ba8:	f004 fca6 	bl	800c4f8 <HAL_TIM_PWM_ConfigChannel>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8007bb2:	f7ff fb07 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007bb6:	4803      	ldr	r0, [pc, #12]	; (8007bc4 <MX_TIM4_Init+0xe0>)
 8007bb8:	f000 f84e 	bl	8007c58 <HAL_TIM_MspPostInit>

}
 8007bbc:	bf00      	nop
 8007bbe:	3728      	adds	r7, #40	; 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20000804 	.word	0x20000804
 8007bc8:	40000800 	.word	0x40000800

08007bcc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b087      	sub	sp, #28
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007bde:	4b1b      	ldr	r3, [pc, #108]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be2:	4a1a      	ldr	r2, [pc, #104]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007be4:	f043 0301 	orr.w	r3, r3, #1
 8007be8:	6593      	str	r3, [r2, #88]	; 0x58
 8007bea:	4b18      	ldr	r3, [pc, #96]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007bf6:	e022      	b.n	8007c3e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM3)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a14      	ldr	r2, [pc, #80]	; (8007c50 <HAL_TIM_PWM_MspInit+0x84>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d10c      	bne.n	8007c1c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007c02:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c06:	4a11      	ldr	r2, [pc, #68]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c0e:	4b0f      	ldr	r3, [pc, #60]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	613b      	str	r3, [r7, #16]
 8007c18:	693b      	ldr	r3, [r7, #16]
}
 8007c1a:	e010      	b.n	8007c3e <HAL_TIM_PWM_MspInit+0x72>
  else if(tim_pwmHandle->Instance==TIM4)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0c      	ldr	r2, [pc, #48]	; (8007c54 <HAL_TIM_PWM_MspInit+0x88>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d10b      	bne.n	8007c3e <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007c26:	4b09      	ldr	r3, [pc, #36]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2a:	4a08      	ldr	r2, [pc, #32]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c2c:	f043 0304 	orr.w	r3, r3, #4
 8007c30:	6593      	str	r3, [r2, #88]	; 0x58
 8007c32:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <HAL_TIM_PWM_MspInit+0x80>)
 8007c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
}
 8007c3e:	bf00      	nop
 8007c40:	371c      	adds	r7, #28
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	40021000 	.word	0x40021000
 8007c50:	40000400 	.word	0x40000400
 8007c54:	40000800 	.word	0x40000800

08007c58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c60:	f107 0314 	add.w	r3, r7, #20
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	609a      	str	r2, [r3, #8]
 8007c6c:	60da      	str	r2, [r3, #12]
 8007c6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <HAL_TIM_MspPostInit+0xa8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d11c      	bne.n	8007cb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c7a:	4b22      	ldr	r3, [pc, #136]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7e:	4a21      	ldr	r2, [pc, #132]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007c80:	f043 0304 	orr.w	r3, r3, #4
 8007c84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c86:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8a:	f003 0304 	and.w	r3, r3, #4
 8007c8e:	613b      	str	r3, [r7, #16]
 8007c90:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c96:	2302      	movs	r3, #2
 8007c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ca6:	f107 0314 	add.w	r3, r7, #20
 8007caa:	4619      	mov	r1, r3
 8007cac:	4816      	ldr	r0, [pc, #88]	; (8007d08 <HAL_TIM_MspPostInit+0xb0>)
 8007cae:	f002 f835 	bl	8009d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007cb2:	e021      	b.n	8007cf8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a14      	ldr	r2, [pc, #80]	; (8007d0c <HAL_TIM_MspPostInit+0xb4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d11c      	bne.n	8007cf8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007cc4:	f043 0302 	orr.w	r3, r3, #2
 8007cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <HAL_TIM_MspPostInit+0xac>)
 8007ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cce:	f003 0302 	and.w	r3, r3, #2
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8007cd6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8007cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cec:	f107 0314 	add.w	r3, r7, #20
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	4807      	ldr	r0, [pc, #28]	; (8007d10 <HAL_TIM_MspPostInit+0xb8>)
 8007cf4:	f002 f812 	bl	8009d1c <HAL_GPIO_Init>
}
 8007cf8:	bf00      	nop
 8007cfa:	3728      	adds	r7, #40	; 0x28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40021000 	.word	0x40021000
 8007d08:	48000800 	.word	0x48000800
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	48000400 	.word	0x48000400

08007d14 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8007d18:	4b22      	ldr	r3, [pc, #136]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d1a:	4a23      	ldr	r2, [pc, #140]	; (8007da8 <MX_UART4_Init+0x94>)
 8007d1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8007d1e:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007d24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007d26:	4b1f      	ldr	r3, [pc, #124]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007d2c:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007d32:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007d38:	4b1a      	ldr	r3, [pc, #104]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d3a:	220c      	movs	r2, #12
 8007d3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d3e:	4b19      	ldr	r3, [pc, #100]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d44:	4b17      	ldr	r3, [pc, #92]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007d4a:	4b16      	ldr	r3, [pc, #88]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007d50:	4b14      	ldr	r3, [pc, #80]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007d56:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007d5c:	4811      	ldr	r0, [pc, #68]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d5e:	f005 f9db 	bl	800d118 <HAL_UART_Init>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8007d68:	f7ff fa2c 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	480d      	ldr	r0, [pc, #52]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d70:	f007 f8f1 	bl	800ef56 <HAL_UARTEx_SetTxFifoThreshold>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8007d7a:	f7ff fa23 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4808      	ldr	r0, [pc, #32]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d82:	f007 f926 	bl	800efd2 <HAL_UARTEx_SetRxFifoThreshold>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8007d8c:	f7ff fa1a 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8007d90:	4804      	ldr	r0, [pc, #16]	; (8007da4 <MX_UART4_Init+0x90>)
 8007d92:	f007 f8a7 	bl	800eee4 <HAL_UARTEx_DisableFifoMode>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d001      	beq.n	8007da0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8007d9c:	f7ff fa12 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8007da0:	bf00      	nop
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20000850 	.word	0x20000850
 8007da8:	40004c00 	.word	0x40004c00

08007dac <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8007db0:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <MX_UART5_Init+0x90>)
 8007db2:	4a23      	ldr	r2, [pc, #140]	; (8007e40 <MX_UART5_Init+0x94>)
 8007db4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8007db6:	4b21      	ldr	r3, [pc, #132]	; (8007e3c <MX_UART5_Init+0x90>)
 8007db8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007dbc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8007dbe:	4b1f      	ldr	r3, [pc, #124]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8007dd0:	4b1a      	ldr	r3, [pc, #104]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dd2:	220c      	movs	r2, #12
 8007dd4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007dd6:	4b19      	ldr	r3, [pc, #100]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8007ddc:	4b17      	ldr	r3, [pc, #92]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007de2:	4b16      	ldr	r3, [pc, #88]	; (8007e3c <MX_UART5_Init+0x90>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007de8:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <MX_UART5_Init+0x90>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007dee:	4b13      	ldr	r3, [pc, #76]	; (8007e3c <MX_UART5_Init+0x90>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8007df4:	4811      	ldr	r0, [pc, #68]	; (8007e3c <MX_UART5_Init+0x90>)
 8007df6:	f005 f98f 	bl	800d118 <HAL_UART_Init>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8007e00:	f7ff f9e0 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e04:	2100      	movs	r1, #0
 8007e06:	480d      	ldr	r0, [pc, #52]	; (8007e3c <MX_UART5_Init+0x90>)
 8007e08:	f007 f8a5 	bl	800ef56 <HAL_UARTEx_SetTxFifoThreshold>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8007e12:	f7ff f9d7 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007e16:	2100      	movs	r1, #0
 8007e18:	4808      	ldr	r0, [pc, #32]	; (8007e3c <MX_UART5_Init+0x90>)
 8007e1a:	f007 f8da 	bl	800efd2 <HAL_UARTEx_SetRxFifoThreshold>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8007e24:	f7ff f9ce 	bl	80071c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <MX_UART5_Init+0x90>)
 8007e2a:	f007 f85b 	bl	800eee4 <HAL_UARTEx_DisableFifoMode>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8007e34:	f7ff f9c6 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007e38:	bf00      	nop
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	200008e0 	.word	0x200008e0
 8007e40:	40005000 	.word	0x40005000

08007e44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b0a2      	sub	sp, #136	; 0x88
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	605a      	str	r2, [r3, #4]
 8007e56:	609a      	str	r2, [r3, #8]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e5c:	f107 0320 	add.w	r3, r7, #32
 8007e60:	2254      	movs	r2, #84	; 0x54
 8007e62:	2100      	movs	r1, #0
 8007e64:	4618      	mov	r0, r3
 8007e66:	f009 fa77 	bl	8011358 <memset>
  if(uartHandle->Instance==UART4)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a56      	ldr	r2, [pc, #344]	; (8007fc8 <HAL_UART_MspInit+0x184>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d141      	bne.n	8007ef8 <HAL_UART_MspInit+0xb4>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8007e74:	2308      	movs	r3, #8
 8007e76:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e7c:	f107 0320 	add.w	r3, r7, #32
 8007e80:	4618      	mov	r0, r3
 8007e82:	f003 fd27 	bl	800b8d4 <HAL_RCCEx_PeriphCLKConfig>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007e8c:	f7ff f99a 	bl	80071c4 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007e90:	4b4e      	ldr	r3, [pc, #312]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	4a4d      	ldr	r2, [pc, #308]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9a:	6593      	str	r3, [r2, #88]	; 0x58
 8007e9c:	4b4b      	ldr	r3, [pc, #300]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ea8:	4b48      	ldr	r3, [pc, #288]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eac:	4a47      	ldr	r2, [pc, #284]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007eae:	f043 0304 	orr.w	r3, r3, #4
 8007eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007eb4:	4b45      	ldr	r3, [pc, #276]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb8:	f003 0304 	and.w	r3, r3, #4
 8007ebc:	61bb      	str	r3, [r7, #24]
 8007ebe:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ec0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ec4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8007ed4:	2305      	movs	r3, #5
 8007ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eda:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007ede:	4619      	mov	r1, r3
 8007ee0:	483b      	ldr	r0, [pc, #236]	; (8007fd0 <HAL_UART_MspInit+0x18c>)
 8007ee2:	f001 ff1b 	bl	8009d1c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2105      	movs	r1, #5
 8007eea:	2034      	movs	r0, #52	; 0x34
 8007eec:	f001 fbbc 	bl	8009668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007ef0:	2034      	movs	r0, #52	; 0x34
 8007ef2:	f001 fbd3 	bl	800969c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8007ef6:	e063      	b.n	8007fc0 <HAL_UART_MspInit+0x17c>
  else if(uartHandle->Instance==UART5)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a35      	ldr	r2, [pc, #212]	; (8007fd4 <HAL_UART_MspInit+0x190>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d15e      	bne.n	8007fc0 <HAL_UART_MspInit+0x17c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8007f02:	2310      	movs	r3, #16
 8007f04:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8007f06:	2300      	movs	r3, #0
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f0a:	f107 0320 	add.w	r3, r7, #32
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f003 fce0 	bl	800b8d4 <HAL_RCCEx_PeriphCLKConfig>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <HAL_UART_MspInit+0xda>
      Error_Handler();
 8007f1a:	f7ff f953 	bl	80071c4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f22:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f28:	6593      	str	r3, [r2, #88]	; 0x58
 8007f2a:	4b28      	ldr	r3, [pc, #160]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f36:	4b25      	ldr	r3, [pc, #148]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f3a:	4a24      	ldr	r2, [pc, #144]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f3c:	f043 0304 	orr.w	r3, r3, #4
 8007f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f42:	4b22      	ldr	r3, [pc, #136]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f46:	f003 0304 	and.w	r3, r3, #4
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007f4e:	4b1f      	ldr	r3, [pc, #124]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f52:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f54:	f043 0308 	orr.w	r3, r3, #8
 8007f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f5a:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <HAL_UART_MspInit+0x188>)
 8007f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5e:	f003 0308 	and.w	r3, r3, #8
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f74:	2300      	movs	r3, #0
 8007f76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007f7a:	2305      	movs	r3, #5
 8007f7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f84:	4619      	mov	r1, r3
 8007f86:	4812      	ldr	r0, [pc, #72]	; (8007fd0 <HAL_UART_MspInit+0x18c>)
 8007f88:	f001 fec8 	bl	8009d1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f90:	2302      	movs	r3, #2
 8007f92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8007f9e:	2305      	movs	r3, #5
 8007fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007fa4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007fa8:	4619      	mov	r1, r3
 8007faa:	480b      	ldr	r0, [pc, #44]	; (8007fd8 <HAL_UART_MspInit+0x194>)
 8007fac:	f001 feb6 	bl	8009d1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2105      	movs	r1, #5
 8007fb4:	2035      	movs	r0, #53	; 0x35
 8007fb6:	f001 fb57 	bl	8009668 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8007fba:	2035      	movs	r0, #53	; 0x35
 8007fbc:	f001 fb6e 	bl	800969c <HAL_NVIC_EnableIRQ>
}
 8007fc0:	bf00      	nop
 8007fc2:	3788      	adds	r7, #136	; 0x88
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40004c00 	.word	0x40004c00
 8007fcc:	40021000 	.word	0x40021000
 8007fd0:	48000800 	.word	0x48000800
 8007fd4:	40005000 	.word	0x40005000
 8007fd8:	48000c00 	.word	0x48000c00

08007fdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007fdc:	480d      	ldr	r0, [pc, #52]	; (8008014 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007fde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fe0:	480d      	ldr	r0, [pc, #52]	; (8008018 <LoopForever+0x6>)
  ldr r1, =_edata
 8007fe2:	490e      	ldr	r1, [pc, #56]	; (800801c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007fe4:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <LoopForever+0xe>)
  movs r3, #0
 8007fe6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007fe8:	e002      	b.n	8007ff0 <LoopCopyDataInit>

08007fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fee:	3304      	adds	r3, #4

08007ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ff4:	d3f9      	bcc.n	8007fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007ff6:	4a0b      	ldr	r2, [pc, #44]	; (8008024 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007ff8:	4c0b      	ldr	r4, [pc, #44]	; (8008028 <LoopForever+0x16>)
  movs r3, #0
 8007ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ffc:	e001      	b.n	8008002 <LoopFillZerobss>

08007ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008000:	3204      	adds	r2, #4

08008002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008004:	d3fb      	bcc.n	8007ffe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008006:	f7ff fca5 	bl	8007954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800800a:	f009 fa09 	bl	8011420 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800800e:	f7ff f83f 	bl	8007090 <main>

08008012 <LoopForever>:

LoopForever:
    b LoopForever
 8008012:	e7fe      	b.n	8008012 <LoopForever>
  ldr   r0, =_estack
 8008014:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800801c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8008020:	08012548 	.word	0x08012548
  ldr r2, =_sbss
 8008024:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8008028:	20003c08 	.word	0x20003c08

0800802c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800802c:	e7fe      	b.n	800802c <ADC1_2_IRQHandler>

0800802e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b082      	sub	sp, #8
 8008032:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008038:	2003      	movs	r0, #3
 800803a:	f001 fb0a 	bl	8009652 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800803e:	200f      	movs	r0, #15
 8008040:	f7ff fbc0 	bl	80077c4 <HAL_InitTick>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d002      	beq.n	8008050 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	71fb      	strb	r3, [r7, #7]
 800804e:	e001      	b.n	8008054 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008050:	f7ff fb90 	bl	8007774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008054:	79fb      	ldrb	r3, [r7, #7]

}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008064:	4b05      	ldr	r3, [pc, #20]	; (800807c <HAL_IncTick+0x1c>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <HAL_IncTick+0x20>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4413      	add	r3, r2
 800806e:	4a03      	ldr	r2, [pc, #12]	; (800807c <HAL_IncTick+0x1c>)
 8008070:	6013      	str	r3, [r2, #0]
}
 8008072:	bf00      	nop
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	20000970 	.word	0x20000970
 8008080:	2000000c 	.word	0x2000000c

08008084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  return uwTick;
 8008088:	4b03      	ldr	r3, [pc, #12]	; (8008098 <HAL_GetTick+0x14>)
 800808a:	681b      	ldr	r3, [r3, #0]
}
 800808c:	4618      	mov	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000970 	.word	0x20000970

0800809c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80080a4:	f7ff ffee 	bl	8008084 <HAL_GetTick>
 80080a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d004      	beq.n	80080c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80080b6:	4b09      	ldr	r3, [pc, #36]	; (80080dc <HAL_Delay+0x40>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80080c0:	bf00      	nop
 80080c2:	f7ff ffdf 	bl	8008084 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d8f7      	bhi.n	80080c2 <HAL_Delay+0x26>
  {
  }
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	2000000c 	.word	0x2000000c

080080e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	609a      	str	r2, [r3, #8]
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	609a      	str	r2, [r3, #8]
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800813c:	4618      	mov	r0, r3
 800813e:	370c      	adds	r7, #12
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
 8008154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3360      	adds	r3, #96	; 0x60
 800815a:	461a      	mov	r2, r3
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <LL_ADC_SetOffset+0x44>)
 800816a:	4013      	ands	r3, r2
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	4313      	orrs	r3, r2
 8008178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	03fff000 	.word	0x03fff000

08008190 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	3360      	adds	r3, #96	; 0x60
 800819e:	461a      	mov	r2, r3
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3360      	adds	r3, #96	; 0x60
 80081cc:	461a      	mov	r2, r3
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80081e6:	bf00      	nop
 80081e8:	371c      	adds	r7, #28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b087      	sub	sp, #28
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	60f8      	str	r0, [r7, #12]
 80081fa:	60b9      	str	r1, [r7, #8]
 80081fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3360      	adds	r3, #96	; 0x60
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	431a      	orrs	r2, r3
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800821c:	bf00      	nop
 800821e:	371c      	adds	r7, #28
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3360      	adds	r3, #96	; 0x60
 8008238:	461a      	mov	r2, r3
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	431a      	orrs	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008252:	bf00      	nop
 8008254:	371c      	adds	r7, #28
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800825e:	b480      	push	{r7}
 8008260:	b083      	sub	sp, #12
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	695b      	ldr	r3, [r3, #20]
 800826c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	615a      	str	r2, [r3, #20]
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b087      	sub	sp, #28
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3330      	adds	r3, #48	; 0x30
 80082ba:	461a      	mov	r2, r3
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	0a1b      	lsrs	r3, r3, #8
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	4413      	add	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	211f      	movs	r1, #31
 80082d6:	fa01 f303 	lsl.w	r3, r1, r3
 80082da:	43db      	mvns	r3, r3
 80082dc:	401a      	ands	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0e9b      	lsrs	r3, r3, #26
 80082e2:	f003 011f 	and.w	r1, r3, #31
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	f003 031f 	and.w	r3, r3, #31
 80082ec:	fa01 f303 	lsl.w	r3, r1, r3
 80082f0:	431a      	orrs	r2, r3
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008302:	b480      	push	{r7}
 8008304:	b087      	sub	sp, #28
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3314      	adds	r3, #20
 8008312:	461a      	mov	r2, r3
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	0e5b      	lsrs	r3, r3, #25
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	4413      	add	r3, r2
 8008320:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	0d1b      	lsrs	r3, r3, #20
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2107      	movs	r1, #7
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	401a      	ands	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	0d1b      	lsrs	r3, r3, #20
 800833c:	f003 031f 	and.w	r3, r3, #31
 8008340:	6879      	ldr	r1, [r7, #4]
 8008342:	fa01 f303 	lsl.w	r3, r1, r3
 8008346:	431a      	orrs	r2, r3
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800834c:	bf00      	nop
 800834e:	371c      	adds	r7, #28
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a0f      	ldr	r2, [pc, #60]	; (80083a4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d10a      	bne.n	8008382 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008378:	431a      	orrs	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8008380:	e00a      	b.n	8008398 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800838e:	43db      	mvns	r3, r3
 8008390:	401a      	ands	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8008398:	bf00      	nop
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	407f0000 	.word	0x407f0000

080083a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f003 031f 	and.w	r3, r3, #31
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80083d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	6093      	str	r3, [r2, #8]
}
 80083dc:	bf00      	nop
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083fc:	d101      	bne.n	8008402 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80083fe:	2301      	movs	r3, #1
 8008400:	e000      	b.n	8008404 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008420:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008424:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844c:	d101      	bne.n	8008452 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008474:	f043 0201 	orr.w	r2, r3, #1
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b01      	cmp	r3, #1
 800849a:	d101      	bne.n	80084a0 <LL_ADC_IsEnabled+0x18>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <LL_ADC_IsEnabled+0x1a>
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b083      	sub	sp, #12
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084c2:	f043 0204 	orr.w	r2, r3, #4
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80084ca:	bf00      	nop
 80084cc:	370c      	adds	r7, #12
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b083      	sub	sp, #12
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d101      	bne.n	80084ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0308 	and.w	r3, r3, #8
 800850c:	2b08      	cmp	r3, #8
 800850e:	d101      	bne.n	8008514 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b089      	sub	sp, #36	; 0x24
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008530:	2300      	movs	r3, #0
 8008532:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e1af      	b.n	800889e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fc fd35 	bl	8004fbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4618      	mov	r0, r3
 8008566:	f7ff ff3f 	bl	80083e8 <LL_ADC_IsDeepPowerDownEnabled>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4618      	mov	r0, r3
 8008576:	f7ff ff25 	bl	80083c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4618      	mov	r0, r3
 8008580:	f7ff ff5a 	bl	8008438 <LL_ADC_IsInternalRegulatorEnabled>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d115      	bne.n	80085b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff ff3e 	bl	8008410 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008594:	4b9f      	ldr	r3, [pc, #636]	; (8008814 <HAL_ADC_Init+0x2f0>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	099b      	lsrs	r3, r3, #6
 800859a:	4a9f      	ldr	r2, [pc, #636]	; (8008818 <HAL_ADC_Init+0x2f4>)
 800859c:	fba2 2303 	umull	r2, r3, r2, r3
 80085a0:	099b      	lsrs	r3, r3, #6
 80085a2:	3301      	adds	r3, #1
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085a8:	e002      	b.n	80085b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	3b01      	subs	r3, #1
 80085ae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1f9      	bne.n	80085aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff ff3c 	bl	8008438 <LL_ADC_IsInternalRegulatorEnabled>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10d      	bne.n	80085e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ca:	f043 0210 	orr.w	r2, r3, #16
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d6:	f043 0201 	orr.w	r2, r3, #1
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7ff ff75 	bl	80084d6 <LL_ADC_REG_IsConversionOngoing>
 80085ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f040 8148 	bne.w	800888c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f040 8144 	bne.w	800888c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008608:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800860c:	f043 0202 	orr.w	r2, r3, #2
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff ff35 	bl	8008488 <LL_ADC_IsEnabled>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d141      	bne.n	80086a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800862c:	d004      	beq.n	8008638 <HAL_ADC_Init+0x114>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a7a      	ldr	r2, [pc, #488]	; (800881c <HAL_ADC_Init+0x2f8>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10f      	bne.n	8008658 <HAL_ADC_Init+0x134>
 8008638:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800863c:	f7ff ff24 	bl	8008488 <LL_ADC_IsEnabled>
 8008640:	4604      	mov	r4, r0
 8008642:	4876      	ldr	r0, [pc, #472]	; (800881c <HAL_ADC_Init+0x2f8>)
 8008644:	f7ff ff20 	bl	8008488 <LL_ADC_IsEnabled>
 8008648:	4603      	mov	r3, r0
 800864a:	4323      	orrs	r3, r4
 800864c:	2b00      	cmp	r3, #0
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	e012      	b.n	800867e <HAL_ADC_Init+0x15a>
 8008658:	4871      	ldr	r0, [pc, #452]	; (8008820 <HAL_ADC_Init+0x2fc>)
 800865a:	f7ff ff15 	bl	8008488 <LL_ADC_IsEnabled>
 800865e:	4604      	mov	r4, r0
 8008660:	4870      	ldr	r0, [pc, #448]	; (8008824 <HAL_ADC_Init+0x300>)
 8008662:	f7ff ff11 	bl	8008488 <LL_ADC_IsEnabled>
 8008666:	4603      	mov	r3, r0
 8008668:	431c      	orrs	r4, r3
 800866a:	486f      	ldr	r0, [pc, #444]	; (8008828 <HAL_ADC_Init+0x304>)
 800866c:	f7ff ff0c 	bl	8008488 <LL_ADC_IsEnabled>
 8008670:	4603      	mov	r3, r0
 8008672:	4323      	orrs	r3, r4
 8008674:	2b00      	cmp	r3, #0
 8008676:	bf0c      	ite	eq
 8008678:	2301      	moveq	r3, #1
 800867a:	2300      	movne	r3, #0
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d012      	beq.n	80086a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800868a:	d004      	beq.n	8008696 <HAL_ADC_Init+0x172>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a62      	ldr	r2, [pc, #392]	; (800881c <HAL_ADC_Init+0x2f8>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d101      	bne.n	800869a <HAL_ADC_Init+0x176>
 8008696:	4a65      	ldr	r2, [pc, #404]	; (800882c <HAL_ADC_Init+0x308>)
 8008698:	e000      	b.n	800869c <HAL_ADC_Init+0x178>
 800869a:	4a65      	ldr	r2, [pc, #404]	; (8008830 <HAL_ADC_Init+0x30c>)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4619      	mov	r1, r3
 80086a2:	4610      	mov	r0, r2
 80086a4:	f7ff fd1c 	bl	80080e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7f5b      	ldrb	r3, [r3, #29]
 80086ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80086b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80086be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d106      	bne.n	80086e4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	3b01      	subs	r3, #1
 80086dc:	045b      	lsls	r3, r3, #17
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d009      	beq.n	8008700 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	4b4b      	ldr	r3, [pc, #300]	; (8008834 <HAL_ADC_Init+0x310>)
 8008708:	4013      	ands	r3, r2
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	69b9      	ldr	r1, [r7, #24]
 8008710:	430b      	orrs	r3, r1
 8008712:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	430a      	orrs	r2, r1
 8008728:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff fed1 	bl	80084d6 <LL_ADC_REG_IsConversionOngoing>
 8008734:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fede 	bl	80084fc <LL_ADC_INJ_IsConversionOngoing>
 8008740:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d17f      	bne.n	8008848 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d17c      	bne.n	8008848 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008752:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800875a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800875c:	4313      	orrs	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800876a:	f023 0302 	bic.w	r3, r3, #2
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	6812      	ldr	r2, [r2, #0]
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	430b      	orrs	r3, r1
 8008776:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691a      	ldr	r2, [r3, #16]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800878e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008798:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800879c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6911      	ldr	r1, [r2, #16]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	6812      	ldr	r2, [r2, #0]
 80087a8:	430b      	orrs	r3, r1
 80087aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80087ae:	e013      	b.n	80087d8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80087d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d12a      	bne.n	8008838 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087f8:	4311      	orrs	r1, r2
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087fe:	4311      	orrs	r1, r2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008804:	430a      	orrs	r2, r1
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	611a      	str	r2, [r3, #16]
 8008812:	e019      	b.n	8008848 <HAL_ADC_Init+0x324>
 8008814:	20000004 	.word	0x20000004
 8008818:	053e2d63 	.word	0x053e2d63
 800881c:	50000100 	.word	0x50000100
 8008820:	50000400 	.word	0x50000400
 8008824:	50000500 	.word	0x50000500
 8008828:	50000600 	.word	0x50000600
 800882c:	50000300 	.word	0x50000300
 8008830:	50000700 	.word	0x50000700
 8008834:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	691a      	ldr	r2, [r3, #16]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d10c      	bne.n	800886a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008856:	f023 010f 	bic.w	r1, r3, #15
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	1e5a      	subs	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	631a      	str	r2, [r3, #48]	; 0x30
 8008868:	e007      	b.n	800887a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 020f 	bic.w	r2, r2, #15
 8008878:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	f043 0201 	orr.w	r2, r3, #1
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	65da      	str	r2, [r3, #92]	; 0x5c
 800888a:	e007      	b.n	800889c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008890:	f043 0210 	orr.w	r2, r3, #16
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800889c:	7ffb      	ldrb	r3, [r7, #31]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3724      	adds	r7, #36	; 0x24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd90      	pop	{r4, r7, pc}
 80088a6:	bf00      	nop

080088a8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088bc:	d004      	beq.n	80088c8 <HAL_ADC_Start_DMA+0x20>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a5a      	ldr	r2, [pc, #360]	; (8008a2c <HAL_ADC_Start_DMA+0x184>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d101      	bne.n	80088cc <HAL_ADC_Start_DMA+0x24>
 80088c8:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_ADC_Start_DMA+0x188>)
 80088ca:	e000      	b.n	80088ce <HAL_ADC_Start_DMA+0x26>
 80088cc:	4b59      	ldr	r3, [pc, #356]	; (8008a34 <HAL_ADC_Start_DMA+0x18c>)
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fd6a 	bl	80083a8 <LL_ADC_GetMultimode>
 80088d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fdfb 	bl	80084d6 <LL_ADC_REG_IsConversionOngoing>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f040 809b 	bne.w	8008a1e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_ADC_Start_DMA+0x4e>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e096      	b.n	8008a24 <HAL_ADC_Start_DMA+0x17c>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a4d      	ldr	r2, [pc, #308]	; (8008a38 <HAL_ADC_Start_DMA+0x190>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d008      	beq.n	800891a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	2b05      	cmp	r3, #5
 8008912:	d002      	beq.n	800891a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b09      	cmp	r3, #9
 8008918:	d17a      	bne.n	8008a10 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f000 fcf6 	bl	800930c <ADC_Enable>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d16d      	bne.n	8008a06 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800892e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a3a      	ldr	r2, [pc, #232]	; (8008a2c <HAL_ADC_Start_DMA+0x184>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d009      	beq.n	800895c <HAL_ADC_Start_DMA+0xb4>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a3b      	ldr	r2, [pc, #236]	; (8008a3c <HAL_ADC_Start_DMA+0x194>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d002      	beq.n	8008958 <HAL_ADC_Start_DMA+0xb0>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	e003      	b.n	8008960 <HAL_ADC_Start_DMA+0xb8>
 8008958:	4b39      	ldr	r3, [pc, #228]	; (8008a40 <HAL_ADC_Start_DMA+0x198>)
 800895a:	e001      	b.n	8008960 <HAL_ADC_Start_DMA+0xb8>
 800895c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	6812      	ldr	r2, [r2, #0]
 8008964:	4293      	cmp	r3, r2
 8008966:	d002      	beq.n	800896e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008972:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800897e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d006      	beq.n	8008994 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800898a:	f023 0206 	bic.w	r2, r3, #6
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	661a      	str	r2, [r3, #96]	; 0x60
 8008992:	e002      	b.n	800899a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899e:	4a29      	ldr	r2, [pc, #164]	; (8008a44 <HAL_ADC_Start_DMA+0x19c>)
 80089a0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a6:	4a28      	ldr	r2, [pc, #160]	; (8008a48 <HAL_ADC_Start_DMA+0x1a0>)
 80089a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ae:	4a27      	ldr	r2, [pc, #156]	; (8008a4c <HAL_ADC_Start_DMA+0x1a4>)
 80089b0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	221c      	movs	r2, #28
 80089b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2200      	movs	r2, #0
 80089be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	685a      	ldr	r2, [r3, #4]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f042 0210 	orr.w	r2, r2, #16
 80089d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68da      	ldr	r2, [r3, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f042 0201 	orr.w	r2, r2, #1
 80089e0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3340      	adds	r3, #64	; 0x40
 80089ec:	4619      	mov	r1, r3
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f000 ff09 	bl	8009808 <HAL_DMA_Start_IT>
 80089f6:	4603      	mov	r3, r0
 80089f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fd55 	bl	80084ae <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8008a04:	e00d      	b.n	8008a22 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8008a0e:	e008      	b.n	8008a22 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8008a1c:	e001      	b.n	8008a22 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008a1e:	2302      	movs	r3, #2
 8008a20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8008a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3718      	adds	r7, #24
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	50000100 	.word	0x50000100
 8008a30:	50000300 	.word	0x50000300
 8008a34:	50000700 	.word	0x50000700
 8008a38:	50000600 	.word	0x50000600
 8008a3c:	50000500 	.word	0x50000500
 8008a40:	50000400 	.word	0x50000400
 8008a44:	080093d1 	.word	0x080093d1
 8008a48:	080094a9 	.word	0x080094a9
 8008a4c:	080094c5 	.word	0x080094c5

08008a50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b0b6      	sub	sp, #216	; 0xd8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d102      	bne.n	8008ab0 <HAL_ADC_ConfigChannel+0x24>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	f000 bc13 	b.w	80092d6 <HAL_ADC_ConfigChannel+0x84a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fd0a 	bl	80084d6 <LL_ADC_REG_IsConversionOngoing>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 83f3 	bne.w	80092b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6859      	ldr	r1, [r3, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f7ff fbe7 	bl	80082aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fcf8 	bl	80084d6 <LL_ADC_REG_IsConversionOngoing>
 8008ae6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fd04 	bl	80084fc <LL_ADC_INJ_IsConversionOngoing>
 8008af4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008af8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f040 81d9 	bne.w	8008eb4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008b02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f040 81d4 	bne.w	8008eb4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b14:	d10f      	bne.n	8008b36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	4619      	mov	r1, r3
 8008b22:	f7ff fbee 	bl	8008302 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7ff fb95 	bl	800825e <LL_ADC_SetSamplingTimeCommonConfig>
 8008b34:	e00e      	b.n	8008b54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6819      	ldr	r1, [r3, #0]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f7ff fbdd 	bl	8008302 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff fb85 	bl	800825e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	08db      	lsrs	r3, r3, #3
 8008b60:	f003 0303 	and.w	r3, r3, #3
 8008b64:	005b      	lsls	r3, r3, #1
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d022      	beq.n	8008bbc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6919      	ldr	r1, [r3, #16]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008b86:	f7ff fadf 	bl	8008148 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6919      	ldr	r1, [r3, #16]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7ff fb2b 	bl	80081f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	6919      	ldr	r1, [r3, #16]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	7f1b      	ldrb	r3, [r3, #28]
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d102      	bne.n	8008bb2 <HAL_ADC_ConfigChannel+0x126>
 8008bac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bb0:	e000      	b.n	8008bb4 <HAL_ADC_ConfigChannel+0x128>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f7ff fb37 	bl	8008228 <LL_ADC_SetOffsetSaturation>
 8008bba:	e17b      	b.n	8008eb4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff fae4 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <HAL_ADC_ConfigChannel+0x15c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fad9 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008bde:	4603      	mov	r3, r0
 8008be0:	0e9b      	lsrs	r3, r3, #26
 8008be2:	f003 021f 	and.w	r2, r3, #31
 8008be6:	e01e      	b.n	8008c26 <HAL_ADC_ConfigChannel+0x19a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff face 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008bfe:	fa93 f3a3 	rbit	r3, r3
 8008c02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8008c16:	2320      	movs	r3, #32
 8008c18:	e004      	b.n	8008c24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8008c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c1e:	fab3 f383 	clz	r3, r3
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d105      	bne.n	8008c3e <HAL_ADC_ConfigChannel+0x1b2>
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	0e9b      	lsrs	r3, r3, #26
 8008c38:	f003 031f 	and.w	r3, r3, #31
 8008c3c:	e018      	b.n	8008c70 <HAL_ADC_ConfigChannel+0x1e4>
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c4a:	fa93 f3a3 	rbit	r3, r3
 8008c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8008c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8008c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8008c62:	2320      	movs	r3, #32
 8008c64:	e004      	b.n	8008c70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8008c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008c6a:	fab3 f383 	clz	r3, r3
 8008c6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d106      	bne.n	8008c82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff fa9d 	bl	80081bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	2101      	movs	r1, #1
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fa81 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <HAL_ADC_ConfigChannel+0x222>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fa76 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	0e9b      	lsrs	r3, r3, #26
 8008ca8:	f003 021f 	and.w	r2, r3, #31
 8008cac:	e01e      	b.n	8008cec <HAL_ADC_ConfigChannel+0x260>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7ff fa6b 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008cc4:	fa93 f3a3 	rbit	r3, r3
 8008cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8008ccc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8008cd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008cdc:	2320      	movs	r3, #32
 8008cde:	e004      	b.n	8008cea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008ce0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ce4:	fab3 f383 	clz	r3, r3
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d105      	bne.n	8008d04 <HAL_ADC_ConfigChannel+0x278>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	0e9b      	lsrs	r3, r3, #26
 8008cfe:	f003 031f 	and.w	r3, r3, #31
 8008d02:	e018      	b.n	8008d36 <HAL_ADC_ConfigChannel+0x2aa>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d10:	fa93 f3a3 	rbit	r3, r3
 8008d14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8008d18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8008d20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008d28:	2320      	movs	r3, #32
 8008d2a:	e004      	b.n	8008d36 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d30:	fab3 f383 	clz	r3, r3
 8008d34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d106      	bne.n	8008d48 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2101      	movs	r1, #1
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fa3a 	bl	80081bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7ff fa1e 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10a      	bne.n	8008d74 <HAL_ADC_ConfigChannel+0x2e8>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2102      	movs	r1, #2
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff fa13 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	0e9b      	lsrs	r3, r3, #26
 8008d6e:	f003 021f 	and.w	r2, r3, #31
 8008d72:	e01e      	b.n	8008db2 <HAL_ADC_ConfigChannel+0x326>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2102      	movs	r1, #2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7ff fa08 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d8a:	fa93 f3a3 	rbit	r3, r3
 8008d8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8008d92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8008d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8008da2:	2320      	movs	r3, #32
 8008da4:	e004      	b.n	8008db0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8008da6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008daa:	fab3 f383 	clz	r3, r3
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d105      	bne.n	8008dca <HAL_ADC_ConfigChannel+0x33e>
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	0e9b      	lsrs	r3, r3, #26
 8008dc4:	f003 031f 	and.w	r3, r3, #31
 8008dc8:	e016      	b.n	8008df8 <HAL_ADC_ConfigChannel+0x36c>
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dd6:	fa93 f3a3 	rbit	r3, r3
 8008dda:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008dde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8008de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008dea:	2320      	movs	r3, #32
 8008dec:	e004      	b.n	8008df8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008df2:	fab3 f383 	clz	r3, r3
 8008df6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d106      	bne.n	8008e0a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2200      	movs	r2, #0
 8008e02:	2102      	movs	r1, #2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff f9d9 	bl	80081bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2103      	movs	r1, #3
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff f9bd 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008e16:	4603      	mov	r3, r0
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <HAL_ADC_ConfigChannel+0x3aa>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2103      	movs	r1, #3
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7ff f9b2 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	0e9b      	lsrs	r3, r3, #26
 8008e30:	f003 021f 	and.w	r2, r3, #31
 8008e34:	e017      	b.n	8008e66 <HAL_ADC_ConfigChannel+0x3da>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2103      	movs	r1, #3
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff f9a7 	bl	8008190 <LL_ADC_GetOffsetChannel>
 8008e42:	4603      	mov	r3, r0
 8008e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e48:	fa93 f3a3 	rbit	r3, r3
 8008e4c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8008e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e50:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8008e52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008e58:	2320      	movs	r3, #32
 8008e5a:	e003      	b.n	8008e64 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e5e:	fab3 f383 	clz	r3, r3
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d105      	bne.n	8008e7e <HAL_ADC_ConfigChannel+0x3f2>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	0e9b      	lsrs	r3, r3, #26
 8008e78:	f003 031f 	and.w	r3, r3, #31
 8008e7c:	e011      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x416>
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e86:	fa93 f3a3 	rbit	r3, r3
 8008e8a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8008e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8008e96:	2320      	movs	r3, #32
 8008e98:	e003      	b.n	8008ea2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9c:	fab3 f383 	clz	r3, r3
 8008ea0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d106      	bne.n	8008eb4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2103      	movs	r1, #3
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff f984 	bl	80081bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff fae5 	bl	8008488 <LL_ADC_IsEnabled>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f040 813d 	bne.w	8009140 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6818      	ldr	r0, [r3, #0]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7ff fa40 	bl	8008358 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	4aa2      	ldr	r2, [pc, #648]	; (8009168 <HAL_ADC_ConfigChannel+0x6dc>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	f040 812e 	bne.w	8009140 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10b      	bne.n	8008f0c <HAL_ADC_ConfigChannel+0x480>
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	0e9b      	lsrs	r3, r3, #26
 8008efa:	3301      	adds	r3, #1
 8008efc:	f003 031f 	and.w	r3, r3, #31
 8008f00:	2b09      	cmp	r3, #9
 8008f02:	bf94      	ite	ls
 8008f04:	2301      	movls	r3, #1
 8008f06:	2300      	movhi	r3, #0
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	e019      	b.n	8008f40 <HAL_ADC_ConfigChannel+0x4b4>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f14:	fa93 f3a3 	rbit	r3, r3
 8008f18:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8008f1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f1c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8008f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8008f24:	2320      	movs	r3, #32
 8008f26:	e003      	b.n	8008f30 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008f28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f2a:	fab3 f383 	clz	r3, r3
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	3301      	adds	r3, #1
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	2b09      	cmp	r3, #9
 8008f38:	bf94      	ite	ls
 8008f3a:	2301      	movls	r3, #1
 8008f3c:	2300      	movhi	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d079      	beq.n	8009038 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d107      	bne.n	8008f60 <HAL_ADC_ConfigChannel+0x4d4>
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	0e9b      	lsrs	r3, r3, #26
 8008f56:	3301      	adds	r3, #1
 8008f58:	069b      	lsls	r3, r3, #26
 8008f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008f5e:	e015      	b.n	8008f8c <HAL_ADC_ConfigChannel+0x500>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f68:	fa93 f3a3 	rbit	r3, r3
 8008f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8008f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d101      	bne.n	8008f7c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008f78:	2320      	movs	r3, #32
 8008f7a:	e003      	b.n	8008f84 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f7e:	fab3 f383 	clz	r3, r3
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	3301      	adds	r3, #1
 8008f86:	069b      	lsls	r3, r3, #26
 8008f88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d109      	bne.n	8008fac <HAL_ADC_ConfigChannel+0x520>
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	0e9b      	lsrs	r3, r3, #26
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	f003 031f 	and.w	r3, r3, #31
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008faa:	e017      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x550>
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb4:	fa93 f3a3 	rbit	r3, r3
 8008fb8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8008fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8008fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	e003      	b.n	8008fd0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fca:	fab3 f383 	clz	r3, r3
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fdc:	ea42 0103 	orr.w	r1, r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10a      	bne.n	8009002 <HAL_ADC_ConfigChannel+0x576>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	0e9b      	lsrs	r3, r3, #26
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f003 021f 	and.w	r2, r3, #31
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	4413      	add	r3, r2
 8008ffe:	051b      	lsls	r3, r3, #20
 8009000:	e018      	b.n	8009034 <HAL_ADC_ConfigChannel+0x5a8>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	fa93 f3a3 	rbit	r3, r3
 800900e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800901a:	2320      	movs	r3, #32
 800901c:	e003      	b.n	8009026 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	fab3 f383 	clz	r3, r3
 8009024:	b2db      	uxtb	r3, r3
 8009026:	3301      	adds	r3, #1
 8009028:	f003 021f 	and.w	r2, r3, #31
 800902c:	4613      	mov	r3, r2
 800902e:	005b      	lsls	r3, r3, #1
 8009030:	4413      	add	r3, r2
 8009032:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009034:	430b      	orrs	r3, r1
 8009036:	e07e      	b.n	8009136 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009040:	2b00      	cmp	r3, #0
 8009042:	d107      	bne.n	8009054 <HAL_ADC_ConfigChannel+0x5c8>
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	0e9b      	lsrs	r3, r3, #26
 800904a:	3301      	adds	r3, #1
 800904c:	069b      	lsls	r3, r3, #26
 800904e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009052:	e015      	b.n	8009080 <HAL_ADC_ConfigChannel+0x5f4>
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	fa93 f3a3 	rbit	r3, r3
 8009060:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800906c:	2320      	movs	r3, #32
 800906e:	e003      	b.n	8009078 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	fab3 f383 	clz	r3, r3
 8009076:	b2db      	uxtb	r3, r3
 8009078:	3301      	adds	r3, #1
 800907a:	069b      	lsls	r3, r3, #26
 800907c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009088:	2b00      	cmp	r3, #0
 800908a:	d109      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0x614>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	0e9b      	lsrs	r3, r3, #26
 8009092:	3301      	adds	r3, #1
 8009094:	f003 031f 	and.w	r3, r3, #31
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f303 	lsl.w	r3, r1, r3
 800909e:	e017      	b.n	80090d0 <HAL_ADC_ConfigChannel+0x644>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	fa93 f3a3 	rbit	r3, r3
 80090ac:	61fb      	str	r3, [r7, #28]
  return result;
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d101      	bne.n	80090bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80090b8:	2320      	movs	r3, #32
 80090ba:	e003      	b.n	80090c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	fab3 f383 	clz	r3, r3
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	3301      	adds	r3, #1
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	2101      	movs	r1, #1
 80090cc:	fa01 f303 	lsl.w	r3, r1, r3
 80090d0:	ea42 0103 	orr.w	r1, r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10d      	bne.n	80090fc <HAL_ADC_ConfigChannel+0x670>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	0e9b      	lsrs	r3, r3, #26
 80090e6:	3301      	adds	r3, #1
 80090e8:	f003 021f 	and.w	r2, r3, #31
 80090ec:	4613      	mov	r3, r2
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	4413      	add	r3, r2
 80090f2:	3b1e      	subs	r3, #30
 80090f4:	051b      	lsls	r3, r3, #20
 80090f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80090fa:	e01b      	b.n	8009134 <HAL_ADC_ConfigChannel+0x6a8>
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009102:	697b      	ldr	r3, [r7, #20]
 8009104:	fa93 f3a3 	rbit	r3, r3
 8009108:	613b      	str	r3, [r7, #16]
  return result;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8009114:	2320      	movs	r3, #32
 8009116:	e003      	b.n	8009120 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	fab3 f383 	clz	r3, r3
 800911e:	b2db      	uxtb	r3, r3
 8009120:	3301      	adds	r3, #1
 8009122:	f003 021f 	and.w	r2, r3, #31
 8009126:	4613      	mov	r3, r2
 8009128:	005b      	lsls	r3, r3, #1
 800912a:	4413      	add	r3, r2
 800912c:	3b1e      	subs	r3, #30
 800912e:	051b      	lsls	r3, r3, #20
 8009130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009134:	430b      	orrs	r3, r1
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	6892      	ldr	r2, [r2, #8]
 800913a:	4619      	mov	r1, r3
 800913c:	f7ff f8e1 	bl	8008302 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_ADC_ConfigChannel+0x6e0>)
 8009146:	4013      	ands	r3, r2
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 80be 	beq.w	80092ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009156:	d004      	beq.n	8009162 <HAL_ADC_ConfigChannel+0x6d6>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a04      	ldr	r2, [pc, #16]	; (8009170 <HAL_ADC_ConfigChannel+0x6e4>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d10a      	bne.n	8009178 <HAL_ADC_ConfigChannel+0x6ec>
 8009162:	4b04      	ldr	r3, [pc, #16]	; (8009174 <HAL_ADC_ConfigChannel+0x6e8>)
 8009164:	e009      	b.n	800917a <HAL_ADC_ConfigChannel+0x6ee>
 8009166:	bf00      	nop
 8009168:	407f0000 	.word	0x407f0000
 800916c:	80080000 	.word	0x80080000
 8009170:	50000100 	.word	0x50000100
 8009174:	50000300 	.word	0x50000300
 8009178:	4b59      	ldr	r3, [pc, #356]	; (80092e0 <HAL_ADC_ConfigChannel+0x854>)
 800917a:	4618      	mov	r0, r3
 800917c:	f7fe ffd6 	bl	800812c <LL_ADC_GetCommonPathInternalCh>
 8009180:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a56      	ldr	r2, [pc, #344]	; (80092e4 <HAL_ADC_ConfigChannel+0x858>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <HAL_ADC_ConfigChannel+0x70c>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a55      	ldr	r2, [pc, #340]	; (80092e8 <HAL_ADC_ConfigChannel+0x85c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d13a      	bne.n	800920e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009198:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800919c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d134      	bne.n	800920e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091ac:	d005      	beq.n	80091ba <HAL_ADC_ConfigChannel+0x72e>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a4e      	ldr	r2, [pc, #312]	; (80092ec <HAL_ADC_ConfigChannel+0x860>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	f040 8085 	bne.w	80092c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c2:	d004      	beq.n	80091ce <HAL_ADC_ConfigChannel+0x742>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a49      	ldr	r2, [pc, #292]	; (80092f0 <HAL_ADC_ConfigChannel+0x864>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d101      	bne.n	80091d2 <HAL_ADC_ConfigChannel+0x746>
 80091ce:	4a49      	ldr	r2, [pc, #292]	; (80092f4 <HAL_ADC_ConfigChannel+0x868>)
 80091d0:	e000      	b.n	80091d4 <HAL_ADC_ConfigChannel+0x748>
 80091d2:	4a43      	ldr	r2, [pc, #268]	; (80092e0 <HAL_ADC_ConfigChannel+0x854>)
 80091d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80091d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f7fe ff91 	bl	8008106 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80091e4:	4b44      	ldr	r3, [pc, #272]	; (80092f8 <HAL_ADC_ConfigChannel+0x86c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	099b      	lsrs	r3, r3, #6
 80091ea:	4a44      	ldr	r2, [pc, #272]	; (80092fc <HAL_ADC_ConfigChannel+0x870>)
 80091ec:	fba2 2303 	umull	r2, r3, r2, r3
 80091f0:	099b      	lsrs	r3, r3, #6
 80091f2:	1c5a      	adds	r2, r3, #1
 80091f4:	4613      	mov	r3, r2
 80091f6:	005b      	lsls	r3, r3, #1
 80091f8:	4413      	add	r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80091fe:	e002      	b.n	8009206 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3b01      	subs	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f9      	bne.n	8009200 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800920c:	e05a      	b.n	80092c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a3b      	ldr	r2, [pc, #236]	; (8009300 <HAL_ADC_ConfigChannel+0x874>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d125      	bne.n	8009264 <HAL_ADC_ConfigChannel+0x7d8>
 8009218:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800921c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d11f      	bne.n	8009264 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a31      	ldr	r2, [pc, #196]	; (80092f0 <HAL_ADC_ConfigChannel+0x864>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d104      	bne.n	8009238 <HAL_ADC_ConfigChannel+0x7ac>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a34      	ldr	r2, [pc, #208]	; (8009304 <HAL_ADC_ConfigChannel+0x878>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d047      	beq.n	80092c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009240:	d004      	beq.n	800924c <HAL_ADC_ConfigChannel+0x7c0>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a2a      	ldr	r2, [pc, #168]	; (80092f0 <HAL_ADC_ConfigChannel+0x864>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d101      	bne.n	8009250 <HAL_ADC_ConfigChannel+0x7c4>
 800924c:	4a29      	ldr	r2, [pc, #164]	; (80092f4 <HAL_ADC_ConfigChannel+0x868>)
 800924e:	e000      	b.n	8009252 <HAL_ADC_ConfigChannel+0x7c6>
 8009250:	4a23      	ldr	r2, [pc, #140]	; (80092e0 <HAL_ADC_ConfigChannel+0x854>)
 8009252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800925a:	4619      	mov	r1, r3
 800925c:	4610      	mov	r0, r2
 800925e:	f7fe ff52 	bl	8008106 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009262:	e031      	b.n	80092c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a27      	ldr	r2, [pc, #156]	; (8009308 <HAL_ADC_ConfigChannel+0x87c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d12d      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800926e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d127      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a1c      	ldr	r2, [pc, #112]	; (80092f0 <HAL_ADC_ConfigChannel+0x864>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d022      	beq.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800928c:	d004      	beq.n	8009298 <HAL_ADC_ConfigChannel+0x80c>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <HAL_ADC_ConfigChannel+0x864>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d101      	bne.n	800929c <HAL_ADC_ConfigChannel+0x810>
 8009298:	4a16      	ldr	r2, [pc, #88]	; (80092f4 <HAL_ADC_ConfigChannel+0x868>)
 800929a:	e000      	b.n	800929e <HAL_ADC_ConfigChannel+0x812>
 800929c:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <HAL_ADC_ConfigChannel+0x854>)
 800929e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80092a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7fe ff2c 	bl	8008106 <LL_ADC_SetCommonPathInternalCh>
 80092ae:	e00c      	b.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092b4:	f043 0220 	orr.w	r2, r3, #32
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80092c2:	e002      	b.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80092c4:	bf00      	nop
 80092c6:	e000      	b.n	80092ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80092d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	37d8      	adds	r7, #216	; 0xd8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	50000700 	.word	0x50000700
 80092e4:	c3210000 	.word	0xc3210000
 80092e8:	90c00010 	.word	0x90c00010
 80092ec:	50000600 	.word	0x50000600
 80092f0:	50000100 	.word	0x50000100
 80092f4:	50000300 	.word	0x50000300
 80092f8:	20000004 	.word	0x20000004
 80092fc:	053e2d63 	.word	0x053e2d63
 8009300:	c7520000 	.word	0xc7520000
 8009304:	50000500 	.word	0x50000500
 8009308:	cb840000 	.word	0xcb840000

0800930c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4618      	mov	r0, r3
 800931a:	f7ff f8b5 	bl	8008488 <LL_ADC_IsEnabled>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d14d      	bne.n	80093c0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	4b28      	ldr	r3, [pc, #160]	; (80093cc <ADC_Enable+0xc0>)
 800932c:	4013      	ands	r3, r2
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00d      	beq.n	800934e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009336:	f043 0210 	orr.w	r2, r3, #16
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009342:	f043 0201 	orr.w	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e039      	b.n	80093c2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff f884 	bl	8008460 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009358:	f7fe fe94 	bl	8008084 <HAL_GetTick>
 800935c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800935e:	e028      	b.n	80093b2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff f88f 	bl	8008488 <LL_ADC_IsEnabled>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d104      	bne.n	800937a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff f873 	bl	8008460 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800937a:	f7fe fe83 	bl	8008084 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d914      	bls.n	80093b2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b01      	cmp	r3, #1
 8009394:	d00d      	beq.n	80093b2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939a:	f043 0210 	orr.w	r2, r3, #16
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093a6:	f043 0201 	orr.w	r2, r3, #1
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e007      	b.n	80093c2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d1cf      	bne.n	8009360 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	8000003f 	.word	0x8000003f

080093d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d14b      	bne.n	8009482 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d021      	beq.n	8009448 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4618      	mov	r0, r3
 800940a:	f7fe ff3b 	bl	8008284 <LL_ADC_REG_IsTriggerSourceSWStart>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d032      	beq.n	800947a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800941e:	2b00      	cmp	r3, #0
 8009420:	d12b      	bne.n	800947a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009426:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d11f      	bne.n	800947a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943e:	f043 0201 	orr.w	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	65da      	str	r2, [r3, #92]	; 0x5c
 8009446:	e018      	b.n	800947a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d111      	bne.n	800947a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d105      	bne.n	800947a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009472:	f043 0201 	orr.w	r2, r3, #1
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f7ff fae8 	bl	8008a50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009480:	e00e      	b.n	80094a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009486:	f003 0310 	and.w	r3, r3, #16
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f7ff faf2 	bl	8008a78 <HAL_ADC_ErrorCallback>
}
 8009494:	e004      	b.n	80094a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	4798      	blx	r3
}
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fad4 	bl	8008a64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094bc:	bf00      	nop
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e2:	f043 0204 	orr.w	r2, r3, #4
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fac4 	bl	8008a78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80094f0:	bf00      	nop
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009508:	4b0c      	ldr	r3, [pc, #48]	; (800953c <__NVIC_SetPriorityGrouping+0x44>)
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009514:	4013      	ands	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800952a:	4a04      	ldr	r2, [pc, #16]	; (800953c <__NVIC_SetPriorityGrouping+0x44>)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	60d3      	str	r3, [r2, #12]
}
 8009530:	bf00      	nop
 8009532:	3714      	adds	r7, #20
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	e000ed00 	.word	0xe000ed00

08009540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <__NVIC_GetPriorityGrouping+0x18>)
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	0a1b      	lsrs	r3, r3, #8
 800954a:	f003 0307 	and.w	r3, r3, #7
}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	e000ed00 	.word	0xe000ed00

0800955c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	4603      	mov	r3, r0
 8009564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800956a:	2b00      	cmp	r3, #0
 800956c:	db0b      	blt.n	8009586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	f003 021f 	and.w	r2, r3, #31
 8009574:	4907      	ldr	r1, [pc, #28]	; (8009594 <__NVIC_EnableIRQ+0x38>)
 8009576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957a:	095b      	lsrs	r3, r3, #5
 800957c:	2001      	movs	r0, #1
 800957e:	fa00 f202 	lsl.w	r2, r0, r2
 8009582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	e000e100 	.word	0xe000e100

08009598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009598:	b480      	push	{r7}
 800959a:	b083      	sub	sp, #12
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	db0a      	blt.n	80095c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	490c      	ldr	r1, [pc, #48]	; (80095e4 <__NVIC_SetPriority+0x4c>)
 80095b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b6:	0112      	lsls	r2, r2, #4
 80095b8:	b2d2      	uxtb	r2, r2
 80095ba:	440b      	add	r3, r1
 80095bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80095c0:	e00a      	b.n	80095d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	4908      	ldr	r1, [pc, #32]	; (80095e8 <__NVIC_SetPriority+0x50>)
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	3b04      	subs	r3, #4
 80095d0:	0112      	lsls	r2, r2, #4
 80095d2:	b2d2      	uxtb	r2, r2
 80095d4:	440b      	add	r3, r1
 80095d6:	761a      	strb	r2, [r3, #24]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	e000e100 	.word	0xe000e100
 80095e8:	e000ed00 	.word	0xe000ed00

080095ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f1c3 0307 	rsb	r3, r3, #7
 8009606:	2b04      	cmp	r3, #4
 8009608:	bf28      	it	cs
 800960a:	2304      	movcs	r3, #4
 800960c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800960e:	69fb      	ldr	r3, [r7, #28]
 8009610:	3304      	adds	r3, #4
 8009612:	2b06      	cmp	r3, #6
 8009614:	d902      	bls.n	800961c <NVIC_EncodePriority+0x30>
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	3b03      	subs	r3, #3
 800961a:	e000      	b.n	800961e <NVIC_EncodePriority+0x32>
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009620:	f04f 32ff 	mov.w	r2, #4294967295
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	fa02 f303 	lsl.w	r3, r2, r3
 800962a:	43da      	mvns	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	401a      	ands	r2, r3
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009634:	f04f 31ff 	mov.w	r1, #4294967295
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	fa01 f303 	lsl.w	r3, r1, r3
 800963e:	43d9      	mvns	r1, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009644:	4313      	orrs	r3, r2
         );
}
 8009646:	4618      	mov	r0, r3
 8009648:	3724      	adds	r7, #36	; 0x24
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr

08009652 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009652:	b580      	push	{r7, lr}
 8009654:	b082      	sub	sp, #8
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff ff4c 	bl	80094f8 <__NVIC_SetPriorityGrouping>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	607a      	str	r2, [r7, #4]
 8009674:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009676:	f7ff ff63 	bl	8009540 <__NVIC_GetPriorityGrouping>
 800967a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800967c:	687a      	ldr	r2, [r7, #4]
 800967e:	68b9      	ldr	r1, [r7, #8]
 8009680:	6978      	ldr	r0, [r7, #20]
 8009682:	f7ff ffb3 	bl	80095ec <NVIC_EncodePriority>
 8009686:	4602      	mov	r2, r0
 8009688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff ff82 	bl	8009598 <__NVIC_SetPriority>
}
 8009694:	bf00      	nop
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff ff56 	bl	800955c <__NVIC_EnableIRQ>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e08d      	b.n	80097e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	4b47      	ldr	r3, [pc, #284]	; (80097f0 <HAL_DMA_Init+0x138>)
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d80f      	bhi.n	80096f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	4b45      	ldr	r3, [pc, #276]	; (80097f4 <HAL_DMA_Init+0x13c>)
 80096de:	4413      	add	r3, r2
 80096e0:	4a45      	ldr	r2, [pc, #276]	; (80097f8 <HAL_DMA_Init+0x140>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	009a      	lsls	r2, r3, #2
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a42      	ldr	r2, [pc, #264]	; (80097fc <HAL_DMA_Init+0x144>)
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40
 80096f4:	e00e      	b.n	8009714 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	4b40      	ldr	r3, [pc, #256]	; (8009800 <HAL_DMA_Init+0x148>)
 80096fe:	4413      	add	r3, r2
 8009700:	4a3d      	ldr	r2, [pc, #244]	; (80097f8 <HAL_DMA_Init+0x140>)
 8009702:	fba2 2303 	umull	r2, r3, r2, r3
 8009706:	091b      	lsrs	r3, r3, #4
 8009708:	009a      	lsls	r2, r3, #2
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a3c      	ldr	r2, [pc, #240]	; (8009804 <HAL_DMA_Init+0x14c>)
 8009712:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800972a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	699b      	ldr	r3, [r3, #24]
 800974a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fa76 	bl	8009c58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009774:	d102      	bne.n	800977c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009784:	b2d2      	uxtb	r2, r2
 8009786:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009790:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <HAL_DMA_Init+0x104>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d80c      	bhi.n	80097bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fa96 	bl	8009cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ac:	2200      	movs	r2, #0
 80097ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80097b8:	605a      	str	r2, [r3, #4]
 80097ba:	e008      	b.n	80097ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	40020407 	.word	0x40020407
 80097f4:	bffdfff8 	.word	0xbffdfff8
 80097f8:	cccccccd 	.word	0xcccccccd
 80097fc:	40020000 	.word	0x40020000
 8009800:	bffdfbf8 	.word	0xbffdfbf8
 8009804:	40020400 	.word	0x40020400

08009808 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b086      	sub	sp, #24
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009816:	2300      	movs	r3, #0
 8009818:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009820:	2b01      	cmp	r3, #1
 8009822:	d101      	bne.n	8009828 <HAL_DMA_Start_IT+0x20>
 8009824:	2302      	movs	r3, #2
 8009826:	e066      	b.n	80098f6 <HAL_DMA_Start_IT+0xee>
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b01      	cmp	r3, #1
 800983a:	d155      	bne.n	80098e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f022 0201 	bic.w	r2, r2, #1
 8009858:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f9bb 	bl	8009bdc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986a:	2b00      	cmp	r3, #0
 800986c:	d008      	beq.n	8009880 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 020e 	orr.w	r2, r2, #14
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e00f      	b.n	80098a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0204 	bic.w	r2, r2, #4
 800988e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f042 020a 	orr.w	r2, r2, #10
 800989e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d007      	beq.n	80098be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d007      	beq.n	80098d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e005      	b.n	80098f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80098f0:	2302      	movs	r3, #2
 80098f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b02      	cmp	r3, #2
 8009914:	d005      	beq.n	8009922 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2204      	movs	r2, #4
 800991a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	73fb      	strb	r3, [r7, #15]
 8009920:	e037      	b.n	8009992 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 020e 	bic.w	r2, r2, #14
 8009930:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800993c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009940:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f022 0201 	bic.w	r2, r2, #1
 8009950:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009956:	f003 021f 	and.w	r2, r3, #31
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	2101      	movs	r1, #1
 8009960:	fa01 f202 	lsl.w	r2, r1, r2
 8009964:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800996e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00c      	beq.n	8009992 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009982:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009986:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009990:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d00d      	beq.n	80099e4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2204      	movs	r2, #4
 80099cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	73fb      	strb	r3, [r7, #15]
 80099e2:	e047      	b.n	8009a74 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 020e 	bic.w	r2, r2, #14
 80099f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0201 	bic.w	r2, r2, #1
 8009a02:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a18:	f003 021f 	and.w	r2, r3, #31
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f202 	lsl.w	r2, r1, r2
 8009a26:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009a30:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00c      	beq.n	8009a54 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a48:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009a52:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
    }
  }
  return status;
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b084      	sub	sp, #16
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a9a:	f003 031f 	and.w	r3, r3, #31
 8009a9e:	2204      	movs	r2, #4
 8009aa0:	409a      	lsls	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d026      	beq.n	8009af8 <HAL_DMA_IRQHandler+0x7a>
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d021      	beq.n	8009af8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 0320 	and.w	r3, r3, #32
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d107      	bne.n	8009ad2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0204 	bic.w	r2, r2, #4
 8009ad0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad6:	f003 021f 	and.w	r2, r3, #31
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	2104      	movs	r1, #4
 8009ae0:	fa01 f202 	lsl.w	r2, r1, r2
 8009ae4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d071      	beq.n	8009bd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009af6:	e06c      	b.n	8009bd2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afc:	f003 031f 	and.w	r3, r3, #31
 8009b00:	2202      	movs	r2, #2
 8009b02:	409a      	lsls	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	4013      	ands	r3, r2
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d02e      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	f003 0302 	and.w	r3, r3, #2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d029      	beq.n	8009b6a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0320 	and.w	r3, r3, #32
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f022 020a 	bic.w	r2, r2, #10
 8009b32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b40:	f003 021f 	and.w	r2, r3, #31
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	2102      	movs	r1, #2
 8009b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d038      	beq.n	8009bd2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009b68:	e033      	b.n	8009bd2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6e:	f003 031f 	and.w	r3, r3, #31
 8009b72:	2208      	movs	r2, #8
 8009b74:	409a      	lsls	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4013      	ands	r3, r2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d02a      	beq.n	8009bd4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f003 0308 	and.w	r3, r3, #8
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d025      	beq.n	8009bd4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 020e 	bic.w	r2, r2, #14
 8009b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b9c:	f003 021f 	and.w	r2, r3, #31
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8009baa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d004      	beq.n	8009bd4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
}
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009bf2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009c04:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c0a:	f003 021f 	and.w	r2, r3, #31
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	2101      	movs	r1, #1
 8009c14:	fa01 f202 	lsl.w	r2, r1, r2
 8009c18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	2b10      	cmp	r3, #16
 8009c28:	d108      	bne.n	8009c3c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009c3a:	e007      	b.n	8009c4c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	60da      	str	r2, [r3, #12]
}
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	461a      	mov	r2, r3
 8009c66:	4b16      	ldr	r3, [pc, #88]	; (8009cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d802      	bhi.n	8009c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009c6c:	4b15      	ldr	r3, [pc, #84]	; (8009cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	e001      	b.n	8009c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009c72:	4b15      	ldr	r3, [pc, #84]	; (8009cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009c74:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	3b08      	subs	r3, #8
 8009c82:	4a12      	ldr	r2, [pc, #72]	; (8009ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009c84:	fba2 2303 	umull	r2, r3, r2, r3
 8009c88:	091b      	lsrs	r3, r3, #4
 8009c8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c90:	089b      	lsrs	r3, r3, #2
 8009c92:	009a      	lsls	r2, r3, #2
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	4413      	add	r3, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a0b      	ldr	r2, [pc, #44]	; (8009cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 031f 	and.w	r3, r3, #31
 8009caa:	2201      	movs	r2, #1
 8009cac:	409a      	lsls	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009cb2:	bf00      	nop
 8009cb4:	371c      	adds	r7, #28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	40020407 	.word	0x40020407
 8009cc4:	40020800 	.word	0x40020800
 8009cc8:	40020820 	.word	0x40020820
 8009ccc:	cccccccd 	.word	0xcccccccd
 8009cd0:	40020880 	.word	0x40020880

08009cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009ce8:	4413      	add	r3, r2
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009cf6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	f003 031f 	and.w	r3, r3, #31
 8009d00:	2201      	movs	r2, #1
 8009d02:	409a      	lsls	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009d08:	bf00      	nop
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	1000823f 	.word	0x1000823f
 8009d18:	40020940 	.word	0x40020940

08009d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009d2a:	e15a      	b.n	8009fe2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	2101      	movs	r1, #1
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	fa01 f303 	lsl.w	r3, r1, r3
 8009d38:	4013      	ands	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	f000 814c 	beq.w	8009fdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f003 0303 	and.w	r3, r3, #3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d005      	beq.n	8009d5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d130      	bne.n	8009dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	2203      	movs	r2, #3
 8009d68:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	4013      	ands	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	4313      	orrs	r3, r2
 8009d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009d92:	2201      	movs	r2, #1
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	091b      	lsrs	r3, r3, #4
 8009da8:	f003 0201 	and.w	r2, r3, #1
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	fa02 f303 	lsl.w	r3, r2, r3
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	f003 0303 	and.w	r3, r3, #3
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d017      	beq.n	8009dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	005b      	lsls	r3, r3, #1
 8009dd4:	2203      	movs	r2, #3
 8009dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dda:	43db      	mvns	r3, r3
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4013      	ands	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	689a      	ldr	r2, [r3, #8]
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	fa02 f303 	lsl.w	r3, r2, r3
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	693a      	ldr	r2, [r7, #16]
 8009df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f003 0303 	and.w	r3, r3, #3
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d123      	bne.n	8009e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	08da      	lsrs	r2, r3, #3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3208      	adds	r2, #8
 8009e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f003 0307 	and.w	r3, r3, #7
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	220f      	movs	r2, #15
 8009e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e22:	43db      	mvns	r3, r3
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	4013      	ands	r3, r2
 8009e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f003 0307 	and.w	r3, r3, #7
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	08da      	lsrs	r2, r3, #3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3208      	adds	r2, #8
 8009e48:	6939      	ldr	r1, [r7, #16]
 8009e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	2203      	movs	r2, #3
 8009e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5e:	43db      	mvns	r3, r3
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	4013      	ands	r3, r2
 8009e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	f003 0203 	and.w	r2, r3, #3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	005b      	lsls	r3, r3, #1
 8009e72:	fa02 f303 	lsl.w	r3, r2, r3
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	4313      	orrs	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 80a6 	beq.w	8009fdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e90:	4b5b      	ldr	r3, [pc, #364]	; (800a000 <HAL_GPIO_Init+0x2e4>)
 8009e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e94:	4a5a      	ldr	r2, [pc, #360]	; (800a000 <HAL_GPIO_Init+0x2e4>)
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8009e9c:	4b58      	ldr	r3, [pc, #352]	; (800a000 <HAL_GPIO_Init+0x2e4>)
 8009e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea0:	f003 0301 	and.w	r3, r3, #1
 8009ea4:	60bb      	str	r3, [r7, #8]
 8009ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009ea8:	4a56      	ldr	r2, [pc, #344]	; (800a004 <HAL_GPIO_Init+0x2e8>)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	089b      	lsrs	r3, r3, #2
 8009eae:	3302      	adds	r3, #2
 8009eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f003 0303 	and.w	r3, r3, #3
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	220f      	movs	r2, #15
 8009ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	4013      	ands	r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009ed2:	d01f      	beq.n	8009f14 <HAL_GPIO_Init+0x1f8>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a4c      	ldr	r2, [pc, #304]	; (800a008 <HAL_GPIO_Init+0x2ec>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d019      	beq.n	8009f10 <HAL_GPIO_Init+0x1f4>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a4b      	ldr	r2, [pc, #300]	; (800a00c <HAL_GPIO_Init+0x2f0>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d013      	beq.n	8009f0c <HAL_GPIO_Init+0x1f0>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a4a      	ldr	r2, [pc, #296]	; (800a010 <HAL_GPIO_Init+0x2f4>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d00d      	beq.n	8009f08 <HAL_GPIO_Init+0x1ec>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a49      	ldr	r2, [pc, #292]	; (800a014 <HAL_GPIO_Init+0x2f8>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d007      	beq.n	8009f04 <HAL_GPIO_Init+0x1e8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a48      	ldr	r2, [pc, #288]	; (800a018 <HAL_GPIO_Init+0x2fc>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d101      	bne.n	8009f00 <HAL_GPIO_Init+0x1e4>
 8009efc:	2305      	movs	r3, #5
 8009efe:	e00a      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f00:	2306      	movs	r3, #6
 8009f02:	e008      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f04:	2304      	movs	r3, #4
 8009f06:	e006      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e004      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e002      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f10:	2301      	movs	r3, #1
 8009f12:	e000      	b.n	8009f16 <HAL_GPIO_Init+0x1fa>
 8009f14:	2300      	movs	r3, #0
 8009f16:	697a      	ldr	r2, [r7, #20]
 8009f18:	f002 0203 	and.w	r2, r2, #3
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	4093      	lsls	r3, r2
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f26:	4937      	ldr	r1, [pc, #220]	; (800a004 <HAL_GPIO_Init+0x2e8>)
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	089b      	lsrs	r3, r3, #2
 8009f2c:	3302      	adds	r3, #2
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009f34:	4b39      	ldr	r3, [pc, #228]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	4013      	ands	r3, r2
 8009f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009f58:	4a30      	ldr	r2, [pc, #192]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009f5e:	4b2f      	ldr	r3, [pc, #188]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	43db      	mvns	r3, r3
 8009f68:	693a      	ldr	r2, [r7, #16]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d003      	beq.n	8009f82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009f82:	4a26      	ldr	r2, [pc, #152]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009f88:	4b24      	ldr	r3, [pc, #144]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	43db      	mvns	r3, r3
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	4013      	ands	r3, r2
 8009f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d003      	beq.n	8009fac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009fac:	4a1b      	ldr	r2, [pc, #108]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009fb2:	4b1a      	ldr	r3, [pc, #104]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	43db      	mvns	r3, r3
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009fd6:	4a11      	ldr	r2, [pc, #68]	; (800a01c <HAL_GPIO_Init+0x300>)
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f47f ae9d 	bne.w	8009d2c <HAL_GPIO_Init+0x10>
  }
}
 8009ff2:	bf00      	nop
 8009ff4:	bf00      	nop
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	40021000 	.word	0x40021000
 800a004:	40010000 	.word	0x40010000
 800a008:	48000400 	.word	0x48000400
 800a00c:	48000800 	.word	0x48000800
 800a010:	48000c00 	.word	0x48000c00
 800a014:	48001000 	.word	0x48001000
 800a018:	48001400 	.word	0x48001400
 800a01c:	40010400 	.word	0x40010400

0800a020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	807b      	strh	r3, [r7, #2]
 800a02c:	4613      	mov	r3, r2
 800a02e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a030:	787b      	ldrb	r3, [r7, #1]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a036:	887a      	ldrh	r2, [r7, #2]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a03c:	e002      	b.n	800a044 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a03e:	887a      	ldrh	r2, [r7, #2]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	460b      	mov	r3, r1
 800a05a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	695b      	ldr	r3, [r3, #20]
 800a060:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a062:	887a      	ldrh	r2, [r7, #2]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4013      	ands	r3, r2
 800a068:	041a      	lsls	r2, r3, #16
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	43d9      	mvns	r1, r3
 800a06e:	887b      	ldrh	r3, [r7, #2]
 800a070:	400b      	ands	r3, r1
 800a072:	431a      	orrs	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	619a      	str	r2, [r3, #24]
}
 800a078:	bf00      	nop
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a08e:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	4013      	ands	r3, r2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a09a:	4a05      	ldr	r2, [pc, #20]	; (800a0b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f806 	bl	800a0b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	40010400 	.word	0x40010400

0800a0b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e081      	b.n	800a1e0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a0e2:	b2db      	uxtb	r3, r3
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d106      	bne.n	800a0f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f7fc fb97 	bl	8006824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2224      	movs	r2, #36	; 0x24
 800a0fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0201 	bic.w	r2, r2, #1
 800a10c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a11a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a12a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b01      	cmp	r3, #1
 800a132:	d107      	bne.n	800a144 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a140:	609a      	str	r2, [r3, #8]
 800a142:	e006      	b.n	800a152 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800a150:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d104      	bne.n	800a164 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a162:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a176:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a186:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	691a      	ldr	r2, [r3, #16]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69d9      	ldr	r1, [r3, #28]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6a1a      	ldr	r2, [r3, #32]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f042 0201 	orr.w	r2, r2, #1
 800a1c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af02      	add	r7, sp, #8
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	4608      	mov	r0, r1
 800a1f2:	4611      	mov	r1, r2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	817b      	strh	r3, [r7, #10]
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	813b      	strh	r3, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	2b20      	cmp	r3, #32
 800a20c:	f040 80f9 	bne.w	800a402 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a210:	6a3b      	ldr	r3, [r7, #32]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_I2C_Mem_Write+0x34>
 800a216:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d105      	bne.n	800a228 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a222:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a224:	2301      	movs	r3, #1
 800a226:	e0ed      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <HAL_I2C_Mem_Write+0x4e>
 800a232:	2302      	movs	r3, #2
 800a234:	e0e6      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a23e:	f7fd ff21 	bl	8008084 <HAL_GetTick>
 800a242:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	9300      	str	r3, [sp, #0]
 800a248:	2319      	movs	r3, #25
 800a24a:	2201      	movs	r2, #1
 800a24c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 fac3 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0d1      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2221      	movs	r2, #33	; 0x21
 800a264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2240      	movs	r2, #64	; 0x40
 800a26c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6a3a      	ldr	r2, [r7, #32]
 800a27a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a288:	88f8      	ldrh	r0, [r7, #6]
 800a28a:	893a      	ldrh	r2, [r7, #8]
 800a28c:	8979      	ldrh	r1, [r7, #10]
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	4603      	mov	r3, r0
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 f9d3 	bl	800a644 <I2C_RequestMemoryWrite>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e0a9      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	2bff      	cmp	r3, #255	; 0xff
 800a2b8:	d90e      	bls.n	800a2d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	22ff      	movs	r2, #255	; 0xff
 800a2be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	8979      	ldrh	r1, [r7, #10]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fc2b 	bl	800ab2c <I2C_TransferConfig>
 800a2d6:	e00f      	b.n	800a2f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e6:	b2da      	uxtb	r2, r3
 800a2e8:	8979      	ldrh	r1, [r7, #10]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f000 fc1a 	bl	800ab2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 faad 	bl	800a85c <I2C_WaitOnTXISFlagUntilTimeout>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	e07b      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a310:	781a      	ldrb	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a326:	b29b      	uxth	r3, r3
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a334:	3b01      	subs	r3, #1
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a340:	b29b      	uxth	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d034      	beq.n	800a3b0 <HAL_I2C_Mem_Write+0x1c8>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d130      	bne.n	800a3b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	2200      	movs	r2, #0
 800a356:	2180      	movs	r1, #128	; 0x80
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fa3f 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d001      	beq.n	800a368 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e04d      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	2bff      	cmp	r3, #255	; 0xff
 800a370:	d90e      	bls.n	800a390 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	22ff      	movs	r2, #255	; 0xff
 800a376:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	8979      	ldrh	r1, [r7, #10]
 800a380:	2300      	movs	r3, #0
 800a382:	9300      	str	r3, [sp, #0]
 800a384:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fbcf 	bl	800ab2c <I2C_TransferConfig>
 800a38e:	e00f      	b.n	800a3b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a394:	b29a      	uxth	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	8979      	ldrh	r1, [r7, #10]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fbbe 	bl	800ab2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d19e      	bne.n	800a2f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fa8c 	bl	800a8dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e01a      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6859      	ldr	r1, [r3, #4]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <HAL_I2C_Mem_Write+0x224>)
 800a3e2:	400b      	ands	r3, r1
 800a3e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2220      	movs	r2, #32
 800a3ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
 800a400:	e000      	b.n	800a404 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a402:	2302      	movs	r3, #2
  }
}
 800a404:	4618      	mov	r0, r3
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	fe00e800 	.word	0xfe00e800

0800a410 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af02      	add	r7, sp, #8
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	4608      	mov	r0, r1
 800a41a:	4611      	mov	r1, r2
 800a41c:	461a      	mov	r2, r3
 800a41e:	4603      	mov	r3, r0
 800a420:	817b      	strh	r3, [r7, #10]
 800a422:	460b      	mov	r3, r1
 800a424:	813b      	strh	r3, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a430:	b2db      	uxtb	r3, r3
 800a432:	2b20      	cmp	r3, #32
 800a434:	f040 80fd 	bne.w	800a632 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a438:	6a3b      	ldr	r3, [r7, #32]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d002      	beq.n	800a444 <HAL_I2C_Mem_Read+0x34>
 800a43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a440:	2b00      	cmp	r3, #0
 800a442:	d105      	bne.n	800a450 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a44a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	e0f1      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a456:	2b01      	cmp	r3, #1
 800a458:	d101      	bne.n	800a45e <HAL_I2C_Mem_Read+0x4e>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e0ea      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a466:	f7fd fe0d 	bl	8008084 <HAL_GetTick>
 800a46a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	2319      	movs	r3, #25
 800a472:	2201      	movs	r2, #1
 800a474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f9af 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a47e:	4603      	mov	r3, r0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d001      	beq.n	800a488 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0d5      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2222      	movs	r2, #34	; 0x22
 800a48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2240      	movs	r2, #64	; 0x40
 800a494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6a3a      	ldr	r2, [r7, #32]
 800a4a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4b0:	88f8      	ldrh	r0, [r7, #6]
 800a4b2:	893a      	ldrh	r2, [r7, #8]
 800a4b4:	8979      	ldrh	r1, [r7, #10]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4603      	mov	r3, r0
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f913 	bl	800a6ec <I2C_RequestMemoryRead>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e0ad      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	2bff      	cmp	r3, #255	; 0xff
 800a4e0:	d90e      	bls.n	800a500 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	22ff      	movs	r2, #255	; 0xff
 800a4e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	8979      	ldrh	r1, [r7, #10]
 800a4f0:	4b52      	ldr	r3, [pc, #328]	; (800a63c <HAL_I2C_Mem_Read+0x22c>)
 800a4f2:	9300      	str	r3, [sp, #0]
 800a4f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 fb17 	bl	800ab2c <I2C_TransferConfig>
 800a4fe:	e00f      	b.n	800a520 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a504:	b29a      	uxth	r2, r3
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a50e:	b2da      	uxtb	r2, r3
 800a510:	8979      	ldrh	r1, [r7, #10]
 800a512:	4b4a      	ldr	r3, [pc, #296]	; (800a63c <HAL_I2C_Mem_Read+0x22c>)
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fb06 	bl	800ab2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a520:	697b      	ldr	r3, [r7, #20]
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a526:	2200      	movs	r2, #0
 800a528:	2104      	movs	r1, #4
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 f956 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e07c      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	b2d2      	uxtb	r2, r2
 800a546:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	1c5a      	adds	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a556:	3b01      	subs	r3, #1
 800a558:	b29a      	uxth	r2, r3
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a570:	b29b      	uxth	r3, r3
 800a572:	2b00      	cmp	r3, #0
 800a574:	d034      	beq.n	800a5e0 <HAL_I2C_Mem_Read+0x1d0>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d130      	bne.n	800a5e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a584:	2200      	movs	r2, #0
 800a586:	2180      	movs	r1, #128	; 0x80
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 f927 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e04d      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	2bff      	cmp	r3, #255	; 0xff
 800a5a0:	d90e      	bls.n	800a5c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	22ff      	movs	r2, #255	; 0xff
 800a5a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	8979      	ldrh	r1, [r7, #10]
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f000 fab7 	bl	800ab2c <I2C_TransferConfig>
 800a5be:	e00f      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c4:	b29a      	uxth	r2, r3
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	8979      	ldrh	r1, [r7, #10]
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 faa6 	bl	800ab2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d19a      	bne.n	800a520 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5ea:	697a      	ldr	r2, [r7, #20]
 800a5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 f974 	bl	800a8dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e01a      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	2220      	movs	r2, #32
 800a604:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6859      	ldr	r1, [r3, #4]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4b0b      	ldr	r3, [pc, #44]	; (800a640 <HAL_I2C_Mem_Read+0x230>)
 800a612:	400b      	ands	r3, r1
 800a614:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2220      	movs	r2, #32
 800a61a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	e000      	b.n	800a634 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a632:	2302      	movs	r3, #2
  }
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	80002400 	.word	0x80002400
 800a640:	fe00e800 	.word	0xfe00e800

0800a644 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af02      	add	r7, sp, #8
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	4608      	mov	r0, r1
 800a64e:	4611      	mov	r1, r2
 800a650:	461a      	mov	r2, r3
 800a652:	4603      	mov	r3, r0
 800a654:	817b      	strh	r3, [r7, #10]
 800a656:	460b      	mov	r3, r1
 800a658:	813b      	strh	r3, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a65e:	88fb      	ldrh	r3, [r7, #6]
 800a660:	b2da      	uxtb	r2, r3
 800a662:	8979      	ldrh	r1, [r7, #10]
 800a664:	4b20      	ldr	r3, [pc, #128]	; (800a6e8 <I2C_RequestMemoryWrite+0xa4>)
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 fa5d 	bl	800ab2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a672:	69fa      	ldr	r2, [r7, #28]
 800a674:	69b9      	ldr	r1, [r7, #24]
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 f8f0 	bl	800a85c <I2C_WaitOnTXISFlagUntilTimeout>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e02c      	b.n	800a6e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d105      	bne.n	800a698 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a68c:	893b      	ldrh	r3, [r7, #8]
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	629a      	str	r2, [r3, #40]	; 0x28
 800a696:	e015      	b.n	800a6c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a698:	893b      	ldrh	r3, [r7, #8]
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6a6:	69fa      	ldr	r2, [r7, #28]
 800a6a8:	69b9      	ldr	r1, [r7, #24]
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f000 f8d6 	bl	800a85c <I2C_WaitOnTXISFlagUntilTimeout>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e012      	b.n	800a6e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a6ba:	893b      	ldrh	r3, [r7, #8]
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	2180      	movs	r1, #128	; 0x80
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f884 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	80002000 	.word	0x80002000

0800a6ec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	817b      	strh	r3, [r7, #10]
 800a6fe:	460b      	mov	r3, r1
 800a700:	813b      	strh	r3, [r7, #8]
 800a702:	4613      	mov	r3, r2
 800a704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	8979      	ldrh	r1, [r7, #10]
 800a70c:	4b20      	ldr	r3, [pc, #128]	; (800a790 <I2C_RequestMemoryRead+0xa4>)
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	2300      	movs	r3, #0
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f000 fa0a 	bl	800ab2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	69b9      	ldr	r1, [r7, #24]
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f000 f89d 	bl	800a85c <I2C_WaitOnTXISFlagUntilTimeout>
 800a722:	4603      	mov	r3, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d001      	beq.n	800a72c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	e02c      	b.n	800a786 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a72c:	88fb      	ldrh	r3, [r7, #6]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d105      	bne.n	800a73e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a732:	893b      	ldrh	r3, [r7, #8]
 800a734:	b2da      	uxtb	r2, r3
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	629a      	str	r2, [r3, #40]	; 0x28
 800a73c:	e015      	b.n	800a76a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a73e:	893b      	ldrh	r3, [r7, #8]
 800a740:	0a1b      	lsrs	r3, r3, #8
 800a742:	b29b      	uxth	r3, r3
 800a744:	b2da      	uxtb	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	69b9      	ldr	r1, [r7, #24]
 800a750:	68f8      	ldr	r0, [r7, #12]
 800a752:	f000 f883 	bl	800a85c <I2C_WaitOnTXISFlagUntilTimeout>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e012      	b.n	800a786 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a760:	893b      	ldrh	r3, [r7, #8]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2200      	movs	r2, #0
 800a772:	2140      	movs	r1, #64	; 0x40
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f831 	bl	800a7dc <I2C_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a780:	2301      	movs	r3, #1
 800a782:	e000      	b.n	800a786 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	80002000 	.word	0x80002000

0800a794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699b      	ldr	r3, [r3, #24]
 800a7a2:	f003 0302 	and.w	r3, r3, #2
 800a7a6:	2b02      	cmp	r3, #2
 800a7a8:	d103      	bne.n	800a7b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	699b      	ldr	r3, [r3, #24]
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d007      	beq.n	800a7d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	699a      	ldr	r2, [r3, #24]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f042 0201 	orr.w	r2, r2, #1
 800a7ce:	619a      	str	r2, [r3, #24]
  }
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7ec:	e022      	b.n	800a834 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d01e      	beq.n	800a834 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7f6:	f7fd fc45 	bl	8008084 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	683a      	ldr	r2, [r7, #0]
 800a802:	429a      	cmp	r2, r3
 800a804:	d302      	bcc.n	800a80c <I2C_WaitOnFlagUntilTimeout+0x30>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d113      	bne.n	800a834 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a810:	f043 0220 	orr.w	r2, r3, #32
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e00f      	b.n	800a854 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	699a      	ldr	r2, [r3, #24]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	4013      	ands	r3, r2
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	429a      	cmp	r2, r3
 800a842:	bf0c      	ite	eq
 800a844:	2301      	moveq	r3, #1
 800a846:	2300      	movne	r3, #0
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	461a      	mov	r2, r3
 800a84c:	79fb      	ldrb	r3, [r7, #7]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d0cd      	beq.n	800a7ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a868:	e02c      	b.n	800a8c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	68b9      	ldr	r1, [r7, #8]
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f000 f870 	bl	800a954 <I2C_IsErrorOccurred>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e02a      	b.n	800a8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d01e      	beq.n	800a8c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a886:	f7fd fbfd 	bl	8008084 <HAL_GetTick>
 800a88a:	4602      	mov	r2, r0
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	429a      	cmp	r2, r3
 800a894:	d302      	bcc.n	800a89c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d113      	bne.n	800a8c4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a0:	f043 0220 	orr.w	r2, r3, #32
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e007      	b.n	800a8d4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	f003 0302 	and.w	r3, r3, #2
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d1cb      	bne.n	800a86a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8e8:	e028      	b.n	800a93c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	68b9      	ldr	r1, [r7, #8]
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 f830 	bl	800a954 <I2C_IsErrorOccurred>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d001      	beq.n	800a8fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e026      	b.n	800a94c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8fe:	f7fd fbc1 	bl	8008084 <HAL_GetTick>
 800a902:	4602      	mov	r2, r0
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d302      	bcc.n	800a914 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d113      	bne.n	800a93c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a918:	f043 0220 	orr.w	r2, r3, #32
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2220      	movs	r2, #32
 800a924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a938:	2301      	movs	r3, #1
 800a93a:	e007      	b.n	800a94c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	f003 0320 	and.w	r3, r3, #32
 800a946:	2b20      	cmp	r3, #32
 800a948:	d1cf      	bne.n	800a8ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b08a      	sub	sp, #40	; 0x28
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	f003 0310 	and.w	r3, r3, #16
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d075      	beq.n	800aa6c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2210      	movs	r2, #16
 800a986:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a988:	e056      	b.n	800aa38 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a990:	d052      	beq.n	800aa38 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a992:	f7fd fb77 	bl	8008084 <HAL_GetTick>
 800a996:	4602      	mov	r2, r0
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	68ba      	ldr	r2, [r7, #8]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d302      	bcc.n	800a9a8 <I2C_IsErrorOccurred+0x54>
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d147      	bne.n	800aa38 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a9ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9ca:	d12e      	bne.n	800aa2a <I2C_IsErrorOccurred+0xd6>
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9d2:	d02a      	beq.n	800aa2a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a9d4:	7cfb      	ldrb	r3, [r7, #19]
 800a9d6:	2b20      	cmp	r3, #32
 800a9d8:	d027      	beq.n	800aa2a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9e8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a9ea:	f7fd fb4b 	bl	8008084 <HAL_GetTick>
 800a9ee:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9f0:	e01b      	b.n	800aa2a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a9f2:	f7fd fb47 	bl	8008084 <HAL_GetTick>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	1ad3      	subs	r3, r2, r3
 800a9fc:	2b19      	cmp	r3, #25
 800a9fe:	d914      	bls.n	800aa2a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa04:	f043 0220 	orr.w	r2, r3, #32
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b20      	cmp	r3, #32
 800aa36:	d1dc      	bne.n	800a9f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	d003      	beq.n	800aa4e <I2C_IsErrorOccurred+0xfa>
 800aa46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d09d      	beq.n	800a98a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800aa4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d103      	bne.n	800aa5e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800aa5e:	6a3b      	ldr	r3, [r7, #32]
 800aa60:	f043 0304 	orr.w	r3, r3, #4
 800aa64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00b      	beq.n	800aa96 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00b      	beq.n	800aab8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	f043 0308 	orr.w	r3, r3, #8
 800aaa6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800aab8:	69bb      	ldr	r3, [r7, #24]
 800aaba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00b      	beq.n	800aada <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	f043 0302 	orr.w	r3, r3, #2
 800aac8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aad2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800aada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d01c      	beq.n	800ab1c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aae2:	68f8      	ldr	r0, [r7, #12]
 800aae4:	f7ff fe56 	bl	800a794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	6859      	ldr	r1, [r3, #4]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b0d      	ldr	r3, [pc, #52]	; (800ab28 <I2C_IsErrorOccurred+0x1d4>)
 800aaf4:	400b      	ands	r3, r1
 800aaf6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aafc:	6a3b      	ldr	r3, [r7, #32]
 800aafe:	431a      	orrs	r2, r3
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ab1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3728      	adds	r7, #40	; 0x28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	fe00e800 	.word	0xfe00e800

0800ab2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b087      	sub	sp, #28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	460b      	mov	r3, r1
 800ab38:	817b      	strh	r3, [r7, #10]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab3e:	897b      	ldrh	r3, [r7, #10]
 800ab40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab44:	7a7b      	ldrb	r3, [r7, #9]
 800ab46:	041b      	lsls	r3, r3, #16
 800ab48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab4c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab5a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	685a      	ldr	r2, [r3, #4]
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	0d5b      	lsrs	r3, r3, #21
 800ab66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ab6a:	4b08      	ldr	r3, [pc, #32]	; (800ab8c <I2C_TransferConfig+0x60>)
 800ab6c:	430b      	orrs	r3, r1
 800ab6e:	43db      	mvns	r3, r3
 800ab70:	ea02 0103 	and.w	r1, r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	697a      	ldr	r2, [r7, #20]
 800ab7a:	430a      	orrs	r2, r1
 800ab7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ab7e:	bf00      	nop
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr
 800ab8a:	bf00      	nop
 800ab8c:	03ff63ff 	.word	0x03ff63ff

0800ab90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	d138      	bne.n	800ac18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e032      	b.n	800ac1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2224      	movs	r2, #36	; 0x24
 800abc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800abe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	6819      	ldr	r1, [r3, #0]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	430a      	orrs	r2, r1
 800abf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0201 	orr.w	r2, r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2220      	movs	r2, #32
 800ac08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	e000      	b.n	800ac1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac18:	2302      	movs	r3, #2
  }
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	2b20      	cmp	r3, #32
 800ac3a:	d139      	bne.n	800acb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d101      	bne.n	800ac4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ac46:	2302      	movs	r3, #2
 800ac48:	e033      	b.n	800acb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2224      	movs	r2, #36	; 0x24
 800ac56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0201 	bic.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ac78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	021b      	lsls	r3, r3, #8
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f042 0201 	orr.w	r2, r2, #1
 800ac9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2220      	movs	r2, #32
 800aca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	e000      	b.n	800acb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800acb0:	2302      	movs	r3, #2
  }
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3714      	adds	r7, #20
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr
	...

0800acc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d141      	bne.n	800ad52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800acce:	4b4b      	ldr	r3, [pc, #300]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800acd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acda:	d131      	bne.n	800ad40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800acdc:	4b47      	ldr	r3, [pc, #284]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ace2:	4a46      	ldr	r2, [pc, #280]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ace4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ace8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800acec:	4b43      	ldr	r3, [pc, #268]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800acf4:	4a41      	ldr	r2, [pc, #260]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800acf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800acfc:	4b40      	ldr	r3, [pc, #256]	; (800ae00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2232      	movs	r2, #50	; 0x32
 800ad02:	fb02 f303 	mul.w	r3, r2, r3
 800ad06:	4a3f      	ldr	r2, [pc, #252]	; (800ae04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ad08:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0c:	0c9b      	lsrs	r3, r3, #18
 800ad0e:	3301      	adds	r3, #1
 800ad10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad12:	e002      	b.n	800ad1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad1a:	4b38      	ldr	r3, [pc, #224]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad1c:	695b      	ldr	r3, [r3, #20]
 800ad1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad26:	d102      	bne.n	800ad2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1f2      	bne.n	800ad14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ad2e:	4b33      	ldr	r3, [pc, #204]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad3a:	d158      	bne.n	800adee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	e057      	b.n	800adf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ad40:	4b2e      	ldr	r3, [pc, #184]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad46:	4a2d      	ldr	r2, [pc, #180]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ad50:	e04d      	b.n	800adee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad58:	d141      	bne.n	800adde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ad5a:	4b28      	ldr	r3, [pc, #160]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad66:	d131      	bne.n	800adcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ad68:	4b24      	ldr	r3, [pc, #144]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad6e:	4a23      	ldr	r2, [pc, #140]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ad78:	4b20      	ldr	r3, [pc, #128]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ad80:	4a1e      	ldr	r2, [pc, #120]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ad82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ad88:	4b1d      	ldr	r3, [pc, #116]	; (800ae00 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2232      	movs	r2, #50	; 0x32
 800ad8e:	fb02 f303 	mul.w	r3, r2, r3
 800ad92:	4a1c      	ldr	r2, [pc, #112]	; (800ae04 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ad94:	fba2 2303 	umull	r2, r3, r2, r3
 800ad98:	0c9b      	lsrs	r3, r3, #18
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ad9e:	e002      	b.n	800ada6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	3b01      	subs	r3, #1
 800ada4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ada8:	695b      	ldr	r3, [r3, #20]
 800adaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adb2:	d102      	bne.n	800adba <HAL_PWREx_ControlVoltageScaling+0xfa>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1f2      	bne.n	800ada0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800adba:	4b10      	ldr	r3, [pc, #64]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adbc:	695b      	ldr	r3, [r3, #20]
 800adbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adc6:	d112      	bne.n	800adee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e011      	b.n	800adf0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800adcc:	4b0b      	ldr	r3, [pc, #44]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800adce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800add2:	4a0a      	ldr	r2, [pc, #40]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800add4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800add8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800addc:	e007      	b.n	800adee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800adde:	4b07      	ldr	r3, [pc, #28]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ade6:	4a05      	ldr	r2, [pc, #20]	; (800adfc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ade8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	40007000 	.word	0x40007000
 800ae00:	20000004 	.word	0x20000004
 800ae04:	431bde83 	.word	0x431bde83

0800ae08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e306      	b.n	800b428 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d075      	beq.n	800af12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae26:	4b97      	ldr	r3, [pc, #604]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	f003 030c 	and.w	r3, r3, #12
 800ae2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ae30:	4b94      	ldr	r3, [pc, #592]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f003 0303 	and.w	r3, r3, #3
 800ae38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b0c      	cmp	r3, #12
 800ae3e:	d102      	bne.n	800ae46 <HAL_RCC_OscConfig+0x3e>
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d002      	beq.n	800ae4c <HAL_RCC_OscConfig+0x44>
 800ae46:	69bb      	ldr	r3, [r7, #24]
 800ae48:	2b08      	cmp	r3, #8
 800ae4a:	d10b      	bne.n	800ae64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae4c:	4b8d      	ldr	r3, [pc, #564]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d05b      	beq.n	800af10 <HAL_RCC_OscConfig+0x108>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d157      	bne.n	800af10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e2e1      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6c:	d106      	bne.n	800ae7c <HAL_RCC_OscConfig+0x74>
 800ae6e:	4b85      	ldr	r3, [pc, #532]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a84      	ldr	r2, [pc, #528]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	e01d      	b.n	800aeb8 <HAL_RCC_OscConfig+0xb0>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae84:	d10c      	bne.n	800aea0 <HAL_RCC_OscConfig+0x98>
 800ae86:	4b7f      	ldr	r3, [pc, #508]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a7e      	ldr	r2, [pc, #504]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	4b7c      	ldr	r3, [pc, #496]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a7b      	ldr	r2, [pc, #492]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800ae98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae9c:	6013      	str	r3, [r2, #0]
 800ae9e:	e00b      	b.n	800aeb8 <HAL_RCC_OscConfig+0xb0>
 800aea0:	4b78      	ldr	r3, [pc, #480]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a77      	ldr	r2, [pc, #476]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800aea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	4b75      	ldr	r3, [pc, #468]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a74      	ldr	r2, [pc, #464]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800aeb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aeb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d013      	beq.n	800aee8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aec0:	f7fd f8e0 	bl	8008084 <HAL_GetTick>
 800aec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aec6:	e008      	b.n	800aeda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aec8:	f7fd f8dc 	bl	8008084 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	2b64      	cmp	r3, #100	; 0x64
 800aed4:	d901      	bls.n	800aeda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aed6:	2303      	movs	r3, #3
 800aed8:	e2a6      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aeda:	4b6a      	ldr	r3, [pc, #424]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0f0      	beq.n	800aec8 <HAL_RCC_OscConfig+0xc0>
 800aee6:	e014      	b.n	800af12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aee8:	f7fd f8cc 	bl	8008084 <HAL_GetTick>
 800aeec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800aeee:	e008      	b.n	800af02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aef0:	f7fd f8c8 	bl	8008084 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	2b64      	cmp	r3, #100	; 0x64
 800aefc:	d901      	bls.n	800af02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aefe:	2303      	movs	r3, #3
 800af00:	e292      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800af02:	4b60      	ldr	r3, [pc, #384]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1f0      	bne.n	800aef0 <HAL_RCC_OscConfig+0xe8>
 800af0e:	e000      	b.n	800af12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d075      	beq.n	800b00a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af1e:	4b59      	ldr	r3, [pc, #356]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af20:	689b      	ldr	r3, [r3, #8]
 800af22:	f003 030c 	and.w	r3, r3, #12
 800af26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af28:	4b56      	ldr	r3, [pc, #344]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	2b0c      	cmp	r3, #12
 800af36:	d102      	bne.n	800af3e <HAL_RCC_OscConfig+0x136>
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d002      	beq.n	800af44 <HAL_RCC_OscConfig+0x13c>
 800af3e:	69bb      	ldr	r3, [r7, #24]
 800af40:	2b04      	cmp	r3, #4
 800af42:	d11f      	bne.n	800af84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af44:	4b4f      	ldr	r3, [pc, #316]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d005      	beq.n	800af5c <HAL_RCC_OscConfig+0x154>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800af58:	2301      	movs	r3, #1
 800af5a:	e265      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af5c:	4b49      	ldr	r3, [pc, #292]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	061b      	lsls	r3, r3, #24
 800af6a:	4946      	ldr	r1, [pc, #280]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af6c:	4313      	orrs	r3, r2
 800af6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800af70:	4b45      	ldr	r3, [pc, #276]	; (800b088 <HAL_RCC_OscConfig+0x280>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4618      	mov	r0, r3
 800af76:	f7fc fc25 	bl	80077c4 <HAL_InitTick>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d043      	beq.n	800b008 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	e251      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d023      	beq.n	800afd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af8c:	4b3d      	ldr	r3, [pc, #244]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a3c      	ldr	r2, [pc, #240]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800af92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af98:	f7fd f874 	bl	8008084 <HAL_GetTick>
 800af9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800af9e:	e008      	b.n	800afb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afa0:	f7fd f870 	bl	8008084 <HAL_GetTick>
 800afa4:	4602      	mov	r2, r0
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d901      	bls.n	800afb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e23a      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800afb2:	4b34      	ldr	r3, [pc, #208]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0f0      	beq.n	800afa0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afbe:	4b31      	ldr	r3, [pc, #196]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	061b      	lsls	r3, r3, #24
 800afcc:	492d      	ldr	r1, [pc, #180]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800afce:	4313      	orrs	r3, r2
 800afd0:	604b      	str	r3, [r1, #4]
 800afd2:	e01a      	b.n	800b00a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afd4:	4b2b      	ldr	r3, [pc, #172]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a2a      	ldr	r2, [pc, #168]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800afda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe0:	f7fd f850 	bl	8008084 <HAL_GetTick>
 800afe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800afe6:	e008      	b.n	800affa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800afe8:	f7fd f84c 	bl	8008084 <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d901      	bls.n	800affa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e216      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800affa:	4b22      	ldr	r3, [pc, #136]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b002:	2b00      	cmp	r3, #0
 800b004:	d1f0      	bne.n	800afe8 <HAL_RCC_OscConfig+0x1e0>
 800b006:	e000      	b.n	800b00a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b008:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0308 	and.w	r3, r3, #8
 800b012:	2b00      	cmp	r3, #0
 800b014:	d041      	beq.n	800b09a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d01c      	beq.n	800b058 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b01e:	4b19      	ldr	r3, [pc, #100]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800b020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b024:	4a17      	ldr	r2, [pc, #92]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800b026:	f043 0301 	orr.w	r3, r3, #1
 800b02a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b02e:	f7fd f829 	bl	8008084 <HAL_GetTick>
 800b032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b034:	e008      	b.n	800b048 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b036:	f7fd f825 	bl	8008084 <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	1ad3      	subs	r3, r2, r3
 800b040:	2b02      	cmp	r3, #2
 800b042:	d901      	bls.n	800b048 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e1ef      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b048:	4b0e      	ldr	r3, [pc, #56]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800b04a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b04e:	f003 0302 	and.w	r3, r3, #2
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0ef      	beq.n	800b036 <HAL_RCC_OscConfig+0x22e>
 800b056:	e020      	b.n	800b09a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b058:	4b0a      	ldr	r3, [pc, #40]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800b05a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b05e:	4a09      	ldr	r2, [pc, #36]	; (800b084 <HAL_RCC_OscConfig+0x27c>)
 800b060:	f023 0301 	bic.w	r3, r3, #1
 800b064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b068:	f7fd f80c 	bl	8008084 <HAL_GetTick>
 800b06c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b06e:	e00d      	b.n	800b08c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b070:	f7fd f808 	bl	8008084 <HAL_GetTick>
 800b074:	4602      	mov	r2, r0
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	1ad3      	subs	r3, r2, r3
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d906      	bls.n	800b08c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b07e:	2303      	movs	r3, #3
 800b080:	e1d2      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
 800b082:	bf00      	nop
 800b084:	40021000 	.word	0x40021000
 800b088:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b08c:	4b8c      	ldr	r3, [pc, #560]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b08e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1ea      	bne.n	800b070 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0304 	and.w	r3, r3, #4
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80a6 	beq.w	800b1f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b0ac:	4b84      	ldr	r3, [pc, #528]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <HAL_RCC_OscConfig+0x2b4>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e000      	b.n	800b0be <HAL_RCC_OscConfig+0x2b6>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d00d      	beq.n	800b0de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0c2:	4b7f      	ldr	r3, [pc, #508]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b0c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c6:	4a7e      	ldr	r2, [pc, #504]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ce:	4b7c      	ldr	r3, [pc, #496]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b0d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0de:	4b79      	ldr	r3, [pc, #484]	; (800b2c4 <HAL_RCC_OscConfig+0x4bc>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d118      	bne.n	800b11c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b0ea:	4b76      	ldr	r3, [pc, #472]	; (800b2c4 <HAL_RCC_OscConfig+0x4bc>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a75      	ldr	r2, [pc, #468]	; (800b2c4 <HAL_RCC_OscConfig+0x4bc>)
 800b0f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0f6:	f7fc ffc5 	bl	8008084 <HAL_GetTick>
 800b0fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b0fc:	e008      	b.n	800b110 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0fe:	f7fc ffc1 	bl	8008084 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d901      	bls.n	800b110 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e18b      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b110:	4b6c      	ldr	r3, [pc, #432]	; (800b2c4 <HAL_RCC_OscConfig+0x4bc>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d0f0      	beq.n	800b0fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d108      	bne.n	800b136 <HAL_RCC_OscConfig+0x32e>
 800b124:	4b66      	ldr	r3, [pc, #408]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b12a:	4a65      	ldr	r2, [pc, #404]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b134:	e024      	b.n	800b180 <HAL_RCC_OscConfig+0x378>
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	2b05      	cmp	r3, #5
 800b13c:	d110      	bne.n	800b160 <HAL_RCC_OscConfig+0x358>
 800b13e:	4b60      	ldr	r3, [pc, #384]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b144:	4a5e      	ldr	r2, [pc, #376]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b146:	f043 0304 	orr.w	r3, r3, #4
 800b14a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b14e:	4b5c      	ldr	r3, [pc, #368]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b154:	4a5a      	ldr	r2, [pc, #360]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b156:	f043 0301 	orr.w	r3, r3, #1
 800b15a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b15e:	e00f      	b.n	800b180 <HAL_RCC_OscConfig+0x378>
 800b160:	4b57      	ldr	r3, [pc, #348]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b166:	4a56      	ldr	r2, [pc, #344]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b168:	f023 0301 	bic.w	r3, r3, #1
 800b16c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b170:	4b53      	ldr	r3, [pc, #332]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b176:	4a52      	ldr	r2, [pc, #328]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b178:	f023 0304 	bic.w	r3, r3, #4
 800b17c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d016      	beq.n	800b1b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b188:	f7fc ff7c 	bl	8008084 <HAL_GetTick>
 800b18c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b18e:	e00a      	b.n	800b1a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b190:	f7fc ff78 	bl	8008084 <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	693b      	ldr	r3, [r7, #16]
 800b198:	1ad3      	subs	r3, r2, r3
 800b19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d901      	bls.n	800b1a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e140      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b1a6:	4b46      	ldr	r3, [pc, #280]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0ed      	beq.n	800b190 <HAL_RCC_OscConfig+0x388>
 800b1b4:	e015      	b.n	800b1e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1b6:	f7fc ff65 	bl	8008084 <HAL_GetTick>
 800b1ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b1bc:	e00a      	b.n	800b1d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1be:	f7fc ff61 	bl	8008084 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d901      	bls.n	800b1d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e129      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b1d4:	4b3a      	ldr	r3, [pc, #232]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1da:	f003 0302 	and.w	r3, r3, #2
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1ed      	bne.n	800b1be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b1e2:	7ffb      	ldrb	r3, [r7, #31]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d105      	bne.n	800b1f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1e8:	4b35      	ldr	r3, [pc, #212]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ec:	4a34      	ldr	r2, [pc, #208]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b1ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d03c      	beq.n	800b27a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d01c      	beq.n	800b242 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b208:	4b2d      	ldr	r3, [pc, #180]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b20a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b20e:	4a2c      	ldr	r2, [pc, #176]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b210:	f043 0301 	orr.w	r3, r3, #1
 800b214:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b218:	f7fc ff34 	bl	8008084 <HAL_GetTick>
 800b21c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b21e:	e008      	b.n	800b232 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b220:	f7fc ff30 	bl	8008084 <HAL_GetTick>
 800b224:	4602      	mov	r2, r0
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d901      	bls.n	800b232 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e0fa      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b232:	4b23      	ldr	r3, [pc, #140]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b238:	f003 0302 	and.w	r3, r3, #2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d0ef      	beq.n	800b220 <HAL_RCC_OscConfig+0x418>
 800b240:	e01b      	b.n	800b27a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b242:	4b1f      	ldr	r3, [pc, #124]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b244:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b248:	4a1d      	ldr	r2, [pc, #116]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b24a:	f023 0301 	bic.w	r3, r3, #1
 800b24e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b252:	f7fc ff17 	bl	8008084 <HAL_GetTick>
 800b256:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b258:	e008      	b.n	800b26c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b25a:	f7fc ff13 	bl	8008084 <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e0dd      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b26c:	4b14      	ldr	r3, [pc, #80]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b26e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b272:	f003 0302 	and.w	r3, r3, #2
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1ef      	bne.n	800b25a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 80d1 	beq.w	800b426 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b284:	4b0e      	ldr	r3, [pc, #56]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f003 030c 	and.w	r3, r3, #12
 800b28c:	2b0c      	cmp	r3, #12
 800b28e:	f000 808b 	beq.w	800b3a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d15e      	bne.n	800b358 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b29a:	4b09      	ldr	r3, [pc, #36]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a08      	ldr	r2, [pc, #32]	; (800b2c0 <HAL_RCC_OscConfig+0x4b8>)
 800b2a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b2a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2a6:	f7fc feed 	bl	8008084 <HAL_GetTick>
 800b2aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b2ac:	e00c      	b.n	800b2c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2ae:	f7fc fee9 	bl	8008084 <HAL_GetTick>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	1ad3      	subs	r3, r2, r3
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d905      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e0b3      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
 800b2c0:	40021000 	.word	0x40021000
 800b2c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b2c8:	4b59      	ldr	r3, [pc, #356]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1ec      	bne.n	800b2ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2d4:	4b56      	ldr	r3, [pc, #344]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b2d6:	68da      	ldr	r2, [r3, #12]
 800b2d8:	4b56      	ldr	r3, [pc, #344]	; (800b434 <HAL_RCC_OscConfig+0x62c>)
 800b2da:	4013      	ands	r3, r2
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	6a11      	ldr	r1, [r2, #32]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2e4:	3a01      	subs	r2, #1
 800b2e6:	0112      	lsls	r2, r2, #4
 800b2e8:	4311      	orrs	r1, r2
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b2ee:	0212      	lsls	r2, r2, #8
 800b2f0:	4311      	orrs	r1, r2
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b2f6:	0852      	lsrs	r2, r2, #1
 800b2f8:	3a01      	subs	r2, #1
 800b2fa:	0552      	lsls	r2, r2, #21
 800b2fc:	4311      	orrs	r1, r2
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b302:	0852      	lsrs	r2, r2, #1
 800b304:	3a01      	subs	r2, #1
 800b306:	0652      	lsls	r2, r2, #25
 800b308:	4311      	orrs	r1, r2
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b30e:	06d2      	lsls	r2, r2, #27
 800b310:	430a      	orrs	r2, r1
 800b312:	4947      	ldr	r1, [pc, #284]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b314:	4313      	orrs	r3, r2
 800b316:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b318:	4b45      	ldr	r3, [pc, #276]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a44      	ldr	r2, [pc, #272]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b31e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b322:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b324:	4b42      	ldr	r3, [pc, #264]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	4a41      	ldr	r2, [pc, #260]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b32a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b32e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b330:	f7fc fea8 	bl	8008084 <HAL_GetTick>
 800b334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b336:	e008      	b.n	800b34a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b338:	f7fc fea4 	bl	8008084 <HAL_GetTick>
 800b33c:	4602      	mov	r2, r0
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	2b02      	cmp	r3, #2
 800b344:	d901      	bls.n	800b34a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800b346:	2303      	movs	r3, #3
 800b348:	e06e      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b34a:	4b39      	ldr	r3, [pc, #228]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d0f0      	beq.n	800b338 <HAL_RCC_OscConfig+0x530>
 800b356:	e066      	b.n	800b426 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b358:	4b35      	ldr	r3, [pc, #212]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a34      	ldr	r2, [pc, #208]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b35e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b362:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b364:	4b32      	ldr	r3, [pc, #200]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	4a31      	ldr	r2, [pc, #196]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b36a:	f023 0303 	bic.w	r3, r3, #3
 800b36e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b370:	4b2f      	ldr	r3, [pc, #188]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	4a2e      	ldr	r2, [pc, #184]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b376:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b37a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b37e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b380:	f7fc fe80 	bl	8008084 <HAL_GetTick>
 800b384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b386:	e008      	b.n	800b39a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b388:	f7fc fe7c 	bl	8008084 <HAL_GetTick>
 800b38c:	4602      	mov	r2, r0
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	2b02      	cmp	r3, #2
 800b394:	d901      	bls.n	800b39a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e046      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b39a:	4b25      	ldr	r3, [pc, #148]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1f0      	bne.n	800b388 <HAL_RCC_OscConfig+0x580>
 800b3a6:	e03e      	b.n	800b426 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69db      	ldr	r3, [r3, #28]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e039      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b3b4:	4b1e      	ldr	r3, [pc, #120]	; (800b430 <HAL_RCC_OscConfig+0x628>)
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	f003 0203 	and.w	r2, r3, #3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d12c      	bne.n	800b422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d123      	bne.n	800b422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d11b      	bne.n	800b422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d113      	bne.n	800b422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b404:	085b      	lsrs	r3, r3, #1
 800b406:	3b01      	subs	r3, #1
 800b408:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d109      	bne.n	800b422 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b418:	085b      	lsrs	r3, r3, #1
 800b41a:	3b01      	subs	r3, #1
 800b41c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b41e:	429a      	cmp	r2, r3
 800b420:	d001      	beq.n	800b426 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e000      	b.n	800b428 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	40021000 	.word	0x40021000
 800b434:	019f800c 	.word	0x019f800c

0800b438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d101      	bne.n	800b450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e11e      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b450:	4b91      	ldr	r3, [pc, #580]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 030f 	and.w	r3, r3, #15
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d910      	bls.n	800b480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b45e:	4b8e      	ldr	r3, [pc, #568]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f023 020f 	bic.w	r2, r3, #15
 800b466:	498c      	ldr	r1, [pc, #560]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	4313      	orrs	r3, r2
 800b46c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b46e:	4b8a      	ldr	r3, [pc, #552]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 030f 	and.w	r3, r3, #15
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d001      	beq.n	800b480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e106      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0301 	and.w	r3, r3, #1
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d073      	beq.n	800b574 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	2b03      	cmp	r3, #3
 800b492:	d129      	bne.n	800b4e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b494:	4b81      	ldr	r3, [pc, #516]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0f4      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b4a4:	f000 f9d0 	bl	800b848 <RCC_GetSysClockFreqFromPLLSource>
 800b4a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	4a7c      	ldr	r2, [pc, #496]	; (800b6a0 <HAL_RCC_ClockConfig+0x268>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d93f      	bls.n	800b532 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b4b2:	4b7a      	ldr	r3, [pc, #488]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d009      	beq.n	800b4d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d033      	beq.n	800b532 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d12f      	bne.n	800b532 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b4d2:	4b72      	ldr	r3, [pc, #456]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b4da:	4a70      	ldr	r2, [pc, #448]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b4e2:	2380      	movs	r3, #128	; 0x80
 800b4e4:	617b      	str	r3, [r7, #20]
 800b4e6:	e024      	b.n	800b532 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d107      	bne.n	800b500 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b4f0:	4b6a      	ldr	r3, [pc, #424]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d109      	bne.n	800b510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e0c6      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b500:	4b66      	ldr	r3, [pc, #408]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0be      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b510:	f000 f8ce 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800b514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	4a61      	ldr	r2, [pc, #388]	; (800b6a0 <HAL_RCC_ClockConfig+0x268>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d909      	bls.n	800b532 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b51e:	4b5f      	ldr	r3, [pc, #380]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b526:	4a5d      	ldr	r2, [pc, #372]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b52c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b52e:	2380      	movs	r3, #128	; 0x80
 800b530:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b532:	4b5a      	ldr	r3, [pc, #360]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f023 0203 	bic.w	r2, r3, #3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	4957      	ldr	r1, [pc, #348]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b540:	4313      	orrs	r3, r2
 800b542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b544:	f7fc fd9e 	bl	8008084 <HAL_GetTick>
 800b548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b54a:	e00a      	b.n	800b562 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b54c:	f7fc fd9a 	bl	8008084 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	f241 3288 	movw	r2, #5000	; 0x1388
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d901      	bls.n	800b562 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e095      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b562:	4b4e      	ldr	r3, [pc, #312]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f003 020c 	and.w	r2, r3, #12
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	429a      	cmp	r2, r3
 800b572:	d1eb      	bne.n	800b54c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 0302 	and.w	r3, r3, #2
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d023      	beq.n	800b5c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b58c:	4b43      	ldr	r3, [pc, #268]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	4a42      	ldr	r2, [pc, #264]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b592:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b596:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0308 	and.w	r3, r3, #8
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d007      	beq.n	800b5b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b5a4:	4b3d      	ldr	r3, [pc, #244]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5a6:	689b      	ldr	r3, [r3, #8]
 800b5a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5ac:	4a3b      	ldr	r2, [pc, #236]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b5b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5b4:	4b39      	ldr	r3, [pc, #228]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	4936      	ldr	r1, [pc, #216]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	608b      	str	r3, [r1, #8]
 800b5c6:	e008      	b.n	800b5da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	2b80      	cmp	r3, #128	; 0x80
 800b5cc:	d105      	bne.n	800b5da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b5ce:	4b33      	ldr	r3, [pc, #204]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	4a32      	ldr	r2, [pc, #200]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b5d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5da:	4b2f      	ldr	r3, [pc, #188]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 030f 	and.w	r3, r3, #15
 800b5e2:	683a      	ldr	r2, [r7, #0]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d21d      	bcs.n	800b624 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5e8:	4b2b      	ldr	r3, [pc, #172]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f023 020f 	bic.w	r2, r3, #15
 800b5f0:	4929      	ldr	r1, [pc, #164]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b5f8:	f7fc fd44 	bl	8008084 <HAL_GetTick>
 800b5fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5fe:	e00a      	b.n	800b616 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b600:	f7fc fd40 	bl	8008084 <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b60e:	4293      	cmp	r3, r2
 800b610:	d901      	bls.n	800b616 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b612:	2303      	movs	r3, #3
 800b614:	e03b      	b.n	800b68e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b616:	4b20      	ldr	r3, [pc, #128]	; (800b698 <HAL_RCC_ClockConfig+0x260>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f003 030f 	and.w	r3, r3, #15
 800b61e:	683a      	ldr	r2, [r7, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d1ed      	bne.n	800b600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f003 0304 	and.w	r3, r3, #4
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d008      	beq.n	800b642 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b630:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	4917      	ldr	r1, [pc, #92]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b63e:	4313      	orrs	r3, r2
 800b640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f003 0308 	and.w	r3, r3, #8
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d009      	beq.n	800b662 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b64e:	4b13      	ldr	r3, [pc, #76]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	490f      	ldr	r1, [pc, #60]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b662:	f000 f825 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800b666:	4602      	mov	r2, r0
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <HAL_RCC_ClockConfig+0x264>)
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	091b      	lsrs	r3, r3, #4
 800b66e:	f003 030f 	and.w	r3, r3, #15
 800b672:	490c      	ldr	r1, [pc, #48]	; (800b6a4 <HAL_RCC_ClockConfig+0x26c>)
 800b674:	5ccb      	ldrb	r3, [r1, r3]
 800b676:	f003 031f 	and.w	r3, r3, #31
 800b67a:	fa22 f303 	lsr.w	r3, r2, r3
 800b67e:	4a0a      	ldr	r2, [pc, #40]	; (800b6a8 <HAL_RCC_ClockConfig+0x270>)
 800b680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <HAL_RCC_ClockConfig+0x274>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4618      	mov	r0, r3
 800b688:	f7fc f89c 	bl	80077c4 <HAL_InitTick>
 800b68c:	4603      	mov	r3, r0
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}
 800b696:	bf00      	nop
 800b698:	40022000 	.word	0x40022000
 800b69c:	40021000 	.word	0x40021000
 800b6a0:	04c4b400 	.word	0x04c4b400
 800b6a4:	080124c8 	.word	0x080124c8
 800b6a8:	20000004 	.word	0x20000004
 800b6ac:	20000008 	.word	0x20000008

0800b6b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b087      	sub	sp, #28
 800b6b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b6b6:	4b2c      	ldr	r3, [pc, #176]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f003 030c 	and.w	r3, r3, #12
 800b6be:	2b04      	cmp	r3, #4
 800b6c0:	d102      	bne.n	800b6c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b6c2:	4b2a      	ldr	r3, [pc, #168]	; (800b76c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b6c4:	613b      	str	r3, [r7, #16]
 800b6c6:	e047      	b.n	800b758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b6c8:	4b27      	ldr	r3, [pc, #156]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	f003 030c 	and.w	r3, r3, #12
 800b6d0:	2b08      	cmp	r3, #8
 800b6d2:	d102      	bne.n	800b6da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b6d4:	4b26      	ldr	r3, [pc, #152]	; (800b770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	e03e      	b.n	800b758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b6da:	4b23      	ldr	r3, [pc, #140]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	f003 030c 	and.w	r3, r3, #12
 800b6e2:	2b0c      	cmp	r3, #12
 800b6e4:	d136      	bne.n	800b754 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b6e6:	4b20      	ldr	r3, [pc, #128]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b6f0:	4b1d      	ldr	r3, [pc, #116]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	091b      	lsrs	r3, r3, #4
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b03      	cmp	r3, #3
 800b702:	d10c      	bne.n	800b71e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b704:	4a1a      	ldr	r2, [pc, #104]	; (800b770 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70c:	4a16      	ldr	r2, [pc, #88]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b70e:	68d2      	ldr	r2, [r2, #12]
 800b710:	0a12      	lsrs	r2, r2, #8
 800b712:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b716:	fb02 f303 	mul.w	r3, r2, r3
 800b71a:	617b      	str	r3, [r7, #20]
      break;
 800b71c:	e00c      	b.n	800b738 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b71e:	4a13      	ldr	r2, [pc, #76]	; (800b76c <HAL_RCC_GetSysClockFreq+0xbc>)
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	fbb2 f3f3 	udiv	r3, r2, r3
 800b726:	4a10      	ldr	r2, [pc, #64]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b728:	68d2      	ldr	r2, [r2, #12]
 800b72a:	0a12      	lsrs	r2, r2, #8
 800b72c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	617b      	str	r3, [r7, #20]
      break;
 800b736:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b738:	4b0b      	ldr	r3, [pc, #44]	; (800b768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b73a:	68db      	ldr	r3, [r3, #12]
 800b73c:	0e5b      	lsrs	r3, r3, #25
 800b73e:	f003 0303 	and.w	r3, r3, #3
 800b742:	3301      	adds	r3, #1
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b750:	613b      	str	r3, [r7, #16]
 800b752:	e001      	b.n	800b758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b754:	2300      	movs	r3, #0
 800b756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b758:	693b      	ldr	r3, [r7, #16]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	371c      	adds	r7, #28
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	40021000 	.word	0x40021000
 800b76c:	00f42400 	.word	0x00f42400
 800b770:	007a1200 	.word	0x007a1200

0800b774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b774:	b480      	push	{r7}
 800b776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b778:	4b03      	ldr	r3, [pc, #12]	; (800b788 <HAL_RCC_GetHCLKFreq+0x14>)
 800b77a:	681b      	ldr	r3, [r3, #0]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	20000004 	.word	0x20000004

0800b78c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b790:	f7ff fff0 	bl	800b774 <HAL_RCC_GetHCLKFreq>
 800b794:	4602      	mov	r2, r0
 800b796:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	0a1b      	lsrs	r3, r3, #8
 800b79c:	f003 0307 	and.w	r3, r3, #7
 800b7a0:	4904      	ldr	r1, [pc, #16]	; (800b7b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b7a2:	5ccb      	ldrb	r3, [r1, r3]
 800b7a4:	f003 031f 	and.w	r3, r3, #31
 800b7a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40021000 	.word	0x40021000
 800b7b4:	080124d8 	.word	0x080124d8

0800b7b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b7bc:	f7ff ffda 	bl	800b774 <HAL_RCC_GetHCLKFreq>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	4b06      	ldr	r3, [pc, #24]	; (800b7dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	0adb      	lsrs	r3, r3, #11
 800b7c8:	f003 0307 	and.w	r3, r3, #7
 800b7cc:	4904      	ldr	r1, [pc, #16]	; (800b7e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b7ce:	5ccb      	ldrb	r3, [r1, r3]
 800b7d0:	f003 031f 	and.w	r3, r3, #31
 800b7d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	40021000 	.word	0x40021000
 800b7e0:	080124d8 	.word	0x080124d8

0800b7e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	220f      	movs	r2, #15
 800b7f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800b7f4:	4b12      	ldr	r3, [pc, #72]	; (800b840 <HAL_RCC_GetClockConfig+0x5c>)
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	f003 0203 	and.w	r2, r3, #3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <HAL_RCC_GetClockConfig+0x5c>)
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800b80c:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <HAL_RCC_GetClockConfig+0x5c>)
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800b818:	4b09      	ldr	r3, [pc, #36]	; (800b840 <HAL_RCC_GetClockConfig+0x5c>)
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	08db      	lsrs	r3, r3, #3
 800b81e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800b826:	4b07      	ldr	r3, [pc, #28]	; (800b844 <HAL_RCC_GetClockConfig+0x60>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 020f 	and.w	r2, r3, #15
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	601a      	str	r2, [r3, #0]
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	40021000 	.word	0x40021000
 800b844:	40022000 	.word	0x40022000

0800b848 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b84e:	4b1e      	ldr	r3, [pc, #120]	; (800b8c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b858:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b85a:	68db      	ldr	r3, [r3, #12]
 800b85c:	091b      	lsrs	r3, r3, #4
 800b85e:	f003 030f 	and.w	r3, r3, #15
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d10c      	bne.n	800b886 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b86c:	4a17      	ldr	r2, [pc, #92]	; (800b8cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	fbb2 f3f3 	udiv	r3, r2, r3
 800b874:	4a14      	ldr	r2, [pc, #80]	; (800b8c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b876:	68d2      	ldr	r2, [r2, #12]
 800b878:	0a12      	lsrs	r2, r2, #8
 800b87a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b87e:	fb02 f303 	mul.w	r3, r2, r3
 800b882:	617b      	str	r3, [r7, #20]
    break;
 800b884:	e00c      	b.n	800b8a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b886:	4a12      	ldr	r2, [pc, #72]	; (800b8d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b88e:	4a0e      	ldr	r2, [pc, #56]	; (800b8c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b890:	68d2      	ldr	r2, [r2, #12]
 800b892:	0a12      	lsrs	r2, r2, #8
 800b894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b898:	fb02 f303 	mul.w	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
    break;
 800b89e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b8a0:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	0e5b      	lsrs	r3, r3, #25
 800b8a6:	f003 0303 	and.w	r3, r3, #3
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	005b      	lsls	r3, r3, #1
 800b8ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b8b0:	697a      	ldr	r2, [r7, #20]
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b8ba:	687b      	ldr	r3, [r7, #4]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	371c      	adds	r7, #28
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr
 800b8c8:	40021000 	.word	0x40021000
 800b8cc:	007a1200 	.word	0x007a1200
 800b8d0:	00f42400 	.word	0x00f42400

0800b8d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8dc:	2300      	movs	r3, #0
 800b8de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	f000 8098 	beq.w	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b8f6:	4b43      	ldr	r3, [pc, #268]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10d      	bne.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b902:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b906:	4a3f      	ldr	r2, [pc, #252]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b90c:	6593      	str	r3, [r2, #88]	; 0x58
 800b90e:	4b3d      	ldr	r3, [pc, #244]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b916:	60bb      	str	r3, [r7, #8]
 800b918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b91a:	2301      	movs	r3, #1
 800b91c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b91e:	4b3a      	ldr	r3, [pc, #232]	; (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a39      	ldr	r2, [pc, #228]	; (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b92a:	f7fc fbab 	bl	8008084 <HAL_GetTick>
 800b92e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b930:	e009      	b.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b932:	f7fc fba7 	bl	8008084 <HAL_GetTick>
 800b936:	4602      	mov	r2, r0
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	2b02      	cmp	r3, #2
 800b93e:	d902      	bls.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b940:	2303      	movs	r3, #3
 800b942:	74fb      	strb	r3, [r7, #19]
        break;
 800b944:	e005      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b946:	4b30      	ldr	r3, [pc, #192]	; (800ba08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d0ef      	beq.n	800b932 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b952:	7cfb      	ldrb	r3, [r7, #19]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d159      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b958:	4b2a      	ldr	r3, [pc, #168]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b962:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d01e      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b96e:	697a      	ldr	r2, [r7, #20]
 800b970:	429a      	cmp	r2, r3
 800b972:	d019      	beq.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b974:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b97a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b97e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b980:	4b20      	ldr	r3, [pc, #128]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b986:	4a1f      	ldr	r2, [pc, #124]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b98c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b990:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b996:	4a1b      	ldr	r2, [pc, #108]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b99c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b9a0:	4a18      	ldr	r2, [pc, #96]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d016      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9b2:	f7fc fb67 	bl	8008084 <HAL_GetTick>
 800b9b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9b8:	e00b      	b.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ba:	f7fc fb63 	bl	8008084 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d902      	bls.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	74fb      	strb	r3, [r7, #19]
            break;
 800b9d0:	e006      	b.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b9d2:	4b0c      	ldr	r3, [pc, #48]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0ec      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b9e0:	7cfb      	ldrb	r3, [r7, #19]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10b      	bne.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f4:	4903      	ldr	r1, [pc, #12]	; (800ba04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b9fc:	e008      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b9fe:	7cfb      	ldrb	r3, [r7, #19]
 800ba00:	74bb      	strb	r3, [r7, #18]
 800ba02:	e005      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ba04:	40021000 	.word	0x40021000
 800ba08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba0c:	7cfb      	ldrb	r3, [r7, #19]
 800ba0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ba10:	7c7b      	ldrb	r3, [r7, #17]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d105      	bne.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ba16:	4ba7      	ldr	r3, [pc, #668]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba1a:	4aa6      	ldr	r2, [pc, #664]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ba2e:	4ba1      	ldr	r3, [pc, #644]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba34:	f023 0203 	bic.w	r2, r3, #3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	499d      	ldr	r1, [pc, #628]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0302 	and.w	r3, r3, #2
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ba50:	4b98      	ldr	r3, [pc, #608]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba56:	f023 020c 	bic.w	r2, r3, #12
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	4995      	ldr	r1, [pc, #596]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba60:	4313      	orrs	r3, r2
 800ba62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ba72:	4b90      	ldr	r3, [pc, #576]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	498c      	ldr	r1, [pc, #560]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0308 	and.w	r3, r3, #8
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00a      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ba94:	4b87      	ldr	r3, [pc, #540]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ba96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	691b      	ldr	r3, [r3, #16]
 800baa2:	4984      	ldr	r1, [pc, #528]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f003 0310 	and.w	r3, r3, #16
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00a      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bab6:	4b7f      	ldr	r3, [pc, #508]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800babc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	497b      	ldr	r1, [pc, #492]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0320 	and.w	r3, r3, #32
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00a      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bad8:	4b76      	ldr	r3, [pc, #472]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bade:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	4973      	ldr	r1, [pc, #460]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bafa:	4b6e      	ldr	r3, [pc, #440]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bafc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	496a      	ldr	r1, [pc, #424]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00a      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bb1c:	4b65      	ldr	r3, [pc, #404]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	4962      	ldr	r1, [pc, #392]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d00a      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bb3e:	4b5d      	ldr	r3, [pc, #372]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	4959      	ldr	r1, [pc, #356]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d00a      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bb60:	4b54      	ldr	r3, [pc, #336]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bb66:	f023 0203 	bic.w	r2, r3, #3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb6e:	4951      	ldr	r1, [pc, #324]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb70:	4313      	orrs	r3, r2
 800bb72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb82:	4b4c      	ldr	r3, [pc, #304]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb90:	4948      	ldr	r1, [pc, #288]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d015      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bba4:	4b43      	ldr	r3, [pc, #268]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb2:	4940      	ldr	r1, [pc, #256]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bbc2:	d105      	bne.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbc4:	4b3b      	ldr	r3, [pc, #236]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	4a3a      	ldr	r2, [pc, #232]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d015      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bbdc:	4b35      	ldr	r3, [pc, #212]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbea:	4932      	ldr	r1, [pc, #200]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbec:	4313      	orrs	r3, r2
 800bbee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbfa:	d105      	bne.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bbfc:	4b2d      	ldr	r3, [pc, #180]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	4a2c      	ldr	r2, [pc, #176]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc06:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d015      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc14:	4b27      	ldr	r3, [pc, #156]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc22:	4924      	ldr	r1, [pc, #144]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc32:	d105      	bne.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc34:	4b1f      	ldr	r3, [pc, #124]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	4a1e      	ldr	r2, [pc, #120]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc3e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d015      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bc4c:	4b19      	ldr	r3, [pc, #100]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5a:	4916      	ldr	r1, [pc, #88]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6a:	d105      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bc6c:	4b11      	ldr	r3, [pc, #68]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	4a10      	ldr	r2, [pc, #64]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc76:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d019      	beq.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc84:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	4908      	ldr	r1, [pc, #32]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bc94:	4313      	orrs	r3, r2
 800bc96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bca2:	d109      	bne.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bca4:	4b03      	ldr	r3, [pc, #12]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4a02      	ldr	r2, [pc, #8]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800bcaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcae:	60d3      	str	r3, [r2, #12]
 800bcb0:	e002      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800bcb2:	bf00      	nop
 800bcb4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d015      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bcc4:	4b29      	ldr	r3, [pc, #164]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcd2:	4926      	ldr	r1, [pc, #152]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bce2:	d105      	bne.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bce4:	4b21      	ldr	r3, [pc, #132]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	4a20      	ldr	r2, [pc, #128]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d015      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800bcfc:	4b1b      	ldr	r3, [pc, #108]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bcfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd02:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd0a:	4918      	ldr	r1, [pc, #96]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd1a:	d105      	bne.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bd1c:	4b13      	ldr	r3, [pc, #76]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd1e:	68db      	ldr	r3, [r3, #12]
 800bd20:	4a12      	ldr	r2, [pc, #72]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd26:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d015      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bd34:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd42:	490a      	ldr	r1, [pc, #40]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd44:	4313      	orrs	r3, r2
 800bd46:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd52:	d105      	bne.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd54:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	4a04      	ldr	r2, [pc, #16]	; (800bd6c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bd5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd5e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800bd60:	7cbb      	ldrb	r3, [r7, #18]
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	40021000 	.word	0x40021000

0800bd70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e049      	b.n	800be16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd88:	b2db      	uxtb	r3, r3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f841 	bl	800be1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	3304      	adds	r3, #4
 800bdac:	4619      	mov	r1, r3
 800bdae:	4610      	mov	r0, r2
 800bdb0:	f000 fcde 	bl	800c770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800be26:	bf00      	nop
 800be28:	370c      	adds	r7, #12
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b01      	cmp	r3, #1
 800be46:	d001      	beq.n	800be4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be48:	2301      	movs	r3, #1
 800be4a:	e054      	b.n	800bef6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <HAL_TIM_Base_Start_IT+0xd0>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d022      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be76:	d01d      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	4a22      	ldr	r2, [pc, #136]	; (800bf08 <HAL_TIM_Base_Start_IT+0xd4>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d018      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a21      	ldr	r2, [pc, #132]	; (800bf0c <HAL_TIM_Base_Start_IT+0xd8>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d013      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a1f      	ldr	r2, [pc, #124]	; (800bf10 <HAL_TIM_Base_Start_IT+0xdc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d00e      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a1e      	ldr	r2, [pc, #120]	; (800bf14 <HAL_TIM_Base_Start_IT+0xe0>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d009      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a1c      	ldr	r2, [pc, #112]	; (800bf18 <HAL_TIM_Base_Start_IT+0xe4>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d004      	beq.n	800beb4 <HAL_TIM_Base_Start_IT+0x80>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a1b      	ldr	r2, [pc, #108]	; (800bf1c <HAL_TIM_Base_Start_IT+0xe8>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d115      	bne.n	800bee0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	4b19      	ldr	r3, [pc, #100]	; (800bf20 <HAL_TIM_Base_Start_IT+0xec>)
 800bebc:	4013      	ands	r3, r2
 800bebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2b06      	cmp	r3, #6
 800bec4:	d015      	beq.n	800bef2 <HAL_TIM_Base_Start_IT+0xbe>
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800becc:	d011      	beq.n	800bef2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f042 0201 	orr.w	r2, r2, #1
 800bedc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bede:	e008      	b.n	800bef2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f042 0201 	orr.w	r2, r2, #1
 800beee:	601a      	str	r2, [r3, #0]
 800bef0:	e000      	b.n	800bef4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	40012c00 	.word	0x40012c00
 800bf08:	40000400 	.word	0x40000400
 800bf0c:	40000800 	.word	0x40000800
 800bf10:	40000c00 	.word	0x40000c00
 800bf14:	40013400 	.word	0x40013400
 800bf18:	40014000 	.word	0x40014000
 800bf1c:	40015000 	.word	0x40015000
 800bf20:	00010007 	.word	0x00010007

0800bf24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d101      	bne.n	800bf36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	e049      	b.n	800bfca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d106      	bne.n	800bf50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7fb fe3e 	bl	8007bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2202      	movs	r2, #2
 800bf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f000 fc04 	bl	800c770 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d109      	bne.n	800bff8 <HAL_TIM_PWM_Start+0x24>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	bf14      	ite	ne
 800bff0:	2301      	movne	r3, #1
 800bff2:	2300      	moveq	r3, #0
 800bff4:	b2db      	uxtb	r3, r3
 800bff6:	e03c      	b.n	800c072 <HAL_TIM_PWM_Start+0x9e>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d109      	bne.n	800c012 <HAL_TIM_PWM_Start+0x3e>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2b01      	cmp	r3, #1
 800c008:	bf14      	ite	ne
 800c00a:	2301      	movne	r3, #1
 800c00c:	2300      	moveq	r3, #0
 800c00e:	b2db      	uxtb	r3, r3
 800c010:	e02f      	b.n	800c072 <HAL_TIM_PWM_Start+0x9e>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	2b08      	cmp	r3, #8
 800c016:	d109      	bne.n	800c02c <HAL_TIM_PWM_Start+0x58>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b01      	cmp	r3, #1
 800c022:	bf14      	ite	ne
 800c024:	2301      	movne	r3, #1
 800c026:	2300      	moveq	r3, #0
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	e022      	b.n	800c072 <HAL_TIM_PWM_Start+0x9e>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b0c      	cmp	r3, #12
 800c030:	d109      	bne.n	800c046 <HAL_TIM_PWM_Start+0x72>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	bf14      	ite	ne
 800c03e:	2301      	movne	r3, #1
 800c040:	2300      	moveq	r3, #0
 800c042:	b2db      	uxtb	r3, r3
 800c044:	e015      	b.n	800c072 <HAL_TIM_PWM_Start+0x9e>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	2b10      	cmp	r3, #16
 800c04a:	d109      	bne.n	800c060 <HAL_TIM_PWM_Start+0x8c>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c052:	b2db      	uxtb	r3, r3
 800c054:	2b01      	cmp	r3, #1
 800c056:	bf14      	ite	ne
 800c058:	2301      	movne	r3, #1
 800c05a:	2300      	moveq	r3, #0
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	e008      	b.n	800c072 <HAL_TIM_PWM_Start+0x9e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c066:	b2db      	uxtb	r3, r3
 800c068:	2b01      	cmp	r3, #1
 800c06a:	bf14      	ite	ne
 800c06c:	2301      	movne	r3, #1
 800c06e:	2300      	moveq	r3, #0
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e0a6      	b.n	800c1c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <HAL_TIM_PWM_Start+0xb6>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2202      	movs	r2, #2
 800c084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c088:	e023      	b.n	800c0d2 <HAL_TIM_PWM_Start+0xfe>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	2b04      	cmp	r3, #4
 800c08e:	d104      	bne.n	800c09a <HAL_TIM_PWM_Start+0xc6>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c098:	e01b      	b.n	800c0d2 <HAL_TIM_PWM_Start+0xfe>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b08      	cmp	r3, #8
 800c09e:	d104      	bne.n	800c0aa <HAL_TIM_PWM_Start+0xd6>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2202      	movs	r2, #2
 800c0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c0a8:	e013      	b.n	800c0d2 <HAL_TIM_PWM_Start+0xfe>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	2b0c      	cmp	r3, #12
 800c0ae:	d104      	bne.n	800c0ba <HAL_TIM_PWM_Start+0xe6>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c0b8:	e00b      	b.n	800c0d2 <HAL_TIM_PWM_Start+0xfe>
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	2b10      	cmp	r3, #16
 800c0be:	d104      	bne.n	800c0ca <HAL_TIM_PWM_Start+0xf6>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2202      	movs	r2, #2
 800c0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c0c8:	e003      	b.n	800c0d2 <HAL_TIM_PWM_Start+0xfe>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 ff1a 	bl	800cf14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a3a      	ldr	r2, [pc, #232]	; (800c1d0 <HAL_TIM_PWM_Start+0x1fc>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d018      	beq.n	800c11c <HAL_TIM_PWM_Start+0x148>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a39      	ldr	r2, [pc, #228]	; (800c1d4 <HAL_TIM_PWM_Start+0x200>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d013      	beq.n	800c11c <HAL_TIM_PWM_Start+0x148>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a37      	ldr	r2, [pc, #220]	; (800c1d8 <HAL_TIM_PWM_Start+0x204>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d00e      	beq.n	800c11c <HAL_TIM_PWM_Start+0x148>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a36      	ldr	r2, [pc, #216]	; (800c1dc <HAL_TIM_PWM_Start+0x208>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d009      	beq.n	800c11c <HAL_TIM_PWM_Start+0x148>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a34      	ldr	r2, [pc, #208]	; (800c1e0 <HAL_TIM_PWM_Start+0x20c>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d004      	beq.n	800c11c <HAL_TIM_PWM_Start+0x148>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	4a33      	ldr	r2, [pc, #204]	; (800c1e4 <HAL_TIM_PWM_Start+0x210>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d101      	bne.n	800c120 <HAL_TIM_PWM_Start+0x14c>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e000      	b.n	800c122 <HAL_TIM_PWM_Start+0x14e>
 800c120:	2300      	movs	r3, #0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d007      	beq.n	800c136 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c134:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a25      	ldr	r2, [pc, #148]	; (800c1d0 <HAL_TIM_PWM_Start+0x1fc>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d022      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c148:	d01d      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a26      	ldr	r2, [pc, #152]	; (800c1e8 <HAL_TIM_PWM_Start+0x214>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d018      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a24      	ldr	r2, [pc, #144]	; (800c1ec <HAL_TIM_PWM_Start+0x218>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d013      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a23      	ldr	r2, [pc, #140]	; (800c1f0 <HAL_TIM_PWM_Start+0x21c>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d00e      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4a19      	ldr	r2, [pc, #100]	; (800c1d4 <HAL_TIM_PWM_Start+0x200>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d009      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a18      	ldr	r2, [pc, #96]	; (800c1d8 <HAL_TIM_PWM_Start+0x204>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d004      	beq.n	800c186 <HAL_TIM_PWM_Start+0x1b2>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a18      	ldr	r2, [pc, #96]	; (800c1e4 <HAL_TIM_PWM_Start+0x210>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d115      	bne.n	800c1b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689a      	ldr	r2, [r3, #8]
 800c18c:	4b19      	ldr	r3, [pc, #100]	; (800c1f4 <HAL_TIM_PWM_Start+0x220>)
 800c18e:	4013      	ands	r3, r2
 800c190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2b06      	cmp	r3, #6
 800c196:	d015      	beq.n	800c1c4 <HAL_TIM_PWM_Start+0x1f0>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c19e:	d011      	beq.n	800c1c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f042 0201 	orr.w	r2, r2, #1
 800c1ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1b0:	e008      	b.n	800c1c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f042 0201 	orr.w	r2, r2, #1
 800c1c0:	601a      	str	r2, [r3, #0]
 800c1c2:	e000      	b.n	800c1c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c1c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c1c6:	2300      	movs	r3, #0
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40012c00 	.word	0x40012c00
 800c1d4:	40013400 	.word	0x40013400
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	40014400 	.word	0x40014400
 800c1e0:	40014800 	.word	0x40014800
 800c1e4:	40015000 	.word	0x40015000
 800c1e8:	40000400 	.word	0x40000400
 800c1ec:	40000800 	.word	0x40000800
 800c1f0:	40000c00 	.word	0x40000c00
 800c1f4:	00010007 	.word	0x00010007

0800c1f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	691b      	ldr	r3, [r3, #16]
 800c206:	f003 0302 	and.w	r3, r3, #2
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d122      	bne.n	800c254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f003 0302 	and.w	r3, r3, #2
 800c218:	2b02      	cmp	r3, #2
 800c21a:	d11b      	bne.n	800c254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f06f 0202 	mvn.w	r2, #2
 800c224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	f003 0303 	and.w	r3, r3, #3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d003      	beq.n	800c242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa7a 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c240:	e005      	b.n	800c24e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fa6c 	bl	800c720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fa7d 	bl	800c748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d122      	bne.n	800c2a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	f003 0304 	and.w	r3, r3, #4
 800c26c:	2b04      	cmp	r3, #4
 800c26e:	d11b      	bne.n	800c2a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f06f 0204 	mvn.w	r2, #4
 800c278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2202      	movs	r2, #2
 800c27e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	699b      	ldr	r3, [r3, #24]
 800c286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fa50 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c294:	e005      	b.n	800c2a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fa42 	bl	800c720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 fa53 	bl	800c748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	f003 0308 	and.w	r3, r3, #8
 800c2b2:	2b08      	cmp	r3, #8
 800c2b4:	d122      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	f003 0308 	and.w	r3, r3, #8
 800c2c0:	2b08      	cmp	r3, #8
 800c2c2:	d11b      	bne.n	800c2fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f06f 0208 	mvn.w	r2, #8
 800c2cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2204      	movs	r2, #4
 800c2d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	69db      	ldr	r3, [r3, #28]
 800c2da:	f003 0303 	and.w	r3, r3, #3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d003      	beq.n	800c2ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fa26 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c2e8:	e005      	b.n	800c2f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 fa18 	bl	800c720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fa29 	bl	800c748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	f003 0310 	and.w	r3, r3, #16
 800c306:	2b10      	cmp	r3, #16
 800c308:	d122      	bne.n	800c350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	2b10      	cmp	r3, #16
 800c316:	d11b      	bne.n	800c350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f06f 0210 	mvn.w	r2, #16
 800c320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2208      	movs	r2, #8
 800c326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f9fc 	bl	800c734 <HAL_TIM_IC_CaptureCallback>
 800c33c:	e005      	b.n	800c34a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f9ee 	bl	800c720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f9ff 	bl	800c748 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2200      	movs	r2, #0
 800c34e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	691b      	ldr	r3, [r3, #16]
 800c356:	f003 0301 	and.w	r3, r3, #1
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d10e      	bne.n	800c37c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f003 0301 	and.w	r3, r3, #1
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d107      	bne.n	800c37c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f06f 0201 	mvn.w	r2, #1
 800c374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7fa ff12 	bl	80071a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c386:	2b80      	cmp	r3, #128	; 0x80
 800c388:	d10e      	bne.n	800c3a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c394:	2b80      	cmp	r3, #128	; 0x80
 800c396:	d107      	bne.n	800c3a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fe7c 	bl	800d0a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b6:	d10e      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3c2:	2b80      	cmp	r3, #128	; 0x80
 800c3c4:	d107      	bne.n	800c3d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c3ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fe6f 	bl	800d0b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	691b      	ldr	r3, [r3, #16]
 800c3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3e0:	2b40      	cmp	r3, #64	; 0x40
 800c3e2:	d10e      	bne.n	800c402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ee:	2b40      	cmp	r3, #64	; 0x40
 800c3f0:	d107      	bne.n	800c402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 f9ad 	bl	800c75c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f003 0320 	and.w	r3, r3, #32
 800c40c:	2b20      	cmp	r3, #32
 800c40e:	d10e      	bne.n	800c42e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	f003 0320 	and.w	r3, r3, #32
 800c41a:	2b20      	cmp	r3, #32
 800c41c:	d107      	bne.n	800c42e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f06f 0220 	mvn.w	r2, #32
 800c426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 fe2f 	bl	800d08c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c43c:	d10f      	bne.n	800c45e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44c:	d107      	bne.n	800c45e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c458:	6878      	ldr	r0, [r7, #4]
 800c45a:	f000 fe35 	bl	800d0c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c46c:	d10f      	bne.n	800c48e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c47c:	d107      	bne.n	800c48e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 fe27 	bl	800d0dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49c:	d10f      	bne.n	800c4be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	68db      	ldr	r3, [r3, #12]
 800c4a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c4ac:	d107      	bne.n	800c4be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c4b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fe19 	bl	800d0f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4cc:	d10f      	bne.n	800c4ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68db      	ldr	r3, [r3, #12]
 800c4d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4dc:	d107      	bne.n	800c4ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 fe0b 	bl	800d104 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c4ee:	bf00      	nop
 800c4f0:	3708      	adds	r7, #8
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
	...

0800c4f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c504:	2300      	movs	r3, #0
 800c506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c50e:	2b01      	cmp	r3, #1
 800c510:	d101      	bne.n	800c516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c512:	2302      	movs	r3, #2
 800c514:	e0ff      	b.n	800c716 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2201      	movs	r2, #1
 800c51a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b14      	cmp	r3, #20
 800c522:	f200 80f0 	bhi.w	800c706 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c581 	.word	0x0800c581
 800c530:	0800c707 	.word	0x0800c707
 800c534:	0800c707 	.word	0x0800c707
 800c538:	0800c707 	.word	0x0800c707
 800c53c:	0800c5c1 	.word	0x0800c5c1
 800c540:	0800c707 	.word	0x0800c707
 800c544:	0800c707 	.word	0x0800c707
 800c548:	0800c707 	.word	0x0800c707
 800c54c:	0800c603 	.word	0x0800c603
 800c550:	0800c707 	.word	0x0800c707
 800c554:	0800c707 	.word	0x0800c707
 800c558:	0800c707 	.word	0x0800c707
 800c55c:	0800c643 	.word	0x0800c643
 800c560:	0800c707 	.word	0x0800c707
 800c564:	0800c707 	.word	0x0800c707
 800c568:	0800c707 	.word	0x0800c707
 800c56c:	0800c685 	.word	0x0800c685
 800c570:	0800c707 	.word	0x0800c707
 800c574:	0800c707 	.word	0x0800c707
 800c578:	0800c707 	.word	0x0800c707
 800c57c:	0800c6c5 	.word	0x0800c6c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68b9      	ldr	r1, [r7, #8]
 800c586:	4618      	mov	r0, r3
 800c588:	f000 f99a 	bl	800c8c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0208 	orr.w	r2, r2, #8
 800c59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	699a      	ldr	r2, [r3, #24]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f022 0204 	bic.w	r2, r2, #4
 800c5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6999      	ldr	r1, [r3, #24]
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	691a      	ldr	r2, [r3, #16]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	430a      	orrs	r2, r1
 800c5bc:	619a      	str	r2, [r3, #24]
      break;
 800c5be:	e0a5      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68b9      	ldr	r1, [r7, #8]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fa14 	bl	800c9f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	699a      	ldr	r2, [r3, #24]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c5da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699a      	ldr	r2, [r3, #24]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6999      	ldr	r1, [r3, #24]
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	691b      	ldr	r3, [r3, #16]
 800c5f6:	021a      	lsls	r2, r3, #8
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	619a      	str	r2, [r3, #24]
      break;
 800c600:	e084      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	68b9      	ldr	r1, [r7, #8]
 800c608:	4618      	mov	r0, r3
 800c60a:	f000 fa87 	bl	800cb1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	69da      	ldr	r2, [r3, #28]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f042 0208 	orr.w	r2, r2, #8
 800c61c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69da      	ldr	r2, [r3, #28]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f022 0204 	bic.w	r2, r2, #4
 800c62c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69d9      	ldr	r1, [r3, #28]
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	691a      	ldr	r2, [r3, #16]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	430a      	orrs	r2, r1
 800c63e:	61da      	str	r2, [r3, #28]
      break;
 800c640:	e064      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68b9      	ldr	r1, [r7, #8]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 faf9 	bl	800cc40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	69da      	ldr	r2, [r3, #28]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c65c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	69da      	ldr	r2, [r3, #28]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c66c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	69d9      	ldr	r1, [r3, #28]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	021a      	lsls	r2, r3, #8
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	61da      	str	r2, [r3, #28]
      break;
 800c682:	e043      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68b9      	ldr	r1, [r7, #8]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fb6c 	bl	800cd68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f042 0208 	orr.w	r2, r2, #8
 800c69e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f022 0204 	bic.w	r2, r2, #4
 800c6ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	691a      	ldr	r2, [r3, #16]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c6c2:	e023      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68b9      	ldr	r1, [r7, #8]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 fbb6 	bl	800ce3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c6ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	021a      	lsls	r2, r3, #8
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800c704:	e002      	b.n	800c70c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c706:	2301      	movs	r3, #1
 800c708:	75fb      	strb	r3, [r7, #23]
      break;
 800c70a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c714:	7dfb      	ldrb	r3, [r7, #23]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3718      	adds	r7, #24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop

0800c720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c728:	bf00      	nop
 800c72a:	370c      	adds	r7, #12
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c734:	b480      	push	{r7}
 800c736:	b083      	sub	sp, #12
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c750:	bf00      	nop
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr

0800c75c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c764:	bf00      	nop
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a46      	ldr	r2, [pc, #280]	; (800c89c <TIM_Base_SetConfig+0x12c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d017      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c78e:	d013      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a43      	ldr	r2, [pc, #268]	; (800c8a0 <TIM_Base_SetConfig+0x130>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d00f      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a42      	ldr	r2, [pc, #264]	; (800c8a4 <TIM_Base_SetConfig+0x134>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d00b      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a41      	ldr	r2, [pc, #260]	; (800c8a8 <TIM_Base_SetConfig+0x138>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d007      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a40      	ldr	r2, [pc, #256]	; (800c8ac <TIM_Base_SetConfig+0x13c>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <TIM_Base_SetConfig+0x48>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a3f      	ldr	r2, [pc, #252]	; (800c8b0 <TIM_Base_SetConfig+0x140>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d108      	bne.n	800c7ca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a33      	ldr	r2, [pc, #204]	; (800c89c <TIM_Base_SetConfig+0x12c>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d023      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d8:	d01f      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	4a30      	ldr	r2, [pc, #192]	; (800c8a0 <TIM_Base_SetConfig+0x130>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d01b      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	4a2f      	ldr	r2, [pc, #188]	; (800c8a4 <TIM_Base_SetConfig+0x134>)
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d017      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	4a2e      	ldr	r2, [pc, #184]	; (800c8a8 <TIM_Base_SetConfig+0x138>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d013      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	4a2d      	ldr	r2, [pc, #180]	; (800c8ac <TIM_Base_SetConfig+0x13c>)
 800c7f6:	4293      	cmp	r3, r2
 800c7f8:	d00f      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4a2d      	ldr	r2, [pc, #180]	; (800c8b4 <TIM_Base_SetConfig+0x144>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d00b      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a2c      	ldr	r2, [pc, #176]	; (800c8b8 <TIM_Base_SetConfig+0x148>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d007      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4a2b      	ldr	r2, [pc, #172]	; (800c8bc <TIM_Base_SetConfig+0x14c>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d003      	beq.n	800c81a <TIM_Base_SetConfig+0xaa>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4a26      	ldr	r2, [pc, #152]	; (800c8b0 <TIM_Base_SetConfig+0x140>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d108      	bne.n	800c82c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	4313      	orrs	r3, r2
 800c82a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	689a      	ldr	r2, [r3, #8]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a12      	ldr	r2, [pc, #72]	; (800c89c <TIM_Base_SetConfig+0x12c>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d013      	beq.n	800c880 <TIM_Base_SetConfig+0x110>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a14      	ldr	r2, [pc, #80]	; (800c8ac <TIM_Base_SetConfig+0x13c>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d00f      	beq.n	800c880 <TIM_Base_SetConfig+0x110>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4a14      	ldr	r2, [pc, #80]	; (800c8b4 <TIM_Base_SetConfig+0x144>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d00b      	beq.n	800c880 <TIM_Base_SetConfig+0x110>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4a13      	ldr	r2, [pc, #76]	; (800c8b8 <TIM_Base_SetConfig+0x148>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d007      	beq.n	800c880 <TIM_Base_SetConfig+0x110>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a12      	ldr	r2, [pc, #72]	; (800c8bc <TIM_Base_SetConfig+0x14c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d003      	beq.n	800c880 <TIM_Base_SetConfig+0x110>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a0d      	ldr	r2, [pc, #52]	; (800c8b0 <TIM_Base_SetConfig+0x140>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d103      	bne.n	800c888 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	691a      	ldr	r2, [r3, #16]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	615a      	str	r2, [r3, #20]
}
 800c88e:	bf00      	nop
 800c890:	3714      	adds	r7, #20
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr
 800c89a:	bf00      	nop
 800c89c:	40012c00 	.word	0x40012c00
 800c8a0:	40000400 	.word	0x40000400
 800c8a4:	40000800 	.word	0x40000800
 800c8a8:	40000c00 	.word	0x40000c00
 800c8ac:	40013400 	.word	0x40013400
 800c8b0:	40015000 	.word	0x40015000
 800c8b4:	40014000 	.word	0x40014000
 800c8b8:	40014400 	.word	0x40014400
 800c8bc:	40014800 	.word	0x40014800

0800c8c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b087      	sub	sp, #28
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	f023 0201 	bic.w	r2, r3, #1
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f023 0303 	bic.w	r3, r3, #3
 800c8fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68fa      	ldr	r2, [r7, #12]
 800c902:	4313      	orrs	r3, r2
 800c904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	f023 0302 	bic.w	r3, r3, #2
 800c90c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	4313      	orrs	r3, r2
 800c916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a30      	ldr	r2, [pc, #192]	; (800c9dc <TIM_OC1_SetConfig+0x11c>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d013      	beq.n	800c948 <TIM_OC1_SetConfig+0x88>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4a2f      	ldr	r2, [pc, #188]	; (800c9e0 <TIM_OC1_SetConfig+0x120>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d00f      	beq.n	800c948 <TIM_OC1_SetConfig+0x88>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	4a2e      	ldr	r2, [pc, #184]	; (800c9e4 <TIM_OC1_SetConfig+0x124>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d00b      	beq.n	800c948 <TIM_OC1_SetConfig+0x88>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a2d      	ldr	r2, [pc, #180]	; (800c9e8 <TIM_OC1_SetConfig+0x128>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d007      	beq.n	800c948 <TIM_OC1_SetConfig+0x88>
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	4a2c      	ldr	r2, [pc, #176]	; (800c9ec <TIM_OC1_SetConfig+0x12c>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d003      	beq.n	800c948 <TIM_OC1_SetConfig+0x88>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a2b      	ldr	r2, [pc, #172]	; (800c9f0 <TIM_OC1_SetConfig+0x130>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d10c      	bne.n	800c962 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	f023 0308 	bic.w	r3, r3, #8
 800c94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	68db      	ldr	r3, [r3, #12]
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4313      	orrs	r3, r2
 800c958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f023 0304 	bic.w	r3, r3, #4
 800c960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a1d      	ldr	r2, [pc, #116]	; (800c9dc <TIM_OC1_SetConfig+0x11c>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d013      	beq.n	800c992 <TIM_OC1_SetConfig+0xd2>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a1c      	ldr	r2, [pc, #112]	; (800c9e0 <TIM_OC1_SetConfig+0x120>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d00f      	beq.n	800c992 <TIM_OC1_SetConfig+0xd2>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <TIM_OC1_SetConfig+0x124>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d00b      	beq.n	800c992 <TIM_OC1_SetConfig+0xd2>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	4a1a      	ldr	r2, [pc, #104]	; (800c9e8 <TIM_OC1_SetConfig+0x128>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d007      	beq.n	800c992 <TIM_OC1_SetConfig+0xd2>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	4a19      	ldr	r2, [pc, #100]	; (800c9ec <TIM_OC1_SetConfig+0x12c>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d003      	beq.n	800c992 <TIM_OC1_SetConfig+0xd2>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	4a18      	ldr	r2, [pc, #96]	; (800c9f0 <TIM_OC1_SetConfig+0x130>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d111      	bne.n	800c9b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c9a2:	683b      	ldr	r3, [r7, #0]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	699b      	ldr	r3, [r3, #24]
 800c9b0:	693a      	ldr	r2, [r7, #16]
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	693a      	ldr	r2, [r7, #16]
 800c9ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685a      	ldr	r2, [r3, #4]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	697a      	ldr	r2, [r7, #20]
 800c9ce:	621a      	str	r2, [r3, #32]
}
 800c9d0:	bf00      	nop
 800c9d2:	371c      	adds	r7, #28
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr
 800c9dc:	40012c00 	.word	0x40012c00
 800c9e0:	40013400 	.word	0x40013400
 800c9e4:	40014000 	.word	0x40014000
 800c9e8:	40014400 	.word	0x40014400
 800c9ec:	40014800 	.word	0x40014800
 800c9f0:	40015000 	.word	0x40015000

0800c9f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	f023 0210 	bic.w	r2, r3, #16
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	021b      	lsls	r3, r3, #8
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f023 0320 	bic.w	r3, r3, #32
 800ca42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	689b      	ldr	r3, [r3, #8]
 800ca48:	011b      	lsls	r3, r3, #4
 800ca4a:	697a      	ldr	r2, [r7, #20]
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a2c      	ldr	r2, [pc, #176]	; (800cb04 <TIM_OC2_SetConfig+0x110>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d007      	beq.n	800ca68 <TIM_OC2_SetConfig+0x74>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a2b      	ldr	r2, [pc, #172]	; (800cb08 <TIM_OC2_SetConfig+0x114>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d003      	beq.n	800ca68 <TIM_OC2_SetConfig+0x74>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a2a      	ldr	r2, [pc, #168]	; (800cb0c <TIM_OC2_SetConfig+0x118>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d10d      	bne.n	800ca84 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	011b      	lsls	r3, r3, #4
 800ca76:	697a      	ldr	r2, [r7, #20]
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	4a1f      	ldr	r2, [pc, #124]	; (800cb04 <TIM_OC2_SetConfig+0x110>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d013      	beq.n	800cab4 <TIM_OC2_SetConfig+0xc0>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a1e      	ldr	r2, [pc, #120]	; (800cb08 <TIM_OC2_SetConfig+0x114>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d00f      	beq.n	800cab4 <TIM_OC2_SetConfig+0xc0>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	4a1e      	ldr	r2, [pc, #120]	; (800cb10 <TIM_OC2_SetConfig+0x11c>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d00b      	beq.n	800cab4 <TIM_OC2_SetConfig+0xc0>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <TIM_OC2_SetConfig+0x120>)
 800caa0:	4293      	cmp	r3, r2
 800caa2:	d007      	beq.n	800cab4 <TIM_OC2_SetConfig+0xc0>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4a1c      	ldr	r2, [pc, #112]	; (800cb18 <TIM_OC2_SetConfig+0x124>)
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d003      	beq.n	800cab4 <TIM_OC2_SetConfig+0xc0>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	4a17      	ldr	r2, [pc, #92]	; (800cb0c <TIM_OC2_SetConfig+0x118>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d113      	bne.n	800cadc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800caba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	4313      	orrs	r3, r2
 800cace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	4313      	orrs	r3, r2
 800cada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	693a      	ldr	r2, [r7, #16]
 800cae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68fa      	ldr	r2, [r7, #12]
 800cae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	697a      	ldr	r2, [r7, #20]
 800caf4:	621a      	str	r2, [r3, #32]
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	40012c00 	.word	0x40012c00
 800cb08:	40013400 	.word	0x40013400
 800cb0c:	40015000 	.word	0x40015000
 800cb10:	40014000 	.word	0x40014000
 800cb14:	40014400 	.word	0x40014400
 800cb18:	40014800 	.word	0x40014800

0800cb1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a1b      	ldr	r3, [r3, #32]
 800cb36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cb68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	689b      	ldr	r3, [r3, #8]
 800cb6e:	021b      	lsls	r3, r3, #8
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a2b      	ldr	r2, [pc, #172]	; (800cc28 <TIM_OC3_SetConfig+0x10c>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d007      	beq.n	800cb8e <TIM_OC3_SetConfig+0x72>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a2a      	ldr	r2, [pc, #168]	; (800cc2c <TIM_OC3_SetConfig+0x110>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d003      	beq.n	800cb8e <TIM_OC3_SetConfig+0x72>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a29      	ldr	r2, [pc, #164]	; (800cc30 <TIM_OC3_SetConfig+0x114>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d10d      	bne.n	800cbaa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cb94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	021b      	lsls	r3, r3, #8
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a1e      	ldr	r2, [pc, #120]	; (800cc28 <TIM_OC3_SetConfig+0x10c>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d013      	beq.n	800cbda <TIM_OC3_SetConfig+0xbe>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a1d      	ldr	r2, [pc, #116]	; (800cc2c <TIM_OC3_SetConfig+0x110>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d00f      	beq.n	800cbda <TIM_OC3_SetConfig+0xbe>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a1d      	ldr	r2, [pc, #116]	; (800cc34 <TIM_OC3_SetConfig+0x118>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d00b      	beq.n	800cbda <TIM_OC3_SetConfig+0xbe>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a1c      	ldr	r2, [pc, #112]	; (800cc38 <TIM_OC3_SetConfig+0x11c>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d007      	beq.n	800cbda <TIM_OC3_SetConfig+0xbe>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a1b      	ldr	r2, [pc, #108]	; (800cc3c <TIM_OC3_SetConfig+0x120>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d003      	beq.n	800cbda <TIM_OC3_SetConfig+0xbe>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a16      	ldr	r2, [pc, #88]	; (800cc30 <TIM_OC3_SetConfig+0x114>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d113      	bne.n	800cc02 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cbe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	011b      	lsls	r3, r3, #4
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	693a      	ldr	r2, [r7, #16]
 800cc06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	621a      	str	r2, [r3, #32]
}
 800cc1c:	bf00      	nop
 800cc1e:	371c      	adds	r7, #28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr
 800cc28:	40012c00 	.word	0x40012c00
 800cc2c:	40013400 	.word	0x40013400
 800cc30:	40015000 	.word	0x40015000
 800cc34:	40014000 	.word	0x40014000
 800cc38:	40014400 	.word	0x40014400
 800cc3c:	40014800 	.word	0x40014800

0800cc40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b087      	sub	sp, #28
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cc8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	031b      	lsls	r3, r3, #12
 800cc96:	697a      	ldr	r2, [r7, #20]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a2c      	ldr	r2, [pc, #176]	; (800cd50 <TIM_OC4_SetConfig+0x110>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d007      	beq.n	800ccb4 <TIM_OC4_SetConfig+0x74>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4a2b      	ldr	r2, [pc, #172]	; (800cd54 <TIM_OC4_SetConfig+0x114>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d003      	beq.n	800ccb4 <TIM_OC4_SetConfig+0x74>
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	4a2a      	ldr	r2, [pc, #168]	; (800cd58 <TIM_OC4_SetConfig+0x118>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d10d      	bne.n	800ccd0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ccba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	031b      	lsls	r3, r3, #12
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ccce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a1f      	ldr	r2, [pc, #124]	; (800cd50 <TIM_OC4_SetConfig+0x110>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d013      	beq.n	800cd00 <TIM_OC4_SetConfig+0xc0>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a1e      	ldr	r2, [pc, #120]	; (800cd54 <TIM_OC4_SetConfig+0x114>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d00f      	beq.n	800cd00 <TIM_OC4_SetConfig+0xc0>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a1e      	ldr	r2, [pc, #120]	; (800cd5c <TIM_OC4_SetConfig+0x11c>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d00b      	beq.n	800cd00 <TIM_OC4_SetConfig+0xc0>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a1d      	ldr	r2, [pc, #116]	; (800cd60 <TIM_OC4_SetConfig+0x120>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d007      	beq.n	800cd00 <TIM_OC4_SetConfig+0xc0>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a1c      	ldr	r2, [pc, #112]	; (800cd64 <TIM_OC4_SetConfig+0x124>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d003      	beq.n	800cd00 <TIM_OC4_SetConfig+0xc0>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	4a17      	ldr	r2, [pc, #92]	; (800cd58 <TIM_OC4_SetConfig+0x118>)
 800ccfc:	4293      	cmp	r3, r2
 800ccfe:	d113      	bne.n	800cd28 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	695b      	ldr	r3, [r3, #20]
 800cd14:	019b      	lsls	r3, r3, #6
 800cd16:	693a      	ldr	r2, [r7, #16]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	019b      	lsls	r3, r3, #6
 800cd22:	693a      	ldr	r2, [r7, #16]
 800cd24:	4313      	orrs	r3, r2
 800cd26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	621a      	str	r2, [r3, #32]
}
 800cd42:	bf00      	nop
 800cd44:	371c      	adds	r7, #28
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	40012c00 	.word	0x40012c00
 800cd54:	40013400 	.word	0x40013400
 800cd58:	40015000 	.word	0x40015000
 800cd5c:	40014000 	.word	0x40014000
 800cd60:	40014400 	.word	0x40014400
 800cd64:	40014800 	.word	0x40014800

0800cd68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b087      	sub	sp, #28
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6a1b      	ldr	r3, [r3, #32]
 800cd76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	68fa      	ldr	r2, [r7, #12]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cda6:	693b      	ldr	r3, [r7, #16]
 800cda8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cdac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	041b      	lsls	r3, r3, #16
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4a19      	ldr	r2, [pc, #100]	; (800ce24 <TIM_OC5_SetConfig+0xbc>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d013      	beq.n	800cdea <TIM_OC5_SetConfig+0x82>
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a18      	ldr	r2, [pc, #96]	; (800ce28 <TIM_OC5_SetConfig+0xc0>)
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d00f      	beq.n	800cdea <TIM_OC5_SetConfig+0x82>
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a17      	ldr	r2, [pc, #92]	; (800ce2c <TIM_OC5_SetConfig+0xc4>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d00b      	beq.n	800cdea <TIM_OC5_SetConfig+0x82>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a16      	ldr	r2, [pc, #88]	; (800ce30 <TIM_OC5_SetConfig+0xc8>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d007      	beq.n	800cdea <TIM_OC5_SetConfig+0x82>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a15      	ldr	r2, [pc, #84]	; (800ce34 <TIM_OC5_SetConfig+0xcc>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d003      	beq.n	800cdea <TIM_OC5_SetConfig+0x82>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a14      	ldr	r2, [pc, #80]	; (800ce38 <TIM_OC5_SetConfig+0xd0>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d109      	bne.n	800cdfe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	695b      	ldr	r3, [r3, #20]
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	697a      	ldr	r2, [r7, #20]
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	697a      	ldr	r2, [r7, #20]
 800ce02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	693a      	ldr	r2, [r7, #16]
 800ce16:	621a      	str	r2, [r3, #32]
}
 800ce18:	bf00      	nop
 800ce1a:	371c      	adds	r7, #28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	40012c00 	.word	0x40012c00
 800ce28:	40013400 	.word	0x40013400
 800ce2c:	40014000 	.word	0x40014000
 800ce30:	40014400 	.word	0x40014400
 800ce34:	40014800 	.word	0x40014800
 800ce38:	40015000 	.word	0x40015000

0800ce3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b087      	sub	sp, #28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6a1b      	ldr	r3, [r3, #32]
 800ce56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ce6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ce6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	021b      	lsls	r3, r3, #8
 800ce76:	68fa      	ldr	r2, [r7, #12]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ce82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	689b      	ldr	r3, [r3, #8]
 800ce88:	051b      	lsls	r3, r3, #20
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	4a1a      	ldr	r2, [pc, #104]	; (800cefc <TIM_OC6_SetConfig+0xc0>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d013      	beq.n	800cec0 <TIM_OC6_SetConfig+0x84>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	4a19      	ldr	r2, [pc, #100]	; (800cf00 <TIM_OC6_SetConfig+0xc4>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d00f      	beq.n	800cec0 <TIM_OC6_SetConfig+0x84>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a18      	ldr	r2, [pc, #96]	; (800cf04 <TIM_OC6_SetConfig+0xc8>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d00b      	beq.n	800cec0 <TIM_OC6_SetConfig+0x84>
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <TIM_OC6_SetConfig+0xcc>)
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d007      	beq.n	800cec0 <TIM_OC6_SetConfig+0x84>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4a16      	ldr	r2, [pc, #88]	; (800cf0c <TIM_OC6_SetConfig+0xd0>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d003      	beq.n	800cec0 <TIM_OC6_SetConfig+0x84>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	4a15      	ldr	r2, [pc, #84]	; (800cf10 <TIM_OC6_SetConfig+0xd4>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d109      	bne.n	800ced4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cec6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	029b      	lsls	r3, r3, #10
 800cece:	697a      	ldr	r2, [r7, #20]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	685a      	ldr	r2, [r3, #4]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	693a      	ldr	r2, [r7, #16]
 800ceec:	621a      	str	r2, [r3, #32]
}
 800ceee:	bf00      	nop
 800cef0:	371c      	adds	r7, #28
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	40012c00 	.word	0x40012c00
 800cf00:	40013400 	.word	0x40013400
 800cf04:	40014000 	.word	0x40014000
 800cf08:	40014400 	.word	0x40014400
 800cf0c:	40014800 	.word	0x40014800
 800cf10:	40015000 	.word	0x40015000

0800cf14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b087      	sub	sp, #28
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	f003 031f 	and.w	r3, r3, #31
 800cf26:	2201      	movs	r2, #1
 800cf28:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6a1a      	ldr	r2, [r3, #32]
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	43db      	mvns	r3, r3
 800cf36:	401a      	ands	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6a1a      	ldr	r2, [r3, #32]
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f003 031f 	and.w	r3, r3, #31
 800cf46:	6879      	ldr	r1, [r7, #4]
 800cf48:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	621a      	str	r2, [r3, #32]
}
 800cf52:	bf00      	nop
 800cf54:	371c      	adds	r7, #28
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
	...

0800cf60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d101      	bne.n	800cf78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf74:	2302      	movs	r3, #2
 800cf76:	e074      	b.n	800d062 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2202      	movs	r2, #2
 800cf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	685b      	ldr	r3, [r3, #4]
 800cf8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	689b      	ldr	r3, [r3, #8]
 800cf96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a34      	ldr	r2, [pc, #208]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d009      	beq.n	800cfb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a33      	ldr	r2, [pc, #204]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d004      	beq.n	800cfb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a31      	ldr	r2, [pc, #196]	; (800d078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d108      	bne.n	800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cfbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cfce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	68fa      	ldr	r2, [r7, #12]
 800cfe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a21      	ldr	r2, [pc, #132]	; (800d070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d022      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cff8:	d01d      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a1f      	ldr	r2, [pc, #124]	; (800d07c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d018      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a1d      	ldr	r2, [pc, #116]	; (800d080 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d013      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a1c      	ldr	r2, [pc, #112]	; (800d084 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d00e      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a15      	ldr	r2, [pc, #84]	; (800d074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d009      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a18      	ldr	r2, [pc, #96]	; (800d088 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d004      	beq.n	800d036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4a11      	ldr	r2, [pc, #68]	; (800d078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d10c      	bne.n	800d050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d03c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	4313      	orrs	r3, r2
 800d046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68ba      	ldr	r2, [r7, #8]
 800d04e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	40012c00 	.word	0x40012c00
 800d074:	40013400 	.word	0x40013400
 800d078:	40015000 	.word	0x40015000
 800d07c:	40000400 	.word	0x40000400
 800d080:	40000800 	.word	0x40000800
 800d084:	40000c00 	.word	0x40000c00
 800d088:	40014000 	.word	0x40014000

0800d08c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d094:	bf00      	nop
 800d096:	370c      	adds	r7, #12
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b083      	sub	sp, #12
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d0a8:	bf00      	nop
 800d0aa:	370c      	adds	r7, #12
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b2:	4770      	bx	lr

0800d0b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b083      	sub	sp, #12
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d0e4:	bf00      	nop
 800d0e6:	370c      	adds	r7, #12
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ee:	4770      	bx	lr

0800d0f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d0f8:	bf00      	nop
 800d0fa:	370c      	adds	r7, #12
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr

0800d104 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d101      	bne.n	800d12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	e042      	b.n	800d1b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d130:	2b00      	cmp	r3, #0
 800d132:	d106      	bne.n	800d142 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f7fa fe81 	bl	8007e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2224      	movs	r2, #36	; 0x24
 800d146:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681a      	ldr	r2, [r3, #0]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f022 0201 	bic.w	r2, r2, #1
 800d158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fbc4 	bl	800d8e8 <UART_SetConfig>
 800d160:	4603      	mov	r3, r0
 800d162:	2b01      	cmp	r3, #1
 800d164:	d101      	bne.n	800d16a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e022      	b.n	800d1b0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d002      	beq.n	800d178 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 feb4 	bl	800dee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f042 0201 	orr.w	r2, r2, #1
 800d1a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 ff3b 	bl	800e024 <UART_CheckIdleState>
 800d1ae:	4603      	mov	r3, r0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3708      	adds	r7, #8
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b08a      	sub	sp, #40	; 0x28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	d142      	bne.n	800d256 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d002      	beq.n	800d1dc <HAL_UART_Receive_IT+0x24>
 800d1d6:	88fb      	ldrh	r3, [r7, #6]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d101      	bne.n	800d1e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	e03b      	b.n	800d258 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d1e6:	2b01      	cmp	r3, #1
 800d1e8:	d101      	bne.n	800d1ee <HAL_UART_Receive_IT+0x36>
 800d1ea:	2302      	movs	r3, #2
 800d1ec:	e034      	b.n	800d258 <HAL_UART_Receive_IT+0xa0>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a17      	ldr	r2, [pc, #92]	; (800d260 <HAL_UART_Receive_IT+0xa8>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d01f      	beq.n	800d246 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d018      	beq.n	800d246 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	e853 3f00 	ldrex	r3, [r3]
 800d220:	613b      	str	r3, [r7, #16]
   return(result);
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d228:	627b      	str	r3, [r7, #36]	; 0x24
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d232:	623b      	str	r3, [r7, #32]
 800d234:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d236:	69f9      	ldr	r1, [r7, #28]
 800d238:	6a3a      	ldr	r2, [r7, #32]
 800d23a:	e841 2300 	strex	r3, r2, [r1]
 800d23e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1e6      	bne.n	800d214 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d246:	88fb      	ldrh	r3, [r7, #6]
 800d248:	461a      	mov	r2, r3
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 fffd 	bl	800e24c <UART_Start_Receive_IT>
 800d252:	4603      	mov	r3, r0
 800d254:	e000      	b.n	800d258 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d256:	2302      	movs	r3, #2
  }
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3728      	adds	r7, #40	; 0x28
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}
 800d260:	40008000 	.word	0x40008000

0800d264 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b0ba      	sub	sp, #232	; 0xe8
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	69db      	ldr	r3, [r3, #28]
 800d272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d28a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d28e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d292:	4013      	ands	r3, r2
 800d294:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d298:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d11b      	bne.n	800d2d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d015      	beq.n	800d2d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d2ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d2b0:	f003 0320 	and.w	r3, r3, #32
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d105      	bne.n	800d2c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d2b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d2bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d009      	beq.n	800d2d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 82d6 	beq.w	800d87a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
      }
      return;
 800d2d6:	e2d0      	b.n	800d87a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 811f 	beq.w	800d520 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d2e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d2e6:	4b8b      	ldr	r3, [pc, #556]	; (800d514 <HAL_UART_IRQHandler+0x2b0>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d2ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d2f2:	4b89      	ldr	r3, [pc, #548]	; (800d518 <HAL_UART_IRQHandler+0x2b4>)
 800d2f4:	4013      	ands	r3, r2
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	f000 8112 	beq.w	800d520 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d300:	f003 0301 	and.w	r3, r3, #1
 800d304:	2b00      	cmp	r3, #0
 800d306:	d011      	beq.n	800d32c <HAL_UART_IRQHandler+0xc8>
 800d308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00b      	beq.n	800d32c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2201      	movs	r2, #1
 800d31a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d322:	f043 0201 	orr.w	r2, r3, #1
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d32c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d330:	f003 0302 	and.w	r3, r3, #2
 800d334:	2b00      	cmp	r3, #0
 800d336:	d011      	beq.n	800d35c <HAL_UART_IRQHandler+0xf8>
 800d338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00b      	beq.n	800d35c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	2202      	movs	r2, #2
 800d34a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d352:	f043 0204 	orr.w	r2, r3, #4
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d35c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d011      	beq.n	800d38c <HAL_UART_IRQHandler+0x128>
 800d368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00b      	beq.n	800d38c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2204      	movs	r2, #4
 800d37a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d382:	f043 0202 	orr.w	r2, r3, #2
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d390:	f003 0308 	and.w	r3, r3, #8
 800d394:	2b00      	cmp	r3, #0
 800d396:	d017      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d105      	bne.n	800d3b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d3a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3a8:	4b5a      	ldr	r3, [pc, #360]	; (800d514 <HAL_UART_IRQHandler+0x2b0>)
 800d3aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00b      	beq.n	800d3c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2208      	movs	r2, #8
 800d3b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3be:	f043 0208 	orr.w	r2, r3, #8
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d012      	beq.n	800d3fa <HAL_UART_IRQHandler+0x196>
 800d3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00c      	beq.n	800d3fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3f0:	f043 0220 	orr.w	r2, r3, #32
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d400:	2b00      	cmp	r3, #0
 800d402:	f000 823c 	beq.w	800d87e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d40a:	f003 0320 	and.w	r3, r3, #32
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d013      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d416:	f003 0320 	and.w	r3, r3, #32
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d426:	2b00      	cmp	r3, #0
 800d428:	d007      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d440:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d44e:	2b40      	cmp	r3, #64	; 0x40
 800d450:	d005      	beq.n	800d45e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d452:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d456:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d04f      	beq.n	800d4fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f001 f81e 	bl	800e4a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d46e:	2b40      	cmp	r3, #64	; 0x40
 800d470:	d141      	bne.n	800d4f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	3308      	adds	r3, #8
 800d478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d480:	e853 3f00 	ldrex	r3, [r3]
 800d484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d48c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	3308      	adds	r3, #8
 800d49a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d49e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d4a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d4aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d4b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1d9      	bne.n	800d472 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d013      	beq.n	800d4ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4ca:	4a14      	ldr	r2, [pc, #80]	; (800d51c <HAL_UART_IRQHandler+0x2b8>)
 800d4cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fc fa6c 	bl	80099b0 <HAL_DMA_Abort_IT>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d017      	beq.n	800d50e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ec:	e00f      	b.n	800d50e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 f9e4 	bl	800d8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4f4:	e00b      	b.n	800d50e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 f9e0 	bl	800d8bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4fc:	e007      	b.n	800d50e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f9dc 	bl	800d8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d50c:	e1b7      	b.n	800d87e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d50e:	bf00      	nop
    return;
 800d510:	e1b5      	b.n	800d87e <HAL_UART_IRQHandler+0x61a>
 800d512:	bf00      	nop
 800d514:	10000001 	.word	0x10000001
 800d518:	04000120 	.word	0x04000120
 800d51c:	0800e56d 	.word	0x0800e56d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d524:	2b01      	cmp	r3, #1
 800d526:	f040 814a 	bne.w	800d7be <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d52e:	f003 0310 	and.w	r3, r3, #16
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 8143 	beq.w	800d7be <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d53c:	f003 0310 	and.w	r3, r3, #16
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 813c 	beq.w	800d7be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2210      	movs	r2, #16
 800d54c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d558:	2b40      	cmp	r3, #64	; 0x40
 800d55a:	f040 80b5 	bne.w	800d6c8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d56a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 8187 	beq.w	800d882 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d57a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d57e:	429a      	cmp	r2, r3
 800d580:	f080 817f 	bcs.w	800d882 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d58a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f003 0320 	and.w	r3, r3, #32
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	f040 8086 	bne.w	800d6ac <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d5b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d5b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d5ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d5ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d5d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d5da:	e841 2300 	strex	r3, r2, [r1]
 800d5de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d5e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1da      	bne.n	800d5a0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	3308      	adds	r3, #8
 800d5f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d5f4:	e853 3f00 	ldrex	r3, [r3]
 800d5f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d5fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5fc:	f023 0301 	bic.w	r3, r3, #1
 800d600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3308      	adds	r3, #8
 800d60a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d60e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d61a:	e841 2300 	strex	r3, r2, [r1]
 800d61e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1e1      	bne.n	800d5ea <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	3308      	adds	r3, #8
 800d62c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d62e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d630:	e853 3f00 	ldrex	r3, [r3]
 800d634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d63c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3308      	adds	r3, #8
 800d646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d64a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d64c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d64e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d652:	e841 2300 	strex	r3, r2, [r1]
 800d656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d1e3      	bne.n	800d626 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2220      	movs	r2, #32
 800d662:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2200      	movs	r2, #0
 800d66a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d674:	e853 3f00 	ldrex	r3, [r3]
 800d678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d67c:	f023 0310 	bic.w	r3, r3, #16
 800d680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d68e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d690:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d696:	e841 2300 	strex	r3, r2, [r1]
 800d69a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d1e4      	bne.n	800d66c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7fc f929 	bl	80098fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	1ad3      	subs	r3, r2, r3
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f905 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6c6:	e0dc      	b.n	800d882 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	1ad3      	subs	r3, r2, r3
 800d6d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f000 80ce 	beq.w	800d886 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800d6ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 80c9 	beq.w	800d886 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fc:	e853 3f00 	ldrex	r3, [r3]
 800d700:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d708:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d716:	647b      	str	r3, [r7, #68]	; 0x44
 800d718:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d71c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d71e:	e841 2300 	strex	r3, r2, [r1]
 800d722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d1e4      	bne.n	800d6f4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	3308      	adds	r3, #8
 800d730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	e853 3f00 	ldrex	r3, [r3]
 800d738:	623b      	str	r3, [r7, #32]
   return(result);
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d740:	f023 0301 	bic.w	r3, r3, #1
 800d744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3308      	adds	r3, #8
 800d74e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d752:	633a      	str	r2, [r7, #48]	; 0x30
 800d754:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d75a:	e841 2300 	strex	r3, r2, [r1]
 800d75e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1e1      	bne.n	800d72a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2200      	movs	r2, #0
 800d778:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	e853 3f00 	ldrex	r3, [r3]
 800d786:	60fb      	str	r3, [r7, #12]
   return(result);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f023 0310 	bic.w	r3, r3, #16
 800d78e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	461a      	mov	r2, r3
 800d798:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d79c:	61fb      	str	r3, [r7, #28]
 800d79e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a0:	69b9      	ldr	r1, [r7, #24]
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	e841 2300 	strex	r3, r2, [r1]
 800d7a8:	617b      	str	r3, [r7, #20]
   return(result);
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d1e4      	bne.n	800d77a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d7b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 f88a 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7bc:	e063      	b.n	800d886 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00e      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x584>
 800d7ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d7ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d008      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d7de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f001 fb61 	bl	800eea8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7e6:	e051      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d7e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d014      	beq.n	800d81e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d7f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d105      	bne.n	800d80c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d008      	beq.n	800d81e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d810:	2b00      	cmp	r3, #0
 800d812:	d03a      	beq.n	800d88a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	4798      	blx	r3
    }
    return;
 800d81c:	e035      	b.n	800d88a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d826:	2b00      	cmp	r3, #0
 800d828:	d009      	beq.n	800d83e <HAL_UART_IRQHandler+0x5da>
 800d82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d82e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 feae 	bl	800e598 <UART_EndTransmit_IT>
    return;
 800d83c:	e026      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d83e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d842:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d846:	2b00      	cmp	r3, #0
 800d848:	d009      	beq.n	800d85e <HAL_UART_IRQHandler+0x5fa>
 800d84a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d84e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d852:	2b00      	cmp	r3, #0
 800d854:	d003      	beq.n	800d85e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f001 fb3a 	bl	800eed0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d85c:	e016      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d85e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d866:	2b00      	cmp	r3, #0
 800d868:	d010      	beq.n	800d88c <HAL_UART_IRQHandler+0x628>
 800d86a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	da0c      	bge.n	800d88c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f001 fb22 	bl	800eebc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d878:	e008      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
      return;
 800d87a:	bf00      	nop
 800d87c:	e006      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
    return;
 800d87e:	bf00      	nop
 800d880:	e004      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
      return;
 800d882:	bf00      	nop
 800d884:	e002      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
      return;
 800d886:	bf00      	nop
 800d888:	e000      	b.n	800d88c <HAL_UART_IRQHandler+0x628>
    return;
 800d88a:	bf00      	nop
  }
}
 800d88c:	37e8      	adds	r7, #232	; 0xe8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop

0800d894 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d89c:	bf00      	nop
 800d89e:	370c      	adds	r7, #12
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d8c4:	bf00      	nop
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	460b      	mov	r3, r1
 800d8da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8ec:	b08c      	sub	sp, #48	; 0x30
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	689a      	ldr	r2, [r3, #8]
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	431a      	orrs	r2, r3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	431a      	orrs	r2, r3
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	69db      	ldr	r3, [r3, #28]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4baa      	ldr	r3, [pc, #680]	; (800dbc0 <UART_SetConfig+0x2d8>)
 800d918:	4013      	ands	r3, r2
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	6812      	ldr	r2, [r2, #0]
 800d91e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d920:	430b      	orrs	r3, r1
 800d922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685b      	ldr	r3, [r3, #4]
 800d92a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	68da      	ldr	r2, [r3, #12]
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	699b      	ldr	r3, [r3, #24]
 800d93e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a9f      	ldr	r2, [pc, #636]	; (800dbc4 <UART_SetConfig+0x2dc>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d004      	beq.n	800d954 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d950:	4313      	orrs	r3, r2
 800d952:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d95e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	6812      	ldr	r2, [r2, #0]
 800d966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d968:	430b      	orrs	r3, r1
 800d96a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d972:	f023 010f 	bic.w	r1, r3, #15
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	430a      	orrs	r2, r1
 800d980:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a90      	ldr	r2, [pc, #576]	; (800dbc8 <UART_SetConfig+0x2e0>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d125      	bne.n	800d9d8 <UART_SetConfig+0xf0>
 800d98c:	4b8f      	ldr	r3, [pc, #572]	; (800dbcc <UART_SetConfig+0x2e4>)
 800d98e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d992:	f003 0303 	and.w	r3, r3, #3
 800d996:	2b03      	cmp	r3, #3
 800d998:	d81a      	bhi.n	800d9d0 <UART_SetConfig+0xe8>
 800d99a:	a201      	add	r2, pc, #4	; (adr r2, 800d9a0 <UART_SetConfig+0xb8>)
 800d99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a0:	0800d9b1 	.word	0x0800d9b1
 800d9a4:	0800d9c1 	.word	0x0800d9c1
 800d9a8:	0800d9b9 	.word	0x0800d9b9
 800d9ac:	0800d9c9 	.word	0x0800d9c9
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9b6:	e116      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800d9b8:	2302      	movs	r3, #2
 800d9ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9be:	e112      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800d9c0:	2304      	movs	r3, #4
 800d9c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9c6:	e10e      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800d9c8:	2308      	movs	r3, #8
 800d9ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9ce:	e10a      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800d9d0:	2310      	movs	r3, #16
 800d9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d9d6:	e106      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a7c      	ldr	r2, [pc, #496]	; (800dbd0 <UART_SetConfig+0x2e8>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d138      	bne.n	800da54 <UART_SetConfig+0x16c>
 800d9e2:	4b7a      	ldr	r3, [pc, #488]	; (800dbcc <UART_SetConfig+0x2e4>)
 800d9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e8:	f003 030c 	and.w	r3, r3, #12
 800d9ec:	2b0c      	cmp	r3, #12
 800d9ee:	d82d      	bhi.n	800da4c <UART_SetConfig+0x164>
 800d9f0:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <UART_SetConfig+0x110>)
 800d9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f6:	bf00      	nop
 800d9f8:	0800da2d 	.word	0x0800da2d
 800d9fc:	0800da4d 	.word	0x0800da4d
 800da00:	0800da4d 	.word	0x0800da4d
 800da04:	0800da4d 	.word	0x0800da4d
 800da08:	0800da3d 	.word	0x0800da3d
 800da0c:	0800da4d 	.word	0x0800da4d
 800da10:	0800da4d 	.word	0x0800da4d
 800da14:	0800da4d 	.word	0x0800da4d
 800da18:	0800da35 	.word	0x0800da35
 800da1c:	0800da4d 	.word	0x0800da4d
 800da20:	0800da4d 	.word	0x0800da4d
 800da24:	0800da4d 	.word	0x0800da4d
 800da28:	0800da45 	.word	0x0800da45
 800da2c:	2300      	movs	r3, #0
 800da2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da32:	e0d8      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da34:	2302      	movs	r3, #2
 800da36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da3a:	e0d4      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da3c:	2304      	movs	r3, #4
 800da3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da42:	e0d0      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da44:	2308      	movs	r3, #8
 800da46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da4a:	e0cc      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da4c:	2310      	movs	r3, #16
 800da4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da52:	e0c8      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a5e      	ldr	r2, [pc, #376]	; (800dbd4 <UART_SetConfig+0x2ec>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d125      	bne.n	800daaa <UART_SetConfig+0x1c2>
 800da5e:	4b5b      	ldr	r3, [pc, #364]	; (800dbcc <UART_SetConfig+0x2e4>)
 800da60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800da68:	2b30      	cmp	r3, #48	; 0x30
 800da6a:	d016      	beq.n	800da9a <UART_SetConfig+0x1b2>
 800da6c:	2b30      	cmp	r3, #48	; 0x30
 800da6e:	d818      	bhi.n	800daa2 <UART_SetConfig+0x1ba>
 800da70:	2b20      	cmp	r3, #32
 800da72:	d00a      	beq.n	800da8a <UART_SetConfig+0x1a2>
 800da74:	2b20      	cmp	r3, #32
 800da76:	d814      	bhi.n	800daa2 <UART_SetConfig+0x1ba>
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <UART_SetConfig+0x19a>
 800da7c:	2b10      	cmp	r3, #16
 800da7e:	d008      	beq.n	800da92 <UART_SetConfig+0x1aa>
 800da80:	e00f      	b.n	800daa2 <UART_SetConfig+0x1ba>
 800da82:	2300      	movs	r3, #0
 800da84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da88:	e0ad      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da8a:	2302      	movs	r3, #2
 800da8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da90:	e0a9      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da92:	2304      	movs	r3, #4
 800da94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800da98:	e0a5      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800da9a:	2308      	movs	r3, #8
 800da9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daa0:	e0a1      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800daa2:	2310      	movs	r3, #16
 800daa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daa8:	e09d      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a4a      	ldr	r2, [pc, #296]	; (800dbd8 <UART_SetConfig+0x2f0>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d125      	bne.n	800db00 <UART_SetConfig+0x218>
 800dab4:	4b45      	ldr	r3, [pc, #276]	; (800dbcc <UART_SetConfig+0x2e4>)
 800dab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800daba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800dabe:	2bc0      	cmp	r3, #192	; 0xc0
 800dac0:	d016      	beq.n	800daf0 <UART_SetConfig+0x208>
 800dac2:	2bc0      	cmp	r3, #192	; 0xc0
 800dac4:	d818      	bhi.n	800daf8 <UART_SetConfig+0x210>
 800dac6:	2b80      	cmp	r3, #128	; 0x80
 800dac8:	d00a      	beq.n	800dae0 <UART_SetConfig+0x1f8>
 800daca:	2b80      	cmp	r3, #128	; 0x80
 800dacc:	d814      	bhi.n	800daf8 <UART_SetConfig+0x210>
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <UART_SetConfig+0x1f0>
 800dad2:	2b40      	cmp	r3, #64	; 0x40
 800dad4:	d008      	beq.n	800dae8 <UART_SetConfig+0x200>
 800dad6:	e00f      	b.n	800daf8 <UART_SetConfig+0x210>
 800dad8:	2300      	movs	r3, #0
 800dada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dade:	e082      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dae0:	2302      	movs	r3, #2
 800dae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dae6:	e07e      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dae8:	2304      	movs	r3, #4
 800daea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daee:	e07a      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800daf0:	2308      	movs	r3, #8
 800daf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800daf6:	e076      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800daf8:	2310      	movs	r3, #16
 800dafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dafe:	e072      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db00:	697b      	ldr	r3, [r7, #20]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a35      	ldr	r2, [pc, #212]	; (800dbdc <UART_SetConfig+0x2f4>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d12a      	bne.n	800db60 <UART_SetConfig+0x278>
 800db0a:	4b30      	ldr	r3, [pc, #192]	; (800dbcc <UART_SetConfig+0x2e4>)
 800db0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db18:	d01a      	beq.n	800db50 <UART_SetConfig+0x268>
 800db1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800db1e:	d81b      	bhi.n	800db58 <UART_SetConfig+0x270>
 800db20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db24:	d00c      	beq.n	800db40 <UART_SetConfig+0x258>
 800db26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db2a:	d815      	bhi.n	800db58 <UART_SetConfig+0x270>
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <UART_SetConfig+0x250>
 800db30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db34:	d008      	beq.n	800db48 <UART_SetConfig+0x260>
 800db36:	e00f      	b.n	800db58 <UART_SetConfig+0x270>
 800db38:	2300      	movs	r3, #0
 800db3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db3e:	e052      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db40:	2302      	movs	r3, #2
 800db42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db46:	e04e      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db48:	2304      	movs	r3, #4
 800db4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db4e:	e04a      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db50:	2308      	movs	r3, #8
 800db52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db56:	e046      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db58:	2310      	movs	r3, #16
 800db5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db5e:	e042      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800db60:	697b      	ldr	r3, [r7, #20]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a17      	ldr	r2, [pc, #92]	; (800dbc4 <UART_SetConfig+0x2dc>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d13a      	bne.n	800dbe0 <UART_SetConfig+0x2f8>
 800db6a:	4b18      	ldr	r3, [pc, #96]	; (800dbcc <UART_SetConfig+0x2e4>)
 800db6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800db74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db78:	d01a      	beq.n	800dbb0 <UART_SetConfig+0x2c8>
 800db7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800db7e:	d81b      	bhi.n	800dbb8 <UART_SetConfig+0x2d0>
 800db80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db84:	d00c      	beq.n	800dba0 <UART_SetConfig+0x2b8>
 800db86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db8a:	d815      	bhi.n	800dbb8 <UART_SetConfig+0x2d0>
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d003      	beq.n	800db98 <UART_SetConfig+0x2b0>
 800db90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db94:	d008      	beq.n	800dba8 <UART_SetConfig+0x2c0>
 800db96:	e00f      	b.n	800dbb8 <UART_SetConfig+0x2d0>
 800db98:	2300      	movs	r3, #0
 800db9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800db9e:	e022      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dba0:	2302      	movs	r3, #2
 800dba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dba6:	e01e      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dba8:	2304      	movs	r3, #4
 800dbaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbae:	e01a      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dbb0:	2308      	movs	r3, #8
 800dbb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbb6:	e016      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dbb8:	2310      	movs	r3, #16
 800dbba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dbbe:	e012      	b.n	800dbe6 <UART_SetConfig+0x2fe>
 800dbc0:	cfff69f3 	.word	0xcfff69f3
 800dbc4:	40008000 	.word	0x40008000
 800dbc8:	40013800 	.word	0x40013800
 800dbcc:	40021000 	.word	0x40021000
 800dbd0:	40004400 	.word	0x40004400
 800dbd4:	40004800 	.word	0x40004800
 800dbd8:	40004c00 	.word	0x40004c00
 800dbdc:	40005000 	.word	0x40005000
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4aae      	ldr	r2, [pc, #696]	; (800dea4 <UART_SetConfig+0x5bc>)
 800dbec:	4293      	cmp	r3, r2
 800dbee:	f040 8097 	bne.w	800dd20 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dbf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbf6:	2b08      	cmp	r3, #8
 800dbf8:	d823      	bhi.n	800dc42 <UART_SetConfig+0x35a>
 800dbfa:	a201      	add	r2, pc, #4	; (adr r2, 800dc00 <UART_SetConfig+0x318>)
 800dbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc00:	0800dc25 	.word	0x0800dc25
 800dc04:	0800dc43 	.word	0x0800dc43
 800dc08:	0800dc2d 	.word	0x0800dc2d
 800dc0c:	0800dc43 	.word	0x0800dc43
 800dc10:	0800dc33 	.word	0x0800dc33
 800dc14:	0800dc43 	.word	0x0800dc43
 800dc18:	0800dc43 	.word	0x0800dc43
 800dc1c:	0800dc43 	.word	0x0800dc43
 800dc20:	0800dc3b 	.word	0x0800dc3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc24:	f7fd fdb2 	bl	800b78c <HAL_RCC_GetPCLK1Freq>
 800dc28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dc2a:	e010      	b.n	800dc4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc2c:	4b9e      	ldr	r3, [pc, #632]	; (800dea8 <UART_SetConfig+0x5c0>)
 800dc2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dc30:	e00d      	b.n	800dc4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc32:	f7fd fd3d 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dc38:	e009      	b.n	800dc4e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dc3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dc40:	e005      	b.n	800dc4e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800dc42:	2300      	movs	r3, #0
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dc4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f000 8130 	beq.w	800deb6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc5a:	4a94      	ldr	r2, [pc, #592]	; (800deac <UART_SetConfig+0x5c4>)
 800dc5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc60:	461a      	mov	r2, r3
 800dc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc64:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	005b      	lsls	r3, r3, #1
 800dc72:	4413      	add	r3, r2
 800dc74:	69ba      	ldr	r2, [r7, #24]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d305      	bcc.n	800dc86 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dc80:	69ba      	ldr	r2, [r7, #24]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d903      	bls.n	800dc8e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dc8c:	e113      	b.n	800deb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	2200      	movs	r2, #0
 800dc92:	60bb      	str	r3, [r7, #8]
 800dc94:	60fa      	str	r2, [r7, #12]
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	4a84      	ldr	r2, [pc, #528]	; (800deac <UART_SetConfig+0x5c4>)
 800dc9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	2200      	movs	r2, #0
 800dca4:	603b      	str	r3, [r7, #0]
 800dca6:	607a      	str	r2, [r7, #4]
 800dca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dcb0:	f7f6 ff7c 	bl	8004bac <__aeabi_uldivmod>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4619      	mov	r1, r3
 800dcbc:	f04f 0200 	mov.w	r2, #0
 800dcc0:	f04f 0300 	mov.w	r3, #0
 800dcc4:	020b      	lsls	r3, r1, #8
 800dcc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dcca:	0202      	lsls	r2, r0, #8
 800dccc:	6979      	ldr	r1, [r7, #20]
 800dcce:	6849      	ldr	r1, [r1, #4]
 800dcd0:	0849      	lsrs	r1, r1, #1
 800dcd2:	2000      	movs	r0, #0
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	eb12 0804 	adds.w	r8, r2, r4
 800dcdc:	eb43 0905 	adc.w	r9, r3, r5
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	469a      	mov	sl, r3
 800dce8:	4693      	mov	fp, r2
 800dcea:	4652      	mov	r2, sl
 800dcec:	465b      	mov	r3, fp
 800dcee:	4640      	mov	r0, r8
 800dcf0:	4649      	mov	r1, r9
 800dcf2:	f7f6 ff5b 	bl	8004bac <__aeabi_uldivmod>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dd04:	d308      	bcc.n	800dd18 <UART_SetConfig+0x430>
 800dd06:	6a3b      	ldr	r3, [r7, #32]
 800dd08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd0c:	d204      	bcs.n	800dd18 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6a3a      	ldr	r2, [r7, #32]
 800dd14:	60da      	str	r2, [r3, #12]
 800dd16:	e0ce      	b.n	800deb6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800dd1e:	e0ca      	b.n	800deb6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	69db      	ldr	r3, [r3, #28]
 800dd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd28:	d166      	bne.n	800ddf8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dd2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd2e:	2b08      	cmp	r3, #8
 800dd30:	d827      	bhi.n	800dd82 <UART_SetConfig+0x49a>
 800dd32:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <UART_SetConfig+0x450>)
 800dd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd38:	0800dd5d 	.word	0x0800dd5d
 800dd3c:	0800dd65 	.word	0x0800dd65
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	0800dd83 	.word	0x0800dd83
 800dd48:	0800dd73 	.word	0x0800dd73
 800dd4c:	0800dd83 	.word	0x0800dd83
 800dd50:	0800dd83 	.word	0x0800dd83
 800dd54:	0800dd83 	.word	0x0800dd83
 800dd58:	0800dd7b 	.word	0x0800dd7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd5c:	f7fd fd16 	bl	800b78c <HAL_RCC_GetPCLK1Freq>
 800dd60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd62:	e014      	b.n	800dd8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd64:	f7fd fd28 	bl	800b7b8 <HAL_RCC_GetPCLK2Freq>
 800dd68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd6a:	e010      	b.n	800dd8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd6c:	4b4e      	ldr	r3, [pc, #312]	; (800dea8 <UART_SetConfig+0x5c0>)
 800dd6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd70:	e00d      	b.n	800dd8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd72:	f7fd fc9d 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800dd76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800dd78:	e009      	b.n	800dd8e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800dd80:	e005      	b.n	800dd8e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800dd82:	2300      	movs	r3, #0
 800dd84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800dd8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f000 8090 	beq.w	800deb6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9a:	4a44      	ldr	r2, [pc, #272]	; (800deac <UART_SetConfig+0x5c4>)
 800dd9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dda0:	461a      	mov	r2, r3
 800dda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dda4:	fbb3 f3f2 	udiv	r3, r3, r2
 800dda8:	005a      	lsls	r2, r3, #1
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	085b      	lsrs	r3, r3, #1
 800ddb0:	441a      	add	r2, r3
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	2b0f      	cmp	r3, #15
 800ddc0:	d916      	bls.n	800ddf0 <UART_SetConfig+0x508>
 800ddc2:	6a3b      	ldr	r3, [r7, #32]
 800ddc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddc8:	d212      	bcs.n	800ddf0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ddca:	6a3b      	ldr	r3, [r7, #32]
 800ddcc:	b29b      	uxth	r3, r3
 800ddce:	f023 030f 	bic.w	r3, r3, #15
 800ddd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	085b      	lsrs	r3, r3, #1
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	f003 0307 	and.w	r3, r3, #7
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	8bfb      	ldrh	r3, [r7, #30]
 800dde2:	4313      	orrs	r3, r2
 800dde4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	8bfa      	ldrh	r2, [r7, #30]
 800ddec:	60da      	str	r2, [r3, #12]
 800ddee:	e062      	b.n	800deb6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ddf6:	e05e      	b.n	800deb6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddfc:	2b08      	cmp	r3, #8
 800ddfe:	d828      	bhi.n	800de52 <UART_SetConfig+0x56a>
 800de00:	a201      	add	r2, pc, #4	; (adr r2, 800de08 <UART_SetConfig+0x520>)
 800de02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de06:	bf00      	nop
 800de08:	0800de2d 	.word	0x0800de2d
 800de0c:	0800de35 	.word	0x0800de35
 800de10:	0800de3d 	.word	0x0800de3d
 800de14:	0800de53 	.word	0x0800de53
 800de18:	0800de43 	.word	0x0800de43
 800de1c:	0800de53 	.word	0x0800de53
 800de20:	0800de53 	.word	0x0800de53
 800de24:	0800de53 	.word	0x0800de53
 800de28:	0800de4b 	.word	0x0800de4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de2c:	f7fd fcae 	bl	800b78c <HAL_RCC_GetPCLK1Freq>
 800de30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de32:	e014      	b.n	800de5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de34:	f7fd fcc0 	bl	800b7b8 <HAL_RCC_GetPCLK2Freq>
 800de38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de3a:	e010      	b.n	800de5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800de3c:	4b1a      	ldr	r3, [pc, #104]	; (800dea8 <UART_SetConfig+0x5c0>)
 800de3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de40:	e00d      	b.n	800de5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800de42:	f7fd fc35 	bl	800b6b0 <HAL_RCC_GetSysClockFreq>
 800de46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800de48:	e009      	b.n	800de5e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800de50:	e005      	b.n	800de5e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800de5c:	bf00      	nop
    }

    if (pclk != 0U)
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d028      	beq.n	800deb6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	4a10      	ldr	r2, [pc, #64]	; (800deac <UART_SetConfig+0x5c4>)
 800de6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de6e:	461a      	mov	r2, r3
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	fbb3 f2f2 	udiv	r2, r3, r2
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	085b      	lsrs	r3, r3, #1
 800de7c:	441a      	add	r2, r3
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	fbb2 f3f3 	udiv	r3, r2, r3
 800de86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	2b0f      	cmp	r3, #15
 800de8c:	d910      	bls.n	800deb0 <UART_SetConfig+0x5c8>
 800de8e:	6a3b      	ldr	r3, [r7, #32]
 800de90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de94:	d20c      	bcs.n	800deb0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de96:	6a3b      	ldr	r3, [r7, #32]
 800de98:	b29a      	uxth	r2, r3
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	60da      	str	r2, [r3, #12]
 800dea0:	e009      	b.n	800deb6 <UART_SetConfig+0x5ce>
 800dea2:	bf00      	nop
 800dea4:	40008000 	.word	0x40008000
 800dea8:	00f42400 	.word	0x00f42400
 800deac:	080124e0 	.word	0x080124e0
      }
      else
      {
        ret = HAL_ERROR;
 800deb0:	2301      	movs	r3, #1
 800deb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	2201      	movs	r2, #1
 800deba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2201      	movs	r2, #1
 800dec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2200      	movs	r2, #0
 800deca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2200      	movs	r2, #0
 800ded0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ded2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3730      	adds	r7, #48	; 0x30
 800deda:	46bd      	mov	sp, r7
 800dedc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b083      	sub	sp, #12
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deec:	f003 0301 	and.w	r3, r3, #1
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00a      	beq.n	800df0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	430a      	orrs	r2, r1
 800df08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df0e:	f003 0302 	and.w	r3, r3, #2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00a      	beq.n	800df2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	430a      	orrs	r2, r1
 800df2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df30:	f003 0304 	and.w	r3, r3, #4
 800df34:	2b00      	cmp	r3, #0
 800df36:	d00a      	beq.n	800df4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	430a      	orrs	r2, r1
 800df4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df52:	f003 0308 	and.w	r3, r3, #8
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00a      	beq.n	800df70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	685b      	ldr	r3, [r3, #4]
 800df60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df74:	f003 0310 	and.w	r3, r3, #16
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00a      	beq.n	800df92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	430a      	orrs	r2, r1
 800df90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df96:	f003 0320 	and.w	r3, r3, #32
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	689b      	ldr	r3, [r3, #8]
 800dfa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	430a      	orrs	r2, r1
 800dfb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01a      	beq.n	800dff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	430a      	orrs	r2, r1
 800dfd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfde:	d10a      	bne.n	800dff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	430a      	orrs	r2, r1
 800dff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00a      	beq.n	800e018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	430a      	orrs	r2, r1
 800e016:	605a      	str	r2, [r3, #4]
  }
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b086      	sub	sp, #24
 800e028:	af02      	add	r7, sp, #8
 800e02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2200      	movs	r2, #0
 800e030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e034:	f7fa f826 	bl	8008084 <HAL_GetTick>
 800e038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0308 	and.w	r3, r3, #8
 800e044:	2b08      	cmp	r3, #8
 800e046:	d10e      	bne.n	800e066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e04c:	9300      	str	r3, [sp, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f82f 	bl	800e0ba <UART_WaitOnFlagUntilTimeout>
 800e05c:	4603      	mov	r3, r0
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d001      	beq.n	800e066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e062:	2303      	movs	r3, #3
 800e064:	e025      	b.n	800e0b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f003 0304 	and.w	r3, r3, #4
 800e070:	2b04      	cmp	r3, #4
 800e072:	d10e      	bne.n	800e092 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e078:	9300      	str	r3, [sp, #0]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f000 f819 	bl	800e0ba <UART_WaitOnFlagUntilTimeout>
 800e088:	4603      	mov	r3, r0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d001      	beq.n	800e092 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e08e:	2303      	movs	r3, #3
 800e090:	e00f      	b.n	800e0b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2220      	movs	r2, #32
 800e096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2220      	movs	r2, #32
 800e09e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e0b0:	2300      	movs	r3, #0
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b09c      	sub	sp, #112	; 0x70
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	603b      	str	r3, [r7, #0]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0ca:	e0a9      	b.n	800e220 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0d2:	f000 80a5 	beq.w	800e220 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0d6:	f7f9 ffd5 	bl	8008084 <HAL_GetTick>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d302      	bcc.n	800e0ec <UART_WaitOnFlagUntilTimeout+0x32>
 800e0e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d140      	bne.n	800e16e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f4:	e853 3f00 	ldrex	r3, [r3]
 800e0f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e100:	667b      	str	r3, [r7, #100]	; 0x64
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	461a      	mov	r2, r3
 800e108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e10a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e10c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e10e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e112:	e841 2300 	strex	r3, r2, [r1]
 800e116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1e6      	bne.n	800e0ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	3308      	adds	r3, #8
 800e124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e128:	e853 3f00 	ldrex	r3, [r3]
 800e12c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e130:	f023 0301 	bic.w	r3, r3, #1
 800e134:	663b      	str	r3, [r7, #96]	; 0x60
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	3308      	adds	r3, #8
 800e13c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e13e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e146:	e841 2300 	strex	r3, r2, [r1]
 800e14a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1e5      	bne.n	800e11e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2220      	movs	r2, #32
 800e156:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2220      	movs	r2, #32
 800e15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e069      	b.n	800e242 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f003 0304 	and.w	r3, r3, #4
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d051      	beq.n	800e220 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	69db      	ldr	r3, [r3, #28]
 800e182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e18a:	d149      	bne.n	800e220 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e194:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19e:	e853 3f00 	ldrex	r3, [r3]
 800e1a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e1b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1bc:	e841 2300 	strex	r3, r2, [r1]
 800e1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1e6      	bne.n	800e196 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	3308      	adds	r3, #8
 800e1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	e853 3f00 	ldrex	r3, [r3]
 800e1d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	f023 0301 	bic.w	r3, r3, #1
 800e1de:	66bb      	str	r3, [r7, #104]	; 0x68
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	3308      	adds	r3, #8
 800e1e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e1e8:	623a      	str	r2, [r7, #32]
 800e1ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ec:	69f9      	ldr	r1, [r7, #28]
 800e1ee:	6a3a      	ldr	r2, [r7, #32]
 800e1f0:	e841 2300 	strex	r3, r2, [r1]
 800e1f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1e5      	bne.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2220      	movs	r2, #32
 800e200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2220      	movs	r2, #32
 800e208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2220      	movs	r2, #32
 800e210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e21c:	2303      	movs	r3, #3
 800e21e:	e010      	b.n	800e242 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	69da      	ldr	r2, [r3, #28]
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	4013      	ands	r3, r2
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	bf0c      	ite	eq
 800e230:	2301      	moveq	r3, #1
 800e232:	2300      	movne	r3, #0
 800e234:	b2db      	uxtb	r3, r3
 800e236:	461a      	mov	r2, r3
 800e238:	79fb      	ldrb	r3, [r7, #7]
 800e23a:	429a      	cmp	r2, r3
 800e23c:	f43f af46 	beq.w	800e0cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e240:	2300      	movs	r3, #0
}
 800e242:	4618      	mov	r0, r3
 800e244:	3770      	adds	r7, #112	; 0x70
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
	...

0800e24c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b0a3      	sub	sp, #140	; 0x8c
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	4613      	mov	r3, r2
 800e258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	88fa      	ldrh	r2, [r7, #6]
 800e264:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	88fa      	ldrh	r2, [r7, #6]
 800e26c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e27e:	d10e      	bne.n	800e29e <UART_Start_Receive_IT+0x52>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d105      	bne.n	800e294 <UART_Start_Receive_IT+0x48>
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e28e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e292:	e02d      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	22ff      	movs	r2, #255	; 0xff
 800e298:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e29c:	e028      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	689b      	ldr	r3, [r3, #8]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d10d      	bne.n	800e2c2 <UART_Start_Receive_IT+0x76>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	691b      	ldr	r3, [r3, #16]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d104      	bne.n	800e2b8 <UART_Start_Receive_IT+0x6c>
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	22ff      	movs	r2, #255	; 0xff
 800e2b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2b6:	e01b      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	227f      	movs	r2, #127	; 0x7f
 800e2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2c0:	e016      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2ca:	d10d      	bne.n	800e2e8 <UART_Start_Receive_IT+0x9c>
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d104      	bne.n	800e2de <UART_Start_Receive_IT+0x92>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	227f      	movs	r2, #127	; 0x7f
 800e2d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2dc:	e008      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	223f      	movs	r2, #63	; 0x3f
 800e2e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e2e6:	e003      	b.n	800e2f0 <UART_Start_Receive_IT+0xa4>
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2222      	movs	r2, #34	; 0x22
 800e2fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	3308      	adds	r3, #8
 800e306:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e30a:	e853 3f00 	ldrex	r3, [r3]
 800e30e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e312:	f043 0301 	orr.w	r3, r3, #1
 800e316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3308      	adds	r3, #8
 800e320:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e324:	673a      	str	r2, [r7, #112]	; 0x70
 800e326:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e328:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e32a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e32c:	e841 2300 	strex	r3, r2, [r1]
 800e330:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e332:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e334:	2b00      	cmp	r3, #0
 800e336:	d1e3      	bne.n	800e300 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e33c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e340:	d153      	bne.n	800e3ea <UART_Start_Receive_IT+0x19e>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e348:	88fa      	ldrh	r2, [r7, #6]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d34d      	bcc.n	800e3ea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e356:	d107      	bne.n	800e368 <UART_Start_Receive_IT+0x11c>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d103      	bne.n	800e368 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	4a4b      	ldr	r2, [pc, #300]	; (800e490 <UART_Start_Receive_IT+0x244>)
 800e364:	671a      	str	r2, [r3, #112]	; 0x70
 800e366:	e002      	b.n	800e36e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	4a4a      	ldr	r2, [pc, #296]	; (800e494 <UART_Start_Receive_IT+0x248>)
 800e36c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	691b      	ldr	r3, [r3, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d01a      	beq.n	800e3b4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e386:	e853 3f00 	ldrex	r3, [r3]
 800e38a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e38e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	461a      	mov	r2, r3
 800e39c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3a8:	e841 2300 	strex	r3, r2, [r1]
 800e3ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1e4      	bne.n	800e37e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3308      	adds	r3, #8
 800e3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3be:	e853 3f00 	ldrex	r3, [r3]
 800e3c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	3308      	adds	r3, #8
 800e3d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e3d4:	64ba      	str	r2, [r7, #72]	; 0x48
 800e3d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e3da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3dc:	e841 2300 	strex	r3, r2, [r1]
 800e3e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d1e5      	bne.n	800e3b4 <UART_Start_Receive_IT+0x168>
 800e3e8:	e04a      	b.n	800e480 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	689b      	ldr	r3, [r3, #8]
 800e3ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e3f2:	d107      	bne.n	800e404 <UART_Start_Receive_IT+0x1b8>
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d103      	bne.n	800e404 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	4a26      	ldr	r2, [pc, #152]	; (800e498 <UART_Start_Receive_IT+0x24c>)
 800e400:	671a      	str	r2, [r3, #112]	; 0x70
 800e402:	e002      	b.n	800e40a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	4a25      	ldr	r2, [pc, #148]	; (800e49c <UART_Start_Receive_IT+0x250>)
 800e408:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d019      	beq.n	800e44e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e42e:	677b      	str	r3, [r7, #116]	; 0x74
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e438:	637b      	str	r3, [r7, #52]	; 0x34
 800e43a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e43e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e6      	bne.n	800e41a <UART_Start_Receive_IT+0x1ce>
 800e44c:	e018      	b.n	800e480 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	e853 3f00 	ldrex	r3, [r3]
 800e45a:	613b      	str	r3, [r7, #16]
   return(result);
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	f043 0320 	orr.w	r3, r3, #32
 800e462:	67bb      	str	r3, [r7, #120]	; 0x78
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e46c:	623b      	str	r3, [r7, #32]
 800e46e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e470:	69f9      	ldr	r1, [r7, #28]
 800e472:	6a3a      	ldr	r2, [r7, #32]
 800e474:	e841 2300 	strex	r3, r2, [r1]
 800e478:	61bb      	str	r3, [r7, #24]
   return(result);
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d1e6      	bne.n	800e44e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	378c      	adds	r7, #140	; 0x8c
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr
 800e48e:	bf00      	nop
 800e490:	0800eba9 	.word	0x0800eba9
 800e494:	0800e8b1 	.word	0x0800e8b1
 800e498:	0800e74f 	.word	0x0800e74f
 800e49c:	0800e5ef 	.word	0x0800e5ef

0800e4a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b095      	sub	sp, #84	; 0x54
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b0:	e853 3f00 	ldrex	r3, [r3]
 800e4b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800e4c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4ce:	e841 2300 	strex	r3, r2, [r1]
 800e4d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1e6      	bne.n	800e4a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	3308      	adds	r3, #8
 800e4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	e853 3f00 	ldrex	r3, [r3]
 800e4e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e4f0:	f023 0301 	bic.w	r3, r3, #1
 800e4f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	3308      	adds	r3, #8
 800e4fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e500:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e506:	e841 2300 	strex	r3, r2, [r1]
 800e50a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e3      	bne.n	800e4da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e516:	2b01      	cmp	r3, #1
 800e518:	d118      	bne.n	800e54c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	e853 3f00 	ldrex	r3, [r3]
 800e526:	60bb      	str	r3, [r7, #8]
   return(result);
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	f023 0310 	bic.w	r3, r3, #16
 800e52e:	647b      	str	r3, [r7, #68]	; 0x44
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	461a      	mov	r2, r3
 800e536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e538:	61bb      	str	r3, [r7, #24]
 800e53a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e53c:	6979      	ldr	r1, [r7, #20]
 800e53e:	69ba      	ldr	r2, [r7, #24]
 800e540:	e841 2300 	strex	r3, r2, [r1]
 800e544:	613b      	str	r3, [r7, #16]
   return(result);
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d1e6      	bne.n	800e51a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2220      	movs	r2, #32
 800e550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2200      	movs	r2, #0
 800e55e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e560:	bf00      	nop
 800e562:	3754      	adds	r7, #84	; 0x54
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e578:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e58a:	68f8      	ldr	r0, [r7, #12]
 800e58c:	f7ff f996 	bl	800d8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e590:	bf00      	nop
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b088      	sub	sp, #32
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	e853 3f00 	ldrex	r3, [r3]
 800e5ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b4:	61fb      	str	r3, [r7, #28]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	61bb      	str	r3, [r7, #24]
 800e5c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c2:	6979      	ldr	r1, [r7, #20]
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	e841 2300 	strex	r3, r2, [r1]
 800e5ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e6      	bne.n	800e5a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2220      	movs	r2, #32
 800e5d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2200      	movs	r2, #0
 800e5de:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff f957 	bl	800d894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5e6:	bf00      	nop
 800e5e8:	3720      	adds	r7, #32
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}

0800e5ee <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e5ee:	b580      	push	{r7, lr}
 800e5f0:	b096      	sub	sp, #88	; 0x58
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e606:	2b22      	cmp	r3, #34	; 0x22
 800e608:	f040 8095 	bne.w	800e736 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e612:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e616:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800e61a:	b2d9      	uxtb	r1, r3
 800e61c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e620:	b2da      	uxtb	r2, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e626:	400a      	ands	r2, r1
 800e628:	b2d2      	uxtb	r2, r2
 800e62a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e630:	1c5a      	adds	r2, r3, #1
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	3b01      	subs	r3, #1
 800e640:	b29a      	uxth	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e64e:	b29b      	uxth	r3, r3
 800e650:	2b00      	cmp	r3, #0
 800e652:	d178      	bne.n	800e746 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e65c:	e853 3f00 	ldrex	r3, [r3]
 800e660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e668:	653b      	str	r3, [r7, #80]	; 0x50
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	461a      	mov	r2, r3
 800e670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e672:	647b      	str	r3, [r7, #68]	; 0x44
 800e674:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e67a:	e841 2300 	strex	r3, r2, [r1]
 800e67e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1e6      	bne.n	800e654 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	3308      	adds	r3, #8
 800e68c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	e853 3f00 	ldrex	r3, [r3]
 800e694:	623b      	str	r3, [r7, #32]
   return(result);
 800e696:	6a3b      	ldr	r3, [r7, #32]
 800e698:	f023 0301 	bic.w	r3, r3, #1
 800e69c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	3308      	adds	r3, #8
 800e6a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e6a6:	633a      	str	r2, [r7, #48]	; 0x30
 800e6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ae:	e841 2300 	strex	r3, r2, [r1]
 800e6b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1e5      	bne.n	800e686 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2220      	movs	r2, #32
 800e6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d12e      	bne.n	800e72e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	e853 3f00 	ldrex	r3, [r3]
 800e6e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f023 0310 	bic.w	r3, r3, #16
 800e6ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6f4:	61fb      	str	r3, [r7, #28]
 800e6f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f8:	69b9      	ldr	r1, [r7, #24]
 800e6fa:	69fa      	ldr	r2, [r7, #28]
 800e6fc:	e841 2300 	strex	r3, r2, [r1]
 800e700:	617b      	str	r3, [r7, #20]
   return(result);
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d1e6      	bne.n	800e6d6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	69db      	ldr	r3, [r3, #28]
 800e70e:	f003 0310 	and.w	r3, r3, #16
 800e712:	2b10      	cmp	r3, #16
 800e714:	d103      	bne.n	800e71e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2210      	movs	r2, #16
 800e71c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7ff f8d2 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e72c:	e00b      	b.n	800e746 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff f8ba 	bl	800d8a8 <HAL_UART_RxCpltCallback>
}
 800e734:	e007      	b.n	800e746 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	699a      	ldr	r2, [r3, #24]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f042 0208 	orr.w	r2, r2, #8
 800e744:	619a      	str	r2, [r3, #24]
}
 800e746:	bf00      	nop
 800e748:	3758      	adds	r7, #88	; 0x58
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b096      	sub	sp, #88	; 0x58
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e75c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e766:	2b22      	cmp	r3, #34	; 0x22
 800e768:	f040 8095 	bne.w	800e896 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e772:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e77a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800e77c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800e780:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800e784:	4013      	ands	r3, r2
 800e786:	b29a      	uxth	r2, r3
 800e788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e78a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e790:	1c9a      	adds	r2, r3, #2
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d178      	bne.n	800e8a6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7bc:	e853 3f00 	ldrex	r3, [r3]
 800e7c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7d2:	643b      	str	r3, [r7, #64]	; 0x40
 800e7d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7da:	e841 2300 	strex	r3, r2, [r1]
 800e7de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1e6      	bne.n	800e7b4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ee:	6a3b      	ldr	r3, [r7, #32]
 800e7f0:	e853 3f00 	ldrex	r3, [r3]
 800e7f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7f6:	69fb      	ldr	r3, [r7, #28]
 800e7f8:	f023 0301 	bic.w	r3, r3, #1
 800e7fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3308      	adds	r3, #8
 800e804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e806:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e80c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e80e:	e841 2300 	strex	r3, r2, [r1]
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e816:	2b00      	cmp	r3, #0
 800e818:	d1e5      	bne.n	800e7e6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2220      	movs	r2, #32
 800e81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d12e      	bne.n	800e88e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2200      	movs	r2, #0
 800e834:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	e853 3f00 	ldrex	r3, [r3]
 800e842:	60bb      	str	r3, [r7, #8]
   return(result);
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	f023 0310 	bic.w	r3, r3, #16
 800e84a:	647b      	str	r3, [r7, #68]	; 0x44
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	461a      	mov	r2, r3
 800e852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e854:	61bb      	str	r3, [r7, #24]
 800e856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e858:	6979      	ldr	r1, [r7, #20]
 800e85a:	69ba      	ldr	r2, [r7, #24]
 800e85c:	e841 2300 	strex	r3, r2, [r1]
 800e860:	613b      	str	r3, [r7, #16]
   return(result);
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d1e6      	bne.n	800e836 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	69db      	ldr	r3, [r3, #28]
 800e86e:	f003 0310 	and.w	r3, r3, #16
 800e872:	2b10      	cmp	r3, #16
 800e874:	d103      	bne.n	800e87e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	2210      	movs	r2, #16
 800e87c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e884:	4619      	mov	r1, r3
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f7ff f822 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e88c:	e00b      	b.n	800e8a6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff f80a 	bl	800d8a8 <HAL_UART_RxCpltCallback>
}
 800e894:	e007      	b.n	800e8a6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	699a      	ldr	r2, [r3, #24]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0208 	orr.w	r2, r2, #8
 800e8a4:	619a      	str	r2, [r3, #24]
}
 800e8a6:	bf00      	nop
 800e8a8:	3758      	adds	r7, #88	; 0x58
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
	...

0800e8b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b0a6      	sub	sp, #152	; 0x98
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e8be:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	69db      	ldr	r3, [r3, #28]
 800e8c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e6:	2b22      	cmp	r3, #34	; 0x22
 800e8e8:	f040 814f 	bne.w	800eb8a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8f2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e8f6:	e0f6      	b.n	800eae6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e902:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800e906:	b2d9      	uxtb	r1, r3
 800e908:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800e90c:	b2da      	uxtb	r2, r3
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e912:	400a      	ands	r2, r1
 800e914:	b2d2      	uxtb	r2, r2
 800e916:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e91c:	1c5a      	adds	r2, r3, #1
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e928:	b29b      	uxth	r3, r3
 800e92a:	3b01      	subs	r3, #1
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e93e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e942:	f003 0307 	and.w	r3, r3, #7
 800e946:	2b00      	cmp	r3, #0
 800e948:	d053      	beq.n	800e9f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e94a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b00      	cmp	r3, #0
 800e954:	d011      	beq.n	800e97a <UART_RxISR_8BIT_FIFOEN+0xca>
 800e956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e95a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00b      	beq.n	800e97a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2201      	movs	r2, #1
 800e968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e970:	f043 0201 	orr.w	r2, r3, #1
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e97a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e97e:	f003 0302 	and.w	r3, r3, #2
 800e982:	2b00      	cmp	r3, #0
 800e984:	d011      	beq.n	800e9aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e986:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d00b      	beq.n	800e9aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2202      	movs	r2, #2
 800e998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9a0:	f043 0204 	orr.w	r2, r3, #4
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e9ae:	f003 0304 	and.w	r3, r3, #4
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d011      	beq.n	800e9da <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e9b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d00b      	beq.n	800e9da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2204      	movs	r2, #4
 800e9c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9d0:	f043 0202 	orr.w	r2, r3, #2
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d006      	beq.n	800e9f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7fe ff69 	bl	800d8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d173      	bne.n	800eae6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea06:	e853 3f00 	ldrex	r3, [r3]
 800ea0a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ea0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea20:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea22:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea24:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ea26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ea28:	e841 2300 	strex	r3, r2, [r1]
 800ea2c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800ea2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1e4      	bne.n	800e9fe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3308      	adds	r3, #8
 800ea3a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea3e:	e853 3f00 	ldrex	r3, [r3]
 800ea42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ea44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea4a:	f023 0301 	bic.w	r3, r3, #1
 800ea4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3308      	adds	r3, #8
 800ea56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ea58:	657a      	str	r2, [r7, #84]	; 0x54
 800ea5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ea5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ea60:	e841 2300 	strex	r3, r2, [r1]
 800ea64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ea66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1e3      	bne.n	800ea34 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2220      	movs	r2, #32
 800ea70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d12e      	bne.n	800eae0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea90:	e853 3f00 	ldrex	r3, [r3]
 800ea94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	f023 0310 	bic.w	r3, r3, #16
 800ea9c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaa6:	643b      	str	r3, [r7, #64]	; 0x40
 800eaa8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eaac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800eab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e6      	bne.n	800ea88 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	69db      	ldr	r3, [r3, #28]
 800eac0:	f003 0310 	and.w	r3, r3, #16
 800eac4:	2b10      	cmp	r3, #16
 800eac6:	d103      	bne.n	800ead0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	2210      	movs	r2, #16
 800eace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ead6:	4619      	mov	r1, r3
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fe fef9 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
 800eade:	e002      	b.n	800eae6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7fe fee1 	bl	800d8a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800eae6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d006      	beq.n	800eafc <UART_RxISR_8BIT_FIFOEN+0x24c>
 800eaee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800eaf2:	f003 0320 	and.w	r3, r3, #32
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f47f aefe 	bne.w	800e8f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800eb06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d045      	beq.n	800eb9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eb14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d23e      	bcs.n	800eb9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3308      	adds	r3, #8
 800eb22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb24:	6a3b      	ldr	r3, [r7, #32]
 800eb26:	e853 3f00 	ldrex	r3, [r3]
 800eb2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eb32:	673b      	str	r3, [r7, #112]	; 0x70
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	3308      	adds	r3, #8
 800eb3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800eb3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800eb3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb44:	e841 2300 	strex	r3, r2, [r1]
 800eb48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d1e5      	bne.n	800eb1c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a14      	ldr	r2, [pc, #80]	; (800eba4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800eb54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	e853 3f00 	ldrex	r3, [r3]
 800eb62:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	f043 0320 	orr.w	r3, r3, #32
 800eb6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	461a      	mov	r2, r3
 800eb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb74:	61bb      	str	r3, [r7, #24]
 800eb76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb78:	6979      	ldr	r1, [r7, #20]
 800eb7a:	69ba      	ldr	r2, [r7, #24]
 800eb7c:	e841 2300 	strex	r3, r2, [r1]
 800eb80:	613b      	str	r3, [r7, #16]
   return(result);
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1e6      	bne.n	800eb56 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800eb88:	e007      	b.n	800eb9a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	699a      	ldr	r2, [r3, #24]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f042 0208 	orr.w	r2, r2, #8
 800eb98:	619a      	str	r2, [r3, #24]
}
 800eb9a:	bf00      	nop
 800eb9c:	3798      	adds	r7, #152	; 0x98
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	0800e5ef 	.word	0x0800e5ef

0800eba8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b0a8      	sub	sp, #160	; 0xa0
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebb6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	69db      	ldr	r3, [r3, #28]
 800ebc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebde:	2b22      	cmp	r3, #34	; 0x22
 800ebe0:	f040 8153 	bne.w	800ee8a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ebea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ebee:	e0fa      	b.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800ec02:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800ec06:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec18:	1c9a      	adds	r2, r3, #2
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3b01      	subs	r3, #1
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	69db      	ldr	r3, [r3, #28]
 800ec36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ec3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d053      	beq.n	800ecee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ec46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec4a:	f003 0301 	and.w	r3, r3, #1
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d011      	beq.n	800ec76 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ec52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ec56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00b      	beq.n	800ec76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	2201      	movs	r2, #1
 800ec64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec6c:	f043 0201 	orr.w	r2, r3, #1
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ec76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec7a:	f003 0302 	and.w	r3, r3, #2
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d011      	beq.n	800eca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ec82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d00b      	beq.n	800eca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2202      	movs	r2, #2
 800ec94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec9c:	f043 0204 	orr.w	r2, r3, #4
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eca6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ecaa:	f003 0304 	and.w	r3, r3, #4
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d011      	beq.n	800ecd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ecb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00b      	beq.n	800ecd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	2204      	movs	r2, #4
 800ecc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eccc:	f043 0202 	orr.w	r2, r3, #2
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d006      	beq.n	800ecee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f7fe fdeb 	bl	800d8bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2200      	movs	r2, #0
 800ecea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecf4:	b29b      	uxth	r3, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d175      	bne.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed02:	e853 3f00 	ldrex	r3, [r3]
 800ed06:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ed08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	461a      	mov	r2, r3
 800ed18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ed1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ed1e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed20:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed24:	e841 2300 	strex	r3, r2, [r1]
 800ed28:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ed2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d1e4      	bne.n	800ecfa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	3308      	adds	r3, #8
 800ed36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed3a:	e853 3f00 	ldrex	r3, [r3]
 800ed3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed46:	f023 0301 	bic.w	r3, r3, #1
 800ed4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	3308      	adds	r3, #8
 800ed54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ed58:	65ba      	str	r2, [r7, #88]	; 0x58
 800ed5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed60:	e841 2300 	strex	r3, r2, [r1]
 800ed64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d1e1      	bne.n	800ed30 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2220      	movs	r2, #32
 800ed70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d12e      	bne.n	800ede0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed90:	e853 3f00 	ldrex	r3, [r3]
 800ed94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed98:	f023 0310 	bic.w	r3, r3, #16
 800ed9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	461a      	mov	r2, r3
 800eda4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eda6:	647b      	str	r3, [r7, #68]	; 0x44
 800eda8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800edac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edae:	e841 2300 	strex	r3, r2, [r1]
 800edb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800edb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1e6      	bne.n	800ed88 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	69db      	ldr	r3, [r3, #28]
 800edc0:	f003 0310 	and.w	r3, r3, #16
 800edc4:	2b10      	cmp	r3, #16
 800edc6:	d103      	bne.n	800edd0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2210      	movs	r2, #16
 800edce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edd6:	4619      	mov	r1, r3
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7fe fd79 	bl	800d8d0 <HAL_UARTEx_RxEventCallback>
 800edde:	e002      	b.n	800ede6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f7fe fd61 	bl	800d8a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ede6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800edea:	2b00      	cmp	r3, #0
 800edec:	d006      	beq.n	800edfc <UART_RxISR_16BIT_FIFOEN+0x254>
 800edee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800edf2:	f003 0320 	and.w	r3, r3, #32
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f47f aefa 	bne.w	800ebf0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ee02:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ee06:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d045      	beq.n	800ee9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ee14:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d23e      	bcs.n	800ee9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	3308      	adds	r3, #8
 800ee22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	e853 3f00 	ldrex	r3, [r3]
 800ee2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ee2c:	6a3b      	ldr	r3, [r7, #32]
 800ee2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ee32:	677b      	str	r3, [r7, #116]	; 0x74
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	3308      	adds	r3, #8
 800ee3a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ee3c:	633a      	str	r2, [r7, #48]	; 0x30
 800ee3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee44:	e841 2300 	strex	r3, r2, [r1]
 800ee48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d1e5      	bne.n	800ee1c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a14      	ldr	r2, [pc, #80]	; (800eea4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800ee54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	e853 3f00 	ldrex	r3, [r3]
 800ee62:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f043 0320 	orr.w	r3, r3, #32
 800ee6a:	673b      	str	r3, [r7, #112]	; 0x70
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	461a      	mov	r2, r3
 800ee72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee74:	61fb      	str	r3, [r7, #28]
 800ee76:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee78:	69b9      	ldr	r1, [r7, #24]
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	617b      	str	r3, [r7, #20]
   return(result);
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e6      	bne.n	800ee56 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee88:	e007      	b.n	800ee9a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	699a      	ldr	r2, [r3, #24]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f042 0208 	orr.w	r2, r2, #8
 800ee98:	619a      	str	r2, [r3, #24]
}
 800ee9a:	bf00      	nop
 800ee9c:	37a0      	adds	r7, #160	; 0xa0
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	0800e74f 	.word	0x0800e74f

0800eea8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eed8:	bf00      	nop
 800eeda:	370c      	adds	r7, #12
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eef2:	2b01      	cmp	r3, #1
 800eef4:	d101      	bne.n	800eefa <HAL_UARTEx_DisableFifoMode+0x16>
 800eef6:	2302      	movs	r3, #2
 800eef8:	e027      	b.n	800ef4a <HAL_UARTEx_DisableFifoMode+0x66>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2201      	movs	r2, #1
 800eefe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2224      	movs	r2, #36	; 0x24
 800ef06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f022 0201 	bic.w	r2, r2, #1
 800ef20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ef28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	68fa      	ldr	r2, [r7, #12]
 800ef36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3714      	adds	r7, #20
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b084      	sub	sp, #16
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	6078      	str	r0, [r7, #4]
 800ef5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef66:	2b01      	cmp	r3, #1
 800ef68:	d101      	bne.n	800ef6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	e02d      	b.n	800efca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	2224      	movs	r2, #36	; 0x24
 800ef7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f022 0201 	bic.w	r2, r2, #1
 800ef94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	430a      	orrs	r2, r1
 800efa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 f850 	bl	800f050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2220      	movs	r2, #32
 800efbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d101      	bne.n	800efea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800efe6:	2302      	movs	r3, #2
 800efe8:	e02d      	b.n	800f046 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2224      	movs	r2, #36	; 0x24
 800eff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f022 0201 	bic.w	r2, r2, #1
 800f010:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	689b      	ldr	r3, [r3, #8]
 800f018:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	683a      	ldr	r2, [r7, #0]
 800f022:	430a      	orrs	r2, r1
 800f024:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 f812 	bl	800f050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2220      	movs	r2, #32
 800f038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f044:	2300      	movs	r3, #0
}
 800f046:	4618      	mov	r0, r3
 800f048:	3710      	adds	r7, #16
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
	...

0800f050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d108      	bne.n	800f072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f070:	e031      	b.n	800f0d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f072:	2308      	movs	r3, #8
 800f074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f076:	2308      	movs	r3, #8
 800f078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	0e5b      	lsrs	r3, r3, #25
 800f082:	b2db      	uxtb	r3, r3
 800f084:	f003 0307 	and.w	r3, r3, #7
 800f088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	0f5b      	lsrs	r3, r3, #29
 800f092:	b2db      	uxtb	r3, r3
 800f094:	f003 0307 	and.w	r3, r3, #7
 800f098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f09a:	7bbb      	ldrb	r3, [r7, #14]
 800f09c:	7b3a      	ldrb	r2, [r7, #12]
 800f09e:	4911      	ldr	r1, [pc, #68]	; (800f0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800f0a0:	5c8a      	ldrb	r2, [r1, r2]
 800f0a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f0a6:	7b3a      	ldrb	r2, [r7, #12]
 800f0a8:	490f      	ldr	r1, [pc, #60]	; (800f0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800f0aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	7b7a      	ldrb	r2, [r7, #13]
 800f0bc:	4909      	ldr	r1, [pc, #36]	; (800f0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800f0be:	5c8a      	ldrb	r2, [r1, r2]
 800f0c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f0c4:	7b7a      	ldrb	r2, [r7, #13]
 800f0c6:	4908      	ldr	r1, [pc, #32]	; (800f0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800f0c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f0ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f0d6:	bf00      	nop
 800f0d8:	3714      	adds	r7, #20
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	080124f8 	.word	0x080124f8
 800f0e8:	08012500 	.word	0x08012500

0800f0ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b085      	sub	sp, #20
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f0fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0fe:	2b84      	cmp	r3, #132	; 0x84
 800f100:	d005      	beq.n	800f10e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f102:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	4413      	add	r3, r2
 800f10a:	3303      	adds	r3, #3
 800f10c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f10e:	68fb      	ldr	r3, [r7, #12]
}
 800f110:	4618      	mov	r0, r3
 800f112:	3714      	adds	r7, #20
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f120:	f000 fee8 	bl	800fef4 <vTaskStartScheduler>
  
  return osOK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	bd80      	pop	{r7, pc}

0800f12a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f12a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f12c:	b087      	sub	sp, #28
 800f12e:	af02      	add	r7, sp, #8
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685c      	ldr	r4, [r3, #4]
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f140:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff ffcf 	bl	800f0ec <makeFreeRtosPriority>
 800f14e:	4602      	mov	r2, r0
 800f150:	f107 030c 	add.w	r3, r7, #12
 800f154:	9301      	str	r3, [sp, #4]
 800f156:	9200      	str	r2, [sp, #0]
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	4632      	mov	r2, r6
 800f15c:	4629      	mov	r1, r5
 800f15e:	4620      	mov	r0, r4
 800f160:	f000 fd54 	bl	800fc0c <xTaskCreate>
 800f164:	4603      	mov	r3, r0
 800f166:	2b01      	cmp	r3, #1
 800f168:	d001      	beq.n	800f16e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f16a:	2300      	movs	r3, #0
 800f16c:	e000      	b.n	800f170 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f16e:	68fb      	ldr	r3, [r7, #12]
}
 800f170:	4618      	mov	r0, r3
 800f172:	3714      	adds	r7, #20
 800f174:	46bd      	mov	sp, r7
 800f176:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f178 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d001      	beq.n	800f18e <osDelay+0x16>
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	e000      	b.n	800f190 <osDelay+0x18>
 800f18e:	2301      	movs	r3, #1
 800f190:	4618      	mov	r0, r3
 800f192:	f000 fe7b 	bl	800fe8c <vTaskDelay>
  
  return osOK;
 800f196:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3710      	adds	r7, #16
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}

0800f1a0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b082      	sub	sp, #8
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800f1a8:	2001      	movs	r0, #1
 800f1aa:	f000 f9a1 	bl	800f4f0 <xQueueCreateMutex>
 800f1ae:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3708      	adds	r7, #8
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d110      	bne.n	800f1ea <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800f1c8:	2203      	movs	r2, #3
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	f000 f920 	bl	800f412 <xQueueGenericCreate>
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <osSemaphoreCreate+0x2e>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	2100      	movs	r1, #0
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f000 f99d 	bl	800f520 <xQueueGenericSend>
    return sema;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	e000      	b.n	800f1ec <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 800f1ea:	2300      	movs	r3, #0
#endif
  }
#endif
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f103 0208 	add.w	r2, r3, #8
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f04f 32ff 	mov.w	r2, #4294967295
 800f20c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f103 0208 	add.w	r2, r3, #8
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f103 0208 	add.w	r2, r3, #8
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	2200      	movs	r2, #0
 800f226:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f228:	bf00      	nop
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f242:	bf00      	nop
 800f244:	370c      	adds	r7, #12
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	689a      	ldr	r2, [r3, #8]
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	683a      	ldr	r2, [r7, #0]
 800f272:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f27a:	683b      	ldr	r3, [r7, #0]
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	1c5a      	adds	r2, r3, #1
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	601a      	str	r2, [r3, #0]
}
 800f28a:	bf00      	nop
 800f28c:	3714      	adds	r7, #20
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr

0800f296 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f296:	b480      	push	{r7}
 800f298:	b085      	sub	sp, #20
 800f29a:	af00      	add	r7, sp, #0
 800f29c:	6078      	str	r0, [r7, #4]
 800f29e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ac:	d103      	bne.n	800f2b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	691b      	ldr	r3, [r3, #16]
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	e00c      	b.n	800f2d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	3308      	adds	r3, #8
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	e002      	b.n	800f2c4 <vListInsert+0x2e>
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	60fb      	str	r3, [r7, #12]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	685b      	ldr	r3, [r3, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	68ba      	ldr	r2, [r7, #8]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d2f6      	bcs.n	800f2be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	685a      	ldr	r2, [r3, #4]
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	6892      	ldr	r2, [r2, #8]
 800f31e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	689b      	ldr	r3, [r3, #8]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	6852      	ldr	r2, [r2, #4]
 800f328:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	429a      	cmp	r2, r3
 800f332:	d103      	bne.n	800f33c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	689a      	ldr	r2, [r3, #8]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	1e5a      	subs	r2, r3, #1
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	681b      	ldr	r3, [r3, #0]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3714      	adds	r7, #20
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d10a      	bne.n	800f386 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f382:	bf00      	nop
 800f384:	e7fe      	b.n	800f384 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f386:	f001 fcbd 	bl	8010d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f392:	68f9      	ldr	r1, [r7, #12]
 800f394:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f396:	fb01 f303 	mul.w	r3, r1, r3
 800f39a:	441a      	add	r2, r3
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681a      	ldr	r2, [r3, #0]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681a      	ldr	r2, [r3, #0]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b6:	3b01      	subs	r3, #1
 800f3b8:	68f9      	ldr	r1, [r7, #12]
 800f3ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f3bc:	fb01 f303 	mul.w	r3, r1, r3
 800f3c0:	441a      	add	r2, r3
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	22ff      	movs	r2, #255	; 0xff
 800f3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	22ff      	movs	r2, #255	; 0xff
 800f3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d109      	bne.n	800f3f0 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00f      	beq.n	800f404 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	3310      	adds	r3, #16
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f000 ff8b 	bl	8010304 <xTaskRemoveFromEventList>
 800f3ee:	e009      	b.n	800f404 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	3310      	adds	r3, #16
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7ff fefd 	bl	800f1f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	3324      	adds	r3, #36	; 0x24
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff fef8 	bl	800f1f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f404:	f001 fcae 	bl	8010d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f408:	2301      	movs	r3, #1
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3710      	adds	r7, #16
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f412:	b580      	push	{r7, lr}
 800f414:	b08a      	sub	sp, #40	; 0x28
 800f416:	af02      	add	r7, sp, #8
 800f418:	60f8      	str	r0, [r7, #12]
 800f41a:	60b9      	str	r1, [r7, #8]
 800f41c:	4613      	mov	r3, r2
 800f41e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10a      	bne.n	800f43c <xQueueGenericCreate+0x2a>
	__asm volatile
 800f426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	613b      	str	r3, [r7, #16]
}
 800f438:	bf00      	nop
 800f43a:	e7fe      	b.n	800f43a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	fb02 f303 	mul.w	r3, r2, r3
 800f444:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	3348      	adds	r3, #72	; 0x48
 800f44a:	4618      	mov	r0, r3
 800f44c:	f001 fd7c 	bl	8010f48 <pvPortMalloc>
 800f450:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d00d      	beq.n	800f474 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f45c:	697b      	ldr	r3, [r7, #20]
 800f45e:	3348      	adds	r3, #72	; 0x48
 800f460:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f462:	79fa      	ldrb	r2, [r7, #7]
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	9300      	str	r3, [sp, #0]
 800f468:	4613      	mov	r3, r2
 800f46a:	697a      	ldr	r2, [r7, #20]
 800f46c:	68b9      	ldr	r1, [r7, #8]
 800f46e:	68f8      	ldr	r0, [r7, #12]
 800f470:	f000 f805 	bl	800f47e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f474:	69bb      	ldr	r3, [r7, #24]
	}
 800f476:	4618      	mov	r0, r3
 800f478:	3720      	adds	r7, #32
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}

0800f47e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f47e:	b580      	push	{r7, lr}
 800f480:	b084      	sub	sp, #16
 800f482:	af00      	add	r7, sp, #0
 800f484:	60f8      	str	r0, [r7, #12]
 800f486:	60b9      	str	r1, [r7, #8]
 800f488:	607a      	str	r2, [r7, #4]
 800f48a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d103      	bne.n	800f49a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	69ba      	ldr	r2, [r7, #24]
 800f496:	601a      	str	r2, [r3, #0]
 800f498:	e002      	b.n	800f4a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	687a      	ldr	r2, [r7, #4]
 800f49e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f4a0:	69bb      	ldr	r3, [r7, #24]
 800f4a2:	68fa      	ldr	r2, [r7, #12]
 800f4a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f4a6:	69bb      	ldr	r3, [r7, #24]
 800f4a8:	68ba      	ldr	r2, [r7, #8]
 800f4aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f4ac:	2101      	movs	r1, #1
 800f4ae:	69b8      	ldr	r0, [r7, #24]
 800f4b0:	f7ff ff54 	bl	800f35c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f4b4:	bf00      	nop
 800f4b6:	3710      	adds	r7, #16
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d00e      	beq.n	800f4e8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f4dc:	2300      	movs	r3, #0
 800f4de:	2200      	movs	r2, #0
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 f81c 	bl	800f520 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f4e8:	bf00      	nop
 800f4ea:	3708      	adds	r7, #8
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	617b      	str	r3, [r7, #20]
 800f4fe:	2300      	movs	r3, #0
 800f500:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f502:	79fb      	ldrb	r3, [r7, #7]
 800f504:	461a      	mov	r2, r3
 800f506:	6939      	ldr	r1, [r7, #16]
 800f508:	6978      	ldr	r0, [r7, #20]
 800f50a:	f7ff ff82 	bl	800f412 <xQueueGenericCreate>
 800f50e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7ff ffd3 	bl	800f4bc <prvInitialiseMutex>

		return xNewQueue;
 800f516:	68fb      	ldr	r3, [r7, #12]
	}
 800f518:	4618      	mov	r0, r3
 800f51a:	3718      	adds	r7, #24
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b08e      	sub	sp, #56	; 0x38
 800f524:	af00      	add	r7, sp, #0
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	60b9      	str	r1, [r7, #8]
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f52e:	2300      	movs	r3, #0
 800f530:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <xQueueGenericSend+0x32>
	__asm volatile
 800f53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f540:	f383 8811 	msr	BASEPRI, r3
 800f544:	f3bf 8f6f 	isb	sy
 800f548:	f3bf 8f4f 	dsb	sy
 800f54c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f54e:	bf00      	nop
 800f550:	e7fe      	b.n	800f550 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d103      	bne.n	800f560 <xQueueGenericSend+0x40>
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d101      	bne.n	800f564 <xQueueGenericSend+0x44>
 800f560:	2301      	movs	r3, #1
 800f562:	e000      	b.n	800f566 <xQueueGenericSend+0x46>
 800f564:	2300      	movs	r3, #0
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10a      	bne.n	800f580 <xQueueGenericSend+0x60>
	__asm volatile
 800f56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56e:	f383 8811 	msr	BASEPRI, r3
 800f572:	f3bf 8f6f 	isb	sy
 800f576:	f3bf 8f4f 	dsb	sy
 800f57a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f57c:	bf00      	nop
 800f57e:	e7fe      	b.n	800f57e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b02      	cmp	r3, #2
 800f584:	d103      	bne.n	800f58e <xQueueGenericSend+0x6e>
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f58a:	2b01      	cmp	r3, #1
 800f58c:	d101      	bne.n	800f592 <xQueueGenericSend+0x72>
 800f58e:	2301      	movs	r3, #1
 800f590:	e000      	b.n	800f594 <xQueueGenericSend+0x74>
 800f592:	2300      	movs	r3, #0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10a      	bne.n	800f5ae <xQueueGenericSend+0x8e>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	623b      	str	r3, [r7, #32]
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5ae:	f001 f855 	bl	801065c <xTaskGetSchedulerState>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d102      	bne.n	800f5be <xQueueGenericSend+0x9e>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <xQueueGenericSend+0xa2>
 800f5be:	2301      	movs	r3, #1
 800f5c0:	e000      	b.n	800f5c4 <xQueueGenericSend+0xa4>
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10a      	bne.n	800f5de <xQueueGenericSend+0xbe>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	61fb      	str	r3, [r7, #28]
}
 800f5da:	bf00      	nop
 800f5dc:	e7fe      	b.n	800f5dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5de:	f001 fb91 	bl	8010d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d302      	bcc.n	800f5f4 <xQueueGenericSend+0xd4>
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	2b02      	cmp	r3, #2
 800f5f2:	d112      	bne.n	800f61a <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	68b9      	ldr	r1, [r7, #8]
 800f5f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5fa:	f000 fa1d 	bl	800fa38 <prvCopyDataToQueue>
 800f5fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f604:	2b00      	cmp	r3, #0
 800f606:	d004      	beq.n	800f612 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60a:	3324      	adds	r3, #36	; 0x24
 800f60c:	4618      	mov	r0, r3
 800f60e:	f000 fe79 	bl	8010304 <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f612:	f001 fba7 	bl	8010d64 <vPortExitCritical>
				return pdPASS;
 800f616:	2301      	movs	r3, #1
 800f618:	e062      	b.n	800f6e0 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d103      	bne.n	800f628 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f620:	f001 fba0 	bl	8010d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f624:	2300      	movs	r3, #0
 800f626:	e05b      	b.n	800f6e0 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d106      	bne.n	800f63c <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f62e:	f107 0314 	add.w	r3, r7, #20
 800f632:	4618      	mov	r0, r3
 800f634:	f000 fec8 	bl	80103c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f638:	2301      	movs	r3, #1
 800f63a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f63c:	f001 fb92 	bl	8010d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f640:	f000 fca8 	bl	800ff94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f644:	f001 fb5e 	bl	8010d04 <vPortEnterCritical>
 800f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f64e:	b25b      	sxtb	r3, r3
 800f650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f654:	d103      	bne.n	800f65e <xQueueGenericSend+0x13e>
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f664:	b25b      	sxtb	r3, r3
 800f666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66a:	d103      	bne.n	800f674 <xQueueGenericSend+0x154>
 800f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f674:	f001 fb76 	bl	8010d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f678:	1d3a      	adds	r2, r7, #4
 800f67a:	f107 0314 	add.w	r3, r7, #20
 800f67e:	4611      	mov	r1, r2
 800f680:	4618      	mov	r0, r3
 800f682:	f000 feb7 	bl	80103f4 <xTaskCheckForTimeOut>
 800f686:	4603      	mov	r3, r0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d123      	bne.n	800f6d4 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f68c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f68e:	f000 faa5 	bl	800fbdc <prvIsQueueFull>
 800f692:	4603      	mov	r3, r0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d017      	beq.n	800f6c8 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	3310      	adds	r3, #16
 800f69c:	687a      	ldr	r2, [r7, #4]
 800f69e:	4611      	mov	r1, r2
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f000 fe0b 	bl	80102bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f6a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6a8:	f000 fa30 	bl	800fb0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f6ac:	f000 fc80 	bl	800ffb0 <xTaskResumeAll>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d193      	bne.n	800f5de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f6b6:	4b0c      	ldr	r3, [pc, #48]	; (800f6e8 <xQueueGenericSend+0x1c8>)
 800f6b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6bc:	601a      	str	r2, [r3, #0]
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	f3bf 8f6f 	isb	sy
 800f6c6:	e78a      	b.n	800f5de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6ca:	f000 fa1f 	bl	800fb0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6ce:	f000 fc6f 	bl	800ffb0 <xTaskResumeAll>
 800f6d2:	e784      	b.n	800f5de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f6d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6d6:	f000 fa19 	bl	800fb0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6da:	f000 fc69 	bl	800ffb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f6de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	3738      	adds	r7, #56	; 0x38
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bd80      	pop	{r7, pc}
 800f6e8:	e000ed04 	.word	0xe000ed04

0800f6ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b08e      	sub	sp, #56	; 0x38
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d10a      	bne.n	800f716 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f704:	f383 8811 	msr	BASEPRI, r3
 800f708:	f3bf 8f6f 	isb	sy
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	623b      	str	r3, [r7, #32]
}
 800f712:	bf00      	nop
 800f714:	e7fe      	b.n	800f714 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00a      	beq.n	800f734 <xQueueGiveFromISR+0x48>
	__asm volatile
 800f71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f722:	f383 8811 	msr	BASEPRI, r3
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	f3bf 8f4f 	dsb	sy
 800f72e:	61fb      	str	r3, [r7, #28]
}
 800f730:	bf00      	nop
 800f732:	e7fe      	b.n	800f732 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d103      	bne.n	800f744 <xQueueGiveFromISR+0x58>
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	689b      	ldr	r3, [r3, #8]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <xQueueGiveFromISR+0x5c>
 800f744:	2301      	movs	r3, #1
 800f746:	e000      	b.n	800f74a <xQueueGiveFromISR+0x5e>
 800f748:	2300      	movs	r3, #0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d10a      	bne.n	800f764 <xQueueGiveFromISR+0x78>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	61bb      	str	r3, [r7, #24]
}
 800f760:	bf00      	nop
 800f762:	e7fe      	b.n	800f762 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f764:	f001 fbb0 	bl	8010ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f768:	f3ef 8211 	mrs	r2, BASEPRI
 800f76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f770:	f383 8811 	msr	BASEPRI, r3
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	617a      	str	r2, [r7, #20]
 800f77e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f780:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f782:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f788:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f78e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f790:	429a      	cmp	r2, r3
 800f792:	d22b      	bcs.n	800f7ec <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f7a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ae:	d112      	bne.n	800f7d6 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d016      	beq.n	800f7e6 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ba:	3324      	adds	r3, #36	; 0x24
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f000 fda1 	bl	8010304 <xTaskRemoveFromEventList>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d00e      	beq.n	800f7e6 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d00b      	beq.n	800f7e6 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	2201      	movs	r2, #1
 800f7d2:	601a      	str	r2, [r3, #0]
 800f7d4:	e007      	b.n	800f7e6 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7da:	3301      	adds	r3, #1
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	b25a      	sxtb	r2, r3
 800f7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ea:	e001      	b.n	800f7f0 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	637b      	str	r3, [r7, #52]	; 0x34
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f7fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f7fe:	4618      	mov	r0, r3
 800f800:	3738      	adds	r7, #56	; 0x38
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
	...

0800f808 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08e      	sub	sp, #56	; 0x38
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f812:	2300      	movs	r3, #0
 800f814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f81a:	2300      	movs	r3, #0
 800f81c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10a      	bne.n	800f83a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f828:	f383 8811 	msr	BASEPRI, r3
 800f82c:	f3bf 8f6f 	isb	sy
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	623b      	str	r3, [r7, #32]
}
 800f836:	bf00      	nop
 800f838:	e7fe      	b.n	800f838 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00a      	beq.n	800f858 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f846:	f383 8811 	msr	BASEPRI, r3
 800f84a:	f3bf 8f6f 	isb	sy
 800f84e:	f3bf 8f4f 	dsb	sy
 800f852:	61fb      	str	r3, [r7, #28]
}
 800f854:	bf00      	nop
 800f856:	e7fe      	b.n	800f856 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f858:	f000 ff00 	bl	801065c <xTaskGetSchedulerState>
 800f85c:	4603      	mov	r3, r0
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <xQueueSemaphoreTake+0x60>
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <xQueueSemaphoreTake+0x64>
 800f868:	2301      	movs	r3, #1
 800f86a:	e000      	b.n	800f86e <xQueueSemaphoreTake+0x66>
 800f86c:	2300      	movs	r3, #0
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10a      	bne.n	800f888 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f876:	f383 8811 	msr	BASEPRI, r3
 800f87a:	f3bf 8f6f 	isb	sy
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	61bb      	str	r3, [r7, #24]
}
 800f884:	bf00      	nop
 800f886:	e7fe      	b.n	800f886 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f888:	f001 fa3c 	bl	8010d04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f890:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	2b00      	cmp	r3, #0
 800f896:	d019      	beq.n	800f8cc <xQueueSemaphoreTake+0xc4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89a:	1e5a      	subs	r2, r3, #1
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d104      	bne.n	800f8b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f8a8:	f001 f880 	bl	80109ac <pvTaskIncrementMutexHeldCount>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b4:	691b      	ldr	r3, [r3, #16]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d004      	beq.n	800f8c4 <xQueueSemaphoreTake+0xbc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8bc:	3310      	adds	r3, #16
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f000 fd20 	bl	8010304 <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8c4:	f001 fa4e 	bl	8010d64 <vPortExitCritical>
				return pdPASS;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e097      	b.n	800f9fc <xQueueSemaphoreTake+0x1f4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d111      	bne.n	800f8f6 <xQueueSemaphoreTake+0xee>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d00a      	beq.n	800f8ee <xQueueSemaphoreTake+0xe6>
	__asm volatile
 800f8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8dc:	f383 8811 	msr	BASEPRI, r3
 800f8e0:	f3bf 8f6f 	isb	sy
 800f8e4:	f3bf 8f4f 	dsb	sy
 800f8e8:	617b      	str	r3, [r7, #20]
}
 800f8ea:	bf00      	nop
 800f8ec:	e7fe      	b.n	800f8ec <xQueueSemaphoreTake+0xe4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f8ee:	f001 fa39 	bl	8010d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e082      	b.n	800f9fc <xQueueSemaphoreTake+0x1f4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d106      	bne.n	800f90a <xQueueSemaphoreTake+0x102>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8fc:	f107 030c 	add.w	r3, r7, #12
 800f900:	4618      	mov	r0, r3
 800f902:	f000 fd61 	bl	80103c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f906:	2301      	movs	r3, #1
 800f908:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f90a:	f001 fa2b 	bl	8010d64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f90e:	f000 fb41 	bl	800ff94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f912:	f001 f9f7 	bl	8010d04 <vPortEnterCritical>
 800f916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f918:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f91c:	b25b      	sxtb	r3, r3
 800f91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f922:	d103      	bne.n	800f92c <xQueueSemaphoreTake+0x124>
 800f924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f926:	2200      	movs	r2, #0
 800f928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f932:	b25b      	sxtb	r3, r3
 800f934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f938:	d103      	bne.n	800f942 <xQueueSemaphoreTake+0x13a>
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	2200      	movs	r2, #0
 800f93e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f942:	f001 fa0f 	bl	8010d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f946:	463a      	mov	r2, r7
 800f948:	f107 030c 	add.w	r3, r7, #12
 800f94c:	4611      	mov	r1, r2
 800f94e:	4618      	mov	r0, r3
 800f950:	f000 fd50 	bl	80103f4 <xTaskCheckForTimeOut>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d132      	bne.n	800f9c0 <xQueueSemaphoreTake+0x1b8>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f95a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f95c:	f000 f928 	bl	800fbb0 <prvIsQueueEmpty>
 800f960:	4603      	mov	r3, r0
 800f962:	2b00      	cmp	r3, #0
 800f964:	d026      	beq.n	800f9b4 <xQueueSemaphoreTake+0x1ac>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d109      	bne.n	800f982 <xQueueSemaphoreTake+0x17a>
					{
						taskENTER_CRITICAL();
 800f96e:	f001 f9c9 	bl	8010d04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	4618      	mov	r0, r3
 800f978:	f000 fe8e 	bl	8010698 <xTaskPriorityInherit>
 800f97c:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f97e:	f001 f9f1 	bl	8010d64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f984:	3324      	adds	r3, #36	; 0x24
 800f986:	683a      	ldr	r2, [r7, #0]
 800f988:	4611      	mov	r1, r2
 800f98a:	4618      	mov	r0, r3
 800f98c:	f000 fc96 	bl	80102bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f992:	f000 f8bb 	bl	800fb0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f996:	f000 fb0b 	bl	800ffb0 <xTaskResumeAll>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f47f af73 	bne.w	800f888 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f9a2:	4b18      	ldr	r3, [pc, #96]	; (800fa04 <xQueueSemaphoreTake+0x1fc>)
 800f9a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9a8:	601a      	str	r2, [r3, #0]
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	e769      	b.n	800f888 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f9b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9b6:	f000 f8a9 	bl	800fb0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9ba:	f000 faf9 	bl	800ffb0 <xTaskResumeAll>
 800f9be:	e763      	b.n	800f888 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f9c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9c2:	f000 f8a3 	bl	800fb0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9c6:	f000 faf3 	bl	800ffb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9cc:	f000 f8f0 	bl	800fbb0 <prvIsQueueEmpty>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f43f af58 	beq.w	800f888 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d00d      	beq.n	800f9fa <xQueueSemaphoreTake+0x1f2>
					{
						taskENTER_CRITICAL();
 800f9de:	f001 f991 	bl	8010d04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f9e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9e4:	f000 f810 	bl	800fa08 <prvGetDisinheritPriorityAfterTimeout>
 800f9e8:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f000 ff4d 	bl	8010890 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f9f6:	f001 f9b5 	bl	8010d64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3738      	adds	r7, #56	; 0x38
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}
 800fa04:	e000ed04 	.word	0xe000ed04

0800fa08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fa08:	b480      	push	{r7}
 800fa0a:	b085      	sub	sp, #20
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d006      	beq.n	800fa26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f1c3 0307 	rsb	r3, r3, #7
 800fa22:	60fb      	str	r3, [r7, #12]
 800fa24:	e001      	b.n	800fa2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fa26:	2300      	movs	r3, #0
 800fa28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
	}
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	3714      	adds	r7, #20
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b086      	sub	sp, #24
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa44:	2300      	movs	r3, #0
 800fa46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10d      	bne.n	800fa72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d14d      	bne.n	800fafa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	689b      	ldr	r3, [r3, #8]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f000 fe8e 	bl	8010784 <xTaskPriorityDisinherit>
 800fa68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	609a      	str	r2, [r3, #8]
 800fa70:	e043      	b.n	800fafa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d119      	bne.n	800faac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	6858      	ldr	r0, [r3, #4]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa80:	461a      	mov	r2, r3
 800fa82:	68b9      	ldr	r1, [r7, #8]
 800fa84:	f001 fcf2 	bl	801146c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	685a      	ldr	r2, [r3, #4]
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa90:	441a      	add	r2, r3
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	685a      	ldr	r2, [r3, #4]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d32b      	bcc.n	800fafa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681a      	ldr	r2, [r3, #0]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	605a      	str	r2, [r3, #4]
 800faaa:	e026      	b.n	800fafa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	68d8      	ldr	r0, [r3, #12]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab4:	461a      	mov	r2, r3
 800fab6:	68b9      	ldr	r1, [r7, #8]
 800fab8:	f001 fcd8 	bl	801146c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fac4:	425b      	negs	r3, r3
 800fac6:	441a      	add	r2, r3
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	68da      	ldr	r2, [r3, #12]
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d207      	bcs.n	800fae8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	689a      	ldr	r2, [r3, #8]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae0:	425b      	negs	r3, r3
 800fae2:	441a      	add	r2, r3
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2b02      	cmp	r3, #2
 800faec:	d105      	bne.n	800fafa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d002      	beq.n	800fafa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	3b01      	subs	r3, #1
 800faf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	1c5a      	adds	r2, r3, #1
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fb02:	697b      	ldr	r3, [r7, #20]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3718      	adds	r7, #24
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb14:	f001 f8f6 	bl	8010d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb20:	e011      	b.n	800fb46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d012      	beq.n	800fb50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	3324      	adds	r3, #36	; 0x24
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f000 fbe8 	bl	8010304 <xTaskRemoveFromEventList>
 800fb34:	4603      	mov	r3, r0
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d001      	beq.n	800fb3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb3a:	f000 fccd 	bl	80104d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	3b01      	subs	r3, #1
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	dce9      	bgt.n	800fb22 <prvUnlockQueue+0x16>
 800fb4e:	e000      	b.n	800fb52 <prvUnlockQueue+0x46>
					break;
 800fb50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	22ff      	movs	r2, #255	; 0xff
 800fb56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb5a:	f001 f903 	bl	8010d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb5e:	f001 f8d1 	bl	8010d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb6a:	e011      	b.n	800fb90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d012      	beq.n	800fb9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3310      	adds	r3, #16
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f000 fbc3 	bl	8010304 <xTaskRemoveFromEventList>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fb84:	f000 fca8 	bl	80104d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fb88:	7bbb      	ldrb	r3, [r7, #14]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	dce9      	bgt.n	800fb6c <prvUnlockQueue+0x60>
 800fb98:	e000      	b.n	800fb9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fb9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	22ff      	movs	r2, #255	; 0xff
 800fba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fba4:	f001 f8de 	bl	8010d64 <vPortExitCritical>
}
 800fba8:	bf00      	nop
 800fbaa:	3710      	adds	r7, #16
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}

0800fbb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbb8:	f001 f8a4 	bl	8010d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d102      	bne.n	800fbca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	60fb      	str	r3, [r7, #12]
 800fbc8:	e001      	b.n	800fbce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbce:	f001 f8c9 	bl	8010d64 <vPortExitCritical>

	return xReturn;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3710      	adds	r7, #16
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbe4:	f001 f88e 	bl	8010d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d102      	bne.n	800fbfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]
 800fbf8:	e001      	b.n	800fbfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbfe:	f001 f8b1 	bl	8010d64 <vPortExitCritical>

	return xReturn;
 800fc02:	68fb      	ldr	r3, [r7, #12]
}
 800fc04:	4618      	mov	r0, r3
 800fc06:	3710      	adds	r7, #16
 800fc08:	46bd      	mov	sp, r7
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08c      	sub	sp, #48	; 0x30
 800fc10:	af04      	add	r7, sp, #16
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	603b      	str	r3, [r7, #0]
 800fc18:	4613      	mov	r3, r2
 800fc1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc1c:	88fb      	ldrh	r3, [r7, #6]
 800fc1e:	009b      	lsls	r3, r3, #2
 800fc20:	4618      	mov	r0, r3
 800fc22:	f001 f991 	bl	8010f48 <pvPortMalloc>
 800fc26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00e      	beq.n	800fc4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc2e:	20a0      	movs	r0, #160	; 0xa0
 800fc30:	f001 f98a 	bl	8010f48 <pvPortMalloc>
 800fc34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d003      	beq.n	800fc44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	697a      	ldr	r2, [r7, #20]
 800fc40:	631a      	str	r2, [r3, #48]	; 0x30
 800fc42:	e005      	b.n	800fc50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc44:	6978      	ldr	r0, [r7, #20]
 800fc46:	f001 fa4b 	bl	80110e0 <vPortFree>
 800fc4a:	e001      	b.n	800fc50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d013      	beq.n	800fc7e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc56:	88fa      	ldrh	r2, [r7, #6]
 800fc58:	2300      	movs	r3, #0
 800fc5a:	9303      	str	r3, [sp, #12]
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc62:	9301      	str	r3, [sp, #4]
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	9300      	str	r3, [sp, #0]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	68b9      	ldr	r1, [r7, #8]
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 f80f 	bl	800fc90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc72:	69f8      	ldr	r0, [r7, #28]
 800fc74:	f000 f8ae 	bl	800fdd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	61bb      	str	r3, [r7, #24]
 800fc7c:	e002      	b.n	800fc84 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc7e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc82:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc84:	69bb      	ldr	r3, [r7, #24]
	}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3720      	adds	r7, #32
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
	...

0800fc90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b088      	sub	sp, #32
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	60f8      	str	r0, [r7, #12]
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	607a      	str	r2, [r7, #4]
 800fc9c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	f023 0307 	bic.w	r3, r3, #7
 800fcb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	f003 0307 	and.w	r3, r3, #7
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	617b      	str	r3, [r7, #20]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d01f      	beq.n	800fd1e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
 800fce2:	e012      	b.n	800fd0a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	7819      	ldrb	r1, [r3, #0]
 800fcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	3334      	adds	r3, #52	; 0x34
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d006      	beq.n	800fd12 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	3301      	adds	r3, #1
 800fd08:	61fb      	str	r3, [r7, #28]
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	2b0f      	cmp	r3, #15
 800fd0e:	d9e9      	bls.n	800fce4 <prvInitialiseNewTask+0x54>
 800fd10:	e000      	b.n	800fd14 <prvInitialiseNewTask+0x84>
			{
				break;
 800fd12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd1c:	e003      	b.n	800fd26 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd28:	2b06      	cmp	r3, #6
 800fd2a:	d901      	bls.n	800fd30 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd2c:	2306      	movs	r3, #6
 800fd2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd3a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	2200      	movs	r2, #0
 800fd40:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd44:	3304      	adds	r3, #4
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff fa74 	bl	800f234 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4e:	3318      	adds	r3, #24
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff fa6f 	bl	800f234 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5e:	f1c3 0207 	rsb	r2, r3, #7
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6e:	2200      	movs	r2, #0
 800fd70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd76:	2200      	movs	r2, #0
 800fd78:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	334c      	adds	r3, #76	; 0x4c
 800fd80:	224c      	movs	r2, #76	; 0x4c
 800fd82:	2100      	movs	r1, #0
 800fd84:	4618      	mov	r0, r3
 800fd86:	f001 fae7 	bl	8011358 <memset>
 800fd8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8c:	4a0e      	ldr	r2, [pc, #56]	; (800fdc8 <prvInitialiseNewTask+0x138>)
 800fd8e:	651a      	str	r2, [r3, #80]	; 0x50
 800fd90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd92:	4a0e      	ldr	r2, [pc, #56]	; (800fdcc <prvInitialiseNewTask+0x13c>)
 800fd94:	655a      	str	r2, [r3, #84]	; 0x54
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	4a0d      	ldr	r2, [pc, #52]	; (800fdd0 <prvInitialiseNewTask+0x140>)
 800fd9a:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	68f9      	ldr	r1, [r7, #12]
 800fda8:	69b8      	ldr	r0, [r7, #24]
 800fdaa:	f000 fe7d 	bl	8010aa8 <pxPortInitialiseStack>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d002      	beq.n	800fdc0 <prvInitialiseNewTask+0x130>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fdc0:	bf00      	nop
 800fdc2:	3720      	adds	r7, #32
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}
 800fdc8:	20003ac8 	.word	0x20003ac8
 800fdcc:	20003b30 	.word	0x20003b30
 800fdd0:	20003b98 	.word	0x20003b98

0800fdd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fddc:	f000 ff92 	bl	8010d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fde0:	4b24      	ldr	r3, [pc, #144]	; (800fe74 <prvAddNewTaskToReadyList+0xa0>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	3301      	adds	r3, #1
 800fde6:	4a23      	ldr	r2, [pc, #140]	; (800fe74 <prvAddNewTaskToReadyList+0xa0>)
 800fde8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdea:	4b23      	ldr	r3, [pc, #140]	; (800fe78 <prvAddNewTaskToReadyList+0xa4>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d109      	bne.n	800fe06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdf2:	4a21      	ldr	r2, [pc, #132]	; (800fe78 <prvAddNewTaskToReadyList+0xa4>)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdf8:	4b1e      	ldr	r3, [pc, #120]	; (800fe74 <prvAddNewTaskToReadyList+0xa0>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d110      	bne.n	800fe22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fe00:	f000 fb88 	bl	8010514 <prvInitialiseTaskLists>
 800fe04:	e00d      	b.n	800fe22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fe06:	4b1d      	ldr	r3, [pc, #116]	; (800fe7c <prvAddNewTaskToReadyList+0xa8>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d109      	bne.n	800fe22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fe0e:	4b1a      	ldr	r3, [pc, #104]	; (800fe78 <prvAddNewTaskToReadyList+0xa4>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe18:	429a      	cmp	r2, r3
 800fe1a:	d802      	bhi.n	800fe22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fe1c:	4a16      	ldr	r2, [pc, #88]	; (800fe78 <prvAddNewTaskToReadyList+0xa4>)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fe22:	4b17      	ldr	r3, [pc, #92]	; (800fe80 <prvAddNewTaskToReadyList+0xac>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	3301      	adds	r3, #1
 800fe28:	4a15      	ldr	r2, [pc, #84]	; (800fe80 <prvAddNewTaskToReadyList+0xac>)
 800fe2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe30:	2201      	movs	r2, #1
 800fe32:	409a      	lsls	r2, r3
 800fe34:	4b13      	ldr	r3, [pc, #76]	; (800fe84 <prvAddNewTaskToReadyList+0xb0>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	4a12      	ldr	r2, [pc, #72]	; (800fe84 <prvAddNewTaskToReadyList+0xb0>)
 800fe3c:	6013      	str	r3, [r2, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe42:	4613      	mov	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4a0f      	ldr	r2, [pc, #60]	; (800fe88 <prvAddNewTaskToReadyList+0xb4>)
 800fe4c:	441a      	add	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3304      	adds	r3, #4
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f7ff f9fa 	bl	800f24e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe5a:	f000 ff83 	bl	8010d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe5e:	4b07      	ldr	r3, [pc, #28]	; (800fe7c <prvAddNewTaskToReadyList+0xa8>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d001      	beq.n	800fe6a <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe66:	4b04      	ldr	r3, [pc, #16]	; (800fe78 <prvAddNewTaskToReadyList+0xa4>)
 800fe68:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe6a:	bf00      	nop
 800fe6c:	3708      	adds	r7, #8
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	20000a74 	.word	0x20000a74
 800fe78:	20000974 	.word	0x20000974
 800fe7c:	20000a80 	.word	0x20000a80
 800fe80:	20000a90 	.word	0x20000a90
 800fe84:	20000a7c 	.word	0x20000a7c
 800fe88:	20000978 	.word	0x20000978

0800fe8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe94:	2300      	movs	r3, #0
 800fe96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d017      	beq.n	800fece <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe9e:	4b13      	ldr	r3, [pc, #76]	; (800feec <vTaskDelay+0x60>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d00a      	beq.n	800febc <vTaskDelay+0x30>
	__asm volatile
 800fea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feaa:	f383 8811 	msr	BASEPRI, r3
 800feae:	f3bf 8f6f 	isb	sy
 800feb2:	f3bf 8f4f 	dsb	sy
 800feb6:	60bb      	str	r3, [r7, #8]
}
 800feb8:	bf00      	nop
 800feba:	e7fe      	b.n	800feba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800febc:	f000 f86a 	bl	800ff94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fec0:	2100      	movs	r1, #0
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 fd86 	bl	80109d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fec8:	f000 f872 	bl	800ffb0 <xTaskResumeAll>
 800fecc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d107      	bne.n	800fee4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fed4:	4b06      	ldr	r3, [pc, #24]	; (800fef0 <vTaskDelay+0x64>)
 800fed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feda:	601a      	str	r2, [r3, #0]
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fee4:	bf00      	nop
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}
 800feec:	20000a9c 	.word	0x20000a9c
 800fef0:	e000ed04 	.word	0xe000ed04

0800fef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800fefa:	4b1e      	ldr	r3, [pc, #120]	; (800ff74 <vTaskStartScheduler+0x80>)
 800fefc:	9301      	str	r3, [sp, #4]
 800fefe:	2300      	movs	r3, #0
 800ff00:	9300      	str	r3, [sp, #0]
 800ff02:	2300      	movs	r3, #0
 800ff04:	2280      	movs	r2, #128	; 0x80
 800ff06:	491c      	ldr	r1, [pc, #112]	; (800ff78 <vTaskStartScheduler+0x84>)
 800ff08:	481c      	ldr	r0, [pc, #112]	; (800ff7c <vTaskStartScheduler+0x88>)
 800ff0a:	f7ff fe7f 	bl	800fc0c <xTaskCreate>
 800ff0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	2b01      	cmp	r3, #1
 800ff14:	d11b      	bne.n	800ff4e <vTaskStartScheduler+0x5a>
	__asm volatile
 800ff16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff1a:	f383 8811 	msr	BASEPRI, r3
 800ff1e:	f3bf 8f6f 	isb	sy
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	60bb      	str	r3, [r7, #8]
}
 800ff28:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff2a:	4b15      	ldr	r3, [pc, #84]	; (800ff80 <vTaskStartScheduler+0x8c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	334c      	adds	r3, #76	; 0x4c
 800ff30:	4a14      	ldr	r2, [pc, #80]	; (800ff84 <vTaskStartScheduler+0x90>)
 800ff32:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff34:	4b14      	ldr	r3, [pc, #80]	; (800ff88 <vTaskStartScheduler+0x94>)
 800ff36:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff3c:	4b13      	ldr	r3, [pc, #76]	; (800ff8c <vTaskStartScheduler+0x98>)
 800ff3e:	2201      	movs	r2, #1
 800ff40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff42:	4b13      	ldr	r3, [pc, #76]	; (800ff90 <vTaskStartScheduler+0x9c>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff48:	f000 fe3a 	bl	8010bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff4c:	e00e      	b.n	800ff6c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff54:	d10a      	bne.n	800ff6c <vTaskStartScheduler+0x78>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	607b      	str	r3, [r7, #4]
}
 800ff68:	bf00      	nop
 800ff6a:	e7fe      	b.n	800ff6a <vTaskStartScheduler+0x76>
}
 800ff6c:	bf00      	nop
 800ff6e:	3710      	adds	r7, #16
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}
 800ff74:	20000a98 	.word	0x20000a98
 800ff78:	080124c0 	.word	0x080124c0
 800ff7c:	080104f1 	.word	0x080104f1
 800ff80:	20000974 	.word	0x20000974
 800ff84:	20000060 	.word	0x20000060
 800ff88:	20000a94 	.word	0x20000a94
 800ff8c:	20000a80 	.word	0x20000a80
 800ff90:	20000a78 	.word	0x20000a78

0800ff94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff94:	b480      	push	{r7}
 800ff96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ff98:	4b04      	ldr	r3, [pc, #16]	; (800ffac <vTaskSuspendAll+0x18>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	4a03      	ldr	r2, [pc, #12]	; (800ffac <vTaskSuspendAll+0x18>)
 800ffa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ffa2:	bf00      	nop
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr
 800ffac:	20000a9c 	.word	0x20000a9c

0800ffb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffbe:	4b3b      	ldr	r3, [pc, #236]	; (80100ac <xTaskResumeAll+0xfc>)
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d10a      	bne.n	800ffdc <xTaskResumeAll+0x2c>
	__asm volatile
 800ffc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffca:	f383 8811 	msr	BASEPRI, r3
 800ffce:	f3bf 8f6f 	isb	sy
 800ffd2:	f3bf 8f4f 	dsb	sy
 800ffd6:	603b      	str	r3, [r7, #0]
}
 800ffd8:	bf00      	nop
 800ffda:	e7fe      	b.n	800ffda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ffdc:	f000 fe92 	bl	8010d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ffe0:	4b32      	ldr	r3, [pc, #200]	; (80100ac <xTaskResumeAll+0xfc>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	4a31      	ldr	r2, [pc, #196]	; (80100ac <xTaskResumeAll+0xfc>)
 800ffe8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffea:	4b30      	ldr	r3, [pc, #192]	; (80100ac <xTaskResumeAll+0xfc>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d155      	bne.n	801009e <xTaskResumeAll+0xee>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fff2:	4b2f      	ldr	r3, [pc, #188]	; (80100b0 <xTaskResumeAll+0x100>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d051      	beq.n	801009e <xTaskResumeAll+0xee>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fffa:	e02e      	b.n	801005a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fffc:	4b2d      	ldr	r3, [pc, #180]	; (80100b4 <xTaskResumeAll+0x104>)
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	3318      	adds	r3, #24
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff f97d 	bl	800f308 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	3304      	adds	r3, #4
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff f978 	bl	800f308 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001c:	2201      	movs	r2, #1
 801001e:	409a      	lsls	r2, r3
 8010020:	4b25      	ldr	r3, [pc, #148]	; (80100b8 <xTaskResumeAll+0x108>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4313      	orrs	r3, r2
 8010026:	4a24      	ldr	r2, [pc, #144]	; (80100b8 <xTaskResumeAll+0x108>)
 8010028:	6013      	str	r3, [r2, #0]
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801002e:	4613      	mov	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	4413      	add	r3, r2
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	4a21      	ldr	r2, [pc, #132]	; (80100bc <xTaskResumeAll+0x10c>)
 8010038:	441a      	add	r2, r3
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	3304      	adds	r3, #4
 801003e:	4619      	mov	r1, r3
 8010040:	4610      	mov	r0, r2
 8010042:	f7ff f904 	bl	800f24e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801004a:	4b1d      	ldr	r3, [pc, #116]	; (80100c0 <xTaskResumeAll+0x110>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010050:	429a      	cmp	r2, r3
 8010052:	d302      	bcc.n	801005a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010054:	4b1b      	ldr	r3, [pc, #108]	; (80100c4 <xTaskResumeAll+0x114>)
 8010056:	2201      	movs	r2, #1
 8010058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801005a:	4b16      	ldr	r3, [pc, #88]	; (80100b4 <xTaskResumeAll+0x104>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1cc      	bne.n	800fffc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010068:	f000 fad8 	bl	801061c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801006c:	4b16      	ldr	r3, [pc, #88]	; (80100c8 <xTaskResumeAll+0x118>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d010      	beq.n	801009a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010078:	f000 f828 	bl	80100cc <xTaskIncrementTick>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d002      	beq.n	8010088 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010082:	4b10      	ldr	r3, [pc, #64]	; (80100c4 <xTaskResumeAll+0x114>)
 8010084:	2201      	movs	r2, #1
 8010086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	3b01      	subs	r3, #1
 801008c:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d1f1      	bne.n	8010078 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010094:	4b0c      	ldr	r3, [pc, #48]	; (80100c8 <xTaskResumeAll+0x118>)
 8010096:	2200      	movs	r2, #0
 8010098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801009a:	4b0a      	ldr	r3, [pc, #40]	; (80100c4 <xTaskResumeAll+0x114>)
 801009c:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801009e:	f000 fe61 	bl	8010d64 <vPortExitCritical>

	return xAlreadyYielded;
 80100a2:	687b      	ldr	r3, [r7, #4]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3710      	adds	r7, #16
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20000a9c 	.word	0x20000a9c
 80100b0:	20000a74 	.word	0x20000a74
 80100b4:	20000a34 	.word	0x20000a34
 80100b8:	20000a7c 	.word	0x20000a7c
 80100bc:	20000978 	.word	0x20000978
 80100c0:	20000974 	.word	0x20000974
 80100c4:	20000a88 	.word	0x20000a88
 80100c8:	20000a84 	.word	0x20000a84

080100cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80100d2:	2300      	movs	r3, #0
 80100d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100d6:	4b3f      	ldr	r3, [pc, #252]	; (80101d4 <xTaskIncrementTick+0x108>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d16f      	bne.n	80101be <xTaskIncrementTick+0xf2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80100de:	4b3e      	ldr	r3, [pc, #248]	; (80101d8 <xTaskIncrementTick+0x10c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80100e6:	4a3c      	ldr	r2, [pc, #240]	; (80101d8 <xTaskIncrementTick+0x10c>)
 80100e8:	693b      	ldr	r3, [r7, #16]
 80100ea:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d120      	bne.n	8010134 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80100f2:	4b3a      	ldr	r3, [pc, #232]	; (80101dc <xTaskIncrementTick+0x110>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00a      	beq.n	8010112 <xTaskIncrementTick+0x46>
	__asm volatile
 80100fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010100:	f383 8811 	msr	BASEPRI, r3
 8010104:	f3bf 8f6f 	isb	sy
 8010108:	f3bf 8f4f 	dsb	sy
 801010c:	603b      	str	r3, [r7, #0]
}
 801010e:	bf00      	nop
 8010110:	e7fe      	b.n	8010110 <xTaskIncrementTick+0x44>
 8010112:	4b32      	ldr	r3, [pc, #200]	; (80101dc <xTaskIncrementTick+0x110>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	60fb      	str	r3, [r7, #12]
 8010118:	4b31      	ldr	r3, [pc, #196]	; (80101e0 <xTaskIncrementTick+0x114>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a2f      	ldr	r2, [pc, #188]	; (80101dc <xTaskIncrementTick+0x110>)
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	4a2f      	ldr	r2, [pc, #188]	; (80101e0 <xTaskIncrementTick+0x114>)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6013      	str	r3, [r2, #0]
 8010126:	4b2f      	ldr	r3, [pc, #188]	; (80101e4 <xTaskIncrementTick+0x118>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3301      	adds	r3, #1
 801012c:	4a2d      	ldr	r2, [pc, #180]	; (80101e4 <xTaskIncrementTick+0x118>)
 801012e:	6013      	str	r3, [r2, #0]
 8010130:	f000 fa74 	bl	801061c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010134:	4b2c      	ldr	r3, [pc, #176]	; (80101e8 <xTaskIncrementTick+0x11c>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	693a      	ldr	r2, [r7, #16]
 801013a:	429a      	cmp	r2, r3
 801013c:	d344      	bcc.n	80101c8 <xTaskIncrementTick+0xfc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801013e:	4b27      	ldr	r3, [pc, #156]	; (80101dc <xTaskIncrementTick+0x110>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d104      	bne.n	8010152 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010148:	4b27      	ldr	r3, [pc, #156]	; (80101e8 <xTaskIncrementTick+0x11c>)
 801014a:	f04f 32ff 	mov.w	r2, #4294967295
 801014e:	601a      	str	r2, [r3, #0]
					break;
 8010150:	e03a      	b.n	80101c8 <xTaskIncrementTick+0xfc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010152:	4b22      	ldr	r3, [pc, #136]	; (80101dc <xTaskIncrementTick+0x110>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	429a      	cmp	r2, r3
 8010168:	d203      	bcs.n	8010172 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801016a:	4a1f      	ldr	r2, [pc, #124]	; (80101e8 <xTaskIncrementTick+0x11c>)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010170:	e02a      	b.n	80101c8 <xTaskIncrementTick+0xfc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	3304      	adds	r3, #4
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff f8c6 	bl	800f308 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010180:	2b00      	cmp	r3, #0
 8010182:	d004      	beq.n	801018e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	3318      	adds	r3, #24
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff f8bd 	bl	800f308 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010192:	2201      	movs	r2, #1
 8010194:	409a      	lsls	r2, r3
 8010196:	4b15      	ldr	r3, [pc, #84]	; (80101ec <xTaskIncrementTick+0x120>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4313      	orrs	r3, r2
 801019c:	4a13      	ldr	r2, [pc, #76]	; (80101ec <xTaskIncrementTick+0x120>)
 801019e:	6013      	str	r3, [r2, #0]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a4:	4613      	mov	r3, r2
 80101a6:	009b      	lsls	r3, r3, #2
 80101a8:	4413      	add	r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4a10      	ldr	r2, [pc, #64]	; (80101f0 <xTaskIncrementTick+0x124>)
 80101ae:	441a      	add	r2, r3
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	3304      	adds	r3, #4
 80101b4:	4619      	mov	r1, r3
 80101b6:	4610      	mov	r0, r2
 80101b8:	f7ff f849 	bl	800f24e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101bc:	e7bf      	b.n	801013e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80101be:	4b0d      	ldr	r3, [pc, #52]	; (80101f4 <xTaskIncrementTick+0x128>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3301      	adds	r3, #1
 80101c4:	4a0b      	ldr	r2, [pc, #44]	; (80101f4 <xTaskIncrementTick+0x128>)
 80101c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80101c8:	697b      	ldr	r3, [r7, #20]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3718      	adds	r7, #24
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	20000a9c 	.word	0x20000a9c
 80101d8:	20000a78 	.word	0x20000a78
 80101dc:	20000a2c 	.word	0x20000a2c
 80101e0:	20000a30 	.word	0x20000a30
 80101e4:	20000a8c 	.word	0x20000a8c
 80101e8:	20000a94 	.word	0x20000a94
 80101ec:	20000a7c 	.word	0x20000a7c
 80101f0:	20000978 	.word	0x20000978
 80101f4:	20000a84 	.word	0x20000a84

080101f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101f8:	b480      	push	{r7}
 80101fa:	b087      	sub	sp, #28
 80101fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101fe:	4b29      	ldr	r3, [pc, #164]	; (80102a4 <vTaskSwitchContext+0xac>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2b00      	cmp	r3, #0
 8010204:	d003      	beq.n	801020e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010206:	4b28      	ldr	r3, [pc, #160]	; (80102a8 <vTaskSwitchContext+0xb0>)
 8010208:	2201      	movs	r2, #1
 801020a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801020c:	e044      	b.n	8010298 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801020e:	4b26      	ldr	r3, [pc, #152]	; (80102a8 <vTaskSwitchContext+0xb0>)
 8010210:	2200      	movs	r2, #0
 8010212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010214:	4b25      	ldr	r3, [pc, #148]	; (80102ac <vTaskSwitchContext+0xb4>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	fab3 f383 	clz	r3, r3
 8010220:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010222:	7afb      	ldrb	r3, [r7, #11]
 8010224:	f1c3 031f 	rsb	r3, r3, #31
 8010228:	617b      	str	r3, [r7, #20]
 801022a:	4921      	ldr	r1, [pc, #132]	; (80102b0 <vTaskSwitchContext+0xb8>)
 801022c:	697a      	ldr	r2, [r7, #20]
 801022e:	4613      	mov	r3, r2
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	4413      	add	r3, r2
 8010234:	009b      	lsls	r3, r3, #2
 8010236:	440b      	add	r3, r1
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d10a      	bne.n	8010254 <vTaskSwitchContext+0x5c>
	__asm volatile
 801023e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010242:	f383 8811 	msr	BASEPRI, r3
 8010246:	f3bf 8f6f 	isb	sy
 801024a:	f3bf 8f4f 	dsb	sy
 801024e:	607b      	str	r3, [r7, #4]
}
 8010250:	bf00      	nop
 8010252:	e7fe      	b.n	8010252 <vTaskSwitchContext+0x5a>
 8010254:	697a      	ldr	r2, [r7, #20]
 8010256:	4613      	mov	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	4413      	add	r3, r2
 801025c:	009b      	lsls	r3, r3, #2
 801025e:	4a14      	ldr	r2, [pc, #80]	; (80102b0 <vTaskSwitchContext+0xb8>)
 8010260:	4413      	add	r3, r2
 8010262:	613b      	str	r3, [r7, #16]
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	685a      	ldr	r2, [r3, #4]
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	605a      	str	r2, [r3, #4]
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	685a      	ldr	r2, [r3, #4]
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	3308      	adds	r3, #8
 8010276:	429a      	cmp	r2, r3
 8010278:	d104      	bne.n	8010284 <vTaskSwitchContext+0x8c>
 801027a:	693b      	ldr	r3, [r7, #16]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	685a      	ldr	r2, [r3, #4]
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	605a      	str	r2, [r3, #4]
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	68db      	ldr	r3, [r3, #12]
 801028a:	4a0a      	ldr	r2, [pc, #40]	; (80102b4 <vTaskSwitchContext+0xbc>)
 801028c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801028e:	4b09      	ldr	r3, [pc, #36]	; (80102b4 <vTaskSwitchContext+0xbc>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	334c      	adds	r3, #76	; 0x4c
 8010294:	4a08      	ldr	r2, [pc, #32]	; (80102b8 <vTaskSwitchContext+0xc0>)
 8010296:	6013      	str	r3, [r2, #0]
}
 8010298:	bf00      	nop
 801029a:	371c      	adds	r7, #28
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr
 80102a4:	20000a9c 	.word	0x20000a9c
 80102a8:	20000a88 	.word	0x20000a88
 80102ac:	20000a7c 	.word	0x20000a7c
 80102b0:	20000978 	.word	0x20000978
 80102b4:	20000974 	.word	0x20000974
 80102b8:	20000060 	.word	0x20000060

080102bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b084      	sub	sp, #16
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d10a      	bne.n	80102e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80102cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d0:	f383 8811 	msr	BASEPRI, r3
 80102d4:	f3bf 8f6f 	isb	sy
 80102d8:	f3bf 8f4f 	dsb	sy
 80102dc:	60fb      	str	r3, [r7, #12]
}
 80102de:	bf00      	nop
 80102e0:	e7fe      	b.n	80102e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102e2:	4b07      	ldr	r3, [pc, #28]	; (8010300 <vTaskPlaceOnEventList+0x44>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	3318      	adds	r3, #24
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7fe ffd3 	bl	800f296 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80102f0:	2101      	movs	r1, #1
 80102f2:	6838      	ldr	r0, [r7, #0]
 80102f4:	f000 fb6e 	bl	80109d4 <prvAddCurrentTaskToDelayedList>
}
 80102f8:	bf00      	nop
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	20000974 	.word	0x20000974

08010304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d10a      	bne.n	8010330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801031a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031e:	f383 8811 	msr	BASEPRI, r3
 8010322:	f3bf 8f6f 	isb	sy
 8010326:	f3bf 8f4f 	dsb	sy
 801032a:	60fb      	str	r3, [r7, #12]
}
 801032c:	bf00      	nop
 801032e:	e7fe      	b.n	801032e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	3318      	adds	r3, #24
 8010334:	4618      	mov	r0, r3
 8010336:	f7fe ffe7 	bl	800f308 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801033a:	4b1d      	ldr	r3, [pc, #116]	; (80103b0 <xTaskRemoveFromEventList+0xac>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d11c      	bne.n	801037c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	3304      	adds	r3, #4
 8010346:	4618      	mov	r0, r3
 8010348:	f7fe ffde 	bl	800f308 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010350:	2201      	movs	r2, #1
 8010352:	409a      	lsls	r2, r3
 8010354:	4b17      	ldr	r3, [pc, #92]	; (80103b4 <xTaskRemoveFromEventList+0xb0>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	4313      	orrs	r3, r2
 801035a:	4a16      	ldr	r2, [pc, #88]	; (80103b4 <xTaskRemoveFromEventList+0xb0>)
 801035c:	6013      	str	r3, [r2, #0]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010362:	4613      	mov	r3, r2
 8010364:	009b      	lsls	r3, r3, #2
 8010366:	4413      	add	r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	4a13      	ldr	r2, [pc, #76]	; (80103b8 <xTaskRemoveFromEventList+0xb4>)
 801036c:	441a      	add	r2, r3
 801036e:	693b      	ldr	r3, [r7, #16]
 8010370:	3304      	adds	r3, #4
 8010372:	4619      	mov	r1, r3
 8010374:	4610      	mov	r0, r2
 8010376:	f7fe ff6a 	bl	800f24e <vListInsertEnd>
 801037a:	e005      	b.n	8010388 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	3318      	adds	r3, #24
 8010380:	4619      	mov	r1, r3
 8010382:	480e      	ldr	r0, [pc, #56]	; (80103bc <xTaskRemoveFromEventList+0xb8>)
 8010384:	f7fe ff63 	bl	800f24e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038c:	4b0c      	ldr	r3, [pc, #48]	; (80103c0 <xTaskRemoveFromEventList+0xbc>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010392:	429a      	cmp	r2, r3
 8010394:	d905      	bls.n	80103a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010396:	2301      	movs	r3, #1
 8010398:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801039a:	4b0a      	ldr	r3, [pc, #40]	; (80103c4 <xTaskRemoveFromEventList+0xc0>)
 801039c:	2201      	movs	r2, #1
 801039e:	601a      	str	r2, [r3, #0]
 80103a0:	e001      	b.n	80103a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80103a2:	2300      	movs	r3, #0
 80103a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80103a6:	697b      	ldr	r3, [r7, #20]
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3718      	adds	r7, #24
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	20000a9c 	.word	0x20000a9c
 80103b4:	20000a7c 	.word	0x20000a7c
 80103b8:	20000978 	.word	0x20000978
 80103bc:	20000a34 	.word	0x20000a34
 80103c0:	20000974 	.word	0x20000974
 80103c4:	20000a88 	.word	0x20000a88

080103c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80103d0:	4b06      	ldr	r3, [pc, #24]	; (80103ec <vTaskInternalSetTimeOutState+0x24>)
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80103d8:	4b05      	ldr	r3, [pc, #20]	; (80103f0 <vTaskInternalSetTimeOutState+0x28>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	605a      	str	r2, [r3, #4]
}
 80103e0:	bf00      	nop
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ea:	4770      	bx	lr
 80103ec:	20000a8c 	.word	0x20000a8c
 80103f0:	20000a78 	.word	0x20000a78

080103f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b088      	sub	sp, #32
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
 80103fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d10a      	bne.n	801041a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010408:	f383 8811 	msr	BASEPRI, r3
 801040c:	f3bf 8f6f 	isb	sy
 8010410:	f3bf 8f4f 	dsb	sy
 8010414:	613b      	str	r3, [r7, #16]
}
 8010416:	bf00      	nop
 8010418:	e7fe      	b.n	8010418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d10a      	bne.n	8010436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010424:	f383 8811 	msr	BASEPRI, r3
 8010428:	f3bf 8f6f 	isb	sy
 801042c:	f3bf 8f4f 	dsb	sy
 8010430:	60fb      	str	r3, [r7, #12]
}
 8010432:	bf00      	nop
 8010434:	e7fe      	b.n	8010434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010436:	f000 fc65 	bl	8010d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801043a:	4b24      	ldr	r3, [pc, #144]	; (80104cc <xTaskCheckForTimeOut+0xd8>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 801044a:	4b21      	ldr	r3, [pc, #132]	; (80104d0 <xTaskCheckForTimeOut+0xdc>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010452:	2b00      	cmp	r3, #0
 8010454:	d007      	beq.n	8010466 <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8010456:	4b1e      	ldr	r3, [pc, #120]	; (80104d0 <xTaskCheckForTimeOut+0xdc>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2200      	movs	r2, #0
 801045c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
				xReturn = pdTRUE;
 8010460:	2301      	movs	r3, #1
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	e02b      	b.n	80104be <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801046e:	d102      	bne.n	8010476 <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010470:	2300      	movs	r3, #0
 8010472:	61fb      	str	r3, [r7, #28]
 8010474:	e023      	b.n	80104be <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <xTaskCheckForTimeOut+0xe0>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	429a      	cmp	r2, r3
 8010480:	d007      	beq.n	8010492 <xTaskCheckForTimeOut+0x9e>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	69ba      	ldr	r2, [r7, #24]
 8010488:	429a      	cmp	r2, r3
 801048a:	d302      	bcc.n	8010492 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801048c:	2301      	movs	r3, #1
 801048e:	61fb      	str	r3, [r7, #28]
 8010490:	e015      	b.n	80104be <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	429a      	cmp	r2, r3
 801049a:	d20b      	bcs.n	80104b4 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	1ad2      	subs	r2, r2, r3
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f7ff ff8d 	bl	80103c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80104ae:	2300      	movs	r3, #0
 80104b0:	61fb      	str	r3, [r7, #28]
 80104b2:	e004      	b.n	80104be <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	2200      	movs	r2, #0
 80104b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80104ba:	2301      	movs	r3, #1
 80104bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80104be:	f000 fc51 	bl	8010d64 <vPortExitCritical>

	return xReturn;
 80104c2:	69fb      	ldr	r3, [r7, #28]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3720      	adds	r7, #32
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	20000a78 	.word	0x20000a78
 80104d0:	20000974 	.word	0x20000974
 80104d4:	20000a8c 	.word	0x20000a8c

080104d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80104d8:	b480      	push	{r7}
 80104da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80104dc:	4b03      	ldr	r3, [pc, #12]	; (80104ec <vTaskMissedYield+0x14>)
 80104de:	2201      	movs	r2, #1
 80104e0:	601a      	str	r2, [r3, #0]
}
 80104e2:	bf00      	nop
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	20000a88 	.word	0x20000a88

080104f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80104f8:	f000 f84c 	bl	8010594 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 80104fc:	4b04      	ldr	r3, [pc, #16]	; (8010510 <prvIdleTask+0x20>)
 80104fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010502:	601a      	str	r2, [r3, #0]
 8010504:	f3bf 8f4f 	dsb	sy
 8010508:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801050c:	e7f4      	b.n	80104f8 <prvIdleTask+0x8>
 801050e:	bf00      	nop
 8010510:	e000ed04 	.word	0xe000ed04

08010514 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801051a:	2300      	movs	r3, #0
 801051c:	607b      	str	r3, [r7, #4]
 801051e:	e00c      	b.n	801053a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	4613      	mov	r3, r2
 8010524:	009b      	lsls	r3, r3, #2
 8010526:	4413      	add	r3, r2
 8010528:	009b      	lsls	r3, r3, #2
 801052a:	4a12      	ldr	r2, [pc, #72]	; (8010574 <prvInitialiseTaskLists+0x60>)
 801052c:	4413      	add	r3, r2
 801052e:	4618      	mov	r0, r3
 8010530:	f7fe fe60 	bl	800f1f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	3301      	adds	r3, #1
 8010538:	607b      	str	r3, [r7, #4]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2b06      	cmp	r3, #6
 801053e:	d9ef      	bls.n	8010520 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010540:	480d      	ldr	r0, [pc, #52]	; (8010578 <prvInitialiseTaskLists+0x64>)
 8010542:	f7fe fe57 	bl	800f1f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010546:	480d      	ldr	r0, [pc, #52]	; (801057c <prvInitialiseTaskLists+0x68>)
 8010548:	f7fe fe54 	bl	800f1f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801054c:	480c      	ldr	r0, [pc, #48]	; (8010580 <prvInitialiseTaskLists+0x6c>)
 801054e:	f7fe fe51 	bl	800f1f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010552:	480c      	ldr	r0, [pc, #48]	; (8010584 <prvInitialiseTaskLists+0x70>)
 8010554:	f7fe fe4e 	bl	800f1f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010558:	480b      	ldr	r0, [pc, #44]	; (8010588 <prvInitialiseTaskLists+0x74>)
 801055a:	f7fe fe4b 	bl	800f1f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801055e:	4b0b      	ldr	r3, [pc, #44]	; (801058c <prvInitialiseTaskLists+0x78>)
 8010560:	4a05      	ldr	r2, [pc, #20]	; (8010578 <prvInitialiseTaskLists+0x64>)
 8010562:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010564:	4b0a      	ldr	r3, [pc, #40]	; (8010590 <prvInitialiseTaskLists+0x7c>)
 8010566:	4a05      	ldr	r2, [pc, #20]	; (801057c <prvInitialiseTaskLists+0x68>)
 8010568:	601a      	str	r2, [r3, #0]
}
 801056a:	bf00      	nop
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	20000978 	.word	0x20000978
 8010578:	20000a04 	.word	0x20000a04
 801057c:	20000a18 	.word	0x20000a18
 8010580:	20000a34 	.word	0x20000a34
 8010584:	20000a48 	.word	0x20000a48
 8010588:	20000a60 	.word	0x20000a60
 801058c:	20000a2c 	.word	0x20000a2c
 8010590:	20000a30 	.word	0x20000a30

08010594 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801059a:	e019      	b.n	80105d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801059c:	f000 fbb2 	bl	8010d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105a0:	4b10      	ldr	r3, [pc, #64]	; (80105e4 <prvCheckTasksWaitingTermination+0x50>)
 80105a2:	68db      	ldr	r3, [r3, #12]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	3304      	adds	r3, #4
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fe feab 	bl	800f308 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80105b2:	4b0d      	ldr	r3, [pc, #52]	; (80105e8 <prvCheckTasksWaitingTermination+0x54>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	3b01      	subs	r3, #1
 80105b8:	4a0b      	ldr	r2, [pc, #44]	; (80105e8 <prvCheckTasksWaitingTermination+0x54>)
 80105ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80105bc:	4b0b      	ldr	r3, [pc, #44]	; (80105ec <prvCheckTasksWaitingTermination+0x58>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3b01      	subs	r3, #1
 80105c2:	4a0a      	ldr	r2, [pc, #40]	; (80105ec <prvCheckTasksWaitingTermination+0x58>)
 80105c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80105c6:	f000 fbcd 	bl	8010d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f810 	bl	80105f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105d0:	4b06      	ldr	r3, [pc, #24]	; (80105ec <prvCheckTasksWaitingTermination+0x58>)
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d1e1      	bne.n	801059c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80105d8:	bf00      	nop
 80105da:	bf00      	nop
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	20000a48 	.word	0x20000a48
 80105e8:	20000a74 	.word	0x20000a74
 80105ec:	20000a5c 	.word	0x20000a5c

080105f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	334c      	adds	r3, #76	; 0x4c
 80105fc:	4618      	mov	r0, r3
 80105fe:	f000 feb3 	bl	8011368 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010606:	4618      	mov	r0, r3
 8010608:	f000 fd6a 	bl	80110e0 <vPortFree>
			vPortFree( pxTCB );
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fd67 	bl	80110e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010612:	bf00      	nop
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
	...

0801061c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801061c:	b480      	push	{r7}
 801061e:	b083      	sub	sp, #12
 8010620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010622:	4b0c      	ldr	r3, [pc, #48]	; (8010654 <prvResetNextTaskUnblockTime+0x38>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d104      	bne.n	8010636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801062c:	4b0a      	ldr	r3, [pc, #40]	; (8010658 <prvResetNextTaskUnblockTime+0x3c>)
 801062e:	f04f 32ff 	mov.w	r2, #4294967295
 8010632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010634:	e008      	b.n	8010648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010636:	4b07      	ldr	r3, [pc, #28]	; (8010654 <prvResetNextTaskUnblockTime+0x38>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	68db      	ldr	r3, [r3, #12]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	685b      	ldr	r3, [r3, #4]
 8010644:	4a04      	ldr	r2, [pc, #16]	; (8010658 <prvResetNextTaskUnblockTime+0x3c>)
 8010646:	6013      	str	r3, [r2, #0]
}
 8010648:	bf00      	nop
 801064a:	370c      	adds	r7, #12
 801064c:	46bd      	mov	sp, r7
 801064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010652:	4770      	bx	lr
 8010654:	20000a2c 	.word	0x20000a2c
 8010658:	20000a94 	.word	0x20000a94

0801065c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010662:	4b0b      	ldr	r3, [pc, #44]	; (8010690 <xTaskGetSchedulerState+0x34>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801066a:	2301      	movs	r3, #1
 801066c:	607b      	str	r3, [r7, #4]
 801066e:	e008      	b.n	8010682 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010670:	4b08      	ldr	r3, [pc, #32]	; (8010694 <xTaskGetSchedulerState+0x38>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d102      	bne.n	801067e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010678:	2302      	movs	r3, #2
 801067a:	607b      	str	r3, [r7, #4]
 801067c:	e001      	b.n	8010682 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801067e:	2300      	movs	r3, #0
 8010680:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010682:	687b      	ldr	r3, [r7, #4]
	}
 8010684:	4618      	mov	r0, r3
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	20000a80 	.word	0x20000a80
 8010694:	20000a9c 	.word	0x20000a9c

08010698 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010698:	b580      	push	{r7, lr}
 801069a:	b084      	sub	sp, #16
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80106a4:	2300      	movs	r3, #0
 80106a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d05e      	beq.n	801076c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106b2:	4b31      	ldr	r3, [pc, #196]	; (8010778 <xTaskPriorityInherit+0xe0>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d24e      	bcs.n	801075a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	db06      	blt.n	80106d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106c4:	4b2c      	ldr	r3, [pc, #176]	; (8010778 <xTaskPriorityInherit+0xe0>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106ca:	f1c3 0207 	rsb	r2, r3, #7
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	6959      	ldr	r1, [r3, #20]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106da:	4613      	mov	r3, r2
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	4413      	add	r3, r2
 80106e0:	009b      	lsls	r3, r3, #2
 80106e2:	4a26      	ldr	r2, [pc, #152]	; (801077c <xTaskPriorityInherit+0xe4>)
 80106e4:	4413      	add	r3, r2
 80106e6:	4299      	cmp	r1, r3
 80106e8:	d12f      	bne.n	801074a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106ea:	68bb      	ldr	r3, [r7, #8]
 80106ec:	3304      	adds	r3, #4
 80106ee:	4618      	mov	r0, r3
 80106f0:	f7fe fe0a 	bl	800f308 <uxListRemove>
 80106f4:	4603      	mov	r3, r0
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d10a      	bne.n	8010710 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106fe:	2201      	movs	r2, #1
 8010700:	fa02 f303 	lsl.w	r3, r2, r3
 8010704:	43da      	mvns	r2, r3
 8010706:	4b1e      	ldr	r3, [pc, #120]	; (8010780 <xTaskPriorityInherit+0xe8>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4013      	ands	r3, r2
 801070c:	4a1c      	ldr	r2, [pc, #112]	; (8010780 <xTaskPriorityInherit+0xe8>)
 801070e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010710:	4b19      	ldr	r3, [pc, #100]	; (8010778 <xTaskPriorityInherit+0xe0>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010716:	68bb      	ldr	r3, [r7, #8]
 8010718:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801071a:	68bb      	ldr	r3, [r7, #8]
 801071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801071e:	2201      	movs	r2, #1
 8010720:	409a      	lsls	r2, r3
 8010722:	4b17      	ldr	r3, [pc, #92]	; (8010780 <xTaskPriorityInherit+0xe8>)
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4313      	orrs	r3, r2
 8010728:	4a15      	ldr	r2, [pc, #84]	; (8010780 <xTaskPriorityInherit+0xe8>)
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010730:	4613      	mov	r3, r2
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	4413      	add	r3, r2
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	4a10      	ldr	r2, [pc, #64]	; (801077c <xTaskPriorityInherit+0xe4>)
 801073a:	441a      	add	r2, r3
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	3304      	adds	r3, #4
 8010740:	4619      	mov	r1, r3
 8010742:	4610      	mov	r0, r2
 8010744:	f7fe fd83 	bl	800f24e <vListInsertEnd>
 8010748:	e004      	b.n	8010754 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801074a:	4b0b      	ldr	r3, [pc, #44]	; (8010778 <xTaskPriorityInherit+0xe0>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010754:	2301      	movs	r3, #1
 8010756:	60fb      	str	r3, [r7, #12]
 8010758:	e008      	b.n	801076c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801075e:	4b06      	ldr	r3, [pc, #24]	; (8010778 <xTaskPriorityInherit+0xe0>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010764:	429a      	cmp	r2, r3
 8010766:	d201      	bcs.n	801076c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010768:	2301      	movs	r3, #1
 801076a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801076c:	68fb      	ldr	r3, [r7, #12]
	}
 801076e:	4618      	mov	r0, r3
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	20000974 	.word	0x20000974
 801077c:	20000978 	.word	0x20000978
 8010780:	20000a7c 	.word	0x20000a7c

08010784 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010790:	2300      	movs	r3, #0
 8010792:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d06e      	beq.n	8010878 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801079a:	4b3a      	ldr	r3, [pc, #232]	; (8010884 <xTaskPriorityDisinherit+0x100>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	693a      	ldr	r2, [r7, #16]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d00a      	beq.n	80107ba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80107a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	60fb      	str	r3, [r7, #12]
}
 80107b6:	bf00      	nop
 80107b8:	e7fe      	b.n	80107b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d10a      	bne.n	80107d8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80107c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c6:	f383 8811 	msr	BASEPRI, r3
 80107ca:	f3bf 8f6f 	isb	sy
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	60bb      	str	r3, [r7, #8]
}
 80107d4:	bf00      	nop
 80107d6:	e7fe      	b.n	80107d6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107dc:	1e5a      	subs	r2, r3, #1
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d044      	beq.n	8010878 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d140      	bne.n	8010878 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	3304      	adds	r3, #4
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fe fd84 	bl	800f308 <uxListRemove>
 8010800:	4603      	mov	r3, r0
 8010802:	2b00      	cmp	r3, #0
 8010804:	d115      	bne.n	8010832 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801080a:	491f      	ldr	r1, [pc, #124]	; (8010888 <xTaskPriorityDisinherit+0x104>)
 801080c:	4613      	mov	r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	440b      	add	r3, r1
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d10a      	bne.n	8010832 <xTaskPriorityDisinherit+0xae>
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010820:	2201      	movs	r2, #1
 8010822:	fa02 f303 	lsl.w	r3, r2, r3
 8010826:	43da      	mvns	r2, r3
 8010828:	4b18      	ldr	r3, [pc, #96]	; (801088c <xTaskPriorityDisinherit+0x108>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	4013      	ands	r3, r2
 801082e:	4a17      	ldr	r2, [pc, #92]	; (801088c <xTaskPriorityDisinherit+0x108>)
 8010830:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801083e:	f1c3 0207 	rsb	r2, r3, #7
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010846:	693b      	ldr	r3, [r7, #16]
 8010848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801084a:	2201      	movs	r2, #1
 801084c:	409a      	lsls	r2, r3
 801084e:	4b0f      	ldr	r3, [pc, #60]	; (801088c <xTaskPriorityDisinherit+0x108>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	4313      	orrs	r3, r2
 8010854:	4a0d      	ldr	r2, [pc, #52]	; (801088c <xTaskPriorityDisinherit+0x108>)
 8010856:	6013      	str	r3, [r2, #0]
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801085c:	4613      	mov	r3, r2
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	4413      	add	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4a08      	ldr	r2, [pc, #32]	; (8010888 <xTaskPriorityDisinherit+0x104>)
 8010866:	441a      	add	r2, r3
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	3304      	adds	r3, #4
 801086c:	4619      	mov	r1, r3
 801086e:	4610      	mov	r0, r2
 8010870:	f7fe fced 	bl	800f24e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010874:	2301      	movs	r3, #1
 8010876:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010878:	697b      	ldr	r3, [r7, #20]
	}
 801087a:	4618      	mov	r0, r3
 801087c:	3718      	adds	r7, #24
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	20000974 	.word	0x20000974
 8010888:	20000978 	.word	0x20000978
 801088c:	20000a7c 	.word	0x20000a7c

08010890 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010890:	b580      	push	{r7, lr}
 8010892:	b088      	sub	sp, #32
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801089e:	2301      	movs	r3, #1
 80108a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d077      	beq.n	8010998 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d10a      	bne.n	80108c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80108b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b4:	f383 8811 	msr	BASEPRI, r3
 80108b8:	f3bf 8f6f 	isb	sy
 80108bc:	f3bf 8f4f 	dsb	sy
 80108c0:	60fb      	str	r3, [r7, #12]
}
 80108c2:	bf00      	nop
 80108c4:	e7fe      	b.n	80108c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80108c6:	69bb      	ldr	r3, [r7, #24]
 80108c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d902      	bls.n	80108d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	61fb      	str	r3, [r7, #28]
 80108d4:	e002      	b.n	80108dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108e0:	69fa      	ldr	r2, [r7, #28]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d058      	beq.n	8010998 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80108e6:	69bb      	ldr	r3, [r7, #24]
 80108e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108ea:	697a      	ldr	r2, [r7, #20]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d153      	bne.n	8010998 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80108f0:	4b2b      	ldr	r3, [pc, #172]	; (80109a0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	69ba      	ldr	r2, [r7, #24]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d10a      	bne.n	8010910 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80108fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108fe:	f383 8811 	msr	BASEPRI, r3
 8010902:	f3bf 8f6f 	isb	sy
 8010906:	f3bf 8f4f 	dsb	sy
 801090a:	60bb      	str	r3, [r7, #8]
}
 801090c:	bf00      	nop
 801090e:	e7fe      	b.n	801090e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010914:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	69fa      	ldr	r2, [r7, #28]
 801091a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	699b      	ldr	r3, [r3, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	db04      	blt.n	801092e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	f1c3 0207 	rsb	r2, r3, #7
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	6959      	ldr	r1, [r3, #20]
 8010932:	693a      	ldr	r2, [r7, #16]
 8010934:	4613      	mov	r3, r2
 8010936:	009b      	lsls	r3, r3, #2
 8010938:	4413      	add	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4a19      	ldr	r2, [pc, #100]	; (80109a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801093e:	4413      	add	r3, r2
 8010940:	4299      	cmp	r1, r3
 8010942:	d129      	bne.n	8010998 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	3304      	adds	r3, #4
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fcdd 	bl	800f308 <uxListRemove>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	d10a      	bne.n	801096a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010958:	2201      	movs	r2, #1
 801095a:	fa02 f303 	lsl.w	r3, r2, r3
 801095e:	43da      	mvns	r2, r3
 8010960:	4b11      	ldr	r3, [pc, #68]	; (80109a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4013      	ands	r3, r2
 8010966:	4a10      	ldr	r2, [pc, #64]	; (80109a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010968:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801096a:	69bb      	ldr	r3, [r7, #24]
 801096c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801096e:	2201      	movs	r2, #1
 8010970:	409a      	lsls	r2, r3
 8010972:	4b0d      	ldr	r3, [pc, #52]	; (80109a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	4313      	orrs	r3, r2
 8010978:	4a0b      	ldr	r2, [pc, #44]	; (80109a8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010980:	4613      	mov	r3, r2
 8010982:	009b      	lsls	r3, r3, #2
 8010984:	4413      	add	r3, r2
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4a06      	ldr	r2, [pc, #24]	; (80109a4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801098a:	441a      	add	r2, r3
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	3304      	adds	r3, #4
 8010990:	4619      	mov	r1, r3
 8010992:	4610      	mov	r0, r2
 8010994:	f7fe fc5b 	bl	800f24e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010998:	bf00      	nop
 801099a:	3720      	adds	r7, #32
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	20000974 	.word	0x20000974
 80109a4:	20000978 	.word	0x20000978
 80109a8:	20000a7c 	.word	0x20000a7c

080109ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80109ac:	b480      	push	{r7}
 80109ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80109b0:	4b07      	ldr	r3, [pc, #28]	; (80109d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d004      	beq.n	80109c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80109b8:	4b05      	ldr	r3, [pc, #20]	; (80109d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80109be:	3201      	adds	r2, #1
 80109c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80109c2:	4b03      	ldr	r3, [pc, #12]	; (80109d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80109c4:	681b      	ldr	r3, [r3, #0]
	}
 80109c6:	4618      	mov	r0, r3
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr
 80109d0:	20000974 	.word	0x20000974

080109d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80109de:	4b2b      	ldr	r3, [pc, #172]	; (8010a8c <prvAddCurrentTaskToDelayedList+0xb8>)
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80109e4:	4b2a      	ldr	r3, [pc, #168]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	2200      	movs	r2, #0
 80109ea:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109ee:	4b28      	ldr	r3, [pc, #160]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	3304      	adds	r3, #4
 80109f4:	4618      	mov	r0, r3
 80109f6:	f7fe fc87 	bl	800f308 <uxListRemove>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10b      	bne.n	8010a18 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010a00:	4b23      	ldr	r3, [pc, #140]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a06:	2201      	movs	r2, #1
 8010a08:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0c:	43da      	mvns	r2, r3
 8010a0e:	4b21      	ldr	r3, [pc, #132]	; (8010a94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	4013      	ands	r3, r2
 8010a14:	4a1f      	ldr	r2, [pc, #124]	; (8010a94 <prvAddCurrentTaskToDelayedList+0xc0>)
 8010a16:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1e:	d10a      	bne.n	8010a36 <prvAddCurrentTaskToDelayedList+0x62>
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d007      	beq.n	8010a36 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a26:	4b1a      	ldr	r3, [pc, #104]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	3304      	adds	r3, #4
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	481a      	ldr	r0, [pc, #104]	; (8010a98 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010a30:	f7fe fc0d 	bl	800f24e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a34:	e026      	b.n	8010a84 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a3e:	4b14      	ldr	r3, [pc, #80]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	68ba      	ldr	r2, [r7, #8]
 8010a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a46:	68ba      	ldr	r2, [r7, #8]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d209      	bcs.n	8010a62 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a4e:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	4b0f      	ldr	r3, [pc, #60]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	3304      	adds	r3, #4
 8010a58:	4619      	mov	r1, r3
 8010a5a:	4610      	mov	r0, r2
 8010a5c:	f7fe fc1b 	bl	800f296 <vListInsert>
}
 8010a60:	e010      	b.n	8010a84 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a62:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	4b0a      	ldr	r3, [pc, #40]	; (8010a90 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	4610      	mov	r0, r2
 8010a70:	f7fe fc11 	bl	800f296 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a74:	4b0b      	ldr	r3, [pc, #44]	; (8010aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d202      	bcs.n	8010a84 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 8010a7e:	4a09      	ldr	r2, [pc, #36]	; (8010aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	6013      	str	r3, [r2, #0]
}
 8010a84:	bf00      	nop
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	20000a78 	.word	0x20000a78
 8010a90:	20000974 	.word	0x20000974
 8010a94:	20000a7c 	.word	0x20000a7c
 8010a98:	20000a60 	.word	0x20000a60
 8010a9c:	20000a30 	.word	0x20000a30
 8010aa0:	20000a2c 	.word	0x20000a2c
 8010aa4:	20000a94 	.word	0x20000a94

08010aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b085      	sub	sp, #20
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	3b04      	subs	r3, #4
 8010ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	3b04      	subs	r3, #4
 8010ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	f023 0201 	bic.w	r2, r3, #1
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	3b04      	subs	r3, #4
 8010ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ad8:	4a0c      	ldr	r2, [pc, #48]	; (8010b0c <pxPortInitialiseStack+0x64>)
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3b14      	subs	r3, #20
 8010ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3b04      	subs	r3, #4
 8010aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	f06f 0202 	mvn.w	r2, #2
 8010af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	3b20      	subs	r3, #32
 8010afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010afe:	68fb      	ldr	r3, [r7, #12]
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3714      	adds	r7, #20
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr
 8010b0c:	08010b11 	.word	0x08010b11

08010b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b10:	b480      	push	{r7}
 8010b12:	b085      	sub	sp, #20
 8010b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b16:	2300      	movs	r3, #0
 8010b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b1a:	4b12      	ldr	r3, [pc, #72]	; (8010b64 <prvTaskExitError+0x54>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b22:	d00a      	beq.n	8010b3a <prvTaskExitError+0x2a>
	__asm volatile
 8010b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b28:	f383 8811 	msr	BASEPRI, r3
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	60fb      	str	r3, [r7, #12]
}
 8010b36:	bf00      	nop
 8010b38:	e7fe      	b.n	8010b38 <prvTaskExitError+0x28>
	__asm volatile
 8010b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	60bb      	str	r3, [r7, #8]
}
 8010b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b4e:	bf00      	nop
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d0fc      	beq.n	8010b50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b56:	bf00      	nop
 8010b58:	bf00      	nop
 8010b5a:	3714      	adds	r7, #20
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr
 8010b64:	20000010 	.word	0x20000010
	...

08010b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b70:	4b07      	ldr	r3, [pc, #28]	; (8010b90 <pxCurrentTCBConst2>)
 8010b72:	6819      	ldr	r1, [r3, #0]
 8010b74:	6808      	ldr	r0, [r1, #0]
 8010b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7a:	f380 8809 	msr	PSP, r0
 8010b7e:	f3bf 8f6f 	isb	sy
 8010b82:	f04f 0000 	mov.w	r0, #0
 8010b86:	f380 8811 	msr	BASEPRI, r0
 8010b8a:	4770      	bx	lr
 8010b8c:	f3af 8000 	nop.w

08010b90 <pxCurrentTCBConst2>:
 8010b90:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010b94:	bf00      	nop
 8010b96:	bf00      	nop

08010b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010b98:	4808      	ldr	r0, [pc, #32]	; (8010bbc <prvPortStartFirstTask+0x24>)
 8010b9a:	6800      	ldr	r0, [r0, #0]
 8010b9c:	6800      	ldr	r0, [r0, #0]
 8010b9e:	f380 8808 	msr	MSP, r0
 8010ba2:	f04f 0000 	mov.w	r0, #0
 8010ba6:	f380 8814 	msr	CONTROL, r0
 8010baa:	b662      	cpsie	i
 8010bac:	b661      	cpsie	f
 8010bae:	f3bf 8f4f 	dsb	sy
 8010bb2:	f3bf 8f6f 	isb	sy
 8010bb6:	df00      	svc	0
 8010bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bba:	bf00      	nop
 8010bbc:	e000ed08 	.word	0xe000ed08

08010bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b086      	sub	sp, #24
 8010bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010bc6:	4b46      	ldr	r3, [pc, #280]	; (8010ce0 <xPortStartScheduler+0x120>)
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a46      	ldr	r2, [pc, #280]	; (8010ce4 <xPortStartScheduler+0x124>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d10a      	bne.n	8010be6 <xPortStartScheduler+0x26>
	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd4:	f383 8811 	msr	BASEPRI, r3
 8010bd8:	f3bf 8f6f 	isb	sy
 8010bdc:	f3bf 8f4f 	dsb	sy
 8010be0:	613b      	str	r3, [r7, #16]
}
 8010be2:	bf00      	nop
 8010be4:	e7fe      	b.n	8010be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010be6:	4b3e      	ldr	r3, [pc, #248]	; (8010ce0 <xPortStartScheduler+0x120>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a3f      	ldr	r2, [pc, #252]	; (8010ce8 <xPortStartScheduler+0x128>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d10a      	bne.n	8010c06 <xPortStartScheduler+0x46>
	__asm volatile
 8010bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bf4:	f383 8811 	msr	BASEPRI, r3
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	f3bf 8f4f 	dsb	sy
 8010c00:	60fb      	str	r3, [r7, #12]
}
 8010c02:	bf00      	nop
 8010c04:	e7fe      	b.n	8010c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010c06:	4b39      	ldr	r3, [pc, #228]	; (8010cec <xPortStartScheduler+0x12c>)
 8010c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	22ff      	movs	r2, #255	; 0xff
 8010c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	781b      	ldrb	r3, [r3, #0]
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010c28:	b2da      	uxtb	r2, r3
 8010c2a:	4b31      	ldr	r3, [pc, #196]	; (8010cf0 <xPortStartScheduler+0x130>)
 8010c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c2e:	4b31      	ldr	r3, [pc, #196]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c30:	2207      	movs	r2, #7
 8010c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c34:	e009      	b.n	8010c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010c36:	4b2f      	ldr	r3, [pc, #188]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	4a2d      	ldr	r2, [pc, #180]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c40:	78fb      	ldrb	r3, [r7, #3]
 8010c42:	b2db      	uxtb	r3, r3
 8010c44:	005b      	lsls	r3, r3, #1
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c4a:	78fb      	ldrb	r3, [r7, #3]
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c52:	2b80      	cmp	r3, #128	; 0x80
 8010c54:	d0ef      	beq.n	8010c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c56:	4b27      	ldr	r3, [pc, #156]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f1c3 0307 	rsb	r3, r3, #7
 8010c5e:	2b04      	cmp	r3, #4
 8010c60:	d00a      	beq.n	8010c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8010c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c66:	f383 8811 	msr	BASEPRI, r3
 8010c6a:	f3bf 8f6f 	isb	sy
 8010c6e:	f3bf 8f4f 	dsb	sy
 8010c72:	60bb      	str	r3, [r7, #8]
}
 8010c74:	bf00      	nop
 8010c76:	e7fe      	b.n	8010c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c78:	4b1e      	ldr	r3, [pc, #120]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	021b      	lsls	r3, r3, #8
 8010c7e:	4a1d      	ldr	r2, [pc, #116]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c82:	4b1c      	ldr	r3, [pc, #112]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010c8a:	4a1a      	ldr	r2, [pc, #104]	; (8010cf4 <xPortStartScheduler+0x134>)
 8010c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	b2da      	uxtb	r2, r3
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c96:	4b18      	ldr	r3, [pc, #96]	; (8010cf8 <xPortStartScheduler+0x138>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4a17      	ldr	r2, [pc, #92]	; (8010cf8 <xPortStartScheduler+0x138>)
 8010c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010ca2:	4b15      	ldr	r3, [pc, #84]	; (8010cf8 <xPortStartScheduler+0x138>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a14      	ldr	r2, [pc, #80]	; (8010cf8 <xPortStartScheduler+0x138>)
 8010ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010cae:	f000 f8dd 	bl	8010e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010cb2:	4b12      	ldr	r3, [pc, #72]	; (8010cfc <xPortStartScheduler+0x13c>)
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010cb8:	f000 f8fc 	bl	8010eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010cbc:	4b10      	ldr	r3, [pc, #64]	; (8010d00 <xPortStartScheduler+0x140>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	4a0f      	ldr	r2, [pc, #60]	; (8010d00 <xPortStartScheduler+0x140>)
 8010cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010cc8:	f7ff ff66 	bl	8010b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ccc:	f7ff fa94 	bl	80101f8 <vTaskSwitchContext>
	prvTaskExitError();
 8010cd0:	f7ff ff1e 	bl	8010b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3718      	adds	r7, #24
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}
 8010cde:	bf00      	nop
 8010ce0:	e000ed00 	.word	0xe000ed00
 8010ce4:	410fc271 	.word	0x410fc271
 8010ce8:	410fc270 	.word	0x410fc270
 8010cec:	e000e400 	.word	0xe000e400
 8010cf0:	20000aa0 	.word	0x20000aa0
 8010cf4:	20000aa4 	.word	0x20000aa4
 8010cf8:	e000ed20 	.word	0xe000ed20
 8010cfc:	20000010 	.word	0x20000010
 8010d00:	e000ef34 	.word	0xe000ef34

08010d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
	__asm volatile
 8010d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0e:	f383 8811 	msr	BASEPRI, r3
 8010d12:	f3bf 8f6f 	isb	sy
 8010d16:	f3bf 8f4f 	dsb	sy
 8010d1a:	607b      	str	r3, [r7, #4]
}
 8010d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	; (8010d5c <vPortEnterCritical+0x58>)
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	3301      	adds	r3, #1
 8010d24:	4a0d      	ldr	r2, [pc, #52]	; (8010d5c <vPortEnterCritical+0x58>)
 8010d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d28:	4b0c      	ldr	r3, [pc, #48]	; (8010d5c <vPortEnterCritical+0x58>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d10f      	bne.n	8010d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d30:	4b0b      	ldr	r3, [pc, #44]	; (8010d60 <vPortEnterCritical+0x5c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d00a      	beq.n	8010d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8010d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d3e:	f383 8811 	msr	BASEPRI, r3
 8010d42:	f3bf 8f6f 	isb	sy
 8010d46:	f3bf 8f4f 	dsb	sy
 8010d4a:	603b      	str	r3, [r7, #0]
}
 8010d4c:	bf00      	nop
 8010d4e:	e7fe      	b.n	8010d4e <vPortEnterCritical+0x4a>
	}
}
 8010d50:	bf00      	nop
 8010d52:	370c      	adds	r7, #12
 8010d54:	46bd      	mov	sp, r7
 8010d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5a:	4770      	bx	lr
 8010d5c:	20000010 	.word	0x20000010
 8010d60:	e000ed04 	.word	0xe000ed04

08010d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d6a:	4b12      	ldr	r3, [pc, #72]	; (8010db4 <vPortExitCritical+0x50>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d10a      	bne.n	8010d88 <vPortExitCritical+0x24>
	__asm volatile
 8010d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d76:	f383 8811 	msr	BASEPRI, r3
 8010d7a:	f3bf 8f6f 	isb	sy
 8010d7e:	f3bf 8f4f 	dsb	sy
 8010d82:	607b      	str	r3, [r7, #4]
}
 8010d84:	bf00      	nop
 8010d86:	e7fe      	b.n	8010d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010d88:	4b0a      	ldr	r3, [pc, #40]	; (8010db4 <vPortExitCritical+0x50>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	4a09      	ldr	r2, [pc, #36]	; (8010db4 <vPortExitCritical+0x50>)
 8010d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d92:	4b08      	ldr	r3, [pc, #32]	; (8010db4 <vPortExitCritical+0x50>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d105      	bne.n	8010da6 <vPortExitCritical+0x42>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	f383 8811 	msr	BASEPRI, r3
}
 8010da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010da6:	bf00      	nop
 8010da8:	370c      	adds	r7, #12
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr
 8010db2:	bf00      	nop
 8010db4:	20000010 	.word	0x20000010
	...

08010dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010dc0:	f3ef 8009 	mrs	r0, PSP
 8010dc4:	f3bf 8f6f 	isb	sy
 8010dc8:	4b15      	ldr	r3, [pc, #84]	; (8010e20 <pxCurrentTCBConst>)
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	f01e 0f10 	tst.w	lr, #16
 8010dd0:	bf08      	it	eq
 8010dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	6010      	str	r0, [r2, #0]
 8010ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010de4:	f380 8811 	msr	BASEPRI, r0
 8010de8:	f3bf 8f4f 	dsb	sy
 8010dec:	f3bf 8f6f 	isb	sy
 8010df0:	f7ff fa02 	bl	80101f8 <vTaskSwitchContext>
 8010df4:	f04f 0000 	mov.w	r0, #0
 8010df8:	f380 8811 	msr	BASEPRI, r0
 8010dfc:	bc09      	pop	{r0, r3}
 8010dfe:	6819      	ldr	r1, [r3, #0]
 8010e00:	6808      	ldr	r0, [r1, #0]
 8010e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e06:	f01e 0f10 	tst.w	lr, #16
 8010e0a:	bf08      	it	eq
 8010e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010e10:	f380 8809 	msr	PSP, r0
 8010e14:	f3bf 8f6f 	isb	sy
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	f3af 8000 	nop.w

08010e20 <pxCurrentTCBConst>:
 8010e20:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e24:	bf00      	nop
 8010e26:	bf00      	nop

08010e28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	607b      	str	r3, [r7, #4]
}
 8010e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e42:	f7ff f943 	bl	80100cc <xTaskIncrementTick>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d003      	beq.n	8010e54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e4c:	4b06      	ldr	r3, [pc, #24]	; (8010e68 <SysTick_Handler+0x40>)
 8010e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e52:	601a      	str	r2, [r3, #0]
 8010e54:	2300      	movs	r3, #0
 8010e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	f383 8811 	msr	BASEPRI, r3
}
 8010e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e60:	bf00      	nop
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	e000ed04 	.word	0xe000ed04

08010e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e70:	4b0b      	ldr	r3, [pc, #44]	; (8010ea0 <vPortSetupTimerInterrupt+0x34>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e76:	4b0b      	ldr	r3, [pc, #44]	; (8010ea4 <vPortSetupTimerInterrupt+0x38>)
 8010e78:	2200      	movs	r2, #0
 8010e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e7c:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <vPortSetupTimerInterrupt+0x3c>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	4a0a      	ldr	r2, [pc, #40]	; (8010eac <vPortSetupTimerInterrupt+0x40>)
 8010e82:	fba2 2303 	umull	r2, r3, r2, r3
 8010e86:	099b      	lsrs	r3, r3, #6
 8010e88:	4a09      	ldr	r2, [pc, #36]	; (8010eb0 <vPortSetupTimerInterrupt+0x44>)
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e8e:	4b04      	ldr	r3, [pc, #16]	; (8010ea0 <vPortSetupTimerInterrupt+0x34>)
 8010e90:	2207      	movs	r2, #7
 8010e92:	601a      	str	r2, [r3, #0]
}
 8010e94:	bf00      	nop
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop
 8010ea0:	e000e010 	.word	0xe000e010
 8010ea4:	e000e018 	.word	0xe000e018
 8010ea8:	20000004 	.word	0x20000004
 8010eac:	10624dd3 	.word	0x10624dd3
 8010eb0:	e000e014 	.word	0xe000e014

08010eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ec4 <vPortEnableVFP+0x10>
 8010eb8:	6801      	ldr	r1, [r0, #0]
 8010eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ebe:	6001      	str	r1, [r0, #0]
 8010ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ec2:	bf00      	nop
 8010ec4:	e000ed88 	.word	0xe000ed88

08010ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ec8:	b480      	push	{r7}
 8010eca:	b085      	sub	sp, #20
 8010ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010ece:	f3ef 8305 	mrs	r3, IPSR
 8010ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	2b0f      	cmp	r3, #15
 8010ed8:	d914      	bls.n	8010f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010eda:	4a17      	ldr	r2, [pc, #92]	; (8010f38 <vPortValidateInterruptPriority+0x70>)
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	4413      	add	r3, r2
 8010ee0:	781b      	ldrb	r3, [r3, #0]
 8010ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ee4:	4b15      	ldr	r3, [pc, #84]	; (8010f3c <vPortValidateInterruptPriority+0x74>)
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	7afa      	ldrb	r2, [r7, #11]
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d20a      	bcs.n	8010f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	607b      	str	r3, [r7, #4]
}
 8010f00:	bf00      	nop
 8010f02:	e7fe      	b.n	8010f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010f04:	4b0e      	ldr	r3, [pc, #56]	; (8010f40 <vPortValidateInterruptPriority+0x78>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	; (8010f44 <vPortValidateInterruptPriority+0x7c>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d90a      	bls.n	8010f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f18:	f383 8811 	msr	BASEPRI, r3
 8010f1c:	f3bf 8f6f 	isb	sy
 8010f20:	f3bf 8f4f 	dsb	sy
 8010f24:	603b      	str	r3, [r7, #0]
}
 8010f26:	bf00      	nop
 8010f28:	e7fe      	b.n	8010f28 <vPortValidateInterruptPriority+0x60>
	}
 8010f2a:	bf00      	nop
 8010f2c:	3714      	adds	r7, #20
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	e000e3f0 	.word	0xe000e3f0
 8010f3c:	20000aa0 	.word	0x20000aa0
 8010f40:	e000ed0c 	.word	0xe000ed0c
 8010f44:	20000aa4 	.word	0x20000aa4

08010f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b08a      	sub	sp, #40	; 0x28
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f50:	2300      	movs	r3, #0
 8010f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f54:	f7ff f81e 	bl	800ff94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f58:	4b5b      	ldr	r3, [pc, #364]	; (80110c8 <pvPortMalloc+0x180>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f60:	f000 f920 	bl	80111a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f64:	4b59      	ldr	r3, [pc, #356]	; (80110cc <pvPortMalloc+0x184>)
 8010f66:	681a      	ldr	r2, [r3, #0]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f040 8093 	bne.w	8011098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d01d      	beq.n	8010fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010f78:	2208      	movs	r2, #8
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f003 0307 	and.w	r3, r3, #7
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d014      	beq.n	8010fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f023 0307 	bic.w	r3, r3, #7
 8010f90:	3308      	adds	r3, #8
 8010f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f003 0307 	and.w	r3, r3, #7
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00a      	beq.n	8010fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	617b      	str	r3, [r7, #20]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d06e      	beq.n	8011098 <pvPortMalloc+0x150>
 8010fba:	4b45      	ldr	r3, [pc, #276]	; (80110d0 <pvPortMalloc+0x188>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d869      	bhi.n	8011098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010fc4:	4b43      	ldr	r3, [pc, #268]	; (80110d4 <pvPortMalloc+0x18c>)
 8010fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fc8:	4b42      	ldr	r3, [pc, #264]	; (80110d4 <pvPortMalloc+0x18c>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fce:	e004      	b.n	8010fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d903      	bls.n	8010fec <pvPortMalloc+0xa4>
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d1f1      	bne.n	8010fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fec:	4b36      	ldr	r3, [pc, #216]	; (80110c8 <pvPortMalloc+0x180>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d050      	beq.n	8011098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ff6:	6a3b      	ldr	r3, [r7, #32]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	2208      	movs	r2, #8
 8010ffc:	4413      	add	r3, r2
 8010ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	681a      	ldr	r2, [r3, #0]
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	685a      	ldr	r2, [r3, #4]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	1ad2      	subs	r2, r2, r3
 8011010:	2308      	movs	r3, #8
 8011012:	005b      	lsls	r3, r3, #1
 8011014:	429a      	cmp	r2, r3
 8011016:	d91f      	bls.n	8011058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4413      	add	r3, r2
 801101e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	f003 0307 	and.w	r3, r3, #7
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00a      	beq.n	8011040 <pvPortMalloc+0xf8>
	__asm volatile
 801102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102e:	f383 8811 	msr	BASEPRI, r3
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	f3bf 8f4f 	dsb	sy
 801103a:	613b      	str	r3, [r7, #16]
}
 801103c:	bf00      	nop
 801103e:	e7fe      	b.n	801103e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	685a      	ldr	r2, [r3, #4]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	69bb      	ldr	r3, [r7, #24]
 801104a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011052:	69b8      	ldr	r0, [r7, #24]
 8011054:	f000 f908 	bl	8011268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011058:	4b1d      	ldr	r3, [pc, #116]	; (80110d0 <pvPortMalloc+0x188>)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	4a1b      	ldr	r2, [pc, #108]	; (80110d0 <pvPortMalloc+0x188>)
 8011064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011066:	4b1a      	ldr	r3, [pc, #104]	; (80110d0 <pvPortMalloc+0x188>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	4b1b      	ldr	r3, [pc, #108]	; (80110d8 <pvPortMalloc+0x190>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	429a      	cmp	r2, r3
 8011070:	d203      	bcs.n	801107a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011072:	4b17      	ldr	r3, [pc, #92]	; (80110d0 <pvPortMalloc+0x188>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	4a18      	ldr	r2, [pc, #96]	; (80110d8 <pvPortMalloc+0x190>)
 8011078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801107c:	685a      	ldr	r2, [r3, #4]
 801107e:	4b13      	ldr	r3, [pc, #76]	; (80110cc <pvPortMalloc+0x184>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	431a      	orrs	r2, r3
 8011084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108a:	2200      	movs	r2, #0
 801108c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801108e:	4b13      	ldr	r3, [pc, #76]	; (80110dc <pvPortMalloc+0x194>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	3301      	adds	r3, #1
 8011094:	4a11      	ldr	r2, [pc, #68]	; (80110dc <pvPortMalloc+0x194>)
 8011096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011098:	f7fe ff8a 	bl	800ffb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801109c:	69fb      	ldr	r3, [r7, #28]
 801109e:	f003 0307 	and.w	r3, r3, #7
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d00a      	beq.n	80110bc <pvPortMalloc+0x174>
	__asm volatile
 80110a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110aa:	f383 8811 	msr	BASEPRI, r3
 80110ae:	f3bf 8f6f 	isb	sy
 80110b2:	f3bf 8f4f 	dsb	sy
 80110b6:	60fb      	str	r3, [r7, #12]
}
 80110b8:	bf00      	nop
 80110ba:	e7fe      	b.n	80110ba <pvPortMalloc+0x172>
	return pvReturn;
 80110bc:	69fb      	ldr	r3, [r7, #28]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3728      	adds	r7, #40	; 0x28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	20003ab0 	.word	0x20003ab0
 80110cc:	20003ac4 	.word	0x20003ac4
 80110d0:	20003ab4 	.word	0x20003ab4
 80110d4:	20003aa8 	.word	0x20003aa8
 80110d8:	20003ab8 	.word	0x20003ab8
 80110dc:	20003abc 	.word	0x20003abc

080110e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d04d      	beq.n	801118e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110f2:	2308      	movs	r3, #8
 80110f4:	425b      	negs	r3, r3
 80110f6:	697a      	ldr	r2, [r7, #20]
 80110f8:	4413      	add	r3, r2
 80110fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	685a      	ldr	r2, [r3, #4]
 8011104:	4b24      	ldr	r3, [pc, #144]	; (8011198 <vPortFree+0xb8>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4013      	ands	r3, r2
 801110a:	2b00      	cmp	r3, #0
 801110c:	d10a      	bne.n	8011124 <vPortFree+0x44>
	__asm volatile
 801110e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	60fb      	str	r3, [r7, #12]
}
 8011120:	bf00      	nop
 8011122:	e7fe      	b.n	8011122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00a      	beq.n	8011142 <vPortFree+0x62>
	__asm volatile
 801112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011130:	f383 8811 	msr	BASEPRI, r3
 8011134:	f3bf 8f6f 	isb	sy
 8011138:	f3bf 8f4f 	dsb	sy
 801113c:	60bb      	str	r3, [r7, #8]
}
 801113e:	bf00      	nop
 8011140:	e7fe      	b.n	8011140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	685a      	ldr	r2, [r3, #4]
 8011146:	4b14      	ldr	r3, [pc, #80]	; (8011198 <vPortFree+0xb8>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4013      	ands	r3, r2
 801114c:	2b00      	cmp	r3, #0
 801114e:	d01e      	beq.n	801118e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d11a      	bne.n	801118e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	4b0e      	ldr	r3, [pc, #56]	; (8011198 <vPortFree+0xb8>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	43db      	mvns	r3, r3
 8011162:	401a      	ands	r2, r3
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011168:	f7fe ff14 	bl	800ff94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	4b0a      	ldr	r3, [pc, #40]	; (801119c <vPortFree+0xbc>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	4413      	add	r3, r2
 8011176:	4a09      	ldr	r2, [pc, #36]	; (801119c <vPortFree+0xbc>)
 8011178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801117a:	6938      	ldr	r0, [r7, #16]
 801117c:	f000 f874 	bl	8011268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011180:	4b07      	ldr	r3, [pc, #28]	; (80111a0 <vPortFree+0xc0>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	3301      	adds	r3, #1
 8011186:	4a06      	ldr	r2, [pc, #24]	; (80111a0 <vPortFree+0xc0>)
 8011188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801118a:	f7fe ff11 	bl	800ffb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801118e:	bf00      	nop
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	20003ac4 	.word	0x20003ac4
 801119c:	20003ab4 	.word	0x20003ab4
 80111a0:	20003ac0 	.word	0x20003ac0

080111a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80111ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111b0:	4b27      	ldr	r3, [pc, #156]	; (8011250 <prvHeapInit+0xac>)
 80111b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f003 0307 	and.w	r3, r3, #7
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d00c      	beq.n	80111d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	3307      	adds	r3, #7
 80111c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	f023 0307 	bic.w	r3, r3, #7
 80111ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111cc:	68ba      	ldr	r2, [r7, #8]
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	1ad3      	subs	r3, r2, r3
 80111d2:	4a1f      	ldr	r2, [pc, #124]	; (8011250 <prvHeapInit+0xac>)
 80111d4:	4413      	add	r3, r2
 80111d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111dc:	4a1d      	ldr	r2, [pc, #116]	; (8011254 <prvHeapInit+0xb0>)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111e2:	4b1c      	ldr	r3, [pc, #112]	; (8011254 <prvHeapInit+0xb0>)
 80111e4:	2200      	movs	r2, #0
 80111e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68ba      	ldr	r2, [r7, #8]
 80111ec:	4413      	add	r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111f0:	2208      	movs	r2, #8
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	1a9b      	subs	r3, r3, r2
 80111f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	f023 0307 	bic.w	r3, r3, #7
 80111fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	4a15      	ldr	r2, [pc, #84]	; (8011258 <prvHeapInit+0xb4>)
 8011204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011206:	4b14      	ldr	r3, [pc, #80]	; (8011258 <prvHeapInit+0xb4>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2200      	movs	r2, #0
 801120c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801120e:	4b12      	ldr	r3, [pc, #72]	; (8011258 <prvHeapInit+0xb4>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801121a:	683b      	ldr	r3, [r7, #0]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	1ad2      	subs	r2, r2, r3
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011224:	4b0c      	ldr	r3, [pc, #48]	; (8011258 <prvHeapInit+0xb4>)
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4a0a      	ldr	r2, [pc, #40]	; (801125c <prvHeapInit+0xb8>)
 8011232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011234:	683b      	ldr	r3, [r7, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	4a09      	ldr	r2, [pc, #36]	; (8011260 <prvHeapInit+0xbc>)
 801123a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801123c:	4b09      	ldr	r3, [pc, #36]	; (8011264 <prvHeapInit+0xc0>)
 801123e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011242:	601a      	str	r2, [r3, #0]
}
 8011244:	bf00      	nop
 8011246:	3714      	adds	r7, #20
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	20000aa8 	.word	0x20000aa8
 8011254:	20003aa8 	.word	0x20003aa8
 8011258:	20003ab0 	.word	0x20003ab0
 801125c:	20003ab8 	.word	0x20003ab8
 8011260:	20003ab4 	.word	0x20003ab4
 8011264:	20003ac4 	.word	0x20003ac4

08011268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011268:	b480      	push	{r7}
 801126a:	b085      	sub	sp, #20
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011270:	4b28      	ldr	r3, [pc, #160]	; (8011314 <prvInsertBlockIntoFreeList+0xac>)
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	e002      	b.n	801127c <prvInsertBlockIntoFreeList+0x14>
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	60fb      	str	r3, [r7, #12]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	429a      	cmp	r2, r3
 8011284:	d8f7      	bhi.n	8011276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	4413      	add	r3, r2
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	429a      	cmp	r2, r3
 8011296:	d108      	bne.n	80112aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	685a      	ldr	r2, [r3, #4]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	441a      	add	r2, r3
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	68ba      	ldr	r2, [r7, #8]
 80112b4:	441a      	add	r2, r3
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d118      	bne.n	80112f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b15      	ldr	r3, [pc, #84]	; (8011318 <prvInsertBlockIntoFreeList+0xb0>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d00d      	beq.n	80112e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	685a      	ldr	r2, [r3, #4]
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	685b      	ldr	r3, [r3, #4]
 80112d4:	441a      	add	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	681a      	ldr	r2, [r3, #0]
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	e008      	b.n	80112f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112e6:	4b0c      	ldr	r3, [pc, #48]	; (8011318 <prvInsertBlockIntoFreeList+0xb0>)
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	601a      	str	r2, [r3, #0]
 80112ee:	e003      	b.n	80112f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	681a      	ldr	r2, [r3, #0]
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112f8:	68fa      	ldr	r2, [r7, #12]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d002      	beq.n	8011306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	687a      	ldr	r2, [r7, #4]
 8011304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011306:	bf00      	nop
 8011308:	3714      	adds	r7, #20
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr
 8011312:	bf00      	nop
 8011314:	20003aa8 	.word	0x20003aa8
 8011318:	20003ab0 	.word	0x20003ab0

0801131c <arm_pid_init_f32>:
 801131c:	edd0 6a08 	vldr	s13, [r0, #32]
 8011320:	edd0 7a06 	vldr	s15, [r0, #24]
 8011324:	ed90 7a07 	vldr	s14, [r0, #28]
 8011328:	edc0 6a02 	vstr	s13, [r0, #8]
 801132c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011330:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8011334:	eef1 7a67 	vneg.f32	s15, s15
 8011338:	ee37 7a26 	vadd.f32	s14, s14, s13
 801133c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011340:	ed80 7a00 	vstr	s14, [r0]
 8011344:	edc0 7a01 	vstr	s15, [r0, #4]
 8011348:	b901      	cbnz	r1, 801134c <arm_pid_init_f32+0x30>
 801134a:	4770      	bx	lr
 801134c:	2300      	movs	r3, #0
 801134e:	60c3      	str	r3, [r0, #12]
 8011350:	6103      	str	r3, [r0, #16]
 8011352:	6143      	str	r3, [r0, #20]
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop

08011358 <memset>:
 8011358:	4402      	add	r2, r0
 801135a:	4603      	mov	r3, r0
 801135c:	4293      	cmp	r3, r2
 801135e:	d100      	bne.n	8011362 <memset+0xa>
 8011360:	4770      	bx	lr
 8011362:	f803 1b01 	strb.w	r1, [r3], #1
 8011366:	e7f9      	b.n	801135c <memset+0x4>

08011368 <_reclaim_reent>:
 8011368:	4b29      	ldr	r3, [pc, #164]	; (8011410 <_reclaim_reent+0xa8>)
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4283      	cmp	r3, r0
 801136e:	b570      	push	{r4, r5, r6, lr}
 8011370:	4604      	mov	r4, r0
 8011372:	d04b      	beq.n	801140c <_reclaim_reent+0xa4>
 8011374:	69c3      	ldr	r3, [r0, #28]
 8011376:	b143      	cbz	r3, 801138a <_reclaim_reent+0x22>
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d144      	bne.n	8011408 <_reclaim_reent+0xa0>
 801137e:	69e3      	ldr	r3, [r4, #28]
 8011380:	6819      	ldr	r1, [r3, #0]
 8011382:	b111      	cbz	r1, 801138a <_reclaim_reent+0x22>
 8011384:	4620      	mov	r0, r4
 8011386:	f000 f87f 	bl	8011488 <_free_r>
 801138a:	6961      	ldr	r1, [r4, #20]
 801138c:	b111      	cbz	r1, 8011394 <_reclaim_reent+0x2c>
 801138e:	4620      	mov	r0, r4
 8011390:	f000 f87a 	bl	8011488 <_free_r>
 8011394:	69e1      	ldr	r1, [r4, #28]
 8011396:	b111      	cbz	r1, 801139e <_reclaim_reent+0x36>
 8011398:	4620      	mov	r0, r4
 801139a:	f000 f875 	bl	8011488 <_free_r>
 801139e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80113a0:	b111      	cbz	r1, 80113a8 <_reclaim_reent+0x40>
 80113a2:	4620      	mov	r0, r4
 80113a4:	f000 f870 	bl	8011488 <_free_r>
 80113a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113aa:	b111      	cbz	r1, 80113b2 <_reclaim_reent+0x4a>
 80113ac:	4620      	mov	r0, r4
 80113ae:	f000 f86b 	bl	8011488 <_free_r>
 80113b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80113b4:	b111      	cbz	r1, 80113bc <_reclaim_reent+0x54>
 80113b6:	4620      	mov	r0, r4
 80113b8:	f000 f866 	bl	8011488 <_free_r>
 80113bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80113be:	b111      	cbz	r1, 80113c6 <_reclaim_reent+0x5e>
 80113c0:	4620      	mov	r0, r4
 80113c2:	f000 f861 	bl	8011488 <_free_r>
 80113c6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80113c8:	b111      	cbz	r1, 80113d0 <_reclaim_reent+0x68>
 80113ca:	4620      	mov	r0, r4
 80113cc:	f000 f85c 	bl	8011488 <_free_r>
 80113d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80113d2:	b111      	cbz	r1, 80113da <_reclaim_reent+0x72>
 80113d4:	4620      	mov	r0, r4
 80113d6:	f000 f857 	bl	8011488 <_free_r>
 80113da:	6a23      	ldr	r3, [r4, #32]
 80113dc:	b1b3      	cbz	r3, 801140c <_reclaim_reent+0xa4>
 80113de:	4620      	mov	r0, r4
 80113e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113e4:	4718      	bx	r3
 80113e6:	5949      	ldr	r1, [r1, r5]
 80113e8:	b941      	cbnz	r1, 80113fc <_reclaim_reent+0x94>
 80113ea:	3504      	adds	r5, #4
 80113ec:	69e3      	ldr	r3, [r4, #28]
 80113ee:	2d80      	cmp	r5, #128	; 0x80
 80113f0:	68d9      	ldr	r1, [r3, #12]
 80113f2:	d1f8      	bne.n	80113e6 <_reclaim_reent+0x7e>
 80113f4:	4620      	mov	r0, r4
 80113f6:	f000 f847 	bl	8011488 <_free_r>
 80113fa:	e7c0      	b.n	801137e <_reclaim_reent+0x16>
 80113fc:	680e      	ldr	r6, [r1, #0]
 80113fe:	4620      	mov	r0, r4
 8011400:	f000 f842 	bl	8011488 <_free_r>
 8011404:	4631      	mov	r1, r6
 8011406:	e7ef      	b.n	80113e8 <_reclaim_reent+0x80>
 8011408:	2500      	movs	r5, #0
 801140a:	e7ef      	b.n	80113ec <_reclaim_reent+0x84>
 801140c:	bd70      	pop	{r4, r5, r6, pc}
 801140e:	bf00      	nop
 8011410:	20000060 	.word	0x20000060

08011414 <__errno>:
 8011414:	4b01      	ldr	r3, [pc, #4]	; (801141c <__errno+0x8>)
 8011416:	6818      	ldr	r0, [r3, #0]
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop
 801141c:	20000060 	.word	0x20000060

08011420 <__libc_init_array>:
 8011420:	b570      	push	{r4, r5, r6, lr}
 8011422:	4d0d      	ldr	r5, [pc, #52]	; (8011458 <__libc_init_array+0x38>)
 8011424:	4c0d      	ldr	r4, [pc, #52]	; (801145c <__libc_init_array+0x3c>)
 8011426:	1b64      	subs	r4, r4, r5
 8011428:	10a4      	asrs	r4, r4, #2
 801142a:	2600      	movs	r6, #0
 801142c:	42a6      	cmp	r6, r4
 801142e:	d109      	bne.n	8011444 <__libc_init_array+0x24>
 8011430:	4d0b      	ldr	r5, [pc, #44]	; (8011460 <__libc_init_array+0x40>)
 8011432:	4c0c      	ldr	r4, [pc, #48]	; (8011464 <__libc_init_array+0x44>)
 8011434:	f000 ffb8 	bl	80123a8 <_init>
 8011438:	1b64      	subs	r4, r4, r5
 801143a:	10a4      	asrs	r4, r4, #2
 801143c:	2600      	movs	r6, #0
 801143e:	42a6      	cmp	r6, r4
 8011440:	d105      	bne.n	801144e <__libc_init_array+0x2e>
 8011442:	bd70      	pop	{r4, r5, r6, pc}
 8011444:	f855 3b04 	ldr.w	r3, [r5], #4
 8011448:	4798      	blx	r3
 801144a:	3601      	adds	r6, #1
 801144c:	e7ee      	b.n	801142c <__libc_init_array+0xc>
 801144e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011452:	4798      	blx	r3
 8011454:	3601      	adds	r6, #1
 8011456:	e7f2      	b.n	801143e <__libc_init_array+0x1e>
 8011458:	08012540 	.word	0x08012540
 801145c:	08012540 	.word	0x08012540
 8011460:	08012540 	.word	0x08012540
 8011464:	08012544 	.word	0x08012544

08011468 <__retarget_lock_acquire_recursive>:
 8011468:	4770      	bx	lr

0801146a <__retarget_lock_release_recursive>:
 801146a:	4770      	bx	lr

0801146c <memcpy>:
 801146c:	440a      	add	r2, r1
 801146e:	4291      	cmp	r1, r2
 8011470:	f100 33ff 	add.w	r3, r0, #4294967295
 8011474:	d100      	bne.n	8011478 <memcpy+0xc>
 8011476:	4770      	bx	lr
 8011478:	b510      	push	{r4, lr}
 801147a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801147e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011482:	4291      	cmp	r1, r2
 8011484:	d1f9      	bne.n	801147a <memcpy+0xe>
 8011486:	bd10      	pop	{r4, pc}

08011488 <_free_r>:
 8011488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801148a:	2900      	cmp	r1, #0
 801148c:	d044      	beq.n	8011518 <_free_r+0x90>
 801148e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011492:	9001      	str	r0, [sp, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	f1a1 0404 	sub.w	r4, r1, #4
 801149a:	bfb8      	it	lt
 801149c:	18e4      	addlt	r4, r4, r3
 801149e:	f000 f83f 	bl	8011520 <__malloc_lock>
 80114a2:	4a1e      	ldr	r2, [pc, #120]	; (801151c <_free_r+0x94>)
 80114a4:	9801      	ldr	r0, [sp, #4]
 80114a6:	6813      	ldr	r3, [r2, #0]
 80114a8:	b933      	cbnz	r3, 80114b8 <_free_r+0x30>
 80114aa:	6063      	str	r3, [r4, #4]
 80114ac:	6014      	str	r4, [r2, #0]
 80114ae:	b003      	add	sp, #12
 80114b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114b4:	f000 b83a 	b.w	801152c <__malloc_unlock>
 80114b8:	42a3      	cmp	r3, r4
 80114ba:	d908      	bls.n	80114ce <_free_r+0x46>
 80114bc:	6825      	ldr	r5, [r4, #0]
 80114be:	1961      	adds	r1, r4, r5
 80114c0:	428b      	cmp	r3, r1
 80114c2:	bf01      	itttt	eq
 80114c4:	6819      	ldreq	r1, [r3, #0]
 80114c6:	685b      	ldreq	r3, [r3, #4]
 80114c8:	1949      	addeq	r1, r1, r5
 80114ca:	6021      	streq	r1, [r4, #0]
 80114cc:	e7ed      	b.n	80114aa <_free_r+0x22>
 80114ce:	461a      	mov	r2, r3
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	b10b      	cbz	r3, 80114d8 <_free_r+0x50>
 80114d4:	42a3      	cmp	r3, r4
 80114d6:	d9fa      	bls.n	80114ce <_free_r+0x46>
 80114d8:	6811      	ldr	r1, [r2, #0]
 80114da:	1855      	adds	r5, r2, r1
 80114dc:	42a5      	cmp	r5, r4
 80114de:	d10b      	bne.n	80114f8 <_free_r+0x70>
 80114e0:	6824      	ldr	r4, [r4, #0]
 80114e2:	4421      	add	r1, r4
 80114e4:	1854      	adds	r4, r2, r1
 80114e6:	42a3      	cmp	r3, r4
 80114e8:	6011      	str	r1, [r2, #0]
 80114ea:	d1e0      	bne.n	80114ae <_free_r+0x26>
 80114ec:	681c      	ldr	r4, [r3, #0]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	6053      	str	r3, [r2, #4]
 80114f2:	440c      	add	r4, r1
 80114f4:	6014      	str	r4, [r2, #0]
 80114f6:	e7da      	b.n	80114ae <_free_r+0x26>
 80114f8:	d902      	bls.n	8011500 <_free_r+0x78>
 80114fa:	230c      	movs	r3, #12
 80114fc:	6003      	str	r3, [r0, #0]
 80114fe:	e7d6      	b.n	80114ae <_free_r+0x26>
 8011500:	6825      	ldr	r5, [r4, #0]
 8011502:	1961      	adds	r1, r4, r5
 8011504:	428b      	cmp	r3, r1
 8011506:	bf04      	itt	eq
 8011508:	6819      	ldreq	r1, [r3, #0]
 801150a:	685b      	ldreq	r3, [r3, #4]
 801150c:	6063      	str	r3, [r4, #4]
 801150e:	bf04      	itt	eq
 8011510:	1949      	addeq	r1, r1, r5
 8011512:	6021      	streq	r1, [r4, #0]
 8011514:	6054      	str	r4, [r2, #4]
 8011516:	e7ca      	b.n	80114ae <_free_r+0x26>
 8011518:	b003      	add	sp, #12
 801151a:	bd30      	pop	{r4, r5, pc}
 801151c:	20003c04 	.word	0x20003c04

08011520 <__malloc_lock>:
 8011520:	4801      	ldr	r0, [pc, #4]	; (8011528 <__malloc_lock+0x8>)
 8011522:	f7ff bfa1 	b.w	8011468 <__retarget_lock_acquire_recursive>
 8011526:	bf00      	nop
 8011528:	20003c00 	.word	0x20003c00

0801152c <__malloc_unlock>:
 801152c:	4801      	ldr	r0, [pc, #4]	; (8011534 <__malloc_unlock+0x8>)
 801152e:	f7ff bf9c 	b.w	801146a <__retarget_lock_release_recursive>
 8011532:	bf00      	nop
 8011534:	20003c00 	.word	0x20003c00

08011538 <pow>:
 8011538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801153a:	ed2d 8b02 	vpush	{d8}
 801153e:	eeb0 8a40 	vmov.f32	s16, s0
 8011542:	eef0 8a60 	vmov.f32	s17, s1
 8011546:	ec55 4b11 	vmov	r4, r5, d1
 801154a:	f000 f871 	bl	8011630 <__ieee754_pow>
 801154e:	4622      	mov	r2, r4
 8011550:	462b      	mov	r3, r5
 8011552:	4620      	mov	r0, r4
 8011554:	4629      	mov	r1, r5
 8011556:	ec57 6b10 	vmov	r6, r7, d0
 801155a:	f7f3 fac1 	bl	8004ae0 <__aeabi_dcmpun>
 801155e:	2800      	cmp	r0, #0
 8011560:	d13b      	bne.n	80115da <pow+0xa2>
 8011562:	ec51 0b18 	vmov	r0, r1, d8
 8011566:	2200      	movs	r2, #0
 8011568:	2300      	movs	r3, #0
 801156a:	f7f3 fa87 	bl	8004a7c <__aeabi_dcmpeq>
 801156e:	b1b8      	cbz	r0, 80115a0 <pow+0x68>
 8011570:	2200      	movs	r2, #0
 8011572:	2300      	movs	r3, #0
 8011574:	4620      	mov	r0, r4
 8011576:	4629      	mov	r1, r5
 8011578:	f7f3 fa80 	bl	8004a7c <__aeabi_dcmpeq>
 801157c:	2800      	cmp	r0, #0
 801157e:	d146      	bne.n	801160e <pow+0xd6>
 8011580:	ec45 4b10 	vmov	d0, r4, r5
 8011584:	f000 f848 	bl	8011618 <finite>
 8011588:	b338      	cbz	r0, 80115da <pow+0xa2>
 801158a:	2200      	movs	r2, #0
 801158c:	2300      	movs	r3, #0
 801158e:	4620      	mov	r0, r4
 8011590:	4629      	mov	r1, r5
 8011592:	f7f3 fa7d 	bl	8004a90 <__aeabi_dcmplt>
 8011596:	b300      	cbz	r0, 80115da <pow+0xa2>
 8011598:	f7ff ff3c 	bl	8011414 <__errno>
 801159c:	2322      	movs	r3, #34	; 0x22
 801159e:	e01b      	b.n	80115d8 <pow+0xa0>
 80115a0:	ec47 6b10 	vmov	d0, r6, r7
 80115a4:	f000 f838 	bl	8011618 <finite>
 80115a8:	b9e0      	cbnz	r0, 80115e4 <pow+0xac>
 80115aa:	eeb0 0a48 	vmov.f32	s0, s16
 80115ae:	eef0 0a68 	vmov.f32	s1, s17
 80115b2:	f000 f831 	bl	8011618 <finite>
 80115b6:	b1a8      	cbz	r0, 80115e4 <pow+0xac>
 80115b8:	ec45 4b10 	vmov	d0, r4, r5
 80115bc:	f000 f82c 	bl	8011618 <finite>
 80115c0:	b180      	cbz	r0, 80115e4 <pow+0xac>
 80115c2:	4632      	mov	r2, r6
 80115c4:	463b      	mov	r3, r7
 80115c6:	4630      	mov	r0, r6
 80115c8:	4639      	mov	r1, r7
 80115ca:	f7f3 fa89 	bl	8004ae0 <__aeabi_dcmpun>
 80115ce:	2800      	cmp	r0, #0
 80115d0:	d0e2      	beq.n	8011598 <pow+0x60>
 80115d2:	f7ff ff1f 	bl	8011414 <__errno>
 80115d6:	2321      	movs	r3, #33	; 0x21
 80115d8:	6003      	str	r3, [r0, #0]
 80115da:	ecbd 8b02 	vpop	{d8}
 80115de:	ec47 6b10 	vmov	d0, r6, r7
 80115e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115e4:	2200      	movs	r2, #0
 80115e6:	2300      	movs	r3, #0
 80115e8:	4630      	mov	r0, r6
 80115ea:	4639      	mov	r1, r7
 80115ec:	f7f3 fa46 	bl	8004a7c <__aeabi_dcmpeq>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d0f2      	beq.n	80115da <pow+0xa2>
 80115f4:	eeb0 0a48 	vmov.f32	s0, s16
 80115f8:	eef0 0a68 	vmov.f32	s1, s17
 80115fc:	f000 f80c 	bl	8011618 <finite>
 8011600:	2800      	cmp	r0, #0
 8011602:	d0ea      	beq.n	80115da <pow+0xa2>
 8011604:	ec45 4b10 	vmov	d0, r4, r5
 8011608:	f000 f806 	bl	8011618 <finite>
 801160c:	e7c3      	b.n	8011596 <pow+0x5e>
 801160e:	4f01      	ldr	r7, [pc, #4]	; (8011614 <pow+0xdc>)
 8011610:	2600      	movs	r6, #0
 8011612:	e7e2      	b.n	80115da <pow+0xa2>
 8011614:	3ff00000 	.word	0x3ff00000

08011618 <finite>:
 8011618:	b082      	sub	sp, #8
 801161a:	ed8d 0b00 	vstr	d0, [sp]
 801161e:	9801      	ldr	r0, [sp, #4]
 8011620:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011624:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011628:	0fc0      	lsrs	r0, r0, #31
 801162a:	b002      	add	sp, #8
 801162c:	4770      	bx	lr
	...

08011630 <__ieee754_pow>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	ed2d 8b06 	vpush	{d8-d10}
 8011638:	b089      	sub	sp, #36	; 0x24
 801163a:	ed8d 1b00 	vstr	d1, [sp]
 801163e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011642:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011646:	ea58 0102 	orrs.w	r1, r8, r2
 801164a:	ec57 6b10 	vmov	r6, r7, d0
 801164e:	d115      	bne.n	801167c <__ieee754_pow+0x4c>
 8011650:	19b3      	adds	r3, r6, r6
 8011652:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011656:	4152      	adcs	r2, r2
 8011658:	4299      	cmp	r1, r3
 801165a:	4b89      	ldr	r3, [pc, #548]	; (8011880 <__ieee754_pow+0x250>)
 801165c:	4193      	sbcs	r3, r2
 801165e:	f080 84d1 	bcs.w	8012004 <__ieee754_pow+0x9d4>
 8011662:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011666:	4630      	mov	r0, r6
 8011668:	4639      	mov	r1, r7
 801166a:	f7f2 fde9 	bl	8004240 <__adddf3>
 801166e:	ec41 0b10 	vmov	d0, r0, r1
 8011672:	b009      	add	sp, #36	; 0x24
 8011674:	ecbd 8b06 	vpop	{d8-d10}
 8011678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167c:	4b81      	ldr	r3, [pc, #516]	; (8011884 <__ieee754_pow+0x254>)
 801167e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011682:	429c      	cmp	r4, r3
 8011684:	ee10 aa10 	vmov	sl, s0
 8011688:	463d      	mov	r5, r7
 801168a:	dc06      	bgt.n	801169a <__ieee754_pow+0x6a>
 801168c:	d101      	bne.n	8011692 <__ieee754_pow+0x62>
 801168e:	2e00      	cmp	r6, #0
 8011690:	d1e7      	bne.n	8011662 <__ieee754_pow+0x32>
 8011692:	4598      	cmp	r8, r3
 8011694:	dc01      	bgt.n	801169a <__ieee754_pow+0x6a>
 8011696:	d10f      	bne.n	80116b8 <__ieee754_pow+0x88>
 8011698:	b172      	cbz	r2, 80116b8 <__ieee754_pow+0x88>
 801169a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801169e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80116a2:	ea55 050a 	orrs.w	r5, r5, sl
 80116a6:	d1dc      	bne.n	8011662 <__ieee754_pow+0x32>
 80116a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80116ac:	18db      	adds	r3, r3, r3
 80116ae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80116b2:	4152      	adcs	r2, r2
 80116b4:	429d      	cmp	r5, r3
 80116b6:	e7d0      	b.n	801165a <__ieee754_pow+0x2a>
 80116b8:	2d00      	cmp	r5, #0
 80116ba:	da3b      	bge.n	8011734 <__ieee754_pow+0x104>
 80116bc:	4b72      	ldr	r3, [pc, #456]	; (8011888 <__ieee754_pow+0x258>)
 80116be:	4598      	cmp	r8, r3
 80116c0:	dc51      	bgt.n	8011766 <__ieee754_pow+0x136>
 80116c2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80116c6:	4598      	cmp	r8, r3
 80116c8:	f340 84ab 	ble.w	8012022 <__ieee754_pow+0x9f2>
 80116cc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80116d0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80116d4:	2b14      	cmp	r3, #20
 80116d6:	dd0f      	ble.n	80116f8 <__ieee754_pow+0xc8>
 80116d8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80116dc:	fa22 f103 	lsr.w	r1, r2, r3
 80116e0:	fa01 f303 	lsl.w	r3, r1, r3
 80116e4:	4293      	cmp	r3, r2
 80116e6:	f040 849c 	bne.w	8012022 <__ieee754_pow+0x9f2>
 80116ea:	f001 0101 	and.w	r1, r1, #1
 80116ee:	f1c1 0302 	rsb	r3, r1, #2
 80116f2:	9304      	str	r3, [sp, #16]
 80116f4:	b182      	cbz	r2, 8011718 <__ieee754_pow+0xe8>
 80116f6:	e05f      	b.n	80117b8 <__ieee754_pow+0x188>
 80116f8:	2a00      	cmp	r2, #0
 80116fa:	d15b      	bne.n	80117b4 <__ieee754_pow+0x184>
 80116fc:	f1c3 0314 	rsb	r3, r3, #20
 8011700:	fa48 f103 	asr.w	r1, r8, r3
 8011704:	fa01 f303 	lsl.w	r3, r1, r3
 8011708:	4543      	cmp	r3, r8
 801170a:	f040 8487 	bne.w	801201c <__ieee754_pow+0x9ec>
 801170e:	f001 0101 	and.w	r1, r1, #1
 8011712:	f1c1 0302 	rsb	r3, r1, #2
 8011716:	9304      	str	r3, [sp, #16]
 8011718:	4b5c      	ldr	r3, [pc, #368]	; (801188c <__ieee754_pow+0x25c>)
 801171a:	4598      	cmp	r8, r3
 801171c:	d132      	bne.n	8011784 <__ieee754_pow+0x154>
 801171e:	f1b9 0f00 	cmp.w	r9, #0
 8011722:	f280 8477 	bge.w	8012014 <__ieee754_pow+0x9e4>
 8011726:	4959      	ldr	r1, [pc, #356]	; (801188c <__ieee754_pow+0x25c>)
 8011728:	4632      	mov	r2, r6
 801172a:	463b      	mov	r3, r7
 801172c:	2000      	movs	r0, #0
 801172e:	f7f3 f867 	bl	8004800 <__aeabi_ddiv>
 8011732:	e79c      	b.n	801166e <__ieee754_pow+0x3e>
 8011734:	2300      	movs	r3, #0
 8011736:	9304      	str	r3, [sp, #16]
 8011738:	2a00      	cmp	r2, #0
 801173a:	d13d      	bne.n	80117b8 <__ieee754_pow+0x188>
 801173c:	4b51      	ldr	r3, [pc, #324]	; (8011884 <__ieee754_pow+0x254>)
 801173e:	4598      	cmp	r8, r3
 8011740:	d1ea      	bne.n	8011718 <__ieee754_pow+0xe8>
 8011742:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011746:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801174a:	ea53 030a 	orrs.w	r3, r3, sl
 801174e:	f000 8459 	beq.w	8012004 <__ieee754_pow+0x9d4>
 8011752:	4b4f      	ldr	r3, [pc, #316]	; (8011890 <__ieee754_pow+0x260>)
 8011754:	429c      	cmp	r4, r3
 8011756:	dd08      	ble.n	801176a <__ieee754_pow+0x13a>
 8011758:	f1b9 0f00 	cmp.w	r9, #0
 801175c:	f2c0 8456 	blt.w	801200c <__ieee754_pow+0x9dc>
 8011760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011764:	e783      	b.n	801166e <__ieee754_pow+0x3e>
 8011766:	2302      	movs	r3, #2
 8011768:	e7e5      	b.n	8011736 <__ieee754_pow+0x106>
 801176a:	f1b9 0f00 	cmp.w	r9, #0
 801176e:	f04f 0000 	mov.w	r0, #0
 8011772:	f04f 0100 	mov.w	r1, #0
 8011776:	f6bf af7a 	bge.w	801166e <__ieee754_pow+0x3e>
 801177a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801177e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011782:	e774      	b.n	801166e <__ieee754_pow+0x3e>
 8011784:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011788:	d106      	bne.n	8011798 <__ieee754_pow+0x168>
 801178a:	4632      	mov	r2, r6
 801178c:	463b      	mov	r3, r7
 801178e:	4630      	mov	r0, r6
 8011790:	4639      	mov	r1, r7
 8011792:	f7f2 ff0b 	bl	80045ac <__aeabi_dmul>
 8011796:	e76a      	b.n	801166e <__ieee754_pow+0x3e>
 8011798:	4b3e      	ldr	r3, [pc, #248]	; (8011894 <__ieee754_pow+0x264>)
 801179a:	4599      	cmp	r9, r3
 801179c:	d10c      	bne.n	80117b8 <__ieee754_pow+0x188>
 801179e:	2d00      	cmp	r5, #0
 80117a0:	db0a      	blt.n	80117b8 <__ieee754_pow+0x188>
 80117a2:	ec47 6b10 	vmov	d0, r6, r7
 80117a6:	b009      	add	sp, #36	; 0x24
 80117a8:	ecbd 8b06 	vpop	{d8-d10}
 80117ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117b0:	f000 bd20 	b.w	80121f4 <__ieee754_sqrt>
 80117b4:	2300      	movs	r3, #0
 80117b6:	9304      	str	r3, [sp, #16]
 80117b8:	ec47 6b10 	vmov	d0, r6, r7
 80117bc:	f000 fc62 	bl	8012084 <fabs>
 80117c0:	ec51 0b10 	vmov	r0, r1, d0
 80117c4:	f1ba 0f00 	cmp.w	sl, #0
 80117c8:	d129      	bne.n	801181e <__ieee754_pow+0x1ee>
 80117ca:	b124      	cbz	r4, 80117d6 <__ieee754_pow+0x1a6>
 80117cc:	4b2f      	ldr	r3, [pc, #188]	; (801188c <__ieee754_pow+0x25c>)
 80117ce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d123      	bne.n	801181e <__ieee754_pow+0x1ee>
 80117d6:	f1b9 0f00 	cmp.w	r9, #0
 80117da:	da05      	bge.n	80117e8 <__ieee754_pow+0x1b8>
 80117dc:	4602      	mov	r2, r0
 80117de:	460b      	mov	r3, r1
 80117e0:	2000      	movs	r0, #0
 80117e2:	492a      	ldr	r1, [pc, #168]	; (801188c <__ieee754_pow+0x25c>)
 80117e4:	f7f3 f80c 	bl	8004800 <__aeabi_ddiv>
 80117e8:	2d00      	cmp	r5, #0
 80117ea:	f6bf af40 	bge.w	801166e <__ieee754_pow+0x3e>
 80117ee:	9b04      	ldr	r3, [sp, #16]
 80117f0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80117f4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80117f8:	431c      	orrs	r4, r3
 80117fa:	d108      	bne.n	801180e <__ieee754_pow+0x1de>
 80117fc:	4602      	mov	r2, r0
 80117fe:	460b      	mov	r3, r1
 8011800:	4610      	mov	r0, r2
 8011802:	4619      	mov	r1, r3
 8011804:	f7f2 fd1a 	bl	800423c <__aeabi_dsub>
 8011808:	4602      	mov	r2, r0
 801180a:	460b      	mov	r3, r1
 801180c:	e78f      	b.n	801172e <__ieee754_pow+0xfe>
 801180e:	9b04      	ldr	r3, [sp, #16]
 8011810:	2b01      	cmp	r3, #1
 8011812:	f47f af2c 	bne.w	801166e <__ieee754_pow+0x3e>
 8011816:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801181a:	4619      	mov	r1, r3
 801181c:	e727      	b.n	801166e <__ieee754_pow+0x3e>
 801181e:	0feb      	lsrs	r3, r5, #31
 8011820:	3b01      	subs	r3, #1
 8011822:	9306      	str	r3, [sp, #24]
 8011824:	9a06      	ldr	r2, [sp, #24]
 8011826:	9b04      	ldr	r3, [sp, #16]
 8011828:	4313      	orrs	r3, r2
 801182a:	d102      	bne.n	8011832 <__ieee754_pow+0x202>
 801182c:	4632      	mov	r2, r6
 801182e:	463b      	mov	r3, r7
 8011830:	e7e6      	b.n	8011800 <__ieee754_pow+0x1d0>
 8011832:	4b19      	ldr	r3, [pc, #100]	; (8011898 <__ieee754_pow+0x268>)
 8011834:	4598      	cmp	r8, r3
 8011836:	f340 80fb 	ble.w	8011a30 <__ieee754_pow+0x400>
 801183a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801183e:	4598      	cmp	r8, r3
 8011840:	4b13      	ldr	r3, [pc, #76]	; (8011890 <__ieee754_pow+0x260>)
 8011842:	dd0c      	ble.n	801185e <__ieee754_pow+0x22e>
 8011844:	429c      	cmp	r4, r3
 8011846:	dc0f      	bgt.n	8011868 <__ieee754_pow+0x238>
 8011848:	f1b9 0f00 	cmp.w	r9, #0
 801184c:	da0f      	bge.n	801186e <__ieee754_pow+0x23e>
 801184e:	2000      	movs	r0, #0
 8011850:	b009      	add	sp, #36	; 0x24
 8011852:	ecbd 8b06 	vpop	{d8-d10}
 8011856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801185a:	f000 bcc2 	b.w	80121e2 <__math_oflow>
 801185e:	429c      	cmp	r4, r3
 8011860:	dbf2      	blt.n	8011848 <__ieee754_pow+0x218>
 8011862:	4b0a      	ldr	r3, [pc, #40]	; (801188c <__ieee754_pow+0x25c>)
 8011864:	429c      	cmp	r4, r3
 8011866:	dd19      	ble.n	801189c <__ieee754_pow+0x26c>
 8011868:	f1b9 0f00 	cmp.w	r9, #0
 801186c:	dcef      	bgt.n	801184e <__ieee754_pow+0x21e>
 801186e:	2000      	movs	r0, #0
 8011870:	b009      	add	sp, #36	; 0x24
 8011872:	ecbd 8b06 	vpop	{d8-d10}
 8011876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f000 bca9 	b.w	80121d0 <__math_uflow>
 801187e:	bf00      	nop
 8011880:	fff00000 	.word	0xfff00000
 8011884:	7ff00000 	.word	0x7ff00000
 8011888:	433fffff 	.word	0x433fffff
 801188c:	3ff00000 	.word	0x3ff00000
 8011890:	3fefffff 	.word	0x3fefffff
 8011894:	3fe00000 	.word	0x3fe00000
 8011898:	41e00000 	.word	0x41e00000
 801189c:	4b60      	ldr	r3, [pc, #384]	; (8011a20 <__ieee754_pow+0x3f0>)
 801189e:	2200      	movs	r2, #0
 80118a0:	f7f2 fccc 	bl	800423c <__aeabi_dsub>
 80118a4:	a354      	add	r3, pc, #336	; (adr r3, 80119f8 <__ieee754_pow+0x3c8>)
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	4604      	mov	r4, r0
 80118ac:	460d      	mov	r5, r1
 80118ae:	f7f2 fe7d 	bl	80045ac <__aeabi_dmul>
 80118b2:	a353      	add	r3, pc, #332	; (adr r3, 8011a00 <__ieee754_pow+0x3d0>)
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	4606      	mov	r6, r0
 80118ba:	460f      	mov	r7, r1
 80118bc:	4620      	mov	r0, r4
 80118be:	4629      	mov	r1, r5
 80118c0:	f7f2 fe74 	bl	80045ac <__aeabi_dmul>
 80118c4:	4b57      	ldr	r3, [pc, #348]	; (8011a24 <__ieee754_pow+0x3f4>)
 80118c6:	4682      	mov	sl, r0
 80118c8:	468b      	mov	fp, r1
 80118ca:	2200      	movs	r2, #0
 80118cc:	4620      	mov	r0, r4
 80118ce:	4629      	mov	r1, r5
 80118d0:	f7f2 fe6c 	bl	80045ac <__aeabi_dmul>
 80118d4:	4602      	mov	r2, r0
 80118d6:	460b      	mov	r3, r1
 80118d8:	a14b      	add	r1, pc, #300	; (adr r1, 8011a08 <__ieee754_pow+0x3d8>)
 80118da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80118de:	f7f2 fcad 	bl	800423c <__aeabi_dsub>
 80118e2:	4622      	mov	r2, r4
 80118e4:	462b      	mov	r3, r5
 80118e6:	f7f2 fe61 	bl	80045ac <__aeabi_dmul>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	2000      	movs	r0, #0
 80118f0:	494d      	ldr	r1, [pc, #308]	; (8011a28 <__ieee754_pow+0x3f8>)
 80118f2:	f7f2 fca3 	bl	800423c <__aeabi_dsub>
 80118f6:	4622      	mov	r2, r4
 80118f8:	4680      	mov	r8, r0
 80118fa:	4689      	mov	r9, r1
 80118fc:	462b      	mov	r3, r5
 80118fe:	4620      	mov	r0, r4
 8011900:	4629      	mov	r1, r5
 8011902:	f7f2 fe53 	bl	80045ac <__aeabi_dmul>
 8011906:	4602      	mov	r2, r0
 8011908:	460b      	mov	r3, r1
 801190a:	4640      	mov	r0, r8
 801190c:	4649      	mov	r1, r9
 801190e:	f7f2 fe4d 	bl	80045ac <__aeabi_dmul>
 8011912:	a33f      	add	r3, pc, #252	; (adr r3, 8011a10 <__ieee754_pow+0x3e0>)
 8011914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011918:	f7f2 fe48 	bl	80045ac <__aeabi_dmul>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4650      	mov	r0, sl
 8011922:	4659      	mov	r1, fp
 8011924:	f7f2 fc8a 	bl	800423c <__aeabi_dsub>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4680      	mov	r8, r0
 801192e:	4689      	mov	r9, r1
 8011930:	4630      	mov	r0, r6
 8011932:	4639      	mov	r1, r7
 8011934:	f7f2 fc84 	bl	8004240 <__adddf3>
 8011938:	2000      	movs	r0, #0
 801193a:	4632      	mov	r2, r6
 801193c:	463b      	mov	r3, r7
 801193e:	4604      	mov	r4, r0
 8011940:	460d      	mov	r5, r1
 8011942:	f7f2 fc7b 	bl	800423c <__aeabi_dsub>
 8011946:	4602      	mov	r2, r0
 8011948:	460b      	mov	r3, r1
 801194a:	4640      	mov	r0, r8
 801194c:	4649      	mov	r1, r9
 801194e:	f7f2 fc75 	bl	800423c <__aeabi_dsub>
 8011952:	9b04      	ldr	r3, [sp, #16]
 8011954:	9a06      	ldr	r2, [sp, #24]
 8011956:	3b01      	subs	r3, #1
 8011958:	4313      	orrs	r3, r2
 801195a:	4682      	mov	sl, r0
 801195c:	468b      	mov	fp, r1
 801195e:	f040 81e7 	bne.w	8011d30 <__ieee754_pow+0x700>
 8011962:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011a18 <__ieee754_pow+0x3e8>
 8011966:	eeb0 8a47 	vmov.f32	s16, s14
 801196a:	eef0 8a67 	vmov.f32	s17, s15
 801196e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011972:	2600      	movs	r6, #0
 8011974:	4632      	mov	r2, r6
 8011976:	463b      	mov	r3, r7
 8011978:	e9dd 0100 	ldrd	r0, r1, [sp]
 801197c:	f7f2 fc5e 	bl	800423c <__aeabi_dsub>
 8011980:	4622      	mov	r2, r4
 8011982:	462b      	mov	r3, r5
 8011984:	f7f2 fe12 	bl	80045ac <__aeabi_dmul>
 8011988:	e9dd 2300 	ldrd	r2, r3, [sp]
 801198c:	4680      	mov	r8, r0
 801198e:	4689      	mov	r9, r1
 8011990:	4650      	mov	r0, sl
 8011992:	4659      	mov	r1, fp
 8011994:	f7f2 fe0a 	bl	80045ac <__aeabi_dmul>
 8011998:	4602      	mov	r2, r0
 801199a:	460b      	mov	r3, r1
 801199c:	4640      	mov	r0, r8
 801199e:	4649      	mov	r1, r9
 80119a0:	f7f2 fc4e 	bl	8004240 <__adddf3>
 80119a4:	4632      	mov	r2, r6
 80119a6:	463b      	mov	r3, r7
 80119a8:	4680      	mov	r8, r0
 80119aa:	4689      	mov	r9, r1
 80119ac:	4620      	mov	r0, r4
 80119ae:	4629      	mov	r1, r5
 80119b0:	f7f2 fdfc 	bl	80045ac <__aeabi_dmul>
 80119b4:	460b      	mov	r3, r1
 80119b6:	4604      	mov	r4, r0
 80119b8:	460d      	mov	r5, r1
 80119ba:	4602      	mov	r2, r0
 80119bc:	4649      	mov	r1, r9
 80119be:	4640      	mov	r0, r8
 80119c0:	f7f2 fc3e 	bl	8004240 <__adddf3>
 80119c4:	4b19      	ldr	r3, [pc, #100]	; (8011a2c <__ieee754_pow+0x3fc>)
 80119c6:	4299      	cmp	r1, r3
 80119c8:	ec45 4b19 	vmov	d9, r4, r5
 80119cc:	4606      	mov	r6, r0
 80119ce:	460f      	mov	r7, r1
 80119d0:	468b      	mov	fp, r1
 80119d2:	f340 82f0 	ble.w	8011fb6 <__ieee754_pow+0x986>
 80119d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80119da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80119de:	4303      	orrs	r3, r0
 80119e0:	f000 81e4 	beq.w	8011dac <__ieee754_pow+0x77c>
 80119e4:	ec51 0b18 	vmov	r0, r1, d8
 80119e8:	2200      	movs	r2, #0
 80119ea:	2300      	movs	r3, #0
 80119ec:	f7f3 f850 	bl	8004a90 <__aeabi_dcmplt>
 80119f0:	3800      	subs	r0, #0
 80119f2:	bf18      	it	ne
 80119f4:	2001      	movne	r0, #1
 80119f6:	e72b      	b.n	8011850 <__ieee754_pow+0x220>
 80119f8:	60000000 	.word	0x60000000
 80119fc:	3ff71547 	.word	0x3ff71547
 8011a00:	f85ddf44 	.word	0xf85ddf44
 8011a04:	3e54ae0b 	.word	0x3e54ae0b
 8011a08:	55555555 	.word	0x55555555
 8011a0c:	3fd55555 	.word	0x3fd55555
 8011a10:	652b82fe 	.word	0x652b82fe
 8011a14:	3ff71547 	.word	0x3ff71547
 8011a18:	00000000 	.word	0x00000000
 8011a1c:	bff00000 	.word	0xbff00000
 8011a20:	3ff00000 	.word	0x3ff00000
 8011a24:	3fd00000 	.word	0x3fd00000
 8011a28:	3fe00000 	.word	0x3fe00000
 8011a2c:	408fffff 	.word	0x408fffff
 8011a30:	4bd5      	ldr	r3, [pc, #852]	; (8011d88 <__ieee754_pow+0x758>)
 8011a32:	402b      	ands	r3, r5
 8011a34:	2200      	movs	r2, #0
 8011a36:	b92b      	cbnz	r3, 8011a44 <__ieee754_pow+0x414>
 8011a38:	4bd4      	ldr	r3, [pc, #848]	; (8011d8c <__ieee754_pow+0x75c>)
 8011a3a:	f7f2 fdb7 	bl	80045ac <__aeabi_dmul>
 8011a3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011a42:	460c      	mov	r4, r1
 8011a44:	1523      	asrs	r3, r4, #20
 8011a46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011a4a:	4413      	add	r3, r2
 8011a4c:	9305      	str	r3, [sp, #20]
 8011a4e:	4bd0      	ldr	r3, [pc, #832]	; (8011d90 <__ieee754_pow+0x760>)
 8011a50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011a54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011a5e:	dd08      	ble.n	8011a72 <__ieee754_pow+0x442>
 8011a60:	4bcc      	ldr	r3, [pc, #816]	; (8011d94 <__ieee754_pow+0x764>)
 8011a62:	429c      	cmp	r4, r3
 8011a64:	f340 8162 	ble.w	8011d2c <__ieee754_pow+0x6fc>
 8011a68:	9b05      	ldr	r3, [sp, #20]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	9305      	str	r3, [sp, #20]
 8011a6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011a72:	2400      	movs	r4, #0
 8011a74:	00e3      	lsls	r3, r4, #3
 8011a76:	9307      	str	r3, [sp, #28]
 8011a78:	4bc7      	ldr	r3, [pc, #796]	; (8011d98 <__ieee754_pow+0x768>)
 8011a7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011a7e:	ed93 7b00 	vldr	d7, [r3]
 8011a82:	4629      	mov	r1, r5
 8011a84:	ec53 2b17 	vmov	r2, r3, d7
 8011a88:	eeb0 9a47 	vmov.f32	s18, s14
 8011a8c:	eef0 9a67 	vmov.f32	s19, s15
 8011a90:	4682      	mov	sl, r0
 8011a92:	f7f2 fbd3 	bl	800423c <__aeabi_dsub>
 8011a96:	4652      	mov	r2, sl
 8011a98:	4606      	mov	r6, r0
 8011a9a:	460f      	mov	r7, r1
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	ec51 0b19 	vmov	r0, r1, d9
 8011aa2:	f7f2 fbcd 	bl	8004240 <__adddf3>
 8011aa6:	4602      	mov	r2, r0
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	2000      	movs	r0, #0
 8011aac:	49bb      	ldr	r1, [pc, #748]	; (8011d9c <__ieee754_pow+0x76c>)
 8011aae:	f7f2 fea7 	bl	8004800 <__aeabi_ddiv>
 8011ab2:	ec41 0b1a 	vmov	d10, r0, r1
 8011ab6:	4602      	mov	r2, r0
 8011ab8:	460b      	mov	r3, r1
 8011aba:	4630      	mov	r0, r6
 8011abc:	4639      	mov	r1, r7
 8011abe:	f7f2 fd75 	bl	80045ac <__aeabi_dmul>
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ac8:	9302      	str	r3, [sp, #8]
 8011aca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011ace:	46ab      	mov	fp, r5
 8011ad0:	106d      	asrs	r5, r5, #1
 8011ad2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011ad6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011ada:	ec41 0b18 	vmov	d8, r0, r1
 8011ade:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	4640      	mov	r0, r8
 8011ae6:	4649      	mov	r1, r9
 8011ae8:	4614      	mov	r4, r2
 8011aea:	461d      	mov	r5, r3
 8011aec:	f7f2 fd5e 	bl	80045ac <__aeabi_dmul>
 8011af0:	4602      	mov	r2, r0
 8011af2:	460b      	mov	r3, r1
 8011af4:	4630      	mov	r0, r6
 8011af6:	4639      	mov	r1, r7
 8011af8:	f7f2 fba0 	bl	800423c <__aeabi_dsub>
 8011afc:	ec53 2b19 	vmov	r2, r3, d9
 8011b00:	4606      	mov	r6, r0
 8011b02:	460f      	mov	r7, r1
 8011b04:	4620      	mov	r0, r4
 8011b06:	4629      	mov	r1, r5
 8011b08:	f7f2 fb98 	bl	800423c <__aeabi_dsub>
 8011b0c:	4602      	mov	r2, r0
 8011b0e:	460b      	mov	r3, r1
 8011b10:	4650      	mov	r0, sl
 8011b12:	4659      	mov	r1, fp
 8011b14:	f7f2 fb92 	bl	800423c <__aeabi_dsub>
 8011b18:	4642      	mov	r2, r8
 8011b1a:	464b      	mov	r3, r9
 8011b1c:	f7f2 fd46 	bl	80045ac <__aeabi_dmul>
 8011b20:	4602      	mov	r2, r0
 8011b22:	460b      	mov	r3, r1
 8011b24:	4630      	mov	r0, r6
 8011b26:	4639      	mov	r1, r7
 8011b28:	f7f2 fb88 	bl	800423c <__aeabi_dsub>
 8011b2c:	ec53 2b1a 	vmov	r2, r3, d10
 8011b30:	f7f2 fd3c 	bl	80045ac <__aeabi_dmul>
 8011b34:	ec53 2b18 	vmov	r2, r3, d8
 8011b38:	ec41 0b19 	vmov	d9, r0, r1
 8011b3c:	ec51 0b18 	vmov	r0, r1, d8
 8011b40:	f7f2 fd34 	bl	80045ac <__aeabi_dmul>
 8011b44:	a37c      	add	r3, pc, #496	; (adr r3, 8011d38 <__ieee754_pow+0x708>)
 8011b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	460d      	mov	r5, r1
 8011b4e:	f7f2 fd2d 	bl	80045ac <__aeabi_dmul>
 8011b52:	a37b      	add	r3, pc, #492	; (adr r3, 8011d40 <__ieee754_pow+0x710>)
 8011b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b58:	f7f2 fb72 	bl	8004240 <__adddf3>
 8011b5c:	4622      	mov	r2, r4
 8011b5e:	462b      	mov	r3, r5
 8011b60:	f7f2 fd24 	bl	80045ac <__aeabi_dmul>
 8011b64:	a378      	add	r3, pc, #480	; (adr r3, 8011d48 <__ieee754_pow+0x718>)
 8011b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6a:	f7f2 fb69 	bl	8004240 <__adddf3>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	462b      	mov	r3, r5
 8011b72:	f7f2 fd1b 	bl	80045ac <__aeabi_dmul>
 8011b76:	a376      	add	r3, pc, #472	; (adr r3, 8011d50 <__ieee754_pow+0x720>)
 8011b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7c:	f7f2 fb60 	bl	8004240 <__adddf3>
 8011b80:	4622      	mov	r2, r4
 8011b82:	462b      	mov	r3, r5
 8011b84:	f7f2 fd12 	bl	80045ac <__aeabi_dmul>
 8011b88:	a373      	add	r3, pc, #460	; (adr r3, 8011d58 <__ieee754_pow+0x728>)
 8011b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b8e:	f7f2 fb57 	bl	8004240 <__adddf3>
 8011b92:	4622      	mov	r2, r4
 8011b94:	462b      	mov	r3, r5
 8011b96:	f7f2 fd09 	bl	80045ac <__aeabi_dmul>
 8011b9a:	a371      	add	r3, pc, #452	; (adr r3, 8011d60 <__ieee754_pow+0x730>)
 8011b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba0:	f7f2 fb4e 	bl	8004240 <__adddf3>
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460f      	mov	r7, r1
 8011baa:	462b      	mov	r3, r5
 8011bac:	4620      	mov	r0, r4
 8011bae:	4629      	mov	r1, r5
 8011bb0:	f7f2 fcfc 	bl	80045ac <__aeabi_dmul>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4630      	mov	r0, r6
 8011bba:	4639      	mov	r1, r7
 8011bbc:	f7f2 fcf6 	bl	80045ac <__aeabi_dmul>
 8011bc0:	4642      	mov	r2, r8
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	464b      	mov	r3, r9
 8011bc8:	ec51 0b18 	vmov	r0, r1, d8
 8011bcc:	f7f2 fb38 	bl	8004240 <__adddf3>
 8011bd0:	ec53 2b19 	vmov	r2, r3, d9
 8011bd4:	f7f2 fcea 	bl	80045ac <__aeabi_dmul>
 8011bd8:	4622      	mov	r2, r4
 8011bda:	462b      	mov	r3, r5
 8011bdc:	f7f2 fb30 	bl	8004240 <__adddf3>
 8011be0:	4642      	mov	r2, r8
 8011be2:	4682      	mov	sl, r0
 8011be4:	468b      	mov	fp, r1
 8011be6:	464b      	mov	r3, r9
 8011be8:	4640      	mov	r0, r8
 8011bea:	4649      	mov	r1, r9
 8011bec:	f7f2 fcde 	bl	80045ac <__aeabi_dmul>
 8011bf0:	4b6b      	ldr	r3, [pc, #428]	; (8011da0 <__ieee754_pow+0x770>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	f7f2 fb22 	bl	8004240 <__adddf3>
 8011bfc:	4652      	mov	r2, sl
 8011bfe:	465b      	mov	r3, fp
 8011c00:	f7f2 fb1e 	bl	8004240 <__adddf3>
 8011c04:	2000      	movs	r0, #0
 8011c06:	4604      	mov	r4, r0
 8011c08:	460d      	mov	r5, r1
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	4640      	mov	r0, r8
 8011c10:	4649      	mov	r1, r9
 8011c12:	f7f2 fccb 	bl	80045ac <__aeabi_dmul>
 8011c16:	4b62      	ldr	r3, [pc, #392]	; (8011da0 <__ieee754_pow+0x770>)
 8011c18:	4680      	mov	r8, r0
 8011c1a:	4689      	mov	r9, r1
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4620      	mov	r0, r4
 8011c20:	4629      	mov	r1, r5
 8011c22:	f7f2 fb0b 	bl	800423c <__aeabi_dsub>
 8011c26:	4632      	mov	r2, r6
 8011c28:	463b      	mov	r3, r7
 8011c2a:	f7f2 fb07 	bl	800423c <__aeabi_dsub>
 8011c2e:	4602      	mov	r2, r0
 8011c30:	460b      	mov	r3, r1
 8011c32:	4650      	mov	r0, sl
 8011c34:	4659      	mov	r1, fp
 8011c36:	f7f2 fb01 	bl	800423c <__aeabi_dsub>
 8011c3a:	ec53 2b18 	vmov	r2, r3, d8
 8011c3e:	f7f2 fcb5 	bl	80045ac <__aeabi_dmul>
 8011c42:	4622      	mov	r2, r4
 8011c44:	4606      	mov	r6, r0
 8011c46:	460f      	mov	r7, r1
 8011c48:	462b      	mov	r3, r5
 8011c4a:	ec51 0b19 	vmov	r0, r1, d9
 8011c4e:	f7f2 fcad 	bl	80045ac <__aeabi_dmul>
 8011c52:	4602      	mov	r2, r0
 8011c54:	460b      	mov	r3, r1
 8011c56:	4630      	mov	r0, r6
 8011c58:	4639      	mov	r1, r7
 8011c5a:	f7f2 faf1 	bl	8004240 <__adddf3>
 8011c5e:	4606      	mov	r6, r0
 8011c60:	460f      	mov	r7, r1
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	4640      	mov	r0, r8
 8011c68:	4649      	mov	r1, r9
 8011c6a:	f7f2 fae9 	bl	8004240 <__adddf3>
 8011c6e:	a33e      	add	r3, pc, #248	; (adr r3, 8011d68 <__ieee754_pow+0x738>)
 8011c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c74:	2000      	movs	r0, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	460d      	mov	r5, r1
 8011c7a:	f7f2 fc97 	bl	80045ac <__aeabi_dmul>
 8011c7e:	4642      	mov	r2, r8
 8011c80:	ec41 0b18 	vmov	d8, r0, r1
 8011c84:	464b      	mov	r3, r9
 8011c86:	4620      	mov	r0, r4
 8011c88:	4629      	mov	r1, r5
 8011c8a:	f7f2 fad7 	bl	800423c <__aeabi_dsub>
 8011c8e:	4602      	mov	r2, r0
 8011c90:	460b      	mov	r3, r1
 8011c92:	4630      	mov	r0, r6
 8011c94:	4639      	mov	r1, r7
 8011c96:	f7f2 fad1 	bl	800423c <__aeabi_dsub>
 8011c9a:	a335      	add	r3, pc, #212	; (adr r3, 8011d70 <__ieee754_pow+0x740>)
 8011c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca0:	f7f2 fc84 	bl	80045ac <__aeabi_dmul>
 8011ca4:	a334      	add	r3, pc, #208	; (adr r3, 8011d78 <__ieee754_pow+0x748>)
 8011ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011caa:	4606      	mov	r6, r0
 8011cac:	460f      	mov	r7, r1
 8011cae:	4620      	mov	r0, r4
 8011cb0:	4629      	mov	r1, r5
 8011cb2:	f7f2 fc7b 	bl	80045ac <__aeabi_dmul>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	4630      	mov	r0, r6
 8011cbc:	4639      	mov	r1, r7
 8011cbe:	f7f2 fabf 	bl	8004240 <__adddf3>
 8011cc2:	9a07      	ldr	r2, [sp, #28]
 8011cc4:	4b37      	ldr	r3, [pc, #220]	; (8011da4 <__ieee754_pow+0x774>)
 8011cc6:	4413      	add	r3, r2
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7f2 fab8 	bl	8004240 <__adddf3>
 8011cd0:	4682      	mov	sl, r0
 8011cd2:	9805      	ldr	r0, [sp, #20]
 8011cd4:	468b      	mov	fp, r1
 8011cd6:	f7f2 fbff 	bl	80044d8 <__aeabi_i2d>
 8011cda:	9a07      	ldr	r2, [sp, #28]
 8011cdc:	4b32      	ldr	r3, [pc, #200]	; (8011da8 <__ieee754_pow+0x778>)
 8011cde:	4413      	add	r3, r2
 8011ce0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ce4:	4606      	mov	r6, r0
 8011ce6:	460f      	mov	r7, r1
 8011ce8:	4652      	mov	r2, sl
 8011cea:	465b      	mov	r3, fp
 8011cec:	ec51 0b18 	vmov	r0, r1, d8
 8011cf0:	f7f2 faa6 	bl	8004240 <__adddf3>
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	464b      	mov	r3, r9
 8011cf8:	f7f2 faa2 	bl	8004240 <__adddf3>
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	f7f2 fa9e 	bl	8004240 <__adddf3>
 8011d04:	2000      	movs	r0, #0
 8011d06:	4632      	mov	r2, r6
 8011d08:	463b      	mov	r3, r7
 8011d0a:	4604      	mov	r4, r0
 8011d0c:	460d      	mov	r5, r1
 8011d0e:	f7f2 fa95 	bl	800423c <__aeabi_dsub>
 8011d12:	4642      	mov	r2, r8
 8011d14:	464b      	mov	r3, r9
 8011d16:	f7f2 fa91 	bl	800423c <__aeabi_dsub>
 8011d1a:	ec53 2b18 	vmov	r2, r3, d8
 8011d1e:	f7f2 fa8d 	bl	800423c <__aeabi_dsub>
 8011d22:	4602      	mov	r2, r0
 8011d24:	460b      	mov	r3, r1
 8011d26:	4650      	mov	r0, sl
 8011d28:	4659      	mov	r1, fp
 8011d2a:	e610      	b.n	801194e <__ieee754_pow+0x31e>
 8011d2c:	2401      	movs	r4, #1
 8011d2e:	e6a1      	b.n	8011a74 <__ieee754_pow+0x444>
 8011d30:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011d80 <__ieee754_pow+0x750>
 8011d34:	e617      	b.n	8011966 <__ieee754_pow+0x336>
 8011d36:	bf00      	nop
 8011d38:	4a454eef 	.word	0x4a454eef
 8011d3c:	3fca7e28 	.word	0x3fca7e28
 8011d40:	93c9db65 	.word	0x93c9db65
 8011d44:	3fcd864a 	.word	0x3fcd864a
 8011d48:	a91d4101 	.word	0xa91d4101
 8011d4c:	3fd17460 	.word	0x3fd17460
 8011d50:	518f264d 	.word	0x518f264d
 8011d54:	3fd55555 	.word	0x3fd55555
 8011d58:	db6fabff 	.word	0xdb6fabff
 8011d5c:	3fdb6db6 	.word	0x3fdb6db6
 8011d60:	33333303 	.word	0x33333303
 8011d64:	3fe33333 	.word	0x3fe33333
 8011d68:	e0000000 	.word	0xe0000000
 8011d6c:	3feec709 	.word	0x3feec709
 8011d70:	dc3a03fd 	.word	0xdc3a03fd
 8011d74:	3feec709 	.word	0x3feec709
 8011d78:	145b01f5 	.word	0x145b01f5
 8011d7c:	be3e2fe0 	.word	0xbe3e2fe0
 8011d80:	00000000 	.word	0x00000000
 8011d84:	3ff00000 	.word	0x3ff00000
 8011d88:	7ff00000 	.word	0x7ff00000
 8011d8c:	43400000 	.word	0x43400000
 8011d90:	0003988e 	.word	0x0003988e
 8011d94:	000bb679 	.word	0x000bb679
 8011d98:	08012508 	.word	0x08012508
 8011d9c:	3ff00000 	.word	0x3ff00000
 8011da0:	40080000 	.word	0x40080000
 8011da4:	08012528 	.word	0x08012528
 8011da8:	08012518 	.word	0x08012518
 8011dac:	a3b3      	add	r3, pc, #716	; (adr r3, 801207c <__ieee754_pow+0xa4c>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	4640      	mov	r0, r8
 8011db4:	4649      	mov	r1, r9
 8011db6:	f7f2 fa43 	bl	8004240 <__adddf3>
 8011dba:	4622      	mov	r2, r4
 8011dbc:	ec41 0b1a 	vmov	d10, r0, r1
 8011dc0:	462b      	mov	r3, r5
 8011dc2:	4630      	mov	r0, r6
 8011dc4:	4639      	mov	r1, r7
 8011dc6:	f7f2 fa39 	bl	800423c <__aeabi_dsub>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	ec51 0b1a 	vmov	r0, r1, d10
 8011dd2:	f7f2 fe7b 	bl	8004acc <__aeabi_dcmpgt>
 8011dd6:	2800      	cmp	r0, #0
 8011dd8:	f47f ae04 	bne.w	80119e4 <__ieee754_pow+0x3b4>
 8011ddc:	4aa2      	ldr	r2, [pc, #648]	; (8012068 <__ieee754_pow+0xa38>)
 8011dde:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011de2:	4293      	cmp	r3, r2
 8011de4:	f340 8107 	ble.w	8011ff6 <__ieee754_pow+0x9c6>
 8011de8:	151b      	asrs	r3, r3, #20
 8011dea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011dee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011df2:	fa4a fa03 	asr.w	sl, sl, r3
 8011df6:	44da      	add	sl, fp
 8011df8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011dfc:	489b      	ldr	r0, [pc, #620]	; (801206c <__ieee754_pow+0xa3c>)
 8011dfe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011e02:	4108      	asrs	r0, r1
 8011e04:	ea00 030a 	and.w	r3, r0, sl
 8011e08:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011e0c:	f1c1 0114 	rsb	r1, r1, #20
 8011e10:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011e14:	fa4a fa01 	asr.w	sl, sl, r1
 8011e18:	f1bb 0f00 	cmp.w	fp, #0
 8011e1c:	f04f 0200 	mov.w	r2, #0
 8011e20:	4620      	mov	r0, r4
 8011e22:	4629      	mov	r1, r5
 8011e24:	bfb8      	it	lt
 8011e26:	f1ca 0a00 	rsblt	sl, sl, #0
 8011e2a:	f7f2 fa07 	bl	800423c <__aeabi_dsub>
 8011e2e:	ec41 0b19 	vmov	d9, r0, r1
 8011e32:	4642      	mov	r2, r8
 8011e34:	464b      	mov	r3, r9
 8011e36:	ec51 0b19 	vmov	r0, r1, d9
 8011e3a:	f7f2 fa01 	bl	8004240 <__adddf3>
 8011e3e:	a37a      	add	r3, pc, #488	; (adr r3, 8012028 <__ieee754_pow+0x9f8>)
 8011e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e44:	2000      	movs	r0, #0
 8011e46:	4604      	mov	r4, r0
 8011e48:	460d      	mov	r5, r1
 8011e4a:	f7f2 fbaf 	bl	80045ac <__aeabi_dmul>
 8011e4e:	ec53 2b19 	vmov	r2, r3, d9
 8011e52:	4606      	mov	r6, r0
 8011e54:	460f      	mov	r7, r1
 8011e56:	4620      	mov	r0, r4
 8011e58:	4629      	mov	r1, r5
 8011e5a:	f7f2 f9ef 	bl	800423c <__aeabi_dsub>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	460b      	mov	r3, r1
 8011e62:	4640      	mov	r0, r8
 8011e64:	4649      	mov	r1, r9
 8011e66:	f7f2 f9e9 	bl	800423c <__aeabi_dsub>
 8011e6a:	a371      	add	r3, pc, #452	; (adr r3, 8012030 <__ieee754_pow+0xa00>)
 8011e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e70:	f7f2 fb9c 	bl	80045ac <__aeabi_dmul>
 8011e74:	a370      	add	r3, pc, #448	; (adr r3, 8012038 <__ieee754_pow+0xa08>)
 8011e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7a:	4680      	mov	r8, r0
 8011e7c:	4689      	mov	r9, r1
 8011e7e:	4620      	mov	r0, r4
 8011e80:	4629      	mov	r1, r5
 8011e82:	f7f2 fb93 	bl	80045ac <__aeabi_dmul>
 8011e86:	4602      	mov	r2, r0
 8011e88:	460b      	mov	r3, r1
 8011e8a:	4640      	mov	r0, r8
 8011e8c:	4649      	mov	r1, r9
 8011e8e:	f7f2 f9d7 	bl	8004240 <__adddf3>
 8011e92:	4604      	mov	r4, r0
 8011e94:	460d      	mov	r5, r1
 8011e96:	4602      	mov	r2, r0
 8011e98:	460b      	mov	r3, r1
 8011e9a:	4630      	mov	r0, r6
 8011e9c:	4639      	mov	r1, r7
 8011e9e:	f7f2 f9cf 	bl	8004240 <__adddf3>
 8011ea2:	4632      	mov	r2, r6
 8011ea4:	463b      	mov	r3, r7
 8011ea6:	4680      	mov	r8, r0
 8011ea8:	4689      	mov	r9, r1
 8011eaa:	f7f2 f9c7 	bl	800423c <__aeabi_dsub>
 8011eae:	4602      	mov	r2, r0
 8011eb0:	460b      	mov	r3, r1
 8011eb2:	4620      	mov	r0, r4
 8011eb4:	4629      	mov	r1, r5
 8011eb6:	f7f2 f9c1 	bl	800423c <__aeabi_dsub>
 8011eba:	4642      	mov	r2, r8
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	460f      	mov	r7, r1
 8011ec0:	464b      	mov	r3, r9
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	f7f2 fb71 	bl	80045ac <__aeabi_dmul>
 8011eca:	a35d      	add	r3, pc, #372	; (adr r3, 8012040 <__ieee754_pow+0xa10>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	460d      	mov	r5, r1
 8011ed4:	f7f2 fb6a 	bl	80045ac <__aeabi_dmul>
 8011ed8:	a35b      	add	r3, pc, #364	; (adr r3, 8012048 <__ieee754_pow+0xa18>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7f2 f9ad 	bl	800423c <__aeabi_dsub>
 8011ee2:	4622      	mov	r2, r4
 8011ee4:	462b      	mov	r3, r5
 8011ee6:	f7f2 fb61 	bl	80045ac <__aeabi_dmul>
 8011eea:	a359      	add	r3, pc, #356	; (adr r3, 8012050 <__ieee754_pow+0xa20>)
 8011eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef0:	f7f2 f9a6 	bl	8004240 <__adddf3>
 8011ef4:	4622      	mov	r2, r4
 8011ef6:	462b      	mov	r3, r5
 8011ef8:	f7f2 fb58 	bl	80045ac <__aeabi_dmul>
 8011efc:	a356      	add	r3, pc, #344	; (adr r3, 8012058 <__ieee754_pow+0xa28>)
 8011efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f02:	f7f2 f99b 	bl	800423c <__aeabi_dsub>
 8011f06:	4622      	mov	r2, r4
 8011f08:	462b      	mov	r3, r5
 8011f0a:	f7f2 fb4f 	bl	80045ac <__aeabi_dmul>
 8011f0e:	a354      	add	r3, pc, #336	; (adr r3, 8012060 <__ieee754_pow+0xa30>)
 8011f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f14:	f7f2 f994 	bl	8004240 <__adddf3>
 8011f18:	4622      	mov	r2, r4
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	f7f2 fb46 	bl	80045ac <__aeabi_dmul>
 8011f20:	4602      	mov	r2, r0
 8011f22:	460b      	mov	r3, r1
 8011f24:	4640      	mov	r0, r8
 8011f26:	4649      	mov	r1, r9
 8011f28:	f7f2 f988 	bl	800423c <__aeabi_dsub>
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	460d      	mov	r5, r1
 8011f30:	4602      	mov	r2, r0
 8011f32:	460b      	mov	r3, r1
 8011f34:	4640      	mov	r0, r8
 8011f36:	4649      	mov	r1, r9
 8011f38:	f7f2 fb38 	bl	80045ac <__aeabi_dmul>
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	ec41 0b19 	vmov	d9, r0, r1
 8011f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f46:	4620      	mov	r0, r4
 8011f48:	4629      	mov	r1, r5
 8011f4a:	f7f2 f977 	bl	800423c <__aeabi_dsub>
 8011f4e:	4602      	mov	r2, r0
 8011f50:	460b      	mov	r3, r1
 8011f52:	ec51 0b19 	vmov	r0, r1, d9
 8011f56:	f7f2 fc53 	bl	8004800 <__aeabi_ddiv>
 8011f5a:	4632      	mov	r2, r6
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	460d      	mov	r5, r1
 8011f60:	463b      	mov	r3, r7
 8011f62:	4640      	mov	r0, r8
 8011f64:	4649      	mov	r1, r9
 8011f66:	f7f2 fb21 	bl	80045ac <__aeabi_dmul>
 8011f6a:	4632      	mov	r2, r6
 8011f6c:	463b      	mov	r3, r7
 8011f6e:	f7f2 f967 	bl	8004240 <__adddf3>
 8011f72:	4602      	mov	r2, r0
 8011f74:	460b      	mov	r3, r1
 8011f76:	4620      	mov	r0, r4
 8011f78:	4629      	mov	r1, r5
 8011f7a:	f7f2 f95f 	bl	800423c <__aeabi_dsub>
 8011f7e:	4642      	mov	r2, r8
 8011f80:	464b      	mov	r3, r9
 8011f82:	f7f2 f95b 	bl	800423c <__aeabi_dsub>
 8011f86:	460b      	mov	r3, r1
 8011f88:	4602      	mov	r2, r0
 8011f8a:	4939      	ldr	r1, [pc, #228]	; (8012070 <__ieee754_pow+0xa40>)
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7f2 f955 	bl	800423c <__aeabi_dsub>
 8011f92:	ec41 0b10 	vmov	d0, r0, r1
 8011f96:	ee10 3a90 	vmov	r3, s1
 8011f9a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fa2:	da2b      	bge.n	8011ffc <__ieee754_pow+0x9cc>
 8011fa4:	4650      	mov	r0, sl
 8011fa6:	f000 f877 	bl	8012098 <scalbn>
 8011faa:	ec51 0b10 	vmov	r0, r1, d0
 8011fae:	ec53 2b18 	vmov	r2, r3, d8
 8011fb2:	f7ff bbee 	b.w	8011792 <__ieee754_pow+0x162>
 8011fb6:	4b2f      	ldr	r3, [pc, #188]	; (8012074 <__ieee754_pow+0xa44>)
 8011fb8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011fbc:	429e      	cmp	r6, r3
 8011fbe:	f77f af0d 	ble.w	8011ddc <__ieee754_pow+0x7ac>
 8011fc2:	4b2d      	ldr	r3, [pc, #180]	; (8012078 <__ieee754_pow+0xa48>)
 8011fc4:	440b      	add	r3, r1
 8011fc6:	4303      	orrs	r3, r0
 8011fc8:	d009      	beq.n	8011fde <__ieee754_pow+0x9ae>
 8011fca:	ec51 0b18 	vmov	r0, r1, d8
 8011fce:	2200      	movs	r2, #0
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f7f2 fd5d 	bl	8004a90 <__aeabi_dcmplt>
 8011fd6:	3800      	subs	r0, #0
 8011fd8:	bf18      	it	ne
 8011fda:	2001      	movne	r0, #1
 8011fdc:	e448      	b.n	8011870 <__ieee754_pow+0x240>
 8011fde:	4622      	mov	r2, r4
 8011fe0:	462b      	mov	r3, r5
 8011fe2:	f7f2 f92b 	bl	800423c <__aeabi_dsub>
 8011fe6:	4642      	mov	r2, r8
 8011fe8:	464b      	mov	r3, r9
 8011fea:	f7f2 fd65 	bl	8004ab8 <__aeabi_dcmpge>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f43f aef4 	beq.w	8011ddc <__ieee754_pow+0x7ac>
 8011ff4:	e7e9      	b.n	8011fca <__ieee754_pow+0x99a>
 8011ff6:	f04f 0a00 	mov.w	sl, #0
 8011ffa:	e71a      	b.n	8011e32 <__ieee754_pow+0x802>
 8011ffc:	ec51 0b10 	vmov	r0, r1, d0
 8012000:	4619      	mov	r1, r3
 8012002:	e7d4      	b.n	8011fae <__ieee754_pow+0x97e>
 8012004:	491a      	ldr	r1, [pc, #104]	; (8012070 <__ieee754_pow+0xa40>)
 8012006:	2000      	movs	r0, #0
 8012008:	f7ff bb31 	b.w	801166e <__ieee754_pow+0x3e>
 801200c:	2000      	movs	r0, #0
 801200e:	2100      	movs	r1, #0
 8012010:	f7ff bb2d 	b.w	801166e <__ieee754_pow+0x3e>
 8012014:	4630      	mov	r0, r6
 8012016:	4639      	mov	r1, r7
 8012018:	f7ff bb29 	b.w	801166e <__ieee754_pow+0x3e>
 801201c:	9204      	str	r2, [sp, #16]
 801201e:	f7ff bb7b 	b.w	8011718 <__ieee754_pow+0xe8>
 8012022:	2300      	movs	r3, #0
 8012024:	f7ff bb65 	b.w	80116f2 <__ieee754_pow+0xc2>
 8012028:	00000000 	.word	0x00000000
 801202c:	3fe62e43 	.word	0x3fe62e43
 8012030:	fefa39ef 	.word	0xfefa39ef
 8012034:	3fe62e42 	.word	0x3fe62e42
 8012038:	0ca86c39 	.word	0x0ca86c39
 801203c:	be205c61 	.word	0xbe205c61
 8012040:	72bea4d0 	.word	0x72bea4d0
 8012044:	3e663769 	.word	0x3e663769
 8012048:	c5d26bf1 	.word	0xc5d26bf1
 801204c:	3ebbbd41 	.word	0x3ebbbd41
 8012050:	af25de2c 	.word	0xaf25de2c
 8012054:	3f11566a 	.word	0x3f11566a
 8012058:	16bebd93 	.word	0x16bebd93
 801205c:	3f66c16c 	.word	0x3f66c16c
 8012060:	5555553e 	.word	0x5555553e
 8012064:	3fc55555 	.word	0x3fc55555
 8012068:	3fe00000 	.word	0x3fe00000
 801206c:	fff00000 	.word	0xfff00000
 8012070:	3ff00000 	.word	0x3ff00000
 8012074:	4090cbff 	.word	0x4090cbff
 8012078:	3f6f3400 	.word	0x3f6f3400
 801207c:	652b82fe 	.word	0x652b82fe
 8012080:	3c971547 	.word	0x3c971547

08012084 <fabs>:
 8012084:	ec51 0b10 	vmov	r0, r1, d0
 8012088:	ee10 2a10 	vmov	r2, s0
 801208c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012090:	ec43 2b10 	vmov	d0, r2, r3
 8012094:	4770      	bx	lr
	...

08012098 <scalbn>:
 8012098:	b570      	push	{r4, r5, r6, lr}
 801209a:	ec55 4b10 	vmov	r4, r5, d0
 801209e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80120a2:	4606      	mov	r6, r0
 80120a4:	462b      	mov	r3, r5
 80120a6:	b999      	cbnz	r1, 80120d0 <scalbn+0x38>
 80120a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80120ac:	4323      	orrs	r3, r4
 80120ae:	d03f      	beq.n	8012130 <scalbn+0x98>
 80120b0:	4b35      	ldr	r3, [pc, #212]	; (8012188 <scalbn+0xf0>)
 80120b2:	4629      	mov	r1, r5
 80120b4:	ee10 0a10 	vmov	r0, s0
 80120b8:	2200      	movs	r2, #0
 80120ba:	f7f2 fa77 	bl	80045ac <__aeabi_dmul>
 80120be:	4b33      	ldr	r3, [pc, #204]	; (801218c <scalbn+0xf4>)
 80120c0:	429e      	cmp	r6, r3
 80120c2:	4604      	mov	r4, r0
 80120c4:	460d      	mov	r5, r1
 80120c6:	da10      	bge.n	80120ea <scalbn+0x52>
 80120c8:	a327      	add	r3, pc, #156	; (adr r3, 8012168 <scalbn+0xd0>)
 80120ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ce:	e01f      	b.n	8012110 <scalbn+0x78>
 80120d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80120d4:	4291      	cmp	r1, r2
 80120d6:	d10c      	bne.n	80120f2 <scalbn+0x5a>
 80120d8:	ee10 2a10 	vmov	r2, s0
 80120dc:	4620      	mov	r0, r4
 80120de:	4629      	mov	r1, r5
 80120e0:	f7f2 f8ae 	bl	8004240 <__adddf3>
 80120e4:	4604      	mov	r4, r0
 80120e6:	460d      	mov	r5, r1
 80120e8:	e022      	b.n	8012130 <scalbn+0x98>
 80120ea:	460b      	mov	r3, r1
 80120ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80120f0:	3936      	subs	r1, #54	; 0x36
 80120f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80120f6:	4296      	cmp	r6, r2
 80120f8:	dd0d      	ble.n	8012116 <scalbn+0x7e>
 80120fa:	2d00      	cmp	r5, #0
 80120fc:	a11c      	add	r1, pc, #112	; (adr r1, 8012170 <scalbn+0xd8>)
 80120fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012102:	da02      	bge.n	801210a <scalbn+0x72>
 8012104:	a11c      	add	r1, pc, #112	; (adr r1, 8012178 <scalbn+0xe0>)
 8012106:	e9d1 0100 	ldrd	r0, r1, [r1]
 801210a:	a319      	add	r3, pc, #100	; (adr r3, 8012170 <scalbn+0xd8>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7f2 fa4c 	bl	80045ac <__aeabi_dmul>
 8012114:	e7e6      	b.n	80120e4 <scalbn+0x4c>
 8012116:	1872      	adds	r2, r6, r1
 8012118:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801211c:	428a      	cmp	r2, r1
 801211e:	dcec      	bgt.n	80120fa <scalbn+0x62>
 8012120:	2a00      	cmp	r2, #0
 8012122:	dd08      	ble.n	8012136 <scalbn+0x9e>
 8012124:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012128:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801212c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012130:	ec45 4b10 	vmov	d0, r4, r5
 8012134:	bd70      	pop	{r4, r5, r6, pc}
 8012136:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801213a:	da08      	bge.n	801214e <scalbn+0xb6>
 801213c:	2d00      	cmp	r5, #0
 801213e:	a10a      	add	r1, pc, #40	; (adr r1, 8012168 <scalbn+0xd0>)
 8012140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012144:	dac0      	bge.n	80120c8 <scalbn+0x30>
 8012146:	a10e      	add	r1, pc, #56	; (adr r1, 8012180 <scalbn+0xe8>)
 8012148:	e9d1 0100 	ldrd	r0, r1, [r1]
 801214c:	e7bc      	b.n	80120c8 <scalbn+0x30>
 801214e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012152:	3236      	adds	r2, #54	; 0x36
 8012154:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012158:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801215c:	4620      	mov	r0, r4
 801215e:	4b0c      	ldr	r3, [pc, #48]	; (8012190 <scalbn+0xf8>)
 8012160:	2200      	movs	r2, #0
 8012162:	e7d5      	b.n	8012110 <scalbn+0x78>
 8012164:	f3af 8000 	nop.w
 8012168:	c2f8f359 	.word	0xc2f8f359
 801216c:	01a56e1f 	.word	0x01a56e1f
 8012170:	8800759c 	.word	0x8800759c
 8012174:	7e37e43c 	.word	0x7e37e43c
 8012178:	8800759c 	.word	0x8800759c
 801217c:	fe37e43c 	.word	0xfe37e43c
 8012180:	c2f8f359 	.word	0xc2f8f359
 8012184:	81a56e1f 	.word	0x81a56e1f
 8012188:	43500000 	.word	0x43500000
 801218c:	ffff3cb0 	.word	0xffff3cb0
 8012190:	3c900000 	.word	0x3c900000

08012194 <with_errno>:
 8012194:	b570      	push	{r4, r5, r6, lr}
 8012196:	4604      	mov	r4, r0
 8012198:	460d      	mov	r5, r1
 801219a:	4616      	mov	r6, r2
 801219c:	f7ff f93a 	bl	8011414 <__errno>
 80121a0:	4629      	mov	r1, r5
 80121a2:	6006      	str	r6, [r0, #0]
 80121a4:	4620      	mov	r0, r4
 80121a6:	bd70      	pop	{r4, r5, r6, pc}

080121a8 <xflow>:
 80121a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80121aa:	4614      	mov	r4, r2
 80121ac:	461d      	mov	r5, r3
 80121ae:	b108      	cbz	r0, 80121b4 <xflow+0xc>
 80121b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80121b4:	e9cd 2300 	strd	r2, r3, [sp]
 80121b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80121bc:	4620      	mov	r0, r4
 80121be:	4629      	mov	r1, r5
 80121c0:	f7f2 f9f4 	bl	80045ac <__aeabi_dmul>
 80121c4:	2222      	movs	r2, #34	; 0x22
 80121c6:	b003      	add	sp, #12
 80121c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80121cc:	f7ff bfe2 	b.w	8012194 <with_errno>

080121d0 <__math_uflow>:
 80121d0:	b508      	push	{r3, lr}
 80121d2:	2200      	movs	r2, #0
 80121d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121d8:	f7ff ffe6 	bl	80121a8 <xflow>
 80121dc:	ec41 0b10 	vmov	d0, r0, r1
 80121e0:	bd08      	pop	{r3, pc}

080121e2 <__math_oflow>:
 80121e2:	b508      	push	{r3, lr}
 80121e4:	2200      	movs	r2, #0
 80121e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80121ea:	f7ff ffdd 	bl	80121a8 <xflow>
 80121ee:	ec41 0b10 	vmov	d0, r0, r1
 80121f2:	bd08      	pop	{r3, pc}

080121f4 <__ieee754_sqrt>:
 80121f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121f8:	ec55 4b10 	vmov	r4, r5, d0
 80121fc:	4e67      	ldr	r6, [pc, #412]	; (801239c <__ieee754_sqrt+0x1a8>)
 80121fe:	43ae      	bics	r6, r5
 8012200:	ee10 0a10 	vmov	r0, s0
 8012204:	ee10 2a10 	vmov	r2, s0
 8012208:	4629      	mov	r1, r5
 801220a:	462b      	mov	r3, r5
 801220c:	d10d      	bne.n	801222a <__ieee754_sqrt+0x36>
 801220e:	f7f2 f9cd 	bl	80045ac <__aeabi_dmul>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	4620      	mov	r0, r4
 8012218:	4629      	mov	r1, r5
 801221a:	f7f2 f811 	bl	8004240 <__adddf3>
 801221e:	4604      	mov	r4, r0
 8012220:	460d      	mov	r5, r1
 8012222:	ec45 4b10 	vmov	d0, r4, r5
 8012226:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801222a:	2d00      	cmp	r5, #0
 801222c:	dc0b      	bgt.n	8012246 <__ieee754_sqrt+0x52>
 801222e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012232:	4326      	orrs	r6, r4
 8012234:	d0f5      	beq.n	8012222 <__ieee754_sqrt+0x2e>
 8012236:	b135      	cbz	r5, 8012246 <__ieee754_sqrt+0x52>
 8012238:	f7f2 f800 	bl	800423c <__aeabi_dsub>
 801223c:	4602      	mov	r2, r0
 801223e:	460b      	mov	r3, r1
 8012240:	f7f2 fade 	bl	8004800 <__aeabi_ddiv>
 8012244:	e7eb      	b.n	801221e <__ieee754_sqrt+0x2a>
 8012246:	1509      	asrs	r1, r1, #20
 8012248:	f000 808d 	beq.w	8012366 <__ieee754_sqrt+0x172>
 801224c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012250:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012258:	07c9      	lsls	r1, r1, #31
 801225a:	bf5c      	itt	pl
 801225c:	005b      	lslpl	r3, r3, #1
 801225e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8012262:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012266:	bf58      	it	pl
 8012268:	0052      	lslpl	r2, r2, #1
 801226a:	2500      	movs	r5, #0
 801226c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012270:	1076      	asrs	r6, r6, #1
 8012272:	0052      	lsls	r2, r2, #1
 8012274:	f04f 0e16 	mov.w	lr, #22
 8012278:	46ac      	mov	ip, r5
 801227a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801227e:	eb0c 0001 	add.w	r0, ip, r1
 8012282:	4298      	cmp	r0, r3
 8012284:	bfde      	ittt	le
 8012286:	1a1b      	suble	r3, r3, r0
 8012288:	eb00 0c01 	addle.w	ip, r0, r1
 801228c:	186d      	addle	r5, r5, r1
 801228e:	005b      	lsls	r3, r3, #1
 8012290:	f1be 0e01 	subs.w	lr, lr, #1
 8012294:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012298:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801229c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80122a0:	d1ed      	bne.n	801227e <__ieee754_sqrt+0x8a>
 80122a2:	4674      	mov	r4, lr
 80122a4:	2720      	movs	r7, #32
 80122a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80122aa:	4563      	cmp	r3, ip
 80122ac:	eb01 000e 	add.w	r0, r1, lr
 80122b0:	dc02      	bgt.n	80122b8 <__ieee754_sqrt+0xc4>
 80122b2:	d113      	bne.n	80122dc <__ieee754_sqrt+0xe8>
 80122b4:	4290      	cmp	r0, r2
 80122b6:	d811      	bhi.n	80122dc <__ieee754_sqrt+0xe8>
 80122b8:	2800      	cmp	r0, #0
 80122ba:	eb00 0e01 	add.w	lr, r0, r1
 80122be:	da57      	bge.n	8012370 <__ieee754_sqrt+0x17c>
 80122c0:	f1be 0f00 	cmp.w	lr, #0
 80122c4:	db54      	blt.n	8012370 <__ieee754_sqrt+0x17c>
 80122c6:	f10c 0801 	add.w	r8, ip, #1
 80122ca:	eba3 030c 	sub.w	r3, r3, ip
 80122ce:	4290      	cmp	r0, r2
 80122d0:	bf88      	it	hi
 80122d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80122d6:	1a12      	subs	r2, r2, r0
 80122d8:	440c      	add	r4, r1
 80122da:	46c4      	mov	ip, r8
 80122dc:	005b      	lsls	r3, r3, #1
 80122de:	3f01      	subs	r7, #1
 80122e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80122e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80122e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80122ec:	d1dd      	bne.n	80122aa <__ieee754_sqrt+0xb6>
 80122ee:	4313      	orrs	r3, r2
 80122f0:	d01b      	beq.n	801232a <__ieee754_sqrt+0x136>
 80122f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80123a0 <__ieee754_sqrt+0x1ac>
 80122f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80123a4 <__ieee754_sqrt+0x1b0>
 80122fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80122fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8012302:	f7f1 ff9b 	bl	800423c <__aeabi_dsub>
 8012306:	e9da 8900 	ldrd	r8, r9, [sl]
 801230a:	4602      	mov	r2, r0
 801230c:	460b      	mov	r3, r1
 801230e:	4640      	mov	r0, r8
 8012310:	4649      	mov	r1, r9
 8012312:	f7f2 fbc7 	bl	8004aa4 <__aeabi_dcmple>
 8012316:	b140      	cbz	r0, 801232a <__ieee754_sqrt+0x136>
 8012318:	f1b4 3fff 	cmp.w	r4, #4294967295
 801231c:	e9da 0100 	ldrd	r0, r1, [sl]
 8012320:	e9db 2300 	ldrd	r2, r3, [fp]
 8012324:	d126      	bne.n	8012374 <__ieee754_sqrt+0x180>
 8012326:	3501      	adds	r5, #1
 8012328:	463c      	mov	r4, r7
 801232a:	106a      	asrs	r2, r5, #1
 801232c:	0863      	lsrs	r3, r4, #1
 801232e:	07e9      	lsls	r1, r5, #31
 8012330:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012334:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012338:	bf48      	it	mi
 801233a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801233e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8012342:	461c      	mov	r4, r3
 8012344:	e76d      	b.n	8012222 <__ieee754_sqrt+0x2e>
 8012346:	0ad3      	lsrs	r3, r2, #11
 8012348:	3815      	subs	r0, #21
 801234a:	0552      	lsls	r2, r2, #21
 801234c:	2b00      	cmp	r3, #0
 801234e:	d0fa      	beq.n	8012346 <__ieee754_sqrt+0x152>
 8012350:	02dc      	lsls	r4, r3, #11
 8012352:	d50a      	bpl.n	801236a <__ieee754_sqrt+0x176>
 8012354:	f1c1 0420 	rsb	r4, r1, #32
 8012358:	fa22 f404 	lsr.w	r4, r2, r4
 801235c:	1e4d      	subs	r5, r1, #1
 801235e:	408a      	lsls	r2, r1
 8012360:	4323      	orrs	r3, r4
 8012362:	1b41      	subs	r1, r0, r5
 8012364:	e772      	b.n	801224c <__ieee754_sqrt+0x58>
 8012366:	4608      	mov	r0, r1
 8012368:	e7f0      	b.n	801234c <__ieee754_sqrt+0x158>
 801236a:	005b      	lsls	r3, r3, #1
 801236c:	3101      	adds	r1, #1
 801236e:	e7ef      	b.n	8012350 <__ieee754_sqrt+0x15c>
 8012370:	46e0      	mov	r8, ip
 8012372:	e7aa      	b.n	80122ca <__ieee754_sqrt+0xd6>
 8012374:	f7f1 ff64 	bl	8004240 <__adddf3>
 8012378:	e9da 8900 	ldrd	r8, r9, [sl]
 801237c:	4602      	mov	r2, r0
 801237e:	460b      	mov	r3, r1
 8012380:	4640      	mov	r0, r8
 8012382:	4649      	mov	r1, r9
 8012384:	f7f2 fb84 	bl	8004a90 <__aeabi_dcmplt>
 8012388:	b120      	cbz	r0, 8012394 <__ieee754_sqrt+0x1a0>
 801238a:	1ca0      	adds	r0, r4, #2
 801238c:	bf08      	it	eq
 801238e:	3501      	addeq	r5, #1
 8012390:	3402      	adds	r4, #2
 8012392:	e7ca      	b.n	801232a <__ieee754_sqrt+0x136>
 8012394:	3401      	adds	r4, #1
 8012396:	f024 0401 	bic.w	r4, r4, #1
 801239a:	e7c6      	b.n	801232a <__ieee754_sqrt+0x136>
 801239c:	7ff00000 	.word	0x7ff00000
 80123a0:	20000068 	.word	0x20000068
 80123a4:	20000070 	.word	0x20000070

080123a8 <_init>:
 80123a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123aa:	bf00      	nop
 80123ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ae:	bc08      	pop	{r3}
 80123b0:	469e      	mov	lr, r3
 80123b2:	4770      	bx	lr

080123b4 <_fini>:
 80123b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123b6:	bf00      	nop
 80123b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ba:	bc08      	pop	{r3}
 80123bc:	469e      	mov	lr, r3
 80123be:	4770      	bx	lr
